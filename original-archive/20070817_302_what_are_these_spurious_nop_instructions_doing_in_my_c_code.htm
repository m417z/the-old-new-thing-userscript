<html>
<head>
<title>What are these spurious nop instructions doing in my C# code?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What are these spurious nop instructions doing in my C# code?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 17, 2007 / year-entry #303</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>31</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Prerequisites: Basic understanding of assembly language. When you debug through some managed code at the assembly level, you may find that there are an awful lot of nop instructions scattered throughout your method. What are they doing there; isn't the JIT smart enough to remove them? Isn't this going to slow down execution of my...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><i>Prerequisites: Basic understanding of assembly language.</i></p>
<p> When you debug through some managed code at the assembly level, you may find that there are an awful lot of <code>nop</code> instructions scattered throughout your method. What are they doing there; isn't the JIT smart enough to remove them? Isn't this going to slow down execution of my program? </p>
<p> It is my understanding that&sup1; this <code>nop</code> instructions are inserted by the JIT because you're running the program under the debugger. They are emitted specifically so that the debugger can set breakpoints in locations that you normally wouldn't be able to. (For example, they might represent a line of code that got optimized out or merged with another line of code.) </p>
<p> Don't worry. If there's no debugger, the JIT won't generate the dummy <code>nop</code>s. </p>
<p> <b>Nitpicker's Corner</b> </p>
<p> &sup1;As with all statements of alleged fact, this statement is an interpretation of events based on observation and thought and does not establish a <a href="http://blogs.msdn.com/oldnewthing/archive/2007/08/10/4315707.aspx#4327521"> statement of the official position</a> of the CLR JIT compiler team or Microsoft Corporation, and that interpretation may ultimately prove incorrect. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-538313">
				<div id="div-comment-538313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mccoyn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538313">
			August 17, 2007 at 10:25 am</a>		</div>

		<p>My guess is it has very little to no impact on execution time. &nbsp;Its been a while since I studied them, but I think most processors have an out-of-order execution scheduler that intercepts all instructs and decides when and where they will be executed. &nbsp;It also throws away any nop it finds and even adds some if it feels the rest of the processor can&#8217;t handle a particular order of instructions. &nbsp;The impact would then only be on size and loading time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-538323">
				<div id="div-comment-538323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538323">
			August 17, 2007 at 10:26 am</a>		</div>

		<p>As it&#8217;s not always possible to tell if you&#8217;ve turned certain optimizations on, a few extra NOPs would come in handy when generating void (or ignored result) calls with debugging information, so that the stack frame still points to the line of the call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-538403">
				<div id="div-comment-538403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538403">
			August 17, 2007 at 11:40 am</a>		</div>

		<p>mccoyn &#8212; mostly true, but not entirely. &nbsp;There will be an impact on more than just the size of the code and loading time: the L1 code cache will have to store the NOPs, since (AFAIK anyway) L1 caches the &quot;real&quot; code bytes, not the microcode. &nbsp;Since L1 is storing the NOPs, it&#8217;ll have to push out some other useful code.</p>
<p>And when memory is so much slower than the processor, and getting worse, the size of your code (meaning the amount that you can get done without missing in the cache) is getting to be more important than the speed of your code.</p>
<p>Of course these NOPs only happen when you have a debugger attached, so it doesn&#8217;t matter anyway. &nbsp;But in general, anything that affects size is also going to affect speed, via the cache. &nbsp;Out-of-order and speculative execution or not; the cost of an actual executed NOP is tiny compared to waiting for main memory because you missed in both the L1 and L2 caches.</p>
<p>(An exclusive cache has a slight edge in this case, since there&#8217;s a slightly higher chance that the code is still in the L2 cache (because the contents of the L1 cache aren&#8217;t also taking up space in L2). &nbsp;But even waiting for the L2 cache will take more than one clock cycle, I think, and a NOP only takes one clock to execute.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-538413">
				<div id="div-comment-538413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538413">
			August 17, 2007 at 11:49 am</a>		</div>

		<p>In spite of your disclaimer, I&#8217;m still going to assume that this is Microsoft&#8217;s official position. &nbsp;In addition, I will be filing a bug report with the CLR JIT compiler team and referencing this blog in it. &nbsp;Good day, sir.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-538433">
				<div id="div-comment-538433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alex.r.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538433">
			August 17, 2007 at 12:10 pm</a>		</div>

		<blockquote><p>
  since (AFAIK anyway) L1 caches the &quot;real&quot; code bytes, not the microcode
</p></blockquote>
<p>Although this is generally the case, it is not strictly true. On the P4 for instance, the L1 cache (the &#8216;trace cache&#8217;) stored decoded instructions.</p>
<p>But it does not really matter either way I guess, as these NOPs are certainly not the even close to being the main performance bottleneck when running your application under a debugger.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-grantri odd alt thread-odd thread-alt depth-1" id="comment-538463">
				<div id="div-comment-538463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Grant+Richins' rel='external nofollow' class='url'>Grant Richins</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538463">
			August 17, 2007 at 12:26 pm</a>		</div>

		<p>For the x64 and ia64 2.0 CLR JIT, it also inserts NOPs to align loops (some processors execute a backwards branch &#8216;faster&#8217; if it is on a 16-byte boundary), and to accomodate certain unwind semmantics (so you&#8217;ll see them after between calls and EH boundaries, like the end of a try body). &nbsp;Again this is not guaranteed behavior, or the official MS position, etc., it&#8217;s just an FYI for the curious.</p>
<p>&#8211;Grant</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-danielmoth even thread-even depth-1" id="comment-538473">
				<div id="div-comment-538473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DanielMoth' rel='external nofollow' class='url'>DanielMoth</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538473">
			August 17, 2007 at 12:33 pm</a>		</div>

		<p>FYI, I believe the canonical example for nop operation usage is placing a breakpoint on a curly brace.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-538493">
				<div id="div-comment-538493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericlippert/archive/2007/08/17/subtleties-of-c-il-codegen.aspx' rel='external nofollow' class='url'>Fabulous Adventures In Coding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538493">
			August 17, 2007 at 12:36 pm</a>		</div>

		<p>It must be CLR week over at The Old New Thing because it&#8217;s been non-stop posts about C# lately. Raymond&#8217;s</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-538503">
				<div id="div-comment-538503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538503">
			August 17, 2007 at 12:48 pm</a>		</div>

		<p>OK, why would you bother to allow someone to put a breakpoint on a curly brace? As far as I can tell, that would have the same effect as having a breakpoint on a blank line. You can&#8217;t put breakpoints on blank lines, can you?</p>
<p>Assuming you can&#8217;t put breakpoints on blank lines, can anyone figure out what advantage putting a breakpoint on a curly brace give you?</p>
<p>Hmmmm&#8230;..given:</p>
<p>if (x) {</p>
<p>&nbsp; &nbsp;foo();</p>
<p>}</p>
<p>would you expect a breakpoint on the &quot;}&quot; to fire if x was true, if x was not true, or both?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert odd alt thread-odd thread-alt depth-1" id="comment-538513">
				<div id="div-comment-538513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538513">
			August 17, 2007 at 12:54 pm</a>		</div>

		<blockquote><p>
  OK, why would you bother to allow someone to put a breakpoint on a curly brace?
</p></blockquote>
<p>I frequently want to set a breakpoint AFTER something happens, not before. How do you do that if the &quot;something happens&quot; is the LAST thing that happens?</p>
<p>void M() {</p>
<p>&nbsp;this.x = Blah();</p>
<p>}</p>
<p>How are you going to inspect the value of this.x unless you can put a breakpoint AFTER the call to Blah()?</p>
<p>That&#8217;s why we let you put a breakpoint on the curly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert even thread-even depth-1" id="comment-538523">
				<div id="div-comment-538523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538523">
			August 17, 2007 at 12:56 pm</a>		</div>

		<p>And that of course answers your question. The breakpoint would be hit iff x is true, because the curly &quot;runs&quot; after the call to foo().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-538553">
				<div id="div-comment-538553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.rolpdog.com' rel='external nofollow' class='url'>Matt Davis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538553">
			August 17, 2007 at 1:03 pm</a>		</div>

		<p>&quot;Don&#8217;t worry. If there&#8217;s no debugger, the JIT won&#8217;t generate the dummy nops.&quot;</p>
<p>Sure, and the fridge light really goes out when you shut the door&#8230; ;)</p>
<p>But seriously, Raymond, thanks for continuing to blog in the face of a-holes, and flinging a little poo at them while you&#8217;re at it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-538573">
				<div id="div-comment-538573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RichB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538573">
			August 17, 2007 at 1:18 pm</a>		</div>

		<p>nop is also emitted when you override a virtual method and provide no implementation.</p>
<p>eg:</p>
<p>.method public hidebysig virtual instance void</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;Test(class ThunderMain.Tree.Node opNode,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; class ThunderMain.Tree.Node opTestNode,</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; class ThunderMain.Tree.Preferences opPrefs) il managed</p>
<p>{</p>
<p>&nbsp;// Code size &nbsp; &nbsp; &nbsp; 2 (0x2)</p>
<p>&nbsp;.maxstack &nbsp;8</p>
<p>&nbsp;IL_0000: &nbsp;nop</p>
<p>&nbsp;IL_0001: &nbsp;ret</p>
<p>} // end of method FormatAlgorithm$NullAlgorithm::Test</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-538583">
				<div id="div-comment-538583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RichB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538583">
			August 17, 2007 at 1:19 pm</a>		</div>

		<p>In reference to my previous comment &#8211; I was talking about the nop at the IL level, not the x86 level I suspect you were talking about&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-msdnarchive even thread-even depth-1" id="comment-538593">
				<div id="div-comment-538593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MSDN Archive</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538593">
			August 17, 2007 at 1:24 pm</a>		</div>

		<p>There are some other places where these NOPs are valuable.</p>
<p>Suppose you have a method call with an assignment:</p>
<p>&nbsp; &nbsp;x = F();</p>
<p>If you step IN to F(), and then step OUT, the current statement marker will be on this statement. &nbsp;That&#8217;s because this statement still has work to do &#8211; assign the result to x.</p>
<p>If you don&#8217;t assign the result:</p>
<p>&nbsp; F();</p>
<p>then upon stepping OUT the current statement marker will be on the next statement. &nbsp;That can be confusing. &nbsp;By adding the NOPs we get consistent behavior between the two.</p>
<p>(Note that this is a generalization &#8211; specific cases may vary).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-538613">
				<div id="div-comment-538613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">St. Thomas...</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538613">
			August 17, 2007 at 1:27 pm</a>		</div>

		<blockquote><p>
  &gt; Sure, and the fridge light really goes out when you shut the door&#8230; ;)
</p></blockquote>
<p>You can hide a videocam inside the fridge.</p>
<p>Or, you can attach a debugger after the JIT has generated code for a method :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-538653">
				<div id="div-comment-538653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.eiffel.com' rel='external nofollow' class='url'>Emmanuel Stapf</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538653">
			August 17, 2007 at 1:51 pm</a>		</div>

		<p>For our Eiffel implementation we had to do the same but we learned it by trial and errors. Indeed the pdb format does not like when you set several breakpoints at the same location. So now we generate a nop for each of those breakpoints and it works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-538823">
				<div id="div-comment-538823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">user_1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538823">
			August 17, 2007 at 4:36 pm</a>		</div>

		<p>sometimes people forget how advanced is out-of-order execution in today chips. for example this code runs at 1 clock (!!) per loop iteration on core2.</p>
<p>LOOP:</p>
<p>mov eax, [esi+ecx]</p>
<p>mov [ecx+edi*1], ebx</p>
<p>add ecx, 4</p>
<p>js LOOP</p>
<p>source: microarchitecture.pdf by agner fog (google for it)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-538603">
				<div id="div-comment-538603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hum....</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538603">
			August 17, 2007 at 1:25 pm</a>		</div>

		<p>My understanding of the way that the debugger works could easily be squiffy, I just don&#8217;t know in any official capacity how it works&#8230;. Anyhoo.</p>
<p>Surely any instruction that you execute relates directly to some decretely identifiable description, or line, or part thereof, that one specified to a compiler.</p>
<p>If you&#8217;re going to relate an instruction or more likely a group of instructions to a described line of code, then there must be a *mapping* of some sort that links instructions and described lines of code. I assume that the debugger operates on the basis of hardware traps.</p>
<p>I assume that the purpose of .NET is to allow platform independence. That is to say that the code one compiles is translated into a native machine code appropriate to the target platform, at run time. For the sake of this text I&#8217;ll refer to what the compiler produces as CLR, but I&#8217;m not sure about that. The runtime process of translation between CLR and and platform machine code I&#8217;ll refer to as JIT, but again I&#8217;m not certain what it should be called.</p>
<p>Is this article suggesting that the mapping is generated from the CLR code, rather than the platform machine code?</p>
<p>The only thing that makes sense to me is that the optimisation process, is unable to move traps, because if it did, the mapping would no longer be coherent. Presumably the JIT produces code that is smaller than expected at the time the CLR was generated, and consequently the nops have to be filled to make up the space, and maintain the mapping coherence.</p>
<p>The thing that I wonder, is what happens when compiled code is retargetted to a different instruction set, which is what I thought .NET was about. What happens, say, when the target platform requires more instructions to complete the line, than was specified in the original CLR code?</p>
<p>Surely the JIT must be a strict lookthrough for the debugger, for good design? It appears that the debugger is looking around the JIT. Does this mean that you have to rebuild the CLR for each platform that you wish to debug on?</p>
<p>Wouldn&#8217;t it be better for the debugger to sit completely behind the JIT, and have the JIT set real traps, and generate mappings into the CLR? The debugger could then operate on it&#8217;s own mapping into the CLR, and pseudo traps that it could receive from the JIT.</p>
<p>It really must be a bit of a boiler. If I am right, is this just a question of time, money and resources, or is it intended to work that way?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-538943">
				<div id="div-comment-538943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538943">
			August 18, 2007 at 9:45 am</a>		</div>

		<p>If you have one of Raymond&#8217;s favourites, an object with a nontrivial destructor going out of scope, then the destructor often appears to execute on the close curly of that scope, thus enabling you to breakpoint on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-538953">
				<div id="div-comment-538953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/0001/01/01/140235.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-538953">
			August 18, 2007 at 10:58 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539063">
				<div id="div-comment-539063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alex.r.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-539063">
			August 19, 2007 at 4:47 pm</a>		</div>

		<p>St. Thomas.</p>
<p>Sure, you could put a camera in your fridge&#8230; but then you&#8217;d only be sure that the light is off *when there is a camera*. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert even thread-even depth-1" id="comment-539123">
				<div id="div-comment-539123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-539123">
			August 20, 2007 at 12:59 am</a>		</div>

		<p>Obviously the solution is to shut yourself into the fridge and observe it directly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539133">
				<div id="div-comment-539133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-539133">
			August 20, 2007 at 1:43 am</a>		</div>

		<p>Schroedinger etc.</p>
<p>Maybe there are only NOPs because you observe the code, and there are none when you are not looking for them ;)</p>
<p>(Eric, you being in the fridge would change the experiment, thus invalidating the results ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-539143">
				<div id="div-comment-539143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-539143">
			August 20, 2007 at 6:14 am</a>		</div>

		<p>Uhh&#8230; IIRC:</p>
<p>K7s (Athlons) and derivatives will kill NOPs at the decoding stage at a max of 3/cycle.</p>
<p>Intel marchs before Core2 process NOPs and they must use one of the Integer/Logic/Float execution ports (P1 or P2), so they &quot;pollute the internal buffers&quot; and have a max throughput of 2/cycle.</p>
<p>Core2 has 3 I/L/F ports so I&#8217;d expect it to eat 3 NOPs per cycle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539183">
				<div id="div-comment-539183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CGomez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-539183">
			August 20, 2007 at 9:00 am</a>		</div>

		<p>@Hum:</p>
<p>&quot;I assume that the purpose of .NET is to allow platform independence.&quot;</p>
<p>That&#8217;s your assumption. &nbsp;I&#8217;m pretty sure it&#8217;s never been stated as an assumption or goal of the platform. &nbsp;Rather, it is a side effect (the .NET platform can serve as a programming interface that, if implemented on other targets, can provide platform independence).</p>
<p>I would say some of the stated goals include a common type system and easier cross-language compatibility. &nbsp;Also included are a managed runtime intended to improve performance in memory management (and maybe as a side effect limit memory based bugs like buffer overruns). &nbsp;It could be theorized that eventually the JIT could, when it knows more about the hardware then the coder, could produce more specialized and targeted (and performant) code than the native compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-539203">
				<div id="div-comment-539203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://@CGomez.....' rel='external nofollow' class='url'>Hum....</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-539203">
			August 20, 2007 at 9:57 am</a>		</div>

		<p>Interesting response.</p>
<p>By nature, I&#8217;m a bit holistic in my outlook. It&#8217;s probably why I&#8217;m not eminent or successful &#8211; you need to be *really* good if you want to be eminent successful *and* holistic. Digression over.</p>
<p>I&#8217;m sure though there are more than a few that would agree with my outlook. Certainly my first google hit agreed anyhow.</p>
<p>There are some potentially good things about .NET, but my holistic outlook is telling me that the number one improvement for memory management would be hardware based, specifically content adressable memory for, say, free list lookups on the heap. I&#8217;d wager that alone, such a hardware feature would have a massive effect on overall performance.</p>
<p>Clearly that&#8217;s not a Microsoft problem. On the other hand, they&#8217;ll (you&#8217;ll) already be aware of such things. How hard do you keep hitting a problem that can&#8217;t be dramatically improved with the only tools you have? Maybe it&#8217;s a needle to crack a coconut? Maybe ther is another way?</p>
<p>I wasn&#8217;t exepecting an answer to my original post, but I&#8217;m glad you responded. At least I&#8217;m not alone in the universe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-539523">
				<div id="div-comment-539523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-539523">
			August 20, 2007 at 9:13 pm</a>		</div>

		<blockquote><p>
  Shut the fridge for a while, then open it and check whether the light bulb is cold.
</p></blockquote>
<p>What if it&#8217;s fluorescent light?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ryanbemrose even thread-even depth-1" id="comment-539473">
				<div id="div-comment-539473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ryan+Bemrose' rel='external nofollow' class='url'>Ryan Bemrose</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-539473">
			August 20, 2007 at 7:45 pm</a>		</div>

		<p>&gt; Sure, you could put a camera in your fridge&#8230; but then you&#8217;d only be sure that the light is off *when there is a camera*.</p>
<p>Any Microsoft interviewee knows the answer to this one. &nbsp;Shut the fridge for a while, then open it and check whether the light bulb is cold.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-540303">
				<div id="div-comment-540303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mccoyn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-540303">
			August 21, 2007 at 4:34 pm</a>		</div>

		<p>Fluorescent lights still get warm, just not as much. &nbsp;Even LED bulbs warm up, but you might need to get a thermometer to detect it.</p>
<p>Do I get the job?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-540413">
				<div id="div-comment-540413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alex.r.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070817-00/?p=25533#comment-540413">
			August 21, 2007 at 6:18 pm</a>		</div>

		<blockquote><p>
  Do I get the job?
</p></blockquote>
<p>Sure you do &#8212; you can come repair my fridge&#8217;s light any time you&#8217;d like ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

