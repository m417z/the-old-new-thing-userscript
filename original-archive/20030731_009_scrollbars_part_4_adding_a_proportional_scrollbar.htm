<html>
<head>
<title>Scrollbars, part 4: Adding a proportional scrollbar</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Scrollbars, part 4: Adding a proportional scrollbar</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 31, 2003 / year-entry #10</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20030731-00/?p=43003</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>0</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">To obtain a proportional scrollbar, you need to tell Windows the minimum and maximum values covered by the scrollbar, the current scrollbar position, and the size of the scrollbar thumb (called the "page size"). One annoyance of the way scrollbars are set up is that the maximum value is attainable. This differs from the way...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
        To obtain a proportional scrollbar, you need to tell Windows the minimum and maximum
        values covered by the scrollbar, the current scrollbar position, and the size of the
        scrollbar thumb (called the "page size"). One annoyance of the way scrollbars are
        set up is that the maximum value is attainable. This differs from the way GDI manages
        dimensions, where the range is exclusive of the endpoint. As a result, there will
        be occasional "-1"s sprinkled through the code to compensate for the fact that scrollbars
        include rather than exclude their endpoints. 
    </p>
<p>
        To do this, we need a few more variables. 
    </p>
<pre>int g_yOrigin;              /* Scrollbar position */
int g_cLinesPerPage;        /* Number of lines per page */
</pre>
<p>
        The name of the variable <i>g_yOrigin</i> will become apparent later. 
    </p>
<p>
        Next comes the helper function that is at the center of the scrollbar action. Given
        the desired position of the scrollbar, it sanitizes the value, scrolls the window
        contents as necessary, and sets the scrollbar parameters to match the new state of
        the window. 
    </p>
<pre>void ScrollTo(HWND hwnd, int pos)
{
    /*
     *  Keep the value in the range 0 .. (g_cItems - g_cLinesPerPage).
     */
    pos = max(pos, 0);
    pos = min(pos, g_cItems - g_cLinesPerPage);

    /*
     *  Scroll the window contents accordingly.
     */
    ScrollWindowEx(hwnd, 0, (g_yOrigin - pos) * g_cyLine,
                   NULL, NULL, NULL, NULL,
                   SW_ERASE | SW_INVALIDATE);

    /*
     *  Now that the window has scrolled, a new item is at the top.
     */
    g_yOrigin = pos;

    /*
     *  And make the scrollbar look like what we think it is.
     */
    SCROLLINFO si;
    si.cbSize = sizeof(si);
    si.fMask = SIF_PAGE | SIF_POS | SIF_RANGE;
    si.nPage = g_cLinesPerPage;
    si.nMin = 0;
    si.nMax = g_cItems - 1;     /* endpoint is inclusive */
    si.nPos = g_yOrigin;
    SetScrollInfo(hwnd, SB_VERT, &amp;si, TRUE);
}
</pre>
<p>
        Sometimes, we merely want to make a relative change to the scrollbar position. 
    </p>
<pre>void ScrollDelta(HWND hwnd, int dpos)
{
    ScrollTo(hwnd, g_yOrigin + dpos);
}
</pre>
<p>
        When the window changes size, we need to recompute the number of items that fit on
        one page. This in turn may require that the scrollbar thumb position be adjusted,
        so we also perform a dummy scroll, which triggers all the sanity-check computations. 
    </p>
<pre>void OnSize(HWND hwnd, UINT state, int cx, int cy)
{
    g_cLinesPerPage = cy / g_cyLine;
    ScrollDelta(hwnd, 0);
}
</pre>
<p>
        The <i>WM_VSCROLL</i> handler is pretty much self-explanatory. When scrolling by lines
        or pages, we make a relative change in the appropriate direction and magnitude. When
        the user drags the thumb, we move directly to the specified location. And when the
        user drags to the top or bottom of the scrollbar, we peg at one or the other extremum. 
    </p>
<pre>void OnVscroll(HWND hwnd, HWND hwndCtl, UINT code, int pos)
{
    switch (code) {
    case SB_LINEUP:         ScrollDelta(hwnd, -1); break;
    case SB_LINEDOWN:       ScrollDelta(hwnd, +1); break;
    case SB_PAGEUP:         ScrollDelta(hwnd, -g_cLinesPerPage); break;
    case SB_PAGEDOWN:       ScrollDelta(hwnd, +g_cLinesPerPage); break;
    case SB_THUMBPOSITION:  ScrollTo(hwnd, pos); break;
    case SB_THUMBTRACK:     ScrollTo(hwnd, pos); break;
    case SB_TOP:            ScrollTo(hwnd, 0); break;
    case SB_BOTTOM:         ScrollTo(hwnd, MAXLONG); break;
    }
}
</pre>
<p>
        And, of course, we need to hook up our message handler into the message loop. 
    </p>
<pre>    /* Add to WndProc */
    HANDLE_MSG(hwnd, WM_VSCROLL, OnVscroll);
</pre>
<p>
        Finally, we need to make our paint handler aware of the scrollbar. Fortunately, through
        the magic of GDI transforms, we can accomplish this without having to change the <i>PaintSimpleContent</i> function
        at all. 
    </p>
<pre>void PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
    POINT ptOrgPrev;
    OffsetRect(&amp;pps-&gt;rcPaint, 0, g_yOrigin * g_cyLine);
    GetWindowOrgEx(pps-&gt;hdc, &amp;ptOrgPrev);
    SetWindowOrgEx(pps-&gt;hdc, ptOrgPrev.x, ptOrgPrev.y + g_yOrigin * g_cyLine, NULL);

    PaintSimpleContent(hwnd, pps);

    SetWindowOrgEx(pps-&gt;hdc, ptOrgPrev.x, ptOrgPrev.y, NULL);
}
</pre>
<p>
        By changing the window origin, the <i>PaintSimpleContent</i> function continues to
        believe that there is no scrollbar at all. It blithely draws item zero at (0, 0),
        but through the magic of GDI transforms, the pixels actually appear at the new origin
        location. 
    </p>
<p>
        Now you see why the variable is named <i>g_yOrigin</i>.
    </p>
<p>
        Exercise:&#160; There is a latent bug&#160;in <em>OnVscroll</em>.&#160; Explain what
        it is and fix it.
    </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

