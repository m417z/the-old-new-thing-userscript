<html>
<head>
<title>What do bitwise operations mean for colors?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What do bitwise operations mean for colors?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 13, 2006 / year-entry #382</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Someday, you're going to pass a raster operation to the BitBlt function that entails bit manipulation. Something like SRCAND perhaps, or possibly the dreaded SRCINVERT. These bitwise operations make perfect sense for monochrome bitmaps, since those are one bit per pixel anyway. But what does it mean for color bitmaps? What do you get when...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Someday, you're going to pass a raster operation to the <code>BitBlt</code> function that entails bit manipulation. Something like <code>SRCAND</code> perhaps, or possibly the dreaded <code>SRCINVERT</code>. These bitwise operations make perfect sense for monochrome bitmaps, since those are one bit per pixel anyway. But what does it mean for color bitmaps? What do you get when you "and" together forest green (#228B22) and hot pink (#FF69B4)?</p>
<p> The bitwise operations are performed in the pixel space of the destination. If the destination is a non-palettized bitmap format (higher than 8bpp), then the pixel values are red, blue and green components packed together (in various ways depending on the format). Those values are "and"ed together as integers to produce the result. For example, in a 565-format bitmap, the color forest green is represented as the value 0x2464 (0y00100`100011`00100) and hot pink is 0xFB56 (0y11111`011010`10110). The bitwise "and" of these two values is 0x2044, which is a very dark purple. </p>
<p> With palettized bitmaps, the results are much less predictable since the values in the bitmap are not colors but color indices. For example, if a pixel has the value&nbsp;6, that means that the color of the pixel is determined by the entry in slot&nbsp;6 of the bitmap's color table, and that color could be anything. There is no rule that even requires that color&nbsp;0 be black and that the highest available color be white, though most bitmaps adhere to this by convention. </p>
<p> On an 8bpp bitmap, then, the question of what you get when you "and" together forest green and hot pink is underdetermined. If the color table for example happened to put forest green in slot&nbsp;6 and hot pink in slot&nbsp;18, the result of the "and" operation would be 6&nbsp;&amp;&nbsp;18&nbsp;=&nbsp;2, and the result pixel would therefore be whatever color was in slot&nbsp;2 of the bitmap's color table. </p>
<p> What does this mean for you, adventuresome blitter? </p>
<p> If you're going to use raster operations that involve bitwise operations, one of the pixels involved in the operation should be black or white (zero or all-bits-set) in order to obtain predictable results. You can then use identities like "x and black = black" and "x xor black = x" to predict the result, assuming the bitmap follows the convention for black and white noted above. But if you're going to be xor'ing with forest green, then the results could be anything. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-442013">
				<div id="div-comment-442013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442013">
			November 13, 2006 at 10:42 am</a>		</div>

		<p>Bit-wise operations on color DDBs is like a box of chocolates &#8212; you never know what you&#8217;re gonna get. &nbsp;But I must say that, using a palletized DDB just seems wrong. &nbsp;I can understand a DDB using differing bits per color per pixel as the BPCPP must match the display hardware for effective bltting, but doesn&#8217;t using a palettized DDB make blitting hard or (gasp!) less efficient? &nbsp;Do they even make palettized DDBs?</p>
<div class="post">[<i>I think you&#8217;ll enjoy Wednesday&#8217;s entry. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion odd alt thread-odd thread-alt depth-1" id="comment-442023">
				<div id="div-comment-442023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442023">
			November 13, 2006 at 11:00 am</a>		</div>

		<p>Superkoko, you can use it as an obfuscated way to perform calculations. You can implement a Vernam cipher very &quot;handily&quot; with BitBlt, and since you can make up your own logic operations by providing an arbitrary truth table, there&#8217;s no limit to how hard you can obfuscate something as simple as a XOR. A more benign use is to XOR a bitmap with itself to blacken it, or NOT XOR to whiten. And once you get hooked up to PatBlt, there&#8217;s no going back&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-442053">
				<div id="div-comment-442053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442053">
			November 13, 2006 at 11:36 am</a>		</div>

		<p>I&#8217;m using a custom blit to paint text from a custom font bitmap. We&#8217;re doing this because it is significantly harder to create a custom TrueType font, Windows CE only supports either TrueType or bitmap fonts (chosen at platform build time), and the OEM suppliers (and Microsoft for Windows Mobile) have already made the choice of TrueType.</p>
<p>The ternary raster operation opcode is 0x00B8074A and I leave it as an exercise to the reader to work out how it works ;) As a hint, the background colour of the font bitmap is white and the foreground colour is black.</p>
<p>Moving to a custom blit (i.e. one not declared in WinGDI.h) saved two blits per character, a screen-compatible DC, and a screen-compatible bitmap selected into that DC. Thanks, Raymond, for the hint that this was even possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442063">
				<div id="div-comment-442063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442063">
			November 13, 2006 at 11:44 am</a>		</div>

		<p>An &quot;interesting&quot; effect with bitwise and? &nbsp;Simulating palettization (or heat stroke) by anding off the low bits one by one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-442103">
				<div id="div-comment-442103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan McCarty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442103">
			November 13, 2006 at 1:01 pm</a>		</div>

		<p>AND&#8217;ing forest green with anything is always tricky, and the lesson is don&#8217;t make the classic mistake of not seeing the Forest for the Green!</p>
<p>(Thanks folks, I&#8217;ll be here all week except Tuesday. &nbsp;Make sure you try the Mahi Mahi.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442003">
				<div id="div-comment-442003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442003">
			November 13, 2006 at 10:35 am</a>		</div>

		<p>I remember that I once used he AND bitwise operation of an homogen source (with a function functionally equivalent to PatBlt) on an RGB 24 bits image destination.</p>
<p>The homogen source pixels had values such as RGB(-4,-4,-4) or RGB(-2**n, -2**n, -2**n).</p>
<p>The final effect is to decrease the number of colors of the image by rounding down colors.</p>
<p>The effect is interesting.</p>
<p>However, I don&#8217;t think that AND-ing a 24 bits image with another 24 bits image could make sense. At least, I&#8217;ve never used it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-442163">
				<div id="div-comment-442163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Charlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442163">
			November 13, 2006 at 6:52 pm</a>		</div>

		<p>Given the stories I&#8217;ve heard about NES/Super NES development, I&#8217;m not fazed at all by the idea of XORing colors. People came up with cool graphical effects based on weird bitwise magic all the time.</p>
<p>The Super Nintendo&#8217;s graphics processor, in particular, had some truly bizarre features.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-442623">
				<div id="div-comment-442623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kokorozashi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442623">
			November 14, 2006 at 7:27 pm</a>		</div>

		<p>One thing I&#8217;d like to see covered (and yes I know this is the wrong place for suggestions, but for this suggestion I suspect Raymond&#8217;s suggestion box is also the wrong place) is a discussion of why such operations don&#8217;t seem to be present at all in GDI+ and what one is supposed to do instead. I have some vague ideas but no practical experience. I recently wrote my own blitter to do what I used to know on the Mac as deep masking, but I have a feeling that was not the best approach.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-442703">
				<div id="div-comment-442703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061113-11/?p=29033#comment-442703">
			November 14, 2006 at 11:35 pm</a>		</div>

		<p>So, this is why System.Drawing.Graphics object is not applicable to System.Drawing.Image of indexed image formats like GIF.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

