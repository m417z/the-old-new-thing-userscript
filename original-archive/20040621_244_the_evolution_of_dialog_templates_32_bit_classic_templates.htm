<html>
<head>
<title>The evolution of dialog templates - 32-bit Classic Templates</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The evolution of dialog templates &#8211; 32-bit Classic Templates</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 21, 2004 / year-entry #245</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Okay, last time we talked about the 16-bit classic DIALOG template. This time, we're going to talk about the 32-bit classic DIALOG template. There really isn't much going on. Some 8-bit fields got expanded to 16-bit fields, some 16-bit fields got expanded to 32-bit fields, extended styles were added, and all strings got changed from...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Okay,
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/06/18/159248.aspx">
last time we talked about the 16-bit classic DIALOG template</a>.
This time, we're going to talk about the 32-bit classic DIALOG template.
</p>
<p>
There really isn't much going on.
Some 8-bit fields got expanded to 16-bit fields,
some 16-bit fields got expanded to 32-bit fields,
extended styles were added,
and all strings got changed from ANSI to Unicode.
</p>
<p>
The template starts like this:
</p>
<pre>
DWORD dwStyle;   // dialog style
DWORD dwExStyle; // extended dialog style
WORD  cItems;    // number of controls in this dialog
WORD  x;         // x-coordinate
WORD  y;         // y-coordinate
WORD  cx;        // width
WORD  cy;        // height
</pre>
<p>
This is basically the same as the 16-bit dialog template,
except that there's a new <code>dwExStyle</code> field,
and the <code>cItems</code> went from a BYTE to a WORD.
Consequently, the maximum number of controls per 32-bit
dialog is 65535.  That should be enough for a while.
</p>
<p>
After this header come a series of strings,
just like in 16-bit dialog templates.
But this time, the strings are Unicode.
For example, if you wanted to store the string "Hello",
you would write out the twelve bytes</p>
<pre>
48 00 65 00 6C 00 6C 00 6F 00 00 00 ; "Hello"
</pre>
<p>
As with the 16-bit case, in the 32-bit dialog template,
you can often specify an ordinal instead of a string.
Here, it's done by writing the bytes FF 00 followed by the
16-bit ordinal (in little-endian format).
For example, if you wanted to specify
the ordinal 42, you would write out the four bytes</p>
<pre>
FF 00 2A 00        ; 00FF followed by WORD (little-endian)
</pre>
<p>
The three strings are the same as last time:
</p>
<ul>
<li>The menu name, which can be a string or an ordinal.
<li>The class, which must be a string (no ordinals allowed).
<li>The dialog title, which must be a string (no ordinals allowed).
</ul>
<p>
If the DS_SETFONT style is set, then what follows next is
a WORD indicating the point size and a string specifying
the font name. Otherwise, there is no font information.
Same as in the 16-bit dialog template.
</p>
<p>
So far, everything has been WORD-aligned.
</p>
<p>
After the header comes a series of dialog item templates.
Each item template begins on a DWORD boundary.
(Insert padding if necessary to achieve this.)
</p>
<pre>
DWORD dwStyle;   // window style
DWORD dwExStyle; // window extended style
WORD  x;         // x-coordinate (DLUs)
WORD  y;         // y-coordinate (DLUs)
WORD  cx;        // width (DLUs)
WORD  cy;        // height (DLUs)
WORD  wID;       // control ID
</pre>
<p>
As before, the dialog coordinates are recorded
in dialog units (DLUs).
</p>
<p>
Next comes the class name, either as a
null-terminated Unicode string or as an ordinal.
The ordinal codes for the six "standard" window classes are the same
as for 16-bit dialog templates:
</p>
<ul>
<li>0x0080 = "button"
<li>0x0081 = "edit"
<li>0x0082 = "static"
<li>0x0083 = "listbox"
<li>0x0084 = "scrollbar"
<li>0x0085 = "combobox"
</ul>
<p>
After the class name comes the control text, either as a null-terminated
string or as an ordinal, following the same rules as for the 16-bit
template.  <strong>Extra weirdness</strong>: To specify an ordinal here,
use FFFF instead of 00FF as the ordinal marker.
I don't know why.
</p>
<p>
After the control text comes up to 65535 bytes of "extra data"
in the form of a 16-bit count, followed by the actual data.
If there is no "extra data", then use a count of zero.
</p>
<p>
And that's all there is.  As with last time, I'll present
an annotated dialog template.
</p>
<pre>
0000  C4 20 C8 80 00 00 00 00-0B 00 24 00 2C 00 E6 00  . ........$.,...
0010  5E 00 00 00 00 00 52 00-65 00 70 00 6C 00 61 00  ^.....R.e.p.l.a.
0020  63 00 65 00 00 00 08 00-4D 00 53 00 20 00 53 00  c.e.....M.S. .S.
0030  68 00 65 00 6C 00 6C 00-20 00 44 00 6C 00 67 00  h.e.l.l. .D.l.g.
0040  00 00 00 00 00 00 02 50-00 00 00 00 04 00 09 00  .......P........
0050  30 00 08 00 FF FF FF FF-82 00 46 00 69 00 26 00  0.........F.i.&amp;.
0060  6E 00 64 00 20 00 77 00-68 00 61 00 74 00 3A 00  n.d. .w.h.a.t.:.
0070  00 00 00 00 80 00 83 50-00 00 00 00 36 00 07 00  .......P....6...
0080  72 00 0C 00 80 04 FF FF-81 00 00 00 00 00 00 00  r...............
0090  00 00 02 50 00 00 00 00-04 00 1A 00 30 00 08 00  ...P........0...
00A0  FF FF FF FF 82 00 52 00-65 00 26 00 70 00 6C 00  ......R.e.&amp;.p.l.
00B0  61 00 63 00 65 00 20 00-77 00 69 00 74 00 68 00  a.c.e. .w.i.t.h.
00C0  3A 00 00 00 00 00 00 00-80 00 83 50 00 00 00 00  :..........P....
00D0  36 00 18 00 72 00 0C 00-81 04 FF FF 81 00 00 00  6...r...........
00E0  00 00 00 00 03 00 03 50-00 00 00 00 05 00 2E 00  .......P........
00F0  68 00 0C 00 10 04 FF FF-80 00 4D 00 61 00 74 00  h.........M.a.t.
0100  63 00 68 00 20 00 26 00-77 00 68 00 6F 00 6C 00  c.h. .&amp;.w.h.o.l.
0110  65 00 20 00 77 00 6F 00-72 00 64 00 20 00 6F 00  e. .w.o.r.d. .o.
0120  6E 00 6C 00 79 00 00 00-00 00 00 00 03 00 01 50  n.l.y..........P
0130  00 00 00 00 05 00 3E 00-3B 00 0C 00 11 04 FF FF  ......>.;.......
0140  80 00 4D 00 61 00 74 00-63 00 68 00 20 00 26 00  ..M.a.t.c.h. .&amp;.
0150  63 00 61 00 73 00 65 00-00 00 00 00 01 00 03 50  c.a.s.e........P
0160  00 00 00 00 AE 00 04 00-32 00 0E 00 01 00 FF FF  ........2.......
0170  80 00 26 00 46 00 69 00-6E 00 64 00 20 00 4E 00  ..&amp;.F.i.n.d. .N.
0180  65 00 78 00 74 00 00 00-00 00 00 00 00 00 01 50  e.x.t..........P
0190  00 00 00 00 AE 00 15 00-32 00 0E 00 00 04 FF FF  ........2.......
01A0  80 00 26 00 52 00 65 00-70 00 6C 00 61 00 63 00  ..&amp;.R.e.p.l.a.c.
01B0  65 00 00 00 00 00 00 00-00 00 01 50 00 00 00 00  e..........P....
01C0  AE 00 26 00 32 00 0E 00-01 04 FF FF 80 00 52 00  ..&amp;.2.........R.
01D0  65 00 70 00 6C 00 61 00-63 00 65 00 20 00 26 00  e.p.l.a.c.e. .&amp;.
01E0  41 00 6C 00 6C 00 00 00-00 00 00 00 00 00 01 50  A.l.l..........P
01F0  00 00 00 00 AE 00 37 00-32 00 0E 00 02 00 FF FF  ......7.2.......
0200  80 00 43 00 61 00 6E 00-63 00 65 00 6C 00 00 00  ..C.a.n.c.e.l...
0210  00 00 00 00 00 00 01 50-00 00 00 00 AE 00 4B 00  .......P......K.
0220  32 00 0E 00 0E 04 FF FF-80 00 26 00 48 00 65 00  2.........&amp;.H.e.
0230  6C 00 70 00 00 00 00 00                          l.p.....
</pre>
<p>
As before, we start with the header.</p>
<pre>
0000  C4 20 C8 80  // dwStyle
0004  00 00 00 00  // dwExStyle
0008  0B 00        // cItems
000A  24 00 2C 00  // x, y
000E  E6 00 5E 00  // cx, cy
</pre>
<p>
In other words, the header says
</p>
<table>
<tr>
<td>dwStyle</td>
<td>= 0x80C820C4</td>
<td>= WS_POPUP | WS_CAPTION | WS_SYSMENU |<br>
        &nbsp;  DS_CONTEXTHELP | DS_SETFONT | DS_MODALFRAME | DS_3DLOOK
    </td>
</tr>
<tr>
<td>dwExStyle</td>
<td>= 0x00000000</td>
<td></td>
</tr>
<tr>
<td>cItems</td>
<td>= 0x0B</td>
<td>= 11</td>
</tr>
<tr>
<td>x</td>
<td>= 0x0024</td>
<td>= 36</td>
</tr>
<tr>
<td>y</td>
<td>= 0x002C</td>
<td>= 44</td>
</tr>
<tr>
<td>cx</td>
<td>= 0x00E6</td>
<td>= 230</td>
</tr>
<tr>
<td>cy</td>
<td>= 0x005E</td>
<td>= 94</td>
</tr>
</table>
<p>
After the header come the menu name, class name, and
dialog title:
</p>
<pre>
0012  00 00         // no menu
0014  00 00         // default dialog class
0016  52 00 65 00 70 00 6C 00 61 00 63 00
      65 00 00 00   // "Replace"
</pre>
<p>
Again, since the DS_SETFONT bit is set in the style,
the next section describes the font to be used by the dialog:
</p>
<pre>
0026  08 00         // wSize = 8
0028  4D 00 53 00 20 00 53 00 68 00 65 00 6C 00
      6C 00 20 00 44 00 6C 00 67 00 00 00
                    // "MS Shell Dlg"
</pre>
<p>
This dialog box uses 8pt "MS Shell Dlg" as its dialog font.
</p>
<p>
Next come the eleven dialog item templates.
Not remember that each template must be DWORD-aligned,
so we need some padding here to get up to a four-byte boundary.
</p>
<pre>
0042 00 00          // Padding for alignment
</pre>
<p>
Now that we are once again DWORD-aligned, we can read the first
dialog item template.
</p>
<pre>
0044  00 00 02 50   // dwStyle
0048  00 00 00 00   // dwExStyle
004C  04 00 09 00   // x, y
0050  30 00 08 00   // cx, cy
0054  FF FF         // wID
0056  FF FF 82 00   // "static"
005A  46 00 69 00 26 00
0060  6E 00 64 00 20 00 77 00-68 00 61 00 74 00 3A 00
0070  00 00         // "Fi&amp;nd what:"
0072  00 00         // no extra data
</pre>
<p>
Notice here that the "static" class was encoded as an ordinal.
The template for this item is therefore
</p>
<table>
<tr>
<td>dwStyle</td>
<td>= 0x50020000</td>
<td>= WS_CHILD | WS_VISIBLE | WS_GROUP | SS_LEFT
    </td>
</tr>
<tr>
<td>dwExStyle</td>
<td>= 0x00000000</td>
<td></td>
</tr>
<tr>
<td>x</td>
<td>= 0x0004</td>
<td>= 4</td>
</tr>
<tr>
<td>y</td>
<td>= 0x0009</td>
<td>= 9</td>
</tr>
<tr>
<td>cx</td>
<td>= 0x0030</td>
<td>= 48</td>
</tr>
<tr>
<td>cy</td>
<td>= 0x0008</td>
<td>= 8</td>
</tr>
<tr>
<td>wID</td>
<td>= 0xFFFF</td>
<td>= -1</td>
</tr>
<tr>
<td>szClass</td>
<td>= ordinal 0x0082</td>
<td>= "static"
    </td>
</tr>
<tr>
<td>szText</td>
<td SPAN=2>= "Fi&amp;nd what:"</td>
</tr>
</table>
<p>
The other controls are similarly unexciting.</p>
<pre>
// Second control
0074  80 00 83 50   // dwStyle
0078  00 00 00 00   // dwExStyle
007C  36 00 07 00   // x, y
0080  72 00 0C 00   // cx, cy
0084  80 04         // wID
0086  FF FF 81 00   // "edit"
008A  00 00         // ""
008C  00 00         // no extra data
008E  00 00         // padding to achieve DWORD alignment

// Third control
0090  00 00 02 50   // dwStyle
0094  00 00 00 00   // dwExStyle
0098  04 00 1A 00   // x, y
009C  30 00 08 00   // cx, cy
00A0  FF FF         // wID
00A2  FF FF 82 00   // "static"
00A6  52 00 65 00 26 00 70 00 6C 00
00B0  61 00 63 00 65 00 20 00 77 00 69 00 74 00 68 00
00C0  3A 00 00 00   // "Re&amp;place with:"
00C4  00 00         // no extra data
00C6  00 00         // padding to achieve DWORD alignment

// Fourth control
00C8  80 00 83 50   // dwStyle
00CC  00 00 00 00   // dwExStyle
00D0  36 00 18 00   // x, y
00D4  72 00 0C 00   // cx, cy
00D8  81 04         // wID
00DA  FF FF 81 00   // "edit"
00DE  00 00         // ""
00E0  00 00         // no extra data
00E2  00 00         // padding to achieve DWORD alignment

// Fifth control
00E4  03 00 03 50   // dwStyle
00E8  00 00 00 00   // dwExStyle
00EC  05 00 2E 00   // x, y
00F0  68 00 0C 00   // cx, cy
00F4  10 04         // wID
00F6  FF FF 80 00   // "button"
00FA  4D 00 61 00 74 00
0100  63 00 68 00 20 00 26 00 77 00 68 00 6F 00 6C 00
0110  65 00 20 00 77 00 6F 00 72 00 64 00 20 00 6F 00
0120  6E 00 6C 00 79 00 00 00
                    // "Match &amp;whole word only"
0128  00 00         // no extra data
012A  00 00         // padding to achieve DWORD alignment

// Sixth control
012C  03 00 01 50   // dwStyle
0130  00 00 00 00   // dwExStyle
0134  05 00 3E 00   // x, y
0138  3B 00 0C 00   // cx, cy
013C  11 04         // wID
013E  FF FF 80 00   // "button"
0142  4D 00 61 00 74 00 63 00 68 00 20 00 26 00
0150  63 00 61 00 73 00 65 00 00 00
                    // "Match &amp;case"
015A  00 00         // no extra data

// Seventh control
015C  01 00 03 50   // dwStyle
0160  00 00 00 00   // dwExStyle
0164  AE 00 04 00   // x, y
0168  32 00 0E 00   // cx, cy
016C  01 00         // wID
016E  FF FF 80 00   // "button"
0172  26 00 46 00 69 00 6E 00 64 00 20 00 4E 00
0180  65 00 78 00 74 00 00 00
                    // "&amp;Find Next"
0188  00 00         // no extra data
018A  00 00         // padding to achieve DWORD alignment

// Eighth control
018C  00 00 01 50   // dwStyle
0190  00 00 00 00   // dwExStyle
0194  AE 00 15 00   // x, y
0198  32 00 0E 00   // cx, cy
019C  00 04         // wID
019E  FF FF 80 00   // "button"
01A2  26 00 52 00 65 00-70 00 6C 00 61 00 63 00
01B0  65 00 00 00   // "&amp;Replace"
01B4  00 00         // no extra data
01B6  00 00         // padding to achieve DWORD alignment

// Ninth control
01B8  00 00 01 50   // dwStyle
01BC  00 00 00 00   // dwExStyle
01C0  AE 00 26 00   // x, y
01C4  32 00 0E 00   // cx, cy
01C8  01 04         // wID
01CA  FF FF 80 00   // "button"
01CE  52 00
01D0  65 00 70 00 6C 00 61 00 63 00 65 00 20 00 26 00
01E0  41 00 6C 00 6C 00 00 00
                    // "Replace &amp;All"
01E8  00 00         // no extra data
01EA  00 00         // padding to achieve DWORD alignment

// Tenth control
01EC  00 00 01 50   // dwStyle
01F0  00 00 00 00   // dwExStyle
01F4  AE 00 37 00   // x, y
01F8  32 00 0E 00   // cx, cy
01FC  02 00         // wID
01FE  FF FF 80 00   // "button"
0202  43 00 61 00 6E 00 63 00 65 00 6C 00 00 00
                    // "Cancel"
0210  00 00         // no extra data
0212  00 00         // padding to achieve DWORD alignment

// Eleventh control
0214  00 00 01 50   // dwStyle
0218  00 00 00 00   // dwExStyle
021C  AE 00 4B 00   // x, y
0220  32 00 0E 00   // cx, cy
0224  0E 04         // wID
0226  FF FF 80 00   // "button"
022A  26 00 48 00 65 00 6C 00 70 00 00 00
                    // "&amp;Help"
0236  00 00         // no extra data
</pre>
<p>
Whew.
Tedious and entirely unexciting.
Here's the original resource compiler source code that
we reverse-engineered:
</p>
<pre>
DIALOG 36, 44, 230, 94
STYLE WS_POPUP | WS_CAPTION | WS_SYSMENU | DS_MODALFRAME | DS_3DLOOK | NOT WS_VISIBLE
CAPTION "Replace"
FONT 8, "MS Shell Dlg"
BEGIN
    CONTROL "Fi&amp;nd What:", -1, "static", WS_GROUP | SS_LEFT,
            4, 9, 48, 8

    CONTROL "", 0x0480, "edit",
            WS_BORDER | WS_GROUP | WS_TABSTOP | ES_AUTOHSCROLL,
            54, 7, 114, 12

    CONTROL "Re&amp;place with:", -1, "static", WS_GROUP | SS_LEFT,
            4, 26, 48, 8

    CONTROL "", 0x0481, "edit",
            WS_BORDER | WS_GROUP | WS_TABSTOP | ES_AUTOHSCROLL,
            54, 24, 114, 12

    CONTROL "Match &amp;whole word only", 0x0410, "button",
            WS_GROUP | WS_TABSTOP | BS_AUTOCHECKBOX,
            5, 46, 104, 12

    CONTROL "Match &amp;case", 0x0411, "button",
            WS_TABSTOP | BS_AUTOCHECKBOX,
            5, 62, 59, 12

    CONTROL "&amp;Find Next", IDOK, "button",
            WS_GROUP | WS_TABSTOP | BS_DEFPUSHBUTTON,
            174, 4, 50, 14

    CONTROL "&amp;Replace", 0x0400, "button",
            WS_TABSTOP | BS_PUSHBUTTON,
            174, 21, 50, 14

    CONTROL "Replace &amp;All", 0x0401, "button",
            WS_TABSTOP | BS_PUSHBUTTON,
            174, 38, 50, 14

    CONTROL "Cancel", IDCANCEL, "button",
            WS_TABSTOP | BS_PUSHBUTTON,
            174, 55, 50, 14

    CONTROL "Cancel", 0x040E, "button",
            WS_TABSTOP | BS_PUSHBUTTON,
            174, 75, 50, 14
END
</pre>
<p>
As before, we didn't explicitly say "DS_SETFONT" in the dialog's
STYLE directive since that is implied by the "FONT" directive,
and we took advantage of the fact that WS_VISIBLE is on by default.
</p>
<p>
And you probably recognize this dialog from yesterday.
It's the replace dialog from findtext.dlg.
(Though it's not exactly the same since the findtext.dlg template
uses some shorthand directives like DEFPUSHBUTTON instead of manually
writing out the details of the button control as a CONTROL.)</p>
<p>
Next time:
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/06/22/162360.aspx">
The 16-bit extended dialog template</a>, also known as DIALOGEX.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-185623">
				<div id="div-comment-185623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185623">
			June 21, 2004 at 8:31 am</a>		</div>

		<p>What&#8217;s the reason to pad fields in structures like this to DWORD boundaries? This is always a lot more work to program for &#8212; and test the special cases that require padding. It&#8217;s especially irritating with DIB scan lines.</p>
<p>The only reason I can think of is that it is marginally faster. Sounds like a good example of premature optimization, or am I mistaken?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-185633">
				<div id="div-comment-185633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185633">
			June 21, 2004 at 8:38 am</a>		</div>

		<p>It&#8217;s not an optimization. It&#8217;s a necessity.</p>
<p>The overwhelming dominance of the x86 architecture in the world of Win32 makes people think that the way the x86 does things is normal, when in reality the x86 is the weirdo.</p>
<p>PPC, MIPS, Alpha AXP, ia64 all crash if you access unaligned data. x86 is the weirdo: It permits unaligned data access.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185643">
				<div id="div-comment-185643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185643">
			June 21, 2004 at 8:39 am</a>		</div>

		<p>It could be a remnant of the Alpha/MIPS NT effort &#8211; accessing unaligned data caused a segfault instead of simply being slow. Alternate theory: the structs used to hold this data are compiled with dword alignment and loaded directly from a file, so unaligned data is misinterpreted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-185773">
				<div id="div-comment-185773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamKnight</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185773">
			June 21, 2004 at 12:07 pm</a>		</div>

		<p>I don&#8217;t understand why you would even want to have unaligned data access. In my opinion it only makes things more complicated.</p>
<p>Can anyone point to a case where it is better/cleaner than using aligned?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185793">
				<div id="div-comment-185793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185793">
			June 21, 2004 at 1:32 pm</a>		</div>

		<p>If space is really tight, as it was way back when, then every byte counts. Otherwise, go right a head and align your data &#8211; I do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-185813">
				<div id="div-comment-185813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185813">
			June 21, 2004 at 2:21 pm</a>		</div>

		<p>It makes your code cleaner if you don&#8217;t have to worry about unaligned stuff. For the most part this is transparent to you but there are some areas where it isn&#8217;t. You pay for unaligned memory access in higher cycle counts, not having atomic operations, and segfaults in non x86 processors. Win64 supports bad code with SetErrorMode(SEM_NOALIGNMENTFAULTEXCEPT) or the __unaligned qualifier (how thoughtful of them).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185823">
				<div id="div-comment-185823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185823">
			June 21, 2004 at 3:47 pm</a>		</div>

		<p>JamKnight:</p>
<p>Unaligned is better than aligned when you&#8217;re dealing with different CPUs that have different alignment requirements from the get go.</p>
<p>(eg. a CPU that required 16bit alignment vs. one that requires 64bit alignment&#8230; but you design everything before the 64bit one is on the horizon).</p>
<p>But yeah, it&#8217;s a real edge case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-185863">
				<div id="div-comment-185863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doynax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185863">
			June 21, 2004 at 6:26 pm</a>		</div>

		<blockquote><p>
  (eg. a CPU that required 16bit alignment vs. one that requires 64bit alignment&#8230; but you design everything before the 64bit one is on the horizon).<br />
  <br />This doesn&#8217;t have to be a problem, just align everything according to the largest datatype.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185853">
				<div id="div-comment-185853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.kstati.com/testblog/archive/2004/06/21/1916.aspx' rel='external nofollow' class='url'>Test .Text Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185853">
			June 21, 2004 at 8:35 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-185873">
				<div id="div-comment-185873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185873">
			June 21, 2004 at 10:35 pm</a>		</div>

		<p>Unfortunatly, one cannot use control&#8217;s text ordinal to display text &#8211; it works for icon and bitmaps only. pity</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185883">
				<div id="div-comment-185883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185883">
			June 21, 2004 at 11:57 pm</a>		</div>

		<p>Raymond: the x, y, cx, cy fields should be signed and there is no 0xFF 0x00 to specify ordinals, it&#8217;s all 0xFFFF.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-185893">
				<div id="div-comment-185893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Holger Dors</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185893">
			June 22, 2004 at 12:22 am</a>		</div>

		<p>You write &quot;strings got changed from ANSI to Unicode&quot;: what kind of encoding is used for Unicode? Is it UCS-2 or UTF-16? </p>
<p>I never have been able to find the answer on this&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185943">
				<div id="div-comment-185943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185943">
			June 22, 2004 at 7:24 am</a>		</div>

		<p>Holger: What&#8217;s the difference between UCS-2 and UTF-16? As far as I can tell they both use surrogate pairs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-185973">
				<div id="div-comment-185973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Holger Dors</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185973">
			June 22, 2004 at 7:49 am</a>		</div>

		<p>@Raymond: no, UCS-2 cannot use surrogate pairs and is limit to codepoints up tp $FFFF. AFAIK that was the reason why UTF-16 was created in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185993">
				<div id="div-comment-185993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185993">
			June 22, 2004 at 7:58 am</a>		</div>

		<p>I have no idea. But instead of just saying &quot;Gosh I will never know&quot;, I decided to search on google for &quot;site:msdn.microsoft.com surrogate pairs&quot; and it found this page<br />
<br /><a target="_new" href="http://msdn.microsoft.com/library/en-us/intl/unicode_192r.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/intl/unicode_192r.asp</a> . Please, people, don&#8217;t be lazy. Do some searching yourself before asking questions. I have better things to do with my time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-186003">
				<div id="div-comment-186003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Holger Dors</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-186003">
			June 22, 2004 at 8:19 am</a>		</div>

		<p>I&#8217;m sorry to have wasted your time, Raymond, but I really did search earlier for an answer to this. It just never occured to me to search for &quot;surrogate pairs&quot;.</p>
<p>But finally, thanks to you, I have an answer: starting with W2K UTF-16 (and therefore surrogate pairs) are supported, up until then it was UCS-2.</p>
<p>Many thanks for your help!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-185903">
				<div id="div-comment-185903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-185903">
			June 22, 2004 at 2:05 am</a>		</div>

		<p>For example, with 24-bit DIBs it is a pain in the behind because you can&#8217;t write</p>
<p>lpPixel = lpData + 3 * (x + y * width);</p>
<p>but the tedious:</p>
<p>byteWidth = (width * 3 + 3) &amp; 0xFFFFFFFC;<br />
<br />lpPixel = lpData + 3 * x + y * byteWidth;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-186223">
				<div id="div-comment-186223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcdlg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-186223">
			June 22, 2004 at 5:51 pm</a>		</div>

		<blockquote><p>
  PPC, MIPS, Alpha AXP, ia64 all crash if you access unaligned data. x86 is the weirdo: It permits unaligned data access. </p>
<p>Raymond,</p>
<p>I cannot resist the pedantic urge to correct this.</p>
<p>-AFAIK there are no PPC CPUs which do not support unaligned integer data access in hardware.</p>
<p>-MIPS generate a precise exception that allows the kernel to emulate in software the unaligned access. (Granted this is dead slow. And a more than sufficient reason to avoid unaligned data at all cost. (e.g. for a packed struct a MIPS compiler will generate 4 load byte instructions to access a dword)</p>
<p>-Alpha probably does software emulation too, since it is frequently impossible to statically determine if an access is aligned or not.</p>
<p>And having worked on optimizing network stack code for MIPS, x86 is a smart &quot;weirdo&quot;.</p>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-186503">
				<div id="div-comment-186503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-186503">
			June 23, 2004 at 10:41 am</a>		</div>

		<p>Marcdlg: Support for misaligned access is an optional feature of the PowerPC architecture, at least in little-endian mode (which is what Windows uses). The early PowerPCs (601, 603, 604) raise an exception for it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196033">
				<div id="div-comment-196033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-196033">
			July 16, 2004 at 11:58 am</a>		</div>

		<p>asdf: 0xFF 0xFF and 0xFF 0x00 are both valid and mean different things! I was not sufficient clear.</p>
<p>0xFF 0xFF means &quot;What comes next is a special class ordinal (0x80 = button, etc.)&quot;.</p>
<p>0xFF 0x00 means &quot;What comes next is a class ordinal (atom).&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-292223">
				<div id="div-comment-292223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2004/06/24/164737.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040621-00/?p=38793#comment-292223">
			July 22, 2005 at 9:13 pm</a>		</div>

		<p>Trying to capture the changes in a table.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

