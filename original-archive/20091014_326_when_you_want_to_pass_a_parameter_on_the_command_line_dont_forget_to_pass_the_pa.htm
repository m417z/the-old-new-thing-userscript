<html>
<head>
<title>When you want to pass a parameter on the command line, don't forget to pass the parameter on the command line</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you want to pass a parameter on the command line, don&#8217;t forget to pass the parameter on the command line</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 14, 2009 / year-entry #327</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">This happens to me, too. I once got so distracted by the process of purchasing some tickets in person, choosing the performance date and the seats, fumbling for my credit card, signing the receipt, and when I was done, I left the ticket booth without my tickets! Here is a question that came in from...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
This happens to me, too.
I once got so distracted by the process of purchasing some tickets
in person,
choosing the performance date and the seats, 
fumbling for my credit card,
signing the receipt, and when I was done, I left the ticket booth
without my tickets!
</p>
<p>
Here is a question that came in from a customer.
The details have been changed but the underlying point is the same.
</p>
<blockquote CLASS=q>
<p>
According to the documentation, the
<code><a HREF="http://www.seasite.niu.edu/Tagalog/howSlangwords.htm">taglog</a></code> command
prints a history log of all the tags in the system.
I can pass the <code>-d</code> option to limit the date range,
and that works too.
It also says that
that I can pass a specific tag name to limit the listing to just
that one tag,
but I can't get that part to work.
Here's what I'm doing:
</p>
<pre>
for /f %i in (taglist.txt) do taglog -d 2008/05/01,2008/05/31 &gt;&gt; output
</pre>
<p>
But this just dumps the history of all tags during the month of May,
not the tags I asked for.
</p>
</blockquote>
<p>
This customer got so excited about passing the date range filter
that he forgot to pass the tag name.
</p>
<pre>
for /f %i in (taglist.txt) do taglog -d 2008/05/01,2008/05/31 <font COLOR=blue>%i</font> &gt;&gt; output
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-777613">
				<div id="div-comment-777613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777613">
			October 14, 2009 at 7:05 am</a>		</div>

		<p>Raymond, it seems that you have posted the wrong link for the taglog command.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777633">
				<div id="div-comment-777633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bahbar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777633">
			October 14, 2009 at 7:26 am</a>		</div>

		<p>@Nawak: I would not be surprised if it was intentional. Slang words coming from tagalog was pretty cool to read about, and the point Raymond is making does not need any understanding of the actual taglog program (which is likely in the &#8220;details have been changed&#8221; category)</p>
<div class=post>[<i>Yup. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777733">
				<div id="div-comment-777733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/matthew_van_eerde' rel='external nofollow' class='url'>Maurits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777733">
			October 14, 2009 at 8:42 am</a>		</div>

		<p>This happens to me all the time. &nbsp;My first troubleshooting step whenever I get unexpected output from a &quot;for&quot; command is to verify what I&#8217;m actually doing inside it:</p>
<p>for /f %i in (taglist.txt) do ECHO taglog -d 2008/05/01,2008/05/31</p>
<p>(Hmm, all those commands look the same&#8230; d&#8217;oh!)</p>
<p>Actually to be honest I usually do the ECHO version first, before even trying the command &quot;for real.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777753">
				<div id="div-comment-777753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777753">
			October 14, 2009 at 9:46 am</a>		</div>

		<p>And then there&#8217;s typing %1 (percent one) instead if %i &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777763">
				<div id="div-comment-777763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sab39.netreach.com/' rel='external nofollow' class='url'>Stuart Ballard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777763">
			October 14, 2009 at 10:09 am</a>		</div>

		<p>Do you want &#8220;%i&#8221; with quotes around it in case the entries contain spaces, or does windows do that for you?</p>
<p>(I&#8217;m coming from the unix world where quotes would generally be desirable in that situation)</p>
<div class=post>[<i>Presumably there is some external knowledge that says that none of the entries will contain spaces or shell metacharacters. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777783">
				<div id="div-comment-777783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777783">
			October 14, 2009 at 10:34 am</a>		</div>

		<p>@Stuart:</p>
<p>No, Windows does not do that. It may not be desirable (e.g. when outputting to a file). There is, however, a way to get the short name (%~si instead if %i). What&#8217;s a short name, you ask? Excellent question.</p>
<p>PowerShell doesn&#8217;t have that problem, due to using objects instead of plain text.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777863">
				<div id="div-comment-777863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777863">
			October 14, 2009 at 1:01 pm</a>		</div>

		<p>The CRT team has a similar problem, they got so excited about reading environment variables and building command lines, that at the end forgot to put the correct executable name :) Try calling _wsystem() when the command processor resides in a directory with a space in its name/path.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777883">
				<div id="div-comment-777883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ParameterPasser</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777883">
			October 14, 2009 at 1:47 pm</a>		</div>

		<p>I want to pass the /nobackup parameter to wusa.exe and pkgmgr.exe however how much excited I get, I can&#8217;t because it&#8217;s not supported.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777913">
				<div id="div-comment-777913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777913">
			October 14, 2009 at 4:33 pm</a>		</div>

		<p>someone else: that&#8217;s why you use %a in for loops. &nbsp;It also means that for /f expands to %a, %b, %c, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777923">
				<div id="div-comment-777923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777923">
			October 14, 2009 at 6:28 pm</a>		</div>

		<p>In Perl, a lot of commands take a missing argument to mean $_, which in turn is set by loops. Which means that you can have for example a &quot;print;&quot; statement inside a loop. I&#8217;ve never decided whether I think that&#8217;s a good thing; I left Perl for different reasons.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777963">
				<div id="div-comment-777963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777963">
			October 14, 2009 at 6:43 pm</a>		</div>

		<p>@Mark:</p>
<p>It&#8217;s not really that much dependent on the variable name. It&#8217;s just muscle memory: &quot;This is a percent sign, which denotes a parameter, so it&#8217;s followed by a number &#8230; damn &#8230;&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-777973">
				<div id="div-comment-777973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777973">
			October 14, 2009 at 7:17 pm</a>		</div>

		<blockquote><p>
  &gt; Do you want &quot;%i&quot; with quotes around it in case the entries contain spaces, or does windows do that for you?
</p></blockquote>
<p>UNIX knows about command line arguments, Windows doesn&#8217;t. All CreateProcess() does is pass a single string, it&#8217;s up to the target application to parse them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-777983">
				<div id="div-comment-777983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-777983">
			October 14, 2009 at 8:47 pm</a>		</div>

		<p>@Stuart:</p>
<p>&quot;%~i&quot; &nbsp; (use quotes, the ~ removes them from the value if necessary)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-778023">
				<div id="div-comment-778023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778023">
			October 14, 2009 at 10:37 pm</a>		</div>

		<p>@porter: Actually, there are several entry points to a Windows program. You have classical WinMain, wWinMain (instead of LPCTSTR, it&#8217;s LPCWSTR &#8211; wide string). You also have main() and the corresponding wmain (also taking wide strings). The latter two entry points rely on the Windows CRT to do the argument splitting.</p>
<div class=post>[<i>There is only one true entry point, which is called with no parameters. Everything else is runtime support. &#8220;It&#8217;s up to the target application to parse them&#8221; is correct, since the runtime is part of the application. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-778063">
				<div id="div-comment-778063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778063">
			October 15, 2009 at 3:04 am</a>		</div>

		<p>This is a lot more fun if $FOO=-rf /</p>
<p>Much fun will be had by all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-778093">
				<div id="div-comment-778093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778093">
			October 15, 2009 at 6:17 am</a>		</div>

		<p>@Evan:</p>
<p>Shells tend to do that because it allows you to do things like:</p>
<p>$ export CFLAGS=&quot;-Wall -O1 -g&quot;</p>
<p>$ cc $CFLAGS -o foo foo.c</p>
<p>If the shell auto-quoted variable expansions, that sort of thing would simply not be possible. Instead, the way it does it, it is at least possible to do things the other way with:</p>
<p>$ export fname=&quot;awkward filename.c&quot;</p>
<p>$ cc $CFLAGS -o foo &quot;$fname&quot;</p>
<p>You, as the user of the variable know whether it&#8217;s meant to expand to a single arg or many, so can quote it or not as appropriate, in exactly the same way as you quote (or not) all the other args to the command.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-778033">
				<div id="div-comment-778033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778033">
			October 14, 2009 at 11:41 pm</a>		</div>

		<p>@porter:</p>
<p>What you say is fairly irrelevant; the question was pointing out that even though the Unix kernel may know about command line arguments, Unix *shells* somewhat act like *they* don&#8217;t.</p>
<p>In particular, if an environment variable FOO&#8217;s value contains spaces and you use $FOO on the command line unadorned (e.g. &#8216;rm $FOO&#8217;) then the target command will receive each token as a separate argument. If you want to make sure that it&#8217;s passed as one argument, you need to quote the environment variable occurrence. The alternative would be to implicitly put quotes around it.</p>
<p>I&#8217;m not sure which makes more sense.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-778133">
				<div id="div-comment-778133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/matthew_van_eerde/' rel='external nofollow' class='url'>Maurits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778133">
			October 15, 2009 at 8:46 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/matthew_van_eerde/archive/2008/11/25/xargs-start.aspx" rel="nofollow">http://blogs.msdn.com/matthew_van_eerde/archive/2008/11/25/xargs-start.aspx</a></p>
<p>This is why my xargs.bat has an /addquotes switch.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-778143">
				<div id="div-comment-778143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778143">
			October 15, 2009 at 9:53 am</a>		</div>

		<p>So you&#8217;re saying that people would be capable of remembering to make the distinction between $FOO and %FOO, in cases where they are incapable of doing so between $FOO and &quot;$FOO&quot;, even though this is almost identical to the distinction they already make between &#8216;cat foo bar&#8217; and &#8216;cat &quot;foo bar&quot;&#8217;?</p>
<p>I&#8217;m not so sure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-778173">
				<div id="div-comment-778173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778173">
			October 15, 2009 at 1:29 pm</a>		</div>

		<p>What about arguments that contain embedded quotes? I know CommandLineToArgvW uses backslashes (in an odd way, ignoring backslashes that <em>don&#8217;t</em> precede a quote mark) and some programs use doubled quote marks. Is there any way in cmd to quote a variable and do escaping in this way?</p>
<p>At least filenames can&#8217;t contain quotes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-778103">
				<div id="div-comment-778103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778103">
			October 15, 2009 at 6:47 am</a>		</div>

		<p>@Karellen:</p>
<p>I understand why they do that, but there are also cases where it&#8217;s equally clear that having it treated as one argument makes sense. If you have something like &#8220;for FILE in *; cp $FILE /some/other/place&#8221; it would be pretty remarkable if the programmer DIDN&#8217;T intend for the $FILE arguments to be passed as one. Sure, the programmer *could* have quoted it to make it work, but many don&#8217;t, which leads to a lot of not-very-well-vetted scripts that break when you have spaces in your paths. </p>
<p>Now, it&#8217;s (quite) possible that the current way is the right way, since it is strictly more general, but at the same time there are a couple middle-ground options you could take too. (Though again, I&#8217;m not sure which would be the best option in practice.)</p>
<p>Two such middle ground options would be to have different ways of inserting an environment variable&#8230; for instance $FOO inserts it as one argument, and %FOO inserts it as two. Another would be to have things like &#8216;for&#8217; that generate things that likely should be used as one argument insert the quotes that will eventually cause them to be grouped together.</p>
<div class=post>[<i>$FOO/%FOO could work. Auto-quoting in &#8220;for&#8221; wouldn&#8217;t though: <code>for /f &#8220;delims=&#8221; %i in (commandstorun.txt) do %i</code> would be impossible if %i were auto-quoted. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-778193">
				<div id="div-comment-778193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone else</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778193">
			October 15, 2009 at 2:46 pm</a>		</div>

		<p>“At least filenames can&#8217;t contain quotes.”</p>
<p>On unixoid operating systems, they can. In fact, they can contain anything except slash and NUL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-778203">
				<div id="div-comment-778203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778203">
			October 15, 2009 at 6:29 pm</a>		</div>

		<p>Yeah well on &quot;unixoid&quot; operating systems you don&#8217;t have to mess around with quoting and escaping to pass any string to execve()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-778213">
				<div id="div-comment-778213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778213">
			October 15, 2009 at 6:42 pm</a>		</div>

		<blockquote><p>
  &gt; The alternative would be to implicitly put quotes around it.</p>
<p>  &gt; I&#8217;m not sure which makes more sense.
</p></blockquote>
<p>It doesn&#8217;t make sense for it to implicitly make the wrong guess. The shell doesn&#8217;t know if your variable with spaces is supposed to contain a list of things, or a single thing with spaces in. Hence it doesn&#8217;t try and second guess you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-778243">
				<div id="div-comment-778243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778243">
			October 15, 2009 at 8:51 pm</a>		</div>

		<p>Okay, so this was a little more discussion than I anticipated on this topic; sorry for bringing it off course (as I go ahead and fan the flames more).</p>
<p>@Raymond: &quot;Auto-quoting in &quot;for&quot; wouldn&#8217;t though&quot;</p>
<p>Your example is a good one; I didn&#8217;t think of that. (When I do a for loop in a shell it&#8217;s almost something like &#8216;for FILE in *.foo&#8217;.)</p>
<p>@Karellen</p>
<p>I envision the &quot;autoquote&quot; variant would be sort of the default go-to case, and then the separate tokens version would be used rather less frequently.</p>
<p>I SSHed into my &quot;work&quot; (I&#8217;m a grad student) Linux box to see what environment variables I have set. There are 39 of them. 36 of them I&#8217;d want to be treated as a single argument if I were to pass it to a command for some reason. 20 of them are a path or :-separated list of paths, and these are ones where a space could legitimately show up. By contrast, of the remaining three, two of them I&#8217;m not sure about (these are $SSH_CLIENT and $SSH_CONNECTION), and only one out of the 39 environment variables would I actually want to be separate tokens.</p>
<p>The story is similar on the Windows box I&#8217;m posting from. 42 environment variables in total. 23 are paths or a collection of paths, many of which in actuality DO contain spaces (e.g. Program Files). In addition, there is at least one more environment variable where spaces make sense (because it has them currently), %PROCESSOR_IDENTIFIER%.</p>
<p>Finally, back on my Linux box I took a look at my command history. I store 10,000 lines of history, and grepped through it for uses of $. There are 130 such commands. To avoid bias because of some dumb things about the way I have things set up, it&#8217;s probably better to count only unique commands, of which there were 71. (I&#8217;m pretty sure counting all would strengthen my case BTW, because many of the things I&#8217;m excluding are several cases of putting stuff into $LD_LIBRARY_PATH.) Those cases break down as follows: 29 commands where $ didn&#8217;t have anything to do with environment variables (grep was a common case, and $(command) falls here), 15 cases where the &quot;autoquoting&quot; wouldn&#8217;t matter (almost all because I was just doing &#8216;echo $FOO&#8217;), 4 cases where I&#8217;m not sure where they go, and 20 cases where an environment variable is a path, filename, or :-separated list of paths where you&#8217;d want it treated as one argument (9 times for &#8216;configure &#8211;prefix=$HOME/.packages&#8217;, 5 times to add a path to LD_LIBRARY_PATH, 3 for loops, and 3 misc. other cases). In *no* command in the last 10,000 I&#8217;ve run on that computer from an interactive shell do I even think there&#8217;s a reasonable chance I have intended an environment variable to be treated as separate arguments.</p>
<p>(Of course, there are other situations where this is not true, programming Make/SCons scripts being probably the main one.)</p>
<p>I of course don&#8217;t know that my experience is typical, but I do suspect that &quot;treat the environment variable as one argument&quot; is by far the common case. And it seems wrong to me to make the *common* case require extra work (adding quotes) and the *uncommon* and more error-prone case be the default behavior.</p>
<p>@porter:</p>
<p>I think this is pretty similar to one of the big distinctions between Unix and Windows (even though both behave the same in this regard). The Unix approach a lot of the time is &quot;we don&#8217;t know for sure what the user intends, so it&#8217;s better to be easily predictable even if we&#8217;re wrong most of the time&quot; while Windows will try to help the user even if it means things are less predictable. (For an example, see one of Raymond&#8217;s relatively recent posts about how if Windows detects you turning the screensaver off very soon after it comes on, it will start to increase the idle delay.)</p>
<p>I sort of view the shell as already making such a decision for me about how I want $FOO treated, so I don&#8217;t see trying to make that decision more intelligent as a necessarily bad thing.</p>
<p>(Now, all that said, yes, I think that if you had to choose between just &quot;treat $FOO as one argument&quot; and &quot;treat $FOO as potentially many arguments&quot;, the latter is probably the right choice because it&#8217;s strictly more general. I&#8217;m just trying to say that I wish that shell designers had put more thought into it and chose some middle ground. I&#8217;ve had too many headaches caused by trying to run scripts written for Unix, where spaces are uncommon, under Cygwin on a platform where for a while your equivalent of /home/ was /documents and settings/.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-778563">
				<div id="div-comment-778563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20091014-00/?p=16383#comment-778563">
			October 16, 2009 at 10:20 pm</a>		</div>

		<p>Evan: it&#8217;s not &quot;strictly more general&quot;, forcible quoting would make building a string of command line options impossible without a way of stripping quotes. &nbsp;$FOO/%FOO might work, but then what would you do about !FOO! ?</p>
<p>I&#8217;m certain the trouble you&#8217;re having with Cygwin is exactly why Microsoft chose to have &quot;Documents and Settings&quot; and &quot;Program Files&quot;: to force coders to sort their stuff out.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

