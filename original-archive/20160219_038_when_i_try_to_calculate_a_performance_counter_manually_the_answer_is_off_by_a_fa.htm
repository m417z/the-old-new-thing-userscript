<html>
<head>
<title>When I try to calculate a performance counter manually, the answer is off by a factor of 100</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When I try to calculate a performance counter manually, the answer is off by a factor of 100</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 19, 2016 / year-entry #39</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Because it's a percentage.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was having difficulty calculating a performance counter
manually.
According to the formula
<a HREF="https://msdn.microsoft.com/en-us/library/ms803979.aspx">
in the documentation</a>,
performance counters that are of type
<code>PERF_PRECISION_100NS_TIMER</code>
should be calculated as
(<var>N</var>&#x2081;&minus;<var>N</var>&#x2080;)/(<var>D</var>&#x2081;&minus;<var>D</var>&#x2080;).
But when we do that, the results we get are a factor of 100 smaller
than the values reported by PerfMon.
Are we expected to multiply the result by 100?
</p>
<p>
Let's take a step back and look at the various types of performance
counters.
</p>
<p>
One general category
is the counter that simply reports an instantaneous value.
You ask for the amount of free memory,
you get the amount of free memory
at the moment you ask.
</p>
<p>
Another is a counter that accumulates a value over time.
You ask for the number of bytes written to disk,
and you get the number of bytes written to disk since the
performance counter started keeping track.
To extract something more useful like "bytes written to disk per second",
you are expected to read the value,
wait one second, then read it again,
and then subtract.
That gives the number of bytes written in the period of time that
elapsed between the first and second reading.
</p>
<p>
If you want to report "bytes written per second" over a different
period of time, you read the value, wait a little while, then read the
value again; then you subtract the two readings and divide by the
amount of time that elapsed between the two readings.
Fancy math people might say that you are expected to <i>differentiate</i>
over time, because what you are calculating is a derivative:
<font SIZE="+1">(</font><var>f</var>&thinsp;(<var>a</var> + <var>h</var>)
&minus; <var>f</var>&thinsp;(<var>a</var>)<font SIZE="+1">)</font>/<var>h</var>.
</p>
<p>
For example, suppose you want to report "bytes written per second",
but update the value ten times per second.
You would read the value, wait 0.1s, then read the value again.
Subtract the two readings to determine the number of bytes written
during the 0.1s interval.
To convert to this to bytes written per second, divide by 0.1s.
</p>
<p>
Via dimensional analysis: Bytes read &divide; seconds elapsed
= bytes read per second.
</p>
<p>
A special case of the accumulated value is the temporal
accumlated value.
These are values that indicate how much time was spent performing
some activity.
If you subtract the two readings, then divide by the time between
readings, you determine what fraction of the time was spent
performing that activity.
</p>
<p>
For example, "CPU idle time" accumulates over time.
To find out how idle the machine was in the past second,
you read the idle time, wait one second, then read the idle
time again. Subtract to determine the amount of time spent
idle during the past second.
And if you want to measure over a larger or smaller interval,
you divide by the amount of time that elapsed between the readings.
</p>
<p>
Many of the accumulated values actually report two values:
The accumulated value and a timestamp.
The timestamp records the internal time at which the accumulated
value was obtained.
This is important for two reasons:
For one thing, it takes time
to read the counter,
and you don't want that time to skew your calculations.
But more important is that
your code to wait exactly one second between readings
can have latency or wobble,
either because that is in the nature of the timer you chose,
or because something happened outside your control,
such as getting pre-empted by a hardware interrupt or taking a page fault.
For high-speed counters,
these delays can create large swings in calculated values.
Using the timestamps reported by the counter ensures that your
calculations are accurate.
</p>
<p>
Okay, so now the question: Why is the calculation off by a
factor of 100?
</p>
<p>
The PerfMon program assumes that a differentiated accumulated time value
represents a percentage.
If you are differentiating a time value, then you are calculating
the ratio of two time values, which is dimensionless.
"During the 1-second interval that just ended,
what fraction of the time was spent doing X?"
This naturally lends itself to being expressed as a percentage
rather than a direct ratio.
It's easier to understand "X is happening 15.3% of the time"
rather than "X is happening 0.153 of the time."
</p>
<p>
The customer explained that they were
interested in the total amount rather than an average over time.
In which case, they can take the reading at the end and the reading
at the start, subtract the two values, and don't divide by the time
that elapsed.
That will tell you that the CPU was idle for <var>N</var>
seconds between the two readings.
I'm not sure what use that is to them without knowing how far
apart the two readings are,
but if that's what you want, that's
how you get it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1227541">
				<div id="div-comment-1227541" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052#comment-1227541">
			February 19, 2016 at 7:47 am</a>		</div>

		<p>I&#8217;m with the customer here in that assuming a float from 0-1 seems more natural to me than 0-100. I usually keep all my ratios in 0-1 and only format to 0-100 directly before showing something to the user. I&#8217;m surprised that the API designers went for percentage instead.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1227554">
				<div id="div-comment-1227554" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052#comment-1227554">
			February 19, 2016 at 8:05 am</a>		</div>

		<p>You have it backwards. The API gives you a number in the range 0..1, per the formula (N₁−N₀)/(D₁−D₀). It is the customer who is expecting to get a value in the range 0..100. They thought that PerfMon was showing the raw output of the API. In reality, it converts the fraction to a percentage before displaying it to the user.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1227551">
				<div id="div-comment-1227551" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052#comment-1227551">
			February 19, 2016 at 7:49 am</a>		</div>

		<p>I know &#8220;Math is hard.&#8221;, but is this not a case of &#8220;4th grade math is hard!&#8221;????</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1227571">
				<div id="div-comment-1227571" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052#comment-1227571">
			February 19, 2016 at 10:58 am</a>		</div>

		<p>It reminds me of that poor Computer Science student that couldn&#8217;t tell multiplication from power. I was her data structures home teacher, and she wasn&#8217;t able to understand tree and graph transversing algorithms. &#8220;Do not teach me how it works,&#8221; she said. &#8220;Just give it to me so I can memorize it and spit it out in the exam&#8221; (that was 20 years ago, and programming examinations where made on paper). Sad.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1227582">
				<div id="div-comment-1227582" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052#comment-1227582">
			February 20, 2016 at 4:22 am</a>		</div>

		<p>Although not useful for CPU idle time, it might make more sense to measure, say, the total per-process CPU time for a process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1 parent" id="comment-1227602">
				<div id="div-comment-1227602" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052#comment-1227602">
			February 21, 2016 at 5:13 pm</a>		</div>

		<p>I remember similar question got asked in MSDN forum, except that they were asking for method to read network utilization through SNMP, and except that Cisco documentation site already have the necessary formulas spelt out, and yet they had to ask followup question on how to get the value of &#8230; _-_</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-2" id="comment-1227611">
				<div id="div-comment-1227611" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052#comment-1227611">
			February 21, 2016 at 10:15 pm</a>		</div>

		<p>of &#8220;Delta T&#8221;&#8230; WordPress ate my words&#8230; :(</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jader3rd odd alt thread-even depth-1" id="comment-1227632">
				<div id="div-comment-1227632" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jader3rd' rel='external nofollow' class='url'>jader3rd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160219-00/?p=93052#comment-1227632">
			February 22, 2016 at 9:12 am</a>		</div>

		<p>I had a similar experience with my dad the last time I visited him. I was going over an Excel spreadsheet with him, and when Excel calculated some formula for him, he said that I must have done it wrong because it was 100x too much. A few iterations, and they all were 100x too much. I wasn&#8217;t worried that I had done anything wrong, so when I had him actually look at the data, he remembered that the original data was in cents, and not dollars.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

