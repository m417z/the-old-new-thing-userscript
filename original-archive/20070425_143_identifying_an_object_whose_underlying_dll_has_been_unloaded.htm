<html>
<head>
<title>Identifying an object whose underlying DLL has been unloaded</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Identifying an object whose underlying DLL has been unloaded</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 25, 2007 / year-entry #144</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Okay, so I gave it away in the title, but follow along anyway. Your program chugs along and then suddenly it crashes like this: eax=06bad8e8 ebx=00000000 ecx=1e1cfdf0 edx=00000000 esi=06b9a680 edi=01812950 eip=1180ab57 esp=001178b4 ebp=001178c0 iopl=0 nv up ei pl nz na pe nc cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00010206 ABC!FunctionX+0x1f: 1180ab57 ff5108 call dword ptr...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Okay, so I gave it away in the title, but follow along anyway.
</p>
<p>
Your program chugs along and then suddenly it crashes like this:
</p>
<pre>
eax=06bad8e8 ebx=00000000 ecx=1e1cfdf0 edx=00000000 esi=06b9a680 edi=01812950
eip=1180ab57 esp=001178b4 ebp=001178c0 iopl=0         nv up ei pl nz na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
ABC!FunctionX+0x1f:
1180ab57 ff5108          call    dword ptr [ecx+8]    ds:0023:1e1cfdf8=????????
0:000>&gt;
</pre>
<p>
Instantly you recognize the following:
</p>
<ul>
<li>This is a virtual method call.
    (Call indirect through register plus offset.)
    &mdash; Very high confidence.</p>
<li>The vtable is in <code>ecx</code>.
    (That is the base register of the indirect call.)
    &mdash; Very high confidence.</p>
<li>The underlying DLL for this object has been unloaded.
    (The memory that contains the vtable is not valid and its address
    is consistent with once having been in valid code.)
    &mdash; High confidence.</p>
<li>This is a <code>IUnknown::Release</code> call.
    (<code>Release</code> is the third function of <code>IUnknown</code>
    and therefore resides at offset 8 on x86.)
    &mdash; High confidence.
</ul>
<p>
Of course, all of the above "instant conclusions" are merely
"highly-educated guesses", but life is full of highly-educated guesses.
(Every morning, I guess that my plates are still in the cupboard.)
</p>
<p>
Let's run with our theory that the object was in an unloaded DLL
and look for confirmation.
</p>
<pre>
0:000&gt; lm
start    end        module name
...
Unloaded modules:
10340000 10348000   DEF.DLL
1e1c0000 1e781000   GHI.DLL
25a90000 25a96000   JKL.DLL
0:000&gt;
</pre>
<p>
Aha, our presumed vtable address lies right inside the address space
where <code>GHI.DLL</code> used to be loaded.
Let's see what used to be loaded at that address.
For this, I borrow a trick from
<a HREF="http://blogs.msdn.com/doronh/">
Doron</a>, namely
<a HREF="http://blogs.msdn.com/doronh/archive/2006/03/10/549036.aspx">
loading a module as a dump file</a>.
This "virtually loads" the library so you can poke around inside it.
</p>
<pre>
C:\Program Files\ABC&gt; ntsd -z GHI.DLL

Microsoft (R) Windows Debugger
Copyright (c) Microsoft Corporation. All rights reserved.

Loading Dump File [C:\Program Files\ABC\GHI.DLL]
...
ModLoad: 15800000 15dc1000   C:\Program Files\ABC\GHI.DLL
eax=00000000 ebx=00000000 ecx=00000000 edx=00000000 esi=00000000 edi=00000000
eip=15807366 esp=00000000 ebp=00000000 iopl=0         nv up di pl nz na pe nc
cs=0000  ss=0000  ds=0000  es=0000  fs=0000  gs=0000             efl=00000000
GHI!_DllMainCRTStartup:
15807366 8bff             mov     edi,edi
0:000&gt;
</pre>
<p>
That module-load notification tells you where the DLL got
virtually-loaded;
in our case, it got loaded to 0x15800000.
This isn't the same address as it was in our crashed process,
so we'll have to do some mental arithmetic to account for the
discrepancy.
</p>
<p>
Going back to the original register dump, we see that our
putative vtable is at <code>ecx=1e1cfdf0</code> relative
to the load address <code>1e1c0000</code>.
Since our DLL-loaded-as-a-dump-file was loaded at <code>0x1580000</code>
we need to adjust the address to be relative to the new location.
</p>
<pre>
// working with the second copy of ntsd
0:000&gt; ln 0x1580fdf0
(1580fdf0)   GHI!CAlphaStream::`vftable'
</pre>
<p>
That magic number <code>0x1580fdf0</code> is just the result of
some mental arithmetic.
First:
</p>
<table BORDER=0>
<tr>
<td ALIGN=right><code>0x1e1cfdf0</code></td>
</tr>
<tr>
<td ALIGN=right STYLE="border-bottom: solid black .75pt"><code>-0x1e1c0000</code></td>
</tr>
<tr>
<td ALIGN=right><code>0x0000fdf0</code></td>
</tr>
</table>
<p>
This is the address of the vtable in the crashed process
relative to the load address of the DLL in the crashed process.
Next:
</p>
<table BORDER=0>
<tr>
<td ALIGN=right><code>0x15800000</code></td>
</tr>
<tr>
<td ALIGN=right STYLE="border-bottom: solid black .75pt"><code>+0x0000fdf0</code></td>
</tr>
<tr>
<td ALIGN=right><code>0x1580fdf0</code></td>
</tr>
</table>
<p>
This is the address of the vtable in the DLL-loaded-as-a-dump-file
relative to the load address of the DLL in the DLL-loaded-as-a-dump-file.
The math really isn't that hard, as you can see, since a lot of things
cancel out.
This happens a lot.
</p>
<p>
When we asked the debugger to tell us what symbol is nearest to that
address, we hit the jackpot: It is exactly a vtable for the
<code>CAlphaStream</code> object.
This confirms our original theory.
We can even confirm the <code>IUnknown::Release</code> theory
by dumping the vtable.
</p>
<pre>
0:000&gt; dds 1580fdf0
1580fdf0  159234b3 GHI!CAlphaStream::QueryInterface
1580fdf4  15810539 GHI!<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/03/22/400373.aspx">CBetaState::AddRef</a>
1580fdf8  15923cfc GHI!CAlphaStream::Release
1580fdfc  15923d30 GHI!CAlphaStream::Read
...
</pre>
<p>
Yup, that's a <code>CAlphaStream</code> vtable all right.
</p>
<p>
Since I'm not familiar with the <code>GHI.DLL</code> file,
let's ask the debugger where the source code is so we can take a closer
look:
</p>
<pre>
0:000&gt; .lines
Line number information will be loaded
0:000&gt; dds 1580fdf0
1580fdf0  159234b3 GHI!CAlphaStream::QueryInterface
                   [c:\dev\fabricam\synergy\proactive\winwin.cpp @ 2624]
1580fdf4  15810539 GHI!CBetaState::AddRef
                   [c:\dev\fabricam\leverage\paradigm\initiative.cpp @ 427]
1580fdf8  15923cfc GHI!CAlphaStream::Release
                   [c:\dev\fabricam\synergy\proactive\winwin.cpp @ 2638]
1580fdfc  15923d30 GHI!CAlphaStream::Read
                   [c:\dev\fabricam\synergy\proactive\winwin.cpp @ 2649]
</pre>
<p>
Now that we know where the source code to
<code>CAlphaStream</code> is, we can hop on over to take a quick peek
and confirm that, oh look, the object doesn't increment the DLL object
count when it is constructed (or decrement it when it is destructed).
As a result, when COM calls <code>DllCanUnloadNow</code>, the
<code>GHI.DLL</code> says, "Sure, go ahead!"
The DLL is unloaded even though <code>ABC</code> still has a reference
to it, and then when <code>ABC</code> goes to release that reference,
we crash because <code>GHI</code> is already gone.
</p>
<p>
After I wrote this up, I discovered that
<a HREF="http://blogs.msdn.com/tonyschr/">
Tony Schreiner</a>
went through pretty much
<a HREF="http://blogs.msdn.com/tonyschr/archive/2006/01/09/511029.aspx">
the same exercise</a>
with a third-party Internet Explorer toolbar,
except he had the extra bonus challenge of not having source code
for the plug-in!</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-496683">
				<div id="div-comment-496683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://forbidden-planet.blogspot.com' rel='external nofollow' class='url'>richard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-496683">
			April 25, 2007 at 11:09 am</a>		</div>

		<p>Are you running OS/2?</p>
<p>My copy of ntsd says that the -z option is &quot;reserved for OS/2 debugging&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-496693">
				<div id="div-comment-496693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rhomboid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-496693">
			April 25, 2007 at 11:35 am</a>		</div>

		<p>Rather than doing the address calculation manually, couldn&#8217;t you run rebase on a copy of GHI.DLL so that it loads at the same place it did in the app?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-496703">
				<div id="div-comment-496703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-496703">
			April 25, 2007 at 12:04 pm</a>		</div>

		<p>Richard&#8230;</p>
<p>I checked the version of NTSD that ships with Windows XP SP2. -z is documented as:</p>
<p>-z &lt;CrashDmpFile&gt; specifies the name of a crash dump file to debug</p>
<p>-zp &lt;CrashPageFile&gt; specifies the name of a page.dmp file</p>
<p>Are you using the Windows 2000 version? If it was reserved for OS/2, they might have recycled it for XP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-496723">
				<div id="div-comment-496723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://forbidden-planet.blogspot.com' rel='external nofollow' class='url'>richard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-496723">
			April 25, 2007 at 12:13 pm</a>		</div>

		<p>Yes, I am using Windows 2000. I realized after I posted that I had omitted some vital information (such as the version of the OS and tools I was running).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-496733">
				<div id="div-comment-496733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-496733">
			April 25, 2007 at 12:22 pm</a>		</div>

		<p>Often seen in C++ apps when you have a global COM smart pointer, so the destructor tries calling Release on the COM object after main has completed, and CoUninitialize has been called.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-496753">
				<div id="div-comment-496753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-496753">
			April 25, 2007 at 1:14 pm</a>		</div>

		<p>I think you can also make debugger believe that GHI.DLL is still loaded by doing this:</p>
<p>0:000&gt; ? 1e781000 &#8211; 1e1c0000</p>
<p>Evaluate expression: 6033408 = 005c1000</p>
<p>0:000&gt; .reload GHI.DLL=1e1c0000,005c1000</p>
<p>This is convenient when you need to translate multiple addresses (such as when there is a stack trace with several return addresses from the unloaded DLL on the stack).</p>
<p>(Richard/James &#8211; ntsd from system32 is very old and doesn&#8217;t have any extensions. You should download the latest version from <a rel="nofollow" target="_new" href="http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx" rel="nofollow">http://www.microsoft.com/whdc/DevTools/Debugging/default.mspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-496913">
				<div id="div-comment-496913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-496913">
			April 26, 2007 at 9:30 am</a>		</div>

		<p>Use:</p>
<p>.reload /unl ghi.dll</p>
<p>It does all the dirty work for you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-497033">
				<div id="div-comment-497033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kujo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-497033">
			April 26, 2007 at 12:04 pm</a>		</div>

		<p>In this crash, my first thought is usually that the &#8220;this&#8221; pointer was bad, so the vtable in ecx isn&#8217;t a valid one (using a dangling pointer?) &nbsp;I probably would have barked up that tree before considering an unloaded dll.</p>
<p>I&#8217;ve noticed that good windbg debugging involves a lot of pattern recognition (being able to spot a float or a string, for example.) Unlike me, it sounds like unloaded dll was your first guess, and with high confidence no less! The heuristic you listed was &#8220;its address is consistent with once having been in valid code.&#8221; &nbsp;How did you discern that instantly? &nbsp;</p>
<p>I can see that 0x1e1cfdf8 is well-aligned, but that&#8217;s hardly telling on its own. &nbsp;0x10000000 is a very common dll base address, but 0x1e1cfdf8 doesn&#8217;t feel close enough to that (and indeed, the lucky dll was based at 0x1e1c0000.) Is it just that I don&#8217;t work with COM very often, so dlls aren&#8217;t my first guess?</p>
<div class=post>[<i>True, if I had thought harder, 0x1Exxxxxx does seem a bit too high, but sometimes you get the right answer for the wrong reason. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-eric-brown even thread-even depth-1" id="comment-497053">
				<div id="div-comment-497053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+C+Brown' rel='external nofollow' class='url'>Eric C Brown</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-497053">
			April 26, 2007 at 12:14 pm</a>		</div>

		<p>In recent versions of windbg, the register display will often say &lt;unloaded ghi.dll&gt;+blah. &nbsp;Not always, but often.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-497123">
				<div id="div-comment-497123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kujo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070425-00/?p=27123#comment-497123">
			April 26, 2007 at 12:52 pm</a>		</div>

		<p>Thanks for the tip on -z, it&#8217;s definitely nicer than using dumpbin or something. &nbsp;</p>
<p>Inspired by Eric&#8217;s comment, I see there&#8217;s a brand new version of the debugging tools released today! Thanks :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

