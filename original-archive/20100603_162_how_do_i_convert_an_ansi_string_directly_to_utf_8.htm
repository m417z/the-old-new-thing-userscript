<html>
<head>
<title>How do I convert an ANSI string directly to UTF-8?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I convert an ANSI string directly to UTF-8?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 3, 2010 / year-entry #163</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer asked the following question: Is there a way to convert an ANSI string directly to UTF-8 string? I have an ANSI string which was converted from Unicode based of the current code page. I need to convert this string to UTF-8. Currently I am converting the string from ANSI to Unicode (Multi­Byte­To­Wide­Char(CP_ACP)) and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer asked the following question:</p>
<blockquote class="q"><p>  Is there a way to convert an ANSI string directly to UTF-8 string? I have an ANSI string which was converted from Unicode based of the current code page. I need to convert this string to UTF-8. </p>
<p> Currently I am converting the string from ANSI to Unicode (<code>Multi&shy;Byte&shy;To&shy;Wide&shy;Char(CP_<wbr>ACP)</wbr></code>) and then converting the Unicode to UTF-8 (<code>Wide&shy;Char&shy;To&shy;Multi&shy;byte(CP_<wbr>UTF8)</wbr></code>). Is there a way to do the conversion without the redundant conversion back to Unicode? </p>
</blockquote>
<p> There is no multibyte-to-multibyte conversion function built into Windows (as of this writing). To convert from one 8-bit encoding to another, you have to use Unicode as an intermediate step. </p>
<p> Fortunately, one of my colleagues chose not to answer the question but instead responded to the question with another question: </p>
<blockquote class="q"><p> Is the data loss created by the initial conversion to ANSI really acceptable? Convert from the original Unicode string to UTF-8, and you avoid the potential mess introduced by the Unicode-to-ANSI conversion step. </p>
</blockquote>
<p> The customer was puzzled by this data loss remark: </p>
<blockquote class="q"><p> I'm using the same code page when converting from Unicode to ANSI as I am from converting from ANSI to Unicode. Will there still be a data loss? </p>
</blockquote>
<p> None of the code pages which Windows supports as an ANSI code page can express the full repertoire of Unicode characters. It's simple mathematics: Since one of the requirements for being an ANSI code page is that no single character can be more than 2 bytes, there simply isn't enough expressive power to encode all of Unicode. Now, if you're lucky, all of the characters you're encoding will exist in the ANSI code page, and they will survive the round trip, but that's just if you're lucky. </p>
<p> It's like converting an image from 32-bit color to 8-bit color via the halftone palette. The palette is the "code page" for the conversion. Remembering to use the same palette when converting back is an essential step, but the result of the round trip will be a degraded image because you can't encode all 32-bit colors in a single 256-color palette. If you're lucky, all the colors in the original image will exist in your palette and the conversion will not result in loss of information, but you shouldn't count on being lucky. </p>
<p> The customer went on to explain: </p>
<blockquote class="q"><p> Unfortunately, my code does not have access to the original Unicode string. It is a bridge between two interfaces, one that accepts an ANSI string, and another that accepts a UTF-8 string. I would have to create a new Unicode interface, and modify all existing callers to switch to the new one. </p>
</blockquote>
<p> If all the callers are generating Unicode strings and converting them to ANSI just to call the original ANSI-based interface, then creating a new Unicode-based interface might actually be a breath of fresh air. Keep the poorly-designed ANSI interface around for backward compatibility, so that callers could switch to the Unicode-based interface at their leisure. </p>
<p> <b>Bonus chatter</b>: Even the round trip from ANSI to Unicode and back to ANSI can be lossy, depending on the flags you pass regarding use of precomposed characters, for example. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-837023">
				<div id="div-comment-837023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Mol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837023">
			June 3, 2010 at 7:42 am</a>		</div>

		<p>Geh. Module interface barriers. Time to put deprecate notices in the header file, put the new calls in, and replace the old calls with wrappers.</p>
<p>Wouldn&#39;t stop me from hearing complaints about build warnings for a while, but that problem tends to resolve itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837043">
				<div id="div-comment-837043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gareth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837043">
			June 3, 2010 at 7:47 am</a>		</div>

		<p>When you say &quot;There is no multibyte-to-multibyte conversion function&quot;, don&#39;t you mean single-byte to single-byte conversion?</p>
<p>Also when you say &quot;Since one of the requirements for being an ANSI code page is that no single character can be more than 2 bytes&quot;, don&#39;t you mean more than 1 byte?</p>
<p>I&#39;m hoping these are mistakes because I thought I understood this subject; now I&#39;m not so sure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837083">
				<div id="div-comment-837083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837083">
			June 3, 2010 at 8:14 am</a>		</div>

		<p>@Gareth. &nbsp;ANSI code pages can be either single-byte or multi-byte. &nbsp;For example, code page 1252 (used in the USA) uses one byte for each character, but code page 950 (traditional chinese) uses one or two bytes for each character.</p>
<p>Some code pages (e.g. code page 54936 &#8211; GB18030) can use more than 2 bytes per character but they can&#39;t be selected as &quot;the ANSI code page&quot; (i.e. the system default).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837093">
				<div id="div-comment-837093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837093">
			June 3, 2010 at 8:34 am</a>		</div>

		<p>Assuming the questioner was using a specific single-byte code page (for example 1252) it is trivial to write a routine which converts an ANSI string directly to UTF-8. You need a lookup table containing the UTF-8 representations of the high-bit characters, and it&#39;s done.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837123">
				<div id="div-comment-837123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ry Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837123">
			June 3, 2010 at 10:31 am</a>		</div>

		<p>You can convert the weather into unicode easily:</p>
<p><a rel="nofollow" target="_new" href="http://weather.mar.cx/" rel="nofollow">http://weather.mar.cx/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-837153">
				<div id="div-comment-837153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837153">
			June 3, 2010 at 12:21 pm</a>		</div>

		<p>For those who are reading this article and are confused by the idea of &quot;converting Unicode to UTF-8&quot;, I must point out that when a Microsoft employee says &quot;Unicode&quot; without further qualification, they mean UTF-16 LE.</p>
<p>e.g., &quot;Notead | Save As | Encoding&quot; contains these options:</p>
<p>ANSI</p>
<p>Unicode</p>
<p>Unicode big-endian</p>
<p>UTF-8</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837173">
				<div id="div-comment-837173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837173">
			June 3, 2010 at 12:35 pm</a>		</div>

		<p>The original questioner needs to understand what mathematicians call the &quot;pigeonhole principle&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837193">
				<div id="div-comment-837193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837193">
			June 3, 2010 at 2:49 pm</a>		</div>

		<p>&quot;For those who are reading this article and are confused by the idea of &quot;converting Unicode to UTF-8&quot;, I must point out that when a Microsoft employee says &quot;Unicode&quot; without further qualification, they mean UTF-16 LE.&quot;</p>
<p>Yep, don&#39;t forget MS decided to adopt Unicode for NT before UTF-8 even existed!</p>
<p>Exercise: If UTF-8 was invented in 1992, why didn&#39;t NT 3.1 released in 1993 have UTF-8 support?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837203">
				<div id="div-comment-837203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837203">
			June 3, 2010 at 3:04 pm</a>		</div>

		<p>My answer to the original question would be something along the lines of âlibiconv.â</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837213">
				<div id="div-comment-837213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837213">
			June 3, 2010 at 4:24 pm</a>		</div>

		<p>Marquess: While some iconv implementations support arbitrary conversions, there is generally no requirement that they do so &#8211; and so far as I&#39;m aware, those that do support them convert via UTF-32 if it is neither the source nor destination encoding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837243">
				<div id="div-comment-837243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837243">
			June 3, 2010 at 6:10 pm</a>		</div>

		<p>Having a &quot;superset&quot; code page standing in the middle of conversion can greatly reduce the size of conversion library. (by reducing the pairs of codepages conversion table needed)</p>
<p>For Unicode conversions you have the additional benefit of cleaner handling of varies decomposition forms.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837253">
				<div id="div-comment-837253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837253">
			June 3, 2010 at 8:10 pm</a>		</div>

		<p>Why didn&#39;t they write it themself? UTF-8 is not that hard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837263">
				<div id="div-comment-837263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837263">
			June 3, 2010 at 8:43 pm</a>		</div>

		<p>âI would have to create a new Unicode interface, and modify all existing callers to switch to the new one.â &#8211; From personal experience, that is easier than either dealing with lossy conversion issues or escaping.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837293">
				<div id="div-comment-837293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837293">
			June 3, 2010 at 11:04 pm</a>		</div>

		<p>UTF-8 is a compatibility version of Unicode &#8211; designed for 8-bit clean mediums but avoiding the one byte that can cause problems &#8211; NUL. UTF-16/32 are much easier to parse and handle, and you can get nice speed boosts by converting UTF-8 to UTF-16/32 ASAP if you know your medium can handle embedded NUL bytes.</p>
<p>Navigating UTF-8 is a pain also if you have to go backwards and forwards.</p>
<p>But, UTF-8 is great because most legacy systems can handle it with zero modifications &#8211; they don&#39;t have to be Unicode aware.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837303">
				<div id="div-comment-837303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheesle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837303">
			June 3, 2010 at 11:33 pm</a>		</div>

		<p>I really enjoy your stories, but I find this to be a bit ignorant:</p>
<p>&quot;Keep the poorly-designed ANSI interface around for backward compatibility, so that callers could switch to the Unicode-based interface at their leisure.&quot;</p>
<p>Why do you say poorly-designed? Has it occurred to you that the interface may have been designed 15 years ago, and at its time it was all up to the state of art, provided by its host OS at that time?</p>
<p>Old interfaces may not be easily replaced/duplicated, and in any case it depends on the availability of the source.</p>
<p>Just because something may be old, it is not necessarily poorly-designed.</p>
<p>As for UTF-8 being great, as stated by Worf&#8230; For English yes, once you go beyond 1252, UTF-8 is not great.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837423">
				<div id="div-comment-837423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mdw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837423">
			June 4, 2010 at 9:19 am</a>		</div>

		<p>@ Worf &quot;UTF-8 is a compatibility version of Unicode &#8211; designed for 8-bit clean mediums but avoiding the one byte that can cause problems &#8211; NUL. UTF-16/32 are much easier to parse and handle, and you can get nice speed boosts by converting UTF-8 to UTF-16/32 ASAP if you know your medium can handle embedded NUL bytes.&quot;</p>
<p>UTF-8 doesn&#39;t avoid NUL bytes at all. &nbsp;Are you thinking of Sun&#39;s demented UTF-8 variant?</p>
<p>For a new application, UTF-16 has only one discernible advantage over UTF-8: it&#39;s more compact at representing characters from some Asian languages (two bytes per character rather than three). &nbsp;UTF-16 has the same variable-length encoding problems that UTF-8 has, only they happen more rarely so your code gets tested less well; but it doesn&#39;t have UTF-8&#39;s compatibility with old 8-bit string functions. &nbsp;This goes much further than you might think: UTF-8 strings order lexicographically exactly as the corresponding sequences of code-points do, for example. &nbsp;This is /not/ true of UTF-16, because characters outside the BMP are encoded with surrogate pairs, and the surrogate space isn&#39;t at the top of the BMP.</p>
<p>Not all text processing jobs are faster on UTF-32. &nbsp;UTF-8 has a compactness advantage &#8212; and therefore a locality advantage &#8212; on things that can be done in a single left-to-right pass (or a few of them). &nbsp;There are other advantages to UTF-8 too. &nbsp;Perl is no slouch at text processing; it uses UTF-8 as its internal representation. &nbsp;I&#39;m willing to bet that a good reason for this is that a lot of what it does is searching for substrings. &nbsp;It uses the Boyer&#8211;Moore algorithm, which scans the needle string and builds a table: if I&#39;m comparing with this character in the needle and I find this other character instead, I can skip over so many haystack characters because there&#39;s no hope of a match there. &nbsp;In UTF-32 the tables would be enormous. &nbsp;In UTF-8, it&#39;s still just 256 bytes per character position &#8212; and the search works fine on full Unicode. &nbsp;Other text-processing algorithms &#8212; e.g., lexical analysers &#8212; which work by building and running a DFA need fancy table compression techniques if you&#39;re going to use UTF-32 (and handling the intermediate forms is probably awful). &nbsp;In UTF-8, your DFA ends up being a little more complicated at the beginning but everything else is fairly tractable &#8212; and you can avoid the extra indirections from DFA table decompression.</p>
<p>That&#39;s not to say that having a fixed-size per code-point isn&#39;t good for other jobs. &nbsp;Yes, if you want to pick out the substring between characters 5 and 17 then UTF-8 sucks. &nbsp;But for fixed size per code-point, UTF-32 is the only way to fly.</p>
<p>Windows is stuck with UTF-16 because Unicode expanded after Microsoft had already decided to use two bytes per code-point, and UTF-16 is the compatibility path from UCS-2. &nbsp;If they were starting now, I&#39;d bet they&#39;d choose UTF-8 rather than UTF-32, and UTF-16 wouldn&#39;t even have a chance.</p>
<p>I think UTF-8 was a better choice from the beginning. &nbsp;But at the time it was a sketch on Ken Thompson&#39;s napkin, for use in Plan 9 from Bell Labs. &nbsp;I don&#39;t blame MS for not inventing UTF-8 themselves. &nbsp;Firstly, Ken Thompson is a genius, and secondly he was designing a research-toy OS at the time. &nbsp;UCS-2 was already specified; Microsoft took the conservative route, and it looked like a plausible choice at the time. &nbsp;After all, Unicode was probably seen as somewhat risky at the time anyway; inventing a proprietary encoding risked being stuck with unpleasant interoperability problems (and accusations about undermining industry standards and all that, probably). &nbsp;Does that answer Yuhong Bao&#39;s exercise question?</p>
<p>I /do/ blame MS for producing a shiny new runtime system that calls a 16-bit quantity a `char&#39; in 2002; it&#39;s just a lie. &nbsp;They missed opportunity to leave behind what (in retrospect) turned out to be a mistake. &nbsp;At least they chose the default I/O encoding right.</p>
<p>Pre-emptive reply. &nbsp;The internal representation inside a <code>String&amp;#39; object is, or should be, opaque anyway. &amp;nbsp;If keeping it in UTF-16, or inventing a UTF-16 copy on demand, speeds up the FFI or anything else, then it can do that and nobody needs to care (benefits of a high-level RTS). &amp;nbsp;I don&amp;#39;t care about</code>String&#39;; I care about <code>char&amp;#39;. &amp;nbsp;Personally, I think making</code>char&#39; an integer type at all was a mistake: Common Lisp has adapted to Unicode with hardly a hitch, because it had an abstract `character&#39; type. &nbsp;I&#39;m guessing they just followed Java&#39;s lead on that one. &nbsp;But now I&#39;m /seriously/ risking getting Raymond annoyed with me, so I&#39;ll shut up now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837513">
				<div id="div-comment-837513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837513">
			June 4, 2010 at 10:05 pm</a>		</div>

		<p>mdw: I was not suggesting that MS would have invented UTF-8 themselves when I asked this question. I agree that it would have not been a good idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837623">
				<div id="div-comment-837623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837623">
			June 6, 2010 at 6:47 pm</a>		</div>

		<p>Arrays of UTF8 chars (aka string) is a pita.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837633">
				<div id="div-comment-837633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dude</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100603-00/?p=13823#comment-837633">
			June 6, 2010 at 6:47 pm</a>		</div>

		<p>Arrays of UTF8 chars (aka string) is a pita.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

