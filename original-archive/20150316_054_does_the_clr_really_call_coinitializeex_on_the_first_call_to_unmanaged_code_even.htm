<html>
<head>
<title>Does the CLR really call CoInitializeEx on the first call to unmanaged code, even if you don't deal with COM at all and are just calling native code via p/invoke?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Does the CLR really call CoInitializeEx on the first call to unmanaged code, even if you don&#8217;t deal with COM at all and are just calling native code via p/invoke?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 16, 2015 / year-entry #55</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some time ago, I called out this part of the documentation regarding managed and unmanaged threading: On the first call to unmanaged code, the runtime calls Co­Initialize­Ex to initialize the COM apartment as either an MTA or an STA apartment. You can control the type of apartment created by setting the System.Threading.ApartmentState property on the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Some time ago,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/08/11/10548975.aspx">
I called out</a>
this part of the documentation
regarding
managed and unmanaged threading:
</p>
</blockquote>
<blockquote CLASS=q><p>
On the first call to unmanaged code,
the runtime calls <b>Co&shy;Initialize&shy;Ex</b>
to initialize the COM apartment as either an MTA or an STA apartment.
<a HREF="http://msdn.microsoft.com/en-us/library/5s8ee185%28v=vs.71%29.aspx">
You can control the type of apartment created</a>
by setting the
System.Threading.ApartmentState property on the thread to <b>MTA</b>,
<b>STA</b>, or <b>Unknown</b>.
</p>
</blockquote>
<p>
<p>
Commenter T asks,
"<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/08/11/10548975.aspx#10549183"
>Does it do this even if you don't deal with COM at all
and call native code through a P/Invoke</a>?"
</p>
<p>
Well, the documentation says it does, and we can confirm with an experiment:
</p>
<pre>
using System.Runtime.InteropServices;

class Program
{
 public static void Main()
 {
  var thread = new System.Threading.Thread(
    () => {
   System.Console.WriteLine("about to p/invoke");
   GetTickCount();
  });
  thread.Start();
  thread.Join();
 }

 [DllImport("kernel32.dll")]
 extern static uint GetTickCount();
}
</pre>
<p>
Run this program with a breakpoint on
<code>Co&shy;InitializeEx</code>.
</p>
<p>
First breakpoint is hit with this stack:
</p>
<pre>
rax=00007ffebc529b70 rbx=00000000007c6100 rcx=0000000000000000
rdx=0000000000000000 rsi=0000000000000001 rdi=0000000000000002
rip=00007ffebc529b70 rsp=000000000056f038 rbp=000000000056f0b0
 r8=0000000000000001  r9=0000000000000000 r10=0000000000000000
r11=0000000000000037 r12=0000000000004000 r13=0000000000000001
r14=0000000000000001 r15=0000000000000001

combase!CoInitializeEx
clr!Thread::SetApartment
clr!SystemDomain::SetThreadAptState
clr!SystemDomain::ExecuteMainMethod
clr!ExecuteEXE
clr!_CorExeMainInternal
clr!CorExeMain
mscoreei!CorExeMain
MSCOREE!CorExeMain_Exported
KERNEL32!BaseThreadInitThunk
ntdll!RtlUserThreadStart
</pre>
<p>
This call is initializing the main thread of the process.
The flags passed to this first call to
<code>Co&shy;Initialize&shy;Ex</code> are 0,
which means that the default threading model of
<code>COINIT_<wbr>MULTI&shy;THREADED</code> is used.
</p>
<p>
The next time the breakpoint hits is with this stack:
</p>
<pre>
rax=00000000ffffffff rbx=00000000007d1180 rcx=0000000000000000
rdx=0000000000000000 rsi=0000000000000001 rdi=00000000007d1180
rip=00007ffebc529b70 rsp=000000001a6af9a8 rbp=000000001a6afa20
 r8=000000001a6af948  r9=0000000000000000 r10=00000000007f0340
r11=00000000007f0328 r12=0000000000004000 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000

combase!CoInitializeEx
clr!Thread::SetApartment
clr!Thread::DoExtraWorkForFinalizer
clr!WKS::GCHeap::FinalizerThreadWorker
clr!ManagedThreadBase_DispatchInner
clr!ManagedThreadBase_DispatchMiddle
clr!ManagedThreadBase_DispatchOuter
clr!WKS::GCHeap::FinalizerThreadStart
clr!Thread::intermediateThreadProc
KERNEL32!BaseThreadInitThunk
ntdll!RtlUserThreadStart
</pre>
<p>
From the name <code>Finalizer&shy;Thread&shy;Start</code>,
this is clearly the finalizer thread.&sup1;
</p>
<p>
Next.
</p>
<pre>
rax=00000000ffffffff rbx=000000000039eb20 rcx=0000000000000000
rdx=0000000000000000 rsi=0000000000000001 rdi=0000000000000000
rip=00007ffebc529b70 rsp=000000001a5af3d8 rbp=000000001a5af450
 r8=0000000000000000  r9=000000001a5af3f0 r10=0000000000000000
r11=0000000000000286 r12=0000000000004000 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000

combase!CoInitializeEx
clr!Thread::SetApartment
clr!Thread::PrepareApartmentAndContext
clr!Thread::HasStarted
clr!ThreadNative::KickOffThread
clr!Thread::intermediateThreadProc
KERNEL32!BaseThreadInitThunk
ntdll!RtlUserThreadStart
</pre>
<p>
Okay, this looks like it's
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/11/12/10466467.aspx">
kicking off</a> a new thread.
I inferred this from the presence on the stack
of the function which is deviously named
<code>Kick&shy;Off&shy;Thread</code>.
</p>
<p>
And the flags passed to this call to 
<code>Co&shy;Initialize&shy;Ex</code> are 0,
which once again means that it defaults to MTA.
</p>
<p>
There, we have confirmed experimentally that, at least in this case,
the implementation matches the documentation.
</p>
<p>
That the implementation behaves this way is not surprising.
After all, the CLR does not have insight into the
<code>Get&shy;Tick&shy;Count</code> function.
It does not know <i>a priori</i> whether that function will
create any COM objects.
After all, we could have been p/invoking to
<code>SHGet&shy;Desktop&shy;Folder</code>, which does use COM.
Given that the CLR cannot tell whether a native function is going
to use COM or not, it has to initialize COM just in case.
</p>
<p>
&sup1;
Or somebody who is trying to mislead us into thinking that it is
the finalizer thread.
I tend to discount this theory because
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/01/31/10495737.aspx">
as a general rule, code is not intentionally written to be
impossible to understand</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-themann even thread-even depth-1" id="comment-1180103">
				<div id="div-comment-1180103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zhila' rel='external nofollow' class='url'>Zhila</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180103">
			March 16, 2015 at 7:11 am</a>		</div>

		<p>Yay! CLR Week! (Or at least a CLR day.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180113">
				<div id="div-comment-1180113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180113">
			March 16, 2015 at 7:31 am</a>		</div>

		<p>A CLR Week would be pointless now that Raymond has begun using more and more C# examples in his other blog posts. Unless a C# example would only work on the Windows Runtime, every week is potentially a CLR week.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1180123">
				<div id="div-comment-1180123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180123">
			March 16, 2015 at 8:05 am</a>		</div>

		<p>I cheated&#8230; <a rel="nofollow" target="_new" href="https://github.com/dotnet/coreclr/search?utf8=%E2%9C%93&amp;q=CoInitializeEx">github.com/&#8230;/search</a> nice thing about open source&#8230; we can just go look now instead of having to badger Raymond</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180173">
				<div id="div-comment-1180173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jason</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180173">
			March 16, 2015 at 2:06 pm</a>		</div>

		<p>GetTickCount is a red herring. The first unmanaged call is in the internals of System.Console.WriteLine, not GetTickCount.</p>
<p>The mscorlib classes use P/Invoke internally for almost everything involving the system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180183">
				<div id="div-comment-1180183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180183">
			March 16, 2015 at 4:43 pm</a>		</div>

		<p>RE: &quot;code is not intentionally written to be impossible to understand&quot;</p>
<p>Serious question that I&#39;ve been too afraid to ask for too long&#8230; what about the c++ STL? &nbsp;Why hasn&#39;t new code that&#39;s been added to the STL followed more modern naming practices? &nbsp;Why hasn&#39;t the older code been changed after re-work for c++11/14 anyhow?</p>
<p>As it stands, it still looks like a bunch of academics sat around at a table 25 years ago and decided to code things up on compilers that only support 6 character names while being purposely obtuse and over protective of naming conflicts.</p>
<p>Or does this fall outside of the &quot;generally&quot; bucket?</p>
<div class="post">[<em>Yeah, that code is nuts. Part of it is that private identifiers must begin with an underscore and capital letter in order to avoid conflicting with anything defined by the application. Though I have to admit, after staring at it for a while, it actually becomes almost readable. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180203">
				<div id="div-comment-1180203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">vs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180203">
			March 17, 2015 at 3:35 am</a>		</div>

		<p>Hello Raymond,</p>
<p>sorry for the OFFTOPIC question, but the Suggestions Box 4 comments are long time closed.</p>
<p>Would you be willing to explain the reasons behind MSI GUID Compression?</p>
<p><a rel="nofollow" target="_new" href="http://www.symantec.com/connect/articles/brief-note-installer-guids">http://www.symantec.com/&#8230;/brief-note-installer-guids</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1180233">
				<div id="div-comment-1180233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180233">
			March 17, 2015 at 7:15 am</a>		</div>

		<p>@Rodger The standard library code must be done extremely defensively. It will be (ab)used everywhere and tested to the limit. Common (stupid) things developers do that are allowed by the standard are overloading operator, and operator&amp;. Or defining their own std namespace with conflicting names and then doing a using namespace std;</p>
<p>Perhaps Raymond can get STL (Stephan T. Lavavej) to do a guest post about it.</p>
<div class="post">[<em>Also, the standard library code has to be careful never to use an identifer that an app may have #define&#39;d, which is why all the internal identifiers are horrible-looking. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180303">
				<div id="div-comment-1180303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180303">
			March 17, 2015 at 9:45 am</a>		</div>

		<p>vs:</p>
<p>The GUID compression isn&#39;t the weirdo, GUIDs are:</p>
<p> &nbsp;<a rel="nofollow" target="_new" href="http://stackoverflow.com/a/277107/37923">stackoverflow.com/&#8230;/37923</a></p>
<p>The word DWORD 0xD0F23C3F is actually stored as the byte sequence 3F 3C F2 D0, so that&#39;s how the &quot;compressed&quot; GUID starts. The only thing compressed about it is removing the hyphens and braces.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180373">
				<div id="div-comment-1180373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180373">
			March 18, 2015 at 12:53 am</a>		</div>

		<p>@vs:</p>
<p>&gt; Would you be willing to explain the reasons behind MSI GUID Compression?</p>
<p>&quot;GUID compression&quot; is pretty simple. A GUID is defined as a DWORD-WORD-WORD-WORD-WORD-BYTE-BYTE-BYTE-BYTE-BYTE-BYTE. In LittleEndian this means that the GUID &quot;D0F23C3F-CA74-460F-9ADB-49CBD57F9688&quot; is stored by the byte sequence 3D3CF2D074CA0F46DB9A49CBD57F9688, which is the format the MSI installer uses.</p>
<p>Tl;dr: &quot;GUID compression&quot; within installers is just the little-endian bytewise representation of a GUID, expressed in hexadecimal form.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180383">
				<div id="div-comment-1180383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180383">
			March 18, 2015 at 2:18 am</a>		</div>

		<p>&gt; That the implementation behaves this way is not surprising. After all, the CLR does not have insight into the GetÂ­TickÂ­Count function. It does not know a priori whether that function will create any COM objects. After all, we could have been p/invoking to SHGetÂ­DesktopÂ­Folder, which does use COM. Given that the CLR cannot tell whether a native function is going to use COM or not, it has to initialize COM just in case.</p>
<p>Wouldn&#39;t a better solution have been to say if you want to PInvoke SHGetDesktopFolder, you need to PInvoke CoInitializeEx first? If we can expect programmers in the Win32 context to call CoInitializeEx before they call SHGetDesktopFolder, why can&#39;t the CLR team expect C# programmers to PInvoke CoInitalizeEx before they PInvoke SHGetDesktopFolder?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1180423">
				<div id="div-comment-1180423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180423">
			March 18, 2015 at 8:16 am</a>		</div>

		<p>@Matt: Except that according to the Symantec blog post, it swaps not just bytes, but nibbles as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1180563">
				<div id="div-comment-1180563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180563">
			March 18, 2015 at 2:37 pm</a>		</div>

		<p>&gt; Given that the CLR cannot tell whether a native function is going to use COM or not, it has to initialize COM just in case.</p>
<p>These functions&#39; native callers are smart enough to call CoInitializeEx if they need to. There are a million unsafe things you can do if you misuse P/Invoke &#8211; why does this one in particular have training wheels on?</p>
<div class="post">[<em>The CLR already has to manage its own use of COM. So you&#39;re saying that there should be two different people both trying to manage COM? What if they disagree? (E.g., you p/invoke to CoInitializeEx(MTA), but the thread is marked [STA].) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1180683">
				<div id="div-comment-1180683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150316-00/?p=44463#comment-1180683">
			March 19, 2015 at 8:23 am</a>		</div>

		<p>Medinoc: you&#39;re right, I forgot that step. It actually swaps the nibbles of every byte, and as it doesn&#39;t swap the first two bytes of the second half, I&#39;m guessing it&#39;s not just reversing strings). Here&#39;s an example from my machine:</p>
<p>GUID {E5B21F11-6933-4E0B-A25C-7963E3C07D11}</p>
<p>Bytes 11 1F B2 E5 33 69 0B 4E A2 5C 79 63 E3 C0 7D 11</p>
<p>Product 11F12B5E3396B0E42AC597363E0CD711</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

