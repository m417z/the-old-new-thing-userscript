<html>
<head>
<title>What were ShellExecute hooks designed for?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What were ShellExecute hooks designed for?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 10, 2008 / year-entry #304</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Windows 95 introduced (and Windows Vista removed) the concept of ShellExecute hooks. These are objects which implemented the IShellExecuteHook interface. That interface had just one method: IShellExecuteHook::Execute, which took a SHELLEXECUTEINFO structure and returned S_OK to indicate that the item was executed, S_FALSE to allow processing to continue, and an error code to halt processing. The intended...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Windows&nbsp;95 introduced (and Windows&nbsp;Vista removed) the concept of ShellExecute hooks. These are objects which implemented the <code>IShellExecuteHook</code> interface. That interface had just one method: <code>IShellExecuteHook::Execute</code>, which took a <code>SHELLEXECUTEINFO</code> structure and returned <code>S_OK</code> to indicate that the item was executed, <code>S_FALSE</code> to allow processing to continue, and an error code to halt processing.</p>
<p> The intended purpose of the shell execute hook was to allow you to extend the set of strings that can be executed. For example, Internet Explorer&nbsp;1 used a shell execute hook so that you could type <code>http://www.microsoft.com/</code> into the Run dialog and invoke the Web browser. This was necessary because the original version of Windows&nbsp;95 had no special knowledge of URLs. Without the hook, typing a URL into the Run dialog would have generated an error. </p>
<p> Let's look at those return values again. The simplest return value is <code>S_FALSE</code>, which means that you didn't recognize the item and wish to continue normal processing. Returning <code>S_OK</code> means that you recognized the item and successfully executed it. Returning an error code means that you recognized the item but an error occurred when you tried to execute it. Returning an error stops further processing, which is important in this case, because you do want to stop processing: You recognized what the user was trying to do and you couldn't do it. If you had returned <code>S_FALSE</code>, then the shell (and other shell execute hooks) would take their shot at executing the item. Since it's something only you recognize, they would fail, and the user would get some sort of error like "File not found" instead of an error that accurately describes why you couldn't execute the item. </p>
<p> That's the theory, but I've seen a few applications that use shell execute hooks for completely different purposes. And they are doomed to failure. One application installs a shell execute hook in order to implement some sort of weird concept of "security". When their hook is called, they check whether the user is "allowed" to run the program; if allowed, they return <code>S_FALSE</code> and if blocked, they return <code>E_ACCESSDENIED</code>. Another application uses their hook to log all the programs that the user runs, presumably so the logs can be inspected for auditing purposes. After logging the action, they return <code>S_FALSE</code> to allow normal execution to continue. </p>
<p> Both of these methods are really an abuse of the shell execute hook model since they aren't extending the set of items that can be executed by the shell. They're just using the hook model to sneak some code into the execute path. But that's also the problem. </p>
<p> First, they are intercepting only actions that go through the <code>ShellExecuteEx</code> function. If somebody just calls <code>CreateProcess</code> directly, then the shell execute hooks won't run, and whoever it is just snuck past your "security" and "auditing" system. </p>
<p> Second, these hooks both assume that they are the only shell execute hook in the system. (Remember, <a href="http://blogs.msdn.com/oldnewthing/archive/2006/08/22/712677.aspx"> there can be more than one</a>.) Suppose there are three hooks installed, the hook installed by Internet Explorer to handle URLs, the "auditing" hook, and the "security" hook, and suppose that the shell decides to invoke them in that order. (The order in which hooks are executed is unspecified because, if you use them as intended, the order doesn't matter.) If the user types a URL into the Run dialog, the URL hook launches the Web browser and returns <code>S_OK</code> to say, "I took care of this one." Your "auditing" hook never got to see the URL, and your "security" hook never got a chance to reject the operation. Hooks that sit ahead of the "security" hook not only get to bypass security, but they also elude the "auditing" hook. </p>
<p> So much for "auditing" and "security". </p>
<p> <b>Sidebar</b> </p>
<p> Since shell execute hooks effectively become part of the <code>ShellExecute</code> function, they are unwittingly subject to all the application compatibility constraints that <code>ShellExecute</code> must follow. Welcome to the operating system. Your world has just gotten a lot more complicated. </p>
<p> There is no "list of application compatibility constraints" (oh how life would be simple if there were); basically, anything that <code>ShellExecute</code> did in the past is a de facto compatibility constraint. Some programs crash if you create a worker thread inside <code>ShellExecute</code>; other programs crash if you call <code>PeekMessage</code> inside <code>ShellExecute</code>. Some programs call <code>ShellExecute</code> and <a href="http://blogs.msdn.com/oldnewthing/archive/2004/11/26/270710.aspx"> immediately exit</a>, which means that your shell execute hook had better not return before its work is done (or at least before the work has been given to another process to finish). Some programs call <code>ShellExecute</code> on an unusually small stack, so you have to watch your stack usage. And even though it is called out in the documentation that programs should not call shell functions from inside <code>DllMain</code>, that doesn't stop people from trying, anyway. Your shell execute hook had better behave in a sane manner when called under such "impossible" conditions. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-666143">
				<div id="div-comment-666143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666143">
			September 10, 2008 at 10:29 am</a>		</div>

		<p>I&#8217;m using them in my UAC like thing I created for XP, I was hoping to bring it along when/if I move to Vista, guess not (UAC on Vista removes my control, if a exe is marked as requireAdmin, there is NO WAY for me to run it non elevated,)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666173">
				<div id="div-comment-666173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">godzila</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666173">
			September 10, 2008 at 11:13 am</a>		</div>

		<p>Apparently your implementation wasn&#8217;t correct either. If another hook was installed and fired before your UAC like thing and returned S_OK. Then you&#8217;re UAC thing would be circumvented. Sounds like it&#8217;s a good thing they got rid of this hook.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666183">
				<div id="div-comment-666183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666183">
			September 10, 2008 at 11:19 am</a>		</div>

		<p>Is there any kind of detection of infinite loops? &nbsp;I.e. calling ShellExecute inside of a ShellExecute hook? &nbsp;Also, while the order of hook execution is &#8220;unspecified&#8221;, is it safe to say that the order is consistent (assuming no modifications are made between successive calls to ShellExecute)?</p>
<div class="post">[<i>Some shell execute hooks call ShellExecute on purpose because they want to convert one type of execution into another. (And I see no value in knowing the answer to the second question given that it&#8217;s all unspecified anyway. It&#8217;s an oddly-phrased question. &#8220;If nothing changes, will things be the same?&#8221;) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666263">
				<div id="div-comment-666263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666263">
			September 10, 2008 at 1:12 pm</a>		</div>

		<p>I was just wondering if the hooks will always be called in the same (unspecified) order. &nbsp;Perhaps the Security or Audit example hooks are written in such a way that calling them in one order &#8220;succeeds&#8221; and calling them in another order &#8220;fails&#8221;. &nbsp;If the order in which they are invoked can change between calls to ShellExecute than you would see only intermittent &#8220;failure&#8221;. &nbsp;I would guess the hooks are stored in a list container, so they are probably always called in the same (unspecified) order.</p>
<div class=post>[<i>Different versions of the shell have done it differently. Some cache the hooks in a per-process list (so the order remains the same within a process). Others recalculate the hooks each time (so the order can change even within a process). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666273">
				<div id="div-comment-666273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666273">
			September 10, 2008 at 1:50 pm</a>		</div>

		<p>I can&#8217;t wait to find out the reasoning behind removing them in Vista.</p>
<p>I would assume that it&#8217;s because nobody used them for their intended purpose, and they just created a security hole.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666283">
				<div id="div-comment-666283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666283">
			September 10, 2008 at 2:12 pm</a>		</div>

		<p>I feel COM is overkill for just one function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666323">
				<div id="div-comment-666323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666323">
			September 10, 2008 at 3:09 pm</a>		</div>

		<p>godzila: its not about circumventing &quot;my UAC&quot;, its just used to detect stuff that &quot;needs&quot; elevation (control panel applets etc) so, if someone hooked in before me, the only thing that would happen is that you would not get the elevation dialog and the process would start with a restricted token&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666353">
				<div id="div-comment-666353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666353">
			September 10, 2008 at 3:38 pm</a>		</div>

		<p>You can actually get them back on Vista by adding a registry key, no doubt even this will be gone in Windows 7. So much for the &quot;backwards compatibility above all else&quot; mantra :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666363">
				<div id="div-comment-666363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://brandonlive.com' rel='external nofollow' class='url'>Brandon Paddock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666363">
			September 10, 2008 at 4:21 pm</a>		</div>

		<p>Right. &nbsp;It&#8217;s backward-compatibilty above all else, except security. &nbsp;And maybe reliability. &nbsp;It&#8217;s like that Dilbert comic, where he says something like &quot;Quality comes first.&quot; &nbsp;And then someone says, &quot;What about security?&quot; &nbsp;and then &quot;What about the shareholders? &nbsp;and then &quot;What about legal compliance?&quot;</p>
<p>&quot;Okay, quality comes fourth.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666383">
				<div id="div-comment-666383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666383">
			September 10, 2008 at 4:54 pm</a>		</div>

		<p>I guess the &#8220;Q&#8221; stands for &#8220;uality&#8221;. &nbsp;<a href="http://books.google.com/books?id=-hUPgZK4rjMC&amp;pg=PA222&amp;lpg=PA222&amp;ots=z-JvQvMvbq&amp;sig=Ash7Px1nUvg5fvDOMCihEoxBt4M" target="_new" rel="nofollow">http://books.google.com/books?id=-hUPgZK4rjMC&#038;pg=PA222&#038;lpg=PA222&#038;ots=z-JvQvMvbq&#038;sig=Ash7Px1nUvg5fvDOMCihEoxBt4M</a> (scroll up to the bottom of page 222)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666393">
				<div id="div-comment-666393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">recursivelyenumerable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666393">
			September 10, 2008 at 5:45 pm</a>		</div>

		<p>reminds me of how subclassing is often abused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666403">
				<div id="div-comment-666403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666403">
			September 10, 2008 at 7:14 pm</a>		</div>

		<p>&quot;Internet Explorer 1&quot;</p>
<p>And 2 also.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666413">
				<div id="div-comment-666413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666413">
			September 10, 2008 at 8:06 pm</a>		</div>

		<p>Yes, asf, you&#8217;re very clever.</p>
<p>And therefore the behaviour of your clever little system will silently change and confuse the users the moment someone installs a completely unrelated application.</p>
<p>Oh, wait, that&#8217;s why you&#8217;re doing it wrong and why every smart person has now found a good reason to praise Microsoft for creating Vista.</p>
<p>Microsoft is being backward compatable &#8211; with every other OS version, all ShellExecute hook based hacks would break silently and at random for no obvious reason, and that feature has been retained. &nbsp;;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666433">
				<div id="div-comment-666433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dsn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666433">
			September 10, 2008 at 10:29 pm</a>		</div>

		<p>Another problem that occurred to me with ShellExecute hooks &#8211; what if two programs both register hooks for the same type of item? &nbsp;For example, if both Firefox and IE had a hook to detect urls, it sounds like you would randomly get either IE or Firefox handling them, with no way to predict or control which it would be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666463">
				<div id="div-comment-666463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666463">
			September 11, 2008 at 6:09 am</a>		</div>

		<p>Bob: I never said it was for use by other people, this thing is for my own use. Now tell me, on your precious Vista, when a exe is marked as requireAdmin, how can you run it non elevated when UAC is on?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-666483">
				<div id="div-comment-666483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phylyp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666483">
			September 11, 2008 at 7:12 am</a>		</div>

		<p>I know Raymond doesn&#8217;t name names, but were there are &quot;big name&quot; programs that actually did this? Any hints, clues?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666603">
				<div id="div-comment-666603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-666603">
			September 11, 2008 at 1:23 pm</a>		</div>

		<p>A while back, I was investigating integrating an additional executable file format into Windows (note, this format has no associated extension, and is detected by filesystem attributes instead). As far as I could tell, that&#8217;s impossible (though I&#8217;d love it if someone would say, &quot;you&#8217;re wrong, here&#8217;s how&#8230;&quot;). A ShellExecute hook was as close as I could get.</p>
<p>So, my software is broken in Vista? What should I do instead?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-667243">
				<div id="div-comment-667243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-667243">
			September 12, 2008 at 4:47 pm</a>		</div>

		<p>Richard:</p>
<p>Write your own shell?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-667463">
				<div id="div-comment-667463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-667463">
			September 14, 2008 at 6:59 pm</a>		</div>

		<p>&quot;A while back, I was investigating integrating an additional executable file format into Windows (note, this format has no associated extension, and is detected by filesystem attributes instead). As far as I could tell, that&#8217;s impossible (though I&#8217;d love it if someone would say, &quot;you&#8217;re wrong, here&#8217;s how&#8230;&quot;). A ShellExecute hook was as close as I could get.&quot;</p>
<p>As I remember, CreateProcess launches a process in another subsystem by retrieving the path to the EXE launcher for that subsystem from the registry, then launches that EXE passing the original path as a command-line parameter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-667483">
				<div id="div-comment-667483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-667483">
			September 14, 2008 at 8:24 pm</a>		</div>

		<p>&quot;So much for &quot;auditing&quot; and &quot;security&quot;. &quot;</p>
<p>Yep, don&#8217;t reinvent the wheel. NT already has auditing and security features, use them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-667503">
				<div id="div-comment-667503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Not Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-667503">
			September 14, 2008 at 9:09 pm</a>		</div>

		<blockquote><p>
  Yep, don&#8217;t reinvent the wheel. NT already has auditing and security features, use them.
</p></blockquote>
<p>And if you need compatibility with Windows 95 using the same codebase?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-667533">
				<div id="div-comment-667533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080910-00/?p=20933#comment-667533">
			September 14, 2008 at 10:48 pm</a>		</div>

		<p>Not Yuhong Bao:</p>
<p>&quot;And if you need compatibility with Windows 95 using the same codebase?&quot;</p>
<p>And what if you need compatibility with DOS?</p>
<p>Sometimes the compatibility has to end.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

