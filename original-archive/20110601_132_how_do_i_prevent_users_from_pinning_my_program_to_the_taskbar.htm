<html>
<head>
<title>How do I prevent users from pinning my program to the taskbar?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I prevent users from pinning my program to the taskbar?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 1, 2011 / year-entry #133</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>30</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer wanted to prevent users from pinning their application to the taskbar. I have an application that is launched as a helper by a main application. Users shouldn't be launching it directly, but rather should be launching the main application. But since the helper shows up in the taskbar, users may be tempted to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to prevent users from pinning their application
to the taskbar.
</p>
<blockquote CLASS=q><p>
I have an application that is launched as a helper by a main application.
Users shouldn't be launching it directly, but rather should be launching
the main application.
But since the helper shows up in the taskbar,
users may be tempted to right-click on the taskbar icon and select
"Pin to taskbar."
Unfortunately, this pins the helper program to the taskbar instead of
the main application,
and launching the helper program directly doesn't work.
Is there a way I can prevent users from pinning the helper program?
</p>
</blockquote>
<p>
It so happens that there are
<a HREF="http://msdn.microsoft.com/en-us/library/dd378459.aspx#exclusion_lists">
a number of ways of marking your
helper program as <i>Don't pin me</i></a>.
Given the description above, the most direct way is probably to set the
<a HREF="http://msdn.microsoft.com/en-us/library/dd561983.aspx">
<code>System.<wbr>App&shy;User&shy;Model.<wbr>Prevent&shy;Pinning</code>
property</a>
on the window created by the helper program.
</p>
<p>
Take our
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make the following changes:</p>
<pre>
<font COLOR=blue>#include &lt;shellapi.h&gt;
#include &lt;propsys.h&gt;
#include &lt;propkey.h&gt;

HRESULT MarkWindowAsUnpinnable(HWND hwnd)
{
 IPropertyStore *pps;
 HRESULT hr = SHGetPropertyStoreForWindow(hwnd, IID_PPV_ARGS(&amp;pps));
 if (SUCCEEDED(hr)) {
  PROPVARIANT var;
  var.vt = VT_BOOL;
  var.boolVal = <a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/12/22/329884.aspx">VARIANT_TRUE</a>;
  hr = pps-&gt;SetValue(PKEY_AppUserModel_PreventPinning, var);
  pps-&gt;Release();
 }
 return hr;
}
</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR=blue>MarkWindowAsUnpinnable(hwnd);</font>
 return TRUE;
}
</pre>
<p>
I set the <code>PROP&shy;VARIANT</code> manually instead of using
<code>Init&shy;Prop&shy;Variant&shy;From&shy;Boolean</code>
just to emphasize that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/22/329884.aspx">
the <code>boolVal</code> must be <code>VARIANT_<wbr>TRUE</code> and not
<code>TRUE</code></a>.
In real life, I probably would have used
<code>Init&shy;Prop&shy;Variant&shy;From&shy;Boolean</code>.
</p>
<p>
Run this program and observe that "Pin this program
to taskbar" does not appear on the menu when you
right-click on the taskbar button.
</p>
<p>
Even better would be to permit pinning,
but set the
<a HREF="http://msdn.microsoft.com/en-us/library/dd391571.aspx">
<code>System.<wbr>App&shy;User&shy;Model.<wbr>Relaunch&shy;Command</code></a>,
<a HREF="http://msdn.microsoft.com/en-us/library/dd391572.aspx">
<code>.Relaunch&shy;Display&shy;Name&shy;Resource</code></a>
and optionally
<a HREF="http://msdn.microsoft.com/en-us/library/dd391573.aspx">
<code>.Relaunch&shy;Icon&shy;Resource</code></a>
properties
so that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/27/10158395.aspx#10158646">
if the user tries to pin the helper,
it actually pins the main application</a>.
</p>
<p>
Start with a new scratch program and make these changes:
</p>
<pre>
<font COLOR=blue>#include &lt;shellapi.h&gt;
#include &lt;propsys.h&gt;
#include &lt;propkey.h&gt;
#include &lt;propvarutil.h&gt;

HRESULT IPropertyStore_SetValue(IPropertyStore *pps,
    REFPROPERTYKEY pkey, PCWSTR pszValue)
{
 PROPVARIANT var;
 HRESULT hr = InitPropVariantFromString(pszValue, &amp;var);
 if (SUCCEEDED(hr))
 {
  hr = pps-&gt;SetValue(pkey, var);
  PropVariantClear(&amp;var);
 }
 return hr;
}</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 <font COLOR=blue>IPropertyStore *pps;
 HRESULT hr = SHGetPropertyStoreForWindow(hwnd, IID_PPV_ARGS(&amp;pps));
 if (SUCCEEDED(hr)) {
  IPropertyStore_SetValue(pps,
    PKEY_AppUserModel_ID, L"Contoso.Scratch");
  IPropertyStore_SetValue(pps,
    PKEY_AppUserModel_RelaunchCommand,
    L"notepad.exe %windir%\\system.ini");
  IPropertyStore_SetValue(pps,
    PKEY_AppUserModel_RelaunchDisplayNameResource,
    L"C:\\full\\path\\to\\scratch.exe,-1");
  // optionally also set PKEY_AppUserModel_RelaunchIconResource
  pps-&gt;Release();
 }</font>
 return TRUE;
}

// resource file
STRINGTABLE BEGIN
 1 "Open system.ini"
END

</pre>
<p>
I'm pulling a fast one here and pretending that Notepad is my
main application.
Obviously you'd use your actual main application.
(I'm also hard-coding the path to my scratch program.)
</p>
<p>
When you run this program, right-click on the taskbar button.
Observe that the option to run a new copy of the program is called
<i>Open system.ini</i> and if you pick it
(or use the middle-mouse-button shortcut),
Notepad runs.
If you pin the program, the pinned icon runs Notepad.
</p>
<p>
Even if you don't need to redirect the pinned item to another program,
you can use this second technique to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/27/10158395.aspx#10158652">
pass a custom command line for the pinned icon</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (30)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-916423">
				<div id="div-comment-916423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BC_Programmer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916423">
			June 1, 2011 at 7:30 am</a>		</div>

		<p>I would wonder why the helper program needs a taskbar icon to begin with; most of them do one-shot tasks, and as presented by the customer here aren&#39;t really &quot;user-servicable&quot; so why make them visible at all? Without the taskbar button the user can&#39;t pin the program, can they?</p>
<div class="post">[<i>They broke their application&#39;s functionality into multiple EXEs for whatever reason, so the windows are all logically part of the single application, although they physically belong to different EXEs. Imagine if, for example, Excel were broken up into EXCEL.EXE (the spreadsheet grid), CHART.EXE and PIVOTTABLE.EXE. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916433">
				<div id="div-comment-916433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gozer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916433">
			June 1, 2011 at 7:45 am</a>		</div>

		<p>I think what BC is saying is that, at least in the .Net world, you can set ShowInTaskBar = false in order to get an application with no taskbar icon when it runs. Which would alleviate the need to prevent pinning per se because there would be nothing to actually pin when the secondary program ran. I think you do this by removing the WS_EX_APPWINDOW style via the API.</p>
<p>That said, the user may WANT the icon to appear, maybe to let the user see some sort of action is taking place. In which case they would need a method to prevent the pin.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916443">
				<div id="div-comment-916443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916443">
			June 1, 2011 at 8:47 am</a>		</div>

		<p>Oh nice I hadn&#39;t even realized the need to do this.</p>
<p>We have a loader EXE that displays splash, checks for updates, then launches the main EXE in the correct directory (carefully handing off focus to the main EXE&#39;s first window).</p>
<p>If they pin the main EXE it probably won&#39;t work due to starting in the wrong current directory, and even if it did it would fail to update itself when it needs to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916453">
				<div id="div-comment-916453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916453">
			June 1, 2011 at 8:49 am</a>		</div>

		<p>My thoughts were the same as BC &amp; Gozer. &nbsp;Basically, it seems like these other sub-modules don&#39;t need an icon at all (depending on the behavior of the main application). &nbsp;i.e. if the external .exe windows are owned by the main .exe&#39;s main window, would that be enough to give full control to the user without each sub-module having it&#39;s own icon in the taskbar?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916463">
				<div id="div-comment-916463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916463">
			June 1, 2011 at 9:16 am</a>		</div>

		<p>Neat! I knew about the AppId stuff (important for ensuring start menu shortcuts inherit your jumplist sometimes, too) but I had somehow missed the ability to set the pinned commandline. Thank you for pointing it out, Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916473">
				<div id="div-comment-916473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916473">
			June 1, 2011 at 9:20 am</a>		</div>

		<p>I have seen cases where main window would still be on TaskBar even if WS_EX_APPWINDOW is not set. Probably, some famous compatibility shim.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916483">
				<div id="div-comment-916483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916483">
			June 1, 2011 at 9:27 am</a>		</div>

		<p>It&#39;s also possible that the helper app /should/ show up in the task bar, because it&#39;s both physically and conceptually a separate window. In that case, hiding the icon is not desirable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916493">
				<div id="div-comment-916493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916493">
			June 1, 2011 at 9:52 am</a>		</div>

		<p>One issue I&#39;ve seen is that when I set the Relaunch­Command, Relaunch­Display­Name­Resource, and Relaunch­Icon­Resource properties on a window, sometimes a shortcut shows up in the Start menu&#39;s MFU list with the colored highlight that normally only gets applied to newly-installed software.</p>
<p>I&#39;m not sure why the shortcut would get promoted right away to the MFU list. Maybe it inherits points from the process that creates it? (I.e., if foo.exe creates a second window and sets those properties, the window starts out with the same number of points as foo.exe. In my case, foo.exe is my job, so it gets run all the time.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916503">
				<div id="div-comment-916503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Leo Davidson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916503">
			June 1, 2011 at 10:21 am</a>		</div>

		<p>Presumably the command-line settings are only persisted when the icon is pinned, so if it was already pinned by the user (in the past when the code didn&#39;t specify a command-line) then there is no way to update them except to ask the user to un-pin and re-pin the app?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916513">
				<div id="div-comment-916513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ray</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916513">
			June 1, 2011 at 10:26 am</a>		</div>

		<p>What we all really want to know is how to force our program to be pinned to the taskbar.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-916533">
				<div id="div-comment-916533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916533">
			June 1, 2011 at 11:56 am</a>		</div>

		<p>Hopefully people don&#39;t start using this technique to mark competitor programs as &quot;don&#39;t pin me.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916543">
				<div id="div-comment-916543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unsure</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916543">
			June 1, 2011 at 11:57 am</a>		</div>

		<p>Does anybody know how this informations can be updated? It seems that the values assigned to one AppID are not changeable after they are set for the first time: The shell creates a lnk file in a hidden directory that represents the pinned icon, but will not change it when the program sets different values with the methods shown by Raymond.</p>
<p>So, if your application needs to change the command line in the pinned icon: How can this be done? (Also note that the icons in the start menu and in the task bar are different hidden lnk files!)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916553">
				<div id="div-comment-916553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916553">
			June 1, 2011 at 12:22 pm</a>		</div>

		<p>@Maurits: &quot;Hopefully people don&#39;t start using this technique to mark competitor programs as &quot;don&#39;t pin me.&quot;&quot;</p>
<p>If they do, Microsoft could simply add them to the list of malware that is removed by Windows Update each month.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916563">
				<div id="div-comment-916563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916563">
			June 1, 2011 at 12:44 pm</a>		</div>

		<p>@Mike Caron: I wondered about that too &#8211; but think of other software that does this: it&#39;s obnoxious, in most cases. &nbsp;Much better when the icons stack, such as with Beyond Compare or Windows Explorer (they&#39;re all top-level windows in one sense, but they definitely should not occupy separate slots on the task bar)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916573">
				<div id="div-comment-916573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WndSks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916573">
			June 1, 2011 at 1:58 pm</a>		</div>

		<p>@AsmGuru62: A window does not need WS_EX_APPWINDOW for it to be displayed in the taskbar, that style is used to <em>force</em> a window onto the taskbar (and in other places?) even if it had other styles that would normally hide it from the taskbar (WS_EX_TOOLWINDOW).</p>
<p>The algorithm used by the taskbar is not documented AFAIK but it probably goes something like: ShowInTaskbar = (style&amp;WS_VISIBLE)!=0 &amp;&amp; ((!(exstyle&amp;WS_EX_TOOLWINDOW) || !IsOwnedWindow(hwnd)) || (exstyle&amp;WS_EX_APPWINDOW)!=0)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916583">
				<div id="div-comment-916583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916583">
			June 1, 2011 at 6:26 pm</a>		</div>

		<p>Process Explorer has the same problem on x64. The 32 bit version launches the x64 version but the pinned shortcut is the x64 version which is only temporary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-sgroot even thread-even depth-1" id="comment-916603">
				<div id="div-comment-916603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Sven+Groot+%5BMSFT%5D' rel='external nofollow' class='url'>Sven Groot [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916603">
			June 1, 2011 at 8:34 pm</a>		</div>

		<p>Judging by the comments, I guess the follow up question to this is: can I make my application pin a different executable than the one that spawned the window the user is trying to pin?</p>
<p>So if the user is pinning a window created by helper.exe, I want it to actually pin launcher.exe. Can this be done?</p>
<div class="post">[<i>Didn&#39;t I spend the entire second half of the article explaining how to do exactly that? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916613">
				<div id="div-comment-916613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916613">
			June 1, 2011 at 11:45 pm</a>		</div>

		<p>A good example of where a helper program might desire to have a taskbar icon but be unpinnable (or rather, relaunch the main executable if pinned) is a helper that does heavy lifting. E.g., a transcoder. The main application may offload encoding a video to a separate application it can control as a convenience (perhaps it was a port, or the component is supplied under a different license, e.g. open-source).</p>
<p>That subprocess may have a need to communicate with the user &#8211; e.g., a progress bar, some statistics, etc, so it needs its own taskbar icon, but unpinnable since it&#39;s useless without a host controlling app.</p>
<p>Perhaps the subprocess is a plugin that has high memory demands and can&#39;t fit with the main app. Or the main app is 32-bit and launches 64-bit plugins to process the user data faster.</p>
<p>All sorts of things can be designed this way, and if the may display information, you want a taskbar icon (I hate losing process windows in my window stack when they don&#39;t have taskbar icons. Explorer properties windows, for example&#8230; they sometimes take forever to tally up so you leave thhem open while you do other things only to have them buried 15 windows deep)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916623">
				<div id="div-comment-916623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916623">
			June 2, 2011 at 3:11 am</a>		</div>

		<p>I read your description of what the user wanted to do, and was then astounded when I read on to find that, instead of slagging the user off, you actually explained how he could do what he wanted to do :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916633">
				<div id="div-comment-916633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unsure</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916633">
			June 2, 2011 at 6:59 am</a>		</div>

		<p>@Simom: I don&#39;t get it: Why should that developer &quot;slagged off&quot;? I also have applications which must be started via a starter program which check for updates before executing the main program. The starter program has no visible UI, but the application (of course). So, I also have the problem that the &quot;pin to..&quot; shell functions must pin the starter program, not the application.</p>
<p>To work really reliable, the pinned command line must always be correct which leads to the question why a window can provide dynamic informations but has no way to update the already pinned icons accordingly. There is a hole in this concept.</p>
<div class="post">[<i>Since users can edit the shortcuts for pinned items, you have the problems of (1) correlating the RelaunchCommand to a specific pinned shortcut, and then (2) merging the application changes with the user&#39;s changes. And of course triggering disk access each time an application sets the RelaunchCommand property in order to check all the pinned shortcuts to see if they need updating. As we saw earlier, pinning captures the state of the pinned item. It is not a live link. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916793">
				<div id="div-comment-916793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916793">
			June 2, 2011 at 12:10 pm</a>		</div>

		<p>Somewhat related, I have programs that I want pinned, but when I launch them the window appears for a few seconds, then turns back to the pinned icon and a new window appears as a group. They just aren&#39;t pinned anymore.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916813">
				<div id="div-comment-916813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916813">
			June 2, 2011 at 2:44 pm</a>		</div>

		<p>You know, I really, really like Windows 7. &nbsp;Even so, I have un-pinned all icons from the taskbar and created a QuickLaunch folder with shortcuts, and I have created a toolbar called QuickLaunch that holds only icons (no text). &nbsp;It&#39;s at the left side of my double-height taskbar. &nbsp;All is well with the world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916853">
				<div id="div-comment-916853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unsure</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916853">
			June 2, 2011 at 5:00 pm</a>		</div>

		<p>@Raymond: &quot;As we saw earlier, pinning captures the state of the pinned item. It is not a live link&quot;</p>
<p>Here is the hole in the current concept I&#39;m taking about: Yes, currently lnk files are used to store the data, but as you say, this only allows static storage of a snapshot. To make them unpalatable easily, the informations for the AppIDs that is used for the pinned icons should have been stored in the registry instead (for example). The usage of the lnk files is an internal implementation detail which does not justify the current behavior.</p>
<p>Also, there seems to be a bug in the management of the hidden lnk files: They are not deleted when the app is unpinned. So, if a new version of the app comes out, which happens to require a new command line, it does not help to ask the user to repin the application. The old information from the old hidden lnk file is used forever.</p>
<div class="post">[<i>Windows XP worked that way, and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/06/16/429814.aspx" rel="nofollow">some people didn&#39;t like it</a> because <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/27/10158395.aspx" rel="nofollow">you could delete the thing that the metadata referred to, and then the pin broke</a>. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/02/09/9960102.aspx" rel="nofollow">No matter what you do, somebody will call you an idiot</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916873">
				<div id="div-comment-916873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916873">
			June 2, 2011 at 8:17 pm</a>		</div>

		<p>The root causue of this mess is that windows uses lnk files instead of real soft links.</p>
<div class="post">[<i>Last I checked, soft links can&#39;t pass command line parameters. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-916953">
				<div id="div-comment-916953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916953">
			June 3, 2011 at 2:09 am</a>		</div>

		<p>@Unsure: My comment wasn&#39;t intended as any reflection on the developer in question, it was rather intended as a semi-humourous dig at the fact that so often, Old New Thing blogs start off in the vein of &#39;A developer asked how to make his app to do X in the Windows user interface&#39;, and then go on to explain at length not how to do X but why the developer is incredibly stupid for wanting to do X in the first place. I&#39;m so used to seeing those kinds of blogs that I did actually have to do a double take on reading this one when the first paragraph kicked off with &#39;A developer asked how to make his app to do X in the Windows user interface&#39; but Raymond then went on to explain how to do X.</p>
<p>I found the fact that the explanation came as such as surprise to me somewhat amusing, hence my previous post. Sorry if that post wasn&#39;t clear.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-916993">
				<div id="div-comment-916993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unsure</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-916993">
			June 3, 2011 at 8:21 am</a>		</div>

		<p>@Raymond: But when the old hidden link files are not deleted at unpinning, and in addition, are not updated with the current infos when repinning an app with the same AppID: How on earth can this be the correct behavior?</p>
<p>Also, even a lnk file does not need to be a static data storage. There are this advertising shortcuts (correct term?) which have different behavior. So, if information gets recorded in a pinned icon with an AppID, another type of lnk file should be used, which does not have a fixed embedded command line, but instead uses whatever was last recently set by the application via PKEY_AppUserModel_RelaunchCommand (in turn, this requires the shell to record this setting per AppID).</p>
<p>@Simon: I&#39;m not a native speaker. Just got confused.</p>
<div class="post">[<i>That solution doesn&#39;t roam, but you&#39;re also making the solution way more complicated than it really is. If you want your relaunch action to change dynamically, then put the dynamic behavior in your app! Just make the command &quot;contoso.exe -relaunch&quot; and then you can do all your logic inside contoso.exe to decide &quot;What should my relaunch action be today?&quot; Sometimes the simple solution is better. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-917023">
				<div id="div-comment-917023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert Morris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-917023">
			June 3, 2011 at 11:32 am</a>		</div>

		<p>Wait, what&#39;s the &quot;middle-button mouse shortcut&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-917053">
				<div id="div-comment-917053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Unsure</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-917053">
			June 3, 2011 at 2:41 pm</a>		</div>

		<p>@Raymond; &quot;If you want your relaunch action to change dynamically, then put the dynamic behavior in your app! &quot;</p>
<p>This is not solving the problem. It is the location of the startup program itself that is not the same *forever* (because its located on a share and the host of the share will change now and then, for technical or political reasons [server replacement, server consolidation, changes in company structure]).</p>
<p>The app always offers the current path to the startup program to the shell via PKEY_AppUserModel_RelaunchCommand. But the shell never updates the hidden lnk file, even when the program is unpinned and repinned, which is clearly a bug (I wrote this a few time now).</p>
<p>But even if repinning would work correctly, it would be a much better user experience if this manual step would not be required at all. All the information is there, but the shell ignores it happely.</p>
<div class="post">[<i>But the alternative doesn&#39;t work either. If the relaunch command works only if you&#39;ve run the app before, what happens if you run the app for the first time via the pinned shortcut? (Think roaming profile.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-917333">
				<div id="div-comment-917333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/anders.forsberg_4000_monitor.se/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>anders.forsberg@monitor.se</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-917333">
			June 7, 2011 at 7:18 am</a>		</div>

		<p>I have an application installed on a network server (through a share). The application is started with some command line options with overrides for username, local destination and similar. When launching the &quot;start-program&quot; it checks for updates and then downloads all files from the share to the local hard-drive with the display of an UI. The &quot;real&quot; main program is then launched from the local hard-drive without any command line parameters.</p>
<p>Without doing anything; pinning of the application creates an lnk to the local main program (and the customers end up callings support since the updates stop working). Trying the code in the example but with the PKEY_AppUserModel_RelaunchCommand pointing to the share does not work. Pointing the code to local notepad.exe works. Setting PreventPinning works, but makes my customers unhappy.</p>
<p>Is there a built in and hidden rules that prevent relaunch to/from a share? This rule seems to be in effect only when setting PKEY_AppUserModel_RelaunchCommand but not when editing the lnk from the Windows GUI.</p>
<p>My current solution for the customers is to provide an instruction on how to manually pin our application and then edit the command line in the hidden store. :-(</p>
<p>Does it have to be this difficult? I must say that copying the original starting link of the program to the hidden store would be much easier to handle (and Yes I know pinning is supposed to be a user action and not an install action)!</p>
<div class="post">[<em>The taskbar will not let you pin things from network drives or removable media. Sorry. You could copy a local program that trampolines back to the network drive. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-917583">
				<div id="div-comment-917583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110601-00/?p=10523#comment-917583">
			June 7, 2011 at 1:48 pm</a>		</div>

		<p>@Aldus: Have a small EXE and associated .INI file in the install dir to pin that executes the network EXE.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

