<html>
<head>
<title>If relocated DLLs cannot share pages, then doesn't ASLR cause all pages to be non-shared?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If relocated DLLs cannot share pages, then doesn&#8217;t ASLR cause all pages to be non-shared?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 13, 2016 / year-entry #78</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">ASLR is careful to keep sharing alive.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter Medinoc wonders
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/05/18/10615339.aspx#10615694">
whether it's still the case that relocated DLLs can't
be shared in memory</a>.
If so, then doesn't ASLR cause all pages to become non-sharable?
</p>
<p>
There are multiple things in play here.
We'll take them up in historical order,
but I'll start with Windows NT 3.1 instead of Windows 95
because
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/17/323556.aspx">
I already discussed Windows 95 a while back</a>.
</p>
<p>
Windows NT 3.1
tried to load DLLs at their preferred address.
If that happened, then the pages were demand-paged from the
executable on disk,
and if multiple processes loaded the DLL at the preferred address,
then the memory was physically shared.&sup1;
On the other hand, if the DLL could not load at its
preferred address, then fixups were applied to
the entire DLL to relocate it,
and
the relocated DLL was dumped into the pagefile,
and not only did further demand paging come from there,
but that relocated copy was not shared between processes.
</p>
<p>
In other words, if two processes both loaded a DLL,
and the DLL got relocated in both of the processes,
and it got relocated to the same address in each process,
there would nonetheless be two copies of the DLL in the page file,
not one copy that was shared between the two processes.
</p>
<p>
The reason for not sharing the pages in this case
is that the likelihood of all the stars aligning
is relatively low.
Under the Windows NT 3.1 model,
each process did its own relocating,
and each process chose where the DLL would get relocated to.
The likelihood that two processes would both load the same DLL,
and have the same virtual memory layout so that they would
choose the same
relocation destination were relatively low,
so the benefit of getting the processes to coordinate among
themselves was not worth the effort.
</p>
<p>
And then ASLR showed up and changed the cost/benefit calculations.
With ASLR, DLLs are being relocated constantly,
and if the old rules were followed, there would be as many copies
of a DLL in the page file as there were processes that used the DLL.
This was clearly not a good thing.
</p>
<p>
The solution is that when a DLL is loaded, ASLR chooses a random
destination address,
but it then remembers that address for future use,
and if another process loads the DLL, the kernel
will try to use the same destination address for the DLL in that
other process.
This means that if two processes load a DLL,
that DLL will probably get the same destination address in both
processes,
which establishes one of the prerequisites for sharing.
</p>
<p>
ASLR goes further.
The kernel doesn't even bother fixing up the entire DLL and
dumping it into the page file.
Instead, it fixes up the DLL on the fly as it is loaded
(stealing a trick from Windows 95),
and shares the fixed-up pages.
</p>
<p>
Another way of looking at this is that the kernel is pretending
that the preferred address of the file on disk happens to have
matched the ASLR-chosen address all along.
It carries out this ruse by patching the bytes of the file
as they are read off the disk.
</p>
<p>
&sup1;
For simplicity of exposition, let's assume that nobody changes
page protection.
If you are smart enough to ask, "What if somebody changes the page
protection?"
then you are smart enough to know the answer.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1233093">
				<div id="div-comment-1233093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jspenguin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233093">
			April 13, 2016 at 8:56 am</a>		</div>

		<p>Does it still have to do fixups on x86-64, which was designed to do position independent code? On Linux, all shared objects are PIC, so they can share physical pages at different addresses.</p>
<p>The Windows approach has the downside that if one service that loads a DLL has a vulnerability that reveals the base address of that DLL, it can be used to help compromise another service that loads the same DLL.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1233102">
				<div id="div-comment-1233102" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233102">
			April 13, 2016 at 9:43 am</a>		</div>

		<p>There are still fixups in the data segment.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1233103">
				<div id="div-comment-1233103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233103">
			April 13, 2016 at 10:45 am</a>		</div>

		<p>But I compile without fixups. I wonder if the loader is smart enough to figure out it can share pages across addresses in that case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1233134">
				<div id="div-comment-1233134" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233134">
			April 13, 2016 at 12:43 pm</a>		</div>

		<p>you mean just the writable data segment right ?  in most ELF systems, the text &amp; read-only data pages are shared regardless of mapping address.  obviously the writable data is going to be unique to every process.  the blog says things like &#8220;entire DLL&#8221; which makes me think DLLs aren&#8217;t even PIC which would be crazy (as jspenguin highlights).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4" id="comment-1233161">
				<div id="div-comment-1233161" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233161">
			April 13, 2016 at 1:29 pm</a>		</div>

		<p>The read-only data segment can contain fixups. (And Windows tries to share writable data as much as possible. See copy-on-write.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1233111">
				<div id="div-comment-1233111" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233111">
			April 13, 2016 at 11:49 am</a>		</div>

		<p>Yep.  I reverse-engineered this and noticed how there are two relocation engines, one in ntsokrnl.exe and one in ntdll.dll.  If the ASLR-chosen address is unavailable at load time, the user-mode (ntdll.dll) relocation engine relocates the DLL, marking the pages writable, which triggers a copy-on-write.</p>
<p>An interesting side effect of the kernel-mode relocation engine is that when the kernel does ASLR relocation, it updates IMAGE_OPTIONAL_HEADER::ImageBase in the loaded image, simulating that the image wasn&#8217;t relocated at all.  ntdll.dll doesn&#8217;t update ImageBase.  Thus, you can distinguish the two types of relocation at runtime by checking ImageBase against the disk file.</p>
<p>One thing I haven&#8217;t figured out about ASLR is how the demand-paging system Raymond mentioned handles relocations that straddle a page boundary.  Relocations themselves belong to a page, but the size of a relocation can be up to 8 bytes (since Itanic sank, anyway), and there&#8217;s no restriction about a relocation crossing into the next page.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1233113">
				<div id="div-comment-1233113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233113">
			April 13, 2016 at 12:04 pm</a>		</div>

		<p>What you do is you fuzz your fixup range. If the previous page was already paged in you take addresses that straddle the boundary. If the previous page was not already paged in you don&#8217;t. Same for next page.</p>
<p>The Windows 95 solution is inefficient.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1233133">
				<div id="div-comment-1233133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233133">
			April 13, 2016 at 12:39 pm</a>		</div>

		<p>x86 is little endian so the values in the previous page are very important to fixing up the bytes in the faulted page.</p>
<p>i.e. you won&#8217;t know xx&#8230;. $7fxx+$1234=??xx</p>
<p>The potential inefficiency in windows 95 is that they then fixup the previous page as well. It&#8217;s a page that hasn&#8217;t been faulted in yet, so it may not be worth keeping in memory. Fixing it up may be pointless as it may never be used, but as the disk is slower than cpu and memory then it&#8217;s better to keep it fixed up than throwing it away.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1233153">
				<div id="div-comment-1233153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233153">
			April 13, 2016 at 1:21 pm</a>		</div>

		<p>The trick is to defer that particular fixup until paging in both pages.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-5" id="comment-1233154">
				<div id="div-comment-1233154" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233154">
			April 13, 2016 at 1:27 pm</a>		</div>

		<p>How do you defer a fixup? Do you just leave it not-fixed-up and hope nobody reads from that byte of memory?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1233163">
				<div id="div-comment-1233163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233163">
			April 13, 2016 at 1:49 pm</a>		</div>

		<p>I think he would leave the page set to fault so you could catch it again and again. I don&#8217;t think he realises that the overhead of faulting on every access to the page and tracking whether it&#8217;s been fixed up yet is going to be much higher than the time to read the previous page.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1233173">
				<div id="div-comment-1233173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233173">
			April 13, 2016 at 1:58 pm</a>		</div>

		<p>Hoping that nobody will read the straddled fixup until the previous page is read in could work in a lot of circumstances, code especially is unlikely to be executed in the middle of an instruction. For data it&#8217;s like Russian roulette. Another example of &#8220;I can speed this program up if it doesn&#8217;t have to work properly&#8221;, you can make all programs run in zero time if they don&#8217;t have to work properly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1233191">
				<div id="div-comment-1233191" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233191">
			April 13, 2016 at 2:57 pm</a>		</div>

		<p>&gt; I think he would leave the page set to fault so you could catch it again and again.</p>
<p>But how would you execute from the page? There&#8217;s no such thing as execute-no-read. If you grant execute, then you implicitly grant read, at which point you lose the ability to trap accesses outside the fixup range.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1233143">
				<div id="div-comment-1233143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233143">
			April 13, 2016 at 12:44 pm</a>		</div>

		<p>If you&#8217;re suggesting only fixing up the spanning address if that is the address that is being read then not only would you have to keep track of what parts of the page have been fixed up but you would also to repeatedly faulting on the page until it is completely fixed. That would be very inefficient.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even depth-2 parent" id="comment-1233181">
				<div id="div-comment-1233181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233181">
			April 13, 2016 at 2:00 pm</a>		</div>

		<p>Can you explain what&#8217;s the problem? Does it happen with 32-bit executables, or with x64 only?<br />
Windows 8+ (or even 7+) requires a processor that can do atomic 64 bit writes. A write that crosses page boundary will not begin untl both pages are present. A write across two cache lines will not be atomic, anyway, with paging or not, so the point is moot.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1233325">
				<div id="div-comment-1233325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233325">
			April 14, 2016 at 10:47 am</a>		</div>

		<p>There are (or were) cache coherency issues if you were writing to different entries of the same cache line. You&#8217;re thinking about writing to the fixed up data that straddles the boundary, but you could have written to the byte that followed.</p>
<p>For data you have no guarantee that the program will fault the previous page in before reading part of the value that crossed the boundary. You can assume nobody would do anything like that, but you can&#8217;t know.</p>
<p>i.e. if x crossed the boundary then doing something like this would non-deterministic.</p>
<p>	void *x = (void *)&amp;main;<br />
	printf( &#8220;%02x\n&#8221;, ((unsigned char *)(&amp;x))[3]);</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1233183">
				<div id="div-comment-1233183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233183">
			April 13, 2016 at 2:14 pm</a>		</div>

		<p>smf guesses more or less correctly. I&#8217;ve never seen a case of either trying to read half an instruction offset (I&#8217;ve seen trying to pull the offset out but that&#8217;s guaranteed to fault anyway) and I&#8217;ve never seen a case of a misaligned fixup in a data page (can you even do that?).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1233225">
				<div id="div-comment-1233225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233225">
			April 14, 2016 at 5:00 am</a>		</div>

		<p>I don&#8217;t see why fixed up data couldn&#8217;t straddle a page boundary, (i.e. you&#8217;re using #pragma pack(1) and have some pointers in your data).</p>
<p>There may be some data cache issues, especially with multiple cores with doing what you suggest. It feels very icky.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1233355">
				<div id="div-comment-1233355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233355">
			April 14, 2016 at 11:34 am</a>		</div>

		<p>Here&#8217;s an example of reading half an instruction: Checksumming pages.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1233201">
				<div id="div-comment-1233201" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Newman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233201">
			April 13, 2016 at 11:13 pm</a>		</div>

		<p>That seems like a flaw in the ASLR implementation. An unprivileged program could load a DLL (that respects the programs privileges), then use the address information when exploiting a locally executing privileged program.</p>
<p>Small attack surface that&#8217;s probably worth the trade off, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1233205">
				<div id="div-comment-1233205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301#comment-1233205">
			April 14, 2016 at 2:05 am</a>		</div>

		<p>Thanks for the answer.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

