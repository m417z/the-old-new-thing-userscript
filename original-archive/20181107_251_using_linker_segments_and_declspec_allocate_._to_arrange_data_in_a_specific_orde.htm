<html>
<head>
<title>Using linker segments and __declspec(allocate(...)) to arrange data in a specific order</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using linker segments and <CODE>__declspec(allocate(&#8230;))</CODE> to arrange data in a specific order</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 7, 2018 / year-entry #251</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Getting the ducks in a row, in order.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
You can declare a section and then start generating
data into it.
</p>
<pre>
#pragma section("mydata$a", read, write)  
__declspec(allocate("mydata$a")) int i = 0;

#pragma section("mydata$b", read, write)  
__declspec(allocate("mydata$b")) int j = 0;
</pre>
<p>
The <code>#pragma section</code> directive
lets you define a new section and assign attributes.
You can then place data into that section with the
<code>__declspec(allocate(...))</code> attribute.
</p>
<p>
When the linker
<a HREF="http://www.keil.com/support/man/docs/armlink/armlink_chunkpge1406298379992.htm">
combines all the little bits and pieces of data</a>,
it does the following:
</p>
<ul>
<li>It takes the section names and splits them at the first dollar sign.
    (If there is no dollar sign in the section
    name, then the entire string is treated as the "before the first
    dollar sign" portion.)</li>
<li>The portion before the dollar sign is the name of the section
    in the generated module.</li>
<li>The portion after the dollar sign, if any, is used to sort the
    fragments within a section.</li>
</ul>
<p>
It is common to
take advantage of the
"sorts the data fragments alphabetically"
step
by
<a HREF="https://blogs.msdn.microsoft.com/larryosterman/2004/09/27/when-i-moved-my-code-into-a-library-what-happened-to-my-atl-com-objects/">
generating data into a carefully-named sequence of sections</a>
so that
they can iterate over all the objects in the middle section:
</p>
<pre>
typedef void (*INITIALIZER)();

#pragma section("mydata$a", read)  
__declspec(allocate("mydata$a")) const INITIALIZER firstInitializer = nullptr;

#define ADD_INITIALIZER_TO_SECTION(fn, s) \
    __declspec(allocate("mydata$" s)) \
    const INITIALIZER initializer##fn = fn

#pragma section("mydata$g", read)  
#pragma section("mydata$m", read)  
#pragma section("mydata$t", read)  

#define ADD_EARLY_INITIALIZER(fn) ADD_INITIALIZER_TO_SECTION(fn, "g")
#define ADD_INITIALIZER(fn)       ADD_INITIALIZER_TO_SECTION(fn, "m")
#define ADD_LATE_INITIALIZER(fn)  ADD_INITIALIZER_TO_SECTION(fn, "t")

#pragma section("mydata$z", read)  
__declspec(allocate("mydata$z")) INITIALIZER lastInitializer = nullptr;

// In various files

// file1.cpp
ADD_INITIALIZER(Function1);

// file2.cpp
ADD_INITIALIZER(Function2);
ADD_LATE_INITIALIZER(DoThisLater2);

// file3.cpp
ADD_INITIALIZER(Function3);
ADD_EARLY_INITIALIZER(DoThisSooner3);

// file4.cpp
ADD_EARLY_INITIALIZER(DoThisSooner4);
ADD_LATE_INITIALIZER(DoThisLater4);
</pre>
<p>
The idea is that anybody who needs to add an initializer
declares a function pointer in the
<code>mydata$g</code>,
<code>mydata$m</code>,
or
<code>mydata$t</code> section.
The linker will collect all of those function pointers from
same-named sections together,
and then sort the sections, so that the final order of
fragments in the <code>mydata</code> section is
</p>
<table CLASS="cp3" CELLPADDING="3" BORDER="0" STYLE="border-collapse: collapse">
<tr>
<td STYLE="border: solid 1px black">
    <code>mydata$a</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>firstInitializer</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>main.obj</code>
  </td>
<td STYLE="border: none"></td>
</tr>
<tr>
<td ROWSPAN="2" STYLE="border: solid 1px black">
    <code>mydata$g</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>DoThisSooner3</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>file3.obj</code>
  </td>
<td ROWSPAN="2" STYLE="border: solid black;border-width: 1px 0px">unspecified<br>order</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">
    <code>DoThisSooner4</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>file4.obj</code>
  </td>
<td STYLE="border: none"></td>
</tr>
<tr>
<td ROWSPAN="3" STYLE="border: solid 1px black">
    <code>mydata$m</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>Function2</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>file2.obj</code>
  </td>
<td ROWSPAN="3" STYLE="border: solid black;border-width: 1px 0px">unspecified<br>order</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">
    <code>Function1</code><br>
  </td>
<td STYLE="border: solid 1px black">
    <code>file1.obj</code>
  </td>
</tr>
<tr>
<td STYLE="border: solid 1px black">
    <code>Function3</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>file3.obj</code>
  </td>
</tr>
<tr>
<td ROWSPAN="2" STYLE="border: solid 1px black">
    <code>mydata$t</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>DoThisLater2</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>file2.obj</code>
  </td>
<td ROWSPAN="2" STYLE="border: solid black;border-width: 1px 0px">unspecified<br>order</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">
    <code>DoThisLater4</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>file4.obj</code>
  </td>
</tr>
<tr>
<td STYLE="border: solid 1px black">
    <code>mydata$z</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>lastInitializer</code>
  </td>
<td STYLE="border: solid 1px black">
    <code>main.obj</code>
  </td>
</tr>
</table>
<p>
The
<code>Initialize&shy;All&shy;The&shy;Things</code>
function
then walks through all the function pointers
between <code>first&shy;Initializer</code> and
<code>last&shy;Initializer</code>
and calls each one.
</p>
<p>
The alphabetical ordering rule ensures that the
<code>mydata$a</code> fragment comes first,
so that <code>first&shy;Initializer</code> has the
lowest address.
Next comes
the <code>mydata$g</code> fragments,
which contain the early initializers.
Following that are the
<code>mydata$m</code> fragments,
which are the regular initializers.
Next are the
<code>mydata$t</code> fragments,
which contain the late initializers.
And finally the
<code>mydata$z</code> fragment,
which contains <code>last&shy;Initializer</code>.
</p>
<p>
Now that we understand the principle behind
section grouping and sorting,
we can look at the gotchas next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-henke even thread-even depth-1 parent" id="comment-1370125">
				<div id="div-comment-1370125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Henke37' rel='external nofollow' class='url'>Henke37</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370125">
			November 7, 2018 at 10:21 am</a>		</div>

		<p>This sounds eerily familiar. Not the ordering, but the rest. It reminds me of c++ global objects and their initialization order.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1370135">
				<div id="div-comment-1370135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370135">
			November 7, 2018 at 10:23 am</a>		</div>

		<p>Indeed, this is how C++ global object initialization is implemented in the Microsoft compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-simon_clarkstone even thread-odd thread-alt depth-1" id="comment-1370145">
				<div id="div-comment-1370145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Simon+Clarkstone' rel='external nofollow' class='url'>Simon Clarkstone</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370145">
			November 7, 2018 at 1:46 pm</a>		</div>

		<p>I&#8217;m expecting something like:</p>
<p>for (INITIALIZER *i = &amp;firstInitializer + 1; i &lt; &amp;lastInitializer; i++) {<br />
  (**i)();<br />
}</p>
<p>That distant rumbling sound was comp.lang.c exploding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-even depth-1" id="comment-1370195">
				<div id="div-comment-1370195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370195">
			November 8, 2018 at 6:10 am</a>		</div>

		<p>Source code linker placement directives like this are well known (and used a lot) in the embedded world. As Raymond himself has been known to say &#8211; &#8220;How cute.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuffa8 even thread-odd thread-alt depth-1" id="comment-1370335">
				<div id="div-comment-1370335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/uffa8' rel='external nofollow' class='url'>uffa8</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181107-00/?p=100155#comment-1370335">
			November 10, 2018 at 1:26 am</a>		</div>

		<p>problem here if we write<br />
    const INITIALIZER initializer_fn = fn;<br />
and no reference to <b>address</b> of <em>initializer_fn</em> &#8211; compiler not generate variable for <em>initializer_fn</em><br />
for force generate variable we can use fake local function (<em>unreferenced local function has been removed</em>):</p>
<p>    static void fakeFn() { if (&amp;initializer_fn) __debugbreak(); }</p>
<p>where we reference <b>address</b> <em>&amp;initializer_fn</em></p>
<p>also instead <em>#pragma section(&#8220;mydata$x&#8221;, read)</em> and <em>__declspec(allocate(&#8220;mydata$x&#8221;)) const INITIALIZER x = fn;</em> better use<br />
    #pragma const_seg(&#8220;mydata$x&#8221;)<br />
    const INITIALIZER x = fn;<br />
    static void fakeFn() { if (&amp;x) __debugbreak(); }</p>
<p>so complete [code can look like](<a href="https://pastebin.com/32RehATA" rel="nofollow">https://pastebin.com/32RehATA</a>) </p>
<p>    #define echo(x) x</p>
<p>    #define random_var echo(__)echo(__LINE__)</p>
<p>    #define MAKE_VAR(x) static void echo(fakeFn)echo(__LINE__)() { if (&amp;x)__debugbreak(); }</p>
<p>    #define ADD_INITIALIZER(section, function) \<br />
    	    __pragma(const_seg(section)) \<br />
	    static INITIALIZER random_var = function; \<br />
	    MAKE_VAR(random_var)</p>
<p>    typedef void (__cdecl * const INITIALIZER)();</p>
<p>    #pragma const_seg("mydata$a")<br />
    INITIALIZER firstInitializer = 0;</p>
<p>    #pragma const_seg("mydata$z")<br />
    INITIALIZER lastInitializer = 0;</p>
<p>    void InitializeAllTheThings(INITIALIZER * pfbegin, INITIALIZER * pfend) {<br />
	    do {<br />
		    if (INITIALIZER initializer = *pfbegin++) initializer();<br />
	    } while(pfbegin &lt; pfend);<br />
    }</p>
<p>    void InitializeAllTheThings()<br />
    {<br />
	    InitializeAllTheThings(&amp;firstInitializer, &amp;lastInitializer);<br />
    }</p>
<p>    void __cdecl someFunc1();<br />
    void __cdecl someFunc2();<br />
    void __cdecl someFunc3();</p>
<p>    #pragma warning(disable : 4505) // unreferenced local function has been removed</p>
<p>    ADD_INITIALIZER(&quot;mydata$u&quot;, someFunc1)<br />
    ADD_INITIALIZER(&quot;mydata$u&quot;, someFunc2)<br />
    ADD_INITIALIZER(&quot;mydata$c&quot;, someFunc3)</p>
<p>    #pragma warning(default : 4505) // unreferenced local function has been removed</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

