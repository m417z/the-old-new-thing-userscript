<html>
<head>
<title>Understanding errors in classical linking: The delay-load catch-22</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Understanding errors in classical linking: The delay-load catch-22</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 11, 2013 / year-entry #10</td></tr>
<tr><td><b>Tags:</b></td><td>code;linker</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Wrapping up our week of understanding the classical model for linking, we'll put together all the little pieces we've learned this week to puzzle out a linker problem: The delay-load catch-22. You do some code cleanup, then rebuild your project, and you get LNK4199: /DELAYLOAD:SHLWAPI ignored; no imports found from SHLWAPI What does this error...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Wrapping up our week of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/07/10382714.aspx">
understanding the classical model for linking</a>,
we'll put together all the little pieces we've learned this week
to puzzle out a linker problem:
The delay-load catch-22.
</p>
<p>
You do some code cleanup,
then rebuild your project, and you get
</p>
<pre>
<a HREF="http://msdn.microsoft.com/en-us/library/a5x38f99.aspx">LNK4199</a>: /DELAYLOAD:SHLWAPI ignored; no imports found from SHLWAPI
</pre>
<p>
What does this error mean?
</p>
<p>
It means that you passed a DLL via the
<a HREF="http://msdn.microsoft.com/en-us/library/yx9zd12s.aspx">
<code>/DELAYLOAD</code> command line switch</a>
which your program doesn't actually use,
so the linker is saying,
"Um, you said to treat this DLL special, but I don't see that DLL."
</p>
<p>
"Oh, right," you say to yourself.
"I got rid of a call to
<code>Hash&shy;String</code>,
and that was probably the last remaining function
with a dependency on
<code>SHLWAPI.DLL</code>.
The linker is complaining that I asked to delay-load a DLL
that I wasn't even loading!"
</p>
<p>
You fix the problem by deleting
<code>SHLWAPI.DLL</code> from the <code>/DELAYLOAD</code>
list,
and removing
<code>SHLWAPI.LIB</code> from the list of import libararies.
And then you rebuild, and now you get
</p>
<pre>
<a HREF="http://msdn.microsoft.com/en-us/library/799kze2z.aspx">LNK2019</a>: unresolved external '__imp__HashData' referenced in function 'HashString'
</pre>
<p>
"Wait a second, I stopped calling that function.
What's going on!"
</p>
<p>
What's going on is that the
<code>Hash&shy;String</code> function got
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/08/10383017.aspx">
taken along for the ride</a>
by another function.
The order of operations in the linker is
</p>
<ul>
<li>Perform classical linking
<li>Perform nonclassical post-processing
<ul>
<li>Remove unused functions (if requested)
<li>Apply <code>DELAYLOAD</code> (if requested)
    </ul>
</ul>
<p>
The linker doesn't have a crystal ball and say,
"I see that in the future, the 'remove unused functions' step
is going to delete this function, so I can throw it away right now
during the classical linking phase."
</p>
<p>
You have a few solutions available to you.
</p>
<p>
If you can modify the library, you can
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/10/10383642.aspx">
split the <code>Hash&shy;String</code>
function out</a>
so that it doesn't come along for the ride.
</p>
<p>
If you cannot modify the library,
then you'll have to
use the <code>/IGNORE</code> flag to explicitly ignore the warning.
</p>
<p>
<b>Exercise</b>:
Another option is to leave <code>SHLWAPI.LIB</code>
in the list of import libraries,
but remove it from the <code>DELAYLOAD</code> list.
Why is this a dangerous option?
What can you do to make it less dangerous?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1032423">
				<div id="div-comment-1032423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032423">
			January 11, 2013 at 7:36 am</a>		</div>

		<p>Why delayload it at all? What happens if you statically link it? I&#39;m sure all hell breaks loose, but I&#39;m not so sure why.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032433">
				<div id="div-comment-1032433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032433">
			January 11, 2013 at 8:07 am</a>		</div>

		<p>It means the linker was dumb. When it gets to Apply DELAYLOAD, and a referenced library is nowhere to be found but it was found earlier, silently drop it.</p>
<p>@configurator: You can&#39;t statically link to system DLL files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032443">
				<div id="div-comment-1032443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032443">
			January 11, 2013 at 8:22 am</a>		</div>

		<p>@configurator:</p>
<p>Documentation says to use /DELAYLOAD if you won&#39;t use the DLL at all or not until the end of the code. &nbsp;So, I figure you are saving memory and load time.</p>
<p>One other possibility is for optional features. &nbsp;If you didn&#39;t install feature X (maybe you didn&#39;t pay for it) then you won&#39;t even have the DLL that feature X depends on. &nbsp;Could avoid the &quot;why do I have to waste xx MB of disk space on DLLs which support hardware options I don&#39;t even have?&quot; problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032453">
				<div id="div-comment-1032453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032453">
			January 11, 2013 at 8:33 am</a>		</div>

		<p>@Joshua: &nbsp;It seems fairly obvious from the context that configurator means why not place a static dependency on the DLL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032463">
				<div id="div-comment-1032463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032463">
			January 11, 2013 at 8:35 am</a>		</div>

		<p>@Joshua: &quot;@configurator: You can&#39;t statically link to system DLL files.&quot;</p>
<p>No, but you can put in a hard dependency (i.e. a proper not delay-loaded dependently), which I think is what configurator actually meant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1032473">
				<div id="div-comment-1032473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032473">
			January 11, 2013 at 8:53 am</a>		</div>

		<p>If I understand this correctly: the linker&#39;s left hand doesn&#39;t know what its right hand is doing, so you have to pass an /IGNORE switch to prevent it from confusing itself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1032483">
				<div id="div-comment-1032483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032483">
			January 11, 2013 at 9:27 am</a>		</div>

		<p>&#39;Why delayload it at all?&#39;</p>
<p>You pay the cost of loading it when your EXE is started (or DLL is loaded) even if you won&#39;t use it for a while, if at all.</p>
<p>&#39;You can&#39;t statically link to system DLL files.&#39;</p>
<p>Don&#39;t get caught up in the specifics of the example and miss the entire point. &nbsp;Ignore the fact that it&#39;s a system DLL. &nbsp;The same thing applies to any other DLL you might use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032493">
				<div id="div-comment-1032493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ultramage</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032493">
			January 11, 2013 at 9:36 am</a>		</div>

		<p>&quot;Why is this a dangerous option? What can you do to make it less dangerous?&quot;</p>
<p>I think this is what Configurator is wondering about, and me as well. What is so dangerous about the standard default implib approach?</p>
<div class="post">[<em>The danger is that you are now loading the target DLL at startup rather than on demand, which slows down your app&#39;s startup time and increases its memory usage. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032503">
				<div id="div-comment-1032503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/rpresser_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>rpresser@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032503">
			January 11, 2013 at 9:41 am</a>		</div>

		<p>Is the danger specific to SHLWAPI?</p>
<div class="post">[<em>SHLWAPI was merely an example. (What an odd question. You may as well refine it to &quot;Is the danger specific to the HashData function?&quot;) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032513">
				<div id="div-comment-1032513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ofek Shilon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032513">
			January 11, 2013 at 11:22 am</a>		</div>

		<p>Still hoping for some elaboration on function level linking. Wasn&#39;t /GL intended to be the silver bullet to solve all these cases?</p>
<div class="post">[<em>As noted in the article, function level linking is applied <span style="text-decoration:underline;">after</span> the classical link pass. This is important because of the tricks that people use that rely on the classical model. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1032523">
				<div id="div-comment-1032523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032523">
			January 11, 2013 at 11:41 am</a>		</div>

		<p>[The danger is that you are now loading the target DLL at startup rather than on demand, which slows down your app&#39;s startup time and increases its memory usage]</p>
<p>&#8211; but only after another subtle change makes this DLL used again. Otherwise, would the &#39;Remove unused functions&#39; step not remove the import lib entirely?</p>
<div class="post">[<em>And that subtle change is the danger. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032533">
				<div id="div-comment-1032533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ofek Shilon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032533">
			January 11, 2013 at 12:33 pm</a>		</div>

		<p>Is function level linking indeed a synonym for removing unused functions? &nbsp;/GL and /OPT:REF are different switches, one could reasonably hope that function level linking does more than that.</p>
<div class="post">[<em>As explained <a href="http://msdn.microsoft.com/en-us/library/xsa71f43%28v=VS.80%29.aspx" rel="nofollow">in the documentation for /Gy</a>, function-level linking allows functions to be discardable during the &quot;unused function&quot; pass, if you ask for it via /OPT:REF. It does not alter the actual classical model for linking. The flag name is misleading. It&#39;s not &quot;perform function-level linking&quot;. It merely enables it by telling the linker where functions begin and end. And it&#39;s not so much function-level linking as it is function-level unlinking. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1032543">
				<div id="div-comment-1032543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032543">
			January 11, 2013 at 12:44 pm</a>		</div>

		<p>&quot;As noted in the article, function level linking is applied after the classical link pass.&quot;</p>
<p>Raymond, the phrase &quot;function level linking&quot; does not appear in the article. &nbsp;I assume that Ofek simply didn&#39;t realize that &quot;Remove unused functions&quot; was &quot;function level linking&quot;. &nbsp;I know I didn&#39;t realize that, but I also wasn&#39;t specifically looking for a discussion of it, having forgotten about yesterday&#39;s question.</p>
<p>Alex, the main problem here seems to be that the function level linking pass doesn&#39;t provide to the delayload pass the list of DLLs for which it removed references, so that they delayload pass doesn&#39;t produce warnings for them.</p>
<p>Unfortunately, the workaround of using /IGNORE also has the problem that it is relying on undocumented functionality, and it can (and has in the past) change at any time (such as the inability to disable LNK4099 in recent linker versions).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1032563">
				<div id="div-comment-1032563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032563">
			January 11, 2013 at 3:41 pm</a>		</div>

		<blockquote><p>
  You pay the cost of loading it when your EXE is started (or DLL is loaded) even if you won&#39;t use it for a while, if at all.
</p></blockquote>
<p>Cost (time) of DLL (and EXE) loading could be decreased a lot, if the whole module were touched (up to a reasonable size limit) to force it page-in. Great part of an application startup delay is caused by disk thrashing, this is why SSD is so helpful. By changing the page-in pattern from single page by demand, to a whole module, you can reduce number of disk seeks.</p>
<p>One day I&#39;ll try this by writing an add-on driver that uses PsSetLoadImageNotifyRoutine to intercept module load and force them in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032573">
				<div id="div-comment-1032573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032573">
			January 11, 2013 at 6:14 pm</a>		</div>

		<p>@alegrl1: I eagerly await the result of your experiment. If it passes, I&#39;ll just block-read the dlls with a ReadFile command and then throw away the result. (Now they&#39;re in cache.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ofeksh odd alt thread-odd thread-alt depth-1" id="comment-1032553">
				<div id="div-comment-1032553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/OfekShilon' rel='external nofollow' class='url'>OfekShilon</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032553">
			January 11, 2013 at 1:05 pm</a>		</div>

		<p>I was under the impression that /Gy (not /GL of course, sorry) also enables resolution of duplicate definitions of *used* functions, via /OPT:ICF, but perhaps you were referring to such unification of duplicates as removal of unused functions? (it probably happens on the same stage anyway). </p>
<p>/OPT:ICF can probably cover half the cases that otherwise require manually separating functions to individual obj files. &nbsp;Regarding the other cases &#8211; I understand (now, thanks to your posts) that the linker still tries to resolve imports even for *unused* COMDATs, if they&#39;re included in an obj file that got pulled in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1032583">
				<div id="div-comment-1032583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032583">
			January 11, 2013 at 10:49 pm</a>		</div>

		<p>@GregM: the DLL will be factored out altogether. The main problem is that the linker will not warn you when changes in your (or linked) code require this DLL again.</p>
<p>Still, I believe it&#39;s safer to keep the import lib and check the load behaviour regularly, than to use /IGNORE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032593">
				<div id="div-comment-1032593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032593">
			January 12, 2013 at 5:33 am</a>		</div>

		<p>@alegr1: That already happens due to Prefast, and even before that on ASLRed modules this happens because most pages in a text segment need relocations.</p>
<p>Actually the problem is the reverse of what you&#39;re stating. The reason that startup is slow is BECAUSE the module gets touched when loading (and all of its dependencies, recursively), incurring an extra penalty of a couple of million cycles between when you double click your app and when it begins executing its &quot;main&quot; function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032603">
				<div id="div-comment-1032603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032603">
			January 12, 2013 at 6:24 am</a>		</div>

		<p>@alegr1 @Joshua @Matt Firefox does this with its master DLLs. Since they are almost always fully paged in, it actually performs a dummy read on them in order to persuade Windows into reading them 2M at a time instead of 32K or 4K or whatever you normally get. This apparently saves up to 50% off cold startup time, which is better than prefetch (which unfortunately tends to prefetch the wrong files). See <a rel="nofollow" target="_new" href="http://blog.mozilla.org/tglek/2011/09/20/firefox-7-cheating-the-operating-system-to-start-faster/" rel="nofollow">blog.mozilla.org/&#8230;/firefox-7-cheating-the-operating-system-to-start-faster</a> for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032613">
				<div id="div-comment-1032613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://blogs.msdn.com/anil_4000_lambdah.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>anil@lambdah.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032613">
			January 13, 2013 at 4:09 am</a>		</div>

		<p>To make it less dangerous: Have tooling that catches changes in the number of entries in the IAT? (or some other kind of profiling). I&#39;m not sure if that&#39;s the answer you&#39;re looking for though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032623">
				<div id="div-comment-1032623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032623">
			January 13, 2013 at 4:11 am</a>		</div>

		<p>I don&#39;t see how loading an extra Dll is &quot;dangerous&quot;</p>
<p>most apps end up loading dozens, maybe. hundred dlls. trying to shave one dll off the link line is effectively not seeing the forest from the trees, and the equivalent of doing early optimization without first profiling</p>
<div class="post">[<em>You know why most apps load dozens, maybe hundreds of DLLs? Because nobody was watching when the count went up by one. And it happened dozens, maybe hundreds of times. It&#39;s like &quot;I don&#39;t see what&#39;s so dangerous about not balancing my checkbook. My checkbook hasn&#39;t been balanced for years!&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn odd alt thread-odd thread-alt depth-1" id="comment-1032633">
				<div id="div-comment-1032633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032633">
			January 14, 2013 at 1:27 am</a>		</div>

		<p>@Anil: to make it less dangerous, it&#39;s enough to check the list of loaded DLLs before release.</p>
<p>@ulric: I don&#39;t think that loading an extra DLL is &quot;dangerous&quot;.</p>
<p>But it may easily become a startup time disaster, if the &quot;extra&quot; DLL in turn pulls dozens, maybe hundreds DLLs with it. OTOH, /DELAYLOAD should be, IMVHO, a last-minute optimization. Unlike dynamic linking, the DELAYLOAD magic can rarely get broken by the user code (and vice versa). Introducing it early in the development cycle may make debugging harder, and due to subtle changes in the code and environment the effects of DELAYLOAD may vary greatly.</p>
<p>Therefore, I would recommend to introduce /DELAYLOAD after the application and the environment have stabilized, during the stage of performance tuning and testing.</p>
<div class="post">[<em>Actually, delay loading can introduce its own problems. For example, if you trigger a delay-load while holding a lock, you may inadvertently create a deadlock. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032693">
				<div id="div-comment-1032693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032693">
			January 14, 2013 at 8:09 am</a>		</div>

		<p>[Actually, delay loading can introduce its own problems. For example, if you trigger a delay-load while holding a lock, you may inadvertently create a deadlock. -Raymond]</p>
<p>Repeat after me: Do not do interesting in DLLMain. That way lies madness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032723">
				<div id="div-comment-1032723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1032723">
			January 14, 2013 at 8:35 am</a>		</div>

		<p>And never forget that when all static initializers run.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1033153">
				<div id="div-comment-1033153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130111-00/?p=5583#comment-1033153">
			January 15, 2013 at 10:33 pm</a>		</div>

		<p>Probably, it could be nice to have a /DELAYLOAD_ALL flag, and a way to list exceptions</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

