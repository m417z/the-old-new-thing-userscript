<html>
<head>
<title>What is the historical reason for MulDiv(1, -0x80000000, -0x80000000) returning 2?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is the historical reason for MulDiv(1, -0x80000000, -0x80000000) returning 2?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 14, 2012 / year-entry #112</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>47</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter rs asks, "Why does Windows (historically) return 2 for MulDiv(1, -0x80000000, -0x80000000) while Wine returns zero?" The MulDiv function multiplies the first two parameters and divides by the third. Therefore, the mathematically correct answer for MulDiv(1, -0x80000000, -0x80000000) is 1, because a × b ÷ b = a for all nonzero b. So both Windows and Wine get it...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter rs asks,
"<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/07/20/10040074.aspx#10040424"
>Why does Windows (historically) return 2 for
<code>MulDiv(1, -0x80000000, -0x80000000)</code> while Wine returns zero?</a>"
</p>
<p>
The <code>MulDiv</code> function multiplies the first two parameters
and divides by the third. Therefore, the mathematically correct
answer for 
<code>MulDiv(1, <nobr>-0x80000000,</nobr>
<nobr>-0x80000000)</nobr></code> is 1,
because
<i>a</i>&nbsp;&times;
<i>b</i>&nbsp;&divide;
<i>b</i>&nbsp;=&nbsp;<i>a</i> for all nonzero&nbsp;<i>b</i>.
</p>
<p>
So both Windows and Wine get it wrong.
I don't know why Wine gets it wrong, but I dug through the
archives to figure out what happened to Windows.
</p>
<p>
First, some background.
What's the point of the <code>MulDiv</code> function anyway?
</p>
<p>
Back in the days of 16-bit Windows,
floating point was very expensive.
Most people did not have math coprocessors,
so floating point was performed via software emulation.
And the software emulation was slow.
First, you issued a floating point operation on the assumption
that you had a float point coprocessor.
If you didn't, then a <i>coprocessor not available</i>
exception was raised.
This exception handler had a lot of work to do.
</p>
<p>
It decoded the instruction that caused
the exception and then emulated the operation.
For example, if the bytes at the point of the exception were
<code>d9 45 08</code>, the exception handler would have to
figure out that the instruction was <code>fld dword ptr ds:[di][8]</code>.
It then had to simulate the operation of that instruction.
In this case, it would
retrieve the caller's <code>di</code> register,
add 8 to that value,
load four bytes from that address
(relative to the caller's <code>ds</code> register),
expand them from 32-bit floating point to 80-bit floating point,
and push them onto a pretend floating point stack.
Then it advanced the instruction pointer three bytes and
resumed execution.
</p>
<p>
This took an instruction that with a coprocessor would take
around 40 cycles (already slow) and ballooned its total execution
time to a few hundred, probably thousand cycles.
(I didn't bother counting. Those who are offended by this
horrific laziness on my part can apply for a refund.)
</p>
<p>
It was in this sort of floating point-hostile environment that
Windows was originally developed.
As a result,
Windows has historically avoided using floating point and preferred
to use integers.
And one of the things you often have to do with integers is
scale them by some ratio.
For example, a horizontal dialog unit is &frac14; of the average
character width, and a vertical dialog unit is 1/8 of the average
character height.
If you have a value of, say, 15 horizontal dlu, the corresponding
number of pixels is
15 &times; average character width &divide; 4.
This multiply-then-divide operation is quite common, and that's
the model that the <code>MulDiv</code> function is designed to
help out with.
</p>
<p>
In particular, <code>MulDiv</code> took care of three
things that a simple
<i>a</i>&nbsp;&times;
<i>b</i>&nbsp;&divide;
<i>c</i> didn't.
(And remember, we're in 16-bit Windows, so <i>a</i>,
<i>b</i>&nbsp;and&nbsp;<i>c</i> are all 16-bit signed values.)
</p>
<ul>
<li>The intermediate product <i>a</i>&nbsp;&times;&nbsp;<i>b</i> was
    computed as a 32-bit value, thereby avoiding overflow.</p>
<li>The result was <i>rounded</i> to the nearest integer instead
    of truncated toward zero</p>
<li>If <i>c</i>&nbsp;=&nbsp;0 or if the result did not fit
    in a signed 16-bit integer, it returned <i>INT_MAX</i>
    or <i>INT_MIN</i> as appropriate.
</ul>
<p>
The <code>MulDiv</code> function was written in assembly language,
as was most of GDI at the time.
Oh right, the <code>MulDiv</code> function was exported by GDI
in 16-bit Windows.
Why?
Probably because they were the people who needed the function first,
so they ended up writing it.
</p>
<p>
Anyway, after I studied the assembly language for the function,
I found the bug.
A <code>shr</code> instruction was accidentally coded as <code>sar</code>.
The problem manifests itself only for the denominator
<a HREF="http://blogs.msdn.com/b/ericlippert/archive/2011/01/24/spot-the-defect-bad-comparisons-part-two.aspx">
<code>&minus;0x8000</code></a>, because that's the only one whose
absolute value has the high bit set.
</p>
<p>
The purpose of the <code>sar</code> instruction was to divide the
denominator by two, so it can get the appropriate rounding behavior
when there is a remainder.
Reverse-compiling back into C, the function goes like this:
</p>
<pre>
int16 MulDiv(int16 a, int16 b, int16 c)
{
 int16 sign = a ^ b ^ c; // sign of result

 // make everything positive; we will apply sign at the end
 if (a &lt; 0) a = -a;
 if (b &lt; 0) b = -b;
 if (c &lt; 0) c = -c;

 //  add half the denominator to get rounding behavior
 uint32 prod = UInt16x16To32(a, b) + c / 2;
 if (HIWORD(prod) &gt;= c) goto overflow;
 int16 result = UInt32Div16To16(prod, c);
 if (result &lt; 0) goto overflow;
 if (sign &lt; 0) result = -result;
 return result;

overflow:
 return sign &lt; 0 ? INT_MIN : INT_MAX;
}
</pre>
<p>
Given that I've already told you where the bug is,
it should be pretty easy to spot in the code above.
</p>
<p>
Anyway, when this assembly language function was ported
to Win32, it was ported as, well, an assembly language function.
And the port was so successful,
it even preserved (probably by accident) the sign extension bug.
</p>
<p>
Mind you, it's a bug with amazing seniority.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (47)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-984753">
				<div id="div-comment-984753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984753">
			May 14, 2012 at 7:22 am</a>		</div>

		<p>I wonder if there is a tool for searching a computer for PE images that import a given function. &nbsp;I would be curious to know what software might still be importing this esoteric function!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984763">
				<div id="div-comment-984763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984763">
			May 14, 2012 at 7:23 am</a>		</div>

		<p>I have seen ports like that before. New fancy wrapping, same old code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984773">
				<div id="div-comment-984773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984773">
			May 14, 2012 at 7:24 am</a>		</div>

		<p>Odder still: if MSDN is correct, why are they carrying these functions over to Windows 8 Metro-style apps, which supposedly dispense with the old Win32 way of doing things? &nbsp;I can&#39;t imagine a situation where you&#39;d need them &#8211; every compiler-writer is probably going to be using built-in processor instructions for this or providing their own emulation&#8230;</p>
<div class="post">[<i>&quot;In particular, <code>Mul&shy;Div</code> took care of three things that a simple a &times; b &divide; c didn&#39;t.&quot; Two of those three things still apply today. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984783">
				<div id="div-comment-984783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984783">
			May 14, 2012 at 7:32 am</a>		</div>

		<p>@JamesJohnston</p>
<p>Considering that the MSDN docs on LOGFONT suggest using MulDiv to convert a point size to lfHeight, I suspect a lot of software is using that function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984793">
				<div id="div-comment-984793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984793">
			May 14, 2012 at 7:34 am</a>		</div>

		<p>@JamesJohnston &#8211; You&#39;ll find a lot of apps still use this function. Although its origins are quite esoteric, because the win32 api tends to use all integers, and a lot of devs still believe that floating point maths is really slow even when it isn&#39;t, people still use it. Plus this msdn page (&lt;a href=&quot;<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/dd145037(v=VS.85).aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/dd145037(v=VS.85).aspx&lt;/a&gt;" rel="nofollow">msdn.microsoft.com/&#8230;/a&gt;</a>) shows the canonical method to initialize a LOGFONT structure, which I know I have written lots of times in lots of apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984813">
				<div id="div-comment-984813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984813">
			May 14, 2012 at 7:57 am</a>		</div>

		<p>I imagine Wine gets it wrong for compatibility reasons ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984823">
				<div id="div-comment-984823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Are you sure?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984823">
			May 14, 2012 at 8:01 am</a>		</div>

		<p>@Beard: Then wouldn&#39;t Wine return 2, not 0?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-984833">
				<div id="div-comment-984833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984833">
			May 14, 2012 at 8:15 am</a>		</div>

		<p>Surely you mean 0x8000 rather than 0x80000000</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-984843">
				<div id="div-comment-984843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984843">
			May 14, 2012 at 8:17 am</a>		</div>

		<p>Oh, I see, it started out as 0x8000 but then made the jump to 0x80000000 when it was ported</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984853">
				<div id="div-comment-984853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kog999</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984853">
			May 14, 2012 at 8:20 am</a>		</div>

		<p>I would like to apply for my refund. When should i expect to receive it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984863">
				<div id="div-comment-984863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984863">
			May 14, 2012 at 8:21 am</a>		</div>

		<p>The Wine source code can be found here, for the curious: <a rel="nofollow" target="_new" href="http://source.winehq.org/git/wine.git/blob/refs/heads/master:/dlls/kernel32/kernel_main.c#l146" rel="nofollow">source.winehq.org/&#8230;/kernel_main.c</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-984873">
				<div id="div-comment-984873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984873">
			May 14, 2012 at 8:27 am</a>		</div>

		<p>@JamesJonston:</p>
<p>MulDiv is a very convenient function, for example, to scale coordinates from some app units to pixels (or the other way around). Nothing esoteric about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984883">
				<div id="div-comment-984883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Mol</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984883">
			May 14, 2012 at 8:29 am</a>		</div>

		<p>At a guess, I&#39;d suspect WINE gets it wrong because it&#39;s trying to duplicate Windows behaviors, so that apps which depend on Windows behaviors don&#39;t break under WINE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984893">
				<div id="div-comment-984893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984893">
			May 14, 2012 at 9:05 am</a>		</div>

		<p>Another person to add to the ever growing list of people who never thought that abs(x) &lt; 0 was a possibility. Well can&#39;t blame them..</p>
<p>@Mike Mol: Keeping backwards compatibility by introducing some completely different bug? Interesting idea. Note that the wine version is actually worse than the original windows version, because we&#39;re relying on signed overflow because it&#39;s written in C, not asm and that&#39;s undefined behavior in C.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984903">
				<div id="div-comment-984903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984903">
			May 14, 2012 at 9:42 am</a>		</div>

		<p>@Adam Rosenfield: I prefer reading the source using LXR: <a rel="nofollow" target="_new" href="http://source.winehq.org/source/dlls/kernel32/kernel_main.c#L152" rel="nofollow">source.winehq.org/&#8230;/kernel_main.c</a></p>
<p>I believe Wine based the function on the documentation, and no real-world program depended on the buggy result in such a way that it would break under Wine, so they did not know (or did not care) about the difference. A lot of Wine code seems to be written on demand (a function is written because some program uses it), unlike Windows which has to write the code before programs start using it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984923">
				<div id="div-comment-984923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984923">
			May 14, 2012 at 9:59 am</a>		</div>

		<p>I like how the Wine folks apparently haven&#39;t heard of INT_MIN and INT_MAX and actually wrote out 2147483647.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984943">
				<div id="div-comment-984943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984943">
			May 14, 2012 at 10:42 am</a>		</div>

		<p>INT_MIN != -INT_MAX &nbsp;(INT_MIN = 0x80000000 = -2147483648, INT_MAX = 0x7fffffff = &nbsp;+2147483647)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984963">
				<div id="div-comment-984963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984963">
			May 14, 2012 at 11:43 am</a>		</div>

		<p>Thank you for answering my question! I ran into this behavior when I used MulDiv for some coordinate scaling. I was using -0x80000000 as a sentinel value and first assumed no special handling was needed in the MulDiv call since it would behave as an identity function. However, some simple testing showed this was not true.</p>
<p>The historical information you collected is awesome and makes this perfectly comprehensible. If a=1, b=c=-0x8000, and (-c)/2=0x8000/2 is computed as 0xc000 (=(uint16)-0x4000) instead of 0x4000, the result is (0x8000+0xc000) / 0x8000, which would explain the value 2.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984973">
				<div id="div-comment-984973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984973">
			May 14, 2012 at 11:48 am</a>		</div>

		<blockquote><p>
  but on the opposite just think on how hard it would be to implement fork() on Windows..)
</p></blockquote>
<p>Easy enough, &nbsp;I suppose, given that NtCreateProcess has an input argument that tells it to use an existing address space (and of course it was designed that way to make fork possible).</p>
<p>The now-just-about-obsolete book Windows NT/2000 Native API Reference (Nebbett, 2000) has an example sketching out how you&#39;d implement fork for Win32 processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984983">
				<div id="div-comment-984983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984983">
			May 14, 2012 at 11:51 am</a>		</div>

		<p>@dave: AFAIK, you lose the Win32 subsystem if you do it that way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-984993">
				<div id="div-comment-984993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984993">
			May 14, 2012 at 11:58 am</a>		</div>

		<p>&quot;Those who are offended by this horrific laziness on my part can apply for a refund.&quot; &nbsp;&lt;3 this blog</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985003">
				<div id="div-comment-985003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985003">
			May 14, 2012 at 1:08 pm</a>		</div>

		<p>@mmm, @dave, @Cesar:</p>
<p>I&#39;ll just leave this here&#8230;</p>
<p>#5.5: <a rel="nofollow" target="_new" href="http://cygwin.com/faq-nochunks.html#faq.api.fork" rel="nofollow">cygwin.com/faq-nochunks.html</a></p>
<p>#4.44: <a rel="nofollow" target="_new" href="http://cygwin.com/faq-nochunks.html#faq.using.fixing-fork-failures" rel="nofollow">cygwin.com/faq-nochunks.html</a></p>
<p>Process Creation: <a rel="nofollow" target="_new" href="http://cygwin.com/cygwin-ug-net/highlights.html#ov-hi-process" rel="nofollow">cygwin.com/&#8230;/highlights.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985013">
				<div id="div-comment-985013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/analisnudesette_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>analisnudesette@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985013">
			May 14, 2012 at 1:16 pm</a>		</div>

		<p>Dealing with the overflow in the intermediate calculation is really useful, but I found the rounding behaviour of MulDiv introduced bugs into code which assumed integer division would always round down (like it normally does), so I ended up replacing MulDiv with my own simple MulDivRoundDown.</p>
<p>It depends what you use it for whether the rounding is good or bad, but it&#39;s worth keeping in mind that it is not like normal integer multiplication followed by division, even ignoring this quirk and the handling of division by zero and overflows. Don&#39;t blindly drop MulDiv into some code just to avoid the overflow problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984803">
				<div id="div-comment-984803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984803">
			May 14, 2012 at 7:57 am</a>		</div>

		<p>@JamesJohnston: This should work under Cygwin, though it will be rather slow:</p>
<p>grep -r &#8211;include=*.{exe,dll} -l -Z &#39;&lt;MulDiv&gt;&#39; /cygdrive/* | (while read -r -d &quot;$(printf \0)&quot; x; do dumpbin /imports &quot;$x&quot; | grep -l &#8211;label=&quot;$x&quot; &#39;&lt;CreateFileW&gt;&#39;; done)</p>
<p>You could also replace the initial grep with a &quot;find /cygdrive/* -iname *.dll -o -iname *.exe -print0&quot;; it&#39;ll do less I/O but require more dumpbin processes to be created (one for every executable, instead of one for every potential match), so it&#39;s not clear to me which is faster.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985033">
				<div id="div-comment-985033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985033">
			May 14, 2012 at 3:43 pm</a>		</div>

		<p>Note for those of us puzzled by the minus signs:</p>
<p>-x = ~x + 1</p>
<p>-80000000h = 0x7FFFFFFFh + 1 = 80000000h</p>
<p>Because of overflow roll-around, there is no difference whether the minus signs are there or not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985043">
				<div id="div-comment-985043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985043">
			May 14, 2012 at 4:12 pm</a>		</div>

		<p>Oh, by the way, the overflow issue reminds me of this cute little puzzle: write a function to average two C &#39;int&#39;s. If the average is not an integer you can round up or down, it doesn&#39;t matter; in fact, you don&#39;t even have to be consistent between different numbers. (This problem arose for me in doing a binary search over the space of ints.)</p>
<p>There are a couple different &quot;levels&quot; of answers. The one that made it into code was &quot;cast to a long long, average, then cast back&quot; along with a static assertion that sizeof(long long) &gt; sizeof(int). But that&#39;s intellectually unsatisfying; for instance, it doesn&#39;t tell you how to average two long longs besides &quot;use an arbitrary-precision arithmetic library.&quot;</p>
<p>So one step up from &quot;use a larger integer&quot; is to do it while making other mostly-reasonable assumptions about the platform, e.g. that &#39;int&#39; is a 32-bit, two&#39;s complement number that wraps on overflow. The step up from that is to do it so it&#39;ll work on any conforming C platform.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985053">
				<div id="div-comment-985053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985053">
			May 14, 2012 at 4:24 pm</a>		</div>

		<p>@Evan: (t1) + ((t2 &#8211; t1) / 2)</p>
<p>This works on two&#39;s compliment wrap-around but bitness doesn&#39;t matter (they can even be pointers). It also works on ones compliment if you cast to unsigned-type and back.</p>
<div class="post">[<i>Yup, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2003/09/17/54945.aspx" rel="nofollow">this is an old problem</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984913">
				<div id="div-comment-984913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mmm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984913">
			May 14, 2012 at 9:52 am</a>		</div>

		<p>&gt;&gt; and no real-world program depended on the buggy result in such a way that it would break under Wine</p>
<p>To be true so many programs break under Wine (*) that there is an higher than zero chance that this might be one of the thousands of little issues that make apps break.</p>
<p>(*) =&gt; from the above statement it might seem that I do not appreciate Wine. On the contrary &#8211; just their job is unbelievably difficult: to emulate a moving target, supporting apps relying on all kinds of undocumented behavior all this running on systems which (by virtue of having a different kernel) might make some simple tasks immensely difficult (I can&#39;t come with an example in that direction, but on the opposite just think on how hard it would be to implement fork() on Windows..).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985063">
				<div id="div-comment-985063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985063">
			May 14, 2012 at 5:46 pm</a>		</div>

		<p>How about (a&gt;&gt;1)+(b&gt;&gt;1)+(a&amp;b&amp;1)? I believe it will always round down. (a&gt;&gt;1)+(b&gt;&gt;1)+((a|b)&amp;1) to round up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-984953">
				<div id="div-comment-984953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-984953">
			May 14, 2012 at 10:48 am</a>		</div>

		<p>Yes, I know.</p>
<p>First, I&#39;d have to work through the math and what happens with overflow and stuff to know this for sure (because they sure didn&#39;t comment it well if it&#39;s correct) but from just glancing at things it seems like the check *should* have been against INT_MIN rather than INT_MIN+1.</p>
<p>Second, even if the code is right, interestingly enough, -2147483647 = -2147483648+1 = INT_MIN+1, which is probably a better way of writing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985073">
				<div id="div-comment-985073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985073">
			May 14, 2012 at 5:54 pm</a>		</div>

		<p>How to reverse-compile assembly into C?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985083">
				<div id="div-comment-985083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985083">
			May 14, 2012 at 6:53 pm</a>		</div>

		<p>Steven: use an appropriately skilled (and willing) human being.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985093">
				<div id="div-comment-985093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985093">
			May 14, 2012 at 7:34 pm</a>		</div>

		<p>@steven: I usually describe it as turning hamburger back into a cow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985103">
				<div id="div-comment-985103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985103">
			May 14, 2012 at 7:50 pm</a>		</div>

		<p>[I&#39;ve tried posting this before, but I think it was dropped. Sorry if it&#39;s a double (or triple!) post.]</p>
<p>@Joshua: &nbsp;(t1) + ((t2 &#8211; t1) / 2)</p>
<p>&quot;The average of INT_MIN and INT_MAX is -2147483648&quot;. (t2-t1 can overflow.) That can be the basis of a solution, but isn&#39;t completely correct itself.</p>
<p>@Ivo: (a&gt;&gt;1)+(b&gt;&gt;1)+(a&amp;b&amp;1)</p>
<p>&#39;&gt;&gt;&#39; is allowed to do a logical shift (giving a positive number, of course), but IIRC that&#39;s a works-in-practice solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985123">
				<div id="div-comment-985123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ThomasX</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985123">
			May 14, 2012 at 10:22 pm</a>		</div>

		<p>Is this bug already fixed? Life in this universe cannot possibly go on otherwise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985133">
				<div id="div-comment-985133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985133">
			May 15, 2012 at 3:55 am</a>		</div>

		<p>I would have implemented MulDiv(a, b, c) as a * b * 2 / c / 2 (with appropriate rounding) and it wouldn&#39;t have occurred to me to check the behaviour of INT_MIN either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985263">
				<div id="div-comment-985263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Totzke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985263">
			May 15, 2012 at 11:28 am</a>		</div>

		<blockquote><p>
  &gt;the exception handler would have to figure out that the instruction was fld dword ptr ds:[di][8]
</p></blockquote>
<p>It is things like this that keep me constantly amazed that any of this computer stuff even works at all given what goes on close to the metal. I mean this in a complementary way of course.</p>
<p>It is also the very reason that I am thankful that I work many layers of abstraction removed from the metal.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985143">
				<div id="div-comment-985143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Graeber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985143">
			May 15, 2012 at 5:51 am</a>		</div>

		<p>@JamesJohnston, @Adam Rosenfield</p>
<p>Here&#39;s a quick powershell script to dump all dlls or exes that import MulDiv:</p>
<p>Get-ChildItem $env:windir -Recurse -Include *.dll,*.exe -ErrorAction SilentlyContinue |</p>
<p> &nbsp; ForEach-Object {</p>
<p> &nbsp; &nbsp; &nbsp;$Assembly = $_</p>
<p> &nbsp; &nbsp; &nbsp;Invoke-Expression &quot;dumpbin /IMPORTS $Assembly&quot; |</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; Where-Object { $_ -match &#39;(?i:MulDiv)&#39; } |</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp; ForEach-Object { $Assembly }</p>
<p> &nbsp; }</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985313">
				<div id="div-comment-985313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985313">
			May 15, 2012 at 6:27 pm</a>		</div>

		<blockquote><p>
  it should be pretty easy to spot in the code above
</p></blockquote>
<p>:( I saw the 2&#39;s complement overflow, but couldn&#39;t work out whether 2, 1.5 (rounded to 2), or something else would be returned in the end. My knowledge of C (ANSI or pre-ANSI) integer promotion, arithmetic signed/unsigned conversion, etc, being rusty, I tried to see what would happen when copying the code to a compiler and changing all the variables to 32/64 width to hopefully produce the same result. Anyways, I was surprised to discover that UInt32x32To64 is defined in WinNT.h!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985333">
				<div id="div-comment-985333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985333">
			May 15, 2012 at 7:56 pm</a>		</div>

		<p>@Ceaser:</p>
<p>No you don&#39;t lose the Win32 subsystem that way. To a certain extent, calling native functions through LoadLibrary/GetModuleHandle and GetProcAddress is supported. That is the reason for the existance of winternal.h and for pages like <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/bb432200(VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/bb432200(VS.85).aspx</a> in the msdn. Also, to stop your application from being Win32, you have to link with /subsystem:native. If you use /subsystem:windows or /subsystem:console then your application will be seen as a Win32 process regardless.</p>
<p>The only thing to get in the way is the lack of documentation for NtCreateProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985363">
				<div id="div-comment-985363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985363">
			May 16, 2012 at 1:46 am</a>		</div>

		<p>@Matt Graeber:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/powershell/archive/2011/06/03/invoke-expression-considered-harmful.aspx" rel="nofollow">blogs.msdn.com/&#8230;/invoke-expression-considered-harmful.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-985373">
				<div id="div-comment-985373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985373">
			May 16, 2012 at 1:48 am</a>		</div>

		<p>BTW, why was MulDiv not extended to 64-bit in Win64?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985443">
				<div id="div-comment-985443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985443">
			May 16, 2012 at 7:58 am</a>		</div>

		<p>@Crescens2k: search on your favorite search engine for &quot;NtCreateProcess cygwin fork&quot; (or similar queries). You will find mailing list posts where they discussed why it does not work, and one of the reasons is that yes, you lose the connection to csrss (which is where part of Win32 resides).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985483">
				<div id="div-comment-985483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985483">
			May 16, 2012 at 9:47 am</a>		</div>

		<p>BTW, in case anyone cares and is still reading this, here&#39;s one of the most satisfying answers to my average question: a/2 + (a%2 + b%2)/2 + c/2. It&#39;s fully standards-compliant AFAICT, as the standard requires / and % to be consistent. -5/2 is allowed to return either -2 or -3, but if -5/2==-2 then -5%2 must be -1, and if -5/2==-3 then -5%2 must be +1. That works either way its set up. (Incidentally, now you should also be able to say why the order of operations matters and doing a/2 + c/2 + (a%2 + b%2)/2 isn&#39;t correct.)</p>
<p>That solution isn&#39;t mine to have come up with, but I like it quite a bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-985543">
				<div id="div-comment-985543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985543">
			May 16, 2012 at 1:55 pm</a>		</div>

		<p>@Cesar:</p>
<p>And this is where the lack of documentation on NtCreateProcess comes in. If you actually go and reverse engineer CreateProcess you will notice that it is more than a thin wrapper around NtCreateProcess.</p>
<p>CreateProcess itself actually calls RtlCreateProcessParams which does the proper setting up and when necessary, it calls NtCreateProcess. As a bit of a guess, I&#39;m thinking that NtCreateProcess just creates the process object. So again, it isn&#39;t that you lose Win32 that way, it is the lack of documentation on NtCreatePocess that is the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-985563">
				<div id="div-comment-985563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-985563">
			May 16, 2012 at 8:10 pm</a>		</div>

		<p>Crescens2k: Indeed, NtCreateProcess merely a tiny cog inside the giant Win32 CreateProcess machine. I once looked at the source code for CreateProcess to understand how to write something like fork(), and it was several pages of code. It has to create the address space, parse the command line, load the executable, create the initial thread, create the environment, and so on. There are dozens of system calls, of which just one is NtCreateProcess.</p>
<p>In true microkernel fashion, the NtCreateProcess function does nothing but create a container with some inherited handles, so I don&#39;t think that lack of documentation on it is as important as the lack of documentation on everything else that CreateProcess has to do.</p>
<p>It&#39;s hard to implement fork() on Win32 because the whole system wasn&#39;t designed to support cloning processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-986003">
				<div id="div-comment-986003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120514-00/?p=7633#comment-986003">
			May 18, 2012 at 3:41 pm</a>		</div>

		<p>Note that you should avoid fork() even on Linux/Unix/Posix. The reason is that if you use fork() from a non-trivial program, you get a choice between either turning overcommit on (which is dangerous, and I&#39;m sad to say the default on many operating systems, although fortunately not on Windows) or risk poor performance and high memory and swap consumption.</p>
<p>Don&#39;t use fork(), there are better alternatives, especially for fork-exec, which is from the code I&#39;ve seen the most common use of fork().</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

