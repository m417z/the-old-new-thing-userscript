<html>
<head>
<title>Creating custom tasks on a jump list</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating custom tasks on a jump list</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 23, 2013 / year-entry #338</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131223-00/?p=2303</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program adds a custom task to the application's jump list. Take the scratch program and make the following changes. (Remember, Little Programs do very little error checking because that's how they roll.) #include <shlobj.h> #include <propkey.h> #include <wrl/client.h> using namespace Microsoft::WRL; ComPtr<IShellLink> CreateShellLinkForTask( PCWSTR pszTitle, PCTSTR pszArgs, int idIcon) { ComPtr<IShellLink> spsl; CoCreateInstance(CLSID_ShellLink,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program adds a custom task to the application's
jump list.
Take the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make the following changes.
(Remember, Little Programs do very little error checking
because that's how they roll.)
</p>
<pre>
<font COLOR=blue>#include &lt;shlobj.h&gt;
#include &lt;propkey.h&gt;
#include &lt;wrl/client.h&gt;

using namespace Microsoft::WRL;

ComPtr&lt;IShellLink&gt;
CreateShellLinkForTask(
    PCWSTR pszTitle,
    PCTSTR pszArgs,
    int idIcon)
{
    ComPtr&lt;IShellLink&gt; spsl;

    CoCreateInstance(CLSID_ShellLink, nullptr, CLSCTX_ALL, IID_PPV_ARGS(&amp;spsl));

    wchar_t szBuf[MAX_PATH];
    GetModuleFileName(g_hinst, szBuf, ARRAYSIZE(szBuf));
    spsl-&gt;SetPath(szBuf);

    spsl-&gt;SetArguments(pszArgs);
    spsl-&gt;SetIconLocation(szBuf, idIcon);

    PROPVARIANT pvar;
    pvar.vt = VT_LPWSTR;
    pvar.pwszVal = const_cast&lt;PWSTR&gt;(pszTitle);
    ComPtr&lt;IPropertyStore&gt; spps;
    spsl.As(&amp;spps);
    spps-&gt;SetValue(PKEY_Title, pvar);
    spps-&gt;Commit();

    return spsl;
}</font>
</pre>
<p>
This helper function creates an
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/24/10133280.aspx">
in-memory shell link object</a>
with the specified title, command line arguments, and icon.
The underlying executable is assumed to be the running executable.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  <font COLOR=blue>ComPtr&lt;ICustomDestinationList&gt; spcdl;
  CoCreateInstance(CLSID_DestinationList, nullptr, CLSCTX_ALL,
                   IID_PPV_ARGS(&amp;spcdl));

  ComPtr&lt;IObjectCollection&gt; spoc;
  UINT cMinSlots;
  spcdl-&gt;BeginList(&amp;cMinSlots, IID_PPV_ARGS(&amp;spoc));
  spoc-&gt;Clear();

  spoc-&gt;AddObject(CreateShellLinkForTask(L"New frob",
                   TEXT("/frob"), -2).Get());

  spcdl-&gt;AddUserTasks(spoc.Get());
  spcdl-&gt;CommitList();</font>

  return TRUE;
}
</pre>
<p>
When our window is created,
we get the destination list for our application
and ask it for an object collection so we can fill it with tasks.
We empty the existing collection and add a single shortcut
called "New frob" and which passes the <code>/frob</code> command line
argument.
The icon here is given as a negative number to indicate
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/05/10007461.aspx">
that it is an icon ID rather than an icon index</a>.
We then tell the destination list that this is our new task collection.
</p>
<p>
Before we forget, let's add the icon to our resource file.
</p>
<pre>
// scratch.rc
1 ICON icon1.ico
2 ICON icon2.ico
</pre>
<p>
I'll leave you to find some icons to use.
Icon number 2 is the one that will be used for the jump list.
(Icon number 1 I left to represent the application itself.)
</p>
<p>
Finally, we respond to the command line switch.
</p>
<pre>
int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
  <font COLOR=blue>if (strcmp(lpCmdLine, "/frob") == 0) {
    MessageBox(nullptr, L"Frob!", L"Title", MB_OK);
    return 0;
  }</font>
  ...
}
</pre>
<p>
If the command line switch <code>/frob</code> is passed,
then we say something silly.
In real life, we would create a new frob,
possibly by looking for an existing running copy of the program
and asking it to do the creation.
</p>
<p>
Okay, run this program and then right-click on the taskbar icon.
Observe that there is now a <i>New frob</i> task,
and if you select it,
you get the silly message.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1095923">
				<div id="div-comment-1095923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131223-00/?p=2303#comment-1095923">
			December 23, 2013 at 5:27 pm</a>		</div>

		<p>Raymond, I see you add the jump list code in the WM_CREATE. In all my applications, the jump list code goes inside RegisterWindowMessage( L&quot;TaskbarButtonCreated&quot; ) &#8211; from this article: <a href="http://msdn.microsoft.com/en-us/magazine/dd942846.aspx" rel="nofollow" target="_new">msdn.microsoft.com/&#8230;/dd942846.aspx</a></p>
<p>Or is the button already guaranteed to be created when WM_CREATE is sent?</p>
<div class="post">[<em>TaskbarButtonCreated would be a better choice. The focus of the Little Program was showing <span style="text-decoration:underline;">how</span> to create the task, not <span style="text-decoration:underline;">when</span>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1095933">
				<div id="div-comment-1095933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131223-00/?p=2303#comment-1095933">
			December 24, 2013 at 6:33 am</a>		</div>

		<p>[TaskbarButtonCreated would be a better choice. The focus of the Little Program was showing how to create the task, not when. -Raymond]</p>
<p>Sure thing &#8211; just double checking :P</p>
<p>Merry Christmas!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

