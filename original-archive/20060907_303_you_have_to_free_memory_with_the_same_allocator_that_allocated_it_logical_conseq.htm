<html>
<head>
<title>You have to free memory with the same allocator that allocated it: Logical consequences</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You have to free memory with the same allocator that allocated it: Logical consequences</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 7, 2006 / year-entry #304</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>31</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Everybody should know by now that you have to free memory using the same allocator that you used to allocate the memory. If you allocate with new[] then you have to free with delete[]; if you allocate with LocalAlloc then you have to free with LocalFree. Once you've internalized this rule, you can use it...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Everybody should know by now that you have to free memory using the same allocator that you used to allocate the memory. If you allocate with <code>new[]</code> then you have to free with <code>delete[]</code>; if you allocate with <code>LocalAlloc</code> then you have to free with <code>LocalFree</code>.</p>
<p> Once you've internalized this rule, you can use it to draw other logical conclusions. Consider: </p>
<blockquote class="q"><p> When I call the <code>PropertySheet</code> function, who is responsible for freeing the memory that was allocated for the <code>phpage</code> field of the <code>PROPSHEETHEADER</code> structure? </p>
</blockquote>
<p> Well, there are two candidates for this responsibility, either the <code>PropertySheet</code> function or the caller of the <code>PropertySheet</code> function. If the <code>PropertySheet</code> function was responsible for freeing the memory, it would have to make sure to use the same allocator that was used to allocate the <code>phpage</code>. But there is no requirement that that memory use any particular allocator. (In fact, a significant portion of the time, the memory is allocated from the stack, in which case there is no explicit deallocation step.) The <code>PropertySheet</code> function would now be required to be psychic and somehow "know" how the memory should be freed (or whether it should be freed at all). Since psychic powers have yet to be perfected in software, this pretty much closes off this line of reasoning. </p>
<p> The only remaining candidate is the caller of the <code>PropertySheet</code> function. Since that's the code that allocated the memory, it's the one who knows how to free it. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-417473">
				<div id="div-comment-417473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417473">
			September 7, 2006 at 10:22 am</a>		</div>

		<p>And in older windows, not only did the right function have to free the memory, but it had to be called from the same DLL that allocated the memory (because each DLL had its own heap).</p>
<p>Thankfully those days are over.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417483">
				<div id="div-comment-417483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Carlso</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417483">
			September 7, 2006 at 10:24 am</a>		</div>

		<p>Also&#8230; remember that if a DLL has the C run-time statically linked, that DLL can only deallocate memory that was allocated from within it (and memory allocated from within the DLL cannot be deallocated by the main module or other DLLs). &nbsp;A DLL with the CRT statically linked has its own copy of the CRT (of course), so it has its own heap.</p>
<p>(When I say allocate/deallocate here, I&#8217;m referring to new/delete and malloc/free.)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417493">
				<div id="div-comment-417493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ajb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417493">
			September 7, 2006 at 10:25 am</a>		</div>

		<p>I ran into this with FindMimeFromData:<br />
<br /><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/workshop/networking/moniker/reference/functions/findmimefromdata.asp" rel="nofollow">http://msdn.microsoft.com/workshop/networking/moniker/reference/functions/findmimefromdata.asp</a></p>
<p>&#8216;Who&#8217; is easy. &nbsp;By the &#8216;FindMimeFromData isn&#8217;t psychic&#8217; principle, I must free the memory myself. &nbsp;The next question is &#8216;how&#8217;. &nbsp;The shell allocator? LocalFree? GlobalFree? delete? free? &nbsp;Sounds like it is our turn to be psychic.</p>
<p>I&#8217;m sure there is a general principle for which components use which method. &nbsp;I haven&#8217;t found it, though. &nbsp;(Obviously delete and free are wrong, and GlobalFree is a pretty bad guess too&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417513">
				<div id="div-comment-417513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LEJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417513">
			September 7, 2006 at 10:36 am</a>		</div>

		<p>Actually, I had thought ppwzMimeOut&#8230;</p>
<p>LPWSTR* eh?</p>
<p>I would have guessed SysFreeString() (Assuming it&#8217;s a BSTR)&#8230;</p>
<p>But you are right, it isn&#8217;t defined&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417533">
				<div id="div-comment-417533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417533">
			September 7, 2006 at 10:52 am</a>		</div>

		<p>Reminds me of the early C++ strstreams, that allowed you access to a character pointer, but you had to then free the memory it had allocated.</p>
<p>Not that you knew how it had been allocated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417543">
				<div id="div-comment-417543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417543">
			September 7, 2006 at 10:53 am</a>		</div>

		<p>Oh, OK, I see. </p>
<p>Yeah, most MSDN reference pages for functions that allocate memory on the caller&#8217;s behalf have a section on how to free that memory (e.g., the reference for InitializeSecurityContext says that when you pass it a flag of ISC_REQ_ALLOCATE_MEMORY, you have to call FreeSecurityContext to deallocate the memory that it allocated). </p>
<p>Googling for FindMimeFromData reveals this pinvoke.net page: </p>
<p><a href="http://www.pinvoke.net/default.aspx/urlmon.FindMimeFromData" target=_new rel=nofollow rel="nofollow">http://www.pinvoke.net/default.aspx/urlmon.FindMimeFromData</a> </p>
<p>which seems to imply you need to use Marshal.FreeCoTaskMem &#8212; see the &#8220;alternative managed APIs&#8221; section, it&#8217;s not in the main reference. &nbsp;(I&#8217;m not sure which deallocator that uses, though it&#8217;s probably documented somewhere also. &nbsp;I&#8217;d suspect it&#8217;s something to do with COM though.) </p>
<p>Anyway, yes, it should be in the documentation (and I&#8217;ve submitted a request that it be added, using the &#8220;contact&#8221; link at the bottom of that page; we&#8217;ll see what happens with that).</p>
<div class=post>[<i>I just did a quick check. FindMimeFromData appears to use an internal allocator that is not accessible to callers. It looks to me like it&#8217;s impossible to free the data! Oops. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417553">
				<div id="div-comment-417553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417553">
			September 7, 2006 at 10:53 am</a>		</div>

		<p>CoTaskMemFree? It&#8217;s what you have to use for StringFromCLSID and other such APIs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417563">
				<div id="div-comment-417563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417563">
			September 7, 2006 at 11:00 am</a>		</div>

		<p>CoTaskMemFree sounds like it should work, assuming that both (1) the pinvoke.net information is correct, and (2) that&#8217;s what FreeCoTaskMem maps to. &nbsp;(I don&#8217;t see why it wouldn&#8217;t map to that though; the names are uncannily similar).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417573">
				<div id="div-comment-417573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LEJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417573">
			September 7, 2006 at 11:10 am</a>		</div>

		<p>Yup, it does wrap CoTaskMemFree:</p>
<p><a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/system.runtime.interopservices.marshal.freecotaskmem.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/system.runtime.interopservices.marshal.freecotaskmem.aspx</a></p>
<p>&quot;FreeCoTaskMem exposes the CoTaskMemFree COM API function, which frees all bytes so that you can no longer use the memory pointed to by the ptr parameter. For additional information about CoTaskMemFree, see the MSDN library.&quot;</p>
<p>Still, I find it interesting that we have the BSTR functions, but a bunch of the Win32 system calls that return Unicode strings use CoTaskAlloc&#8230;</p>
<p>I guess the win systems team hates BSTRs as most of us app developers&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417663">
				<div id="div-comment-417663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rsclient</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417663">
			September 7, 2006 at 12:37 pm</a>		</div>

		<p>Just so Raymond doesn&#8217;t have to say it :-)</p>
<p>In the past year I&#8217;ve sent dozens of documentation corrections to Microsoft; overwhelmingly I got a quick and polite response (even when I&#8217;ve been wrong). &nbsp;Even better, most answers say that the problem will be fixed.</p>
<p>Everyone: whenever you see issues about who frees memory, but sure to tell Microsoft about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417673">
				<div id="div-comment-417673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anders Munch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417673">
			September 7, 2006 at 12:59 pm</a>		</div>

		<p>Try calling FindMimeFromData twice with the same parameters. &nbsp;I&#8217;m guessing that the two values for ppwzMimeOut will point to the same memory, which means it&#8217;s a deliberate, but limited, memory leak.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417693">
				<div id="div-comment-417693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417693">
			September 7, 2006 at 1:04 pm</a>		</div>

		<blockquote><p>
  &gt; Try calling FindMimeFromData twice with the same parameters. &nbsp;I&#8217;m guessing that the two values for ppwzMimeOut will point to the same memory, which means it&#8217;s a deliberate, but limited, memory leak. </p>
<p>That should be documented as well because (if your theory is true), for example, calling FindMimeFromData twice and then parsing their return value afterwards would bring to invalid results. And, if this is the behaviour, it should also specify if the buffer is in TLS or if FindMimeFromData is not even thread-safe.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-shahar even thread-even depth-1" id="comment-417743">
				<div id="div-comment-417743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Shahar+Prish' rel='external nofollow' class='url'>Shahar Prish</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417743">
			September 7, 2006 at 2:13 pm</a>		</div>

		<p>In some cases, the function description tells you what to use. Consider (practically) any function that returns a BSTR &#8211; It allocates the BSTR, but the caller is the one who needs to free it.</p>
<p>In this case, the common way of doing this is to SysFreeString() the bstr.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417833">
				<div id="div-comment-417833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jamie Gordon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417833">
			September 7, 2006 at 5:11 pm</a>		</div>

		<p>And that&#8217;s why documentation of an API is important.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417503">
				<div id="div-comment-417503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417503">
			September 7, 2006 at 10:32 am</a>		</div>

		<p>ajb: &nbsp;What memory? &nbsp;Presumably you mean the memory pointed to by the pBuffer parameter, right?</p>
<p>Then, the answer to your &quot;how&quot; question is compeletely dependent on how you got the value that you passed for pBuffer: &nbsp;If you called new[] to get it, then delete[] *is* appropriate. &nbsp;If you used the shell allocator, then use the shell allocator&#8217;s free function. &nbsp;If you used LocalAlloc, then use LocalFree.</p>
<p>However, if you got that pointer from other code (so you don&#8217;t know how to free it), then it&#8217;s the resposibility of that other code to free it, not you.</p>
<p>Unless you meant one of the other parameters&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417633">
				<div id="div-comment-417633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.metafoo.co.uk/' rel='external nofollow' class='url'>Richard Smith</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417633">
			September 7, 2006 at 11:33 am</a>		</div>

		<p>&quot;FreeCoTaskMem exposes the CoTaskMemFree COM API function, which frees all bytes so that you can no longer use the memory pointed to by the ptr parameter.&quot;</p>
<p>That&#8217;s quite funny. This implies that the *purpose* of FreeCoTaskMem is to stop you using the memory, rather than to avoid a resource leak or reduce your process&#8217;s heap size&#8230; Surely if you didn&#8217;t want to use the memory any more, you would simply not use the memory any more?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417913">
				<div id="div-comment-417913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417913">
			September 7, 2006 at 9:40 pm</a>		</div>

		<blockquote><p>
  Everybody should know by now that you have to free<br />
  <br />&gt; memory using the same allocator that you used to<br />
  <br />&gt; allocate the memory.</p>
<p>Indeed, I always thought that was obvious too. &nbsp;Then the first time I used WNT&#8211; (VMS being the predecessor of Windows NT), I was floored to learn that it wasn&#8217;t true there. &nbsp;Some designers noticed that users could be served by making memory management APIs cooperate with each other instead of just hoping for every author of executables (exe&#8217;s) and shareable executables (dll&#8217;s) to cooperate with each other.</p>
<p>Thursday, September 07, 2006 12:37 PM by rsclient<br />
  <br />&gt; In the past year I&#8217;ve sent dozens of documentation<br />
  <br />&gt; corrections to Microsoft; overwhelmingly I got a<br />
  <br />&gt; quick and polite response (even when I&#8217;ve been<br />
  <br />&gt; wrong). &nbsp;Even better, most answers say that the<br />
  <br />&gt; problem will be fixed.</p>
<p>You mean they don&#8217;t tell you that the English language web site of MSDN differs vastly from the version sold in North America and therefore you have to get support from Microsoft Japan (by paying a fee to Microsoft Japan) in order to hope that maybe Microsoft Japan will fix the English language MSDN site?</p>
<p>You mean they didn&#8217;t tell you that you purchased the English language web site of MSDN outside of North America and therefore [continues the same as above]?</p>
<p>Maybe around 2 years ago I had a lucky string of responses that were nearly as valid as the ones you received. &nbsp;But after that Microsoft returned to their usual practices.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417763">
				<div id="div-comment-417763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LEJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417763">
			September 7, 2006 at 2:43 pm</a>		</div>

		<p>Oh, I agree, except this function doesn&#8217;t really return a BSTR*, but a LPWSTR*.</p>
<p>And yes I know BSTR is typedef&#8217;ed as LPWSTR, but it ISN&#8217;T the same as an array of wide characters.</p>
<p>(A BSTR is a pointer to an array of wchar&#8217;s, EXCEPT that the 4-bytes behind the pointer is the length of the string &#8211; I had to learn this the hard way when passing L&quot;foo&quot; string literals didn&#8217;t marshal across to an out-of-proc COM component).</p>
<p>My point is that it probably the wrong thing to treat an LPWSTR as a BSTR with regards to using SysFreeString() &#8211; That array of wide chars may not have the 4-byte length indicator behind it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-417993">
				<div id="div-comment-417993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anders Munch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-417993">
			September 8, 2006 at 4:36 am</a>		</div>

		<p>Xan: It&#8217;s perfectly safe, including thread-safe, to return the same pointer twice, when it&#8217;s the same text value you want returned, as long as the caller doesn&#8217;t modify the string.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418013">
				<div id="div-comment-418013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418013">
			September 8, 2006 at 5:25 am</a>		</div>

		<p>LEJ: The Windows developers can&#8217;t hate the counted Unicode strings all that much, considering that&#8217;s the API which underpins the whole thing, from filenames on NTFS to Registry entries :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418023">
				<div id="div-comment-418023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418023">
			September 8, 2006 at 5:47 am</a>		</div>

		<p>It&#8217;s discussions like this that really make you start to see the value of garbage collection in .NET.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418033">
				<div id="div-comment-418033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418033">
			September 8, 2006 at 6:03 am</a>		</div>

		<p>to Anders Munch:</p>
<p>If it returns the same pointer for (and only for) the same input (and output), it&#8217;s thread safe but then clearly &nbsp;you cannot free the memory with any method (unless an ad-hoc one is provided) because the function is clearly referencing some data structure to associate input&lt;-&gt;ptr and freeing the ptr memory would corrupt future calls with the same input.</p>
<p>If, instead, it returns the same ptr for different inputs we have two cases. If the ptr is in thread dependent storage (for example in the TLS) the it&#8217;s thread safe but prone to the double call problem seen in my previous message (an example of this is strtok). If the ptr is always absolutely the same, then it&#8217;s critically thread unsafe because not only the function call has to be enclosed in a critical section (or whatever synch method) but even all the code parsing its output.</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418063">
				<div id="div-comment-418063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418063">
			September 8, 2006 at 6:36 am</a>		</div>

		<p>[I just did a quick check. FindMimeFromData appears to use an internal allocator that is not accessible to callers. It looks to me like it&#8217;s impossible to free the data! Oops. -Raymond]</p>
<p>Oops indeed. Well it looks like Wine has it wrong then because their implementation of this function uses CoTaskMemAlloc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418083">
				<div id="div-comment-418083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418083">
			September 8, 2006 at 7:32 am</a>		</div>

		<p>to Andy C:</p>
<p>How so? Garbage collection is not helpfull to this situation. A single environment wide allocator on the other hand is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418093">
				<div id="div-comment-418093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418093">
			September 8, 2006 at 8:14 am</a>		</div>

		<p>Chris: Full system-wide GC would help because people wouldn&#8217;t have to worry about freeing *anything*, including the various types of strings. &nbsp;I suspect that&#8217;s what Andy meant, anyway.</p>
<p>Anders: But if that&#8217;s what&#8217;s going on, it should also be documented that &quot;the caller must not modify this string&quot;.</p>
<p>Norman: Well, so far, this particular issue hasn&#8217;t resulted in any strange responses like that. &nbsp;I received an email from someone saying they were working to get an answer on how exactly to free that memory. &nbsp;Presumably they will update the docs too, once they find out. &nbsp;(If it&#8217;s even possible for the caller to free it; from Raymond&#8217;s response, it sounds like it isn&#8217;t. &nbsp;Yikes.)</p>
<p>But that&#8217;s probably because on the form I filled out, I chose &quot;United States&quot; as the country. &nbsp;Presumably you chose &quot;Japan&quot;; that might be the difference. &nbsp;Not sure why it would matter, though&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418163">
				<div id="div-comment-418163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418163">
			September 8, 2006 at 10:44 am</a>		</div>

		<p>BryanK: There are resources other than memory. Most of them are scarcer than memory and have more contention.</p>
<p>Locks. File handles (file handles themselves don&#8217;t have much contention, but the underlying files do). Mutexes. etc&#8230; All these still need to be manually freed in good time in the presence of a garbage collector. </p>
<p>Given your posting history, I suspect you are fully aware of this. However, some developers who don&#8217;t know much better who read this, or similar phrases in books extolling the marvels of GC, take phrases like &quot;Full system-wide GC would help because people wouldn&#8217;t have to worry about freeing *anything*&quot; and assume *anything* means *anything*, and not just *any memory*.</p>
<p>And I&#8217;ve found that some such developers, having been told they don&#8217;t need to think about object/resource lifetime and ownership, and never having had much practice at it, find it really hard to do so when they *do* need it.</p>
<p>Now, I&#8217;ll agree that C is a bit of a mess in this regard, and we probably shouldn&#8217;t have to deal with things at quite that level. But there are intermediates beween C&#8217;s malloc()/free() and system-wide GC. RAII for example.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418323">
				<div id="div-comment-418323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418323">
			September 8, 2006 at 4:20 pm</a>		</div>

		<p>Ah, true. &nbsp;Allow me to modify my statement:</p>
<p>&gt; Full system-wide GC would help because people wouldn&#8217;t have to worry about freeing *any* memory, including the various types of strings.</p>
<p>I (obviously) wasn&#8217;t thinking about anything except memory, but you raise a good point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418443">
				<div id="div-comment-418443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418443">
			September 9, 2006 at 8:55 am</a>		</div>

		<p>OK, got a second response from the &#8220;contact us&#8221; address:</p>
<p>&gt; We will not be able to make the immediate<br />
<br />&gt; changes that you have reported because<br />
<br />&gt; the content is acquired by MSDN.</p>
<p>&gt; I have forwarded the issue to the content<br />
<br />&gt; owner of the Web site for review and<br />
<br />&gt; resolution on their end. Please visit the<br />
<br />&gt; site from time to time to check for<br />
<br />&gt; any development.</p>
<p>So I&#8217;m not sure what &#8220;acquired by MSDN&#8221; means, but I suspect it means that &#8220;MSDN owns that page, we can&#8217;t change it&#8221;, based on the second paragraph.</p>
<p>Hopefully somebody that they forwarded this to will be able to at least put a &#8220;no, you can&#8217;t free this memory, and yes, it&#8217;ll leak, but at the moment there&#8217;s nothing we can do about that&#8221; note on that page. &nbsp;Or release an update that uses a standard allocator, and put a note there that &#8220;if the user&#8217;s IE version is above X, pass the returned pointer to CoTaskMemFree [or whatever]. &nbsp;Otherwise, you will have to let it leak.&#8221;</p>
<div CLASS=post>[<i>The first paragraph means that the MSDN team does not personally write every word of documentation on the web site. Some of it is delivered to them by other groups and MSDN merely hosts the content. (For example, they didn&#8217;t write <a HREF="http://msdn.microsoft.com/library/en-us/dnwue/html/welcome.asp" rel="nofollow">the Windows 98/2000 user interface design guide</a>.) The second paragraph means &#8220;We sent your feedback to the people responsible for that page of documentation. Those people will make whatever changes they feel are necessary. Any changes will be reflected in MSDN the net time they deliver a build to us.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418493">
				<div id="div-comment-418493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418493">
			September 9, 2006 at 9:11 pm</a>		</div>

		<p>And not meaning to pick on poor FindMimeFromData, but the return values aren&#8217;t documented correctly either. &nbsp;If you pass in a NULL for the url, and a blank (zero length) string for the data, the result is an E_FAIL &#8212; but the documentation clearly says that the only return values are NOERROR, E_INVALIDARG, and E_OUTOFMEMORY.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-418483">
				<div id="div-comment-418483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-418483">
			September 9, 2006 at 4:54 pm</a>		</div>

		<p>Ah, I get it. &nbsp;I thought the person writing that was not in the MSDN group, and that threw me originally. &nbsp;(I figured they had handed off management of those pages to MSDN or something.) &nbsp;Your version makes a *lot* more sense. &nbsp;:-)</p>
<p>Thanks for the explanation!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-419813">
				<div id="div-comment-419813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msdn.microsoft.com/library/default.asp?url=/library/en-us/shellcc/platform/commctls/listboxes/listboxreference/listboxmessages/lb_addstring.asp' rel='external nofollow' class='url'>LB_ADDSTRING</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060907-04/?p=29823#comment-419813">
			September 13, 2006 at 5:14 pm</a>		</div>

		<p>When sending messages to window controls (ListBox/LB_ADDSTRING), is the caller/application responsible for removing the rows later, or should a programmer rely on deallocation when destroying the control and/or container dialog?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

