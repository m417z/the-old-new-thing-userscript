<html>
<head>
<title>When you share an input queue, you have to wait your turn</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you share an input queue, you have to wait your turn</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 5, 2013 / year-entry #152</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Now that we've had a quick introduction to asynchronous input, let's look at some of the details. Remember, this is a peek under the hood at how the sausage is made. The algorithm described here is not part of the API contract and it can change at any time, as long as it services the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Now that we've had <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/04/10423296.aspx"> a quick introduction to asynchronous input</a>, let's look at some of the details. Remember, <b>this is <a href="http://grammar.about.com/od/qaaboutrhetoric/f/QAmixmetaphor.htm"> a peek under the hood at how the sausage is made</a></b>. The algorithm described here is not part of the API contract and it can change at any time, as long as it services the overall goal of serializing input.</p>
<p> Let's start by looking at how things worked in the 16-bit world. Even though 16-bit Windows didn't use the term <i>thread</i> (since each application was single-threaded), I will still use the term since that makes the transition to the 32-bit world more straightforward. </p>
<p> As a point of terminology, I say that a message <i>belongs to</i> a thread if the message targets a window which belongs to that thread. Equivalently, the thread <i>owns</i> the message. </p>
<p> Now, the goal is to dispatch input messages in chronological order: Only the thread which owns the next input message can retrieve it. All other input must wait their turn to come to the front of the input queue. </p>
<p> In 16-bit Windows, all input gets added to a system-wide input queue, and the basic algorithm used by <code>Peek&shy;Message</code> and <code>Get&shy;Message</code> for retrieving messages from the input queue goes like this. </p>
<ul>
<li>Look at the first message in the input queue:     
<ul>
<li>If the message belongs to some other thread,         then stop. Return no message to the caller.     </li>
<li>Otherwise,         return the message we found.     </li>
</ul>
</li>
<li>If there are no messages in the input queue, then     there is no input.     Return no message. </li>
</ul>
<p> All the rest is tweaking the boundary cases. </p>
<p> For example, suppose there are two input messages in the input queue, message&nbsp;1 for thread&nbsp;A, and message&nbsp;2 for thread&nbsp;B. Thread&nbsp;A calls <code>Get&shy;Message</code>, and the above algorithm returns message&nbsp;1 to thread&nbsp;A, at which point the new "first message" is message&nbsp;2, and if thread&nbsp;B calls <code>Get&shy;Message</code>, it will get message&nbsp;2. </p>
<p> The catch is that according to the above algorithm, thread&nbsp;B can be told about message&nbsp;2 <i>before thread&nbsp;A has finished processing message&nbsp;1</i>. You've introduced a race condition that breaks the rule that input is processed sequentially: Thread&nbsp;B can race ahead of thread&nbsp;A and start processing message&nbsp;2 before thread&nbsp;A can even get started processing message&nbsp;1. </p>
<p> To fix this, we add a new state to the input queue that says "Yea, I just gave somebody an input message, and I'm waiting for that thread to finish processing it before I will hand out another input message." </p>
<ul>
<li><font color="blue">(New!)     If the input queue is waiting for another thread to finish     processing an input message, then stop and return no message.</font> </li>
<li><font color="blue">(New!)     If the input queue is waiting for the current thread to     finish processing an input message,     then mark the input queue as no longer waiting. (We finished processing     it and have come back for more!)</font> </li>
<li>Look at the first message in the input queue:     
<ul>
<li>If the message belongs to some other thread,         then stop. Return no message to the caller.     </li>
<li>Otherwise,         <font color="blue">(New!)         mark the input queue as waiting for the current         thread to finish processing an input message</font>,         and return the message we found.     </li>
</ul>
</li>
<li>If there are no messages in the input queue, then     there is no input. Return no message. </li>
</ul>
<p> Okay, we fixed a race condition. But now there's a new problem: Suppose thread&nbsp;A retrieves an input message (and therefore puts the input queue into the "waiting for thread&nbsp;A" state), and then thread&nbsp;A sends a message to thread&nbsp;B, and thread&nbsp;B wants to display a dialog box or a menu. According to the rules as we have them so far, we would have a deadlock: That <code>Send&shy;Message</code> call will not return to the first thread until the modal UI is complete, but the modal UI cannot complete because the input queue is waiting for thread&nbsp;A to finish processing the input message. </p>
<p> The fix for this special case is that if a thread asks for an input message, and it is handling an inbound <code>Send&shy;Message</code>, then the input queue declares that any in-progress input message has finished processing. One way of interpreting this rule is to say, "If a thread sends a message to another thread, then that implicitly completes input processing." </p>
<ul>
<li><font color="blue">(New!)     If the input queue is waiting for another thread to finish     processing an input message,     and the current thread is processing an inbound sent message,     then mark the input queue as no longer waiting.</font> </li>
<li>If the input queue is waiting for another thread to finish     processing an input message, then stop and return no message. </li>
<li>If the input queue is waiting for the current thread to     finish processing an input message,     then mark the input queue as no longer waiting. </li>
<li>Look at the first message in the input queue:     
<ul>
<li>If the message belongs to some other thread,         then stop. Return no message to the caller.     </li>
<li>Otherwise,         mark the input queue as waiting for the current         thread to finish processing an input message,         and return the message we found.     </li>
</ul>
</li>
<li>If there are no messages in the input queue, then     there is no input. Return no message. </li>
</ul>
<p> Recall that you are allowed to pass a message range filter and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/03/22/10404367.aspx"> a window handle filter</a> to the <code>Peek&shy;Message</code> and <code>Get&shy;Message</code> functions. The above algorithm was developed on the assumption that there was no message retrieval filter. First, let's add the message range filter to the algorithm: </p>
<ul>
<li>If the input queue is waiting for another thread to finish     processing an input message,     and the current thread is processing an inbound sent message,     then mark the input queue as no longer waiting. </li>
<li>If the input queue is waiting for another thread to finish     processing an input message, then stop and return no message. </li>
<li>If the input queue is waiting for the current thread to     finish processing an input message,     then mark the input queue as no longer waiting. </li>
<li>Look at the first message in the input queue     <font color="blue">which satisfies the message range filter (New!)</font>:     
<ul>
<li>If the message belongs to some other thread,         then stop. Return no message to the caller.     </li>
<li>Otherwise,         mark the input queue as waiting for the current         thread to finish processing an input message,         and return the message we found.     </li>
</ul>
</li>
<li>If there are no messages in the input queue     <font color="blue">which satisfy the message range filter (New!)</font>,     then there is no input. Return no message. </li>
</ul>
<p> That wasn't so hard. If you pass a message range filter, then we care only about messages that pass the filter in determining which one is "at the head of the input queue". Without this additional rule, you wouldn't be able to "peek into the future" to see if, for example, there is a mouse message in the input queue sitting behind the keyboard message that is at the front of the input queue. </p>
<p> Adding the window handle filter is a little trickier, because we still want to let input be processed in order (among messages which satisfy the message range filter). </p>
<ul>
<li>If the input queue is waiting for another thread to finish     processing an input message,     and the current thread is processing an inbound sent message,     then mark the input queue as no longer waiting. </li>
<li>If the input queue is waiting for another thread to finish     processing an input message, then stop and return no message. </li>
<li>If the input queue is waiting for the current thread to     finish processing an input message,     then mark the input queue as no longer waiting. </li>
<li>Look at the first message in the input queue which     satisfies the message range filter and     <font color="blue">(New!) either belongs to some other thread     or belongs to the current thread and matches the     window handle filter</font>.     
<ul>
<li>If the message belongs to some other thread,         then stop. Return no message to the caller.     </li>
<li>Otherwise,         mark the input queue as waiting for the current         thread to finish processing an input message,         and return the message we found.     </li>
</ul>
</li>
<li>If no such message exists,     then there is no input. Return no message. </li>
</ul>
<p> In other words, the window handle is used to control which message is ultimately retrieved, but it does not let you deny another thread access to input which matches the message range filter. </p>
<p> Whew, that's how 16-bit Windows dispatched input. </p>
<p> How do we port this to 32-bit Windows and asynchronous input? </p>
<p> First, we give each thread group its own input queue, rather than having a single system-wide input queue. </p>
<p> Second, whenever the above algorithm says <i>the input queue</i>, change it to say <i>the calling thread's input queue</i>. </p>
<p> And that's it! </p>
<p> In the absence of thread attachment, each thread has its own input queue, so most of the above rules have no effect. For example, You will never see a message that belongs to another thread, because messages that belong to other threads go into those other threads' input queues, not yours. You will never find that your input queue is waiting for another thread, because no other threads have access to your input queue. In the case where there is only one thread associated with an input queue, the algorithm simplifies to </p>
<ul>
<li>Return the first message in the input queue     that satisfies both the message range filter     and the window handle filter, if any. </li>
</ul>
<p> It's only if you start attaching threads to each other that you have multiple threads associated with a single input queue, and then all these extra rules start to have an effect. </p>
<p> Next time, we'll explore some of the consequences of synchronous input by writing some poorly-behaving code and observing how the system responds. Along the way, we'll discover an interesting paradox introduced by the above algorithm. </p>
<p> <b>Exercise</b>: The alternative interpretation I gave above does not match the description of the rule, because the rule allows <i>any</i> thread processing an inbound <code>Send&shy;Message</code> to clear the input queue's wait state. Why does the actual rule permit any thread clear the wait state, instead of first checking that the inbound <code>Send&shy;Message</code> is coming from the thread that the input queue is waiting for? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1059983">
				<div id="div-comment-1059983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1059983">
			June 5, 2013 at 7:54 am</a>		</div>

		<p>I&#39;m confused. &nbsp;16-bit Windows was co&ouml;peratively multi-tasked, so how can thread B retrieve the next message if thread A is still busy?</p>
<p>Thread A can yield control by calling GetMessage or SendMessage but in both of these cases the algorithm explicitly unblocks the input queue.</p>
<p>Under what circumstance can thread B be executing yet fail to retrieve an input message because thread A is still busy processing one?</p>
<div class="post">[<em>If you call <code>PeekMessage</code> with a filter that excludes all input, then the &quot;retrieve messages from the input queue&quot; code is never entered and the input queue remains locked. I didn&#39;t make that part clear in the article, sorry. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1059993">
				<div id="div-comment-1059993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1059993">
			June 5, 2013 at 8:12 am</a>		</div>

		<p>@laonianren: When ThreadA explicitly calls Yield() periodically while performing a computing intensive task in order to be nice to the rest of the system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060023">
				<div id="div-comment-1060023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060023">
			June 5, 2013 at 9:47 am</a>		</div>

		<p>&gt; Why does the actual rule permit any thread clear the wait state, instead of first checking that the inbound Send­Message is coming from the thread that the input queue is waiting for? </p>
<p>As long as you have absolutely no follow-up questions, I would answer: &quot;to avoid deadlock?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060033">
				<div id="div-comment-1060033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060033">
			June 5, 2013 at 10:30 am</a>		</div>

		<p>@foo, yes, but a specific deadlock.</p>
<p>If you&#39;re processing a sent message that made you enter a modal dialog or pop-up menu, you have to handle input messages. You can only handle them if PeekMessage or GetMessage get input messages within SendMessage, or more properly, within the not-yet-finished processing of a sent message.</p>
<p>Otherwise, the modal dialog or pop-up menu would not react to input. If you require user action to close a modal dialog or pop-up menu (Esc, the X button, selecting a menu item, a shortcut, etc), then your application would freeze.</p>
<p>However, the OS would not freeze, you&#39;re yielding at PeekMessage or GetMessage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060053">
				<div id="div-comment-1060053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060053">
			June 5, 2013 at 5:40 pm</a>		</div>

		<p>C# 5&#39;s new asynchrony keywords hypothetically make it possible to launch modal dialog boxes without a blocking nested message loop. For instance, you could do something like this:</p>
<p>var result = await MessageBox.ShowAsync(&#8230;);</p>
<p>My only question is, why isn&#39;t the WPF team looking into things like this?</p>
<div class="post">[<em>Not really. The MessageBox class will still presumably have a window procedure, and if a message handler wants to await something, it will have to capture a continuation which includes a foreign stack, which violates the <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/10/10347674.aspx">everybody needs to be in on the joke</a> rule. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060063">
				<div id="div-comment-1060063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bc_5F00_programming_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bc_programming@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060063">
			June 5, 2013 at 10:50 pm</a>		</div>

		<p>Joshua: It is my understanding that async/await is merely a task-based implementation of threading that generates a state machine at compile-time, and that UI operations (such as msgbox) usually are performed on the main thread. At least, that is true for Win32 and Windows Forms, as far as I&#39;m aware. WPF may have changed this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060073">
				<div id="div-comment-1060073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerome</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060073">
			June 6, 2013 at 12:10 am</a>		</div>

		<p>@Michael Burgwin</p>
<p>Joshua&#39;s argument still holds. There&#39;s nothing stopping you implementing your &quot;asynchronous wait&quot; however you like, wrapping Show or ShowDialog, and then when you&#39;re done, switch back to the GUI ExecutionContext (via an abstraction using TaskSchedulers). At the end, it will just end up doing a PostMessage back to the GUI thread of course, but along the way you can be on the ThreadPool, or using your own threads, however you implement it. I&#39;ve done something similar in Winforms.</p>
<p>Not sure how relevant this is though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060083">
				<div id="div-comment-1060083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerome</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060083">
			June 6, 2013 at 12:16 am</a>		</div>

		<p>Oops. Writing nonsense&#8230; ExecutionContext should have been SynchronizationContext</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060093">
				<div id="div-comment-1060093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060093">
			June 6, 2013 at 3:38 am</a>		</div>

		<p>Let&#39;s say that we&#39;re running Win16, and applications A and B use libraries L and M respectively that create windows W and X respectively that handle private messages. Since we know the message is private, both libraries used WM_USERFIRST for the message number. Now if library L tries to peek for WM_USERFIRST in window W, application A will actually yield to application B because library M previously posted a WM_USERFIRST message to window X. If instead the libraries had used registered (i.e. different) window messages then this wouldn&#39;t have happened. Subtle!</p>
<div class="post">[<em>Not sure what you&#39;re getting at here. WM_USER is not an input message so the input queue code never runs. If Library L tries to peek for a message for window W, it may or may not yield to window X (depending on PM_NOYIELD), but the message number is irrelevant. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060103">
				<div id="div-comment-1060103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Allgaeuer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060103">
			June 6, 2013 at 4:22 am</a>		</div>

		<p>I don&#39;t understand why the addition of the message range filter to the algorithm is in consistent with the goal of serializing input.</p>
<p>Suppose we have Thread A and Thread B. They are attached. In the input queue, there is Message 1(Addressed to Thread A and of Type X), Message 2(Addressed to Thread B and of Type X) and Message 3(Headed to Thread A and of Type Y).</p>
<p>Now Thread A asks of a new Message of Type Y.</p>
<p>The algorithm will check Message 1 =&gt; wrong Type. Message 2 =&gt; Wrong address. Message 3 =&gt; BINGO.</p>
<p>Now the algorithm will check if the message belongs to some other thread: Nope!</p>
<p>The message will be returned.</p>
<p>In this case, Thread A bypasses Message 2 for Thread B.</p>
<p>Shouldn&rsquo;t the &quot;either belongs to some other thread or belongs to the current thread and&quot; added already at the point of adding the message range filter to the algorithm?</p>
<div class="post">[<em>This is okay because thread A said, &quot;Ignore messages of type X. I&#39;m interested only in messages of type Y, even if there is a message of type X that is higher priority.&quot; (This happens a lot. For example, peeking ahead to see if the ESC key has been pressed while processing a mouse drag operation. It is the way you &quot;peek into the future&quot;.) The serialization then occurs only among messages of type Y. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060133">
				<div id="div-comment-1060133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060133">
			June 6, 2013 at 8:19 am</a>		</div>

		<p>Hmmm. Who is this other Joshua. I don&#39;t know a way to do it for MessageBox, but for all other modal dialogs, CreateDialogBox can launch them without stacking a second message loop.</p>
<div class="post">[<em>There is no second message loop, but there is a second message procedure and therefore some frames out of your control if you decide to go async inside a message handler. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060203">
				<div id="div-comment-1060203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060203">
			June 6, 2013 at 2:50 pm</a>		</div>

		<p>&gt; Why does the actual rule permit any thread clear the wait state</p>
<p>To avoid a deadlock that involves another thread that in response to the first send message sends a message to a 3rd thread.</p>
<p>Why isn&#39;t this rule revised for 32-bit? Shouldn&#39;t the state change happen when SendMessage is called?</p>
<div class="post">[<em>The case of the forwarded message is the deadlock I had in mind. What if you are sending a message to another thread and that thread does <span style="text-decoration:underline;">not</span> request input? For example, you may simply have sent <code>LB_ADDSTRING</code> to add an item to a list box. You don&#39;t want to clear the input state yet. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060213">
				<div id="div-comment-1060213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060213">
			June 6, 2013 at 3:35 pm</a>		</div>

		<p>&gt; You don&#39;t want to clear the input state yet</p>
<p>But do I want to clear the input state if the sent message was sent by a thread that not related and does not share the same input queue?</p>
<div class="post">[<em>If it doesn&#39;t share the same input queue, then your queue is (probably) not locked, so the unlock is harmless. Yes, there is a small hole here, but the question is whether closing it is worth the complexity and introducing a <a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/09/13/10348876.aspx">silent breaking change</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060243">
				<div id="div-comment-1060243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060243">
			June 7, 2013 at 3:25 am</a>		</div>

		<p>Sorry, I had failed to make the distinction of the input queue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1060463">
				<div id="div-comment-1060463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130605-00/?p=4163#comment-1060463">
			June 10, 2013 at 10:43 am</a>		</div>

		<p>I am missing some info. Can anyone please correct me?</p>
<p>But If one thread includes a message filter and chooses to see only selected messages, Will it block other threads while leaving unprocessed messages? Using this algorithm &quot;Look at the first message in the input queue and If the message belongs to some other thread, then stop. Return no message to the caller.&quot; . The other threads without a message filter always see the unprocessed message that is addressed to the thread which has a filter in the front of the queue.</p>
<div class="post">[<em>This is exactly the subject of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/06/06/10424006.aspx">tomorrow&#39;s article</a>, alluded to at the end of the article. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

