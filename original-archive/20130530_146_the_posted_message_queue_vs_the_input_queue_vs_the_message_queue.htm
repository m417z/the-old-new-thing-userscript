<html>
<head>
<title>The posted message queue vs the input queue vs the message queue</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The posted message queue vs the input queue vs the message queue</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 30, 2013 / year-entry #147</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There are multiple ways of viewing the interaction between posted messages and input messages. MSDN prefers to view posted messages and input messages as part of one giant pool of messages in a message queue, with rules about which ones get processed first. I, on the other hand, prefer to think of posted messages and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
There are multiple ways of viewing the interaction between
posted messages and input messages.
MSDN prefers to view posted messages and input messages as
part of one giant pool of messages in a <i>message queue</i>,
with rules about which ones get processed first.
I, on the other hand, prefer to think of posted messages and
input messages as residing in different queues that are
processed in sequence.
</p>
<p>
By analogy, consider a business with a policy that
loyalty program members are served ahead of
regular customers.
</p>
<p>
One way of organizing this is to form a single queue,
but sorting them so members go to the front.
To call the next person in line, you just take whoever
is at the head of the queue.
</p>
<pre>
AddToQueue(Customer c)
{
 if (c is a member and the queue contains non-members) {
  let n = the first non-member in the queue;
  insert c in front of n;
 } else {
  insert c at the end of the queue;
 }
}

GetNextCustomer()
{
 if (there is somebody in the queue) {
  return the first person in the queue;
 }
 // nobody is waiting
 return null;
}
</pre>
<p>
This approach works fine from a programmatic standpoint,
but people might not like it when they see others cutting
in front of them.
You might therefore choose to create two queues,
one for members and one for non-members:
</p>
<pre>
AddToQueue(Customer c)
{
 if (c is a member) {
  insert c at end of member queue;
 } else {
  insert c at end of non-member queue;
}

GetNextCustomerInLine()
{
 if (there is somebody in the member queue) {
  return the first person in the member queue;
 }
 if (there is somebody in the non-member queue) {
  return the first person in the non-member queue;
 }
 // nobody is waiting
 return null;
}
</pre>
<p>
Note that this second algorithm serves customers in exactly
the same order; the only difference is psychological.
Customers might resent the presence of a <i>members</i> line
since it reminds them that other people are getting
special treatment.
Or this algorithm may not be practical because
you don't have room in your lobby for two lines.
You might choose yet another algorithm,
where you select members
at the time the customers
are served rather than when they arrive.
Everybody forms a single queue, but sometimes
a customer in the middle of the queue gets pulled out
for special treatment.
(Maybe they wear red hats so they are easy to spot.)
</p>
<pre>
AddToQueue(Customer c)
{
 insert c at end of queue;
}

GetNextCustomerInLine()
{
 if (there is a member in the queue) {
  return the first member in the queue;
 }
 // else only non-members remaining
 if (there is somebody in the queue) {
  return the first person in the queue;
 }
 // nobody is waiting
 return null;
}
</pre>
<p>
(Some banks use a variant of this algorithm
to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/06/16/8602158.aspx">
separate potential bank-robbers from the rest of the customers</a>.)
</p>
<p>
From the standpoint of determining
who gets served in what order,
all of these algorithms are equivalent.
One may be more efficient,
one may be easier to understand,
one may be easier to maintain,
one may be easier to debug,
but they all accomplish the same thing.
</p>
<p>
So go ahead and use whatever interpretation of the message queue you like.
They are all equivalent.
</p>
<p>
But the interpretation that I use is the one I presented
<a HREF="https://channel9.msdn.com/Blogs/scobleizer/Raymond-Chen-PDC-05-Talk-Five-Things-Every-Win32-Programmer-Needs-to-Know">
several years ago at the PDC</a>,
where the posted message queue and input queues are
considered separate queues.
I prefer that interpretation because it makes input queue attachment
easier to understand.
</p>
<p>
In the analogy above, I prefer viewing things in terms of the
second algorithm, with separate queues;
MSDN prefers viewing things in terms of the third algorithm,
with a single queue, but with some messages given preferential
treatment over others.
</p>
<p>
But as I've already noted, the outputs of the algorithms are the
same given the same inputs,
so it doesn't matter how they are implemented internally,
since all you can observe as a program are the inputs and outputs.
It's like the
<a HREF="http://en.wikipedia.org/wiki/Interpretations_of_quantum_mechanics">
multiple interpretations of quantum mechanics</a>:
They all attempt to describe the world from a particular viewpoint,
but at the end of the day, the world simply <i>is</i>,
and a description is just a description.
</p>
<p>
<!-- fwdref: Posted messages are processed ahead of input messages, even if they were posted later -->
Next time</a>, we'll explore some consequences of the interaction
between posted messages and input messages.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1059083">
				<div id="div-comment-1059083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213#comment-1059083">
			May 30, 2013 at 7:10 am</a>		</div>

		<p>&quot;It&#39;s like the multiple interpretations of quantum mechanics: They all attempt to describe the world from a particular viewpoint, but at the end of the day, the world simply is, and a description is just a description.&quot;</p>
<p>Dr. Sheldon Cooper would be fit-to-be-tied if he heard that statement.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059113">
				<div id="div-comment-1059113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213#comment-1059113">
			May 30, 2013 at 8:47 am</a>		</div>

		<p>Now, now&#8230; &nbsp;cross thread sent messages have a queue&#8230;</p>
<div class="post">[<em>You are using the term &quot;queue&quot; in its informal sense (&quot;a bunch of things lined up&quot;). I am using it in its technical sense, specifically a &quot;message queue&quot; object. Sent messages are non-queued. They line up but do not go into the message queue. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059133">
				<div id="div-comment-1059133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213#comment-1059133">
			May 30, 2013 at 9:37 am</a>		</div>

		<p>All messages are equal, but some are more equal then others.</p>
<div class="post">[<em>I don&#39;t believe anybody ever claimed that all messages are equal. Indeed, one of the first things you are taught is that paint messages are very low priority. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1059153">
				<div id="div-comment-1059153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213#comment-1059153">
			May 30, 2013 at 10:28 am</a>		</div>

		<p>There is an equivalence relation on the set of messages. There is a well-ordering on the set of these equivalence classes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1059093">
				<div id="div-comment-1059093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213#comment-1059093">
			May 30, 2013 at 7:10 am</a>		</div>

		<p>So all input messages are sent messages? (though not all sent messages are &quot;input messages&quot;). Wait, are we talking about *any* input or just user input?</p>
<div class="post">[<em>Not sure how sent messages got involved. Sent messages are non-queued! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1059163">
				<div id="div-comment-1059163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213#comment-1059163">
			May 30, 2013 at 3:30 pm</a>		</div>

		<p>[Not sure how sent messages got involved. Sent messages are non-queued! -Raymond]</p>
<p>I&#39;d say they are not post and forget, but somewhere should exist a LIST (which is a queue) of &quot;sent&quot; messages for the given thread. It may contain several messages, if several sender threads called SendMessage before the target thread had a chance to fetch them.</p>
<div class="post">[<em>You are confusing the word &quot;queue&quot; in its generic sense (a list of things) and the word &quot;queue&quot; in its window manager specific sense (the message queue which holds posted and input messages). -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059183">
				<div id="div-comment-1059183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213#comment-1059183">
			May 31, 2013 at 9:02 am</a>		</div>

		<p>@640k, Raymond: I guess the Animal Farm reference was too subtle.</p>
<div class="post">[<em>I got the reference, but it doesn&#39;t apply here since nobody ever claimed that all messages were equal. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1060013">
				<div id="div-comment-1060013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130530-00/?p=4213#comment-1060013">
			June 5, 2013 at 8:43 am</a>		</div>

		<p>@Raymond: My bad, I was unaware cross-thread sent messages didn&#39;t use &quot;the&quot; message queue. So, I guess they get their own queue somewhere, separate from both posted and input messages?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

