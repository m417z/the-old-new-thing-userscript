<html>
<head>
<title>Private classes, superclassing, and global subclassing</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Private classes, superclassing, and global subclassing</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 15, 2010 / year-entry #51</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In the suggestion box, A. Skrobov asks why it's impossible to superclass WC_DIALOG, but the example that follows is not actually superclassing. When I register my own class under this atom, and leave NULL in WNDCLASS.hInstance, Windows fills it in for me. Then I have two distinct classes registered: (0,WC_DIALOG) and (hMyInstance,WC_DIALOG), and DialogBox functions...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In the suggestion box,
<a HREF="http://cs.usu.edu.ru/home/skrobov/">A. Skrobov</a>
asks
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#769058">
why it's impossible to superclass <code>WC_DIALOG</code></a>,
but the example that follows is not actually superclassing.
</p>
<blockquote CLASS=q><p>
When I register my own class under this atom,
and leave NULL in WNDCLASS.hInstance, Windows fills it in for me.
Then I have two distinct classes registered:
(0,WC_DIALOG) and (hMyInstance,WC_DIALOG),
and DialogBox functions all use the first one.
</p>
</blockquote>
<p>
This question is a bit confused,
since it says that the goal is to superclass the dialog class,
but registering <code>WC_DIALOG</code> is not superclassing.
</p>
<p>
First, I'll refer everyone to
<a HREF="http://msdn.microsoft.com/en-us/library/ms997565.aspx">
this MSDN article which describes the various ways of
manipulating a window class</a>:
Subclassing, superclassing, and global subclassing.
</p>
<p>
To superclass the dialog class, you retrieve information
about the class by calling <code>GetClassInfo</code>
and then register a <i>new</i> class based on the original
class.
But you don't need to go to all that effort to superclass
the dialog class,
because you already know what you need to know:
The number of extra bytes is <code>DLGWINDOWEXTRA</code>,
and the dialog procedure is <code>DefDlgProc</code>.
You can just
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/11/13/55662.aspx">
register your superclass directly</a>,
as we saw last time.
</p>
<p>
Superclassing is done by registering your custom class under
a different name, and using that class name if you want to obtain
the new behavior.
On the other hand, the question about talks about registering
a class under the same name as the original (namely, <code>WC_DIALOG</code>).
This isn't subclassing, nor is it superclassing,
nor is it even global subclassing.
</p>
<p>
Before continuing the discussion, I'll first address the
issue of leaving <code>NULL</code> in <code>WNDCLASS.hInstance</code>:
The value <code>NULL</code> for the instance handle
is not legal when registering a class.
Each class is associated with a module instance,
and <code>NULL</code> is not a module instance.
The window manager autocorrects this mistake by registering
the class under the module corresponding to the executable.
This is the same special-case behavior you get if you call
<code>GetModuleHandle(NULL)</code>,
so it's not something completely out of the blue.
It looks like A. Skrobov is being confused by
the window manager's attempt to <i>do what you mean</i>.
So much for being helpful.
</p>
<p>
Okay, back to the original problem.
Recall that
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/04/18/409205.aspx">
the <code>HINSTANCE</code> member of the
<code>WNDCLASS</code> structure 
is used to specify the class namespace</a>.
If you register a class against the handle of the current
executable, then in order to create a window with that class,
you need to create it with that same instance handle.
</p>
<p>
Now we can put all the pieces together:
Registering the class with <code>WNDCLASS.hInstance = NULL</code>
is autocorrected to registering it with
<code>WNDCLASS.hInstance = GetModuleHandle(NULL)</code>,
which places the class in the window class namespace of
the current module.
This is a separate class from the system dialog class,
which is registered against <code>GetModuleHandle(TEXT("USER32"))</code>.
The two are registered against different modules,
so they live independent lives.
They just happen to have
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/10/21/9008384.aspx">
the same name</a>.
</p>
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/04/18/409205.aspx">
As we learned a few years ago</a>,
the instance handle you pass to the <code>CreateWindow</code> (or
related) function
is used to look up the window class,
and as we also learned,
the <code>HINSTANCE</code> you pass to the <code>DialogBox</code>
(or related) function
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/03/29/403298.aspx">
is used to look up the template</a>
as well as to
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/03/30/403711.aspx">
create the frame window</a>.
The class name comes from the template, and if you didn't
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/06/21/161375.aspx">
specify an explicit class in your template</a>,
then the dialog manager will use <code>WC_DIALOG</code>.
</p>
<p>
You now have all the pieces necessary to understand what is going on.
When you register the class against your executable's instance,
you need to use that same instance when creating the dialog box
so that your private class is found instead of the global one.
</p>
<p>
To show how this all fits together,
I've written a little program which registers a private class
which happens to have the name <code>WC_DIALOG</code>
and then uses it to create a dialog box.
</p>
<pre>
// scratch.rc
#include &lt;windows.h&gt;

// A pointless dialog box, for illustration only
1 DIALOG 0,0,150,50
STYLE DS_MODALFRAME | DS_SHELLFONT | WS_POPUP | WS_VISIBLE |
    WS_CAPTION | WS_SYSMENU
CAPTION "Pointless"
FONT 8, "MS Shell Dlg"
BEGIN
    DEFPUSHBUTTON "Cancel",IDCANCEL,50,18,50,14
END

// scratch.cpp
#include &lt;windows.h&gt;

LRESULT CALLBACK
SuperDlgProc(HWND hwnd, UINT uiMsg, WPARAM wParam, LPARAM lParam)
{
  switch (uiMsg) {
  case WM_ERASEBKGND:
    return DefWindowProc(hwnd, uiMsg, wParam, lParam);
  }
  return DefDlgProc(hwnd, uiMsg, wParam, lParam);
}

INT_PTR CALLBACK
DlgProc(HWND hwnd, UINT wm, WPARAM wParam, LPARAM lParam)
{
  switch (wm) {
  case WM_INITDIALOG: return TRUE;
  case WM_CLOSE: EndDialog(hwnd, 0); return TRUE;
  }
  return FALSE;
}

int CALLBACK
WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
        LPSTR pszCmdLine, int nShowCmd)
{
  WNDCLASS wc;
  wc.style = 0;
  wc.lpfnWndProc = SuperDlgProc;
  wc.cbClsExtra = 0;
  wc.cbWndExtra = DLGWINDOWEXTRA;
  wc.hInstance = hinst;
  wc.hIcon = NULL;
  wc.hCursor = LoadCursor(NULL, IDC_ARROW);
  wc.hbrBackground = (HBRUSH)(COLOR_INFOBK + 1);
  wc.lpszMenuName = NULL;
  wc.lpszClassName = WC_DIALOG;

  if (RegisterClass(&amp;wc))
    DialogBox(hinst, MAKEINTRESOURCE(1), NULL, DlgProc);

  return 0;
}
</pre>
<p>
The dialog template is itself entirely unremarkable;
it looks like any old dialog template.
</p>
<p>
Our superclass takes the regular dialog box class and
gives it a custom background color,
namely <code>COLOR_INFOBK</code>.
</p>
<p>
The program registers this private version of <code>WC_DIALOG</code>
and creates a dialog box based on it.
Since we passed the same <code>HINSTANCE</code> in the
<code>WNDCLASS.hInstance</code> as we did to
<code>DialogBox</code>,
the lookup of the <code>WC_DIALOG</code> class will
find our private version and use it instead of the global version.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-811473">
				<div id="div-comment-811473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-811473">
			February 15, 2010 at 7:28 am</a>		</div>

		<p>OT, but, this will give you the wrong font on NT6+</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811513">
				<div id="div-comment-811513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M&#233;dinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-811513">
			February 15, 2010 at 8:35 am</a>		</div>

		<p>One thing that bugs me more with dialogs is that you can&#8217;t use EndDialog() in a custom message loop, because I couldn&#8217;t find any documented way to tell if EndDialog() has been called on a dialog box or not: Only DialogBoxParam&#8217;s internal message seems to have access to this data.</p>
<p>And then there&#8217;s ERROR_PRIVATE_DIALOG_INDEX, that shows dialog box still get a &#8220;special&#8221; treatment from the window manager&#8230;</p>
<div class=post>[<i>I agree that the inability to use EndDialog in a custom message loop totally sucks. As for ERROR_PRIVATE_DIALOG_INDEX: Another case of &#8220;no matter what you do someone will call you an idiot.&#8221; (1) Obviously Windows should stop applications from accessing internal data. (2) Windows is idioting for stopping me from accessing internal data. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811623">
				<div id="div-comment-811623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.henning.makholm.net/' rel='external nofollow' class='url'>Henning Makholm</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-811623">
			February 15, 2010 at 11:00 am</a>		</div>

		<p>Apparently &quot;superclassing&quot; is the officially documented terminology, and there is not much to be done about that now, but it sounds really odd to me. What MSDN refers to as &quot;subclassing&quot; and &quot;superclassing&quot; both create what I (with my generic OOP understanding) would describe as a <em>subclass</em>. In the &quot;superclassing&quot; case the new subclass has its own name, whereas &quot;subclassing&quot; creates an anonymous subclass for a single window. And &quot;global subclassing&quot; is effectively a hybrid, creating a subclass that hijacks the name of its superclass.</p>
<p>(Not that this has much to do with the HINSTANCE issues Raymond is speaking about. Sorry).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811713">
				<div id="div-comment-811713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-811713">
			February 15, 2010 at 1:28 pm</a>		</div>

		<p>@Henning Makholm: That&#8217;s the difference between language classes and Window Classes. They&#8217;re not related and use completely different terminology throughout MSDN.</p>
<p>Do keep in mind that the way MSDN refers to classes was written long before todays age of object-oriented programming languages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811873">
				<div id="div-comment-811873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-811873">
			February 16, 2010 at 2:54 am</a>		</div>

		<p>Ah yes, global subclassing was much easier in Windows 3.1, you could just use SetClassLong to overwrite the window procedure (from a DLL loaded as a boot driver, of course.) Obviously I learned very quickly not to let the code crash!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811903">
				<div id="div-comment-811903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-811903">
			February 16, 2010 at 4:59 am</a>		</div>

		<p>@asf:</p>
<p>The question was posed in 2006, NT 6 was released in 2007.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811923">
				<div id="div-comment-811923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hasta la vista</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-811923">
			February 16, 2010 at 6:10 am</a>		</div>

		<p>NT 6 was released in 2006.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811863">
				<div id="div-comment-811863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://xkcd.com/386/' rel='external nofollow' class='url'>Bulletmagnet</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-811863">
			February 16, 2010 at 2:32 am</a>		</div>

		<p>&gt; Do keep in mind that the way MSDN refers to classes was written long before todays age of object-oriented programming languages.</p>
<p>Duty calls.</p>
<p>Windows 1.0 appeared in November 1985. By that time &quot;The C++ Programming Language&quot; was out, along with the first *commercial* C++ compiler.</p>
<p>MSDN started in 1992.</p>
<p>Not to mention that Simula had classes in 1967.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813143">
				<div id="div-comment-813143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M&#233;dinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100215-00/?p=14943#comment-813143">
			February 19, 2010 at 12:31 am</a>		</div>

		<p>[I agree that the inability to use EndDialog in a custom message loop totally sucks. As for ERROR_PRIVATE_DIALOG_INDEX: Another case of &quot;no matter what you do someone will call you an idiot.&quot; (1) Obviously Windows should stop applications from accessing internal data. (2) Windows is idioting for stopping me from accessing internal data. -Raymond]</p>
<p>Actually, I&#8217;m from the &quot;(1)&quot; group, but I&#8217;m puzzled by &quot;special treatments&quot; of things that look like just another normal window class. I mean, if dialog boxes can hide their data, why can&#8217;t user-defined windows do it?</p>
<p>&#8230;And also, the frustrating fact that caused me to try GetWindowLong() in the first place. But we&#8217;re already in agreement about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

