<html>
<head>
<title>C# nested classes are like C++ nested classes, not Java inner classes</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>C# nested classes are like C++ nested classes, not Java inner classes</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 1, 2006 / year-entry #259</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When you declare a class inside another class, the inner class still acts like a regular class. The nesting controls access and visibility, but not behavior. In other words, all the rules you learned about regular classes also apply to nested classes. The this keyword in an instance methods of a class (nested or not)...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When you declare a class inside another class,
the inner class still acts like a regular class.
The nesting controls access and visibility, but not behavior.
In other words, all the rules you learned about regular classes
also apply to nested classes.
</p>
<p>
The <code>this</code> keyword in an instance methods
of a class (nested or not)
can be used to access members of that class and only those members.
It cannot be used to access members
of other classes, at least not directly.
(And the <code>this</code> can be omitted when it would not result in
ambiguity.)
You create an instance of a class (nested or not) by saying
<code>new ClassName(...)</code> where <code>...</code> are the
parameters to an applicable class constructor.
</p>
<p>
Java nested classes behave the same way, but Java also has
the concept of inner classes.
To construct an instance of an inner class in Java, you write
<code>new o.InnerClass(...)</code> where <code>...</code> as before
are the parameters to an applicable class constructor.
The <code>o</code> in front is an expression that evaluates to
an object whose type is that of the outer class.
The inner class can then use the <code>this</code> keyword to
access its own members as well as those of the instance of the
outer class to which it was bound.
</p>
<p>
In C++ and C#, you will have to implement this effect manually.
It's not hard, though:
</p>
<table>
<tr>
<td>
<pre>
// Java
class OuterClass {
 string s;
 // ...
 class InnerClass {

  public InnerClass() { }
  public string GetOuterString() { return s; }
 }
 void SomeFunction() {
  InnerClass i = new this.InnerClass();
  i.GetOuterString();
 }
}
</pre>
</td>
<td>
<pre>
// C#
class OuterClass {
 string s;
 // ...
 class InnerClass {
  OuterClass o_;
  public InnerClass(OuterClass o) { o_ = o; }
  public string GetOuterString() { return o_.s; }
 }
 void SomeFunction() {
  InnerClass i = new InnerClass(this);
  i.GetOuterString();
 }
}
</pre>
</td>
</tr>
</table>
<p>
In Java,
the inner class has a secret <code>this$0</code> member
which remembers the instance of the outer class to which it
was bound.
Creating an instance of an inner class via the
<code>new o.InnerClass(...)</code>
notation is treated as if you had written
<code>new InnerClass(o, ...)</code>,
where <code>o</code> is automatically assigned to the
secret <code>this$0</code> member,
and attempts to access members of the outer class
are automatically treated as if they were written
<code>this$0.outermember</code>.
(This description of how inner classes are implemented
is not just conceptual.
<a HREF="http://www.flex-compiler.csail.mit.edu/jdk/guide/innerclasses/spec/innerclasses.doc2.html">
It is spelled out in the language specification</a>.)
</p>
<p>
The C# equivalent to this code merely makes explicit
the transformation that in Java was implicit.
We give the inner class a reference to the outer class
(here, we called it <code>o_</code>) and pass it as
an explicit parameter to the inner class's constructor.
And when we want to access a member of that outer class,
we use <code>o_</code> to do it.
</p>
<p>
In other words, Java inner classes are syntactic sugar
that is not available to C#.
In C#, you have to do it manually.
</p>
<p>
If you want, you can create your own sugar:
</p>
<pre>
class OuterClass {
 ...
 InnerClass NewInnerClass() {
  return new InnerClass(this);
 }
 void SomeFunction() {
  InnerClass i = this.NewInnerClass();
  i.GetOuterString();
 }
}
</pre>
<p>
Where you would want to write in Java
<code>new o.InnerClass(...)</code>
you can write in C# either
<code>o.NewInnerClass(...)</code>
or
<code>new InnerClass(o, ...)</code>.
Yes, it's just a bunch of moving the word <code>new</code> around.
Like I said, it's just sugar.
</p>
<p>
Now, I'm not saying that the Java way of representing inner classes
isn't useful.
It's a very nice piece of sugar if you access the outer class's
members frequently from the inner class.
However, it's not the type of transformation that makes you say,
"Well, if a language doesn't support this, it's too hard for me
to implement it manually, so I'll just give up."
The conversion is not that complicated and consists
entirely of local changes that can be performed without requiring
a lot of thought.
</p>
<p>
As a postscript,
my colleague
<a HREF="http://blogs.msdn.com/ericlippert/">
Eric Lippert</a>
points out that
JScript.NET does have instance-bound inner classes.
</p>
<pre>
class Outer {
 var s;
 class Inner {
  function GetOuterString() {
   return s;
  }
 }
}

var o = new Outer();
o.s = "hi";
var i = new o.Inner();
i.GetOuterString();
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-405153">
				<div id="div-comment-405153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405153">
			August 1, 2006 at 10:19 am</a>		</div>

		<p>This is cruel.<br />
<br />Most java evangelists tell to their believers that C# has too much syntactic sugar. :D.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405193">
				<div id="div-comment-405193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405193">
			August 1, 2006 at 10:46 am</a>		</div>

		<p>IIRC Java actually supports both types. If you declare your inner class with the static keyword then it will not have any access to the outer class. This saves the implicit reference being added by the compiler.<br />
<br />Inner classes were a necessity in Java due to the event model, your inner class could implement IFocusListener (or whatever) and access the private members of the outer class to perform some action on the event.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405213">
				<div id="div-comment-405213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel Salters</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405213">
			August 1, 2006 at 10:55 am</a>		</div>

		<p>Tom&#8217;s technically right. Inner classes were accidentily left out of the list of members that could access the (outer) classes private parts.<br />
<br />I&#8217;m not sure any compiler actually enforced that rule, and e.g. VC2005 certainly doesn&#8217;t. So in practice this restriction doesn&#8217;t matter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405263">
				<div id="div-comment-405263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405263">
			August 1, 2006 at 11:13 am</a>		</div>

		<p>&quot;In C++, your friends can see your privates&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405303">
				<div id="div-comment-405303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblog.ikvm.net/' rel='external nofollow' class='url'>Jeroen Frijters</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405303">
			August 1, 2006 at 12:02 pm</a>		</div>

		<p>The (bizarre) Java syntax for instantiating an inner class is actually:</p>
<p>this.new InnerClass();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405313">
				<div id="div-comment-405313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405313">
			August 1, 2006 at 12:02 pm</a>		</div>

		<p>The Java syntax is sligthly off, it&#8217;s &quot;object.new InnerClass()&quot;.</p>
<p>In 98% of cases the object is &#8216;this&#8217;, and you can just use &quot;new InnerClass()&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405333">
				<div id="div-comment-405333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JavaSharp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405333">
			August 1, 2006 at 12:18 pm</a>		</div>

		<p>I suspect the reason this is in Java and not in C# is because C# has delegates, whereas Java must rely on inner classes (specifially, &quot;anonymous inner classes&quot;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405353">
				<div id="div-comment-405353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ardvaark.net' rel='external nofollow' class='url'>Brian Vargas</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405353">
			August 1, 2006 at 12:48 pm</a>		</div>

		<p>I agree with JavaSharp&#8217;s statement. &nbsp;The primary reason that inner classes are useful in Java is the lack of delegates.</p>
<p>Also, it&#8217;s interesting to note the awful syntax when you want to do an explicit reference from an inner class method to a containing class member:</p>
<p>Outerclass.this.s = &quot;foo&quot;;</p>
<p>Ugh.</p>
<p>However, it can be necessary when the inner class has a member with the same name as the outer class, and one needs to access the outer class method from the inner class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405373">
				<div id="div-comment-405373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405373">
			August 1, 2006 at 1:16 pm</a>		</div>

		<p>But are not delegates just syntactic sugar? </p>
<p><a href="http://java.sun.com/docs/white/delegates.html" target=_new rel=nofollow rel="nofollow">http://java.sun.com/docs/white/delegates.html</a> </p>
<p>&#8220;We believe bound method references are unnecessary because another design alternative, inner classes, provides equal or superior functionality&#8230;&#8221; <br />&#8220;We believe bound method references are harmful because they detract from the simplicity of the Java programming language&#8230;.&#8221; </p>
<div CLASS=post>[<i>In a sense, everything beyond &#8220;if&#8221; and &#8220;goto&#8221; is syntactic sugar. If you prefer your code unsweetened, nobody&#8217;s forcing you to add sugar. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405383">
				<div id="div-comment-405383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smartass</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405383">
			August 1, 2006 at 1:24 pm</a>		</div>

		<p>AC: Yes, but it&#8217;s not the type of transformation that makes you say, &quot;Well, if a language doesn&#8217;t support this, it&#8217;s too hard for me to implement it manually, so I&#8217;ll just give up.&quot; </p>
<p>:-)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405163">
				<div id="div-comment-405163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405163">
			August 1, 2006 at 10:26 am</a>		</div>

		<p>I&#8217;m glad to see that the inner C# class has access to the outer class&#8217;s private members. &nbsp;The current C++ standard does not allow that type of access without a friend declaration. &nbsp;If memory serves, Pete Becker in a recent issue of Dr. Dobb&#8217;s Journal (I miss you CUJ! *sniff* ) made mention that the latest C++ draft standard will allow for C#-like access semantics. &nbsp;[Note: After searching hard for verification on the C++ Committe Website, I have been unable to corroborate my own statement; it may, in fact, be totally wrong!]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405403">
				<div id="div-comment-405403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.hutteman.com/weblog/' rel='external nofollow' class='url'>Luke Hutteman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405403">
			August 1, 2006 at 5:32 pm</a>		</div>

		<p>&quot;Java inner classes are syntactic sugar&quot;</p>
<p>True: in the exact same way that non-virtual instance methods are syntactic sugar over static methods ;-)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405423">
				<div id="div-comment-405423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NoDotNet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405423">
			August 1, 2006 at 6:58 pm</a>		</div>

		<p>&quot;Not actually a .Net blog&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405433">
				<div id="div-comment-405433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jaysonknight.com/blog/archive/2006/08/01/Working-On-Some-CSModules.aspx' rel='external nofollow' class='url'>protected virtual void jaysonBlog { : Working On Some CSModules</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405433">
			August 1, 2006 at 7:39 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://jaysonknight.com/blog/archive/2006/08/01/Working-On-Some-CSModules.aspx" rel="nofollow">http://jaysonknight.com/blog/archive/2006/08/01/Working-On-Some-CSModules.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-405443">
				<div id="div-comment-405443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405443">
			August 1, 2006 at 8:18 pm</a>		</div>

		<blockquote><p>
  But are not delegates just syntactic sugar?<br />
  <br />&gt;<br />
  <br />&gt; <a rel="nofollow" target="_new" href="http://java.sun.com/docs/white/delegates.html" rel="nofollow">http://java.sun.com/docs/white/delegates.html</a> </p>
<p>They just don&#8217;t like delegates because they&#8217;re not &quot;object-oriented&quot; enough for Java. They seem to think this idea of &quot;everything is an object&quot; adds to the &quot;simplicity&quot; of Java. I love this essay:</p>
<p><a rel="nofollow" target="_new" href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html" rel="nofollow">http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html</a>
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405453">
				<div id="div-comment-405453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">silkio</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405453">
			August 1, 2006 at 9:16 pm</a>		</div>

		<p>lack of delegates aren&#8217;t the reason for inner classes in java.</p>
<p>inner classes are useful for hashmap nodes, enumerators, and any other object who&#8217;s existence is based in the life of the parent object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405473">
				<div id="div-comment-405473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ngiap.com/blogs/stevenyong' rel='external nofollow' class='url'>steven</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405473">
			August 1, 2006 at 10:05 pm</a>		</div>

		<p>any particular reason you chose to refer to third party spec instead of official Sun&#8217;s spec?</p>
<div CLASS=post>[<i>That was the first spec I found. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405533">
				<div id="div-comment-405533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405533">
			August 2, 2006 at 9:36 am</a>		</div>

		<p>You&#8217;ve got a bad google-fu (<a rel="nofollow" target="_new" href="http://ask.metafilter.com/mefi/21557" rel="nofollow">http://ask.metafilter.com/mefi/21557</a>), Raymond :P</p>
<p>First hit for this search: <a rel="nofollow" target="_new" href="http://www.google.no/search?q=java+language+specification" rel="nofollow">http://www.google.no/search?q=java+language+specification</a><br />
<br />.. is <a rel="nofollow" target="_new" href="http://java.sun.com/docs/books/jls/" rel="nofollow">http://java.sun.com/docs/books/jls/</a> :)</p>
<p>Similar with MSN Search, btw.</p>
<div CLASS=post>[<i>Well, yeah, but I wasn&#8217;t searching for the java language specification. I was looking for pages that talked about java inner classes. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405543">
				<div id="div-comment-405543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darren Winsper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405543">
			August 2, 2006 at 9:58 am</a>		</div>

		<p>Is there a reason the Java-like behaviour wasn&#8217;t adopted? &nbsp;After<br />
all, Java does support both methods, it wouldn&#8217;t have been hard for C#<br />
to do the same thing.</p>
<div CLASS=post>[<i><a href="http://blogs.msdn.com/ericgu/archive/2004/01/12/57985.aspx" rel="nofollow">Minus 100 points</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405733">
				<div id="div-comment-405733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405733">
			August 2, 2006 at 9:08 pm</a>		</div>

		<blockquote><p>
  [Minus 100 points. -Raymond]</p>
<p>Perhaps Mr. Winsper will be reassured to know that Mr. Chen wasn&#8217;t rating Mr. Winsper&#8217;s posting ^_^ &nbsp;The link points to the minus 100 points posting that really explains the answer.</p>
<p>(The linked posting doesn&#8217;t entirely explain if the answer is good or not, which of course is the subject of enough debates itself. &nbsp;It does explain what this answer is.)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405923">
				<div id="div-comment-405923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405923">
			August 4, 2006 at 4:36 am</a>		</div>

		<p>Why not get rid of the syntactic sugar that allows you to write i.GetOuterString() and write Outer_Inner_GetOuterString(i) instead ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-405933">
				<div id="div-comment-405933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.ngiap.com/stevenyong/archives/190-Would-you-like-to-have-function-pointer-as-syntactic-sugar.html' rel='external nofollow' class='url'>Steven Yong's Weblog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-405933">
			August 4, 2006 at 5:13 am</a>		</div>

		<p>There&#8217;s been a lot of debates out there recently about how useful is the method reference (or function pointer) in programming or scripting languages such as JavaScript, C# and J++. It looks like Java turns out to be the loser in this debate because it</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-421063">
				<div id="div-comment-421063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.alternateinterior.com/?p=47' rel='external nofollow' class='url'>Implicit Evaluation with PHP &raquo; Blog Archive &raquo; History of the World, Part XII: Wherein Java covers its eyes and proclaims &#8220;You Can&#8217;t See Me!&#8221;</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-421063">
			September 16, 2006 at 1:21 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.alternateinterior.com/?p=47" rel="nofollow">http://www.alternateinterior.com/?p=47</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-568073">
				<div id="div-comment-568073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnet.robertmao.com/2007/11/17/c-nested-classes-vs-java/' rel='external nofollow' class='url'>.Net Learning Curve &raquo; Blog Archive &raquo; C# nested classes (vs Java)</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060801-19/?p=30273#comment-568073">
			November 17, 2007 at 10:44 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://dotnet.robertmao.com/2007/11/17/c-nested-classes-vs-java/" rel="nofollow">http://dotnet.robertmao.com/2007/11/17/c-nested-classes-vs-java/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

