<html>
<head>
<title>DLL forwarding is not the same as delay-loading</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>DLL forwarding is not the same as delay-loading</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 4, 2008 / year-entry #38</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080204-00/?p=23593</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As I noted earlier, when you create a forwarder entry in an export table, the corresponding target DLL is not loaded until somebody links to the forwarder entry. It looks like some people misread this statement to suggest some sort of delay-loading so I'm going to state it again with an example in mind in...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
As I noted earlier,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/19/671238.aspx">
when you
create a forwarder entry in an export table,
the corresponding target DLL is not loaded until somebody
links to the forwarder entry</a>.
It looks like
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/19/671238.aspx#685293">
some people misread this statement to suggest some sort of
delay-loading</a>
so I'm going to state it again with an example in mind in the
hopes of clearing up any confusion
(and risking creating more confusion than I clear up).
</p>
<p>
Suppose that you have a DLL called <code>A.DLL</code> that has a forwarder
entry to <code>B.DLL</code>:
</p>
<pre>
; A.DEF
EXPORTS
  Dial = B.Call
  Pour
  Refill
</pre>
<p>
This specifies that if somebody wants the function <code>Dial</code>
from <code>A.DLL</code>, they will actually get the function
<code>Call</code> from <code>B.DLL</code>.
The delay-load-like behavior is that <code>B.DLL</code> is not
loaded until somebody asks for the <code>Dial</code> function.
</p>
<p>
I will use the notation <code>DLLNAME!FunctionName</code> to mean
"the function <code>FunctionName</code> from the DLL named
<code>DLLNAME</code>."
This is the notation used by the <code>ntsd</code> debugger.
</p>
<p>
Consider this program:
</p>
<pre>
POURME.EXE
 Imports from A.DLL
  Pour
  Refill
</pre>
<p>
The <code>POURME</code> program will not result in <code>B.DLL</code>
being loaded since it never links to <code>A!Dial</code>.
Of course <code>A.DLL</code> will get loaded because the program
wants the functions <code>A!Pour</code> and <code>A!Refill</code>.
This is the "delay-load-like behavior" I mentioned in the original
entry:
If you don't call a function that forwards to <code>B.DLL</code>,
then <code>B.DLL</code> won't get loaded.
</p>
<p>
Alternative, you could have used this method to do the forwarding:
</p>
<pre>
; A2.DEF
EXPORTS
 Dial
 Pour
 Refill

/* a2.c */
// Forward Dial to B!Call
HRESULT Dial()
{
 return Call();
}
</pre>
<p>
This pseudo-forwarder is not a forwarder in the linker sense;
it is an attempt to emulate linker forwarding in code.
Now let's look at the corresponding alternate <code>POURME</code> program:
</p>
<pre>
POURME2.EXE
 Imports from A2.DLL
  Pour
  Refill
</pre>
<p>
Even though <code>POURME2</code> doesn't call <code>A2!Dial</code>,
the file <code>B.DLL</code> will nevertheless be loaded when
<code>POURME2</code> runs because <code>A2.DLL</code> contains
a dependency on <code>B.DLL</code> in its own import table:
</p>
<pre>
; dump of headers of A2.DLL
 Imports from B.DLL
  Call
</pre>
<p>
Loading <code>A2.DLL</code> will cause <code>B.DLL</code> to be
loaded since <code>B.DLL</code> is listed as one of <code>A2</code>'s
dependencies.
</p>
<p>
Commenter bruteforce got off on the wrong foot by calling the above
mechanism a delay-loading feature.
</p>
<blockquote CLASS=q><p>
I tried to take advantage of the delay-loading feature
described above for the forwarder DLLs...
</p>
</blockquote>
<p>
The mechanism is not delay-loading and I never said that it was.
The quasi-delay-load behavior is that a forwarded-to DLL is not
loaded until somebody links to it.
The term delay-loading typically is used to apply to delaying the
load of a module until a function in that module is called.
But import resolution happens at load time, not run time.
</p>
<p>
Commenter bruteforce tried to create a forwarder to a nonexistent
function, and then tried to link to the forwarder DLL.
As we saw above, this triggers an attempt to resolve the forward
by loading the forwarded-to DLL and looking for the function.
If this fails, then the original import request is declared to have
failed.
This all happens as part of the import resolution process.
And as we saw many years ago,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/09/16/54938.aspx">
Win32 fails a module load if an import cannot be resolved</a>.
Since the forwarder cannot be resolved, the load fails.
Import forwarding functionality is completely unsuitable for
functions whose presence you wish to detect and respond to at runtime.
As with all imports, an import failure is considered a fatal error.
If you want delay-loading, then you need to do delay-loading.
Forwarding is not delay-loading.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-ryanbemrose even thread-even depth-1" id="comment-598033">
				<div id="div-comment-598033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Ryan+Bemrose' rel='external nofollow' class='url'>Ryan Bemrose</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080204-00/?p=23593#comment-598033">
			February 4, 2008 at 1:12 pm</a>		</div>

		<p>Just to be clear, does this behavior holds true when using actual delay-loading semantics? &nbsp;Which is to say that you can LoadLibrary(A.dll), but B.dll won&#8217;t be loaded until you try to GetProcAddress(A!ForwardedFunction)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-598273">
				<div id="div-comment-598273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080204-00/?p=23593#comment-598273">
			February 5, 2008 at 3:39 am</a>		</div>

		<p>Sorry in advance for the bad joke, but I cannot resist:</p>
<p>&quot;If bruteforce isn&#8217;t working, then you just aren&#8217;t using enough!&quot; &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599013">
				<div id="div-comment-599013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I still intensely dislike Raymond (and I won't give him my name)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080204-00/?p=23593#comment-599013">
			February 7, 2008 at 2:27 am</a>		</div>

		<p>In your original post you said, &quot;[T]he new DLL is not loaded unless somebody actually asks for the forwarded function from the old DLL.&quot;</p>
<p>That&#8217;s a pretty vague way of describing the actual behavior; at the very least it admits of multiple interpretations. Accusing your readers if misreading something that&#8217;s ambiguous is yet another example of your douche-tastic behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599163">
				<div id="div-comment-599163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080204-00/?p=23593#comment-599163">
			February 7, 2008 at 2:27 pm</a>		</div>

		<p>If you dislike Raymond, then why the heck are you still here? &nbsp;Stop reading, and leave the rest of us to enjoy his blog in peace.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

