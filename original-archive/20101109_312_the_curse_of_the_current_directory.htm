<html>
<head>
<title>The curse of the current directory</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The curse of the current directory</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 9, 2010 / year-entry #313</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>44</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The current directory is both a convenience and a curse. It's a convenience because it saves you a lot of typing and enables the use of relative paths. It's a curse because of everything else. The root cause of this curse is that the Windows NT family of operating systems keeps open a handle to the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The current directory is both a convenience and a curse.
It's a convenience because it saves you a lot of typing
and enables the use of relative paths.
It's a curse because of everything else.
</p>
<p>
The root cause of this curse is that the Windows&nbsp;NT family
of operating systems keeps open a handle to the process's current
directory.
(<b>Pre-emptive Yuhong Bao comment</b>:
The Windows&nbsp;95 series of operating systems, on the other hand,
did not keep the current directory open, which had its own
set of problems not relevant to this discussion.)
</p>
<p>
The primary consequence of this curse is that you can't delete
a directory if it is the current directory of a running process.
I see people stumble upon this all the time without realizing it.
</p>
<blockquote CLASS=q><p>
I am trying to delete a directory&nbsp;X,
but when I try, I get the error message
<code>The process cannot access the file
because it is being used by another process.</code>.
After some hunting around, I found that directory&nbsp;X
is being held open by <code>someapp.exe</code>.
Why the heck is <code>someapp.exe</code> holding my directory open,
and how do I get it to stop?
</p>
</blockquote>
<p>
The value of <code>someapp.exe</code> changes over time,
but the underlying problem is the same.
And when this happens, people tend to blame <code>someapp.exe</code>
for stupidly holding a directory open.
</p>
<p>
Most of the time, <code>someapp.exe</code> is just a victim of the
curse of the current directory.
</p>
<p>
First, let's take the case where <code>someapp.exe</code> is
<code>explorer.exe</code>.
Why is the current directory of Explore set to this directory?
</p>
<p>
Well, one reason might be another curse of the current directory,
namely, that the current directory is a process-wide setting.
If a shell extension decided to call <code>SetCurrentDirectory</code>,
then that changes the current directory for all of Explorer.
And if that shell extension doesn't bother to call
<code>SetCurrentDirectory</code> a second time to reset the current
directory to what it was,
then the current directory gets stuck at the new directory,
and Explorer has now been conned into changing its current directory
permanently to your directory.
</p>
<p>
Mind you, the shell extension might have tried to do the right thing
by setting the current directory back to its original location,
but the attempt might have failed:
</p>
<pre>
GetCurrentDirectory(Old) // returns C:\Previous
SetCurrentDirectory(New) // changes to C:\Victim
.. do stuff ..
SetCurrentDirectory(Old) // changes to C:\Previous - fails?
</pre>
<p>
That second call to <code>SetCurrentDirectory</code> can fail 
if,
while the shell extension is busy doing stuff,
the directory <code>C:\Previous</code> is deleted.
Now the shell extension can't change the directory back,
so it's left stuck at <code>C:\Victim</code>,
and now you can't delete <code>C:\Victim</code> because it
is Explorer's new current directory.
</p>
<p>
(The preferred behavior, by the way, is for the shell extension
not to call <code>SetCurrentDirectory</code> in the first place.
Just operate on full paths.
Since the current directory is a process-wide setting, you can't
be sure that some other thread hasn't called <code>SetCurrentDirectory</code>
out from under you.)
</p>
<p>
Mind you,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2010/05/06/10008132.aspx#10009183">
making the current directory a per-thread concept</a>
doesn't solve this problem completely, because the
current directory for the thread (if such a thing existed)
would still have a handle open until the thread exited.
But if the current directory had been a per-thread concept,
and if the thread were associated with an Explorer window,
then closing that window would at least encourage that thread
to exit and let you unstick the directory.
That is, unless you did a
<code>Terminate&shy;Thread</code>,
in which case the handle would be leaked and your attempt to
release the handle only ensures that it never happens.
(Note to
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/02/14/1676656.aspx">
technology hypochondriacs</a>:
This paragraph was a hypothetical and consequently
will be completely ineffective at solving your problem.)
</p>
<p>
The story isn't over yet, but I'll need to digress for a bit
in order to lay the groundwork for the next stage of the curse.
</p>
<p>
<b>Bonus chatter</b>: Hello, people.
"The story isn't over yet."
Please don't try to guess the next chapter in the story.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (44)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-872523">
				<div id="div-comment-872523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872523">
			November 9, 2010 at 7:40 am</a>		</div>

		<p>A shell extension changing Explorer&#39;s current directory also violates the axiom of &quot;don&#39;t go messing around with resources that aren&#39;t yours&quot;, which you&#39;ve talked about before. &nbsp;The current directory belongs to Explorer. &nbsp;Unless it gives you explicit permission to change it, you should not do so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872533">
				<div id="div-comment-872533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872533">
			November 9, 2010 at 7:48 am</a>		</div>

		<p>Interestingly enough I just upgraded my Cygwin today; they were dealing with current directory quirkiness.</p>
<p>Apparently Linux allows you to delete another process&#39; CWD, or even your own, but of course such attempts fail in Windows and of course Cygwin is striving for more accurate Linux API emulation.</p>
<p>So their fix for this in 1.7.6 was to set the actual CWD to somewhere else, and Cygwin&#39;s APIs would simulate your desired CWD, so then you could delete it and so forth since Windows didn&#39;t consider it your CWD. &nbsp;Of course this broke apps which used Cygwin APIs to change directory and then Windows APIs to work with current directory files (whoops!) so they reverted it in 1.7.7. &nbsp;Guess the solution was worse than the problem in this case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872543">
				<div id="div-comment-872543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872543">
			November 9, 2010 at 7:56 am</a>		</div>

		<p>Another thing that messes with the current directory is GetOpenFileName(). That&#39;s something to keep in mind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872553">
				<div id="div-comment-872553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872553">
			November 9, 2010 at 8:06 am</a>		</div>

		<p>Interesting.</p>
<p>Now I know not to blame Explorer when it&#39;s preventing me from deleting a directory. I&#39;ll just blame Windows itself instead. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872563">
				<div id="div-comment-872563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack B Nimble</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872563">
			November 9, 2010 at 8:13 am</a>		</div>

		<p>At least now I know, so in the future when windows won&#39;t let me delete a folder I&#39;ll just write an app to SetCurrentDirectory to something I won&#39;t delete (such as C:Windows).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872583">
				<div id="div-comment-872583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872583">
			November 9, 2010 at 8:31 am</a>		</div>

		<p>I feel like writing a system-wide hook that causes all handles to be opened with FILE_SHARE_DELETE.</p>
<p>Now if you try to delete something it will go away when the last handle is closed.</p>
<p>Problem solved, mostly. [Acrobat 10 bombs with such a hook loaded]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872623">
				<div id="div-comment-872623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872623">
			November 9, 2010 at 9:10 am</a>		</div>

		<p>Unfortunately, just refraining from (direct use of) SetCurrentDirectory isn&#39;t enough &#8211; I went through the pains of designing a non-recursive filesystem traverser that dealt with full paths, only to find out that FindFirstFile/FindNextFile internally set the current directory.</p>
<p>Also, a reference to a process&#39;s startup directory (no, not the directory of the .exe, but the cwd-at-startup) is held throughout a process&#39; lifetime, which has implications for explorer right-click integration that does the simple registry-key stuff intead of COM fancyness.</p>
<div class="post">[<i>I don&#39;t know who&#39;s changing the current directory, but it&#39;s not FindFirstFile/FindNextFile. I just checked (Windows 7) with write breakpoints on the current directory field and it never got written to. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872633">
				<div id="div-comment-872633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872633">
			November 9, 2010 at 9:30 am</a>		</div>

		<p>@f0dder:</p>
<p>It&#39;s probably not that FFF sets the current directory. It&#39;s that the find handle references the target directory, preventing you from deleting it. If you forget to use FindClose, or wrongly use CloseHandle, then the target directory will still be open.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872643">
				<div id="div-comment-872643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872643">
			November 9, 2010 at 9:33 am</a>		</div>

		<p>@Jack B Nimble:</p>
<p>That would be pointless. A current directory is per-process concept. It&#39;s not returned back to the &quot;parent&quot; process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872653">
				<div id="div-comment-872653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dheeraj</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872653">
			November 9, 2010 at 9:44 am</a>		</div>

		<p>The real WTF is that explorer does not tell you which process is using the directory.</p>
<p>Fortunately I&#39;ve installed Unlocker that helps me out:</p>
<p><a rel="nofollow" target="_new" href="http://ccollomb.free.fr/unlocker" rel="nofollow">ccollomb.free.fr/unlocker</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872663">
				<div id="div-comment-872663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872663">
			November 9, 2010 at 11:03 am</a>		</div>

		<p>The link that Dheeraj has posted comes up as Malware according to ie9 beta.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872673">
				<div id="div-comment-872673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KTC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872673">
			November 9, 2010 at 11:24 am</a>		</div>

		<p>&quot;Report that this site does not contain threats&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872693">
				<div id="div-comment-872693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wizou</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872693">
			November 9, 2010 at 11:37 am</a>		</div>

		<blockquote><p>
  Another thing that messes with the current directory is GetOpenFileName(). That&#39;s something to keep in mind.
</p></blockquote>
<p>Right! Even when you specified OFN_NOCHANGEDIR, the function DO change the current directory while it is running. OFN_NOCHANGEDIR restores the current directory when the function exits.</p>
<p>So this can be a real pain in a multi-thread application!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-zamescurran odd alt thread-odd thread-alt depth-1" id="comment-872703">
				<div id="div-comment-872703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/James+Curran' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872703">
			November 9, 2010 at 11:51 am</a>		</div>

		<p>However, it should be noted that in the C:Previous | C:Victim example, had the shell extension NOT changed the current directory, then you would have been unable to delete C:Previous. &nbsp;In other words, in this case, it did not cause the problem, it merely relocated it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872723">
				<div id="div-comment-872723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil (SM)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872723">
			November 9, 2010 at 12:18 pm</a>		</div>

		<p>Oh c&#39;mon! When does Yuhong Bao ever admit that he knows his post is not relevant to the current discussion?</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2009/03/02/9453317.aspx" rel="nofollow">blogs.msdn.com/&#8230;/9453317.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872733">
				<div id="div-comment-872733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">w9x lover</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872733">
			November 9, 2010 at 12:23 pm</a>		</div>

		<p>You can NOT assume a current directory is undeletable, because, as you said, w9x doesn&#39;t lock it. This is also true on wince, where there&#39;s no current dir at all, impossible to lock any dir by setting it to current. windows 8 could, in theory, revert back to w9x behaviour, thus, the locking is useless because it can&#39;t be trusted. Apps both have to make sure the dir is not locked and locked:</p>
<ol>
<li>
<p>If you delete a dir, you have to make sure it isn&#39;t locked.</p>
</li>
<li>
<p>If you use a current dir, you have to make sure it exists.</p>
</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872743">
				<div id="div-comment-872743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872743">
			November 9, 2010 at 12:39 pm</a>		</div>

		<blockquote><p>
  Just operate on full paths.
</p></blockquote>
<p>I predict an upcoming post addressing path length limitations. ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872753">
				<div id="div-comment-872753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872753">
			November 9, 2010 at 12:52 pm</a>		</div>

		<p>@Dan Bugglin:</p>
<p>In Linux you can delete any file whenever you like. Nothing to do with the current directory. This is great because you don&#39;t have to hunt down the damn program keeping you from disconnecting that USB flash drive you just wrote to, but has its own set of problems.</p>
<p>Lets say your database backup program has a file open (lets say a dump file of 500GB) and you, the admin delete the file from the command line. You then try to copy another older dump file of say 400GB to the same file system and get a no space left on device error. Unfortunately the file system was only 700GB large, because dump files never get larger than 500GB (for some reason). You list the directory and it is empty. Funny situation &#8230; :) Actually happened to me at last job. Until the last program holding the file open closes it, it can still use it as it sees fit and the filesystem obviously can&#39;t really delete it yet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872763">
				<div id="div-comment-872763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S&#248;ren Mors</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872763">
			November 9, 2010 at 1:23 pm</a>		</div>

		<p>Process explorer (<a rel="nofollow" target="_new" href="http://technet.microsoft.com/da-dk/sysinternals/bb795533%28en-us%29.aspx" rel="nofollow">technet.microsoft.com/&#8230;/bb795533%28en-us%29.aspx</a> ) can help you find out which program has a file open, which have helped me many times. It saves the bother of experimenting to find out which process keeps an open handle to a file, and goes straight to showing the culprit (handily, it can also kill the offending process). Wonderfull tool in many ways.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872773">
				<div id="div-comment-872773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Glaurung_quena</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872773">
			November 9, 2010 at 2:10 pm</a>		</div>

		<p>Well, that explains something I&#39;ve run into many times &#8212; I look inside a directory, discover there&#39;s nothing there I need, and then try to delete it only to discover that I can&#39;t because I was recently looking inside it. Very frustrating.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872863">
				<div id="div-comment-872863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872863">
			November 9, 2010 at 10:38 pm</a>		</div>

		<p>@Alex:</p>
<p>Linux/Unix and derivatives implement two-phase deletes. Unlinking a file or directory removes the reference from the hard disk, but the space isn&#39;t reclaimed until the last handle is closed.</p>
<p>Windows can do it as well (or used to &#8211; it supported POSIX after all), but Win32 didn&#39;t want to do this because people expect operations to fail if another process is using it (started from DOS networking &#8211; remember share.exe?).</p>
<p>It&#39;s also why on non-journaled filesystems, if you delete a file and the system halts/reboots before the last program closed the handle, the file comes back during fsck with the inode number as filename. It was deleted, but the space wasn&#39;t reclaimed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872883">
				<div id="div-comment-872883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872883">
			November 9, 2010 at 11:19 pm</a>		</div>

		<p>A system which prevents the user (admin) from overriding buggy apps are flawed.</p>
<div class="post">[<i>Three words: &quot;text file busy.&quot; As with unix, in Windows, the user (admin) can kill the buggy process. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872893">
				<div id="div-comment-872893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872893">
			November 9, 2010 at 11:27 pm</a>		</div>

		<p>Actually it&#39;s not NT as such that keeps the current directory open, but its Win32 layer. And it wouldn&#39;t be a problem if it opened it with FILE_SHARE_DELETE.</p>
<p>@Dan Bugglin:</p>
<p>Cygwin 1.7 before 1.7.5 avoided locking the current working directory with some unholy hackery that directly set the current directory file handle, which was opened with FILE_SHARE_DELETE. Unfortunately though that didn&#39;t work correctly under some circumstances on Vista and up (<a rel="nofollow" target="_new" href="http://cygwin.com/ml/cygwin/2010-08/msg00205.html" rel="nofollow">cygwin.com/&#8230;/msg00205.html</a>). Hence, as you say, 1.7.6 simply set it to an invalid path out of the way instead, thus breaking mixed POSIX/Win32 scenarios. 1.7.7 went back to being a good Windows citizen and just calling SetCurrentDirectory, thus again making it impossible to delete a Cygwin process&#39;s current working directory.</p>
<p>The upcoming Cygwin 1.7.8, however, has an even more evil hack that will once again set the current directory to an unlocked handle without using SetCurrentDirectory, this time hopefully without breaking things on Vista and up (<a rel="nofollow" target="_new" href="http://cygwin.com/ml/cygwin/2010-09/msg00342.html" rel="nofollow">cygwin.com/&#8230;/msg00342.html</a>). Amazingly, the same user contributed the original problem report and the decidedly non-trivial solution.</p>
<div class="post">[<i>Gotta admire the comment &quot;I have no objections to us[ing] undocumented features, if they work.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-872823">
				<div id="div-comment-872823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872823">
			November 9, 2010 at 4:39 pm</a>		</div>

		<p>That&#39;s why I always delete directories *before* looking into them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872843">
				<div id="div-comment-872843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872843">
			November 9, 2010 at 5:13 pm</a>		</div>

		<p>âThe link that Dheeraj has posted comes up as Malware according to ie9 beta.â</p>
<p>Um, yeah, killing file handles is a dangerous act in unskilled hands (I think Raymond wrote about this before). As an administrator, I would be tempted to not only not include it in AppLocker&#39;s whitelist, but also blacklist it. And threaten anyone who considers using it with grievous bodily harm. Just to be sure.</p>
<p>If you absolutely, positively have to get rid of a file handle, close the offending *process* instead.</p>
<p>âThat&#39;s why I always delete directories *before* looking into them.â</p>
<p>Thank God for backups.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872903">
				<div id="div-comment-872903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872903">
			November 10, 2010 at 1:14 am</a>		</div>

		<p>[Re:Raymond] Hacks like that obviously are a last resort if there&#39;s no other way to achieve POSIXness, and the Cygwin devs are only too aware that they might have to be reworked or disabled on future Windows versions.</p>
<p>How about a proper solution to this, for example a flag on executables that causes SetCurrentDirectory not to lock the working directory? Essentially that would allow the programmer to say: I&#39;m fine with my working directory disappearing.</p>
<div class="post">[<i>And then your &quot;weak current directory&quot; app loads a DLL that is not compatible with weak current directories, and then&#8230;? Flagging the executable affects all DLLs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872913">
				<div id="div-comment-872913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872913">
			November 10, 2010 at 1:18 am</a>		</div>

		<p>As for Unlocker &#8211; Neccesary evil as there are still buggy apps (or I use beta version&#8230;)</p>
<p>And it is reported as malware due to used compression (AFAIK author did test notepad.exe with same result)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872923">
				<div id="div-comment-872923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872923">
			November 10, 2010 at 1:19 am</a>		</div>

		<p>&quot;Hacks like that obviously are a last resort if there&#39;s no other way to achieve POSIXness,&quot;</p>
<p>Um&#8230; How about Interix?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872933">
				<div id="div-comment-872933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872933">
			November 10, 2010 at 1:30 am</a>		</div>

		<p>I&#39;ve never understood why Windows stubbornly doesn&#39;t allow deleting open files or directories. What&#39;s the problem?</p>
<p>&quot;Text file busy&quot; is a completely different issue, and only prevents opening for writing. You can always delete the file and rewrite it (i.e. create a new inode with the same (or different) content and bind a name (filename) to the inode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872943">
				<div id="div-comment-872943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stig</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872943">
			November 10, 2010 at 1:39 am</a>		</div>

		<p>Never encountered this problem at all&#8230; you must do some really hacky coding or something&#8230; I do wonder too, why do you want to be able to delete folders that are in use either by applications that are running in them or files in them being opened in a program that does not allow editing the files it has opened?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872953">
				<div id="div-comment-872953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872953">
			November 10, 2010 at 1:41 am</a>		</div>

		<p>@Marquess Interix runs in its own NT subsystem, whereas Cygwin runs within the Win32 subsystem. That&#39;s because Cygwin was originally developed for Win 9x, whereas Interix was always NT-based. The Interix approach means fewer headaches, but the Cygwin one yields more seamless Windows integration and the ability to mix POSIX and Windows APIs in the same program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-872963">
				<div id="div-comment-872963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872963">
			November 10, 2010 at 2:01 am</a>		</div>

		<p>Also look for the windows index services accessing the directory.Process explorer is the best tool in any case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-872853">
				<div id="div-comment-872853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Fuller</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-872853">
			November 9, 2010 at 8:29 pm</a>		</div>

		<p>&gt; close the offending *process* instead.</p>
<p>Processes don&#39;t always release their locked files when they terminate. Especially if they terminated abnormally.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873213">
				<div id="div-comment-873213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-873213">
			November 10, 2010 at 12:26 pm</a>		</div>

		<p>[Gotta admire the comment &quot;I have no objections to us[ing] undocumented features, if they work.&quot; -Raymond]</p>
<p>Unfortunately for everybody involved these guys are placed in a situation of works by undocumented function or doesn&#39;t work. It would be worth Microsoft&#39;s while to throw them a bone by exposing an API or two that does what they need. However that&#39;s not Raymond&#39;s decision.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873273">
				<div id="div-comment-873273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-873273">
			November 10, 2010 at 1:36 pm</a>		</div>

		<p>[And then your &quot;weak current directory&quot; app loads a DLL that is not compatible with weak current directories, and then&#8230;? Flagging the executable affects all DLLs. -Raymond]</p>
<p>Tough luck for me. If I don&#39;t know whether DLL functions I use are fine with a disappeared working directory, I can&#39;t use the flag.</p>
<div class="post">[<i>Then I guess you can&#39;t use COM and the flag at the same time. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873293">
				<div id="div-comment-873293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-873293">
			November 10, 2010 at 2:07 pm</a>		</div>

		<p>Fun fact: all programs must be able to handle their current directory disappearing because network drives may dishonor locks (which turns out to be better than the alternative).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873313">
				<div id="div-comment-873313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Abort, Retry, Fail?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-873313">
			November 10, 2010 at 3:20 pm</a>		</div>

		<p>The grandfather of disappearing media is floppy. It even predates fixed storage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873383">
				<div id="div-comment-873383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-873383">
			November 10, 2010 at 10:10 pm</a>		</div>

		<p>[Then I guess you can&#39;t use COM and the [weak working directory] flag at the same time. -Raymond]</p>
<p>Can you be more specific on that? Under what circumstances would it fail, and how? Also, Joshua and &quot;Abort, Retry, Fail?&quot; make good points regarding network shares and removable media.</p>
<p>In any case, many programs do not use COM, in particular Unix programs running on Cygwin, so that flag would still be very useful indeed and would allow getting rid of the hackery manipulating the current directory handle.</p>
<div class="post">[<i>You CoCreateInstance an object, the server DLL is loaded, and that server DLL assumes strong current directories. And don&#39;t forget that you may be using COM despite not explicitly calling any COM functions. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-873393">
				<div id="div-comment-873393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-873393">
			November 10, 2010 at 10:23 pm</a>		</div>

		<p>Actually, a SetCurrentDirectoryEx() function that allows to specify whether to lock the directory would probably a better choice than the executable flag I&#39;d proposed as it would stop users from setting the flag on programs that are not weak-current-directory-safe.</p>
<div class="post">[<i>This assumes that you control all the code running in your process. (No COM, no plug-ins.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-873523">
				<div id="div-comment-873523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-873523">
			November 11, 2010 at 9:02 am</a>		</div>

		<p>[This assumes that you control all the code running in your process. (No COM, no plug-ins.) -Raymond]</p>
<p>The COM component that calls SetCurrentDirectory is playing with fire. You blogged about this one yourself in using global state to handle a local problem. The COM component that is not disappearing current directory safe is already vulnerable to certain race conditions (proof of this is non-trivial).</p>
<p>I wouldn&#39;t put it past the Cygwin guys to patch ntdll in RAM to fix their current directory problem because if I did they&#39;d probably do it and a better solution is warranted.</p>
<div class="post">{<i>So you also fall into the camp that a program that is not 100% correct deserves to be 0% correct. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-873583">
				<div id="div-comment-873583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-873583">
			November 11, 2010 at 10:17 am</a>		</div>

		<p>@James Fuller:</p>
<p>&quot;Processes don&#39;t always release their locked files when they terminate. Especially if they terminated abnormally.&quot;</p>
<p>Processes don&#39;t release anything, or at least don&#39;t have to. Windows tidies up after them. The kernel closes any handles remaining in the handle table when a process dies, and decrements the referenced object&#39;s reference count accordingly, whether by calling ExitProcess itself or someone else calling TerminateProcess.</p>
<p>However, if another process has a handle open to the process, or a kernel component has added a reference to the object, it won&#39;t die completely and won&#39;t clean up. If you use ShellExecuteEx or CreateProcess, make sure you close the handles when you&#39;re done with them &#8211; particularly note that CreateProcess gives you a thread handle to the process&#39;s main thread, AND a process handle, and you need to close both of them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-874403">
				<div id="div-comment-874403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cgf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-874403">
			November 15, 2010 at 11:48 am</a>		</div>

		<p>[I wouldn&#39;t put it past the Cygwin guys to patch ntdll in RAM to fix their current directory problem because if I did they&#39;d probably do it and a better solution is warranted. &#8211; Joshua]</p>
<p>Actually this is something that the Cygwin guys would never consider. &nbsp;We might use undocumented NT stuff from time to time but we sure aren&#39;t going to modify the behavior of the entire system in order to make Cygwin work better. &nbsp;Especially when &quot;better&quot; in this case is the corner case of deleting the current working directory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-874423">
				<div id="div-comment-874423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-874423">
			November 15, 2010 at 3:08 pm</a>		</div>

		<p>[[SetCurrentDirectoryEx] assumes that you control all the code running in your process. (No COM, no plug-ins.) -Raymond]</p>
<p>Either that, or I&#39;m happy to take the risk. A COM component or plugin that couldn&#39;t deal with a deleted current directory most likely also couldn&#39;t cope with network changes, disk removal, a full disk, security restrictions, or other problems that can befall I/O operations, so there&#39;s not an awful lot more to break here. Crucially, existing programs would be unaffected, and it would be up to program authors to consider whether they want to use that function. Cygwin sure would.</p>
<div class="post">[<i>It&#39;s a calculated risk, but you have to watch out for the &quot;0% or 100%&quot; slippery slope. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-874483">
				<div id="div-comment-874483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Corinna</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101109-00/?p=12323#comment-874483">
			November 16, 2010 at 12:45 am</a>		</div>

		<p>[Raymond, I&#39;m puzzled why you deleted my yesterday&#39;s comment. &nbsp;I didn&#39;t use any offensive language, did I?]</p>
<div class="post">[<i>Discussing undocumented APIs is a good way to get a comment deleted. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

