<html>
<head>
<title>How do I choose between the strong and weak versions of compare-exchange?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I choose between the strong and weak versions of compare-exchange?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 30, 2018 / year-entry #76</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It depends on how bad a spurious failure is for your algorithm.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we left with the question
of
when you should prefer the strong version of compare-exchange
as opposed to the weak version.
</p>
<p>
It comes down to whether spurious failures are acceptable
and how expensive they are.
</p>
<p>
In the example given in the presentation, the cost of
a spurious failure is very low:
</p>
<pre>
    do { new_n-&gt;next = old_h; }
    while (!head.compare_exchange_strong(old_h, new_n));
</pre>
<p>
Recovering from a spurious failure
is just updating a single variable and
retrying the operation.
Removing the nested loop embedded in the strong
compare-exchange simplifies the outer loop.
</p>
<p>
On the other hand, if recovering from the failure requires
a lot of work, such as throwing away an object and constructing
a new one,
then you probably want to pay for the extra retries inside
the strong compare-exchange operation in order to avoid
an expensive recovery iteration.
</p>
<p>
And of course if there is no iteration at all, then
a spurious failure could be fatal.
Consider
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110406-00/?p=11023">
the lock-free singleton construction pattern</a>:
</p>
<pre>
std::atomic&lt;Widget*&gt; cachedWidget;

Widget* GetSingletonWidget()
{
 Widget* widget = cachedWidget;
 if (!widget) {
  widget = new(std::nothrow) Widget();
  if (widget) {
   Widget* previousWidget = nullptr;
   if (!cachedWidget.compare_exchange_strong(previousWidget, widget)) {
    // lost the race - destroy the redundant widget
    delete widget;
    widget = previousWidget;
   }
 }
 return widget;
}
</pre>
<p>
If we were to switch to
<code>compare_</code><code>exchange_</code><code>weak</code>,
then a spurious failure would mean that the value of
<code>cachedWidget</code> was <code>nullptr</code>,
but we failed to exchange anyway.
This means that we would think that
we lost the race against another thread
and return the <code>previousWidget</code>
as the singleton.
But in the case of a spurious failure,
the
<code>previousWidget</code> will still be <code>nullptr</code>,
causing the code to create a Widget, think it was redundant,
throw away the created Widget,
and then return <code>nullptr</code>.
This is bad news for the
<code>Get&shy;Singleton&shy;Widget</code>
function.
</p>
<p>
Choosing between the strong and weak
versions of compare-exchange requires you to understand
what your algorithm does in the case of a spurious failure.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1331555">
				<div id="div-comment-1331555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Giedrius</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331555">
			March 31, 2018 at 4:22 am</a>		</div>

		<p>I fail to understand what would the problem be if you used weak version in a loop ? You would still create and set widget.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1331575">
				<div id="div-comment-1331575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331575">
			March 31, 2018 at 1:12 pm</a>		</div>

		<p>Stupid question: what&#8217;s wrong with just implementing the strong (ie, easy to reason about) version in hardware, and hang the weak version?</p>
<p>I genuinely don&#8217;t see what utility the weak version has. (I&#8217;ve read both posts.) No doubt, at the JVM/.NET/virtual machine level, this is all transparent to the programmer, but it still smells wrong to me.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1331585">
				<div id="div-comment-1331585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331585">
			March 31, 2018 at 2:56 pm</a>		</div>

		<p>The strong version requires a read-modify-write (two memory accesses in one instruction) which a load-store architecture cannot do. So basically you&#8217;re saying &#8220;hang RISC-style processors. All processors should be VAX or Intel.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1331595">
				<div id="div-comment-1331595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331595">
			March 31, 2018 at 9:18 pm</a>		</div>

		<p>I see no trouble designing a RISC instruction for solving the root problem. We take a trick from the ancient days; the instruction locks the bus for a few more instructions. Assuming I remember my college classes well, this sequence would be typical and says that 5 is enough (4 if the RISC processor has conditional jmp hints).</p>
<p>    LDA    r2, [global_variable]     ; LDA assembles to the correct number of MOV instructions &#8230;<br />
again:<br />
    LOD   r4, r2<br />
    ; &#8230; compute new value in r5 preserving r2 and r4<br />
    LOCK<br />
    LOD    r1, r2<br />
    CMP    r1, r4<br />
    JNE     again<br />
    STO    r5, r2    ;STO&#8217;s backwards from everybody else</p>
<p>Of course, issuing LOCK while you have a pending LOCK needs to fault.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1331615">
				<div id="div-comment-1331615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wenbin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331615">
			April 2, 2018 at 2:50 am</a>		</div>

		<p>There is a reason why it is not implemented this way nowadays.<br />
On modern multi-core CPUs, &#8220;locks the bus&#8221; may mean stop all other CPU cores (and other hardware) from access memory, which is inefficient.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1331775">
				<div id="div-comment-1331775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331775">
			April 2, 2018 at 1:45 pm</a>		</div>

		<p>Well that&#8217;s how x86 and x64 are actually doing it. lock inc [memory], lock dec [memory], lock cmxchg register, [memory] &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1331795">
				<div id="div-comment-1331795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331795">
			April 2, 2018 at 1:51 pm</a>		</div>

		<p>Imagine if an interrupt occurs while you hold a lock. You would still need a conditional store instruction, and you&#8217;re back where you started.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1331805">
				<div id="div-comment-1331805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331805">
			April 2, 2018 at 2:47 pm</a>		</div>

		<p>Again, I&#8217;m probably being dense.  Or at least I haven&#8217;t looked back at my CS notes (which, being Cambridge in the 1980s, were heavily biased towards RISC.  You wouldn&#8217;t believe how anti-CISC they were, and of course Intel hybrids didn&#8217;t exist at the time).<br />
It&#8217;s (evidentially) clear to me that the PARISC architecture cannot mandate a &#8220;strong compare-and-swap.&#8221;  But my understanding of, say, SPARC v9 (a poster child for RISC) is that it has what I, naively, would call a <b>strong</b> &#8220;cas&#8221; instruction, involving two registers and one storage location.</p>
<p>Now, precisely <i>how</i> SPARC v9 manages to co-ordinate the two registers involved, which obviously requires some form of lock at whatever level, I don&#8217;t really know.  And precisely how much credence I should place in assertions that &#8220;this is necessary, but not sufficient, for lock-free algorithms,&#8221; I don&#8217;t know either.  I worry about these things sometimes.  I worry about my ignorance, in fact.</p>
<p>But I still wonder whether PARISC avoids a (possibly expensive) hardware implementation of a strong compare-and-swap in favour of just passing the buck to the programmer.  Or at the present day the compiler writer.</p>
<p>Because it seems to me that 99.9999% of software doesn&#8217;t actually <i>need</i> a compare-and-swap at all. (Easy thought experiment: single threading! Outside the kernel, of course.) The thing is, for that vanishingly small percentage &#8230; it&#8217;s quite important to reason about these things.  And whilst you can&#8217;t really make mistakes in hardware that aren&#8217;t already there &#8230; you can guarantee that somebody somewhere is going to make mistakes in software.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1331885">
				<div id="div-comment-1331885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331885">
			April 3, 2018 at 7:29 am</a>		</div>

		<p>They actually built this thing on one ancient processor so I know the answer. The interrupt isn&#8217;t handled until the lock expires.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-4" id="comment-1331825">
				<div id="div-comment-1331825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180330-00/?p=98395#comment-1331825">
			April 2, 2018 at 3:32 pm</a>		</div>

		<p>&gt;Well that’s how x86 and x64 are actually doing it</p>
<p>Except that it&#8217;s not how x86/x64 are doing it. Inter/locked instructions use cache coherency protocol to perform atomic modifications. They only need to atomically modify an L1 cache line which doesn&#8217;t require to lock the whole QPI.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

