<html>
<head>
<title>Don't forget to unregister your window classes when your DLL shuts down dynamically</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t forget to unregister your window classes when your DLL shuts down dynamically</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 20, 2006 / year-entry #320</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If your DLL is unloaded dynamically, you need to make sure you have unregistered your window classes. (You can tell whether the DLL_PROCESS_DETACH is due to a dynamic unload or whether it's due to process termination by checking the lpReserved parameter to your DllMain function.) If you forget to unregister your window classes, all sorts...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If your DLL is unloaded dynamically, you need to make sure you have unregistered your window classes. (You can tell whether the <code>DLL_PROCESS_DETACH</code> is due to a dynamic unload or whether it's due to process termination by checking the <code>lpReserved</code> parameter to your <code>DllMain</code> function.) If you forget to unregister your window classes, all sorts of bad things can happen:</p>
<p> First, if you registered any of those classes as a <code>CS_GLOBALCLASS</code>, then people will still be able to create a window of that class by passing its class name to the <code>CreateWindowEx</code> function (or any other function that leads to <code>CreateWindowEx</code>). Since your DLL is no longer in memory, the moment it receives a window message (like, say, <code>WM_NCCREATE</code>), the process will crash since the window procedure has been unloaded. This manifests itself in crashes with the instruction pointer in no-man's land&mdash;these are typically not easy to debug, and the Windows error reports that are generated by these crashes won't even be assigned to your DLL since your DLL is long gone. </p>
<p> Second, even if you registered the classes as private classes, you are still committing namespace pollution, leaking the class into a namespace that you no longer own. If another DLL gets loaded at the same base address as your DLL (thereby receiving the same <code>HINSTANCE</code>, it inherits this dirty namespace. If that DLL wants to register its own class that happens to have the same name as the class you leaked, its call to <code>RegisterClassEx</code> will fail with <code>ERROR_CLASS_ALREADY_EXISTS</code>. This typically leads to the DLL failing to initialize or (if the problem is not detected) an attempt to create a window of that class creating instead a window of <strong>your leaked class</strong>, with a window procedure whose address now resides somewhere in the middle of this new DLL. This is even worse than an instruction pointer in no-man's land; instead, control goes to a random instruction in the new DLL and probably will manage to execute for a little while before finally keeling over. What's worse, not only does the crash not get reported against your DLL (which is no longer in memory), but it gets erroneously reported against the <strong>new DLL</strong> since it is the new DLL's code that was executing when the crash finally occurred. Congratulations, you just created work for somebody you never met. Those poor victims are going to be scratching their heads trying to figure out how control ended up in the middle of a totally random function with completely nonsense values on the stack and in the registers. </p>
<p> Third, the namespace you pollute can be your own. Suppose you registered a class as a <code>CS_GLOBALCLASS</code>, then your DLL gets unloaded and you forget to unregister the class. Later, your DLL gets reloaded, but due to changes in the virtual address map, it gets loaded at a new address. Now your DLL attempts to re-register its <code>CS_GLOBALCLASS</code> classes, and the call fails with <code>ERROR_CLASS_ALREADY_EXISTS</code>. If you're lucky, your DLL detects the error and fails to load, resulting in missing functionality. If you're unlucky, you fail to detect the error and succeed the load anyway. Then the code that did the <code>LoadLibrary</code> will try to create a window with that class, but instead of getting your DLL's window class (which failed to register), it gets the window class left over by that first copy of your DLL! Since that DLL no longer exists, you get a crash with the instruction pointer off in no-man's land. </p>
<p> This is not a purely theoretical problem. The shell common controls library contained this bug of neglecting to unregister all its classes when dynamically unloaded, and we had to issue a hotfix because the crashes caused by it were actually occurring on real users' machines. Don't be the one responsible for having to issue a hotfix for your product. Unregister your classes if the process is going to continue running after your DLL unloads. Because it's the right thing to do. </p>
<p> (Now, you might notice that this goes against the rule of not calling out to other DLLs during your <code>DLL_PROCESS_ATTACH</code>. The solution for this is to have a "cleanup" function that people must call before calling <code>FreeLibrary</code> on your library to balance the "initialization" function that they had to call to register your control classes. On the other hand, if you failed to plan ahead for this, such as the shell common control did with its <code>InitCommonControlsEx</code> function without a matching <code>UninitCommonControls</code> function, then you have to decide between the lesser of two evils.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-422323">
				<div id="div-comment-422323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-422323">
			September 20, 2006 at 11:04 am</a>		</div>

		<blockquote><p>
  Don&#8217;t be the one responsible for having to issue a hotfix for your product.<br />
  <br />Or you&#8217;ll be sitting all alone in the cafeteria after being shamed (but not named) right here. I feel for your pain, whomever you are.</p>
<p>BTW Is Uninit really the opposite of Init?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-422333">
				<div id="div-comment-422333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-422333">
			September 20, 2006 at 11:04 am</a>		</div>

		<p>Why Windows does not automatically unregisters them when a process terminate?<br />
<br />Sure, the programmer should always ensures he close all resources (memory, handles, etc) he allocate in his program. But shouldn&#8217;t Windows automatically free these resources when the process terminate if the programmer has not done it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-422343">
				<div id="div-comment-422343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-422343">
			September 20, 2006 at 11:10 am</a>		</div>

		<p>Forget my previous comment. I missed the important part: &quot;when the dll is dynamically unloaded&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-422373">
				<div id="div-comment-422373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-422373">
			September 21, 2006 at 1:31 am</a>		</div>

		<p>Thank you very much for every bit you wrote here. &nbsp;Also thanks to whoever permitted the hotfix to be released.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-422433">
				<div id="div-comment-422433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">me</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-422433">
			September 21, 2006 at 3:17 am</a>		</div>

		<p>Citing: &quot;and the Windows error reports that are generated by these crashes won&#8217;t even be assigned to your DLL since your DLL is long gone.&quot;</p>
<p>In kernel mode, WinDBG shows the addresses of drivers already unloaded. If you are testing your own driver (and reloading it some times), you might even so it 6 or 7 times in the list, so you can recognize where the bug comes from.</p>
<p>This info is even written into a crash dump, at least on Win 2000 and higher.</p>
<p>Why can&#8217;t the reporting tools do similar for the user space? Wouldn&#8217;t this make sense for this type of crash?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-422443">
				<div id="div-comment-422443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-422443">
			September 21, 2006 at 3:28 am</a>		</div>

		<p>I had a series of DLLs with different CAxWindow based controls which caused a crash when you unloaded one and then loaded another. This only happened when statically linked with ATL, and didn&#8217;t occur when you dynamically linked with it. Turns out it was a bug in ATL because ATL does not unregister the window classes that it registers, at least when statically linked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-422493">
				<div id="div-comment-422493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.explorewindows.com/Blogs' rel='external nofollow' class='url'>Vipin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-422493">
			September 21, 2006 at 9:24 am</a>		</div>

		<p>Fundamentally, the problem here is with the window proceedure for a custom control class which will be pointing to a dangling memory when the dll gets unloaded. Microsoft could have solved this had their FreeLibrary(&#8230;) api implementation looked up in its internal data structures and figured out these window classes are going to have their wndprocs dangling post dll unload and hence need to kick them off, in fact unregister them. </p>
<p>If you look at the UnregisterClass documentation:-<br />
<br />It says this &quot;Windows 95/98/Me: All window classes registered by a dynamic-link library (DLL) are unregistered when the DLL is unloaded.&quot; </p>
<p>&quot;Windows NT/2000/XP: No window classes registered by a DLL registers are unregistered when the .dll is unloaded. &quot;</p>
<p>What brings in the difference for NT, only Microsoft will know.</p>
<p>Also another problem is let us say I create a window with a class registered a dll, then I have this window alive when I do a FreeLibrary of the dll. We are going to get the same crash, in fact an unavoidable crash.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-422503">
				<div id="div-comment-422503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Eshbabch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-422503">
			September 21, 2006 at 9:26 am</a>		</div>

		<p>I also wondered why there was no way to uninitialize the common controls library and this finally explains it! &nbsp;Somebody forgot to include this functionality.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-424713">
				<div id="div-comment-424713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://tdlevins@comcast.net' rel='external nofollow' class='url'>David Levins</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-424713">
			September 27, 2006 at 10:53 am</a>		</div>

		<p>DLL function call crashed</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-424723">
				<div id="div-comment-424723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://tdlevins@comcast.net' rel='external nofollow' class='url'>David Levins</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-424723">
			September 27, 2006 at 10:54 am</a>		</div>

		<p>DLL function call crashed</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-471443">
				<div id="div-comment-471443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/02/12/1661754.aspx' rel='external nofollow' class='url'>The Old New Thing : Why doesn't the window manager unregister window classes when the owning DLL unloads?</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060920-07/?p=29663#comment-471443">
			February 12, 2007 at 10:00 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/02/12/1661754.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/02/12/1661754.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

