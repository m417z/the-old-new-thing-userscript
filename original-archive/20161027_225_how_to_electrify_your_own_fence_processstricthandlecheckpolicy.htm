<html>
<head>
<title>How to electrify your own fence: ProcessStrictHandleCheckPolicy</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to electrify your own fence: ProcessStrictHandleCheckPolicy</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 27, 2016 / year-entry #226</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Don't touch that; it's a live wire.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
During process termination,
if you try to enter a critical section that is owned by another thread
that has already been terminated,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20100122-00/?p=15193">
the gates are now electrified</a>,
and the kernel simply terminates your process.
</p>
<p>
We saw that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20061211-00/?p=28763">
an invalid handle error</a>
and
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120530-00/?p=7503">
an object type mismatch error</a>
both mean that your critical section is corrupted.
</p>
<p>
And
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120530-00/?p=7503#comment-988353">
as noted in a comment on the last linked article</a>,
there is an option (enabled by default for Store apps)
to electrify the fences and raise a exception if
an application tries to use an invalid handle or an invalid
type of handle (for example,
trying to <code>Set&shy;Event</code> on a semaphore).
Classic Win32 applications can opt into this behavior
by calling
<code>Set&shy;Process&shy;Mitigation&shy;Policy</code>
and asking for the
<code>Process&shy;Strict&shy;Handle&shy;Check&shy;Policy</code>
to be turned on.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1271055">
				<div id="div-comment-1271055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271055">
			October 27, 2016 at 8:42 am</a>		</div>

		<p>Definitely worth turning on while debugging or running tests, and probably worth turning on all the time if you&#8217;re reasonably confident you&#8217;ve found any issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jeremytais odd alt thread-odd thread-alt depth-1" id="comment-1271065">
				<div id="div-comment-1271065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271065">
			October 27, 2016 at 10:30 am</a>		</div>

		<p>Wish I had that for Windows CE.  I just spent forever debugging a problem where someone had written code like:<br />
DWORD waitResult = WaitForMultipleObjects(2, events, false, 12);<br />
if (waitResult == WAIT_OBJECT_0) { return; } // Thread exit signal<br />
if (waitResult == WAIT_TIMEOUT) { throw fooErr; } // Other thread got gummed up.  Punt to higher level error routine then terminate<br />
// If we get here, then we got the signal we are expecting.</p>
<p>Of course, they had forgot to actually create the second event, so WaitForMultipleObjects was returning WAIT_FAILED instead.  Crashing and burning would have been very helpful here.  Especially since most of the time the other thread was extremely fast so normally the WaitForMultipleObjects would just fall through, but very rarely odd &#8220;impossible&#8221; states would show up when this thread would merrily carry on while the other thread was still processing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1271075">
				<div id="div-comment-1271075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271075">
			October 27, 2016 at 11:12 am</a>		</div>

		<p>So how many things that hook in (e.g. antivirus, printer drivers) does this break?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2 parent" id="comment-1271085">
				<div id="div-comment-1271085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271085">
			October 27, 2016 at 11:34 am</a>		</div>

		<p>I would be surprised if it broke anything at all.<br />
This basically terminates the process if things break during process exit, and it would be the same as if you had access violations or even an explicit call to TerminateProcess during process exit.<br />
So basically, when a process goes to cleanly exit, the state becomes a landmine anyway. These things would have to already deal with the fact that during exit, the process could just terminate since access violations and calls to TerminateProcess can happen. So these things must already deal with surprise cleanup regardless.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1271136">
				<div id="div-comment-1271136" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271136">
			October 27, 2016 at 5:35 pm</a>		</div>

		<p>This isn&#8217;t just at shutdown, it&#8217;s any usage of invalid handle at any time (I can&#8217;t seem to reproduce invalid type of handle):<br />
#include<br />
#include<br />
int main() {<br />
    PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY strictHandleCheck = {};<br />
    strictHandleCheck.RaiseExceptionOnInvalidHandleReference = 1;<br />
    strictHandleCheck.HandleExceptionsPermanentlyEnabled = 1;<br />
    if (!SetProcessMitigationPolicy(ProcessStrictHandleCheckPolicy, &amp;strictHandleCheck, sizeof(strictHandleCheck)))<br />
        return 1;<br />
    putchar(&#8216;.&#8217;);<br />
    HANDLE sema = CreateSemaphoreW(nullptr, 1, 1, nullptr);<br />
    if (sema == nullptr)<br />
        return 2;<br />
    putchar(&#8216;.&#8217;);<br />
    SetEvent(sema);<br />
    putchar(&#8216;.&#8217;);<br />
    CloseHandle(sema);<br />
    putchar(&#8216;.&#8217;);<br />
    SetEvent(sema);<br />
    putchar(&#8216;.&#8217;);<br />
    getchar();<br />
}<br />
I get four dot&#8217;s and a crash (after tcalling SetEvent on a closed handle): getchar() never gets called. The first SetEvent does return false, it&#8217;s just not crashing for me.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-4" id="comment-1271255">
				<div id="div-comment-1271255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271255">
			October 28, 2016 at 9:32 am</a>		</div>

		<p>My misunderstanding there, but the thing is, these have to also work for Windows Store apps, especially the user mode graphics driver component. As stated, this is on by default in store apps too.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1271095">
				<div id="div-comment-1271095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271095">
			October 27, 2016 at 11:38 am</a>		</div>

		<p>Also, beginning with Windows Vista, the kernel started doing this kind of thing anyway, as said in the first link. So anything that hooks in must already have to deal with this situation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1271135">
				<div id="div-comment-1271135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271135">
			October 27, 2016 at 5:25 pm</a>		</div>

		<p>&gt;So how many things that hook in (e.g. antivirus, printer drivers) does this break?</p>
<p>I don&#8217;t have an intimate knowledge on what virus checkers or printer drivers do that could be affected by this.</p>
<p>But it&#8217;s a per process flag. So if you enable it and someone injects code into your process that accesses an invalid handle, then you will get killed. But it shouldn&#8217;t affect their process at all, so really it doesn&#8217;t break them. It breaks you.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1271205">
				<div id="div-comment-1271205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271205">
			October 28, 2016 at 7:14 am</a>		</div>

		<p>Right, that&#8217;s what I meant. It breaks their code which, being in your process, breaks you.</p>
<p>So if your code enables this, there might be customers&#8217; machines out there where you crash. So, like LARGEADDRESSAWARE, NXCOMPAT, and HIGHENTROPYVA, your code might be correct, but you crash anyways.</p>
<p>Here&#8217;s one where Windows Presentation Foundation dies that I actually ran into: <a href="https://connect.microsoft.com/VisualStudio/feedback/details/807331/access-violation-in-penimc-dll-for-wpf-apps-built-with-highentropyva-on-windows-8-touchscreens" rel="nofollow">https://connect.microsoft.com/VisualStudio/feedback/details/807331/access-violation-in-penimc-dll-for-wpf-apps-built-with-highentropyva-on-windows-8-touchscreens</a><br />
I don&#8217;t mean to name and shame, just to say that these things can break in a way that means you can&#8217;t use the cool new feature.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1271105">
				<div id="div-comment-1271105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271105">
			October 27, 2016 at 3:20 pm</a>		</div>

		<p>I would never enable ProcessStrictHandleCheckPolicy for anything but debug builds, thanks to the zillions of buggy third-party DLLs that get loaded into our process.  For example, the user-mode parts of graphics drivers, anti-virus software, etc.</p>
<p>I wish &#8220;terminating the process&#8221; weren&#8217;t the only option for a lot of these errors.  We want to have our own crash reporting program, and not have to wait for two weeks while Microsoft processes our crashes via Windows Error Reporting.  Our crash handler handles a lot of things, but can&#8217;t handle anything in kernel32 or ntdll that does a __fastfail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1271325">
				<div id="div-comment-1271325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua A. Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271325">
			October 28, 2016 at 11:41 pm</a>		</div>

		<p>If you didn&#8217;t make these posts, many of us would have never ever learned about this functionality. Is there a page that clearly shows the Win32 API changes in each new Windows 10 version, or does it come down to a diff on dumpbin?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1271375">
				<div id="div-comment-1271375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Diack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271375">
			October 29, 2016 at 11:38 pm</a>		</div>

		<p>Great comment from Joshua. Is there an index page showing new/change APIs for each Windows release? would be incredibly useful</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1271535">
				<div id="div-comment-1271535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161027-00/?p=94586#comment-1271535">
			October 31, 2016 at 11:22 am</a>		</div>

		<p>Also: is there a list of all these strict modes that Windows API users can turn on? I want to catch things like that as soon as possible in the development cycle.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

