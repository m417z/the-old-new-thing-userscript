<html>
<head>
<title>The Itanium's so-called stack</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The Itanium&#8217;s so-called stack</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 21, 2005 / year-entry #100</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last year I alluded to the fact that the Itanium processor has two stacks. The one that is traditionally thought of as "the stack" (and the one that the sp register refers to) is a manually managed block of memory from which a function can carve out space to use during its execution. For example,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last year I alluded to the fact that
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/01/13/58199.aspx">
the Itanium processor has two stacks</a>.
The one that is traditionally thought of as "the stack"
(and the one that the <code>sp</code> register refers to)
is a manually managed block of memory from which a function can
carve out space to use during its execution.
For example, if you declare a local variable like
</p>
<pre>
TCHAR szBuffer[MAX_PATH];
</pre>
<p>
then that buffer will go on "the stack".
</p>
<p>
But not all local variables are on "the stack".
</p>
<p>
Recall that the Itanium has a very large number of registers,
most of which participate in function calls.
Consequently, many local variables are placed into registers
rather than "the stack", and when a function is called,
those registers are "squirreled away" by the processor and
"unsquirreled" when the function returns.
Where do they get squirreled?
Well, the processor can often just squirrel them into other
unused registers through a mechanism I won't go into.
(Those still interested can read Intel's documents on the subject.)
If the processor runs out of squirrel-space, it spills them into
main memory, into a place known as the "register backing store".
This is another stack-like chunk of memory separate from
"the stack".
(Here's
<a HREF="http://blogs.msdn.com/slavao/archive/2005/03/19/399117.aspx">
Slava Oks artistic impression of the layout of the ia64's stacks</a>.)
</p>
<p>
As already noted,
one consequence of this dual-stack model is that a stack buffer
overflow will not corrupt the return address, because the
return address is not kept on "the stack"; rather, it is kept in the
"squirrel space" or (in the case of spillage) in the register
backing store.
</p>
<p>
Another consequence of this dual-stack model is that
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/11/11/255800.aspx#257609">
various tricks to locate the start of the stack</a>
will find only <strong>one</strong> of the stacks.
Missing out on the other stack will cause problems if
you think grovelling "the" stack will find all accessible
object references.
</p>
<p>
The Itanium architecture challenges many assumptions
and is much less forgiving of various
technically-illegal-but-nobody-really-enforced-it-before
shenanigans,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/01/20/60603.aspx">
some of which</a>
I have discussed
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/01/19/60162.aspx">
in earlier entries</a>.
To this list, add the "second stack".</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-272013">
				<div id="div-comment-272013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272013">
			April 21, 2005 at 9:22 am</a>		</div>

		<p>Heh&#8230; I&#8217;m &#8216;honored&#8217;, I guess&#8230; :-)</p>
<p>FWIW, The SIOD interpreter&#8217;s stack walk dates back a long time, and even George Carrette (the original author) spoke to portability problems in his documentation:</p>
<p>&quot;The stack and register marking code used in the mark-and-sweep GC is unlikely to work on machines that do not keep the procedure call stack in main memory at all times. It is assumed that setjmp saves all registers into the jmp_buff data structure. If your target machine architecture is radically different, such as using linked procedure call frames of some kind, not organized as a stack, then it would be best if you could find vendor-supported routines for walking these frames, such as would be utilized by a debugger. The mark_locations procedure can then be invoked multiple times with the proper start and end addresses. </p>
<p>If the stack is not always aligned (in LISP-PTR sense) then the gc_mark_and_sweep procedure will not work properly unless steps are taken to work around the problem. &quot;</p>
<p>I don&#8217;t think any of this is necessarily a bad thing, but it is one of the costs a developer has to pay if they&#8217;re interested in writing or maintaining a garbage collector. You&#8217;d be hard pressed to make such a thing insensitive to platform changes, and still retain decent performance.</p>
<p>Ideally it&#8217;d be possible to use the GC in the CLR, but you have to give up portability by going that route, not to mention worrying about CLR runtime versions, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-272103">
				<div id="div-comment-272103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reuben Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272103">
			April 21, 2005 at 11:37 am</a>		</div>

		<p>&quot;Squirrel-space&quot;&#8230; heh! Cutest tech term I&#8217;ve heard for a while&#8230; it sounds like something Scott Adams would coin.</p>
<p>And how does one &#8216;grovel&#8217; a stack? :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-272113">
				<div id="div-comment-272113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.noveltheory.com' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272113">
			April 21, 2005 at 11:41 am</a>		</div>

		<p>Years ago, I programmed (in Assembler) on the Z-8000 Chip.  Like the 8088 which would power the original IBM PC, the Z-8000 was an evolutary growth from the 8080, but Zilog took it in a very different direction than Intel.</p>
<p>It didn&#8217;t have an SP register at all, partly because registers were numbered, but mostly because you could PUSH/POP off of any register. CALL automatically PUSHed the return address onto R15, but if you wanted to save a register to the stack, you had to specify which register you wanted to use as the SP: </p>
<p>PUSH @R15, R1</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-272193">
				<div id="div-comment-272193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marco</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272193">
			April 21, 2005 at 5:14 pm</a>		</div>

		<p>That&#8217;s pretty cool! The register stack thingy reminds me of the imaginary MMIX architecture that Donald Knuth invented for educational purposes. Any Knuth fans here?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-272243">
				<div id="div-comment-272243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-272243">
			April 22, 2005 at 9:00 am</a>		</div>

		<p>Just about every architecture is more regular and sensible than what Intel has wrought. After hearing some of these features of the Itanium, it&#8217;s no wonder that Microsoft pushed Intel to develop an x86-64 architecture chip. Or at least that&#8217;s my interpretation of things&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-293453">
				<div id="div-comment-293453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/07/29/444912.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050421-28/?p=35833#comment-293453">
			July 29, 2005 at 10:00 am</a>		</div>

		<p>You&#8217;ve run out of address space.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

