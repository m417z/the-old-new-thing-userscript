<html>
<head>
<title>Why does HRESULT begin with H when it's not a handle to anything?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does <CODE>HRESULT</CODE> begin with H when it&#8217;s not a handle to anything?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 17, 2018 / year-entry #13</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Well, it used to be a handle.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I got a piece of email from a colleague
who wondered why
<code>HRESULT</code> begins with an H when it's not a handle to anything.
</p>
<p>
"The question came up at lunch today, and your name soon followed.
We all just assume you have some kind of time traveling phone booth
or Tardis,
and like Bill and Ted of old,
move through geek history to find answers to those long lost questions."
</p>
<p>
As I understand it,
in the old days it really was a handle to an object that contained
rich error information.
For example, if the error was a cascade error,
it had a link to the previous error.
From the result handle, you could extract the full history of the error,
from its origination,
through all the functions that propagated or transformed it,
until it finally reached you.
</p>
<p>
For example, if a function receives
an object from the client,
and that object is expected to support
a particular interface,
but when the function asks the client
for that interface, it gets the error
"interface not supported",
the function would transform the
error to "invalid parameter"
because the client passed an invalid object.
When the caller receives the error object,
it can unpack the error information to determine,
"Okay, I got an <i>invalid parameter</i> error
because the <i>DoSomething</i> method
received an <i>interface not supported</i> error
on its second parameter.
Hey, that's me!"
</p>
<p>
It's great having all of this information available,
but it comes at a cost.
Everybody who generates or propagates or transforms errors
needs to create or update the error object to include
their piece of the puzzle.
And every function call that consumes an error and decides
not to propagate or transform it must remember to free the
error object.
</p>
<p>
In practice, programs don't care about the nature of the error
to this level of detail.
They just want to know that an error occurred,
and get a general idea of what kind of error it was.
There's not much point creating all this detailed error information,
only to have the app throw it away anyway.
</p>
<p>
The COM team decided that the cost/benefit simply wasn't worth it,
so the <code>HRESULT</code> turned into a simple number.
But the name stuck.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1321167">
				<div id="div-comment-1321167" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321167">
			January 17, 2018 at 7:07 am</a>		</div>

		<p>So, I understand that &#8220;in the old days&#8221; refers to the time when COM was being developed, before the first public versions. Interesting story.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1321175">
				<div id="div-comment-1321175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://lanzkron.wordpress.com/' rel='external nofollow' class='url'>Motti</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321175">
			January 17, 2018 at 7:22 am</a>		</div>

		<p><i> &lt; We all just assume you have some kind of time traveling phone booth or Tardis, and like Bill and Ted of old, move through geek history to find answers to those long lost questions. </i></p>
<p><b>tl;dr;</b> they were right</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1321176">
				<div id="div-comment-1321176" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321176">
			January 17, 2018 at 7:37 am</a>		</div>

		<p>While its true that programs don&#8217;t care about the fine details of an error, they often need to answer simple questions such as: &#8220;Can I carry on?&#8221;  or &#8220;Should I retry?&#8221; With Win32 error codes there&#8217;s no reliable generic way to answer questions like this and you end up trying to write a comprehensive switch block to cover all possible error codes. (Then of course you have to set up appropriate conditions to be able to test them all.) What is really unfortunate is that it&#8217;s no better with exceptions. The all too common practice of catching any exception, logging it, and carrying on is frankly terrifying. But there are very few libraries that make it easy to determine which exceptions should be caught, which exceptions represent transient errors, etc, so if you are so good as to catch just the exceptions you think you can handle there&#8217;s always the chance you&#8217;re missing exceptions that you could have handled. I wish that, for example, network libraries would derive all transient exceptions from a common base class so you have only one type to catch for the retry scenario.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1321215">
				<div id="div-comment-1321215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321215">
			January 17, 2018 at 9:38 am</a>		</div>

		<p>MS-DOS did have this capability in the form of <a href="https://blogs.msdn.microsoft.com/oldnewthing/20050117-00/?p=36683">extended error codes</a>, but it was abandoned. The problem as I see it is that some operations may theoretically be retryable at the low level, but in practice they are not at the application level, and vice versa (applications might have fallback options, so failure of a network resource is not automatic failure of an operation, but simply switching to an alternate [non-network] mode.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1321245">
				<div id="div-comment-1321245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321245">
			January 17, 2018 at 2:20 pm</a>		</div>

		<p>&gt;The all too common practice of catching any exception, logging it, and carrying on is frankly terrifying.</p>
<p>Terrifying in college textbooks, not so terrifying in real world code as long as you are mindful. If you&#8217;re one of those guys who just logs &#8220;An exception happened.&#8221; then yes you deserve to be terrified. When you log it all, call stack and line numbers and everything (screw obfuscation I ship with PDBs), you fix so many of them that whatever&#8217;s left has to be dire and then your catch evolves to treat them all as dire again. Of course, this requires active maintenance and total honesty about the code.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1321315">
				<div id="div-comment-1321315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321315">
			January 18, 2018 at 1:19 am</a>		</div>

		<p>Logging all exceptions is great. It is the &#8220;and carry on&#8221; bit that I find terrifying. Terrifying because you now have no idea about your in-memory data structures, and consequently whether the plausible-looking final output is correct or not.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf even depth-4 parent" id="comment-1321325">
				<div id="div-comment-1321325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321325">
			January 18, 2018 at 2:17 am</a>		</div>

		<p>I think this &#8220;carrying on&#8221; bit makes sense in the cases where there are a lot of objects to process in a batch, and each one can independently fail (say, for reasons such as &#8220;this database row mentions a file but said file does not exist&#8221;). It&#8217;s easy to decide that one object failing must not interrupt the batch when all other objects have a chance of success.<br />
However, I like to add a clause &#8220;if the first X objects *all* fail, abort&#8221; to such batches.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1321635">
				<div id="div-comment-1321635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321635">
			January 19, 2018 at 7:48 am</a>		</div>

		<p>Nah, I&#8217;d be worried that the exception could be one I never anticipated and that means the application is now in an unknown state. Carrying on from there is madness. The application could do literally anything with the rest of the objects in the batch (to take your example), including writing garbage to a database, committing random financial transactions, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-4" id="comment-1321695">
				<div id="div-comment-1321695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321695">
			January 19, 2018 at 3:53 pm</a>		</div>

		<p>I too have given up on the &#8220;fail fast&#8221; religion. That&#8217;s fine for your college project, but not a professional app people depend on in the real world. Error messages only tick off most customers &#8211; unless they are tech-savvy they can&#8217;t *do* anything with that information anyways.</p>
<p>I have switched to &#8220;sure, ok, whatever &#8211; go ahead and fail fast, and silently log the failure (inc debug info) to telemetry, and then do *everything* possible to keep stumbling along as if nothing happened. And for goodness sakes don&#8217;t tell the user about it because it will only scare and confuse them!&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1321335">
				<div id="div-comment-1321335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321335">
			January 18, 2018 at 3:40 am</a>		</div>

		<p>No need to ship PDB&#8217;s. Just drop a mini dump (MiniDumpWriteDump) and load it up in a debugger, that conveniently decorates it with symbol information from your local symbol server. A mini dump can include so much more context, up to the full program state, and makes log files look like an archaic remnant straight out of the Stone Age in comparison.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1321535">
				<div id="div-comment-1321535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321535">
			January 18, 2018 at 12:57 pm</a>		</div>

		<p>I do mean PDBs. I want the customer to have everything short of the original source files because I know how desperate it can get in the trenches at 3AM. Competitors seem to die off because they don&#8217;t execute, not because they don&#8217;t know how the algorithms work. Everyone knows how to do all the same things.</p>
<p>Calling them log files might be misleading. I make sure that my latest software can always open a console to pipe out the live trace (nothing dumps text faster than the original Win32 console window). You eventually watch the trace more than the running program and balance out the trace statements so it tells you as much as possible without being overwhelming. Then the debugger ends up becoming a tool of last resort. Or even better, your customers do your &#8220;debugging&#8221; for you because they can and they don&#8217;t want to wait. You watch the trace like you watch the green letters of The Matrix because it &#8220;tells you stuff&#8221;.</p>
<p>You can use StackFrame reflection in an efficient manner to prefix every trace line with the calling method. That&#8217;s when you start to scale as a developer because you no longer have to type them manually, so you can put trace messages everywhere quickly and they are guaranteed correct. You will have to manually unmangle some compiler-generated identifier patterns but it&#8217;s worth it.</p>
<p>You will thank yourself if you make your interop HRESULT into an enum that contains every known value. Then you just hover over the variable and spare the Google/Bing lookup. Also you can dump it to the trace log with ToString(). I think mine has about 7000 values in it by now but I never ever regretted it. Add a [DebuggerDisplay] on the enum that breaks down the severity bit, facility, and code.</p>
<p>Do the same thing with Win32 error codes, then create a GetLastError() wrapper that returns the strong typed code. Add a [DebuggerDisplay] on the enum that calls FormatMessage().</p>
<p>Hope some of this helps someone somewhere. Suffice it to say that I believe unmanaged code is the biggest destroyer of developer time. Right down the toilet.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1321665">
				<div id="div-comment-1321665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321665">
			January 19, 2018 at 10:08 am</a>		</div>

		<p>As someone &#8220;in the trenches&#8221;, thank you for providing PDBs and detailed error/diagnostic info from your software.  It&#8217;s rather refreshing to see such a support-oriented outlook in the design and development phase.  Much of the time, you&#8217;re left with an obscure error code or a meaningless message, and if you&#8217;re lucky, it&#8217;s enumerated on the Web.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1321275">
				<div id="div-comment-1321275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321275">
			January 17, 2018 at 9:08 pm</a>		</div>

		<p>And if software industry as a whole and the greatest minds in it who have given us templates, generics, lambda expressions, async methods, , argument dependent lookup, VES, a boatload of garbage collectors etc. haven&#8217;t been able to come up with an organic approach to error handling then, perhaps it is time to realize we have been chasing the wrong goose for the last 30 years or so.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1321285">
				<div id="div-comment-1321285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321285">
			January 17, 2018 at 9:11 pm</a>		</div>

		<p>I mean exceptions and error codes, not the wonderful ideas I was busy iterating at the start.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1321185">
				<div id="div-comment-1321185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321185">
			January 17, 2018 at 7:37 am</a>		</div>

		<p>And there is also the IErrorInfo interface, if you want a little more detail. The error message is nice. I wonder when that was added.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1321216">
				<div id="div-comment-1321216" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321216">
			January 17, 2018 at 12:30 pm</a>		</div>

		<p>OK, it seems I see now how the concept of dotnet InnerException property was born.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1321225">
				<div id="div-comment-1321225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321225">
			January 17, 2018 at 12:57 pm</a>		</div>

		<p>So everything they put into .NET Exception was more or less everything they originally wanted to do with HRESULT? Win32 Historian could be a real job soon.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1321226">
				<div id="div-comment-1321226" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321226">
			January 17, 2018 at 1:04 pm</a>		</div>

		<p>The &#8220;they&#8221; were likely to be different people. Anders Hejlsberg left Delphi (where he was head architect) and joined Microsoft where he originally created J++ and then .Net.</p>
<p>.net has nested exceptions because java has nested exceptions.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1321295">
				<div id="div-comment-1321295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321295">
			January 17, 2018 at 9:54 pm</a>		</div>

		<p>Well, whoever is in charge of Win32Exception now needs to remember to set the HResult property. They go so well together!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1321525">
				<div id="div-comment-1321525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321525">
			January 18, 2018 at 11:34 am</a>		</div>

		<p>It&#8217;s interesting that nobody has ever defined (to my knowledge) what a &#8220;handle&#8221; might be.</p>
<p>Now, you could take a rather prescriptive view on this, and insist that only &#8220;resources&#8221; have handles.  At which point you have to define what a &#8220;resource&#8221; is.  So maybe you want a &#8220;handle&#8221; to be shared, in some as yet undefined way.  In which case you have to define what &#8220;shared&#8221; means.  I suppose you could further refine this by now utterly useless concept to define a handle as &#8220;a kernel thingie, which for the sake of argument we are going to call an object, although it really doesn&#8217;t have to be anything that anybody would think of as an object, and depending upon the version of the OS this kernel thingie might be in kernel space or it might be in user space &#8230; oh, but it has to refer to a resource.  Whatever that is.  And it might or might not be shared.  Whatever that means.&#8221;</p>
<p>Me, I like to think of it as an opaque value which fills the requisite number of bits and might not be a value, but might actually be a pointer.  In an opaque sort of way.  It&#8217;s difficult to care much, either way.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1321805">
				<div id="div-comment-1321805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zenith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321805">
			January 22, 2018 at 7:38 am</a>		</div>

		<p>As I recall from another Old New Thing article, a handle is an internal data structure that they basically keep secret/opaque so that nobody relies on its feature set.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1321645">
				<div id="div-comment-1321645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miroslav Martinoviƒç</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180117-00/?p=97815#comment-1321645">
			January 19, 2018 at 8:38 am</a>		</div>

		<p>&#8230; and then exceptions came along which decided that it&#8217;s nice to have this error stacking functionality after all&#8230;<br />
it&#8217;s all just repeating circles</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

