<html>
<head>
<title>Modality, part 3: The WM_QUIT message</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Modality, part 3: The WM_QUIT message</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 22, 2005 / year-entry #44</td></tr>
<tr><td><b>Tags:</b></td><td>code;modality</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">After our two quick introductions to modality, we're now going to dig in a little deeper. The trick with modality is that when you call a modal function, the responsibility of message dispatch is handled by that function rather than by your main program. Consequently, if you have customized your main program's message pump, those...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
After
<a href="http://blogs.msdn.com/oldnewthing/archive/2005/02/18/376080.aspx">
our two quick introductions</a>
<a href="http://blogs.msdn.com/oldnewthing/archive/2005/02/21/377337.aspx">
to modality</a>,
we're now going to dig in a little deeper.
</p>
<p>
The trick with modality is that when you call a modal function,
the responsibility of message dispatch is handled by that function
rather than by your main program.  Consequently, if you have
customized your main program's message pump, those customizations
are lost once you lose control to a modal loop.
</p>
<p>
The other important thing about modality is that a
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/Windows/WindowReference/WindowMessages/WM_QUIT.asp">
<code>WM_QUIT</code> message</a> always breaks the modal loop.
Remember this in your own modal loops!  If ever
you call
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/MessagesandMessageQueues/MessagesandMessageQueuesReference/MessagesandMessageQueuesFunctions/PeekMessage.asp">
the <code>PeekMessage</code> function</a>
or
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/MessagesandMessageQueues/MessagesandMessageQueuesReference/MessagesandMessageQueuesFunctions/GetMessage.asp">
The [typo fixed 10:30am] <code>GetMessage</code> function</a> and get
a <code>WM_QUIT</code>
message, you must not only exit your modal loop, but
you must also re-generate the <code>WM_QUIT</code> message
(via
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/MessagesandMessageQueues/MessagesandMessageQueuesReference/MessagesandMessageQueuesFunctions/PostQuitMessage.asp">
the <code>PostQuitMessage</code> message</a>)
so the next outer layer will see the <code>WM_QUIT</code> message
and do its cleanup as well.  If you fail to propagate
the message, the next outer layer will not know that it
needs to quit, and the program will seem to "get stuck"
in its shutdown code, forcing the user to
terminate the process the hard way.
</p>
<p>
In a later series, we'll see how this convention surrounding
the <code>WM_QUIT</code> message is useful.
But for now, here's
the basic idea of how your modal loops should re-post
the quit message to the next outer layer.
</p>
<pre>
BOOL WaitForSomething(void)
{
  MSG msg;
  BOOL fResult = TRUE; // assume it worked
  while (!SomethingFinished()) {
    if (GetMessage(&amp;msg, NULL, 0, 0)) {
      TranslateMessage(&amp;msg);
      DispatchMessage(&amp;msg);
    } else {
      // We received a WM_QUIT message; bail out!
      CancelSomething();
      // Re-post the message that we retrieved
      PostQuitMessage(msg.wParam);
      fResult = FALSE; // quit before something finished
      break;
    }
  }
  return fResult;
}
</pre>
<p>
Suppose your program starts some operation and then calls
<code>WaitForSomething()</code>.
While waiting for something to finish, some other part of your
program decides that it's time to exit.
(Perhaps the user clicked on a "Quit" button.)
That other part of the program will call
<code>PostQuitMessage(wParam)</code>
to indicate that the message loop should terminate.
</p>
<p>
The posted quit message will first be retrieved by the
<code>GetMessage</code> in the <code>WaitForSomething</code> function.
The <code>GetMessage</code> function returns <code>FALSE</code> if
the retrieved message is a <code>WM_QUIT</code> message.
In that case, the "else" branch of the conditional is taken, which
cancels the "Something" operation in progress, then posts
the quit message back into the message queue for the next
outer message loop to handle.
</p>
<p>
When <code>WaitForSomething</code> returns, control presumably will fall
back out into the program's main message pump.  The main message
pump will then retrieve the <code>WM_QUIT</code> message and do its
exit processing before finally exiting the program.
</p>
<p>
And if there were additional layers of modality between
<code>WaitForSomething</code> and the program's main message pump,
each of those layers would retrieve the <code>WM_QUIT</code> message,
do their cleanup, and then re-post the <code>WM_QUIT</code> message
(again, via <code>PostQuitMessage</code>) before exiting the loop.
</p>
<p>
In this manner, the <code>WM_QUIT</code> message gets handed from modal
loop to modal loop, until it reaches the outermost loop, which
terminates the program.
</p>
<p>
"But wait," I hear you say.  "Why do I have to do all this
fancy <code>WM_QUIT</code> footwork?  I could just have a private little
global variable named something like <code>g_fQuitting</code>.  When
I want the program to quit, I just set this variable, and all
of my modal loops check this variable and exit prematurely if it
is set.  Something like this:
</p>
<pre>
<i>BOOL MyWaitForSomething(void) // code in italics is wrong
{
  MSG msg;
  while (!SomethingFinished()) {
    if (g_fQuitting) {
    CancelSomething();
      return FALSE;
    }
    if (GetMessage(&msg, NULL, 0, 0)) {
      TranslateMessage(&msg);
      DispatchMessage(&msg);
    }
  }
  return TRUE;
}</i>
</pre>
<p>
And so I can solve the problem of the nested quit without needing
to do all this <code>PostQuitMessage</code> rigamarole."
</p>
<p>
And you'd be right, if you controlled every single modal loop in
your program.
</p>
<p>
But you don't.
</p>
<p>
For example, when you call
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/dialogboxes/dialogboxreference/dialogboxfunctions/dialogbox.asp">
the <code>DialogBox</code> function</a>,
the dialog box code
runs its own private modal loop to do the dialog box UI until
you get around to calling
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/dialogboxes/dialogboxreference/dialogboxfunctions/enddialog.asp">
the <code>EndDialog</code> function</a>.  And whenever the user
clicks on any of your menus, Windows runs its own private
modal loop to do the menu UI.  Indeed, even the resizing of
your application's window is handled by a Windows modal loop.
</p>
<p>
Windows, of course, has no knowledge of your little
<code>g_fQuitting</code> variable, so it has no idea that you want
to quit.  It is the <code>WM_QUIT</code> message that serves this
purpose of co-ordinating the intention to quit among separate
parts of the system.
</p>
<p>
Notice that this convention regarding the <code>WM_QUIT</code>
message cuts both ways.  You can use this convention to cause
modal loops to exit (we'll see more of this later), but it also
obliges you to respect this convention so that
<strong>other</strong> components (including the window manager itself)
can get your modal loops to exit.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-257103">
				<div id="div-comment-257103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257103">
			February 22, 2005 at 7:18 am</a>		</div>

		<p>I&#8217;m guilty of using the private little global variable&#8230; Guess I&#8217;ll need to make a change one of these days ;-)  Thanks Raymond for your insightful postings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257113">
				<div id="div-comment-257113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257113">
			February 22, 2005 at 7:29 am</a>		</div>

		<p>Once we&#8217;re on WM_QUIT, I&#8217;d like to ask: what&#8217;s the difference between PostQuitMessage and PostThreadMessage(GetCurrentThreadId, WM_QUIT)? Is there any?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257123">
				<div id="div-comment-257123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lonnie McCullough</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257123">
			February 22, 2005 at 7:50 am</a>		</div>

		<p>What about using PeekMessage with PM_NOREMOVE?  Do we still have to call PostQuitMessage or will our non-removal of the message from the queue cause it to get correctly handled at the next highest layer?  In my head this seems like the way it should work, but am I missing some kind of subtle error here?  I&#8217;ve written several of my modal message loops this way and never had any problems with incorrect message handling so my emperical evidence says its cool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257133">
				<div id="div-comment-257133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Bowen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257133">
			February 22, 2005 at 9:04 am</a>		</div>

		<p>How about PeekMessage with PM_REMOVE?  If the message that gets pulled off the queue is WM_QUIT, should you PostQuitMessage?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257143">
				<div id="div-comment-257143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">/he</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257143">
			February 22, 2005 at 9:19 am</a>		</div>

		<p>/he GetMessage  ??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257153">
				<div id="div-comment-257153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257153">
			February 22, 2005 at 9:21 am</a>		</div>

		<p>A. Skrobov: I&#8217;ll return to this topic in a few months.</p>
<p>Lonnie McCullough/Daniel Bowen: The point of the article isn&#8217;t PeekMessage vs GetMessage. The point is propagation of the WM_QUIT message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257163">
				<div id="div-comment-257163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257163">
			February 22, 2005 at 9:24 am</a>		</div>

		<p>A. Skrobov, as far as I know PostQuitMessage sets a flag only and PostThreadMessage posts a real message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257173">
				<div id="div-comment-257173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Bowen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257173">
			February 22, 2005 at 9:29 am</a>		</div>

		<p>Thanks for the reply!  It looks like I&#8217;ll definitley need to update the &quot;WaitWithMessageLoop&quot; I asked about &#8211; <a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2005/02/17/375307.aspx#375748" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2005/02/17/375307.aspx#375748</a> . I also found this &#8211; <a target="_new" href="http://www.mvps.org/user32/modal.html" rel="nofollow">http://www.mvps.org/user32/modal.html</a>, which uses PostMessage(NULL,WM_QUIT,0,0); to repost WM_QUIT.  However, a later sample uses PostQuitMessage.</p>
<p>For that WaitWithMessageLoop, should I have</p>
<p>A.<br />
<br />        while(::PeekMessage(&amp;msg,NULL,NULL,NULL,PM_REMOVE))<br />
<br />        {<br />
<br />            if(msg.message == WM_QUIT)<br />
<br />            {<br />
<br />                return FALSE;<br />
<br />            }</p>
<p>&#8230;</p>
<p>B.<br />
<br />        while(::PeekMessage(&amp;msg,NULL,NULL,NULL,PM_REMOVE))<br />
<br />        {<br />
<br />            if(msg.message == WM_QUIT)<br />
<br />            {<br />
<br />                ::PostMessage(NULL,WM_QUIT,0,0);<br />
<br />                return FALSE;<br />
<br />            }</p>
<p>&#8230;</p>
<p>C.<br />
<br />        while(::PeekMessage(&amp;msg,NULL,NULL,NULL,PM_REMOVE))<br />
<br />        {<br />
<br />            if(msg.message == WM_QUIT)<br />
<br />            {<br />
<br />                ::PostQuitMessage(msg.wParam);<br />
<br />                return FALSE;<br />
<br />            }</p>
<p>&#8230;</p>
<p>D. Something else?</p>
<p>Thanks!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257183">
				<div id="div-comment-257183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seth McCarus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257183">
			February 22, 2005 at 10:13 am</a>		</div>

		<p>The Microsoft KB has an article that relates to this, concerning creating a timed message box:</p>
<p><a target="_new" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;181934" rel="nofollow">http://support.microsoft.com/default.aspx?scid=kb;en-us;181934</a></p>
<p>A quit message is posted to MessageBox&#8217;s modal loop, which closes the message box, but then your app continues as usual.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257193">
				<div id="div-comment-257193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lonnie McCullough</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257193">
			February 22, 2005 at 11:13 am</a>		</div>

		<p>I know the article is about propigation of the WM_QUIT message.  My question was whether or not using PM_NOREMOVE relieves  me of the responsiblity of propigating WM_QUIT.  As I have written a relatively large number of message pumping code routines over my career I just want to know if the thing I&#8217;ve been doing this entire time is correct or not.  As I said I have never observed any strangeness here, but the docs on MSDN explicitly call out the WM_QUIT message and since it is obviously a somewhat special case I just wanted to ensure that PeekMessage retrieving it with PM_NOREMOVE does what I expect it to.  I think that my question is germain to the discussion at hand especially since you mention PeekMessage in your post.  This is what the code I&#8217;ve written looks like:</p>
<p>while( true ) {<br />
<br />   PeekMessage(&amp;msg, NULL, 0, 0, PM_NOREMOVE);<br />
<br />   if (msg.message == WM_QUIT)<br />
<br />      return;<br />
<br />   if (ShouldExitModalLoop())<br />
<br />      return;<br />
<br />   PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE);<br />
<br />   TranslateMessage(&amp;msg);<br />
<br />   DispatchMessage(&amp;msg);<br />
<br />}</p>
<p>Or something close to that.  If what rrrr is saying is true then it seems that calling PeekMessage may clear the WM_QUIT flag regardless of the PM_REMOVE / PM_NOREMOVE flag passed to it.  I&#8217;ve observed that this works fine, but is there some corner case that I&#8217;m not aware of?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257203">
				<div id="div-comment-257203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257203">
			February 22, 2005 at 11:49 am</a>		</div>

		<p>If you pass PM_NOREMOVE then the WM_QUIT message is not removed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257213">
				<div id="div-comment-257213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257213">
			February 22, 2005 at 12:16 pm</a>		</div>

		<p>The SDK documentation rather emphatically points out that the return value for GetMessage() is not a simple TRUE/FALSE.  Supposedly it can return -1 if there is an error.  So technically:</p>
<p>while (GetMessage(&#8230;)) {&#8230;}</p>
<p>is wrong.  It should be:</p>
<p>while (GetMessage(&#8230;) &gt; 0) {&#8230;}</p>
<p>The Visual Studio wizards still don&#8217;t do this, and even Fifth Edition Petzold examples don&#8217;t get it right.</p>
<p>The SDK suggests that errors can occur if your HWND or the pointer to the MSG struct is invalid, but it&#8217;s not clear if those are the only error cases.  If those are the only cases, then you&#8217;re OK as a long as your sure of those parameters.</p>
<p>And I suppose you should only repost a WM_QUIT if it actually was a WM_QUIT that caused you to exit and not an error.  Otherwise an error could cause your program to exit without saving data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257233">
				<div id="div-comment-257233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257233">
			February 22, 2005 at 12:40 pm</a>		</div>

		<p>Adrian:<br />
<br />If you&#8217;re only inspecting a specific HWND, I&#8217;m not sure that you&#8217;ll even get the WM_QUIT.  If your MSG pointer is bad, you&#8217;d better just quit your app, because you&#8217;re about to crash or do very bad things.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257243">
				<div id="div-comment-257243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257243">
			February 22, 2005 at 1:11 pm</a>		</div>

		<p>Adrian wrote:<br />
<br />&gt; So technically:<br />
<br />&gt;<br />
<br />&gt; while (GetMessage(&#8230;)) {&#8230;}<br />
<br />&gt;<br />
<br />&gt; is wrong. It should be:<br />
<br />&gt;<br />
<br />&gt; while (GetMessage(&#8230;) &gt; 0) {&#8230;} </p>
<p>Technically, that&#8217;s wrong too. :)</p>
<p>According to the documentation, only -1 indicates failure, but you&#8217;re treating all return values less than 0 as failures.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257263">
				<div id="div-comment-257263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Loop</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257263">
			February 23, 2005 at 2:13 am</a>		</div>

		<blockquote><p>
  If you fail to propagate the message, the next outer layer will not know that it needs to quit, and the program will seem to &quot;get stuck&quot; in its shutdown code, forcing the user to terminate the process the hard way. </p>
<p>This is very common in single-threaded programs written, especially those written in VB6 which uses DoEvents(), this is usually used to prevent the gui from stop responding. Works fine as long the user doesn&#8217;t try to close the program.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257273">
				<div id="div-comment-257273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cola</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257273">
			February 23, 2005 at 2:22 am</a>		</div>

		<p>Programs use WM_QUIT to terminate modal loops?  That sounds dangerous to me: how do they distinguish between their own propagated quit message and someone else&#8217;s quit?  I guess we&#8217;ll find out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257283">
				<div id="div-comment-257283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">omg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257283">
			February 23, 2005 at 3:44 am</a>		</div>

		<p>VB6&#8217;s DoEvents doesn&#8217;t handle WM_QUIT? Very Poor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-257303">
				<div id="div-comment-257303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jorge Coelho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257303">
			February 23, 2005 at 8:23 am</a>		</div>

		<p>One related question though:</p>
<p>Any idea why Explorer windows don&#8217;t close in XP (all other windows do) with</p>
<p>IsHung = SendMessageTimeout(hwnd, WM_CLOSE, 0&amp;, 0&amp;, SMTO_ABORTIFHUNG, 1000, Killed)</p>
<p>The system just beeps, instead, and it takes a </p>
<p>PostMessage(hwnd, WM_CLOSE, 0&amp;, 0&amp;)</p>
<p>to that window for it to close.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-257363">
				<div id="div-comment-257363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-257363">
			February 23, 2005 at 9:51 am</a>		</div>

		<p>I don&#8217;t know but I can guess &#8211; and in fact so can you: RPC_E_CANTCALLOUT_ININPUTSYNCCALL. There are some things that cannot be done in response to a sent message. WM_CLOSE is normally posted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-258203">
				<div id="div-comment-258203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2005/03/01/382380.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-258203">
			March 1, 2005 at 10:00 am</a>		</div>

		<p>Exploiting the rules for handling of the WM_QUIT message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-268943">
				<div id="div-comment-268943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/04/01/404531.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-268943">
			April 1, 2005 at 8:58 am</a>		</div>

		<p>Just processing messages until EndDialog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-345023">
				<div id="div-comment-345023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/01/26/517849.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-345023">
			February 10, 2006 at 11:54 am</a>		</div>

		<p>Putting together pieces you already know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-479993">
				<div id="div-comment-479993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.adrianmccarthy.com/blog/?p=52' rel='external nofollow' class='url'>Adrian McCarthy &raquo; Blog Archive &raquo; Phantom Bug Update</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050222-00/?p=36393#comment-479993">
			March 7, 2007 at 7:56 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.adrianmccarthy.com/blog/?p=52" rel="nofollow">http://www.adrianmccarthy.com/blog/?p=52</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

