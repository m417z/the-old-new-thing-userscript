<html>
<head>
<title>How does the C runtime know whether to use the static-linking or dynamic-linking version of the header file?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How does the C runtime know whether to use the static-linking or dynamic-linking version of the header file?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 21, 2011 / year-entry #68</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In response to a description of what happens when you get dll­import wrong, nksingh asks, "This seems like a problem for the CRT. As far as I know, VC gives you the option of statically or dynamically linking the CRT. But it seems like the headers will have to make a choice to support one...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In response to a description of what happens when you get
<code>dll&shy;import</code> wrong,
nksingh asks,
"This seems like a problem for the CRT.
As far as I know,
VC gives you the option of statically or dynamically linking the CRT.
But it seems like the headers will have to make a choice to support
one thing better than the other.
Conditional compilation would work,
but then people would have to remember to include a #define somewhere.
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/07/26/679044.aspx#679103">
Is this dllimport vs. static linking thing something the compiler could figure out on its own if you're doing Link-time codegen</a>?"
</p>
<p>
Let's start from the beginning.
</p>
<p>
Yes, this would be a problem for the CRT since it wouldn't know whether
to declare the functions as normal static functions or as
<code>dllimport</code>-style functions,
and the headers have to make a choice which way to go.
</p>
<p>
And if you look at the headers, you can see that it is indeed done
via conditional compilation.
</p>
<pre>
...
_CRTIMP int __cdecl fflush(FILE * _File);
...
</pre>
<p>
This magic <code>_CRTIMP</code> symbol is defined in
<code>crtdefs.h</code> like so:
</p>
<pre>
/* Define _CRTIMP */
#ifndef _CRTIMP
#ifdef _DLL
#define _CRTIMP __declspec(dllimport)
#else  /* _DLL */
#define _CRTIMP
#endif  /* _DLL */
#endif  /* _CRTIMP */
</pre>
<p>
Conditional compilation decides whether <code>_CRTIMP</code>
expands to <code>__declspec(dllimport)</code> or to nothing at all,
depending on whether the <code>_DLL</code> symbol is defined.
</p>
<p>
And yet nobody bothers writing <code>#define _DLL</code> before
they <code>#include &lt;stdio.h&gt;</code>.
There must be something else going on.
</p>
<p>
In fact, we can run some experiments to see what's going on.
</p>
<pre>
#ifdef _DLL
#error "_DLL is defined"
#else
#error "_DLL is not defined"
#endif
</pre>
<p>
Save this as <code>dummy.c</code> and run a few tests.
</p>
<pre>
C:\tests&gt; cl /MT dummy.c
dummy.c
dummy.c(4) : fatal error C1189: #error :  "_DLL is not defined"

C:\tests&gt; cl /MD dummy.c
dummy.c
dummy.c(2) : fatal error C1189: #error :  "_DLL is defined"
</pre>
<p>
Well how's about that.
The compiler uses the <code>/MT</code> and <code>/MD</code>
flag to decide whether or not to define the preprocessor symbol
<code>_DLL</code>, which is the secret signal it passes to the
<code>crtdef.h</code> header file to control the conditional
compilation.
</p>
<p>
The compiler has to use this technique
instead of deferring the decision to link-time code generation
because it cannot assume that everybody has enabled link-time
code generation.
(Indeed, we explicitly did not in our sample command lines.)
</p>
<p>
If link-time code generation were enabled, then is this something
that could be deferred until that point?
</p>
<p>
In principle yes,
because link-time code generation in theory could just make the .obj
file a copy of the source file (and all the header files) and do
all the actual compiling at link time.
This is a sort of extreme way of doing it,
but I guess it could've been done that way.
</p>
<p>
On the other hand, it also means that the compiler folks would have
to come up with a new nonstandard extension that means "This function
might be a normal static function or it might be a
<code>dll&shy;import</code>
function. I haven't decided yet; I'll tell you later."
</p>
<p>
Seeing as how the CRT already has to solve the problem in the case
where there is no link-time code generation, it doesn't seem worth
the effort to add a feature to link-time-code generation
that you don't actually need.
It would be a feature for which the only client is the C runtime
library itself, for which the C runtime library already requires
a separate solution when link-time code generation is disabled,
and for which that separate solution <i>still works when link-time
code generation is enabled</i>.
</p>
<p>
No engineering purpose is served by
writing code just for the sake of writing code.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-902353">
				<div id="div-comment-902353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902353">
			March 21, 2011 at 7:56 am</a>		</div>

		<p>&quot;And yet nobody bothers writing #define _DLL before they #include &lt;stdio.h&gt;.&quot;</p>
<p>Because doing so would be undefined behavior. &nbsp;The C language standard reserves all identifiers beginning with an underscore followed by either a capital letter or another underscore, and defining a reserved identifier as a macro is undefined behavior (C90 Â§4.1.2 or C99 Â§7.1.3). &nbsp;That&#39;s why all compiler-defined macros begin with /<em>[A-Z</em>]/, so that they won&#39;t conflict with any macros user code might write.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902363">
				<div id="div-comment-902363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rangoric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902363">
			March 21, 2011 at 8:27 am</a>		</div>

		<p>@Adam exactly. That wasn&#39;t a question or statement saying that people SHOULD do it, it was saying nobody does that, let&#39;s find out why. The sentence right after clears this up.</p>
<p>(I&#39;m beginning to think people are trying to find something wrong with these posts to earn an award or something)</p>
<div class="post">[<i>Exactly. It&#39;s &quot;And yet this works even though nobody sets _DLL.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902373">
				<div id="div-comment-902373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902373">
			March 21, 2011 at 8:38 am</a>		</div>

		<p>@Adam</p>
<p>Also remember, not everyone who uses C has read the standard. So would they know that _DLL is reserved by the compiler?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902383">
				<div id="div-comment-902383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902383">
			March 21, 2011 at 8:46 am</a>		</div>

		<p>@Crescens2k</p>
<p>That is neither here nor there. If you don&#39;t know the standard&#39;s rules then you can&#39;t complain when unexpected things happen to you. Ignorance of the standard does not protect you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902393">
				<div id="div-comment-902393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902393">
			March 21, 2011 at 9:00 am</a>		</div>

		<p>Sigh. Language lawyers..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902423">
				<div id="div-comment-902423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902423">
			March 21, 2011 at 11:25 am</a>		</div>

		<p>@Adam</p>
<p>It is very relevant. You quoted the standard yet it is very likely that most people who use VC, especially learners have never even read the standard. So quoting the standard in this kind of situation is pointless. Also, people tend to follow what they see, and there have been people who used uglified identifiers in classes after using the STL. So if people will use uglified names, is there any surprise if people end up using these definitions without reading the standard?</p>
<p>@Sunil</p>
<p>Well it is obvious that if you don&#39;t know the rules then you can&#39;t be surprised. But people like to stay ignorant. Also, no book/guide etc that I have read even mentions about any preprocessor directives begining with _ are reserved by the compiler. Also, if you look at the place that people are likely to hit first, wikipedia, then again, there is no mention of directives begining with _ is compiler reserved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902433">
				<div id="div-comment-902433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902433">
			March 21, 2011 at 12:36 pm</a>		</div>

		<p>I always wondered why dllimport is needed at all. After all, in the end the things are linked against an import library. Is there any technical reason (other than &quot;it is already done this way&quot;) that would require usage of dllimport?</p>
<div class="post">[<i>Um, that was the topic of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/07/26/679044.aspx" rel="nofollow">the original article that prompted today&#39;s question</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902443">
				<div id="div-comment-902443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902443">
			March 21, 2011 at 3:59 pm</a>		</div>

		<p>waleri: in short, mismatched dllimport is merely inefficient for functions (it costs a stub for statically linking an imported function, and a data indirection for importing a statically linked function), and completely broken for external data</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902403">
				<div id="div-comment-902403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902403">
			March 21, 2011 at 9:05 am</a>		</div>

		<p>@Rangoric: I wasn&#39;t trying to find fault with Raymond&#39;s post, I was providing additional background information on *why* nobody defines _DLL.</p>
<p>@Crescens2k: That&#39;s irrelevant. &nbsp;Nobody would go out of there way to explicitly define _DLL because there&#39;s no reason to. &nbsp;It&#39;s a short enough (and odd-looking) macro name that hopefully someone would think twice before using it for their own purposes; even if someone did choose to use it, they would run into a macro redefinition error with MSVC with the default settings for new projects (/MD).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902453">
				<div id="div-comment-902453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skyborne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902453">
			March 22, 2011 at 6:15 am</a>		</div>

		<p>[Um, that was the topic of the original article that prompted today&#39;s question.]</p>
<p>I was going to ask how to get that whole series, since that article isn&#39;t linked up, then it occurred to me&#8230; search for dllimport! &nbsp;<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2006/07/27/680250.aspx" rel="nofollow">blogs.msdn.com/&#8230;/680250.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902653">
				<div id="div-comment-902653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-902653">
			March 22, 2011 at 11:54 am</a>		</div>

		<p>Thanks for the clarification. Actually the answer was in one of the articles pointed by Skyborne &#8211; why cannot/should not fixup addresses in place. Now I know how it worked before dllimport was invented :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-903563">
				<div id="div-comment-903563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-903563">
			March 25, 2011 at 1:18 pm</a>		</div>

		<p>Before dllimport/dllexport you used .def</p>
<p>Actually still the easiest way to compile &amp; use dlls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-903683">
				<div id="div-comment-903683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-903683">
			March 26, 2011 at 9:35 am</a>		</div>

		<p>&quot;Actually still the easiest way to compile &amp; use dlls.&quot;</p>
<p>Seriously? &nbsp;I assume you do not use C++ and work with DLLs with very few exports, because exporting classes or even just name-mangled functions through a .def file is a complete nightmare, especially when you get different name mangling for different configurations. &nbsp;Having to keep a long list of exports in sync with the source, no thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm odd alt thread-odd thread-alt depth-1" id="comment-903693">
				<div id="div-comment-903693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110321-00/?p=11173#comment-903693">
			March 26, 2011 at 9:35 am</a>		</div>

		<p>&quot;Actually still the easiest way to compile &amp; use dlls.&quot;</p>
<p>Seriously? &nbsp;I assume you do not use C++ and work with DLLs with very few exports, because exporting classes or even just name-mangled functions through a .def file is a complete nightmare, especially when you get different name mangling for different configurations. &nbsp;Having to keep a long list of exports in sync with the source, no thank you.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

