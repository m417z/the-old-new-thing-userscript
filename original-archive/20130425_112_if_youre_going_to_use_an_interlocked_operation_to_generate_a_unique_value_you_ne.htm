<html>
<head>
<title>If you're going to use an interlocked operation to generate a unique value, you need to use it before it's gone</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you&#8217;re going to use an interlocked operation to generate a unique value, you need to use it before it&#8217;s gone</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 25, 2013 / year-entry #113</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>35</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Is the Interlocked­Increment function broken? One person seemed to think so. We're finding that the Interlocked­Increment is producing duplicate values. Are there are any know bugs in Interlocked­Increment? Because of course when something doesn't work, it's because you are the victim of a vast conspiracy. There is a fundamental flaw in the Interlocked­Increment function that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Is the
<code>Interlocked&shy;Increment</code> function broken?
One person seemed to think so.
</p>
<blockquote CLASS=q>
<p>
We're finding that the
<code>Interlocked&shy;Increment</code> is producing
duplicate values.
Are there are any know bugs in
<code>Interlocked&shy;Increment</code>?
</p>
</blockquote>
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/10/10127054.aspx">
Because of course when something doesn't work,
it's because you are the victim of a vast conspiracy</a>.
There is a fundamental flaw in the
<code>Interlocked&shy;Increment</code> function that
only you can see.
<i>You are not a crackpot</i>.
</p>
<pre>
LONG g_lNextAvailableId = 0;

<i>DWORD GetNextId()
{
  // Increment atomically
  InterlockedIncrement(&amp;g_lNextAvailableId);

  // Subtract 1 from the current value to get the value
  // before the increment occurred.
  return (DWORD)g_lNextAvailableId - 1;
}</i>
</pre>
<p>
Recall that
<code>Interlocked&shy;Increment</code>
function increments a value atomically
and returns the incremented value.
If you are interested in the result of the increment,
you need to <i>use the return value directly</i>
and not try to read the variable you incremented,
because that variable may have been modified by another
thread in the interim.
</p>
<p>
Consider what happens when two threads call
<code>Get&shy;Next&shy;Id</code>
simultaneously (or nearly so).
Suppose the initial value of <code>g_lNext&shy;Available&shy;Id</code> is 4.
</p>
<ul>
<li>First thread calls
    <code>Interlocked&shy;Increment</code>
    to increment from 4 to 5.
    The return value is 5.</p>
<li>Second thread calls
    <code>Interlocked&shy;Increment</code>
    to increment from 5 to 6.
    The return value is 6.</p>
<li>First thread ignores the return value and instead
    reads the current value of
    <code>g_lNext&shy;Available&shy;Id</code>, which is 6.
    It subtracts 1, leaving 5, and returns it.</p>
<li>Second thread ignores the return value and instead
    reads the current value of
    <code>g_lNext&shy;Available&shy;Id</code>, which is still 6.
    It subtracts 1, leaving 5, and returns it.
</ul>
<p>
Result:
Both calls to
<code>Get&shy;Next&shy;Id</code> return 5.
Interpretation:
"<code>Interlocked&shy;Increment</code> is broken."
</p>
<p>
Actually,
<code>Interlocked&shy;Increment</code> is working just fine.
What happened is that the code threw away the unique information
that
<code>Interlocked&shy;Increment</code> returned
and instead went back to the shared variable,
even though the shared variable changed its value
in the meantime.
</p>
<p>
Since this code cares about the result of the increment,
it needs to use the value returned
by <code>Interlocked&shy;Increment</code>.
</p>
<pre>
DWORD GetNextId()
{
  // Increment atomically and subtract 1 from the
  // incremented value to get the value before the
  // increment occurred.
  return (DWORD)InterlockedIncrement(&amp;g_lNextAvailableId) - 1;
}
</pre>
<p>
<b>Exercise</b>: Criticize this implementation of
<code>IUnknown::<wbr>Release</code>:
</p>
<pre>
<i>STDMETHODIMP_(ULONG) CObject::Release()
{
 InterlockedDecrement(&amp;m_cRef);
 if (m_cRef == 0)
 {
  delete this;
  return 0;
 }
 return m_cRef;
}</i>
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1052603">
				<div id="div-comment-1052603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052603">
			April 25, 2013 at 9:40 am</a>		</div>

		<p>The fact that someone would make this mistake belies a fundamental misunderstanding of how concurrent processing works.</p>
<p>The Release method is incorrect because there is nothing stopping two threads from calling Release() at the same time, and both running the m_cRef == 0 branch.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052613">
				<div id="div-comment-1052613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052613">
			April 25, 2013 at 9:48 am</a>		</div>

		<p>There&#39;s a use after free bug in the implementation of IUnknown::Release</p>
<p>Imagine that you have two references to this object, each being used by a different thread; thread 1 calls Release, runs the InterlockedDecrement, and is then scheduled away (m_cRef is now 1). Thread 2 calls Release and runs to completion; when thread 2 hits the if statement, m_cRef is 0, and it deletes the object.</p>
<p>When the scheduler then resumes thread 1, this is an invalid pointer, and you have no idea what m_cRef will be. If you&#39;re lucky, the memory has been reused, m_cRef comes out by chance as non-zero, and the return value of Release() is ignored. If you&#39;re unlucky, the memory hasn&#39;t been reused, so m_cRef is 0, and the delete is run twice. If you&#39;re really unlucky, the memory has been reused, m_cRef is non-zero, and the delete corrupts the heap. If you hit the worst available luck, a new object of the same type is using this block of memory, and you&#39;ve deleted someone else&#39;s object out from underneath them.</p>
<p>Additionally, you&#39;re breaking the contract for Release() &#8211; it&#39;s defined as returning the reference count after this release has run, so you may return the wrong value. As it&#39;s only meant for debugging, this shouldn&#39;t cause a crash, but may confuse someone trying to track down a bug.</p>
<p>The fix is the same as in the blog entry; record the result of InterlockedDecrement and use it:</p>
<p>STDMETHODIMP_(ULONG) CObject::Release()</p>
<p>{</p>
<p>LONG cRef = InterlockedDecrement(&amp;m_cRef);</p>
<p>if (cRef == 0)</p>
<p>{</p>
<p>&nbsp;delete this;</p>
<p>}</p>
<p>return cRef;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052623">
				<div id="div-comment-1052623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052623">
			April 25, 2013 at 9:52 am</a>		</div>

		<p>You cannot test lock-free algorithms for correctness. You have to prove them correct. Most people can&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052633">
				<div id="div-comment-1052633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052633">
			April 25, 2013 at 10:35 am</a>		</div>

		<p>@Joshua: I think a tool like Microsoft Chess ( <a rel="nofollow" target="_new" href="http://research.microsoft.com/en-us/projects/chess/" rel="nofollow">research.microsoft.com/&#8230;/chess</a> ) should be able to test such algorithms. &nbsp;It works by systematically testing every interleaving.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052643">
				<div id="div-comment-1052643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052643">
			April 25, 2013 at 10:48 am</a>		</div>

		<p>Oh thank goodness, I was worried something unusual had happened when the blog post didn&#39;t show up at 7am PDT.</p>
<div class="post">[<em>There was a glitch in the autoposter. Sorry for the confusion. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052653">
				<div id="div-comment-1052653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052653">
			April 25, 2013 at 10:59 am</a>		</div>

		<p>Isn&#39;t there also a problem with the Release implementation where two threads decrement the value and it becomes -1? &nbsp;In this case, we never free the object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052663">
				<div id="div-comment-1052663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052663">
			April 25, 2013 at 11:03 am</a>		</div>

		<p>Raymond, your GetNextId() code would not work on Windows95</p>
<div class="post">[<em>It also doesn&#39;t work on Win32s. But if you&#39;re targeting Win32s or Windows 95, you would have known this already. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052673">
				<div id="div-comment-1052673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052673">
			April 25, 2013 at 11:16 am</a>		</div>

		<p>@Adam Rosenfield: Don&#39;t worry, Raymond was just busy checking out the new Ubuntu release and lost track of time :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1052683">
				<div id="div-comment-1052683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052683">
			April 25, 2013 at 11:17 am</a>		</div>

		<blockquote><p>
  Isn&#39;t there also a problem with the Release implementation where two threads decrement the value and it becomes -1?
</p></blockquote>
<p>This can&#39;t happen. If two threads have a reference on the object, then the reference count was at least 2 before they started calling Release().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052713">
				<div id="div-comment-1052713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052713">
			April 25, 2013 at 11:28 am</a>		</div>

		<p>@Brian: I did the math on it. There&#39;s not enough CPU power in the world to do the whole program. It might work on an extracted library. The basic math is something like (#threads)^(#instructions executed by longest running thread) It gets worse when the library uses the &quot;wrong&quot; opcodes, resulting in the chance of splitting a single CPU instruction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052723">
				<div id="div-comment-1052723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052723">
			April 25, 2013 at 11:35 am</a>		</div>

		<p>@JamesJohnston: Sometimes I am almost convinced that concurrency is just a fancy name for merging lists.</p>
<p>@Maurits [MSFT] â You assume that AddRef() implementation isn&#39;t broken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052743">
				<div id="div-comment-1052743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Boyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052743">
			April 25, 2013 at 11:46 am</a>		</div>

		<blockquote><p>
  &nbsp; &nbsp; if (m_cRef == 0)
</p></blockquote>
<p>Oh, damn. Be right back. i have to, uh, i forgot the thing&#8230;in the place&#8230;with the guy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052763">
				<div id="div-comment-1052763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052763">
			April 25, 2013 at 12:36 pm</a>		</div>

		<p>@Adam: I had the same reaction. When I checked this at 10 ET, it wasn&#39;t there, and then I checked Ayende&#39;s blog, and nothing was new there either. I am so conditioned to expect those, that I had brief moment where I thought something was wrong with my internet connection or something! It was almost like one of those moments where you are in your car and the person beside you pulls out, and you think you are moving. To make it worse, I checked two sites, and it made me feel as if the cars on both sides of me pulled out simultaneously.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052773">
				<div id="div-comment-1052773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052773">
			April 25, 2013 at 1:00 pm</a>		</div>

		<p>re: IUnknown::Release</p>
<p>I think that the programming theorist Joni Mitchell warned about this antipattern:</p>
<p>&nbsp;Don&#39;t it always seem to go</p>
<p>&nbsp;that you don&#39;t know what you&#39;ve got till it&#39;s gone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1052783">
				<div id="div-comment-1052783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052783">
			April 25, 2013 at 1:42 pm</a>		</div>

		<p>@Joker_vD yes, the Release() implementation should assume that the AddRef() implementation is correct.</p>
<p>You could, of course, do something like this:</p>
<p>LONG Release() {</p>
<p>____ LONG ref = InterlockedDecrement(&amp;m_ref);</p>
<p>____ if (ref &lt; 0) { throw(&#8230;); }</p>
<p>____ &#8230;.</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052803">
				<div id="div-comment-1052803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052803">
			April 25, 2013 at 2:25 pm</a>		</div>

		<p>[It also doesn&#39;t work on Win32s. But if you&#39;re targeting Win32s or Windows 95, you would have known this already. -Raymond]</p>
<p>Brings back memories. I still have a working Win32s environment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052813">
				<div id="div-comment-1052813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike [MSFT]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052813">
			April 25, 2013 at 3:19 pm</a>		</div>

		<p>There&#39;s also a distinct lack of memory barriers.</p>
<p>I&#39;m not sure which barriers, if any, InterlockedIncrement and/or InterlockedDecrement have or whether x86 strong memory model means barriers are unneccessary in this case, but relying on either of those helping would be brittle at best.</p>
<p>Just use std::atomic&lt;T&gt; if you can, the guys who designed that thought long and hard about memory barriers:</p>
<p>std::atomic&lt;int&gt; m_refCount;</p>
<p>&#8230;</p>
<p>if(&#8211;m_refCount == 0)</p>
<p>{</p>
<p>&nbsp; delete this;</p>
<p>}</p>
<p>[see <a href="http://channel9.msdn.com/Shows/Going+Deep/Cpp-and-Beyond-2012-Herb-Sutter-atomic-Weapons-1-of-2" target="_new" rel="nofollow">channel9.msdn.com/&#8230;/Cpp-and-Beyond-2012-Herb-Sutter-atomic-Weapons-1-of-2</a> for all the gory details]</p>
<div class="post">[<em>The vanilla interlocked functions erect a full fence. There are special Release and Acquire versions that erect only partial fences. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052693">
				<div id="div-comment-1052693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052693">
			April 25, 2013 at 11:20 am</a>		</div>

		<p>A mistake this elementary indicates that someone sprinkled interlocked functions throughout their code as if it were some kind of magic pixie dust that magically makes everything work, and they didn&#39;t stop to think about what the function actually *does*.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1052733">
				<div id="div-comment-1052733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052733">
			April 25, 2013 at 11:37 am</a>		</div>

		<p>The possibilities are: The object never gets deleted; the object gets deleted twice; *and* deleted memory gets touched.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052823">
				<div id="div-comment-1052823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/tlwest_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>tlwest@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052823">
			April 25, 2013 at 7:26 pm</a>		</div>

		<p>Funny, as someone who did general tech support for domain specific programming language (Turing), I was always careful to verify it wasn&#39;t a interpreter bug. &nbsp;The humiliation of having to profusely apologize to a customer after having told him repeatedly that the problem &quot;had to be in his code somewhere&quot; until I realized with horror that it was a bug in *my* compiler was enough to make me very, very careful about every absolutely denying the possibility of a interpreter bug. &nbsp;</p>
<p>Of course I didn&#39;t have MS&#39;s test team behind me, so it was only 99 times out of 100 that it was a user&#39;s bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052843">
				<div id="div-comment-1052843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052843">
			April 26, 2013 at 2:41 am</a>		</div>

		<p>@Mike [MSFT]</p>
<p>The interlocked functions are how we have been roughing it without a multithreaded memory model. But advertisement of the C++11 atomics is never a bad thing.</p>
<p>At the very least, on x86 and x64, the interlocked functions would correspond to instructions with the LOCK prefix. So InterlockedIncrement would correspond to LOCK INC and InterlockedDecrement would correspond to LOCK DEC. The lock prefix guarantees that all outstanding loads and stores are serialised prior to the locked instruction executing. This is much the same as MFENCE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052923">
				<div id="div-comment-1052923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052923">
			April 26, 2013 at 10:08 am</a>		</div>

		<p>Did interlocked functions not exist on Windows 95 and Win32s&#8230;? &nbsp;Win32s would make sense because it didn&#39;t support threading, but Windows 95 did support threading.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052933">
				<div id="div-comment-1052933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052933">
			April 26, 2013 at 10:12 am</a>		</div>

		<p>@Crescent2k:</p>
<p>How would LOCK INC return a value &#8212; which is what these functions do.</p>
<p>I think there is more to implementation here and not just LOCK INC/DEC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052943">
				<div id="div-comment-1052943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/santosh.sampath_4000_live.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>santosh.sampath@live.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052943">
			April 26, 2013 at 10:27 am</a>		</div>

		<p>@simon/Raymond,</p>
<p>I always am puzzled by this?</p>
<p>LONG cRef = InterlockedDecrement(&amp;m_cRef);</p>
<p>if (cRef == 0) // Lets say thread 1 is here and context switch happens to thread 2 which tries to do QI/AddRef and increments counter to 1. Now what?</p>
<p>{</p>
<p>delete this;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1052963">
				<div id="div-comment-1052963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/santosh.sampath_4000_live.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>santosh.sampath@live.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052963">
			April 26, 2013 at 10:38 am</a>		</div>

		<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/office/cc839627.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/cc839627.aspx</a></p>
<p>ULONG CMyMAPIObject::AddRef()</p>
<p>{</p>
<p>&nbsp; &nbsp;InterlockedIncrement(m_cRef);</p>
<p>&nbsp; &nbsp;return m_cRef; // Could return incorrect value if another thread also does addref.</p>
<p>}</p>
<p>ULONG CMyMAPIObject::Release()</p>
<p>{</p>
<p>&nbsp; &nbsp;// Decrement the object&#39;s internal counter.</p>
<p>&nbsp; &nbsp;ULONG ulRefCount = InterlockedDecrement(m_cRef);</p>
<p>&nbsp; &nbsp;if (0 == m_cRef) // If thread 2 did AddRef before this line, then it doesn&#39;t delete self. If thread 2 does AddRef just after this line, then again same problem as above. Am I missing anything obvious?</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;delete this;</p>
<p>&nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp;return ulRefCount;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1052973">
				<div id="div-comment-1052973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1052973">
			April 26, 2013 at 10:41 am</a>		</div>

		<p>@James J:</p>
<p>Windows 95 and Win32s has to run on 80386 processors that didn&#39;t have XADD and CMPXCHG instructon. Interlocked operations that return the result require one of those.</p>
<p>@Santosh Sampath:</p>
<p>The rule of proper COM programming is: if you have a pointer to object, you hold a reference to it. When you give the pointer away, you call AddRef. When you&#39;re done with it, you call Release. Thread 2 is supposed to have a reference which would prevent the refcount from going to zero. Please keep that in mind when you write your programs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053003">
				<div id="div-comment-1053003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/santosh.sampath_4000_live.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>santosh.sampath@live.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053003">
			April 26, 2013 at 10:48 am</a>		</div>

		<p>Thread 2 doesn&#39;t even have the pointer yet. Lets say it has called some function which tries to return the pointer by doing an Addref. What happens if refcount was just found to be 0 by first thread?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1053013">
				<div id="div-comment-1053013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053013">
			April 26, 2013 at 10:49 am</a>		</div>

		<p>@Santosh:</p>
<p>The MSDN example is incorrect. It&#39;s supposed to use ulRefCount.</p>
<p>Also, you may not call AddRef (or any other member function) if you don&#39;t have a reference. Just having a pointer is not enough, you need to own a outstanding reference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053063">
				<div id="div-comment-1053063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/santosh.sampath_4000_live.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>santosh.sampath@live.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053063">
			April 26, 2013 at 11:42 am</a>		</div>

		<p>@alegr1, Sorry for confusion and probably offtopic. Thanks for being patient.</p>
<p>I was thinking of a global ref counted single instance object shared between two threads.</p>
<p>I think COM objects would need to be marshaled if two threads are in different STA.</p>
<p>However if both threads use free threaded apartment, wouldn&#39;t it be unsafe to access global object without any lock.</p>
<p>For e.g. CoCreateInstance returns the same object for two threads.</p>
<div class="post">[<em>Ignoring the CoCreateInstance issue, if you keep a single global pointer to an object, and if one thread releases it while another tries to addref, then you have a bug in your app. Because if the release occurs before the addref, you are trying to addref a pointer to which you do not have a valid pointer. (The other thread invalidated it by releasing it.) Note that there is no concurrent release/addref race here. The race is in the app. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1053103">
				<div id="div-comment-1053103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053103">
			April 26, 2013 at 12:06 pm</a>		</div>

		<blockquote><p>
  However if both threads use free threaded apartment, wouldn&#39;t it be unsafe to access global object without any lock.
</p></blockquote>
<p>When CoCreateInstance returns an interface pointer, the pointer comes with an outstanding reference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053123">
				<div id="div-comment-1053123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053123">
			April 26, 2013 at 3:14 pm</a>		</div>

		<p>@AsmGuru62:</p>
<p>Of course, but that is the reason why I started it off with &quot;At the very least&quot;. It was about how even the simplest implementation of a locked increment has memory fences naturally, nothing more, nothing less.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1053023">
				<div id="div-comment-1053023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053023">
			April 26, 2013 at 11:02 am</a>		</div>

		<p>&gt;Thread 2 doesn&#39;t even have the pointer yet. Lets say it has called some function which tries to return the pointer by doing an Addref. What happens if refcount was just found to be 0 by first thread?</p>
<p>Let me repeat that again:</p>
<p>*Before* you give a pointer away (for example, pass it somehow to thread 2) you *must* call AddRef (QueryInterface is also an option). You *may not* call AddRef if you don&#39;t own a reference already. This way it&#39;s impossible to collide the last Release with AddRef.</p>
<p>You should NOT simply pass the pointer to thread 2 and have the thread 2 call AddRef at its leisure. That would be a big error. It&#39;s like throwing a lifeline to a person in distress, assuming they have to also secure the other end of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053173">
				<div id="div-comment-1053173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053173">
			April 26, 2013 at 11:02 pm</a>		</div>

		<p>@AsmGuru62: dec instruction updates flag register. if the value was decreased to zero, it&#39;s detectable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1053283">
				<div id="div-comment-1053283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053283">
			April 29, 2013 at 6:23 am</a>		</div>

		<p>The company I work for once shipped code with pretty much that implementation of Release. The bug was quickly exposed and fixed once dual CPU Pentium Pro machines started to appear on client sites.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1053293">
				<div id="div-comment-1053293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130425-00/?p=4553#comment-1053293">
			April 29, 2013 at 6:27 am</a>		</div>

		<p>@Santosh_Sampath, that shouldn&#39;t happen, because you&#39;re not supposed to have non-outstanding pointers.</p>
<p>However, when implementing multiple interfaces with composition, or cached throw-away/tearoff/lazy interface pointers, or even when using COM aggregation, this is exactly what may happen: the delegated interface object may be in the middle of a Release() which will delete itself, while the outer/owner object still has a non-null pointer to it which will be returned and AddRef()&#39;ed on QueryInterface().</p>
<p>Without givin much thought to it, I think the only safe option here is to use proper locks around IUnknown&#39;s methods, however inefficient that might be.</p>
<p>@Raymond, ignoring the CoCreateInstance issue is ignoring the (probably) most significant place where the issue may happen. The details of the timing of COM-loaded DLL unloading are scarce.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

