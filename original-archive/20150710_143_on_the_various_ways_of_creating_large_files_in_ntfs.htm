<html>
<head>
<title>On the various ways of creating large files in NTFS</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>On the various ways of creating large files in NTFS</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 10, 2015 / year-entry #144</td></tr>
<tr><td><b>Tags:</b></td><td>code;tipssupport</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">For whatever reason, you may want to create a large file. The most basic way of doing this is to use Set­File­Pointer to move the pointer to a large position into the file (that doesn't exist yet), then use Set­End­Of­File to extend the file to that size. This file has disk space assigned to it,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>For whatever reason, you may want to create a large file.</p>
<p> The most basic way of doing this is to use <code>Set&shy;File&shy;Pointer</code> to move the pointer to a large position into the file (that doesn't exist yet), then use <code>Set&shy;End&shy;Of&shy;File</code> to extend the file to that size. This file has disk space assigned to it, but NTFS doesn't actually fill the bytes with zero yet. It will do that lazily on demand. If you intend to write to the file sequentially, then that lazy extension will not typically be noticeable because it can be combined with the normal writing process (and possibly even optimized out). On the other hand, if you jump ahead and write to a point far past the previous high water mark, you may find that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/09/22/10215053.aspx"> your single-byte write lasts forever</a>. </p>
<p> Another option is to <a href="http://msdn.microsoft.com/library/aa365564.aspx"> make the file sparse</a>. I refer you to <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/09/22/10215053.aspx"> the remarks I made some time ago</a> on the pros and cons of this technique. One thing to note is that when a file is sparse, the virtual-zero parts do not have physical disk space assigned to them. Consequently, it's possible for a <code>Write&shy;File</code> into a previously virtual-zero section of the file may fail with an <code>ERROR_<wbr>DISK_<wbr>QUOTA_<wbr>EXCEEDED</wbr></wbr></wbr></code> error. </p>
<p> Yet another option is to use the <code>Set&shy;File&shy;Valid&shy;Data</code> function. This tells NTFS to go grab some physical disk space, assign it to the file, and to set the "I already zero-initialized all the bytes up to this point" value to the file size. This means that the bytes in the file will contain uninitialized garbage, and it also poses a security risk, because somebody can stumble across data that used to belong to another user. That's why <code>Set&shy;File&shy;Valid&shy;Data</code> requires administrator privileges. </p>
<p> From the command line, you can use the <code>fsutil file setvaliddata</code> command to accomplish the same thing. </p>
<p> <b>Bonus chatter</b>: The documentation for <code>Set&shy;End&shy;Of&shy;File</code> says, "If the file is extended, the contents of the file between the old end of the file and the new end of the file are not defined." But I just said that it will be filled with zero on demand. Who is right? </p>
<p> The formal definition of the <code>Set&shy;End&shy;Of&shy;File</code> function is that the extended content is undefined. However, NTFS will ensure that you never see anybody else's leftover data, for security reasons. (Assuming you're not intentionally bypassing the security by using <code>Set&shy;File&shy;Valid&shy;Data</code>.) </p>
<p> Other file systems, however, may choose to behave differently. </p>
<p> For example, in Windows&nbsp;95, the extended content is not zeroed out. You will get random uninitialized junk that happens to be whatever was lying around on the disk at the time. </p>
<p> If you know that the file system you are using is being hosted on a system running some version of Windows&nbsp;NT (and that the authors of the file system passed their Common Criteria security review), then you can assume that the extra bytes are zero. But if there's a chance that the file is on a computer running Windows for Workgroups or Windows&nbsp;95, then you need to worry about those extra bytes. (And if the file system is hosted on a computer running a non-Windows operating system, then you'll have to check the documentation for that operating system to see whether it guarantees zeroes when files are extended.) </p>
<p> [Raymond is currently away; this message was pre-recorded.] </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237856">
				<div id="div-comment-1237856" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237856">
			July 10, 2015 at 7:04 am</a>		</div>

		<p>Would be amusing if it filled w/ ones on some future system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237806">
				<div id="div-comment-1237806" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237806">
			July 10, 2015 at 8:51 am</a>		</div>

		<p>you both are. &quot;Filled with zeros&quot; is a valid for state for &quot;Any state&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1237766">
				<div id="div-comment-1237766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237766">
			July 10, 2015 at 9:11 am</a>		</div>

		<p>Joshua: If we see a future hard drive or filesystem design where it is cheaper to initialize with 1s instead of 0s, maybe.</p>
<p>But then they will probably just swap 1s and 0s so we still have 0s by default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237746">
				<div id="div-comment-1237746" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237746">
			July 10, 2015 at 9:18 am</a>		</div>

		<p>@The MAZZTer: Welcome to the future. &nbsp;NAND flash bits are erased to a 1 state, and SSDs are made out of NAND flash. &nbsp;Though since an SSD does not present a raw view of the underlying flash, I suppose the controller would return zero&#39;d pages for sectors that are erased, rather than returning the raw pages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1237676">
				<div id="div-comment-1237676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237676">
			July 10, 2015 at 5:40 pm</a>		</div>

		<p>Statistically, 0x00 is a lot more frequent than 0xFF. Sections of files or filesystems filled by 0x00 are far more common than sections filled by 0xFF (or any other value or pattern). If in doubt, write a short program that counts the occurrences of each byte value in a given file, and run it on a set of randomly chosen files from your hard drive :-) . That&#39;s why a &quot;zero fill&quot; API or control call makes much more sense than a &quot;fill with arbitrary value&quot; one. The 65c02/65816 processors even had an STZ (STore Zero) instruction that let you zero a memory location in just one step.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237666">
				<div id="div-comment-1237666" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237666">
			July 10, 2015 at 7:22 pm</a>		</div>

		<p>On Linux, there are 2 apis to create/grow files (other than just writing lots of 0s). Both will return 0 for unwritten data (of course).</p>
<p>&#39;truncate&#39; creates sparse files (that is, write() can fail with an out of space error).</p>
<p>&#39;fallocate&#39; reserves disk space, but still doesn&#39;t physically write to the blocks. There is metadata for each disk block for whether to pretend it is all zeros on read. NTFS should get an api like this :).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237646">
				<div id="div-comment-1237646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237646">
			July 10, 2015 at 10:40 pm</a>		</div>

		<p>Before sparse files came about in NTFS (around since Win2k), you could still make files larger than the filesystem by using file compression (around since NT3.51). It&#39;s not nearly as flexible (it&#39;s a lot easier to end up with 0s still writen to disk), but I was able to get 4GB of files on a 1GB disk to test what happens.</p>
<p>It turns out the DIR had some very bad routine for attempting to do 64-bit math, while Explorer used 32-bit math for adding file sizes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1237566">
				<div id="div-comment-1237566" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237566">
			July 12, 2015 at 6:56 pm</a>		</div>

		<p>Are the &quot;zero-fill&quot; functionity exist on ReFS then? I can formulate good enquiry to search for this information.</p>
<p>(I have to ask this because while FAT may be a thing of past for a lot of people, ReFS is not. And it&#39;s choosen to NOT support a number of NTFS features. So we need clarification here.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1222011">
				<div id="div-comment-1222011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1222011">
			July 13, 2015 at 6:59 am</a>		</div>

		<p>@cheong00:</p>
<p>&quot;FAT may be a thing of past for a lot of people&quot;</p>
<p>*laughs hysterically*</p>
<p>If you want a filesystem that works on just about every Turing-complete I/O-capable system in the world, some variety of FAT is pretty much your only option. &nbsp;It won&#39;t be dying any time soon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1237436">
				<div id="div-comment-1237436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237436">
			July 13, 2015 at 6:20 pm</a>		</div>

		<p>@Kevin: Due to the file size limit and ineffective storage on large volumes CONs of FAT32, I think it would be replaced by exFAT some time later.</p>
<p>If the storage have to be reformatted by Windows based system later, they had better support exFAT in the beginning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237256">
				<div id="div-comment-1237256" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237256">
			July 14, 2015 at 6:03 pm</a>		</div>

		<p>cheong: I believe licensing requirements will keep exFAT from ever being nearly as popular outside of Windows as FAT32 is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237216">
				<div id="div-comment-1237216" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150710-00/?p=45171#comment-1237216">
			July 15, 2015 at 6:13 am</a>		</div>

		<p>I have always thought that what was meant by describing the contents as not defined was that, in circumstances where security does not demand clearing the space, it might not be cleared. For example, if you reduce the file size and then increase it again (without closing it) you might see the old contents rather than zero bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

