<html>
<head>
<title>The forgotten common controls: The MenuHelp function</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The forgotten common controls: The MenuHelp function</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 8, 2006 / year-entry #193</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060608-09/?p=30933</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The MenuHelp function is one of the more confusing ones in the common controls library. Fortunately, you will almost certainly never had need to use it, and once you learn the history of the MenuHelp function, you won't want to use it anyway. Our story begins with 16-bit Windows. The WM_MENUSELECT message is sent to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>MenuHelp</code> function is one of the more confusing
ones in the common controls library.
Fortunately, you will almost certainly never had need to use it,
and once you learn the history of the <code>MenuHelp</code>
function, you won't <strong>want</strong> to use it anyway.
</p>
<p>
Our story begins with 16-bit Windows.
The <code>WM_MENUSELECT</code> message is sent to notify
a window of changes in the selection state of a menu that
has been associated with the window,
either by virtue of being the window's menu bar or by
having been passed as the owner window to a function like
<code>TrackPopupMenu</code>.
The parameters to the <code>WM_MENUSELECT</code> message
in 16-bit Windows were as follows:
</p>
<table>
<tr>
<td VALIGN=TOP>wParam&nbsp;</td>
<td VALIGN=TOP>=&nbsp;</td>
<td VALIGN=TOP>menu item ID&nbsp;</td>
<td VALIGN=TOP>if selection is a plain menu item</td>
</tr>
<tr>
<td VALIGN=TOP></td>
<td VALIGN=TOP>=&nbsp;</td>
<td VALIGN=TOP>pop-up menu handle&nbsp;</td>
<td VALIGN=TOP>if selection is a pop-up menu</td>
</tr>
<tr>
<td VALIGN=TOP>lParam&nbsp;</td>
<td VALIGN=TOP>=&nbsp;</td>
<td VALIGN=TOP COLSPAN=2>MAKELPARAM(flags, parent menu handle)&nbsp;</td>
</tr>
</table>
<p>
The <code>MenuHelp</code> function
parsed the parameters of the <code>WM_MENUSELECT</code> message
in conjunction with a table describing the mapping between menu items
and help strings,
displaying the selected string in the status bar.
The information was provided in the confusing format of an array of
<code>UINT</code>s that took the following format
(expressed in pseudo-C):
</p>
<pre>
struct MENUHELPPOPUPUINTS {
 UINT uiPopupStringID;
 HMENU hmenuPopup;
};
struct MENUHELPUINTS {
 UINT uiMenuItemIDStringOffset;
 UINT uiMenuIndexStringOffset;
 MENUHELPPOPUPUINTS rgwPopups[];
};
</pre>
<p>
The <code>uiMenuItemIDStringOffset</code> specifies the value
to add to the menu ID to convert it to a string ID that is
to be displayed in the status bar.
For example, if you had
</p>
<pre>
    MENUITEM "&amp;New\tCtrl+N"    ,200
</pre>
<p>
in your menu template, and you specified an offset of <code>1000</code>,
then the <code>MenuHelp</code> function will look for the help
string as string identifier
<nobr><code>200 + 1000 = 1200</code></nobr>:
</p>
<pre>
STRINGTABLE BEGIN
1200 "Opens a new blank document."
END
</pre>
<p>
The <code>uiMenuIndexStringOffset</code> does the same thing for
pop-up menus that were direct children of the main menu,
but since pop-up menus in
16-bit Windows didn't have IDs, the zero-based menu index was used instead.
For example, if your menu had the top-level structure
</p>
<pre>
BEGIN
  POPUP "&File"
  BEGIN
  ...
  END
  POPUP "&View"
  BEGIN
  ...
  END
END
</pre>
<p>
and you specified a <code>uiMenuIndexStringOffset</code> of <code>800</code>,
then the string for the File menu was expected to be at
<nobr><code>0 + 800 = 800</code></nobr> and the string for the
View menu was expected at
<nobr><code>1 + 800 = 801</code></nobr>.
</p>
<pre>
STRINGTABLE BEGIN
800 "Contains commands for working with the current document."
801 "Contains edit commands."
END
</pre>
<p>
The last case is a pop-up menu that is
a grandchild (or deeper descendant) of the main menu.
As we saw above,
the <code>WM_MENUSELECT</code> message encoded the
handle of the pop-up menu rather than its ID.
This handle was looked up in the variable-length array
of <code>MENUHELPPOPUPUINTS</code> elements
(terminated by a
<code>{0,&nbsp;0}</code> entry).
Notice that the second member of the
<code>MENUHELPPOPUPUINTS</code> structure is an
<code>HMENU</code> rather than a <code>UINT</code>.
But in 16-bit Windows,
<code>sizeof(HMENU) == sizeof(UINT) == 2</code>,
and 16-bit code (such as the
<code>WM_MENUSELECT</code> message)
relied heavily on coincidences like this.
</p>
<p>
If a pop-up window had the handle, say,
<code>(HMENU)0x1234</code>, the <code>MenuHelp</code>
function would look for a
<code>MENUHELPPOPUPUINTS</code> entry which had a
<code>hMenuPopup</code> equal to
<code>(HMENU)0x1234</code>,
at which point it would use the corresponding
<code>uiPopupStringID</code> as the help string.
</p>
<p>
Let's take a look at one of these in practice.
Here's a menu and a corresponding string table:
</p>
<pre>
1 MENU
BEGIN
  POPUP "&amp;File"
  BEGIN
    MENUITEM "&amp;New\tCtrl+N"    ,200
    MENUITEM "&amp;Open\tCtrl+O"   ,201
    MENUITEM "&amp;Save\tCtrl+S"   ,202
    MENUITEM "Save &amp;As"        ,203
    MENUITEM ""                ,-1
    MENUITEM "E&amp;xit"           ,204
  END

  POPUP "&amp;View"
  BEGIN
    MENUITEM "&amp;Status bar"     ,240
    MENUITEM "&amp;Full screen"    ,230
    POPUP "Te&amp;xt Size"
    BEGIN
      MENUITEM "&amp;Large"        ,225
      MENUITEM "&amp;Normal"       ,226
      MENUITEM "&amp;Small"        ,227
    END
  END
END

STRINGTABLE BEGIN
 800 "Contains commands for loading and saving files."
 801 "Contains commands for manipulating the view."
1200 "Opens a new blank document."
1201 "Opens an existing document."
1202 "Saves the current document."
1203 "Saves the current document with a new name."
1225 "Selects large font size."
1226 "Selects normal font size."
1227 "Selects small font size."
1230 "Maximizes the window to full screen."
1240 "Shows or hides the status bar."
2006 "Specifies the relative size of text."
END
</pre>
<p>
Notice that there was no requirement that the menu item identifiers
be consecutive.
All that the <code>MenuHelp</code> function cared about is that
the relationship between the menu item identifiers and the help strings
was in the form of a simple offset.
</p>
<p>
The table that connects the menu to the string table
goes like this:
</p>
<pre>
UINT rguiHelp[] = {
  1000,    // uiMenuItemIDStringOffset
   800,    // uiMenuIndexStringOffset
  2006, 0, // uiPopupStringID, placeholder
     0, 0  // end of MENUHELPPOPUPUINTS
};
</pre>
<p>
Since there is a grandchild pop-up menu,
we created a placeholder entry that will be filled in
with the menu handle at run time:
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  HMENU hmenuMain = GetMenu(hwnd);
  HMENU hmenuView = GetSubMenu(hmenuMain, 1);
  HMENU hmenuText = GetSubMenu(hmenuView, 2);
  rguiHelp[3] = (UINT)hmenuText;

  g_hwndStatus = CreateWindow(STATUSCLASSNAME, NULL,
        WS_CHILD | CCS_BOTTOM | SBARS_SIZEGRIP | WS_VISIBLE,
        0, 0, 0, 0, hwnd, (HMENU)100, g_hinst, 0);

  return g_hwndStatus != NULL;
}
</pre>
<p>
We locate the "Text Size" menu and put its menu handle
into the <code>rguiHelp</code> array so that the
<code>MenuHelp</code> command can find it.
The window procedure would then include the line:
</p>
<pre>
...
    case WM_MENUSELECT:
      MenuHelp(uiMsg, wParam, lParam, GetMenu(hwnd),
               g_hinst, g_hwndStatus, rguiHelp);
      break;
...
</pre>
<p>
That last step finally connects all the pieces.
When the <code>WM_MENUSELECT</code> message arrives,
the <code>MenuHelp</code> function looks at the item
that was selected, uses it to look up the appropriate
string resource, loads the resource from the provided
<code>HINSTANCE</code> and displays it in the status bar.
</p>
<p>
To make the sample complete, we need to do a little extra
bookkeeping:
</p>
<pre>
HWND g_hwndStatus;

void
OnSize(HWND hwnd, UINT state, int cx, int cy)
{
  MoveWindow(g_hwndStatus, 0, 0, cx, cy, TRUE);
}

// change to InitApp
    wc.lpszMenuName = MAKEINTRESOURCE(1);
</pre>
<p>
(I'd invite you to code up this sample 16-bit program and run it,
but I doubt anybody would be able to take me up on the invitation
since very few people have access to a 16-bit compiler for
Windows any more.)
</p>
<p>
This method works great for 16-bit code.
But look at what happened during the transition to 32-bit Windows:
The parameters to the <code>WM_MENUSELECT</code> message had
to change since menu handles are 32-bit values.
There was no room in two 32-bit window message parameters
to shove 48 bits of data (two window handles and 16 bits of flags).
Something had to give, and what gave was the pop-up menu handle.
Instead of passing the handle, the index of the pop-up menu was
passed in the message parameters.
This did not result in any loss of data since the menu handle could
be recovered by passing the parent menu handle and the pop-up menu index
to the <code>GetSubMenu</code> function.
The repacking of the parameters thus goes like this:
</p>
<table>
<tr>
<td VALIGN=TOP>LOWORD(wParam)&nbsp;</td>
<td VALIGN=TOP>=&nbsp;</td>
<td VALIGN=TOP>menu item ID&nbsp;</td>
<td VALIGN=TOP>if selection is a plain menu item</td>
</tr>
<tr>
<td VALIGN=TOP>&nbsp;</td>
<td VALIGN=TOP>=&nbsp;</td>
<td VALIGN=TOP>pop-up menu index&nbsp;</td>
<td VALIGN=TOP>if selection is a pop-up menu</td>
</tr>
<tr>
<td VALIGN=TOP>HIWORD(wParam)&nbsp;</td>
<td VALIGN=TOP>=&nbsp;</td>
<td VALIGN=TOP>flags&nbsp;</td>
</tr>
<tr>
<td VALIGN=TOP>lParam&nbsp;</td>
<td VALIGN=TOP>=&nbsp;</td>
<td VALIGN=TOP COLSPAN=2>parent menu handle&nbsp;</td>
</tr>
</table>
<p>
The array of <code>UINT</code>s therefore changed its meaning to
match the new message packing:
</p>
<pre>
struct MENUHELPPOPUPUINTS {
 UINT uiPopupStringID;
 <font COLOR=blue>UINT uiPopupIndex;</font>
};
struct MENUHELPUINTS {
 UINT uiMenuItemIDStringOffset;
 UINT uiMenuIndexStringOffset;
 MENUHELPPOPUPUINTS rgwPopups[];
};
</pre>
<p>
The advantage of changing the value from an <code>HMENU</code>
to a <code>UINT</code> index is that the array does not need
to be modified at run time.
Okay, let's actually try this.
Start with
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
the scratch program</a>,
attach the resources I gave above,
and use the following help array and code:
</p>
<pre>
UINT rguiHelp[] = {
  1000,    // uiMenuItemIDStringOffset
   800,    // uiMenuIndexStringOffset
  2006, 2, // uiPopupStringID, uiPopupMenuIndex
  0,0      // end of MENUHELPPOPUPUINTS
};

HWND g_hwndStatus;

void
OnSize(HWND hwnd, UINT state, int cx, int cy)
{
  MoveWindow(g_hwndStatus, 0, 0, cx, cy, TRUE);
}

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  g_hwndStatus = CreateWindow(STATUSCLASSNAME, NULL,
        WS_CHILD | CCS_BOTTOM | SBARS_SIZEGRIP | WS_VISIBLE,
        0, 0, 0, 0, hwnd, (HMENU)100, g_hinst, 0);

  return g_hwndStatus != NULL;
}

// add to WndProc
    case WM_MENUSELECT:
      MenuHelp(uiMsg, wParam, lParam, GetMenu(hwnd),
               g_hinst, g_hwndStatus, rguiHelp);
      break;


// change to InitApp
    wc.lpszMenuName = MAKEINTRESOURCE(1);
</pre>
<p>
Notice that this is identical to the code needed for
the 16-bit <code>MenuHelp</code> function,
except that we didn't initialize the <code>UINT</code>
array with the pop-up menu handle.
</p>
<p>
Run this program and see how the help text in the status bar
changes based on which menu item you have seleced.
The <code>MenuHelp</code> function also knows about the
commands on the System menu and provides appropriate help text
for those as well.
</p>
<p>
Wow, this sounds like a neat function.
Why then did I say that you probably will decide that you
don't want to use it?
Let's look at the limitations of the <code>MenuHelp</code>
function.
</p>
<p>
First, notice that all the help strings for the menu must
come from the same <code>HINSTANCE</code>.
Furthermore, the offset from the menu item identifier to
the help string must remain constant across all menu items.
These two points mean that you cannot build a menu out of
pieces from multiple DLLs since you can pass only one
<code>HINSTANCE</code> and offset.
</p>
<p>
Second, the fixed offset means that you cannot have menus
whose content expands dynamically, because you won't have
help strings for the dynamic content.
What's worse, if the dynamically-added menu item identifiers
happen to, when added to the fixed offset, coincide with some
other string resource, that other string resource will be
used as the help string!
For example, in our example above, if we dynamically added
a menu item whose identifier is 1000, then the
<code>MenuHelp</code> function would look for the string whose
resource identifier is <code>1000 + 1000 = 2000</code>.
And if you happened to have some other string at position 2000
for some totally unrelated reason, that string will end up as the
menu help.
</p>
<p>
But hopefully you've spotted the fatal flaw in the
<code>MenuHelp</code> function by now:
That pop-up menu index.
I carefully designed this example to avoid the flaw.
The index of the "Text Size" pop-up menu is&nbsp;2, and it is
the only pop-up menu whose index is&nbsp;2.
(The "File" menu is index&nbsp;0 and the "View" menu is index&nbsp;1.)
In real life, of course, you do not have the luxury of fiddling the
menus to ensure that no two pop-up menus have the same index.
And when they end up with the same index,
the help strings get all confused since the <code>MenuHelp</code>
function can't tell which of the multiple "second pop-up menu"
you wanted to use string 2006 for.
</p>
<p>
Could this be fixed?
If you tried to return to the old <code>HMENU</code>-based way
of identifying pop-ups, you'd run into some new problems:
First, the introduction of 64-bit Windows means that you cannot
just cast an <code>HMENU</code> to a <code>UINT</code>
because an <code>HMENU</code> is a 64-bit value and
<code>UINT</code> is only 32 bits.
You could work around this by expanding the parameter to the
<code>MenuHelp</code> function to be an array of
<code>UINT_PTR</code> values instead of an array of
<code>UINT</code>s,
but that's not the only problem.
</p>
<p>
The <code>HMENU</code>-base mechanism supports only one window
at a time since the global array needs to be edited for each
client.
To make it support multiple windows,
you would have to make a copy of the global array and edit
the private copy.
To avoid making a private copy, you would have to come up with
some other way of specifying the pop-up window.
</p>
<p>
Now, you could spend even more time trying to come up with a
solution to the <code>HMENU</code> problem, but that still
leaves the other problems we discussed earlier.
Trying to salvage a <code>MenuHelp</code>-like solution to those
problems leads to even more
complicated mechanisms for expressing the relationship
between a menu item identifier and the corresponding help string.
Eventually, you come to the point where the general solution
is too complicated for its own good and you're better off just
coming up with an ad-hoc solution for your particular situation,
like we did when we
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/09/28/235242.aspx">
added menu help to our hosted shell context menus</a>.
</p>
<p>
(The only people I see using the <code>MenuHelp</code> function
ignore dealing with pop-up menus and use only the first two
<code>UINT</code>s, thereby avoiding the whole <code>HMENU</code> problem.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-389163">
				<div id="div-comment-389163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060608-09/?p=30933#comment-389163">
			June 8, 2006 at 10:16 am</a>		</div>

		<p>Explorer and IE6 both have menu help. What mechanism do they use?</p>
<p>I did notice that pop-up menus on Explorer&#8217;s Folders tree view don&#8217;t seem to have help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamescurran odd alt thread-odd thread-alt depth-1" id="comment-389203">
				<div id="div-comment-389203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Garry Trinder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060608-09/?p=30933#comment-389203">
			June 8, 2006 at 5:47 pm</a>		</div>

		<blockquote><p>
  &gt; There was no room in two 32-bit window message parameters to shove 48 bits of data (two window handles and 16 bits of flags). &lt;&lt; </p>
<p>um&#8230; There seems to me that there would be plenty of room in 64-bits for 48-bits of data. &nbsp;Shouldn&#8217;t that be &#8220;80 bits of data&#8221;? (32*2 + 16)</p>
<p>[<i>Yes, obviously 80 bits. -Raymond</i>]
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-523523">
				<div id="div-comment-523523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/07/10/3799014.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060608-09/?p=30933#comment-523523">
			July 10, 2007 at 10:25 am</a>		</div>

		<p>For making dialog controls match a menu, as if anybody even does this any more.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-569763">
				<div id="div-comment-569763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/11/23/6475511.aspx' rel='external nofollow' class='url'>MSDN Blog Postings &raquo; The forgotten common controls: The GetEffectiveClientRect function</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060608-09/?p=30933#comment-569763">
			November 23, 2007 at 12:35 pm</a>		</div>

		<p>PingBack from <a href="http://blogs.msdn.com/oldnewthing/archive/2007/11/23/6475511.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/11/23/6475511.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

