<html>
<head>
<title>The performance improvements of a lock-free algorithm is often not in the locking</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The performance improvements of a lock-free algorithm is often not in the locking</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 21, 2011 / year-entry #99</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">GWO wonders what the conditions are under which the lock-free version significantly outpeforms a simple critical section. Remember that switching to a lock-free algorithm should be guided by performance measurements. Switching from a simple algorithm to a complex one shouldn't be done unless you know that the simple algorithm is having trouble. That said, here...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/08/10151159.aspx#10151967">
GWO
wonders what the conditions are under which the lock-free version
significantly outpeforms a simple critical section</a>.
</p>
<p>
Remember that switching to a lock-free algorithm should be guided
by performance measurements.
Switching from a simple algorithm to a complex one shouldn't be done
unless you know that the simple algorithm is having trouble.
</p>
<p>
That said, here are some non-obvious advantages of a lock-free algorithm
over one that uses a simple lock.
(Later, we'll see how you can take advantage of
these techniques without actually going lock-free.)
</p>
<p>
Consider a program that uses a simple critical section to perform
something like the singleton constructor.
Instead of a fancy lock-free algorithm, we use the much simpler
version:
</p>
<pre>
CRITICAL_SECTION g_csSingletonX;
X *g_px = NULL;

X *GetSingletonX()
{
    EnterCriticalSection(&amp;g_csSingletonX);
    if (g_px == NULL)
    {
        g_px = new(nothrow) X();
    }
    LeaveCriticalSection(&amp;g_csSingletonX);
    return g_px;
}
</pre>
<p>
This simple code
can run into trouble if the constructor function itself requires
some locks,
because now you have to impose a
<a HREF="http://www.osronline.com/ddkx/ddtools/dv_8pkj.htm">
lock hierarchy</a>
in order to avoid a deadlock.
(And this becomes impossible if the constructor function
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/18/10154966.aspx#10155205">
belongs to code outside your control</a>.)
</p>
<p>
When working out what your lock hierarchy should be,
you may discover that you need to consolidate some locks.
This avoids the inversion problem,
but it also reduces your lock granularity.
You might decide to use a single lock to cover all singletons,
and then you later discover that you also have to extend the lock
that protects X's constructor to cover other operations on X.
</p>
<pre>
CRITICAL_SECTION g_csCommon;

// (updated to remove double-check lock because that just raises
// more questions that distract from the point of the article)
X *GetSingletonX()
{
    EnterCriticalSection(&amp;g_csCommon);
    if (g_px == NULL)
    {
        g_px = new(nothrow) X();
    }
    LeaveCriticalSection(&amp;g_csCommon);
    return g_px;
}

Y *GetSingletonY()
{
    EnterCriticalSection(&amp;g_csCommon);
    if (g_py == NULL)
    {
        g_py = new(nothrow) Y();
    }
    LeaveCriticalSection(&amp;g_csCommon);
    return g_py;
}

void X::DoSomething()
{
    EnterCriticalSection(&amp;g_csCommon);
    .. something ..
    LeaveCriticalSection(&amp;g_csCommon);
}
</pre>
<p>
Over time, your quiet little singleton lock has turned
into a high-contention lock in your system.
</p>
<p>
One nice thing about a lock-free algorithm is that since there
is no lock, it can't create inversion in a lock hierarchy.
(Of course, you have to be careful not to use the interlocked operations
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/15/10154245.aspx">
to build a private lock</a>, because that puts you back where
you started.)
</p>
<p>
Another nice consequence of a lock-free algorithm is that,
since there is no lock, you don't have to handle the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/09/12/463977.aspx">
<code>WAIT_<wbr>ABANDONED</wbr></code></a> case.
The data structure is never inconsistent; it passes atomically
from one consistent state to another.
Therefore, there's no need to write code to clean up leftover
inconsistency.
This came in handy in
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/13/10152929.aspx">
a case we looked at earlier</a>,
so that an application which crashes at an inopportune time will not
corrupt the shared data and require a server reboot.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-908313">
				<div id="div-comment-908313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">woodswan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908313">
			April 21, 2011 at 7:59 am</a>		</div>

		<p>A lock-free algorithm can make the multi-thread world simple, provided every thread plays the game in a unified way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908343">
				<div id="div-comment-908343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908343">
			April 21, 2011 at 11:50 am</a>		</div>

		<p>Wow &#8212; this is the exact same question I just asked on StackOverflow -&gt; <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/5680869/are-lock-free-algorithms-really-more-performant-than-their-lock-full-counterparts" rel="nofollow">stackoverflow.com/&#8230;/are-lock-free-algorithms-really-more-performant-than-their-lock-full-counterparts</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908353">
				<div id="div-comment-908353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cory Nelson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908353">
			April 21, 2011 at 1:12 pm</a>		</div>

		<p>There are also cases where a lock-free algorithm performs slower than its locked counterpart, like a lock-free queue versus a locked std::deque. &nbsp;The lock-free algorithm will scale better and so with enough contention will perform better, but it&#39;s definitely not for everybody and needs careful profiling.</p>
<p>In fact the ConcurrentQueue in .NET is actually not lock-free, but borrows some of the techniques to get a better performing deque with better scalability than a locked queue, while not having any of lock-free&#39;s other properties. &nbsp;Most apps don&#39;t actually require all the lock-free properties and just want something that performs well in the average case, so this isn&#39;t really a problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908373">
				<div id="div-comment-908373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908373">
			April 21, 2011 at 2:02 pm</a>		</div>

		<p>For the case of singleton you can almost always ensure the initialization happens before the first call to get and after the initialization can happen, with a little attention to detail and willingness to violate local concerns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908383">
				<div id="div-comment-908383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niclas Lindgren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908383">
			April 21, 2011 at 2:35 pm</a>		</div>

		<p>That singleton implementation looks dubious to me, g_xx can be published before the object is published fully and a concurrent call might end up using an object that isn&#39;t yet fully published. So that&#39;s another benefit of lock free algorithms, they avoid the difficult memory model issues. Or you will have to place a fence/memory barrier somewhere there to resolve the issue I think is there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908393">
				<div id="div-comment-908393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/suryp_4000_email.cz/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>suryp@email.cz</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908393">
			April 21, 2011 at 11:51 pm</a>		</div>

		<p>@Niclas Lindgren: Critical sections (and some other functions too) use the appropriate barriers to ensure memory ordering, as can be seen here:</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms686355%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms686355%28v=vs.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908403">
				<div id="div-comment-908403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niclas Lindgren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908403">
			April 22, 2011 at 5:37 am</a>		</div>

		<p>@suryo: Yes, inside and after the region is safe, however the reading of g_pX before the region is not, there is nothing preventing the compiler and/or CPU to publish the pointer reference to g_pX before it has published the entire object it is pointing to. that means that reading the g_pX before the section can cause another thread to grab the pointer and start using an object that isn&#39;t fully published. There needs to be a fence between the publishing of the g_pX and the creation/publication of the object itself. I still think my concern is valid on the above written code.</p>
<p>Also I somewhat made it sound like you don&#39;t need to worry about memory models for lock free algorithms, it is actually the very opposite, you need to pay close attention to them, but since you know you are doing lock free stuff you are very aware of them.</p>
<p>If you use locking algorithms, don&#39;t try to be clever, it will almost always fail. If memory is shared any access to it should be protected if you need the access to return the correct data (same data a single threaded program would see), if you don&#39;t need correct values, for some reason, then you can relax such things.</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/06/10150261.aspx" rel="nofollow">I already covered this topic</a>. The dangers of double-check locking wasn&#39;t the point of the article. I&#39;ll just delete the code. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908473">
				<div id="div-comment-908473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrismcb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908473">
			April 22, 2011 at 10:58 am</a>		</div>

		<p>Don&#39;t you have an issue with initializing the CriticalSection?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908503">
				<div id="div-comment-908503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110421-00/?p=10863#comment-908503">
			April 23, 2011 at 7:17 am</a>		</div>

		<p>@ChrisMcB</p>
<p>Once again, initialization of locks is obviously not the point of the article.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

