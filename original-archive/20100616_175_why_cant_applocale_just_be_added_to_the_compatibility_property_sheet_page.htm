<html>
<head>
<title>Why can't AppLocale just be added to the Compatibility property sheet page?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t AppLocale just be added to the Compatibility property sheet page?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 16, 2010 / year-entry #176</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>32</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter DoesNotMatter wants to know why AppLocale cannot just be added to the Compatibility property sheet as a dropdown option. One of the things about having a huge topic backlog is that if I just wait long enough, there's a good chance somebody else will answer it, and then I don't have to write anything....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter DoesNotMatter wants to know <a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/01/15/9319761.aspx#9327724"> why AppLocale cannot just be added to the Compatibility property sheet as a dropdown option</a>.</p>
<p> One of the things about having a huge topic backlog is that if I just wait long enough, there's a good chance somebody else will answer it, and then I don't have to write anything. And more often than not, that somebody else is <a href="http://blogs.msdn.com/b/michkap/"> Michael Kaplan</a>, who addressed this question in April 2010: Not only is AppLocale not installed by default, <a href="http://blogs.msdn.com/b/michkap/archive/2010/04/22/10000546.aspx"> AppLocale does everything in its power to remind you that you shouldn't be using it</a>! </p>
<p> AppLocale is the emergency compact spare tire that you pull out of your <a href="http://en.wikipedia.org/wiki/Trunk_(automobile)"> trunk</a>. Its job is to get you home, at which point you can fix the problem properly. You shouldn't be driving on your emergency compact spare as part of your normal daily routine. </p>
<p> Why does changing the <code>CP_ACP</code> code page require a logoff/logon cycle? Because without it, you would have a <a href="http://technet.microsoft.com/en-us/magazine/2008.11.windowsconfidential.aspx"> Frankenstein configuration situation</a>, where two programs think they're speaking the same language to each other, but aren't. This would happen if one program was launched before you changed the locale, and the other was launched after it. </p>
<p> Sure, if the communication was done through the clipboard <code>CF_TEXT</code> data format, or via one of the system-defined window messages that contain strings, then the window manager can convert from one code page to the other (though it will have to <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/06/03/10019214.aspx"> round-trip through Unicode</a>). But that's an awful lot of work for something that <i>isn't even a valid steady-state configuration</i>. And besides, it wouldn't even fix the other communication channels between processes, such as custom clipboard formats or private window messages. </p>
<p> For example, suppose you have a copy of LitWare running, and then you change the locale, and then you run another copy of LitWare. You then drag an object from the first copy of LitWare to the second. If LitWare's custom data format uses ANSI strings, then the first copy will encode the object name using the old locale, and the second copy will decode it with the new locale. And since this is a custom data format, there's nowhere the window manager or OLE can step in and say, "Oh, wait, I know what you're doing. There's a string embedded in that structure. Let me convert it for you." </p>
<p> I encounter this problem myself with a Chinese-language program I use. The program uses a Chinese code page rather than Unicode, and I have to use AppLocale to get it to display anything other than meaningless gibberish. (And even then, it still displays what appears to me to be mostly gibberish, but that part of the problem is my own fault for not knowing how to read very much Chinese.) I have to remember that I cannot copy/paste any Chinese characters into or out of the program because the result will be garbage due to the code page mismatch. </p>
<p> Mind you, you can just ignore the logoff reminder that appears when you change the default locale and continue running your Frankenstein configuration. Just understand that you're now in a world where programs can no longer communicate with each other reliably. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (32)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-840343">
				<div id="div-comment-840343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fy_ms_blogs_for_making_me_login_to_read</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840343">
			June 16, 2010 at 8:04 am</a>		</div>

		<p>Said logic works well when you apply it to those in charge of fixing things. Yeah, if AppLocale was intended for developers, then all for the better that it&#39;s not available by default and displays that nasty reminder every time you run it.</p>
<p>But if it&#39;s for end users, then what the hell are we supposed to do when AppLocale tells us this is just &quot;a temporary solution&quot;. Study Japanese and mail the long-dead company which produced the abomination so that they, just maybe, halt their work on some other abomination and fix this one? As if they would do that! Even if they were still in business, that is. Who cares about gaijins.</p>
<p>Now, multiply that by 9000, because every japanese software company out there apparently hates Unicode to the death, and where does that put us, end users?</p>
<p>I mean, seriously. Why does Windows have &quot;Application Compability&quot; tab then? It falls under the same logic: what if several apps think differently about the version of the OS they&#39;re using? Disaster ensues, so let&#39;s just delete the tab and leave users on their own.</p>
<p>Pre-emptive anty-snarky comment: Yeah, I know it&#39;s probably not your fault nor responsibility, Raymond. It&#39;s just that you defended the decision to not include AppLocale by default, you&#39;re going to get the responses.</p>
<div class="post">[<i>AppLocale is unrelated to backward compatibility because these apps that AppLocal fixes were <span style="text-decoration:underline;">already broken they day they shipped</span>. AppLocale is one of those &quot;above and beyond the call of duty&quot; things. (Besides, imagine if it were included by default. People would complain that it doesn&#39;t work in inter-process communication situations, and since it&#39;s included by default, it should work!) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840363">
				<div id="div-comment-840363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ashley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840363">
			June 16, 2010 at 8:17 am</a>		</div>

		<p>This is something that irks me like crazy as well, because I use Japanese code page programs alongside code page 1252 programs practically everyday. &nbsp;I wish there was a better solution for this. :( &nbsp;I know it&#39;s not Raymond&#39;s fault, and I don&#39;t blame him!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-840393">
				<div id="div-comment-840393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840393">
			June 16, 2010 at 9:06 am</a>		</div>

		<p>&gt; [&#8230;] because these apps that AppLocal [sic] fixes were already broken they day they shipped.</p>
<p>So were the apps that need to be fixed using shims, except for the fact that their brokenness was hidden by a implementation details in previous Windows versions.</p>
<div class="post">[<i>And that&#39;s the difference. Windows changed, and an application stopped working. But in the AppLocale case, the problem was not caused by a change to Windows. It was just a test scenario the application vendor never tried. (Or tried and rejected.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840403">
				<div id="div-comment-840403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840403">
			June 16, 2010 at 9:18 am</a>		</div>

		<p>Excuses that Raymond finds for other dev&#39;s (more likely ProgMan&#39;s) decisions always baffle me. Most often, it was a simple oversight or lack of resources, rather than a valid technical reason.</p>
<p>If you have LitWare configured to run with japanese locale, then they will exchange CF_TEXT data in the same locale. For other apps, which are now mostly UNICODE, CF_TEXT will be translated by the OS to CF_UNICODETEXT. This translation can be done because the system sets CF_LOCALE for the clipboard text automatically.</p>
<p>To exchange data with another non-unicode app &#8211; too bad. Life is not perfect. But at least there would be an option for it.</p>
<p>And OLE also assumes the text is in UNICODE format.</p>
<div class="post">[<i>I think you&#39;re misunderstanding the scenario. Application&nbsp;1 calls SetClipboardData(RegisterClipboardFormat(&quot;Custom&quot;), customData). customData is just an opaque binary blob as far as the clipboard and OLE are concerned. Application&nbsp;2 calls GetClipboardData(RegisterClipboardFormat(&quot;Custom&quot;)) and receives the opaque binary blob, tries to interpret it, and gets confused because the encoding is wrong. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-840433">
				<div id="div-comment-840433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840433">
			June 16, 2010 at 11:21 am</a>		</div>

		<div class="starred">
<span class="star">★</span> This blogging software is missing a key feature: a button that inserts a marker in the comments stream, labeled &quot;Bone-headed comments quota exceeded, &lt;Blogger Name&gt; gives up answering comments from this point down.&quot;
</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840443">
				<div id="div-comment-840443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840443">
			June 16, 2010 at 11:27 am</a>		</div>

		<p>Custom clipboard format doesn&#39;t have any encoding. It&#39;s a blob. And it&#39;s not like two arbitrary unrelated applications will use the same custom format.</p>
<p>If you set one app to the specific locale, you&#39;ll most likely will want to another related app to the same locale. And then they work. Easy!</p>
<p>Why do you try to find BS corner cases to justify a lame omission? If you want, you can find as BS arguments as this for almost every OS feature. For example, I can formulate a stronger case for not implementing FILE_ATTRIBUTE_OFFLINE feature, which you just love to mention.</p>
<div class="post">[<i>&quot;It&#39;s not like two arbitrary unrelated applications will use the same custom format.&quot; Oh, <a href="http://blogs.msdn.com/oldnewthing/archive/2008/03/18/8080183.aspx" rel="nofollow">CFSTR_FILEDESCRIPTOR</a> is just my imagination? Program running in AppLocale A drags a virtual file onto program running in AppLocale B. Hilarity ensues. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-840463">
				<div id="div-comment-840463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicole DesRosiers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840463">
			June 16, 2010 at 12:36 pm</a>		</div>

		<p>Yeah, I don&#39;t know what is up with Japanese programs not using Unicode. &nbsp;I purchased a program recently that was specifically labeled as supporting Windows Vista&#8230; and no Unicode. &nbsp;Seriously?</p>
<p>And setting my system code page to Japanese messes with a limited subset of English applications. &nbsp;Not the most pleasant world to live in.</p>
<p>(Note: I&#39;m not pleading for Windows to fix it &#8212; these are obviously developer problems.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840473">
				<div id="div-comment-840473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840473">
			June 16, 2010 at 1:49 pm</a>		</div>

		<p>When Windows first started using Unicode, there were characters in BIG5 (a traditional Chinese character encoding) that didn&#39;t appear in Unicode. &nbsp;If you were developing an application in Taiwan and switched to Unicode you would find yourself with all kinds of awkward design decisions to handle the corner cases caused by these missing characters. &nbsp;Or you could just stick with BIG5.</p>
<p>The Shift JIS encoding (used in Japan) seems to have had similar problems. &nbsp;For example, Shift JIS character 0x9883 maps to Unicode astral character U+216B4 which wasn&#39;t defined until 2001 (i.e. probably too late for Windows XP). &nbsp;In addition, to properly support astral characters you need to treat (Windows) Unicode strings as a variable-length encoding, so it&#39;s not much more convenient than sticking with the existing encoding.</p>
<p>&quot;Just use Unicode&quot; isn&#39;t the no-brainer it appears to be for Asian languages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-sgroot even thread-even depth-1" id="comment-840313">
				<div id="div-comment-840313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Sven+Groot+%5BMSFT%5D' rel='external nofollow' class='url'>Sven Groot [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840313">
			June 16, 2010 at 7:28 am</a>		</div>

		<p>I have to use AppLocale for Japanese applications on occasion, because for some reason *nobody* in Japan has come up with the idea to compile applications as Unicode. Come on, if Win9x compatibility is that important to you, just use the Microsoft Layer for Unicode already. It&#39;s 2010 for God&#39;s sake, can we please leave this whole ANSI nonsense behind us?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840493">
				<div id="div-comment-840493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840493">
			June 16, 2010 at 3:50 pm</a>		</div>

		<p>There&#39;s no point in trying to convince people they shouldn&#39;t use AppLocale. Those who are using it have no choice, because they have to run some applications in SJIS while some others have to run in 1252. No amount of discouraging will help here.</p>
<p>Furthermore, since Windows uses Unicode internally, and it is applications that are designed to work with a certain code page, Windows should have put the encoding setting on the application level, not as a global setting. Then AppLocale wouldn&#39;t have been necessary and instead of shimming (with the possible problems of that approach) you really could have a simple dropdown box in the property page that uses the normal way to do it that will just work.</p>
<div class="post">[<i>But when different apps are running with different code pages, IPC with non-Unicode content will not work. I drag a file out of Japanese Program and drop it onto Explorer and instead of copying the file, Explorer says &quot;File not found: &yuml;&para;&yen;&sect;&ordf;&tilde;&quot; because the Japanese program encoded the filename in SJIS and Explorer decoded it in 1252. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-840513">
				<div id="div-comment-840513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840513">
			June 16, 2010 at 6:24 pm</a>		</div>

		<p>Talking about file paths, I thought (at the time of WinXP) the decision of allowing NTFS to store file / folder names in both Unicode and other code pages a bit strange. I thought they should have stored everything in Unicode than apply translation on NTFS driver level.</p>
<p>In that way, the filesystem will be easier to read, file recovery softwares and network filesystem drivers will be easier to write and so on&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840623">
				<div id="div-comment-840623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fy_ms_blogs_for_making_me_login_to_read</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840623">
			June 17, 2010 at 7:23 am</a>		</div>

		<blockquote><p>
  People would complain that it doesn&#39;t work in inter-process communication situations, and since it&#39;s included by default, it should work!) -Raymond
</p></blockquote>
<p>You could at least let people disable the reminder and install applocale as a property page at their own risk. (Although I still think including it by default wouldn&#39;t earn you [Microsoft] more complaints than what you have now. But on the other hand that might have provoked developers to rely on AppLocale instead of switching to unicode, while with manual installation you can warn the user all you want)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-840733">
				<div id="div-comment-840733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840733">
			June 17, 2010 at 8:44 am</a>		</div>

		<p>@Cheong:</p>
<p>On the filesystem level, it&#39;s all UNICODE, except for those short names nobody cares about anymore. ANSI-&gt;UNICODE translation is done before CreateFileA even reaches kernel mode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840553">
				<div id="div-comment-840553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840553">
			June 17, 2010 at 3:44 am</a>		</div>

		<p>&quot;In addition, to properly support astral characters you need to treat (Windows) Unicode strings as a variable-length encoding&quot;</p>
<p>Uh, UTF-16 *is* a variable-length encoding. You *always* need to treat it as a variable-length encoding. If you do not, your code is broken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-840933">
				<div id="div-comment-840933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">variable length?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840933">
			June 17, 2010 at 7:14 pm</a>		</div>

		<p>wcslen+arrays of wchar_t does not have variable character length.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840923">
				<div id="div-comment-840923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840923">
			June 17, 2010 at 5:40 pm</a>		</div>

		<p>&quot;Uh, UTF-16 *is* a variable-length encoding. You *always* need to treat it as a variable-length encoding. If you do not, your code is broken.&quot;</p>
<p>I wonder how many such broken programs are out there, and how many of them predated UTF-16.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-841043">
				<div id="div-comment-841043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841043">
			June 18, 2010 at 6:00 am</a>		</div>

		<p>&quot;So were the apps that need to be fixed using shims, except for the fact that their brokenness was hidden by a implementation details in previous Windows versions.</p>
<p>[And that&#39;s the difference. Windows changed, and an application stopped working. But in the AppLocale case, the problem was not caused by a change to Windows. It was just a test scenario the application vendor never tried. (Or tried and rejected.) -Raymond]&quot;</p>
<p>In the ANSI era, was supporting running in a codepage other than the one for the language your application is localized into (and displaying meaningful text by&#8230; what, transliteration?) really something that anyone would ever say with a straight face should be a test scenario?</p>
<p>If not, then this was caused by a change to windows &#8211; specifically the change from ANSI to Unicode.</p>
<p>How should an ANSI application written in the ANSI era have been written that would have made it not be &#39;broken&#39; in a way that requires AppLocale to fix?</p>
<p>And, yeah, that&#39;s no excuse for shipping an ANSI application today. But you made a blanket statement that at least _seems_ to apply to every ANSI application ever made.</p>
<div class="post">[<i>The introduction of Unicode didn&#39;t change the ANSI rules. ANSI apps continued to behave the same way they always did. If they were run on a machine where the ANSI code page != the application&#39;s desired ANSI code page, the same exact weird things happened as before. So the behavior of Windows hasn&#39;t changed with respect to cross-code-page scenarios. Don&#39;t make me draw a diagram&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-840973">
				<div id="div-comment-840973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-840973">
			June 18, 2010 at 12:28 am</a>		</div>

		<p>I think many &quot;Unicode&quot; applications on Java/Windows/.Net only actually support UCS-2. There is not much to do to implicitly support UTF-16 if you don&#39;t to much to strings aside from storing them, but *any* processing (even just truncating to a fixed maximum size) must take surrogates characters into account. In the case of truncating, if the new last character turns out to be a high surrogate, it must be removed too.</p>
<p>However, it&#39;s still easier to support than UTF-8, because there is a maximum of two 16-bit words per code point.</p>
<p>That said, even UCS-4 could be called a variable length encoding if we start including diacritics in the picture.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-841103">
				<div id="div-comment-841103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841103">
			June 18, 2010 at 7:48 am</a>		</div>

		<p>&quot;However, [UTF-16]&#39;s still easier to support than UTF-8, because there is a maximum of two 16-bit words per code point.&quot;</p>
<p>Why does that make it easier?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-841133">
				<div id="div-comment-841133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841133">
			June 18, 2010 at 9:05 am</a>		</div>

		<p>&quot;Why does that make it easier?&quot;</p>
<p>When I wrote that, I was mainly thinking of the reasons there isn&#39;t a &quot;UTF-8 locale&quot;: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/michkap/archive/2006/10/11/816996.aspx" rel="nofollow">blogs.msdn.com/&#8230;/816996.aspx</a></p>
<p>I had in mind that writing the &quot;A&quot; function with the guarantee that a character would never take more than 2 chars was easier, but I didn&#39;t think seriously of reasons for it.</p>
<p>Thinking of it, I think it&#39;s easier because it&#39;s easier to cheat: Rather than a buffer, you can just use a char and a &quot;special case when there is a second one&quot;, rather than working with an array of one to four chars. Also, if you find a high or low UTF-16 surrogate on a given position, you instantly know where the character begins or ends; with UTF-8, if you don&#39;t land on the first char, you have no way of knowing whether you are on the second, third or four character without looking up the first char of the code point (or the start of the next).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-841023">
				<div id="div-comment-841023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jolyon Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841023">
			June 18, 2010 at 5:41 am</a>		</div>

		<p>@Sven G &amp; Nicole: &quot;because for some reason *nobody* in Japan has come up with the idea to compile applications as Unicode&quot;</p>
<p>The reason is that the Japanese along with a number of other Asian cultures, do not regard Unicode as the Silver Bullet To All Our Character Set Problems that the West typically does. &nbsp;Ironic really, given that ANSI/ASCII Luddites are accused of not thinking outside their cultures&#8230; the Unicode Evangelists are guilty of much the same blinkered thinking, just with different blinkers and the added smug arrogance of thinking they have solved The Problem and everyone else should come to their way of thinking (the ASCII/ANSI Luddites on the other hand typically know that there is a problem but simply don&#39;t believe it applies to them).</p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-841163">
				<div id="div-comment-841163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841163">
			June 18, 2010 at 10:28 am</a>		</div>

		<p>Asking small companies with software that is handled with various multibyte arrangements &#8211; ANSI, Shift-JIS, BIG5, and has many thousands of pages of translation in these various arrangements, spread out throughout the software (in .rc files, proprietary .bin files, .txt files, &amp;c), because, essentially, &quot;Microsoft said so&quot;, is hardly a justifiable business proposition.</p>
<p>We have software, that is very expensive to retranslate from scratch, and staff that is already working to capacity to maintain technical issues &amp; new features. &nbsp;Adding rewrites when the software already works on many different language versions of Windows and from which our customer base is not complaining of any limitations thereof, is &#8230; not sound logic.</p>
<p>Personally, this seems like &quot;if we ignore the problem hard enough its like it doesn&#39;t exist&quot;. &nbsp;The problem exists, and Microsofts unwillingness to make things work better for their customers is backwards thinking, IMO. &nbsp;Worrying about end-users expectatinos that they can run the same software in two different code-pages and expect them to interact properly seems goofy. &nbsp;There are lots of limitations in lots of software, and its quite often assumed that the problem is with the software, not with Windows. &nbsp;Its a strange world-view from where I&#39;m standing to think that user&#39;s blam the OS first: our support people will tell you in no uncertain terms that *everything* is our app&#39;s fault by default.</p>
<p>Making things better and giving a warning that &quot;by setting this app to non-standard code-page you understand that it will not necessarily work properly in every situation&quot; should be more than enough to cover thy ***, and inform the end-user that they&#39;re using something that&#39;s a shim (just as using any compatibility setting is not guaranteed to fix the software&#39;s problems, and may still experience issues with it). &nbsp;Why locale should be any diferent backwards compatiblity in the eyes of the user in terms of expectations of perfect function is beyond me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-841243">
				<div id="div-comment-841243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841243">
			June 18, 2010 at 5:46 pm</a>		</div>

		<p>@laonianren</p>
<p>That is not quite accurate.</p>
<p>And it is because there is no such thing as &quot;Shift-JIS&quot; or &quot;Big-5&quot;</p>
<p>All these standards have versions associated with them, same as Unicode.</p>
<p>For instance the Shift-JIS character 0x9883 was introduced added by JIS X 0213:2000 (in 2000) and to Unicode in Unicode 3.1 (March 2001)</p>
<p><a rel="nofollow" target="_new" href="http://charset.info/sjis-2004-std.txt" rel="nofollow">charset.info/sjis-2004-std.txt</a></p>
<p>The initial version of Unicode included enough characters to do correct round-tripping to all major code pages (including JIS and Big 5). Meantime the national code pages changed, and Unicode struggled to keep up.</p>
<p>It is also true that Windows did not keep up with Unicode too well.</p>
<p>But you know what? It also did not keep up with JIS and Big-5 either.</p>
<p>Yes, you could put some glyphs there and be rendered. But things like sorting, or the IME, will still not work.</p>
<p>So ANSI code pages is really not a solution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-841253">
				<div id="div-comment-841253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841253">
			June 18, 2010 at 5:48 pm</a>		</div>

		<blockquote><p>
  Why does changing the CP_ACP code page require a logoff/logon cycle?
</p></blockquote>
<p>Because it requires a reboot, and a reboot will log you off :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-841263">
				<div id="div-comment-841263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841263">
			June 18, 2010 at 5:53 pm</a>		</div>

		<p>@Cheong</p>
<p>NTFS does not store file/folder names in anything but UTF-16 (ok, in fact &quot;16-bit code units&quot;, because it has no smarts to deal with invalid surrogate sequences, or to prevent the use of undefined Unicode code points).</p>
<p>But definitely not in other code pages.</p>
<p>Maybe you are mixing it with FAT32?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-841273">
				<div id="div-comment-841273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841273">
			June 18, 2010 at 6:09 pm</a>		</div>

		<p>@Mihai</p>
<blockquote><p>
  Yes, you could put some glyphs there and be rendered.
</p></blockquote>
<p>You are wrong!</p>
<p>If you run an ANSI application on Unicode OS (NT/2000/XP/Vista/Win 7 and the equivalent servers), the strings in ANSI APIs will be converted to Unicode using the ANSI code page, processed by the Unicode API, and the result converted back to the ANSI code page.</p>
<p>If the Windows JIS tables are outdated then the JIS characters that don&#39;t map to Unicode will be lost.</p>
<p>So deciding to stick with Shift-JIS or Big5 solves exactly nothing (unless you run on Windows 9x :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-841293">
				<div id="div-comment-841293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tagir Valeev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841293">
			June 19, 2010 at 10:45 am</a>		</div>

		<p>AppLocale surely does some strange stuff. I installed it once on my XP Pro, started some applications in Japanese locale (my default non-unicode codepage is Russian cp1251), then haven&#39;t used AppLocale for a long time, but haven&#39;t deinstalled it. Then I bought and installed <span style="color:red;">Program XYZ</span> Russian version and in some places including Start menu icons, some shell extension context menus I saw random Japanese characters instead of proper Russian names (looked like cp1251 string was treated as Shift-JIS or maybe UTF-8). Seems that <span style="color:red;">Program XYZ</span> installer uses non-unicode codepage somewhere during installation, but still it&#39;s strange how installed AppLocale can cause such behavior. I went crazy and spent like 10 hours talking with <span style="color:red;">XYZ</span> support. They suggested to send registry dumps to them, tweak some registry options and reinstall <span style="color:red;">Program XYZ</span> several times, but nothing helped. The last suggestion from support was to reinstall Windows from the scratch, something I wasn&#39;t happy to do, so I decided to live with it (at least I could manually rename Start menu shortcuts). Several months later somebody told me that problem might be in AppLocale, I deinstalled it and reinstalled <span style="color:red;">Program XYZ</span> and everything become nice. I was quite upset that <span style="color:red;">XYZ</span> support hasn&#39;t suggest this option to me.</p>
<div>[<i>Probably because you didn&#39;t tell them you were using AppLocale. They&#39;re not psychic. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-841303">
				<div id="div-comment-841303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841303">
			June 19, 2010 at 12:51 pm</a>		</div>

		<p>&quot;We have software, that is very expensive to retranslate from scratch&quot;</p>
<p>You don&#39;t have to retranslate from scratch. You can convert the files to Unicode, you know. In fact, the Resource Compiler always convert to Unicode when compiling .RC files, even if these original files were ANSI, and in fact it is required.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-841313">
				<div id="div-comment-841313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841313">
			June 19, 2010 at 1:15 pm</a>		</div>

		<p>In any case, you can suppress this warning message by using environmental variables directly instead:</p>
<p><a rel="nofollow" target="_new" href="http://tedwvc.wordpress.com/2010/04/28/experimenting-with-microsoft-applocale/" rel="nofollow">tedwvc.wordpress.com/&#8230;/experimenting-with-microsoft-applocale</a></p>
<p>Not to mention that some applications have &quot;Paste Special&#8230;&quot; to paste things in another clipboard format.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-841323">
				<div id="div-comment-841323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841323">
			June 19, 2010 at 3:23 pm</a>		</div>

		<p>@Tagir Valeev</p>
<p>You are right.</p>
<p>AppLocales leaves some &quot;junk&quot; behind that affects encoding in some applications. I have also seen it in installers (so it might be something msi related?)</p>
<p>The solution is to delete a temporary file: %WINDIR%AppPatchAppLoc.tmp</p>
<p>(it is created again when you run AppLocale though)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-841563">
				<div id="div-comment-841563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841563">
			June 22, 2010 at 12:46 am</a>		</div>

		<p>Does that Chinese program happens to called <span style="color:red;">XYZ</span>?</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/21/77681.aspx" rel="nofollow">You must be new here</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-841693">
				<div id="div-comment-841693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tagir Valeev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100616-00/?p=13693#comment-841693">
			June 22, 2010 at 11:26 am</a>		</div>

		<p>&gt; Probably because you didn&#39;t tell them you were using AppLocale. They&#39;re not psychic. -Raymond</p>
<p>Right, but they had enough information. They asked me to download some special software to gather information about my system and send resulting .cab-archive to them. Before sending I unpacked that cabinet and examined it a little. It included list of all installed programs as well as dumps of many registry keys, lists of system files and so on. Of course I haven&#39;t said them like &#39;See, guys, I have dozens of programs installed and AppLocale among them, maybe it causes the problem?&#39; If I had suspected AppLocale to cause the problem, why would I call the support at the first place?</p>
<p>Well, I admit that here&#39;s the wrong place to blame &quot;XYZ&quot; support. I just wanted to second the point that using AppLocale may lead to very strange problems.</p>
<div class="post">[<i>Perhaps it didn&#39;t capture the registry key that specified that AppLocale was active, or it did but they didn&#39;t know how to interpret it. Troubleshooting complex systems is hard. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

