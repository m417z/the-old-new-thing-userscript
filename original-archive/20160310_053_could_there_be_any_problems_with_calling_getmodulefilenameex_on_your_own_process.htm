<html>
<head>
<title>Could there be any problems with calling GetModuleFileNameEx on your own process?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Could there be any problems with calling GetModuleFileNameEx on your own process?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 10, 2016 / year-entry #54</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Yes.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In response to my discussion of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/07/16/10624298.aspx">
why you can get an
<code>ERROR_INVALID_HANDLE</code> from
<code>Get&shy;Module&shy;File&shy;Name&shy;Ex</code>
even though the process handle is valid</a>,
Joshua asks,
"<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/07/16/10624298.aspx#10628287">Calling such methods as these on your own process
has no such caveats, right</a>?"
</p>
<p>
Well, one of the issues is that the process you are querying from
hasn't yet completed its initialization.
That's not an issue here,
because the call is coming from within the process itself.
(If it weren't initialized, then your code wouldn't be running.)
</p>
<p>
Another issue is that
"the process you are inspecting may be in the middle of updating its
module table,
in which case the call may simply fail with a strange error like
<code>ERROR_PARTIAL_COPY</code>."
That issue doesn't go away just because you're making the call from
within the process.
Another thread in the process might be in the middle of a
<code>Load&shy;Library</code> call,
and the module manager is adding a new entry to its table
to track the new module.
If you try to inspect the module table while it is being updated,
you might see a partially-loaded module,
you might see a linked list that is temporarily corrupt
(because it is in the middle of being rewritten),
you might get a corrupt string (because the file name length was
copied to the entry, but the characters of the file name haven't
been copied yet),
or you might get an access violation
(the pointer to the string hasn't been initialized yet).
Any of those things can result in
<code>Get&shy;Module&shy;File&shy;Name&shy;Ex</code>
failing,
even when called on its own process.
</p>
<p>
Fortunately, there's a solution:
Don't use
<code>Get&shy;Module&shy;File&shy;Name&shy;Ex</code>
to get information about your own process.
Just use the regular
<code>Get&shy;Module&shy;File&shy;Name</code> function.
This function queries information for the current process,
and since it always runs in-process,
it can use critical sections and other synchronization objects
so that it can gain access to the shared information,
making sure that nobody is modifying the data structures while it
is reading them.
</p>
<p>
As noted in the original article,
"These APIs don't really work by the normally-accepted definitions of 'work'."
They are best-effort,
and sometimes the best effort fails.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-1229603">
				<div id="div-comment-1229603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229603">
			March 10, 2016 at 7:28 am</a>		</div>

		<p>Part of the problem is that GetModuleFileNameEx was originally a PSAPI function, despite its function name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1229621">
				<div id="div-comment-1229621" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229621">
			March 10, 2016 at 8:18 am</a>		</div>

		<p>Doesn&#8217;t this boil down to the 2nd paragraph of the Remarks section in the MSDN documentation for Get­Module­File­Name­Ex?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1229631">
				<div id="div-comment-1229631" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229631">
			March 10, 2016 at 8:44 am</a>		</div>

		<p>Another mauled import. Most of the comments are missing from the linked article.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1229641">
				<div id="div-comment-1229641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229641">
			March 10, 2016 at 10:24 am</a>		</div>

		<p>One of the few comments present in that article even references the linked comment, which isn&#8217;t present.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even depth-2 parent" id="comment-1229651">
				<div id="div-comment-1229651" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229651">
			March 10, 2016 at 11:12 am</a>		</div>

		<p>That&#8217;s just sad.  There&#8217;s usually a lot of good information in the comments of these articles.  Wonder if the WayBack machine has all of these articles captured?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-3" id="comment-1229671">
				<div id="div-comment-1229671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229671">
			March 10, 2016 at 11:44 am</a>		</div>

		<p>The old blog used some type of javascript to load the comments and archive.org could not really handle it so not all the archived posts have working comments, depends on the year, the older stuff is probably ok. Even MS KB articles are broken on archive.org now because of silly javascript design for what should just be a page with some text!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ranta even thread-odd thread-alt depth-1 parent" id="comment-1229642">
				<div id="div-comment-1229642" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229642">
			March 10, 2016 at 11:00 am</a>		</div>

		<p>The IsBadReadPtr topic in MSDN Library warns that &#8220;Dereferencing potentially invalid pointers can disable stack expansion in other threads&#8221;, presumably by swallowing the guard page exception. Is there a similar risk when using invalid pointers with cross-process functions like Get­Module­File­Name­Ex or ReadProcessMemory? I hope the kernel would not raise the exception in this case (regardless of whether the handle refers to the calling process) and would not reset the PAGE_GUARD bit either.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-2 parent" id="comment-1229741">
				<div id="div-comment-1229741" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229741">
			March 10, 2016 at 7:56 pm</a>		</div>

		<p>IsBadxxxPtr functions should be wiped clean from your memory, completely.<br />
I would assume that ReadProcessMemory/WriteProcessMemory would check the VM tables using the virtual memory management functions, like VirtualQueryEx. This would allow you to check the status of the memory page that the pointer is associated with but do it in a way that doesn&#8217;t just dereference it and then swallow any exceptions.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1229903">
				<div id="div-comment-1229903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229903">
			March 11, 2016 at 3:41 pm</a>		</div>

		<p>Can someone explain why the IsBadXxxPtr functions don&#8217;t just call VirtualQuery and check the result?</p>
<p>I mean, they still wouldn&#8217;t be very useful, but at least they&#8217;d do what they say on the tin, and not break unrelated things.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1229913">
				<div id="div-comment-1229913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229913">
			March 11, 2016 at 3:47 pm</a>		</div>

		<p>Fire up that time machine! IsBadXxxPtr was introduced in 1989, four years before VirtualQuery.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1229914">
				<div id="div-comment-1229914" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229914">
			March 11, 2016 at 4:37 pm</a>		</div>

		<p>So why not change it now?</p>
<p>Are there likely to be applications that rely on it silently removing guard page status?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1229924">
				<div id="div-comment-1229924" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229924">
			March 11, 2016 at 4:48 pm</a>		</div>

		<p>Why bother changing something that is marked &#8220;Don&#8217;t call this!&#8221;?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1229934">
				<div id="div-comment-1229934" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229934">
			March 11, 2016 at 5:23 pm</a>		</div>

		<p>Because if it was changed, it wouldn&#8217;t need to be marked &#8220;Don&#8217;t call this!&#8221; any more?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-4 parent" id="comment-1229943">
				<div id="div-comment-1229943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229943">
			March 11, 2016 at 7:10 pm</a>		</div>

		<p>The problem is, even if it was changed, it would still be useless. While checking the VM related stuff would avoid the situation where it eats the guard page exception, it would still end up with the rest of the problems. In this case !bad != good.<br />
The major reason why that set of functions are frowned upon is that the pointer you pass it can point anywhere, if you get the base address of your executable image and pass it to IsBadReadPtr, then it will come up with it being readable, if you create a new heap, never allocate anything in it and grab any pointer from that heap and pass it to IsBadReadPtr or even IsBadWritePtr then it will being a valid pointer. The problem is, in the first case, reading the executable is normally pointless, and in the second case it is obviously not valid due to the heap never being allocated.<br />
So the problem with this set of functions is that it doesn&#8217;t verify if the pointer is good, it can&#8217;t for hopefully obvious reasons, all it can do is verify that you are able to access the memory.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1229953">
				<div id="div-comment-1229953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229953">
			March 11, 2016 at 8:02 pm</a>		</div>

		<p>As I said already, they would still not be very useful, but at least they would do what they&#8217;re supposed to.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip odd alt depth-4" id="comment-1229963">
				<div id="div-comment-1229963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229963">
			March 11, 2016 at 10:02 pm</a>		</div>

		<p>Well, if you think of it from the implementers point of view, you change the function from just trying to dereference a pointer and just eating SEH exceptions to actually checking the VM page properties. But at the end of the day the reason why you shouldn&#8217;t use them hasn&#8217;t changed, so you have just put work into functions that will never be called.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1229691">
				<div id="div-comment-1229691" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229691">
			March 10, 2016 at 1:15 pm</a>		</div>

		<p>Or just use QueryFullProcessImageName (or GetProcessImageFileName before Vista) to get your own EXE&#8217;s name.  These functions don&#8217;t rely upon the LDR tables at all.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-msn odd alt depth-2 parent" id="comment-1229703">
				<div id="div-comment-1229703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229703">
			March 10, 2016 at 4:45 pm</a>		</div>

		<p>And GetMappedFileName can be used on any module and works even when the process is newly created or it bypasses the normal loader. Actually you probably shouldn&#8217;t ever use GetModuleFileName[Ex].</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1229973">
				<div id="div-comment-1229973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">immibis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1229973">
			March 11, 2016 at 10:13 pm</a>		</div>

		<p>Doesn&#8217;t GetMappedFileName rely on the implementation detail that modules are memory-mapped?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-msn odd alt depth-4" id="comment-1230414">
				<div id="div-comment-1230414" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1230414">
			March 15, 2016 at 8:59 pm</a>		</div>

		<p>That is true I guess. But it has worked that way for as long as Windows has had memory mapped files AFAIR, and it doesn&#8217;t seems sensible to do it any other way. Maybe there could be special kinds of memory mapped files in the future, but Microsoft kinda have to support those by GetMappedFileName as well or a lot of existing software will break.</p>
<p>This may not be what Raymond likes to hear, but fact is that the slightly undocumented way is much more robust.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-4" id="comment-1230444">
				<div id="div-comment-1230444" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160310-00/?p=93141#comment-1230444">
			March 16, 2016 at 1:07 am</a>		</div>

		<p>The thing is, there is also stuff documented if you know where to look. CreateFileMapping has a flag, SEC_IMAGE, that is used to load executable files, the kernel mode version ZwCreateSection (yes, in kernel land they call it a section), actually refers you to CreateFileMapping for descriptions of these flags. There is also the SEC_IMAGE_NO_EXECUTE flag which is documented to not do the forced integrity checking of an executable and not notify driver callbacks used to notify of executable images being loaded.<br />
If you then do VirtualQuery, you can find pages marked as MEM_IMAGE, which specifies that the region is an executable image section.<br />
So while it isn&#8217;t explicitly documented, there is enough of the infrastructure visible to infer this.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

