<html>
<head>
<title>The PowerPC 600 series, part 5: Rotates and shifts</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 5: Rotates and shifts</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 10, 2018 / year-entry #183</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Get out your Swiss army knife.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The Swiss army knife
instruction of the PowerPC 600 series instruction set
is <code>rlwinm</code>,
which stands for "rotate left word immediate and mask."
</p>
<pre>
    rlwinm  rd, ra, imm5a, imm5b, imm5c
    rlwinm. rd, ra, imm5a, imm5b, imm5c ; also updates cr0
</pre>
<p>
This instruction does everything except wash your floor.
</p>
<p>
First it takes the current value of the <var>ra</var> register
and rotates it left by <var>imm5a</var> bits.
Then it keeps all the bits
<var>imm5b</var> to <var>imm5c</var>, inclusive,
and clears all the other bits.
If <var>imm5b</var> is greater than <var>imm5c</var>,
the bits to keep wrap around!
(Don't forget that bit zero is the most significant bit.)
The result of all this is placed in the <var>rd</var> register.
</p>
<p>
Let's take a few examples.
</p>
<pre>
    rlwinm  rd, ra, 5, 6, 20
</pre>
<p>
Here, we take <var>ra</var>, rotate it left by 5 bits,
and then keep bits 6 through 20.
Since bit 0 is the most significant bit, then that means
that the mask is
</p>
<table BORDER=0 CELLPADDING=3 CLASS="cp3"
    STYLE="border-collapse: collapse; text-align: center">
<tr>
<td STYLE="width: 1pc">0</td>
<td STYLE="width: 1pc">1</td>
<td STYLE="width: 1pc">2</td>
<td STYLE="width: 1pc">3</td>
<td STYLE="width: 1pc">4</td>
<td STYLE="width: 1pc">5</td>
<td STYLE="width: 1pc">6</td>
<td STYLE="width: 1pc">7</td>
<td STYLE="width: 1pc">8</td>
<td STYLE="width: 1pc">9</td>
<td STYLE="width: 1pc">10</td>
<td STYLE="width: 1pc">11</td>
<td STYLE="width: 1pc">12</td>
<td STYLE="width: 1pc">13</td>
<td STYLE="width: 1pc">14</td>
<td STYLE="width: 1pc">15</td>
<td STYLE="width: 1pc">16</td>
<td STYLE="width: 1pc">17</td>
<td STYLE="width: 1pc">18</td>
<td STYLE="width: 1pc">19</td>
<td STYLE="width: 1pc">20</td>
<td STYLE="width: 1pc">21</td>
<td STYLE="width: 1pc">22</td>
<td STYLE="width: 1pc">23</td>
<td STYLE="width: 1pc">24</td>
<td STYLE="width: 1pc">25</td>
<td STYLE="width: 1pc">26</td>
<td STYLE="width: 1pc">27</td>
<td STYLE="width: 1pc">28</td>
<td STYLE="width: 1pc">29</td>
<td STYLE="width: 1pc">30</td>
<td STYLE="width: 1pc">31</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
</tr>
<tr>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>0</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>3</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>F</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>F</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>F</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>8</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>0</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>0</code></td>
</tr>
</table>
<p>
This comes out to <code>0x03FFF800</code>.
Therefore, the result of the operation is
</p>
<pre>
     rd = rotl(ra, 5) &amp; 0x03FFF800
</pre>
<p>
The other case is where the bit count wraps around:
</p>
<pre>
    rlwinm  rd, ra, 5, 20, 6
</pre>
<p>
This time, we start by setting bit 20, and continue to the end
of the word, and then wrap around and start setting bits starting
at bit 0,
and then finally stop when we get to bit 6.
</p>
<table BORDER=0 CELLPADDING=3 CLASS="cp3"
    STYLE="border-collapse: collapse; text-align: center">
<tr>
<td STYLE="width: 1pc">0</td>
<td STYLE="width: 1pc">1</td>
<td STYLE="width: 1pc">2</td>
<td STYLE="width: 1pc">3</td>
<td STYLE="width: 1pc">4</td>
<td STYLE="width: 1pc">5</td>
<td STYLE="width: 1pc">6</td>
<td STYLE="width: 1pc">7</td>
<td STYLE="width: 1pc">8</td>
<td STYLE="width: 1pc">9</td>
<td STYLE="width: 1pc">10</td>
<td STYLE="width: 1pc">11</td>
<td STYLE="width: 1pc">12</td>
<td STYLE="width: 1pc">13</td>
<td STYLE="width: 1pc">14</td>
<td STYLE="width: 1pc">15</td>
<td STYLE="width: 1pc">16</td>
<td STYLE="width: 1pc">17</td>
<td STYLE="width: 1pc">18</td>
<td STYLE="width: 1pc">19</td>
<td STYLE="width: 1pc">20</td>
<td STYLE="width: 1pc">21</td>
<td STYLE="width: 1pc">22</td>
<td STYLE="width: 1pc">23</td>
<td STYLE="width: 1pc">24</td>
<td STYLE="width: 1pc">25</td>
<td STYLE="width: 1pc">26</td>
<td STYLE="width: 1pc">27</td>
<td STYLE="width: 1pc">28</td>
<td STYLE="width: 1pc">29</td>
<td STYLE="width: 1pc">30</td>
<td STYLE="width: 1pc">31</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">0</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
<td STYLE="border: solid 1px black">1</td>
</tr>
<tr>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>F</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>E</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>0</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>0</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>0</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>F</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>F</code></td>
<td COLSPAN=4 STYLE="border: 1px black; border-style: none solid"><code>F</code></td>
</tr>
</table>
<p>
The net result is therefore
</p>
<pre>
     rd = rotl(ra, 5) &amp; 0xFE000FFF
</pre>
<p>
The Windows debugger for PowerPC was not in use for very long,
and consequently its disassembler isn't particularly advanced.
But one thing it does do for you is unpack the last two parameters
and tell you what the final mask is.
</p>
<pre>
10ae222c 54642d0c rlwinm  r4, r3,5,20,6            MASK=0xfe000fff
</pre>
<p>
(Yes, the disassembler can't make up its mind whether it puts a space
after a comma or not. Like I said, the debugger didn't last long
enough to go through multiple iterations of polish.)
</p>
<p>
With the <code>rlwinmi</code> instruction, we can build many things.
(In all examples, bit index arithmetic wraps around at 32.)
</p>
<ul>
<li>
<p>
    Rotate left by <var>n</var> bits:
</p>
<pre>
    rlwinm  rd, ra, n, 0, 31
</pre>
<p>
    Rotate left by <var>n</var> bits,
    and specify a mask that starts at bit 0 
    and ends at bit 31.
    This mask is <code>0xFFFFFFFF</code>,
    which means that no bits get cleared.
</p>
</li>
<li>
<p>
    Rotate right by <var>n</var> bits:
</p>
<pre>
    rlwinm  rd, ra, 32 - n, 0, 31
</pre>
<p>
    Rotate left by
    32&nbsp;&minus;&nbsp;<var>n</var> bits,
    and specify a mask that starts at bit 0 
    and ends at bit 31.
    This mask is <code>0xFFFFFFFF</code>,
    which means that no bits get cleared.
</p>
</li>
<li>
<p>
    Shift left by <var>n</var> bits:
</p>
<pre>
    rlwinm  rd, ra, n, 0, 31 - n
</pre>
<p>
    Rotate left by <var>n</var>
    and clear the rightmost <var>n</var> bits.
    In Windows NT, the most common version of this is
</p>
<pre>
    rlwinm  rd, ra, 2, 0, 29
</pre>
<p>
    which shifts a value left two places.
    This multiplies it by four, which is a common
    operation when indexing an array of pointers.
</p>
</li>
<li>
<p>
    Shift right by <var>n</var> bits:
</p>
<pre>
    rlwinm  rd, ra, 32 - n, n, 31
</pre>
<p>
    Rotating left by 32&nbsp;&minus;&nbsp;<var>n</var>
    is the same as rotating right by <var>n</var>.
    We then clear the leftmost <var>n</var> bits
    by saying we want to keep the bits starting from
    position <var>n</var> to the end of the register.
</p>
</li>
<li>
<p>
    Pluck bit <var>n</var> out of a 32-bit value:
</p>
<pre>
    rlwinm  rd, ra, n + 1, 31, 31
</pre>
<p>
    Rotate left by <var>n</var>&nbsp;+&nbsp;1
    to position the desired bit in position 31,
    then clear all the other bits.
</p>
</li>
<li>
<p>
    Extract a bitfield of length <var>m</var> at position <var>n</var>:
</p>
<pre>
    rlwinm  rd, ra, n + m, 32 - m, 31
</pre>
<p>
    Rotate left by <var>n</var>&nbsp;+&nbsp;<var>m</var>,
    which right-aligns the field,
    then clear all but the rightmost <var>m</var> bits.
</p>
</li>
<li>
<p>
    Take the least significant <var>m</var> bits of a value
    and position it so it can be inserted into a bitfield
    starting at position <var>n</var>:
</p>
<pre>
    rlwinm  rd, ra, 32 - n - m, n, n + m - 1
</pre>
<p>
    Rotate right by
    <var>n</var>&nbsp;+&nbsp;<var>m</var>,
    which positions the field into its final location,
    then clear all the bits that aren't used to represent the field.
</p>
</li>
<li>
<p>
    Set a bitfield
    of length <var>m</var> at
    position <var>n</var> to zero:
</p>
<pre>
    rlwinm  rd, ra, 0, n + m, n - 1
</pre>
<p>
    A rotation of zero does nothing,
    but here's where we exploit the wraparound behavior
    of the mask:
    We keep the bits starting at
    <var>n</var>&nbsp;+&nbsp;<var>m</var>, which is the last
    bit past the end of the field,
    and continue keeping bits through the end of the register,
    and then wrap around and keep bits starting at bit zero,
    and stop at bit <var>n</var>&nbsp;&minus;&nbsp;1,
    which is the last bit before the start of the field.
</p>
</li>
<li>
<p>
    Zero-extend a byte to a word and do not update <var>cr0</var>:
</p>
<pre>
    rlwinm  rd, ra, 0, 24, 31
</pre>
<p>
    We perform no rotation and zero out the most significant 24 bits.
    We can also do zero extension with <code>andi.</code>,
    but the <code>rlwinm</code> instruction lets us do it
    without updating <var>cr0</var>.
</p>
<li>
<p>
    Zero-extend a halfword to a word and do not update <var>cr0</var>:
</p>
<pre>
    rlwinm  rd, ra, 0, 16, 31
</pre>
<p>
    This time, after doing no rotation, we zero out
    the most significant 16 bits.
    Again, we could have done this with <code>andi.</code>,
    but this way lets us do it without updating <var>cr0</var>.
</p>
</ul>
<p>
There is also a version of the instruction where the rotation amount
comes from a register.
</p>
<pre>
    rlwnm   rd, ra, rb, imm5a, imm5b
    rlwnm.  rd, ra, rb, imm5a, imm5b ; also updates cr0
</pre>
<p>
"Rotate left word and mask" is like "rotate left word immediate
and mask", except that the rotation amount is specified by the
value of a register.
(Since rotation by a multiple of 32 bits is a nop,
it doesn't matter whether bits 0 through 26 in <var>rb</var>
are respected or ignored.)
</p>
<pre>
    rlwimi  rd, ra, imm5a, imm5b, imm5c
    rlwimi. rd, ra, imm5a, imm5b, imm5c ; also updates cr0
</pre>
<p>
"Rotate left word immediate and mask insert"
rotates the value in the <var>ra</var> register left
by <var>imm5a</var> bits,
and then copies bits <var>imm5b</var> through <var>imm5c</var>
of the rotated value
(wrapping around if necessary)
to <var>rd</var>,
leaving the other bits of <var>rd</var> alone.
This instruction is most useful for storing a value
into a bitfield:
</p>
<pre>
    rlwimi  rd, ra, 32 - n - m, n, n + m - 1
</pre>
<p>
The above instruction takes the least significant <var>m</var>
bits of <var>ra</var> and sets them into a bitfield of size <var>m</var>
starting at position <var>n</var> in <var>rd</var>.
We did the math for this before, when we tried out
<code>rlwinm</code> to position a bitfield.
By using <code>rlwimi</code>, we get to store it.
</p>
<p>
Okay, now we can get to the true shift instructions.
</p>
<pre>
    slw     rd, ra, rb      ; rd = ra &lt;&lt; (rb % 64)
    slw.    rd, ra, rb      ; rd = ra &lt;&lt; (rb % 64), update cr0

    srw     rd, ra, rb      ; rd = ra &gt;&gt; (rb % 64)
    srw.    rd, ra, rb      ; rd = ra &gt;&gt; (rb % 64), update cr0
</pre>
<p>
The <code>slw</code> and <code>srw</code>
instructions shift a register left or right by
an amount specified by the value of another register.
Notice that the shift amount is taken mod 64,
rather than mod 32.
This means that a shift by 63 will set the result to zero,
but a shift by 64 will do nothing.
</p>
<pre>
    sraw    rd, ra, rb      ; rd = (int32_t)ra &gt;&gt; (rb % 64), update carry
    sraw.   rd, ra, rb      ; rd = (int32_t)ra &gt;&gt; (rb % 64), update carry and cr0

    srawi   rd, ra, imm5    ; rd = (int32_t)ra &gt;&gt; imm5, update carry
    srawi.  rd, ra, imm5    ; rd = (int32_t)ra &gt;&gt; imm5, update carry and cr0
</pre>
<p>
The <code>sraw</code> instruction performs an arithmetic right shift
by an amount specified by the <var>rb</var> register,
and the <code>srawi</code> instruction does the same, but with
an immediate shift amount.
</p>
<p>
These four shift instructions are special because they always update carry:
The carry bit is set if and only if the original value was negative
and any bits shifted out were nonzero.
This rule for the carry bit allows you to follow the right-shift instruction
with an <code>addze</code> to perform a division by a power of two
that rounds toward zero.
(If you omit the <code>addze</code>,
then the right shift performs a division by a power of two that
rounds toward minus infinity.)
</p>
<p>
<b>Exercise</b>:
How would you do a division by a power of two that rounds toward
positive infinity?
</p>
<p>
Here's a sample code sequence to perform a C-style logical not
operation:
</p>
<pre>
    cmpwi   r3,0                ; set EQ if value was zero
    mfcr    r3                  ; r3 = cr
    rlwinm  r3,r3,eq+1,31,31    ; save the EQ bit
</pre>
<p>
Similarly, you can calculate the C logical <code>&lt;</code>
and <code>&gt;</code> operations by performing the comparison
and extracting the <var>lt</var> or <var>gt</var> bit.
To get the other three comparisons <code>!=</code>,
<code>&lt;=</code> and <code>&gt;=</code>,
you follow up with <code>xori r3, r3, 1</code>.
</p>
<p>
Okay, those are the logical and shifting instructions.
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180813-00/?p=99475">
Next time</a>,
we'll look at memory access.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1356225">
				<div id="div-comment-1356225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356225">
			August 10, 2018 at 7:58 am</a>		</div>

		<p>I assume, &#8220;shift left&#8221; and &#8220;shift right&#8221; is defined to match the usual arithmetic meaning (shifting left =&gt; multiply byf 2), or do they even flip this, to match their bit numbering?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1356275">
				<div id="div-comment-1356275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356275">
			August 10, 2018 at 12:25 pm</a>		</div>

		<p>Yes, the shift left and right have the usual arithmetic meaning.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1356265">
				<div id="div-comment-1356265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://keyj.emphy.de/' rel='external nofollow' class='url'>KeyJ</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356265">
			August 10, 2018 at 8:39 am</a>		</div>

		<p>I&#8217;m wondering what hardware engineers think of rlwinm and friends.<br />
Are they straightforward to implement and we should ask ourselves why other ISAs didn&#8217;t have such instructions? Or are they a nightmare to implement, and a case could be made against having these instructions at all?<br />
How would one implement them in the first place? The rotation part is simple, it&#8217;s the mask/insert part that makes me wonder.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1356425">
				<div id="div-comment-1356425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356425">
			August 12, 2018 at 1:59 pm</a>		</div>

		<p>The hardware is fairly straightforward.</p>
<p>It basically exposes the nuts and bolts of one of the standard barrel shifter architectures (google &#8220;Energy-delay tradeoffs in 32-bit static shifter designs&#8221; for a paper that covers it). The mask generation is already there (the PPC version is more flexible than usual, but not in a way that adds significant complexity), so is a bunch of multiplexers that perform the masked insertion on the final output stage, since they&#8217;re necessary to implement arithmetic shifts anyway (logical shifts and rotates could make do with just a bunch of ANDs).</p>
<p>The reason other ISAs don&#8217;t have this has little to do with the circuity (this is rarely ever the reason) and everything to do with how many bits it takes to encode these instructions. Two 5-bit register numbers, three 5-bit immediates for the shift distance and mask begin/end positions, and two more bits to encode the variants (&#8220;rlwinm&#8221;, &#8220;rlwinm.&#8221;, &#8220;rlwimi&#8221;, &#8220;rlwimi.&#8221;) makes for 27 bits used; that&#8217;s 1/32th of the entire 32-bit opcode space (which is expensive real estate that you never get to take back!) dedicated to shifts. The original PPC designers clearly deemed that worthwhile, other ISAs thought differently.</p>
<p>PPC then got burned a few years later when they defined the 64-bit version. Direct 64-bit equivalents would need 6-bit shift distances and mask positions, for an extra 3 bits taken. But 30 bits (1/4 of the opcode space) is just too much. So 64-bit PPC keeps the same underlying HW for 64-bit shifts but doesn&#8217;t let you encode all combinations of the mask begin/end immediates anymore, just certain combinations deemed valuable (the 32-bit versions of instructions are still there and keep their generality though).</p>
<p>64-bit ARM (A64 encoding) found a good compromise: it has 3 basic &#8220;bitfield move&#8221; instructions (BFM, SBFM, UBFM) that usually disassemble to one of 15 (!) different aliases. BFM corresponds to PPC &#8220;rlwimi&#8221;, UBFM corresponds to PPC &#8220;rlwinm&#8221;, and SBFM has no direct equivalent in PPC and is effectively a &#8220;rlwinm&#8221; with sign extension of the result. But unlike PPC which lets you specify the shift amount and mask begin/end independently, A64 only gives you variants that either move a contiguous bitfield from anywhere to a field starting at bit 0, or a contiguous bitfield starting at bit 0 to anywhere. That means you only need two immediates (saving 6 bits, which puts us in totally manageable territory for instruction lengths), and the general anywhere-to-anywhere operation, if desired, can be done in two steps. (Move the target bits to bit 0 in the first step, and from there to their final destination in the second).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1356505">
				<div id="div-comment-1356505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356505">
			August 13, 2018 at 8:27 am</a>		</div>

		<p>That is fascinating!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-even depth-1" id="comment-1356295">
				<div id="div-comment-1356295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356295">
			August 10, 2018 at 2:11 pm</a>		</div>

		<p>Once I learned a couple of things about PowerPC <a href="https://codegolf.stackexchange.com/a/87000/9298" rel="nofollow">for a code golf</a>, and I distinctly remember the awe discovering this mad instruction that could do the strangest things to bitfields. Along with barrel shifter you get for free in a lot of ARM instructions, it made me think that these RISCy architectures try to compensate complex instructions with creative usage of shifts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle even thread-odd thread-alt depth-1 parent" id="comment-1356345">
				<div id="div-comment-1356345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356345">
			August 11, 2018 at 4:10 pm</a>		</div>

		<p>I don&#8217;t know how others feel, but this instruction doesn&#8217;t feel very RISC-like to me.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1356385">
				<div id="div-comment-1356385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Moskevitz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356385">
			August 12, 2018 at 6:26 am</a>		</div>

		<p>It is called Reduced ISC not Minimal ISC&#8230;  :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1356395">
				<div id="div-comment-1356395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vas Crabb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356395">
			August 12, 2018 at 7:09 am</a>		</div>

		<p>RISC is defined by minimising addressing modes, only performing memory access with dedicated load/store instructions, and minimising interlocks.  There&#8217;s nothing in these instructions that violates the core RISC values.  They don&#8217;t access memory, they don&#8217;t have exotic addressing modes, they access at most two source registers and one destination register (plus condition/exception codes if applicable).  The only thing that&#8217;s a bit un-RISC is that rlwimi implicitly uses its destination as a source.  The mask generation isn&#8217;t actually particularly complex in silicon &#8211; it&#8217;s no worse than a full lookahead barrel shifter.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1356355">
				<div id="div-comment-1356355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Younes Manton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356355">
			August 11, 2018 at 8:37 pm</a>		</div>

		<p>&gt; Exercise: How would you do a division by a power of two that rounds toward positive infinity?</p>
<p>How about this:</p>
<p>; r3 = dividend, quotient rounded to +inf<br />
; r4 = divisor_log2<br />
sraw r5, r3, r4<br />
oris  r3, r3, 0x8000<br />
sraw r3, r3, r4<br />
addze r3, r5</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1356785">
				<div id="div-comment-1356785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356785">
			August 17, 2018 at 7:02 am</a>		</div>

		<p>If you can assume that the value is not 0x80000000, then</p>
<p>subf ra, ra, 0<br />
sraw rd, ra, rb (or rlwinm if rb is a constant)<br />
subf rd, rd, 0</p>
<p>But if 0x80000000 is a possibility, then I was going to add 2^rb-1 before shifting, but it looks like your solution is cleverer.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1356415">
				<div id="div-comment-1356415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465#comment-1356415">
			August 12, 2018 at 10:20 am</a>		</div>

		<p>I&#8217;m reminded of OISC instruction sets (which have exactly one instruction and therefore do not need opcodes).  The traditional one instruction is &#8220;subtract and branch if less than or equal to zero,&#8221; but I have to wonder how much complexity you would need to add to rlwinm to make it Turing-complete all by itself.  Probably just some branch semantics, but maybe if you can use the program counter as a destination, you don&#8217;t even need that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

