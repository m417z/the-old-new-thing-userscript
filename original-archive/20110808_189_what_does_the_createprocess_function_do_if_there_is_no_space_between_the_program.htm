<html>
<head>
<title>What does the CreateProcess function do if there is no space between the program name and the arguments?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What does the CreateProcess function do if there is no space between the program name and the arguments?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 8, 2011 / year-entry #190</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In an old discussion of why the Create­Process function modifies its command line, commenter Random832 asked, "What if there is no space between the program name and arguments - like "cmd/?" - where does it put the null then?" The Create­Process function requires a space between the program name and arguments. If you leave out...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In an old discussion of
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/06/01/9673254.aspx">
why the <code>Create&shy;Process</code> function modifies its command line</a>,
commenter Random832 asked,
"<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/06/01/9673254.aspx#9701807"
>What if there is no space between the program name and arguments
- like "cmd/?" - where does it put the null then?</a>"
</p>
<p>
The <code>Create&shy;Process</code> function requires a space between the
program name and arguments.
If you leave out the space, then the arguments are considered as part
of the program name
(and you'll almost certainly get
<code>ERROR_<wbr>FILE_<wbr>NOT_<wbr>FOUND</code> back).
</p>
<p>
It sounds like Random832 has confused <code>Create&shy;Process</code> command
line parsing with <code>cmd.exe</code> command line parsing.
Clearly the two parsers are different; you can see this even without
playing with spaces between the program name and the arguments:
</p>
<pre>
C:\&gt;C:\Program Files\Windows NT\Accessories\wordpad.exe
'C:\Program' is not recognized as an internal or external command,
operable program or batch file.
</pre>
<p>
If the command line had been parsed by <code>Create&shy;Process</code>,
this would have succeeded in running the Wordpad program,
because, as I noted in the original article,
the <code>Create&shy;Process</code> function 
modifies its command line in order to find
where the program name ends and the command lines begin,
an example of which can be found
<a HREF="http://msdn.microsoft.com/ms682425.aspx">
in the <code>Create&shy;Process</code> documentation</a>.
In this case, it would have plunked the null character into each
of the spaces in the command line, finding that each one failed,
until it finally tried treating the entire string as the program name,
at which point it would have succeeded.
The fact that it failed demonstrates that <code>Create&shy;Process</code>
didn't do the parsing.
</p>
<p>
The <code>cmd.exe</code> program permits the space between a program
name and its arguments to be elided if the arguments begin with a character
not permitted in file names.
Once it figures out what you're running, and it determines that what
you're running is a program,
it call the <code>Create&shy;Process</code> function
with an explicit application and command line.
</p>
<p>
But you don't have to take my word for it.
You can just see for yourself.
(In fact, this is exactly what I did to investigate the issue
in the first place.)
</p>
<pre>
C:&gt;ntsd -2 cmd.exe
</pre>
<p>
Two windows will open, one for your debugger and one for <code>cmd.exe</code>.
(You are welcome to replace <code>ntsd</code> with your favorite debugger.
I chose <code>ntsd</code> because&mdash;at least until Windows&nbsp;XP&mdash;it
came preinstalled, thereby avoiding
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2010/01/07/9944907.aspx#9945268">
multiplying the problem from one to two</a>.)
</p>
<p>
In the debugger, set a breakpoint on
<code>kernel32!<wbr>Create&shy;ProcessW</code>,
then resume execution.
In the <code>cmd.exe</code> window, type <code>cmd/?</code>.
The breakpoint will fire, and you can look at the parameters:
</p>
<pre>
Breakpoint 0 hit
eax=0046f600 ebx=00000000 ecx=004f8de0 edx=00000000 esi=00000000 edi=00000001
eip=757820ba esp=0046f544 ebp=0046f704 iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000246
kernel32!CreateProcessW:
757820ba 8bff            mov     edi,edi
0:000&gt; dd esp l4
0046f544  4a5e3dd7 004f5420 004f8db0 00000000
0:000&gt; du 004f5420
004f5420  "C:\Windows\system32\cmd.exe"
0:000&gt; du 004f8db0
004f8db0  "cmd /?"
</pre>
<p>
Observe that <code>cmd.exe</code> did its own manual path search
to arrive at an executable of
<code>C:\<wbr>Windows\<wbr>system32\<wbr>cmd.exe</code>,
and also that it secretly inserted a space between the
<code>cmd</code> and the slash.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-929213">
				<div id="div-comment-929213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929213">
			August 8, 2011 at 7:30 am</a>		</div>

		<p>A corollary: create a text file called &quot;C:Program&quot; and you&#39;ll find that various (badly registered) things fail because CreateProcess&#39;s search never reaches the executable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929223">
				<div id="div-comment-929223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929223">
			August 8, 2011 at 9:02 am</a>		</div>

		<p>Yeah, that is why windows has a warning built in against doing exactly that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929243">
				<div id="div-comment-929243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LocalH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929243">
			August 8, 2011 at 9:47 am</a>		</div>

		<p>I wasn&#39;t able to get Win7 to trigger such a warning. Admittedly I use Directory Opus as an Explorer replacement (for purposes of file management) but I explicitly did this in Explorer (both as a directory and as a file) and got no such warning.</p>
<div class="post">[<i>The warning is raised at logon, not when you create the folder. (If you think about it you&#39;ll realize why.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929253">
				<div id="div-comment-929253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LocalH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929253">
			August 8, 2011 at 9:57 am</a>		</div>

		<p>I stand corrected. It makes perfect sense once I mull over it a bit. Thanks, Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929263">
				<div id="div-comment-929263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">googly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929263">
			August 8, 2011 at 10:01 am</a>		</div>

		<p>As an aside, CD doesn&#39;t require you to enclose a path containing spaces in double quotes (anymore? I seem to recall it didn&#39;t use to work).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929273">
				<div id="div-comment-929273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929273">
			August 8, 2011 at 10:30 am</a>		</div>

		<p>That&#39;s the problem with the &quot;do what I mean&quot;, not &quot;do what I said&quot; command line interpretation. &nbsp;Yes, it&#39;s more user-friendly in general, but it breaks corner cases.</p>
<p>Programming APIs like CreateProcess should be DWIS &#8212; if I ask you to run the program named C:Program with an argument of Filesfoobar.exe, then you darn well better do that. &nbsp;Then, programmers wouldn&#39;t write buggy code in the first place, and there&#39;s no longer a need for &quot;You have a file named C:Program&quot; warning at logon.</p>
<p>User-facing APIs (like Cmd.exe) can be more DWIM, but I&#39;d argue that even a command line should be DWIS, like most *nix shells.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929283">
				<div id="div-comment-929283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MikeCaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929283">
			August 8, 2011 at 10:43 am</a>		</div>

		<p>Adam, in Windows 3.1 when spaces were obviously illegal, why would anyone bother quoting paths? I mean, you don&#39;t need to guard against something that&#39;s impossible.</p>
<p>Suddenly, in Windows 95, spaces were legal. However, the old programs (or batch files, or&#8230;) don&#39;t know anything about this, so why would they add quotes to the paths that were obviously never going to need them?</p>
<p>These days, it&#39;s obvious that paths CAN have spaces. However, it was not always the case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929293">
				<div id="div-comment-929293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929293">
			August 8, 2011 at 11:06 am</a>		</div>

		<p>@Mike: What&#39;s there to quote? &nbsp;If spaces are illegal, why on earth are you trying to run a program under &quot;C:Program Files&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929303">
				<div id="div-comment-929303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929303">
			August 8, 2011 at 12:38 pm</a>		</div>

		<p>@Adam Rosenfield: Perhaps you&#39;re taking user supplied input in the form of a file path, or expanding an environment variable. &nbsp;In Windows 3.1 %TEMP% couldn&#39;t contain spaces, now it can.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929313">
				<div id="div-comment-929313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929313">
			August 8, 2011 at 1:19 pm</a>		</div>

		<p>@Matt: Point taken. &nbsp;Still, it&#39;s a failure in the design of CreateProcess, in that it requires you to combine the program name and arguments into one big string which it then parses. If instead if were more like the Unix exec* family of functions, where each the program name/arguments are passed individually (either as separate function parameters or as separate array elements), there&#39;s no ambiguity, and no parsing is required. If suddenly user input or an expanded environment variable contains a space, that space just carries on into the argument as expected without any semantic changes.</p>
<p>But, since we&#39;re stuck with decisions made decades ago, we have to deal with it. In the interest of backwards compatibility, making CreateProcess DWIM in this regard was the smart decision, as it avoided breaking a large number of programs/batch files. We can&#39;t all live in an ivory tower.</p>
<div class="post">[<i>Not sure where you got the idea that CreateProcess requires you to combine the program name and options. You are welcome to pass them separately, in which case no parsing is performed. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929323">
				<div id="div-comment-929323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929323">
			August 8, 2011 at 2:09 pm</a>		</div>

		<p>[Not sure where you got the idea that CreateProcess requires you to combine the program name and options. You are welcome to pass them separately, in which case no parsing is performed. -Raymond]</p>
<p>Blargh, I had a brain fart. &nbsp;I&#39;d temporary forgotten that, since in the context of the discussion, we were only discussing the case where a program makes CreateProcess do the parsing (and therefore the lpApplicationName == NULL case). &nbsp;That case should not have been allowed in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929333">
				<div id="div-comment-929333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929333">
			August 8, 2011 at 3:16 pm</a>		</div>

		<p>Passing the program name and options seperately means argv[0] is the first argument though, which breaks pretty much every program that reads the command line.</p>
<div class="post">[<i>That&#39;s why <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/05/15/597984.aspx" rel="nofollow">there&#39;s a convention</a> governing the command line. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929343">
				<div id="div-comment-929343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929343">
			August 8, 2011 at 3:57 pm</a>		</div>

		<p>@Adam: &quot;That case should not have been allowed in the first place.&quot;</p>
<p>Remember that having CreateProcess parse the command line would be a lot less &#39;harmful&#39; if you are restricted to old 8.3 file names. So when it was introduced, it was fine in that setting.</p>
<p>@Simon: &quot;Passing the program name and options seperately means argv[0] is the first argument though, which breaks pretty much every program that reads the command line.&quot;</p>
<p>Or you just pass it twice, just like the Unix exec() functions. (A typical call to exec (taken from a library I wrote) looks something like &quot;execlp(debugger, debugger, exename, pid, (char*)NULL);&quot;. Note the repetition of &#39;debugger&#39; &#8212; one for the process to exec, one for argv[0].)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-929363">
				<div id="div-comment-929363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929363">
			August 8, 2011 at 6:02 pm</a>		</div>

		<p>@laonianren: I presume that&#39;s the reason why I had the &quot;C:Program&quot; folder on my company installed machine.</p>
<p>@Adam: Remember that when CreateProcess() was introduced, it&#39;s been given the role as the replacement for WinExec(). So it has to support that type of parsing at some point or the old applications would be moving a lot more slowly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-929373">
				<div id="div-comment-929373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929373">
			August 8, 2011 at 6:06 pm</a>		</div>

		<p>Oh, I&#39;m somehow surprised to see my MSDN forum account and the Blogs account combined here. :O</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929383">
				<div id="div-comment-929383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929383">
			August 8, 2011 at 9:47 pm</a>		</div>

		<p>While you can argue that the OS shouldn&#39;t be in the business of parsing command lines, you then have to look at the alternative: every single app that accepts a command line has to parse it themselves. What are the odds that every single app that attempts to parse a command line does it correctly?</p>
<p>If you&#39;re a Unix programmer, you have to either parse the command line yourself to pass to exec(), or use a shell (maybe via system(3)). If you parse the command line yourself, you&#39;ll probably forget to handle quotes, or do it wrong (How do you handle escaped quotes? What about escaped escape characters?). Since you&#39;re a Unix programmer, you&#39;ve probably never executed a file from a path with spaces in it, so it would never even occur to you to test such a thing.</p>
<p>Should you decide on punting the parsing task off to the shell, now you have two problems. The user has to know to appropriately escape all special characters (piping, redirection, globbing, environment variables, etc.), meaning that not only do they have to know that the command line is being parsed by a shell, but they have to know which one so that they can use the correct escaping rules. Furthermore, you don&#39;t get the PID of the program you&#39;re trying to run, so you can&#39;t easily debug it or kill it if it uses too much CPU. You also can&#39;t reliably redirect its stdio because the shell may do its own redirection due to special characters being on the command line. As has been noted here in the past, ShellExecute on Windows has similar problems.</p>
<p>The nice thing about CreateProcess is that it allows you to pull a command line from the Registry or a config file and just run it. You can reliably find out if the executable even exists, get the PID of your spawned process to debug it, redirect its stdio, or kill it if it takes too long. The quoting rules for your app will be the same as for any app that calls CreateProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929353">
				<div id="div-comment-929353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929353">
			August 8, 2011 at 4:29 pm</a>		</div>

		<p>@Raymond: I was replying to your comment to @Adam, which implied that you *could* do CreateProcess(&quot;winword.exe&quot;, &quot;mydocument.txt&quot;, &#8230;);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929403">
				<div id="div-comment-929403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929403">
			August 9, 2011 at 4:41 am</a>		</div>

		<p>Hmm. I&#39;ve been led to think that DOS, or FAT, did support the ability to create file names with spaces, just practically nobody cared, knew about, or used it correctly? (Informal reference: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2007/12/17/6785519.aspx" rel="nofollow">blogs.msdn.com/&#8230;/6785519.aspx</a>).</p>
<p>And at that time a lot of humans would have been still been happily coding Y2K bugs :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929443">
				<div id="div-comment-929443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929443">
			August 9, 2011 at 7:55 am</a>		</div>

		<p>@Gabe: How many programs are there out there that accept command lines and are not shells of some sort? &nbsp;The vast majority of which launch other programs do so using fixed or nearly-fixed command lines (usually with a small handful of configurable parameters such as filenames), in which case nobody should be doing any parsing. &nbsp;It&#39;s like parameterized SQL queries &#8212; don&#39;t construct the query string using primitive string operations which then need to be parsed, leading to potential SQL injection attacks; instead use parameterization to pass in the intended parameters.</p>
<p>If your program is a shell, then obviously it follows its own parsing/quoting rules. &nbsp;If your program is not a shell, why is it accepting entire command lines? &nbsp;The argument is the same for Unix &#8212; more likely than not, you know what your command line parameters are, so you can just pass them directly to exec(). &nbsp;Or maybe you&#39;re a shell, in which case you parse the command yourself; if you&#39;re not a shell, why are you parsing command lines?</p>
<p>Yes, many Unix programmers often mishandle filenames with spaces in them, but that&#39;s a whole other can of worms (<a rel="nofollow" target="_new" href="http://www.dwheeler.com/essays/fixing-unix-linux-filenames.html" rel="nofollow">http://www.dwheeler.com/&#8230;/fixing-unix-linux-filenames.html</a> is a long but good diatribe on the subject).</p>
<p>&quot;The nice thing about CreateProcess is that it allows you to pull a command line from the Registry or a config file and just run it. You can reliably find out if the executable even exists, get the PID of your spawned process to debug it, redirect its stdio, or kill it if it takes too long. The quoting rules for your app will be the same as for any app that calls CreateProcess.&quot;</p>
<p>Finding out if an executable exists, getting the PID of the spawned process, redirecting its stdio, and killing it have nothing to do with how it parses command lines. &nbsp;You can do all of those things just as easily with Unix&#39;s fork()+exec().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929393">
				<div id="div-comment-929393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929393">
			August 9, 2011 at 4:12 am</a>		</div>

		<p>APIs in DOS/16-bit windows should have been forward compatible with APIs which can handle names including spaces, even though the old APIs didn&#39;t support spaces. That&#39;s how a *good* API is designed.</p>
<div class="post">[<i>Then you will be thrilled to know that MS-DOS was well-designed, because <a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/07/09/9825126.aspx" rel="nofollow">it did support spaces in file names at the API level</a>. Another case of asking for a feature that already exists. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929523">
				<div id="div-comment-929523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929523">
			August 9, 2011 at 12:22 pm</a>		</div>

		<p>@Raymond, Ivan</p>
<p>I didn&#39;t know that DOS allowed spaces; that makes my statement &quot;Remember that having CreateProcess parse the command line would be a lot less &#39;harmful&#39; if you are restricted to old 8.3 file names&quot; wrong, because the same issue happened then.</p>
<p>@Adam: Finding out if an executable exists, getting the PID of the spawned process, redirecting its stdio, and killing it have nothing to do with how it parses command lines. &nbsp;You can do all of those things just as easily with Unix&#39;s fork()+exec().</p>
<p>Check out the original statement again. Let me restate it. If you want to run a process, you can do two things: fork/exec directly, or go through a shell (e.g. system()).</p>
<p>If you go fork/exec, *you* have to parse the command line yourself, because exec won&#39;t do it for you. This leads to the potential for bugs and inconsistencies.</p>
<p>If you go through a shell, then those other things come into play more. If you want the PID for the process you&#39;re actually interested in, system() doesn&#39;t give it to you. Even if you fork then exec the shell yourself, your child process PID will be that of the shell, not of the process you&#39;re actually interested in. (Maybe you could explicitly use the shell&#39;s &#39;exec&#39;. That probably would work.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929613">
				<div id="div-comment-929613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929613">
			August 9, 2011 at 11:18 pm</a>		</div>

		<p>@Evan: Don&#39;t think of DOS as dealing with filenames with spaces. Think of it as every filename is composed of 8.3 characters (after all, less and they&#39;re padded). The restriction is that they cannot start with the deleted file character. Otherwise all APIs took 8.3 filenames only (and handled the padding gracefully should you supply a short string).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929623">
				<div id="div-comment-929623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929623">
			August 10, 2011 at 12:15 am</a>		</div>

		<p>Adam Rosenfield: Most programs that accept command lines aren&#39;t shells. If you are a programmer, your build utility (e.g. make) and your debugger are examples. If you are a Unix user, inetd, sendmail, cron, procmail, and xargs are all examples. If you are just a regular user, then anything that supports MIME types (web browser, email client, news reader) will have to accept command lines for the viewer programs they execute. Do you ever use a program (like git or svn) that has a &quot;Run my preferred editor&quot; feature? If so, it has a command line for your editor. Heck, nowadays even most Unix kernels have to parse command lines to support the #! syntax.</p>
<p>Of all those examples, xargs is the only one that possibly doesn&#39;t need to actually parse a command line string into separate strings to pass to exec. Every other one either needs to pass the command line to a shell or parse it for exec. I&#39;ve never, ever seen a configuration file format that allows you to specify command lines as separate arguments so that they don&#39;t have to be split up for the call to exec.</p>
<p>In the Windows world, command lines are all over the registry. Any user of HKEY_CLASSES_ROOT will be dealing with command lines. If you register a service, you give the Service Control Manager a command line for your service. No doubt the Add/Remove Programs control panel stores command lines for updating and uninstalling apps. I think that the registry value that specifies your screen saver is the only place where you may only give a file name rather than a whole command line.</p>
<p>Quite the opposite from you, I can think of very few examples where a program has a nearly fixed command line hardcoded into it such that it would be able to call exec without having to first parse a string into substrings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-929743">
				<div id="div-comment-929743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas Rejbrand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929743">
			August 10, 2011 at 10:00 am</a>		</div>

		<p>Although it has never happened to me, a &#39;well-known&#39; problem in the Swedish version of Windows (at least in older versions of the operating system) is that the &quot;C:Program&quot; folder is opened every time you log in to Windows. This is probably caused by someone trying to open a program in the &quot;C:Program Files&quot; folder or one of its subfolders, which should not even exist in a Swedish version of Windows. (Perhaps Raymond has already covered this topic in his excellent blog, since he &#8212; rightfully, I have to say &#8212; is interested in Sweden and the Swedish language.) I think that this is no longer a problem, since the directory is now called &quot;Program Files&quot; in every language, although the name of the directory is now translated &#39;on-the-fly&#39; by Explorer. (I am sorry if I am not 100 % accurate here.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-929883">
				<div id="div-comment-929883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110808-00/?p=9953#comment-929883">
			August 11, 2011 at 9:59 am</a>		</div>

		<p>There are still some bad installers that will create a folder called &quot;C:Program&quot; (sometimes putting files there, and sometimes not).</p>
<p>I tried to install a TeX or LaTeX interpreter recently, and it insisted on being installed to a short folder name directly under C:. &nbsp;I don&#39;t know if this is because the program was ported from another OS, but come on, Windows has allowed spaces in folder and file names for what, 16 or 17 years now? &nbsp;Bad programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

