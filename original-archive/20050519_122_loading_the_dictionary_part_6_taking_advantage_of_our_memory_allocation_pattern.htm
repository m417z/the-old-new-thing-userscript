<html>
<head>
<title>Loading the dictionary, part 6:  Taking advantage of our memory allocation pattern</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Loading the dictionary, part 6:  Taking advantage of our memory allocation pattern</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 19, 2005 / year-entry #123</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Designing a memory allocator that exploits our memory allocation pattern.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
After our latest round of optimization, the 100ms barrier teased us,
just milliseconds away.
Profiling the resulting program reveals that
60% of the CPU is spent in <code>operator new</code>.
Is there anything we can do about that?
</p>
<p>
Indeed, we can.
Notice that the memory allocation pattern for the strings in our
dictionary is quite special:
Once a string is allocated into the dictionary,
it is never modified or freed while the dictionary is in use.
When the dictionary is freed, all the strings are deleted at once.
This means that we can design an allocator tailored to this
usage pattern.
</p>
<p>
I don't know whether there is a standard name for this thing,
so I'm just going to call it a <code>StringPool</code>.
A string pool has the following characteristics:
</p>
<ul>
<li>Once you allocate a string, you can't modify or free it
    as long as the pool remains in existence.</p>
<li>If you destroy the string pool, all the strings in it are destroyed.
</ul>
<p>
We implement it by using the same type of fast allocator that
the CLR uses:  A single pointer.
[25 May 2005: The blog server software corrupts the diagram, sorry.]
</p>
<table CELLPADDING=0 CELLSPACING=0>
<tr>
<td ALIGN=center STYLE="border: solid 1px black; width: 20em">allocated</td>
<td ALIGN=center STYLE="border: solid 1px black; border-left: none; width: 15em">free</td>
</tr>
<tr>
<td></td>
<td ALIGN=left><span STYLE="position: relative; left: -.5em">&uarr;</span></td>
</tr>
<tr>
<td></td>
<td ALIGN=left><span STYLE="position: relative; left: -.5em">p</span></td>
</tr>
</table>
<p>
To allocate memory, we just increment <code>p</code> by the number
of bytes we need.
If we run out of memory, we just allocate a new block, point <code>p</code>
to its start, and carve the memory out of the new block.
Destroying the pool consists of freeing all the blocks.
</p>
<p>
Note also that this memory arrangement has very good locality.
Instead of scattering the strings all over the heap, they are
collected into one location.  Furthermore, they are stored in
memory <strong>in exactly the order we're going to access them</strong>,
which means no wasted page faults or cache lines.
(Well, you don't know that's the order we're going to access them,
but it's true.
This is one of those
"<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/05/11/416430.aspx"
>performance-guided designs</a>"
I mentioned a little while ago.)
</p>
<pre>
<font COLOR=blue>class StringPool
{
public:
 StringPool();
 ~StringPool();
 LPWSTR AllocString(const WCHAR* pszBegin, const WCHAR* pszEnd);

private:
 union HEADER {
  struct {
   HEADER* m_phdrPrev;
   SIZE_T  m_cb;
  };
  WCHAR alignment;
 };
 enum { MIN_CBCHUNK = 32000,
        MAX_CHARALLOC = 1024*1024 };

private:
 WCHAR*  m_pchNext;   // first available byte
 WCHAR*  m_pchLimit;  // one past last available byte
 HEADER* m_phdrCur;   // current block
 DWORD   m_dwGranularity;
};</font> // colorization fixed 25 May
</pre>
<p>
Each block of memory we allocate begins with a
<code>StringPool::HEADER</code> structure, which we use
to maintain a linked list of blocks as well as providing enough
information for us to free the block when we're done.
</p>
<p>
<strong>Exercise</strong>: Why is <code>HEADER</code> a union
containing a structure rather than just being a structure?
What is the significance of the <code>alignment</code> member?
</p>
<pre>
<font COLOR=blue>inline RoundUp(DWORD cb, DWORD units)
{
    return ((cb + units - 1) / units) * units;
}

StringPool::StringPool()
 : m_pchNext(NULL), m_pchLimit(NULL), m_phdrCur(NULL)
{
 SYSTEM_INFO si;
 GetSystemInfo(&amp;si);
 m_dwGranularity = RoundUp(sizeof(HEADER) + MIN_CBCHUNK,
                           si.dwAllocationGranularity);
}</font>
</pre>
<p>
At construction, we compute the size of our chunks.
We base it on the system allocation granularity, choosing
the next multiple of the system allocation granularity
that is at least <code>sizeof(HEADER) + MIN_CBCHUNK</code> in size.
Since a chunk is supposed to be a comfortably large block of
memory, we need to enforce a minimum chunk size to avoid having
an enormous number of tiny chunks if we happen to be running on
a machine with a very fine allocation granularity.
</p>
<pre>
<font COLOR=blue>LPWSTR StringPool::AllocString(const WCHAR* pszBegin, const WCHAR* pszEnd)
{
 size_t cch = pszEnd - pszBegin + 1;
 LPWSTR psz = m_pchNext;
 if (m_pchNext + cch &lt;= m_pchLimit) {
  m_pchNext += cch;
  lstrcpynW(psz, pszBegin, cch);
  return psz;
 }

 if (cch > MAX_CHARALLOC) goto OOM;
 DWORD cbAlloc = RoundUp(cch * sizeof(WCHAR) + sizeof(HEADER),
                                                          m_dwGranularity);
 BYTE* pbNext = reinterpret_cast&lt;BYTE*&gt;(
                  VirtualAlloc(NULL, cbAlloc, MEM_COMMIT, PAGE_READWRITE));
 if (!pbNext) {
OOM:
  static std::bad_alloc OOM;
  throw(OOM);
 }

 m_pchLimit = reinterpret_cast&lt;WCHAR*&gt;(pbNext + cbAlloc);
 HEADER* phdrCur = reinterpret_cast&lt;HEADER*&gt;(pbNext);
 phdrCur-&gt;m_phdrPrev = m_phdrCur;
 phdrCur-&gt;m_cb = cbAlloc;
 m_phdrCur = phdrCur;
 m_pchNext = reinterpret_cast&lt;WCHAR*&gt;(phdrCur + 1);

 return AllocString(pszBegin, pszEnd);
}</font>
</pre>
<p>
To allocate a string, we first try to carve it out of the
remainder of the current chunk.  This nearly always succeeds.
</p>
<p>
If the string doesn't fit in the chunk, we allocate a new chunk
based on our allocation granularity.
To avoid integer overflow in the computation of the desired
chunk size, we check against a fixed "maximum allocation" and
go stright to the out-of-memory handler if it's too big.
</p>
<p>
Once we have a new chunk, we link it into our list of
<code>HEADER</code>s and abandon the old chunk.
(Yes, this wastes some memory, but in our usage pattern,
it's not much, and trying to squeeze out those last few bytes
isn't worth the added complexity.)
Once that's done, we try to allocate again; this second time
will certainly succeed since we made sure the new chunk was big
enough.  (And any decent compiler will detect this as a tail
recursion and turn it into a "goto".)
</p>
<p>
There is subtlety here.  Notice that we do not update
<code>m_pchNext</code> until after we're sure we either
satisfied the allocation or allocated a new chunk.
This ensures that our member variables are stable at the points
where exceptions can be thrown.
Writing exception-safe code is hard, and
seeing the difference between code that is and isn't exception
safe is often quite difficult.
</p>
<pre>
<font COLOR=blue>StringPool::~StringPool()
{
 HEADER* phdr = m_phdrCur;
 while (phdr) {
  HEADER hdr = *phdr;
  VirtualFree(hdr.m_phdrPrev, hdr.m_cb, MEM_RELEASE);
  phdr = hdr.m_phdrPrev;
 }
}</font>
</pre>
<p>
To destroy the string pool, we walk our list of chunks and
free each one.  Note the importance of copying the <code>HEADER</code>
out of the chunk before we free it!
</p>
<p>
Using this string pool requires only small changes to the
rest of our program.
</p>
<pre>
struct DictionaryEntry
{
 bool Parse(const WCHAR *begin, const WCHAR *end, <font COLOR=blue>StringPool&amp; pool</font>);
<font COLOR=blue><strike> // void Destruct() {
 //  delete[] m_pszTrad;
 //  delete[] m_pszSimp;
 //  delete[] m_pszPinyin;
 //  delete[] m_pszEnglish;
 // }</strike></font>
 LPWSTR m_pszTrad;
 LPWSTR m_pszSimp;
 LPWSTR m_pszPinyin;
 LPWSTR m_pszEnglish;
};

class Dictionary
{
public:
 Dictionary();
 <font COLOR=blue><strike>// ~Dictionary();</strike></font>
 int Length() { return v.size(); }
private:
 vector<dictionaryEntry> v;
 <font COLOR=blue>StringPool m_pool;</font>
};

<font COLOR=blue><strike>// Dictionary::~Dictionary()
// {
//  for (vector&lt;DictionaryEntry&gt;::iterator i = v.begin();
//       i != v.end(); i++) {
//   i-&gt;Destruct();
//  }
// }</strike></font>
</pre>
<p>
We no longer need to free the strings in the <code>DictionaryEntry</code>
manually, so the <code>Destruct</code> method and the
<code>Dictionary</code> destructor can go.
</p>
<pre>
bool DictionaryEntry::Parse(
   const WCHAR *begin, const WCHAR *end,
   <font COLOR=blue>StringPool&amp; pool</font>)
{
 const WCHAR* pch = std::find(begin, end, L' ');
 if (pch >= end) return false;
 m_pszTrad = <font COLOR=blue>pool.</font>AllocString(begin, pch);
 begin = std::find(pch, end, L'[') + 1;
 if (begin >= end) return false;
 pch = std::find(begin, end, L']');
 if (pch >= end) return false;
 m_pszPinyin = <font COLOR=blue>pool.</font>AllocString(begin, pch);
 begin = std::find(pch, end, L'/') + 1;
 if (begin >= end) return false;
 for (pch = end; *--pch != L'/'; ) { }
 if (begin >= pch) return false;
 m_pszEnglish = <font COLOR=blue>pool.</font>AllocString(begin, pch);
 return true;
}

Dictionary::Dictionary()
{
 ...
    if (de.Parse(buf, buf + cchResult, <font COLOR=blue>m_pool</font>)) {
 ...
}
</pre>
<p>
And finally, we pass our string pool to
<code>DictionaryEntry::Parse</code> so it knows where
to get memory for its strings from.
</p>
<p>
With these changes, the dictionary loads in 70ms
(or 80ms if you include the time it takes to destroy the
dictionary).
This is 70% faster than the previous version,
and over three times as fast if you include the destruction time.
</p>
<p>
And now that we've reached our 100ms goal, it's a good time to stop.
We've gotten the running time of dictionary loading down from
an uncomfortable 2080ms to a peppier 70ms, a nearly 30-fold improvement,
by repeatedly profiling and focusing on where the most time is
being spent.
(I have some more simple tricks that shave a few
more milliseconds off the startup time.
Perhaps I'll bring them into play if other changes to startup
push us over the 100ms boundary.
As things stand, the largest CPU consumers are
<code>MultiByteToWideChar</code> and <code>lstrcpynW</code>,
so that's where I would focus next.)
</p>
<p>
That's the end of the first stage.  The next stage will be
displaying the dictionary in an owner-data listview, but you'll
have to wait until next month.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-276853">
				<div id="div-comment-276853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276853">
			May 19, 2005 at 9:05 am</a>		</div>

		<p>You missed a closing tag somewhere  &#8211; the whole thing is blue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276863">
				<div id="div-comment-276863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276863">
			May 19, 2005 at 9:05 am</a>		</div>

		<p>I&#8217;ve used this technique for symbol tables.  It makes it very easy to remove symbols from the table in bulk by moving the end of the symbol table back (and the hash entry table).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276873">
				<div id="div-comment-276873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan McCarty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276873">
			May 19, 2005 at 10:07 am</a>		</div>

		<p>This might be a dumb question, but why is MIN_CBCHUNK set to 32,000 instead of 32K?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276893">
				<div id="div-comment-276893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276893">
			May 19, 2005 at 11:15 am</a>		</div>

		<p>Maybe you should decide whether the type of a memory size is DWORD, SIZE_T or size_t. Then use that as the return type and argument type of RoundUp rather than relying on the &quot;implicit int&quot; rule which was removed from C++ about, oh, 15 years ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276903">
				<div id="div-comment-276903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jon Asbury</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276903">
			May 19, 2005 at 11:39 am</a>		</div>

		<p>&quot;I don&#8217;t know whether there is a standard name for this thing&quot;</p>
<p>Wouldn&#8217;t it be called a stack. In this case, you are always pushing a never popping. When you want to pop all, you simply reset the stack pointer.</p>
<p>Many years ago the version of Pascal I used supported this method of allocation in the language. I can&#8217;t remember all the keywords, but it had a way of marking the stack and then releasing all the allocations back to the mark.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276913">
				<div id="div-comment-276913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">autist0r</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276913">
			May 19, 2005 at 11:48 am</a>		</div>

		<p>All this work has already be done&#8230; Simply use HeapCreate() &amp;&amp; HeapAlloc() !</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276923">
				<div id="div-comment-276923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mfx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276923">
			May 19, 2005 at 12:23 pm</a>		</div>

		<p>This storage scheme is an instance of an &quot;arena&quot;-based allocator. </p>
<p>I first encountered it in Fraser and Hansons book  &quot;A retargetable C compiler&quot;, in which the implemention of the lcc compiler is described in detail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert odd alt thread-odd thread-alt depth-1" id="comment-276933">
				<div id="div-comment-276933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276933">
			May 19, 2005 at 12:50 pm</a>		</div>

		<p>Indeed, this is an excellent technique for implementing programming languages.  The MSFT script engines use this technique extensively.</p>
<p>Building a parse tree, for example, requires many many small allocations all of which will be freed at exactly the same time: when the code generator is done walking the parse tree.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276943">
				<div id="div-comment-276943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276943">
			May 19, 2005 at 1:28 pm</a>		</div>

		<p>Is there an advatage to using reinterpret_cast&lt;type&gt;  instead of the good old standard cast (type) ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276953">
				<div id="div-comment-276953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276953">
			May 19, 2005 at 1:39 pm</a>		</div>

		<p>Ulric asked:<br />
<br />&quot;Is there an advatage to using reinterpret_cast&lt;type&gt; instead of the good old standard cast (type) ?&quot;</p>
<p>Yes.</p>
<p>The advantage is that you have <em>clearly</em> marked &quot;What I&#8217;m noing now is likely ugly! Be aware!&quot;. Old-style C casts are easily missed, making it  seem like something common, when in fact casting in a strongly typed language is something exceptional and should be marked so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276963">
				<div id="div-comment-276963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ricom/archive/2005/05/19/420158.aspx' rel='external nofollow' class='url'>Rico Mariani's Performance Tidbits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276963">
			May 19, 2005 at 2:00 pm</a>		</div>

		<p>Well, it&#8217;s time for me to surrender.&amp;amp;nbsp; Sort of :)<br />
<br />Raymond pulls out all the stops in his sixth version&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276973">
				<div id="div-comment-276973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Bacarella</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276973">
			May 19, 2005 at 3:18 pm</a>		</div>

		<p>&quot;Exercise: Why is HEADER a union containing a structure rather than just being a structure? What is the significance of the alignment member?&quot;</p>
<p>I didn&#8217;t follow the code very closely because C++ makes my head hurt, but I&#8217;m assuming the reason is alignment issues.</p>
<p>The CPU is really picky about the way you ask for values stored at an address.  If you ask it to look up any address that isn&#8217;t cleanly divisible by some specific number, it throws an exception.  Compilers hide this for you, and more low level stuff, like malloc(), have system-dependent information built into the library that go far from preventing this from happening.</p>
<p>When you implement your own memory allocation scheme, you get exposed to the ugly underbelly of CPU memory addressing.</p>
<p>The union trick gets the compiler to round up to a certain CPU happy multiple, so the CPU doesn&#8217;t end up with an address that makes it choke.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-276993">
				<div id="div-comment-276993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://corfield.org/' rel='external nofollow' class='url'>Sean Corfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276993">
			May 19, 2005 at 5:02 pm</a>		</div>

		<p>I&#8217;m curious as to why you did not use placement new / delete to implement the pool allocator? That way you wouldn&#8217;t have dramatically different syntax (stuff like pool.AllocString() for example).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276883">
				<div id="div-comment-276883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://amills.net/' rel='external nofollow' class='url'>Anthony J. Mills</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276883">
			May 19, 2005 at 11:11 am</a>		</div>

		<p>Why not do the following?</p>
<p>1. Preprocess the file into a stream of (chinese pinyin english )* (in Unicode)<br />
<br />2. Read the file into memory<br />
<br />3. Append an extra   just in case<br />
<br />4. Loop through the data, count number of dictionary entries<br />
<br />5. Allocate precise number of dictionary entries<br />
<br />6. Loop through the data, populate the pointers in the dictionary entries</p>
<p>Actually, even that can be improved.</p>
<p>1. Preprocess the file into a stream of (chinese pinyin english )* (leave in Big5)<br />
<br />2. Make the file a resource and compile it into the executable<br />
<br />3. Load the resource into memory<br />
<br />4. Allocate the precise number of dictionary entries (since you preprocessed it, you probably know this)<br />
<br />5. Loop through the data, populate the dictionary entries with pointers</p>
<p>Note that leaving it as Big5 here will substantially reduce your working set. I&#8217;ll argue that the extra calls to MultiByteToWideChar in your GUI are worth the smaller dataset of leaving the data (which is mostly 7-bit anyway) in Big5.</p>
<p>Plus, making the dictionary part of the executable makes the program easier to distribute.</p>
<p>In summary, this removes the overhead of<br />
<br />(a) MultiByteToWideChar<br />
<br />(b) String allocations<br />
<br />(c) Parsing</p>
<p>Sounds like it would be pretty fast to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277003">
				<div id="div-comment-277003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-277003">
			May 19, 2005 at 7:18 pm</a>		</div>

		<p>To clarify, when I say cast back when talking about reinterpret_cast I mean reinterpret_cast back, you cannot reinterpret_cast to one type and static_cast back to the other and expect that to be work in general.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-276983">
				<div id="div-comment-276983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-276983">
			May 19, 2005 at 4:50 pm</a>		</div>

		<p>What you did is called an arena allocator (I also first encountered it in Hansen&#8217;s excellent book). A pool allocator for the most part is a freelist of fixed sized objects. I&#8217;ve seen that claim before about the CLR allocator and I don&#8217;t believe it&#8217;s that simple given that it has to support pinned objects.</p>
<p>You can throw OOM with &quot;throw std::bad_alloc()&quot; instead of creating a static object. You should stop using DWORD/int when you mean size_t, ptrdiff_t, container::size_type, or container::distance_type. Please *DO NOT* use a windows header definition of those types or their bastardized all caps version, they&#8217;ve historically botched the actual type by typedeffing it to a type that just happens to be the same size. Not so important in C (except when creating a pointer to it) but this is extremely important in C++&#8217;s very subtle overload resolution (VC has a stupid quirk where int[op]long returns int instead of long, now you know where it comes from). Stop going past the end of the array and stop assuming relational operators work when you&#8217;re not comparing elements of an array. Stop reinterpret_casting to/from void pointer, static_cast is the thing you want. My guideline on reinterpret_cast is that there are only 2 places where it can be used: 1. casting to/from a pointer to an integer big enough to hold it so you can do non-portable, implementation defined things to it 2. casting a pointer to a suitably aligned pointer and back. The second case is where you can reinterpret_cast to void *, but ONLY if you cast back to the original type. This style of code has been implementation defined when C correctly replaced all questionable instances of char with void:</p>
<p>foo *f;<br />
<br />unsigned char *uc;</p>
<p>uc = (unsigned char*)f;<br />
<br />// aka uc = reinterpret_cast&lt;unsigned char*&gt;(f);</p>
<p>it&#8217;s always portable and correct to do this:</p>
<p>uc = (unsigned char*)(void*)f;<br />
<br />// aka uc = static_cast&lt;unsigned char*&gt;(static_cast&lt;void*&gt;(f));</p>
<p>You may think I&#8217;m being anal (and I am), but compilers are increasingly becoming standards compliant in terms of supported and unsupported behavior so I think it&#8217;s much better to learn what C/C++ actually guarantees over what compiler switches your current compiler guarantees.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-277013">
				<div id="div-comment-277013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-277013">
			May 20, 2005 at 1:34 am</a>		</div>

		<p>The goto is unnecessary &#8212; you can just replace it by throw(OOM) which is about the same number of characters, and put the OOM declaration a bit further up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-277023">
				<div id="div-comment-277023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-277023">
			May 20, 2005 at 3:27 am</a>		</div>

		<p>&lt;/font&gt;<br />
<br />Just tried to close the blue font tag :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278093">
				<div id="div-comment-278093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-278093">
			May 26, 2005 at 8:52 pm</a>		</div>

		<blockquote><p>
  &lt;/font&gt;<br />
  <br />&gt; Just tried to close the blue font tag :-)</p>
<p>It worked!  It worked!  It just took a week to work.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278133">
				<div id="div-comment-278133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DannyG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-278133">
			May 27, 2005 at 5:13 am</a>		</div>

		<p>First, big thanks for the very interesting series.</p>
<p>Just one thing – I wonder, when you originally wrote the dictionary application, did you actually follow all the steps you’ve shown here? What I mean is, did you start with the pure STL version, and then slightly moved on to what we see now or, for example, the memory-mapped file was there from the very beginning, and you just wrote the STL stream version for the blog&#8217;s sake?</p>
<p>Sorry, I didn’t ask this earlier but [Raymond was currently on vacation].</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-282393">
				<div id="div-comment-282393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/06/13/428534.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-282393">
			June 13, 2005 at 9:02 am</a>		</div>

		<p>Filling a listview with tens of thousands of items.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-282803">
				<div id="div-comment-282803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/06/15/429338.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-282803">
			June 15, 2005 at 9:02 am</a>		</div>

		<p>Owner-data listviews let you take over data management from the listview.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-296553">
				<div id="div-comment-296553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/08/12/450818.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-296553">
			August 12, 2005 at 10:00 am</a>		</div>

		<p>Finally we start searching.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-428313">
				<div id="div-comment-428313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/10/06/796395.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-428313">
			October 6, 2006 at 10:00 am</a>		</div>

		<p>Belated answers to exercises and other questions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-464423">
				<div id="div-comment-464423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ricom/archive/2005/05/19/performance-quiz-6-looking-at-the-sixth-cut.aspx' rel='external nofollow' class='url'>Rico Mariani's Performance Tidbits</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050519-00/?p=35603#comment-464423">
			January 23, 2007 at 9:28 pm</a>		</div>

		<p>Well, it&#8217;s time for me to surrender. Sort of :) Raymond pulls out all the stops in his sixth version</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

