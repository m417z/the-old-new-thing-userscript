<html>
<head>
<title>Thread messages are eaten by modal loops</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Thread messages are eaten by modal loops</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 26, 2005 / year-entry #105</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050426-18/?p=35783</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Thread messages (as generated by the PostThreadMessage function) do not go anywhere when passed to the DispatchMessage function. This is obvious if you think about it, because there is no window handle associated with a thread message. DispatchMessage has no idea what to do with a message with no associated window. It has no choice...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Thread messages (as generated by
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/postthreadmessage.asp">
the <code>PostThreadMessage</code> function</a>)
do not go anywhere when passed to
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/dispatchmessage.asp">
the <code>DispatchMessage</code> function</a>.
This is obvious if you think about it, because there is no window
handle associated with a thread message.
<code>DispatchMessage</code> has no idea what to do with a message
with no associated window.
It has no choice but to throw the message away.
</p>
<p>
This has dire consequences for threads which enter modal loops,
which any thread with a window almost certainly will do at one
time or another.
Recall that the traditional modal loop looks like this:
</p>
<pre>
while (GetMessage(&amp;msg, NULL, 0, 0)) {
 TranslateMessage(&amp;msg);
 DispatchMessage(&amp;msg);
}
</pre>
<p>
If a thread message is returned by
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/getmessage.asp">
the <code>GetMessage</code> function</a>,
it will just fall through the <code>TranslateMessage</code>
and <code>DispatchMessage</code> without any action being taken.
Lost forever.
</p>
<p>
Thread messages are generally to be avoided on threads that
create windows, for this very reason.
Of course, if you're going to create a window, why not use
<code>PostMessage</code> instead, passing that window as the target
of the posted message?  Since there is now a window handle,
the <code>DispatchMessage</code> function knows to give the message
to your window procedure.  Result: Message not lost.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-272953">
				<div id="div-comment-272953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jasmusic.com' rel='external nofollow' class='url'>Joshua Schaeffer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050426-18/?p=35783#comment-272953">
			April 26, 2005 at 10:25 am</a>		</div>

		<p>Why not add an API to set a per-thread message callback for any thread-only messages? Then DispatchMessage could just call this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-272963">
				<div id="div-comment-272963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050426-18/?p=35783#comment-272963">
			April 26, 2005 at 10:32 am</a>		</div>

		<p>This seems related to why the timed message box back in the Modality series of articles didn&#8217;t work reliably.  See <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/03/04/385100.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/03/04/385100.aspx</a></p>
<p>That article showed how to post a WM_QUIT message to break a modal loop, and then to remove the re-posted WM_QUIT message to keep the application from exiting.  Unfortunately for me, it failed to remove the re-posted WM_QUIT because it was occluded by thread messages that were posted to the queue immediately after the modal loop exited.</p>
<p>They mystery remains as to who would post such a message (and why).  The sample application certainly wasn&#8217;t doing it.  Since it happens reliably on two vanilla Windows XP boxes here at work, I suspect LANdesk Remote Control agent, as that is the only non-standard program running (and the only one I can&#8217;t uninstall thanks to our strict IT department).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-273053">
				<div id="div-comment-273053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fran√ßois</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050426-18/?p=35783#comment-273053">
			April 27, 2005 at 1:28 am</a>		</div>

		<p>The documentation for PostThreadMessage hints that we should install a thread-specific hook to solve this problem. </p>
<p>Why not simply always do this ? Even if I am in control of the thread&#8217;s implementation, sometimes &#8216;magic&#8217; modal loops will appear (say I call into this library that uses COM under the covers).</p>
<p>So maybe the rule is : whenever you PostThreadMessage, you MUST install a hook on the target thread to handle the thread messages ?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

