<html>
<head>
<title>If you return from the main thread, does the process exit?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you return from the main thread, does the process exit?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 27, 2010 / year-entry #243</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If instead of calling ExitProcess you merely return from the main thread of a process, does the process terminate? No, but maybe yes. This is another one of the places where the C runtime behaves differently from raw Win32. Under raw Win32, a process exits when any thread chooses to exit the process explicitly (usually...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If instead of calling <code>ExitProcess</code> you merely return from the main thread of a process, does the process terminate?</p>
<p> No, but maybe yes. </p>
<p> This is another one of the places where <a href="http://blogs.msdn.com/oldnewthing/archive/2008/08/08/8841951.aspx"> the C runtime behaves differently from raw Win32</a>. </p>
<p> Under raw Win32, a process exits when any thread chooses to exit the process explicitly (usually by calling <code>ExitProcess</code>) or when all threads have exited. Exiting the main thread will not result in the process exiting if there are any other threads still active. According to <a href="http://blogs.msdn.com/oldnewthing/archive/2007/05/02/2365433.aspx"> the old-fashioned model of how processes exit</a>, a process was in control of all its threads and could mediate the shutdown of those threads, thereby controlling the shutdown of the process. (Of course, nowadays, with the thread pool, COM worker threads, and other threads doing random background work, the idea of being in control of all the threads in the process is now just a reminder of those simpler days.) </p>
<p> On the other hand, the C runtime library automatically calls <code>ExitProcess</code> when you exit the main thread, regardless of whether there are any worker threads still active. This behavior for console programs is mandated by the C language, which says that (5.1.2.2.3) "a return from the initial call to the <code>main</code> function is equivalent to calling the <code>exit</code> function with the value returned by the <code>main</code> function as its argument." The C++ language has an equivalent requirement (3.6.1). Presumably, the C runtime folks carried this behavior to <code>WinMain</code> for consistency. </p>
<p> This also means that if you decide to exit your main thread by calling <code>ExitThread</code> directly, then you aren't returning from the <code>main</code> function. Instead, you've leapt into the Win32 world where the process will not exit until all threads are gone. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-857443">
				<div id="div-comment-857443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wyatt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857443">
			August 27, 2010 at 7:36 am</a>		</div>

		<p>I didn&#39;t think a background thread would keep a process alive, that the process was terminated when all non-background threads finished.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-857453">
				<div id="div-comment-857453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857453">
			August 27, 2010 at 8:01 am</a>		</div>

		<p>@Wyatt: I don&#39;t think Win32 has the concept of background threads; they&#39;re all just threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857473">
				<div id="div-comment-857473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exiter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857473">
			August 27, 2010 at 8:54 am</a>		</div>

		<p>@JM: System components do not usually &quot;spawn additional threads in your process for whatever reason&quot;</p>
<p>Yes, they do. One example is: You cannot write a .net program which executes with less than 5 threads. There&#39;s no guarantee that forthcoming .net versions doesn&#39;t have 50 threads.</p>
<p>And the &quot;do return from main function exit program?&quot; is indeed in the standard, as raymond wrote.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-857483">
				<div id="div-comment-857483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857483">
			August 27, 2010 at 8:59 am</a>		</div>

		<blockquote><p>
  I don&#39;t think Win32 has the concept of background threads
</p></blockquote>
<p>Maybe not, but programmers do. &nbsp;If an injected thread delays the termination of the process for any appreciable time, that&#39;s kind of rude.</p>
<p>Also, it seems, background threads in a C-runtime-library app need to be ready at all times for an ExitProcess!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857503">
				<div id="div-comment-857503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857503">
			August 27, 2010 at 9:05 am</a>		</div>

		<p>@exiter</p>
<p>Well, we were talking about raw Win32 and the C runtime. &nbsp;I don&#39;t think .NET is a system component. &nbsp;Rather, Win32 is a component of the .NET system. &nbsp;Of course, the term &quot;system component&quot; is itself sort of nebulous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-857523">
				<div id="div-comment-857523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Confused</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857523">
			August 27, 2010 at 9:18 am</a>		</div>

		<p>@Ens:</p>
<blockquote><p>
  Win32 is a component of the .NET system.
</p></blockquote>
<p>That&#39;s like saying &quot;I&#39;m father of my mother&quot;. I don&#39;t have .NET, but I have Win32, explain that!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857543">
				<div id="div-comment-857543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857543">
			August 27, 2010 at 9:23 am</a>		</div>

		<blockquote><p>
  That&#39;s like saying &quot;I&#39;m father of my mother&quot;.
</p></blockquote>
<p>There was an episode of Futurama last night where that was indeed the case! It involved time travel to 1947&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-857553">
				<div id="div-comment-857553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">No One</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857553">
			August 27, 2010 at 10:42 am</a>		</div>

		<p>@Confused:</p>
<p>Win32 is a component of the .NET system in that .NET requires Win32 in order to run.</p>
<p>Just like my engine is a component of my car.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857583">
				<div id="div-comment-857583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nicole DesRosiers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857583">
			August 27, 2010 at 12:48 pm</a>		</div>

		<p>This is .NET specific, but on topic. &nbsp;Before I knew about the powers of BackgroundWorker, I used normal threads to handle my background processes. &nbsp;When I detected a close on the UI thread, I sent an event to the worker thread telling it to finish what it was doing as fast as possible, then write out the in-memory data to storage. &nbsp;After that, it exited. &nbsp;This produced the effect of the UI closing immediately, but the background thread hung around for a second or two more to complete its post-processing and exit.</p>
<p>With BackgroundWorker, if the UI closes, the BackgroundWorker thread is terminated immediately. &nbsp;This makes some sense based on how it works, because the BackgroundWorker can&#39;t be marked as completed until an event is handled on the UI thread. &nbsp;As a side effect, this also means you can&#39;t spin on the UI thread (yes, I know this is a bad practice) waiting for the worker to complete, because you&#39;ll never handle the event, and the BackgroundWorker will never report completion. &nbsp;I ended up catching the Closing event, cancelling the Close, setting a flag, waiting for the BackgroundWorker to complete, and then calling Close myself.</p>
<p>This has been your random .NET digression. &nbsp;Please excuse any terminology mistakes I may have made &#8212; I don&#39;t write production UI code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-857593">
				<div id="div-comment-857593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857593">
			August 27, 2010 at 1:33 pm</a>		</div>

		<p>Raymond, &quot;Production&quot; is a relative term in the context of assembly programmers &#8211; most of their stuff obviously isn&#39;t going to reach a super wide audience. Some of them do tend to think that doing these things is just fine and won&#39;t ever break&#8230; and pass off their observations of how current systems work as gospel.</p>
<p>Tricks like back-scanning for kernel32 from entry-point ESP is fine if you&#39;re writing a 4kb intro, and I can understand why malware authors do whatever they can to keep code size down and be tricky &#8211; but I&#39;m not a fan of depending on undefined behavior, even if it works on all current Windows versions. Remember what happened to programs doing stack-execution when DEP was introduced?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857603">
				<div id="div-comment-857603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857603">
			August 27, 2010 at 1:33 pm</a>		</div>

		<p>Raymond, &quot;Production&quot; is a relative term in the context of assembly programmers &#8211; most of their stuff obviously isn&#39;t going to reach a super wide audience. Some of them do tend to think that doing these things is just fine and won&#39;t ever break&#8230; and pass off their observations of how current systems work as gospel.</p>
<p>Tricks like back-scanning for kernel32 from entry-point ESP is fine if you&#39;re writing a 4kb intro, and I can understand why malware authors do whatever they can to keep code size down and be tricky &#8211; but I&#39;m not a fan of depending on undefined behavior, even if it works on all current Windows versions. Remember what happened to programs doing stack-execution when DEP was introduced?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-857423">
				<div id="div-comment-857423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857423">
			August 27, 2010 at 7:18 am</a>		</div>

		<p>Ah, this is one of the topics that come up once in a blue moon on assembly programming forums. Can you shed some light on whether it&#39;s safe simple to RETurn from the entrypoint, rather than doing ExitThread/ExitProcess, from a *raw* Win32 program? It works for simple tests on all windows versions I know of, but is there any *guarantee* that a program&#39;s main thread is going to be &quot;just another thread&quot;? Or that some system component won&#39;t spawn additional threads in your process for whatever reason, once you start using some of the richer APIs?</p>
<p>An example of such a discussion is <a rel="nofollow" target="_new" href="http://board.flatassembler.net/topic.php?t=11027#107780" rel="nofollow">board.flatassembler.net/topic.php</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857463">
				<div id="div-comment-857463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857463">
			August 27, 2010 at 8:19 am</a>		</div>

		<p>@f0dder: there is no &quot;main thread&quot; in Win32 &#8212; the MSDN does mention the &quot;primary thread&quot;, which is a better name as it emphasizes that it&#39;s just the thread that happened to be executing the entry point code, which is not special in any other way. Win32 processes exit when the last remaining thread exits, it&#39;s as simple as that. Returning from the entry point does *not* exit the process, it exits the thread. If the thread running the entry point code also happens to be the last thread in the process (the common case), the process will exit. This is documented in the MSDN under &quot;Terminating a Process&quot;.</p>
<p>System components do not usually &quot;spawn additional threads in your process for whatever reason&quot; (you have to call particular functions for those threads to appear) but they are usually also not very explicit in telling you when they&#39;re going to be creating threads that could potentially interfere with process termination. Hence Raymond&#39;s wistful remark about the simpler days &#8212; everyone and their mother creates helper threads these days, many of which simply don&#39;t terminate by themselves, requiring an ExitProcess() call. Although it&#39;s overly paranoid to claim that you *must* call ExitProcess() because of a hypothetical rogue thread creator (it&#39;s not completely beyond control, especially in a toy app), it&#39;s also silly not to simply call ExitProcess() to be sure of termination (unless you&#39;re hunting down bugs with threads not properly shutting down when they should). It depends on your idea of &quot;safe&quot;, I guess.</p>
<p>As for guarantees, you&#39;ll find that Win32 doesn&#39;t do a lot of that. Between the MSDN and Windows Internals, you&#39;re supposed to figure it out for yourself if there&#39;s any gaps left. As the number of different Win32 platforms is limited (I mean, limited as compared to something like C systems) it usually works out, but there&#39;s no formal Win32 standard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-857613">
				<div id="div-comment-857613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857613">
			August 27, 2010 at 3:49 pm</a>		</div>

		<p>But if you exit a process while there are still threads running, that means that you&#39;re terminating them while they could be in the middle of something.</p>
<p>So you can&#39;t really use ExitProcess because you can&#39;t know (in principle) what extra threads might exist that might still be doing something important.</p>
<p>From that it follows that threads must always in some fashion terminate themselves when they&#39;re done, either through logical control flow (there&#39;s no more work to do &#8211; exit) or by listening for an explicit signal, in which case the documentation of whatever call created the thread should specify that.</p>
<p>Everything else is simply bad design.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857563">
				<div id="div-comment-857563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">f0dder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857563">
			August 27, 2010 at 11:31 am</a>		</div>

		<p>@JM: well, I&#39;m not too interested in toy apps &#8211; showing a MessageBox and doing a RET doesn&#39;t really prove anything. I&#39;m concerned about whether simply doing RET in &quot;real-world&quot; programs is sane. And yes, there&#39;s people writing relatively large things in pure assembly (let&#39;s not debate whether it&#39;s sane, but iirc <a target="_new" href="http://www.oby.ro/rad_asm/" rel="nofollow">http://www.oby.ro/rad_asm/</a> is entirely asm code).</p>
<p>What happens once you start using nontrivial COM stuff? Printing stuff? (some printer drivers apparently do crazy stuff; iirc Jeremy Collake told me he had to disable some process protection stuff in PECompact because of printer drivers) &#8211; et cetera.</p>
<p>I&#39;m not a fan of people making too many assumptions on undocumented internals. Sure, dword@[ESP] is a return-value into kernel32 on all Windows versions I&#39;ve seen, and alle modules load at 64kb boundary on all systems I&#39;ve seen, but does that mean it&#39;s a safe way of geting kernel32.dll module load base? And that you can safely make executables with no imports?</p>
<p>(The answer is no: at least one windows version (win2k) doesn&#39;t automatically inject kernel32.dll, and will *silently* fail loading an executable that doesn&#39;t import from kernel32.dll (*somewhere* in it&#39;s chain, an explicit reference is not necessary; Iirc the import with the shortest name satisfying a kernel32.dll reference is GDI32!Arc).</p>
<div class="post">[<i>Are these people doing stunts like this for personal amusement or for production? It&#39;s fine if you&#39;re just toying around, but if you&#39;re writing production code, then just do things the normal way. If you want kernel32, then link to kernel32 rather than pulling crazy indirect tricks to try to infer the location of kernel32. The person who has to maintain your code will thank you. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-857623">
				<div id="div-comment-857623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857623">
			August 27, 2010 at 8:53 pm</a>		</div>

		<p>@Wyatt .NET allows you to flag threads as &quot;background&quot; or not when you start them&#8230; non-background threads block process termination, background ones are terminated once the main thread terminates.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857643">
				<div id="div-comment-857643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857643">
			August 28, 2010 at 8:53 am</a>		</div>

		<p>&quot;This behavior for console programs is mandated by the C language&#8230;&quot;</p>
<p>This is nonsense. The C and C++ standards mandate a single-threaded execution model. The behaviour of multithreaded programs is completely outside of the scope of these standards (though not for much longer).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-857663">
				<div id="div-comment-857663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857663">
			August 28, 2010 at 3:08 pm</a>		</div>

		<p>@Ben Hutchings</p>
<p>I also was aware that the standards say nothing about threads. &nbsp;That&#39;s why when I saw this, I read that part as, &quot;the standards require that returning from main() have the same behavior as calling exit()&quot;. &nbsp;Nothing about threads in that statement either.</p>
<p>But in Windows, the C runtime&#39;s exit() calls Win32 ExitProcess(), which has this behavior re: threads. &nbsp;So for returning from main to have the same behavior as calling exit(), they have to either (1) make exit() not terminate all threads, or (2) terminate all threads.</p>
<p>Raymond provides citations for which part of the standard he&#39;s talking about, so maybe that would clarify this point. &nbsp;(Personally I don&#39;t have much interest in looking it up, but it sounds like you might.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-857693">
				<div id="div-comment-857693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100827-00/?p=13023#comment-857693">
			August 30, 2010 at 7:24 am</a>		</div>

		<p>@Ben Hutchings</p>
<p>C++ ISO/IEC 14882:2003, 3.6.1 main function, para 4</p>
<p>&nbsp; &nbsp;Calling the function void exit(int) .. terminates the program &#8230;</p>
<p>This certainly sounds like a requirement to terminate other threads, even though the language has no concept of threads. &nbsp;It is difficult to imagine how you could satisfy &#39;terminate the program&#39; otherwise.</p>
<p>Para 5 says that returning from main() is equivalent to a call to exit().</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

