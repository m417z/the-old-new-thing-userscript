<html>
<head>
<title>Creating a simple pidl: For the times you care enough to send the very fake</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating a simple pidl: For the times you care enough to send the very fake</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 3, 2013 / year-entry #122</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I'll assume that we all know what pidls are and how the shell namespace uses them. That's the prerequisite for today. A simple pidl is an item ID list that refers to a file or directory that may not actually exist. It's a way of playing "what if": "If there were a file or directory...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I'll assume that we all know what pidls are and how the shell
namespace uses them.
That's the prerequisite for today.
</p>
<p>
A <i>simple pidl</i> is an item ID list that refers to
a file or directory that may not actually exist.
It's a way of playing "what if":
"If there were a file or directory at this location,
here is what I would have created to represent it."
For the times you
<a HREF="http://corporate.hallmark.com/History/Brand-Legacy">
care enough to send the very fake</a>.
</p>
<p>
We've seen these things in action with the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/06/01/145428.aspx">
<code>SHGFI_<wbr>USE&shy;FILE&shy;ATTRIBUTES</code>
flag</a>,
which tells the
<code>SH&shy;Get&shy;File&shy;Info</code> function,
"Pretend that the file/directory exists with the attributes
I specified, and tell me what the icon would be, were that item
to actually exist."
</p>
<p>
Internally, the
<code>SH&shy;Get&shy;File&shy;Info</code> function
creates one of these "simple pidls", and then asks the simple pidl
for its icon.
</p>
<p>
Note that a simple pidl is really a special case of a
pidl created from a
<code>WIN32_<wbr>FIND_<wbr>DATA</code>.
When you parse a display name with a custom bind context,
and the bind context has a
<code>STR_<wbr>FILE_<wbr>SYS_<wbr>FIND_<wbr>DATA</code>
bind context object,
then that object is used to control the information placed
into the pidl instead of getting the information from the file system.
</p>
<p>
Here's a program that creates a simple pidl and then does
a few simple things with it.
(Note that the
<a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/dd940368(v=vs.85).aspx">
Parsing with Parameters</a> sample covers this topic too,
so if you don't like the way I did it, you can look to see
how somebody else did it.)
</p>
<pre>
#define STRICT_TYPED_ITEMIDS
#include &lt;new&gt;
#include &lt;windows.h&gt;
#include &lt;ole2.h&gt;
#include &lt;oleauto.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;propkey.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;atlalloc.h&gt;

class CFileSysBindData : public IFileSystemBindData
{
public:
 static HRESULT CreateInstance(
  _In_ const WIN32_FIND_DATAW *pfd,
  _In_ REFIID riid, _Outptr_ void **ppv);

 // *** IUnknown ***
 IFACEMETHODIMP QueryInterface(
  _In_ REFIID riid, _Outptr_ void **ppv)
 {
  *ppv = nullptr;
  HRESULT hr = E_NOINTERFACE;
  if (riid == IID_IUnknown ||
      riid == IID_IFileSystemBindData) {
   *ppv = static_cast&lt;IFileSystemBindData *&gt;(this);
   AddRef();
   hr = S_OK;
  }
  return hr;
 }

 IFACEMETHODIMP_(ULONG) AddRef()
 {
  return InterlockedIncrement(&amp;m_cRef);
 }

 IFACEMETHODIMP_(ULONG) Release()
 {
  LONG cRef = InterlockedDecrement(&amp;m_cRef);
  if (cRef == 0) delete this;
  return cRef;
 }

 // *** IFileSystemBindData ***
 IFACEMETHODIMP SetFindData(_In_ const WIN32_FIND_DATAW *pfd)
 {
  m_fd = *pfd;
  return S_OK;
 }

 IFACEMETHODIMP GetFindData(_Out_ WIN32_FIND_DATAW *pfd)
 {
  *pfd = m_fd;
  return S_OK;
 }

private:
 CFileSysBindData(_In_ const WIN32_FIND_DATAW *pfd) :
  m_cRef(1)
 {
  m_fd = *pfd;
 }
private:
 LONG m_cRef;
 WIN32_FIND_DATAW m_fd;
};

HRESULT CFileSysBindData::CreateInstance(
 _In_ const WIN32_FIND_DATAW *pfd,
 _In_ REFIID riid, _Outptr_ void **ppv)
{
 *ppv = nullptr;
 CComPtr&lt;IFileSystemBindData&gt; spfsbd;
 HRESULT hr = E_OUTOFMEMORY;
 spfsbd.Attach(new (std::nothrow) CFileSysBindData(pfd));
 if (spfsbd) {
  hr = spfsbd-&gt;QueryInterface(riid, ppv);
 }
 return hr;
}
</pre>
<p>
The
<code>CFile&shy;Sys&shy;Bind&shy;Data</code>
object is extraordinarily boring.
It simply implements
<code>IFile&shy;System&shy;Bind&shy;Data</code>,
which is a simple interface that just babysits a
<code>WIN32_<wbr>FIND_<wbr>DATA</code> structure.
(There is also a
<code>IFile&shy;System&shy;Bind&shy;Data2</code> interface
which babysits a little more information,
but for the purpose of this program,
we're interested only in the
<code>WIN32_<wbr>FIND_<wbr>DATA</code>.)
</p>
<pre>
HRESULT CreateBindCtxWithOpts(
 _In_ BIND_OPTS *pbo, _Outptr_ IBindCtx **ppbc)
{
 CComPtr&lt;IBindCtx&gt; spbc;
 HRESULT hr = CreateBindCtx(0, &amp;spbc);
 if (SUCCEEDED(hr)) {
  hr = spbc-&gt;SetBindOptions(pbo);
 }
 *ppbc = SUCCEEDED(hr) ? spbc.Detach() : nullptr;
 return hr;
}
</pre>
<p>
A bind context is basically a string-indexed associative array
of COM objects.
There is also a
<code>BIND_<wbr>OPTS</code> (or <code>BIND_<wbr>OPTS2</code>)
structure in there,
but the things most people care about are the object parameters.
They provide an extensible method of passing arbitrary parameters
to a function.
(Think of it as the COM version of the JavaScript convention of
jamming random junk into an
<a HREF="http://docs.jquery.com/Types#Options">
Options</a> parameter.)
You start with a
<code>IBind&shy;Ctx</code> parameter,
and any time you need to add a new flag or parameter,
you just stuff it into the
<code>IBind&shy;Ctx</code>.
If you just want to add a new boolean flag,
you can even ignore the contents of the object parameter and merely
base your behavior on whether the parameter exists at all.
</p>
<pre>
HRESULT AddFileSysBindCtx(
 _In_ IBindCtx *pbc, _In_ const WIN32_FIND_DATAW *pfd)
{
 CComPtr&lt;IFileSystemBindData&gt; spfsbc;
 HRESULT hr = CFileSysBindData::CreateInstance(
  pfd, IID_PPV_ARGS(&amp;spfsbc));
 if (SUCCEEDED(hr)) {
  hr = pbc-&gt;RegisterObjectParam(STR_FILE_SYS_BIND_DATA,
                                spfsbc);
 }
 return hr;
}
</pre>
<p>
To add a file system bind parameter,
you just create an object which implements
<code>IFile&shy;System&shy;Bind&shy;Data</code>
and register it with the bind context with
the string
<code>STR_<wbr>FILE_<wbr>SYS_<wbr>FIND_<wbr>DATA</code>.
</p>
<pre>
HRESULT CreateFileSysBindCtx(
 _In_ const WIN32_FIND_DATAW *pfd, _Outptr_ IBindCtx **ppbc)
{
 CComPtr&lt;IBindCtx&gt; spbc;
 BIND_OPTS bo = { sizeof(bo), 0, STGM_CREATE, 0 };
 HRESULT hr = CreateBindCtxWithOpts(&amp;bo, &amp;spbc);
 if (SUCCEEDED(hr)) {
  hr = AddFileSysBindCtx(spbc, pfd);
 }
 *ppbc = SUCCEEDED(hr) ? spbc.Detach() : nullptr;
 return hr;
}
</pre>
<p>
The
<code>Create&shy;File&shy;Sys&shy;Bind&shy;Ctx</code>
function simply combines the two steps of creating a bind
context and then adding a file system bind parameter to it.
In casual conversation,
a bind context is often named after the parameter inside it.
In this case,
we have a bind context with a file system bind parameter,
so we call it a "file system bind context".
</p>
<pre>
HRESULT CreateSimplePidl(
 _In_ const WIN32_FIND_DATAW *pfd,
 _In_ PCWSTR pszPath, _Outptr_ PIDLIST_ABSOLUTE *ppidl)
{
 *ppidl = nullptr;
 CComPtr&lt;IBindCtx&gt; spbc;
 HRESULT hr = CreateFileSysBindCtx(pfd, &amp;spbc);
 if (SUCCEEDED(hr)) {
  hr = SHParseDisplayName(pszPath, spbc, ppidl, 0, nullptr);
 }
 return hr;
}
</pre>
<p>
This is where everything comes together.
To create a simple pidl,
we take the
<code>WIN32_<wbr>FIND_<wbr>DATAW</code> containing the metadata
we want to use,
put it inside a file system bind context,
then use that bind context to parse the file name.
The presence of a file system bind context tells
the parser,
"Trust me on this, just go with what's in the bind context."
It suppresses all disk access,
and the final pidl will describe an item that exactly matches
the metadata you provided,
whether that accurately reflects reality or not.
(You can also pass the bind context to
<code>SHCreate&shy;Item&shy;From&shy;Parsing&shy;Name</code>
if you prefer to get an <code>IShell&shy;Item</code>.)
</p>
<p>
Okay, let's take this out for a spin.
</p>
<pre>
void DoStuffWith(_In_ PCIDLIST_ABSOLUTE pidl)
{
 // Print the file name
 wchar_t szBuf[MAX_PATH];
 if (SHGetPathFromIDListW(pidl, szBuf)) {
  wprintf(L"Path is \"%ls\"\n", szBuf);
 }

 // Print the file size
 CComPtr&lt;IShellFolder2&gt; spsf;
 PCUITEMID_CHILD pidlChild;
 if (SUCCEEDED(SHBindToParent(pidl,
                        IID_PPV_ARGS(&amp;spsf), &amp;pidlChild))) {
  CComVariant vt;
  if (SUCCEEDED(spsf-&gt;GetDetailsEx(pidlChild,
                        &amp;PKEY_Size, &amp;vt))) {
   if (SUCCEEDED(vt.ChangeType(VT_UI8))) {
    wprintf(L"Size is %I64u\n", vt.ullVal);
   }
  }
 }
}

int __cdecl wmain(int argc, PWSTR argv[])
{
 <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">CCoInitialize</a> init;
 if (SUCCEEDED(init)) {
  WIN32_FIND_DATAW fd = {};
  fd.dwFileAttributes = FILE_ATTRIBUTE_NORMAL;
  fd.nFileSizeLow = 42;
  CComHeapPtr&lt;ITEMIDLIST_ABSOLUTE&gt; spidlSimple;
  if (SUCCEEDED(CreateSimplePidl(&amp;fd,
                L"Q:\\Whatever.txt", &amp;spidlSimple))) {
   DoStuffWith(spidlSimple);
  }
 }
 return 0;
}
</pre>
<p>
Our test program asks for a simple pidl to
<code>Q:\<wbr>Whatever.<wbr>txt</code>,
and then prints information from it.
Observe that the creation of the simple pidl succeeds
even though you probably don't have a Q: drive,
and even if you did,
the code never tried to access it.
And when we ask the pidl,
"Hey, what's the file size?"
it retrieves the fake value 42 we passed in the
<code>WIN32_<wbr>FIND_DATAW</code> structure.
</p>
<p>
Sure, that was kind of artificial, but
so-called simple pidls are handy if you want to talk
about an object on slow media (such as a network share)
without actually accessing the target device.
</p>
<p>
<b>Exercise</b>:
What changes are necessary in order to create a simple
pidl that refers to a file with illegal characters
in its name?
Hint:
<code>STR_<wbr>NO_<wbr>VALIDATE_<wbr>FILENAME_<wbr>CHARS</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1054303">
				<div id="div-comment-1054303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463#comment-1054303">
			May 3, 2013 at 7:36 am</a>		</div>

		<p>SHSimpleIDListFromPath()?</p>
<p>There is a design flaw with these simple pidls and SHChangeNotify* for namespace extensions with a junction point somewhere in the filesystem (IIRC). SHCNF_PATH will create a simple pidl with the &quot;folder data&quot; in a MS internal format when really the pidl data is supposed to be defined by the IShellFolder the item is in. If the junction uses the foldername.{guid} &quot;registration&quot; you can probably detect it, not so much if it uses desktop.ini or the registry.</p>
<div class="post">[<em>That&#39;s right. Simple pidls do not respect junctions; they treat all files and directories as plain. That&#39;s why it&#39;s called simple. If you don&#39;t want simple, then don&#39;t use simple. (Sometimes you want this, for example, in order to access a file hiding behind a shell extension.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1054313">
				<div id="div-comment-1054313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463#comment-1054313">
			May 3, 2013 at 7:45 am</a>		</div>

		<p>SHParseDisplayName() never uses the cFileName field of the WIN32_FIND_DATA?</p>
<div class="post">[<em>Because it doesn&#39;t need that information; it&#39;s already passed in the pszPath parameter. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1054323">
				<div id="div-comment-1054323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463#comment-1054323">
			May 3, 2013 at 8:34 am</a>		</div>

		<p>@Raymond: The fact that the pidl is simple is a shell32 implementation detail. Many third party applications need to inform the shell about some change and some of them use SHCNF_PATH. A namespace extension has no say in whether the pidl is simple or not but to handle the shell notifications is has to ignore the fact that other peoples pidls are supposed to be a black box.</p>
<div class="post">[<em>If you are an application firing a change notification on a file, then you want to fire the change notification on the file, not on some virtual object hidden inside a shell extension, right? If you wanted to fire the notification on the virtual object, then you should use a pidl to the virtual object. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1054333">
				<div id="div-comment-1054333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463#comment-1054333">
			May 3, 2013 at 9:57 am</a>		</div>

		<p>The file isn&#39;t guaranteed to exist for a non-simple pidl. The only thing that differ from a simple pidl is that the &quot;file&quot; probably existed in some of the the layers in the software/hardware stack some time ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1054353">
				<div id="div-comment-1054353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463#comment-1054353">
			May 4, 2013 at 5:50 pm</a>		</div>

		<p>Simple-pidl. The O.J. Simpson of pidls: &quot;I didn&#39;t modify the filesystem, but if I did, this is what it would look like.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1054503">
				<div id="div-comment-1054503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Side note</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130503-00/?p=4463#comment-1054503">
			May 6, 2013 at 8:31 am</a>		</div>

		<p>Looks like the Hallmark link has changed to <a rel="nofollow" target="_new" href="http://corporate.hallmark.com/OurBrand/Brand-Legacy" rel="nofollow">corporate.hallmark.com/&#8230;/Brand-Legacy</a> instead of <a rel="nofollow" target="_new" href="http://corporate.hallmark.com/History/Brand-Legacy" rel="nofollow">corporate.hallmark.com/&#8230;/Brand-Legacy</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

