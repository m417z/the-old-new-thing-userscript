<html>
<head>
<title>When you transfer control across stack frames, all the frames in between need to be in on the joke</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you transfer control across stack frames, all the frames in between need to be in on the joke</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 10, 2012 / year-entry #210</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Chris Hill suggests discussing the use of structured exception handling as it relates to the window manager, and specifically the implications for applications which raise exceptions from a callback. If you plan on raising an exception and handling it in a function higher up the stack, all the stack frames in between need to be...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Chris Hill suggests
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/07/20/10040074.aspx#10042978">
discussing the use of structured exception handling as it relates
to the window manager, and specifically the implications for
applications which raise exceptions from a callback</a>.
</p>
<p>
If you plan on raising
an exception and handling it in a function higher up the stack,
all the stack frames in between need to be be in on your little scheme,
because they need to be able to unwind.
(And I don't mean "unwind" in the "have a beer and watch some football"
sense of "unwind".)
</p>
<p>
If you wrote all the code in between the point the exception is
raised and the point it is handled, then you're in good shape,
because at least then you have a chance of making sure they all
unwind properly.
This means either using RAII techniques (and possibly compiling with
the <code>/EHa</code> flag to convert asynchronous exceptions
to synchronous ones, so that Win32 exceptions will also trigger
unwind; although that has its own problems since the C++ exception
model is synchronous, not asynchronous)
or judiciously using <code>try</code>/<code>finally</code> (or
whatever equivalent exists in your programming language of choice)
to clean up resources in the event of an unwind.
</p>
<p>
But if you don't control all the frames in between, then you
can't really guarantee that they were written in the style you want.
</p>
<p>
In Win32, exceptions are considered to be horrific situations
that usually indicate some sort of fatal error.
There may be some select cases where exceptions can be handled,
but those are more the unusual cases than the rule.
Most of the time, an exception means that something terrible
has happened and you're out of luck.
The best you can hope for at this point is a controlled crash landing.
</p>
<p>
As a result of this overall mindset, Win32 code doesn't worry
too much about recovering from exceptions.
If an exception happens, then it means your process is already
toast and there's no point trying to fix it,
because that would be
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/11/13/9921676.aspx">
trying to reason about a total breakdown of normal functioning</a>.
As a general rule
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2006/12/11/1259599.aspx#1264901">
generic Win32 code is not exception-safe</a>.
</p>
<p>
Consider a function like this:
</p>
<pre>
struct BLORP
{
    int Type;
    int Count;
    int Data;
};

CRITICAL_SECTION g_csGlobal; // assume somebody initialized this
BLORP g_Blorp; // protected by g_csGlobal

void SetCurrentBlorp(const BLORP *pBlorp)
{
    EnterCriticalSection(&amp;g_csGlobal);
    g_Blorp = *pBlorp;
    LeaveCriticalSection(&amp;g_csGlobal);
}

void GetCurrentBlorp(BLORP *pBlorp)
{
    EnterCriticalSection(&amp;g_csGlobal);
    *pBlorp = g_Blorp;
    LeaveCriticalSection(&amp;g_csGlobal);
}
</pre>
<p>
These are perfectly fine-looking functions from a traditional Win32 standpoint.
They take a critical section, copy some data, and leave the
critical section.
The only thing&sup1; that could go wrong is
that the caller passed a bad pointer.
In the case of <code>Terminate&shy;Thread</code>,
we're already in the world of "don't do that"</p>
<p>If that happens, a <code>STATUS_<wbr>ACCESS_<wbr>VIOLATION</code>
exception is raised, and the application dies.
</p>
<p>
But what if your program decides to handle the access violation?
Maybe <code>pBlorp</code> points into a memory-mapped file,
and there is an I/O error paging the memory in,
say because it's a file on the network and there was a network
hiccup.
Now you have two problems:
The critical section is orphaned, and the data is only partially
copied.
(The partial-copy case happens if the <code>pBlorp</code> points to
a <code>BLORP</code> that straddles a page boundary, where the first
page is valid but the second page isn't.)
Just converting this code to RAII solves the first problem,
but it doesn't solve the second, which is kind of bad because
the second problem is what the critical section was trying to prevent
from happening in the first place!
</p>
<pre>
void SetCurrentBlorp(const BLORP *pBlorp)
{
    CriticalSectionLock lock(&amp;g_csGlobal);
    g_Blorp = *pBlorp;
}

void GetCurrentBlorp(BLORP *pBlorp)
{
    CriticalSectionLock lock(&amp;g_csGlobal);
    *pBlorp = g_Blorp;
}
</pre>
<p>
Suppose somebody calls <code>Set&shy;Current&shy;Blorp</code> with
a <code>BLORP</code> whose <code>Type</code> and <code>Count</code>
are in readable memory, but whose <code>Data</code> is not.
The code enters the critical section, copies the <code>Type</code>
and <code>Count</code>, but crashes when it tries to copy the
<code>Data</code>,
resulting in a
<code>STATUS_<wbr>ACCESS_<wbr>VIOLATION</code> exception.
Now suppose that somebody unwisely decides to handle this exception.
The RAII code releases
the critical section (assuming that you compiled with <code>/EHa</code>),
but there's no code to try to patch up the now-corrupted
<code>g_Blorp</code>.
Since the critical section was probably added to prevent <code>g_Blorp</code>
from getting corrupted,
the result is that the thing you tried to protect against ended up
happening anyway.
</p>
<p>
Okay, that was a bit of a digression.
The point is that unless everybody between the point the exception
is raised and the point the exception is handled is in on the joke,
you are unlikely to escape fully unscathed.
This is particular true in the generalized Win32 case,
since it is perfectly legal to write Win32 code in languages
other than C++,
as long as you adhere to the Win32 ABI.
(I'm led to believe that Visual Basic is still a popular language.)
</p>
<p>
There are a lot of ways of getting stack frames beyond your control
between the point the exception is raised and the point it is handled.
For example, you might call
<code>Enum&shy;Windows</code> and raise an exception in the
callback function and try to catch it in the caller.
Or you might raise an exception in a window procedure and try to
catch it in your message loop.
Or you might try to <code>longjmp</code> out of a window procedure.
All of these end up raising an exception and catching it in another
frame.
And since you don't control all the frames in between,
you can't guarantee that they are all prepared to resume execution
in the face of an exception.
</p>
<p>
<b>Bonus reading</b>:
My colleague
<a HREF="http://paulbetts.org/">
Paul Betts</a> has written up
<a HREF="http://blog.paulbetts.org/index.php/2010/07/20/the-case-of-the-disappearing-onload-exception-user-mode-callback-exceptions-in-x64/">
a rather detailed study of one particular instance of this phenomenon</a>.
</p>
<p>
&sup1;Okay, another thing that could go wrong is
that somebody calls
<code>Terminate&shy;Thread</code> on the thread,
but whoever did that knew they were corrupting the process.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1010043">
				<div id="div-comment-1010043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr&#237;guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010043">
			September 10, 2012 at 7:53 am</a>		</div>

		<p>Corollary: always handle all reasonable exceptions in a callback. Yes, there are still programmers using Visual Basic 6 (its reasonably powerful and quite fast to develop in, and believe it or not, many customers still require Windows 98 compatibility in 2012!), and this is one thing you have to take in mind when you need to subclass (one of those hairy and ugly things in a high level language: subclassing is far more difficult in classic Visual Basic than in C or C++). Inside of a window procedure or a callback, any kind of exception immediately crashes the entire process, and Visual Basic raises exceptions (&quot;runtime errors&quot;) for any unexpected condition, like reading beyond the end of a file.</p>
<p>All in all, most of the time you don&#39;t need to work with subclassing, and classic Visual Basic is pretty efficient for general GUI programming &#8211; that&#39;s why it&#39;s still used 15 years after its last release!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1010053">
				<div id="div-comment-1010053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010053">
			September 10, 2012 at 8:06 am</a>		</div>

		<p>Which is why I normally catch at module boundaries, stuff into global variable translate to return code, return, and rethrow at the reentry point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1010063">
				<div id="div-comment-1010063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010063">
			September 10, 2012 at 8:41 am</a>		</div>

		<p>An aviation person once told me that all landings are controlled crashes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1010083">
				<div id="div-comment-1010083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010083">
			September 10, 2012 at 10:29 am</a>		</div>

		<p>A checked build of Windows needs to have all those callback calls wrapped in a catch-all block which must terminate the process with a DebugOutput message. But then again, who runs the checked Windows? Even Microsoft proggers don&#39;t always care.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1010133">
				<div id="div-comment-1010133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010133">
			September 11, 2012 at 3:41 am</a>		</div>

		<p>The worst bit is the that 64-bit message loop effectively eats window procedure exceptions, so for example if your paint routine throws an exception, it actually exhibits as a busy hang as your app keeps failing to repaint.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1010143">
				<div id="div-comment-1010143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010143">
			September 11, 2012 at 3:48 am</a>		</div>

		<p>My above comment was slightly inaccurate. Correcting it is left as an exercise. Now to try out the hotfix mentioned in the linked article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1010203">
				<div id="div-comment-1010203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010203">
			September 11, 2012 at 8:10 am</a>		</div>

		<p>After reading the entire backwards chain, I conclude that EnterCriticalSection has a bug. So, it throws if it needs to allocate an event but cannot. Even in that situation, it should not corrupt state.</p>
<p>I mean really, the APIs in kernel32 are the effective kernel level APIs. They need to be as stable as kernel, by which I mean all conditions except for memory corruption are handled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1010253">
				<div id="div-comment-1010253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010253">
			September 11, 2012 at 10:01 am</a>		</div>

		<p>&quot;The worst bit is the that 64-bit message loop effectively eats window procedure exceptions, so for example if your paint routine throws an exception, it actually exhibits as a busy hang as your app keeps failing to repaint.&quot;</p>
<p>It should be obvious that WM_PAINT handler MUST NOT create any modal dialogs and MUST NOT throw before calling BeginPaint.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1010263">
				<div id="div-comment-1010263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010263">
			September 11, 2012 at 11:07 am</a>		</div>

		<p>Joshua: As of Win2k, EnterCriticalSection doesn&#39;t throw an exception upon being unable to allocate an event. Instead it just uses the preallocated KeyedEvent. It will only throw an exception if your critical section times out, but that causes nothing to get corrupted.</p>
<p>The corruption happens when your region of code protected by the critical section throws an exception you&#39;re not expecting (ACCESS_VIOLATION). The exception handling of RAII exits the critical section, leaving your data structure half-modified and no longer protected by the critical section. It&#39;s this partially modified data structure that is the corruption.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chris-j-leonard odd alt thread-odd thread-alt depth-1" id="comment-1010323">
				<div id="div-comment-1010323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Veltas' rel='external nofollow' class='url'>Veltas</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010323">
			September 11, 2012 at 3:52 pm</a>		</div>

		<p>&quot;When you transfer control across stack frames, all the frames in between need to be in on the joke&quot; Haha!</p>
<p>Interesting read, especially since I tend not to involve myself with exceptions unless they involve themselves with me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1010333">
				<div id="div-comment-1010333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010333">
			September 11, 2012 at 4:14 pm</a>		</div>

		<p>We had an issue like this at a place I used to work. &nbsp;We had a product which was built on Berkeley DB. &nbsp;In some rare and generally unpredictable situation, the DB would apparently decide to corrupt itself, and every call would return a &quot;DB run recovery&quot; error. &nbsp;Even running recovery, like it said, wouldn&#39;t fix it. &nbsp;Eventually, we tracked the cause down to a C++ exception being thrown out through the key comparison callback function (Berkeley DB is a C library). &nbsp;Apparently ripping the stack out from under BDB while it was in the middle of some B-Tree operation was a Very Bad Thing&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1010673">
				<div id="div-comment-1010673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010673">
			September 12, 2012 at 12:41 pm</a>		</div>

		<p>&quot;An aviation person once told me that all landings are controlled crashes.&quot;</p>
<p>Only if the pilot is an ex-naval aviator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1010863">
				<div id="div-comment-1010863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653#comment-1010863">
			September 13, 2012 at 2:53 pm</a>		</div>

		<p>@Anonymous: Undefined or not I&#39;d suddenly consider abandoning BerkeleyDB. I find it hard to imagine that such behavior could coexist with able to recover from pulling the plug at any time.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

