<html>
<head>
<title>Scrollbars bart 6 - The wheel</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Scrollbars bart 6 &#8211; The wheel</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 7, 2003 / year-entry #15</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20030807-00/?p=42963</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The mouse wheel is tricky because the mouse wheel UI guidelines indicate that you should scroll by a user-specified amount for each "click" of the mouse, where one click is WHEEL_DELTA mouse units (called a "detent"). There are two subtle points about the above requirement: First, that the amount of scrolling is a user setting...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
        The mouse wheel is tricky because the mouse wheel UI guidelines indicate that you
        should scroll by a user-specified amount for each "click" of the mouse, where one
        click is <code>WHEEL_DELTA</code> mouse units (called a "detent"). There are two subtle
        points about the above requirement: First, that the amount of scrolling is a user
        setting which must be respected, and second, that the wheel can report values that
        are not perfect multiples of <code>WHEEL_DELTA</code>.
    </p>
<p>
        In particular, there is the possibility that a high-resolution mouse wheel will report
        wheel scroll units smaller than <code>WHEEL_DELTA</code>. For example, consider a
        wheel mouse that supports "half-clicks". When you turn the wheel halfway between clicks,
        it reports <code>WHEEL_DELTA</code>/2, and when you reach a full click, it reports
        another <code>WHEEL_DELTA</code>/2. To handle this properly, you need to make sure
        that by the time the full click is reached, the window has scrolled by exactly the
        amount it would have scrolled if the user had been using a low-resolution wheel that
        reported a single wheel motion of <code>WHEEL_DELTA</code>.
    </p>
<p>
        (I once referred to this in email as a "sub-detent wheel" and was accused of coining
        a phrase.)
    </p>
<p>
        To handle the first point, we requery the user's desired scroll delta at each mouse
        wheel message. To handle the second point, we accumulate detents as they arrive and
        consume as many of them as possible, leaving the extras for the next wheel message.
    </p>
<pre>int g_iWheelCarryover;      /* Unused wheel ticks */

LRESULT OnMouseWheel(HWND hwnd, int xPos, int yPos, int zDelta, UINT fwKeys)
{
    UINT uScroll;
    if (!SystemParametersInfo(SPI_GETWHEELSCROLLLINES, 0, &amp;uScroll, 0)) {
        uScroll = 3;    /* default value */
    }

    /*
     *  If user specified scrolling by pages, do so.
     */
    if (uScroll == WHEEL_PAGESCROLL)
    {
        uScroll = g_cLinesPerPage;
    }

    /*
     *  If user specified no wheel scrolling, then don't do wheel scrolling.
     *  This also avoids a divide-by-zero below.
     */
    if (uScroll == 0)
    {
        return 0;
    }

    zDelta += g_iWheelCarryover;    /* Accumulate wheel motion */

    /*
     *  See how many lines we should scroll.
     *  This relies on round-towards-zero.
     */
    int dLines = zDelta * (int)uScroll / WHEEL_DELTA;

    /*
     *  Record the unused portion as the next carryover.
     */
    g_iWheelCarryover = zDelta - dLines * WHEEL_DELTA / (int)uScroll;


    /*
     *  Do the scrolling.
     */
    ScrollDelta(hwnd, -dLines);

    return 0;
}

    /* Add to WndProc */
    HANDLE_MSG(hwnd, WM_MOUSEWHEEL, OnMouseWheel);
</pre>
<p>
        Exercise: What is the significance of the <code>(int)</code> cast in the computation
        of <code>dLines</code>?
    </p>
<p>
        Exercise: Assuming you don't have a high-resolution wheel mouse, how would you test
        that your sub-detent mouse wheel handling was working properly?
    </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-121933">
				<div id="div-comment-121933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.milbertus.com' rel='external nofollow' class='url'>milbertus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030807-00/?p=42963#comment-121933">
			August 7, 2003 at 6:38 pm</a>		</div>

		<p>#1: Isn&#8217;t that because WHEEL_DELTA might be a float or double, which would cause a truncation (or cast) compiler warning?</p>
<p>#2: Hmmm&#8230;maybe you could hard code in a huge value, so that one click of your mouse wheel wouldn&#8217;t accumulate to the amount of what your app is looking for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-167333">
				<div id="div-comment-167333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MacTruck</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030807-00/?p=42963#comment-167333">
			April 24, 2004 at 10:27 am</a>		</div>

		<p>Those who can&#8217;t do math right should not write code.  Period.</p>
<p>For those who are looking to use the above to calculate delta carryovers, the above formula for is mathematically wrong.  Let&#8217;s go through code with the following assumptions:</p>
<p>uScroll = 3;<br />
<br />zDelta = WHEEL_DELTA / 2;<br />
<br />g_iWheelCarryover = 0;</p>
<p>Those are the initial default values the system should give.  WHEEL_DELTA, according to MSDN Library, is 120, so zDelta = 60;</p>
<p>zDelta += g_iWheelCarryover;<br />
<br />// zDelta += 0;<br />
<br />// Therefore, zDelta is still 60.</p>
<p>int dLines = zDelta * (int)uScroll / WHEEL_DELTA;<br />
<br />// dLines = 60 * 3 / 120;<br />
<br />// Therefore, dLines = 1.  180 / 120 = 1.5, but this is truncated to 1 because it is an integer.</p>
<p>g_iWheelCarryover = zDelta &#8211; (dLines * WHEEL_DELTA / (int)uScroll);<br />
<br />// g_iWheelCarryover = 60 &#8211; (1 * 120 / 3);<br />
<br />// Therefore, g_iWheelCarryover = 60 &#8211; 40 = 20.</p>
<p>20 is incorrect and that algorithm is _WAY_ off base.  60 is what the value _SHOULD_ be.  g_iWheelCarryover is supposed to contain the remainder of the scroll amount in WHEEL_DELTA units.  In this case, 1/2 a line (.5) was &quot;lost&quot;.  The correct algorithm for g_iWheelCarryover should be:</p>
<p>g_iWheelCarryover = (zDelta * (int)uScroll) &#8211; (dLines * WHEEL_DELTA);<br />
<br />// g_iWheelCarryover = (60 * 3) &#8211; (1 * 120);<br />
<br />// g_iWheelCarryover = (180) &#8211; (120);<br />
<br />// g_iWheelCarryover = 60;</p>
<p>This also means that the check for divide by zero is unnecessary.</p>
<p>Learn to write code correctly before posting to the Internet.</p>
<p>(Oh, and the answer to #2 is to use SendMessage() with the appropriate parameters).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-167343">
				<div id="div-comment-167343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030807-00/?p=42963#comment-167343">
			April 24, 2004 at 11:19 am</a>		</div>

		<p>Um, no, 20 is the correct value for g_iWheelCarryover at the end.  40 units of zDelta were used to scroll one line, leaving 20 units of carryover.</p>
<p>Learn to write code correctly before posting to the Internet.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-510573">
				<div id="div-comment-510573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://smallcode.weblogs.us/2007/06/03/corrections-to-raymond-chens-wheel-scrolling-code/' rel='external nofollow' class='url'>smallcode &raquo; Blog Archive &raquo; Corrections to Raymond Chen&#8217;s wheel scrolling code</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030807-00/?p=42963#comment-510573">
			June 3, 2007 at 12:06 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://smallcode.weblogs.us/2007/06/03/corrections-to-raymond-chens-wheel-scrolling-code/" rel="nofollow">http://smallcode.weblogs.us/2007/06/03/corrections-to-raymond-chens-wheel-scrolling-code/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

