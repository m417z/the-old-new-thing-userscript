<html>
<head>
<title>The PowerPC 600 series, part 4: Bitwise operations and constants</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 4: Bitwise operations and constants</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 9, 2018 / year-entry #182</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Twiddling around.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The PowerPC 600 series includes the following
bitwise logical operations:
</p>
<pre>
    and     rd, ra, rb      ; rd =   ra &amp;  rb
    or      rd, ra, rb      ; rd =   ra |  rb
    xor     rd, ra, rb      ; rd =   ra ^  rb
    nand    rd, ra, rb      ; rd = ~(ra &amp;  rb)
    nor     rd, ra, rb      ; rd = ~(ra |  rb)
    eqv     rd, ra, rb      ; rd = ~(ra ^  rb)
    andc    rd, ra, rb      ; rd =   ra &amp; ~rb "and complement"
    orc     rd, ra, rb      ; rd =   ra | ~rb "or complement"
    ; also "." versions
</pre>
<p>
Each of these instructions also comes with a dot variant
that updates <var>cr0</var> based on the result.
</p>
<p>
There are also versions that take immediates or sometimes
shifted immediates,
and sometimes they update flags, and sometimes they don't.
There isn't much orthogonality here.
It's all case-by-case.
</p>
<pre>
    andi.   rd, ra, imm16   ; rd =   ra &amp;  (uint16_t)imm16, update cr0
    andis.  rd, ra, imm16   ; rd =   ra &amp; ((uint16_t)imm16 &lt;&lt; 16), update cr0
    ori     rd, ra, imm16   ; rd =   ra |  (uint16_t)imm16
    oris    rd, ra, imm16   ; rd =   ra | ((uint16_t)imm16 &lt;&lt; 16)
    xori    rd, ra, imm16   ; rd =   ra ^  (uint16_t)imm16
    xoris   rd, ra, imm16   ; rd =   ra ^ ((uint16_t)imm16 &lt;&lt; 16)
</pre>
<p>
Immediates are allowed only on three of the bitwise operations,
and the <code>and</code> version always updates flags,
whereas the <code>or</code> and <code>xor</code> versions never
update flags.
</p>
<p>
For some reason, sign extension is placed in the logical operations
group.
</p>
<pre>
    extsb   rd, ra          ; rd = (int8_t)ra
    extsb.  rd, ra          ; rd = (int8_t)ra, update cr0
    extsh   rd, ra          ; rd = (int16_t)ra
    extsh.  rd, ra          ; rd = (int16_t)ra, update cr0
</pre>
<p>
We now have enough instructions to load constants.
</p>
<p>
If the constant is in the range
<code>0xFFFF8000</code>
to <code>0x00007FFF</code>,
it can be loaded in one instruction:</p>
<pre>
    ; load immediate: rd = (int16_t)imm16
    addi    rd, 0, imm16     ; li   rd, imm16
</pre>
<p>
It can also be done in one instruction
if the constant is an exact multiple of 65536.
</p>
<pre>
    ; load immediate shifted: rd = imm16 &lt;&lt; 16
    addis   rd, 0, imm16     ; lis  rd, imm16
</pre>
<p>
These take advantage of the fact that the <code>addi</code>
and <code>addis</code> instructions treat <var>r0</var> as
if it were zero.
They are the only non-memory instructions that have
this special behavior with respect to <var>r0</var>.
</p>
<p>
If the constant you want to load doesn't fall into either of
the two categories above,
then you'll have to load it in two steps:
</p>
<pre>
    addis   rd, 0, imm16a    ; rd =  imm16a &lt;&lt; 16
    ori     rd, rd, imm16b   ; rd = (imm16a &lt;&lt; 16) | (uint16_t)imm16b
</pre>
<p>
This sequence takes advantage of the fact that the
<code>ori</code> instruction treats its 16-bit immediate
as an unsigned value.
That way, we don't have to play funny games with
the most significant 16 bits if the least-significant 16 bits
happen to form a negative integer when interpreted as a
signed 16-bit value.
</p>
<p>
While I'm here I may as well mention a third synthetic
instruction based on <code>addi</code>:
</p>
<pre>
    ; load address: rd = effective address of imm16(ra)
    addi    rd, ra, imm16    ; la   rd, imm16(ra)
</pre>
<p>
A commonly-used synthetic instruction is "move register":
</p>
<pre>
    or      rd, ra, ra       ; mr  rd, ra
    or.     rd, ra, ra       ; mr. rd, ra
</pre>
<p>
Moving a register to itself is functionally a nop,
but the processor overloads it 
to signal information about priority.
</p>
<pre>
    or      r1, r1, r1       ; low priority
    or      r6, r6, r6       ; medium-low priority
    or      r2, r2, r2       ; normal priority
</pre>
<p>
A program can voluntarily set itself to low priority if it is
waiting for a spin lock.
There are other priority levels which are available only to
kernel mode and are ignored in user mode.
</p>
<p>
Finally, everybody's favorite instruction:
</p>
<pre>
    ori     r0, r0, 0        ; nop
</pre>
<p>
This is the official <code>nop</code> instruction recognized
by the processor.
There are other instructions that have no visible effect,
but they might not be optimized efficiently.
For example,
<code>rlwinm ra, ra, 0, 0, 31</code> has no visible effect,
but it will probably introduce a register dependency.
And as we saw above, sometimes instructions with no visible effect
become overloaded as signals to the processor,
so your best bet is to avoid them.
</p>
<p>
Wait, you don't know what the <code>rlwinm</code> instruction does?
We'll dig into that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180810-00/?p=99465">
next time</a>,
when we enter
the crazy world of rotating and shifting,
and you'll be formally introduced to the <code>rlwinm</code> instruction,
the Swiss army knife instruction of the PowerPC
instruction set.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1356105">
				<div id="div-comment-1356105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455#comment-1356105">
			August 9, 2018 at 7:15 am</a>		</div>

		<p>How does that priority signalling actually work?  Is it something that the CPU itself uses to e.g. go into a lower power mode?  Or is it something used by the OS software (by decoding the instructions?) to make decisions about thread priorities?</p>
<p>Having had to debug a lot of optimized PPC assembly on the Xbox 360, I can tell you that the rotate and shift family of instructions are absolutely bonkers, and I was constantly having to refer to the PPC ISA manuals to understand what the code I was stepping through was doing.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1356135">
				<div id="div-comment-1356135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455#comment-1356135">
			August 9, 2018 at 7:49 am</a>		</div>

		<p><a href=https://stackoverflow.com/a/5427094/902497 rel="nofollow">StackOverflow says</a> that it adjusts the relative priorities of execution units within a single core. So it&#8217;s to adjust how aggressively the execution unit competes for resources with other execution units.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1356185">
				<div id="div-comment-1356185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455#comment-1356185">
			August 9, 2018 at 1:43 pm</a>		</div>

		<p>It&#8217;s not really about execution unit priority; it&#8217;s about which hardware thread gets how many issue slots. Assuming you have multiple hardware threads running on the same CPU core that is.</p>
<p>If either 0 or 1 hardware threads are currently in a runnable state (i.e. not waiting on say a cache miss or otherwise stalling), it doesn&#8217;t matter. You just issue instructions from the one thread you can, if any.</p>
<p>But if you have at least 2 HW threads in runnable state (say thread A and thread B), the way HW multithreading works is that on some cycles thread A gets to feed new instructions into the pipe, and on some cycles thread B does. There is only one frontend that decodes instructions, and it&#8217;s time-sliced between the threads. The priority adjustments control how many time slices each thread gets. (This is time-slicing at the individual cycle level, mind, much finer-grained than OS-level threading is.)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-msn odd alt thread-odd thread-alt depth-1" id="comment-1356155">
				<div id="div-comment-1356155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180809-00/?p=99455#comment-1356155">
			August 9, 2018 at 10:11 am</a>		</div>

		<p>There are 8 bitwise operators out of 16 logical connectives, so I was curious about which ones are missing.</p>
<p>Contradiction and tautology (constant false and true) are obviously missing since they are independent of input. Then there are &#8220;Proposition P&#8221; and &#8220;Proposition Q&#8221; &#8211; the ones that just gives the first or second input back &#8211; as well as their negations. So that takes away 6 of the operators as not using both inputs. The last 2 remaining are andc and orc with swapped arguments (or alternatively the negation of them). Since you can just swap the arguments around it would seem that all 16 logical connectives are actually accessible in at most one instruction.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

