<html>
<head>
<title>Converting from traditional to simplified Chinese, part 3: Highlighting differences</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Converting from traditional to simplified Chinese, part 3: Highlighting differences</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 13, 2005 / year-entry #188</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050713-12/?p=34953</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the things that is interesting to me as a student of the Chinese languages is to recognize where the traditional and simplified Chinese scripts differ. Since this is my program, I'm going to hard-code the color for simplified Chinese script: maroon. To accomplish the highlighting, we take advantage of listview's custom-draw feature. Custom-draw...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of the things that is interesting to me as a student of the
Chinese languages is to recognize where the traditional and
simplified Chinese scripts differ.
Since this is my program, I'm going to hard-code the color for
simplified Chinese script:  maroon.
</p>
<p>
To accomplish the highlighting, we take advantage of listview's
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/custdraw/custdraw.asp">
custom-draw</a> feature.
Custom-draw allows you to make minor changes to the way items
are displayed on the screen.
It's a middle ground between having listview do all the work
(via default drawing behavior) and having the program do all
the work (via owner-draw).
</p>
<p>
The custom-draw cycle for shell common controls consists of
series of
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/custdraw/messages/nm_customdraw.asp">
<code>NM_CUSTOMDRAW</code> notifications</a>, starting with
the most general and getting more specific.
The reason for the break-down is multi-fold.
First, it allows the listview control to short-circuit a portion
of custom-draw behavior if the parent window does not indicate
that it wishes to customize a particular behavior.
This reduces message traffic and improves performance when large
numbers of items are being drawn.
Second, it allows the parent window to target its customizations
to the drawing stages it is interested in.
</p>
<p>
Listviews are peculiar among the shell common controls in that
its items sometimes (but not always) have sub-items.
This complicates the drawing process since it requires listview
to accomodate both styles:
large icon view does not use sub-items, but report view does.
To address this, the <code>CDDS_ITEMPREPAINT</code>
stage is entered when an item is about to paint,
and any changes made by the parent window are considered to
be effective for the entire item.
If you want to make changes on a per-subitem basis,
you have to respond to <code>CDDS_ITEMPREPAINT | CDDS_SUBITEM</code>
and set your properties (or reset them if you want to return to the
default) for that sub-item.
</p>
<p>
With those preliminary remarks settled, we can dive in.
</p>
<pre>
class RootWindow : public Window
{
 ...
protected:
 ...
 <font COLOR=blue>LRESULT OnLVCustomDraw(NMLVCUSTOMDRAW* pcd);</font>
 ...
private:
 HWND m_hwndLV;
 <font COLOR=blue>COLORREF m_clrTextNormal;</font>
 Dictionary m_dict;
};
</pre>
<p>
We declare our listview custom-draw handler as well as the member
variable in which we remember the normal text color so that we can
reset it for columns we do not intend to colorize.
</p>
<pre>
LRESULT RootWindow::OnNotify(NMHDR *pnm)
{
 switch (pnm-&gt;code) {
 case LVN_GETDISPINFO:
  OnGetDispInfo(CONTAINING_RECORD(pnm, NMLVDISPINFO, hdr));
  break;
 case NM_CUSTOMDRAW:
  if (pnm-&gt;hwndFrom == m_hwndLV) {
   return OnLVCustomDraw(CONTAINING_RECORD(
                         CONTAINING_RECORD(pnm, NMCUSTOMDRAW, hdr),
                                                NMLVCUSTOMDRAW, nmcd));
  }
  break;
 }
 return 0;
}
</pre>
<p>
If we receive a
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/custdraw/messages/nm_customdraw.asp">
<code>NM_CUSTOMDRAW</code> notification</a>
from the listview control, we call our new handler.
The multiple calls to
<a HREF="http://msdn.microsoft.com/library/en-us/kmarch/hh/kmarch/k106_6a249de6-d707-421c-9b91-96e1b14dc21b.xml.asp">
the <code>CONTAINING_RECORD</code> macro</a>
are necessary because
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/common/structures/nmhdr.asp">
the <code>NMHDR</code> structure</a> is nestled
two levels deep inside
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/commctls/listview/structures/nmlvcustomdraw.asp">
the <code>NMLVCUSTOMDRAW</code> structure</a>.
</p>
<pre>
<font COLOR=blue>LRESULT RootWindow::OnLVCustomDraw(NMLVCUSTOMDRAW* pcd)
{
 switch (pcd-&gt;nmcd.dwDrawStage) {
 case CDDS_PREPAINT: return CDRF_NOTIFYITEMDRAW;
 case CDDS_ITEMPREPAINT:
  m_clrTextNormal = pcd-&gt;clrText;
  return CDRF_NOTIFYSUBITEMDRAW;
 case CDDS_ITEMPREPAINT | CDDS_SUBITEM:
  pcd-&gt;clrText = m_clrTextNormal;
  if (pcd-&gt;iSubItem == COL_SIMP &amp;&amp;
    pcd-&gt;nmcd.dwItemSpec &lt; (DWORD)Length()) {
    const DictionaryEntry&amp; de = Item(pcd-&gt;nmcd.dwItemSpec);
    if (de.m_pszSimp) {
      pcd-&gt;clrText = RGB(0x80, 0x00, 0x00);
    }
  }
  break;
 }
 return CDRF_DODEFAULT;
}</font>
</pre>
<p>
During the <code>CDDS_PREPAINT</code> stage, we indicate our
desire to receive <code>CDDS_ITEMPREPAINT</code> notifications.
During the <code>CDDS_ITEMPREPAINT</code> stage,
we save the normal text color and indicate that we want to receive
sub-item notifications.
It is in the sub-item notification
<code>CDDS_ITEMPREPAINT | CDDS_SUBITEM</code> that the real work happens.
</p>
<p>
First, we reset the color to the default on the assumption that we
will not need to colorize this column.
But if the column is the simplified Chinese column, if the
item number is valid, and if the simplified Chinese is different
from the traditional Chinese, then we set the text color to maroon.
</p>
<p>
That's enough with the Chinese/English dictionary for now.
All this time, and we don't even have search capability yet!
We'll work on that next month.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-290323">
				<div id="div-comment-290323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Seth McCarus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050713-12/?p=34953#comment-290323">
			July 13, 2005 at 10:58 am</a>		</div>

		<p>Since this will probably rise to the top of Google&#8217;s results concerning list-view custom draw, let me add that on a dialog, you can&#8217;t just return CDRF_NOTIFYITEMDRAW, due to the way dialog procs work (as Raymond has discussed elsewhere).</p>
<p>Instead, set the return value in the dialog using SetWindowLongPtr and DWL_MSGRESULT, as in the following snippet:</p>
<p>switch (lvcd-&gt;nmcd.dwDrawStage)<br />
<br />{<br />
<br />  case CDDS_PREPAINT:<br />
<br />    SetWindowLongPtr(hwnd, DWL_MSGRESULT, CDRF_NOTIFYITEMDRAW);<br />
<br />    return TRUE;</p>
<p>  //&#8230;<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-290333">
				<div id="div-comment-290333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">binaryc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050713-12/?p=34953#comment-290333">
			July 13, 2005 at 11:18 am</a>		</div>

		<p>Why use CONTAINING_RECORD rather than a cast?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-290343">
				<div id="div-comment-290343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050713-12/?p=34953#comment-290343">
			July 13, 2005 at 1:07 pm</a>		</div>

		<p>The NMHDR structure&#8217;s base address is the same as the containing NMLVCUSTOMDRAW structure&#8217;s base address (NMHDR is the first member of the first member of the NMLVCUSTOMDRAW), so you can cast it directly, in this case.</p>
<p>But only in this case, and not if Microsoft changes one of the structures in the future (though that would break every existing program that uses them, so it likely won&#8217;t happen).  Still, IMO it&#8217;s a bit cleaner.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-290353">
				<div id="div-comment-290353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Dunn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050713-12/?p=34953#comment-290353">
			July 13, 2005 at 3:16 pm</a>		</div>

		<p>NMHDR and the related NMxxx structs were designed to be castable, no? Sort of like a simple version of inheritance that&#8217;s usable from C?</p>
<p>Shameless plug for my own list view custom draw article: <a rel="nofollow" target="_new" href="http://www.codeproject.com/listctrl/lvcustomdraw.asp" rel="nofollow">http://www.codeproject.com/listctrl/lvcustomdraw.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-306653">
				<div id="div-comment-306653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/09/16/468800.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050713-12/?p=34953#comment-306653">
			September 16, 2005 at 10:00 am</a>		</div>

		<p>Changing the font on a column-by-column basis.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

