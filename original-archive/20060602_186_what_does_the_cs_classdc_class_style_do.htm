<html>
<head>
<title>What does the CS_CLASSDC class style do?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What does the CS_CLASSDC class style do?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 2, 2006 / year-entry #187</td></tr>
<tr><td><b>Tags:</b></td><td>code;history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, I talked about the historical background for the CS_OWNDC class style and why it starts out sounding like a good idea but when you think about it some more turns out to be an awful idea. The CS_CLASSDC class style is the same thing, but worse, for it takes all the problems of...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, I talked about the historical background for
the <code>CS_OWNDC</code> class style and why it starts out
sounding like a good idea but when you think about it some more
turns out to be an awful idea.
</p>
<p>
The <code>CS_CLASSDC</code> class style is the same thing, but worse,
for it takes all the problems of <code>CS_OWNDC</code> and magnifies them.
Recall that the <code>CS_OWNDC</code> class style instructs the window
manager to create a DC for the window and use that single DC in response
to calls to <code>BeginPaint</code> and <code>GetDC</code>.
The <code>CS_CLASSDC</code> takes this one step further and
creates a DC for <strong>all the windows of that class</strong>.
So that problem I showed last time with a function that thought
it had two different DCs for a window can now happen even
across windows.
You think you have one DC for one window and another DC for another
window, but in fact they are the same!
</p>
<p>
What makes this even worse is that two threads can both be using
the same DC at the same time.
There is nothing in GDI to forbid it;
it's simply a race to see which thread's changes prevail:
"Last writer wins."
Imagine two threads that happen each to have a <code>CS_CLASSDC</code>
window from the same window class,
and suppose both windows need to be repainted.
Each window gets a <code>WM_PAINT</code> message, and the two
threads both go into their painting code.
But what these threads don't know is that they are operating on
the <strong>same DC</strong>.
</p>
<table>
<tr>
<th>Thread&nbsp;A</th>
<th>Thread&nbsp;B</th>
</tr>
<tr>
<td>HDC hdc = BeginPaint(hwnd, &amp;ps);</td>
</tr>
<tr>
<td></td>
<td>HDC hdc = BeginPaint(hwnd, &amp;ps);</td>
</tr>
<tr>
<td>SetTextColor(hdc, red);</td>
</tr>
<tr>
<td></td>
<td>SetTextColor(hdc, blue);</td>
</tr>
<tr>
<td>DrawText(hdc, ...);</td>
</tr>
<tr>
<td></td>
<td>DrawText(hdc, ...);</td>
</tr>
</table>
<p>
The code running in Thread&nbsp;A
fully expected the text to be in red since it set the text color
to red and then drew text.
How was it to know that just at that moment,
Thread&nbsp;B went and changed it to blue?
</p>
<p>
This is the sort of race condition bug that you'll probably never
be able to study under controlled conditions.
You'll just get bug reports from customers saying that
maybe once a month, an item comes out the wrong color, and maybe you'll
see it yourself once in a while, but it will never happen when
you have debugger breakpoints set.
Even if you add additional diagnostic code, all you'll see is this:
</p>
<pre>
...
SetTextColor(hdc, red);
ASSERT(GetTextColor(hdc) == red); <font COLOR=blue>// assertion fires!</font>
DrawText(hdc, ...);
</pre>
<p>
Great, the assertion fired.
The color you just set isn't there.
Now what are you going to do?
Maybe you'll just say "Stupid buggy Windows" and change your
code to</p>
<pre>
// Stupid buggy Windows. For some reason,
// about once a month, the SetTextColor doesn't
// work and we have to call it twice.
do {
 SetTextColor(hdc, red);
} while (GetTextColor(hdc) != red); 
DrawText(hdc, ...);
</pre>
<p>
And even that doesn't fix the problem, because
Thread&nbsp;B might have changed the color to blue
after the <code>GetTextColor</code> and the call to <code>DrawText</code>.
Now, it's only once every six months that the item comes out the
wrong color.
</p>
<p>
You swear at Microsoft and vow to develop Mac software from now on.
</p>
<p>
Okay, so now I hope I've convinced you that <code>CS_CLASSDC</code> is
a horrifically bad idea.
But if it's so fundamentally flawed,
why does it exist in the first place?
</p>
<p>
Because 16-bit Windows is co-operatively multi-tasked.
In the 16-bit world, you don't have to worry about another thread
sneaking in and messing with your DC because, as I already noted,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/06/27/432303.aspx">
the fact that you were running meant that nobody else was running</a>.
This whole multi-threaded disaster scenario could not occur,
so <code>CS_CLASSDC</code> is only slightly wackier than
<code>CS_OWNDC</code>.
The introduction of pre-emptive multi-tasking with multiple threads
in a single process is what
took us into the world of "this has no chance of ever working
properly".
The class style exists so people who used it in 16-bit code
can port to Win32 (as long as they promise to remain a single-threaded
application),
but no modern software should use it.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-387443">
				<div id="div-comment-387443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Derek Park</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387443">
			June 2, 2006 at 11:02 am</a>		</div>

		<p>What I don&#8217;t understand is, why doesn&#8217;t this page make it painfully clear that CS_OWNDC and CS_CLASSDC are bad news?</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/windowclasses/aboutwindow.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/windowclasses/aboutwindow.asp</a></p>
<p>It refers to CS_OWNDC as /convenient/, and makes it sound as if the only drawback is the use of the GDI heap (and then only on 95/98/ME). &nbsp;The comment for CS_CLASSDC makes it sound like the multi-thread failure will be almost graceful.</p>
<p>While I (kind of) understand leaving these flags in for backwards-compatibility, the documentation itself can, and should, be updated to accurately reflect the fact that these flags are not really not safe. &nbsp;A simple &quot;do not use these&quot; would be a great addition (maybe with a link to these posts . . . ).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387453">
				<div id="div-comment-387453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie Davis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387453">
			June 2, 2006 at 11:25 am</a>		</div>

		<p>Wow, that&#8217;s exactly what I was going to say. &nbsp;I know about this, you know about this, but the people who don&#8217;t know are the ones who are still reading MSDN and writing new apps, or maintaining old ones.</p>
<p>They need to be told! &nbsp;Why don&#8217;t the docs say, in big red letters, &quot;Don&#8217;t use! &nbsp;This is for apps written 20 years ago! &nbsp;There&#8217;s not even any benefit to using these!&quot;?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387463">
				<div id="div-comment-387463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miles Archer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387463">
			June 2, 2006 at 12:12 pm</a>		</div>

		<p>I think this is Raymond&#8217;s point exactly. He can&#8217;t change the docs so he posts the warning here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387483">
				<div id="div-comment-387483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chandler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387483">
			June 2, 2006 at 12:35 pm</a>		</div>

		<p>Since this seems to be left in solely for backwards compatability, why don&#8217;t they just depreciate it and post a comment on MSDN to explain it???? &nbsp;They do that for the &quot;non-secure&quot; sprintf&#8217;s, et al. You have to explicitly state that &quot;yes, I want to do that&quot; by adding a special #define to surpress the compile warnings.</p>
<p>Small amount of work, doesn&#8217;t break anything outright and bring about a more enilightened user (ok, that&#8217;s a bit hopeful on the last part&#8230;)</p>
<p>&#8212; Justin</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387493">
				<div id="div-comment-387493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.uesp.net' rel='external nofollow' class='url'>Dave</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387493">
			June 2, 2006 at 1:01 pm</a>		</div>

		<p>Wouldn&#8217;t examples like this make a good case for implementing backwords compatability in the form of virtualization/sandboxes? This would let you gracefully deprecate functions/flags like CS_OWNDC in the OS while letting the Win16 sandbox handle it normally (in theory anyways).</p>
<div class=post>[<i>Since the behavior is opt-in, there&#8217;s nothing to do. Or are you saying &#8220;Disable CS_OWNDC but if people find an app that relies on it, they can apply the compatibility shim to it&#8221;? Why make people manually do what the system already does automatically: If the app passes CS_OWNDC then it gets the CS_OWNDC behavior. The flag still works and behaves as documented. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387503">
				<div id="div-comment-387503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan McCarty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387503">
			June 2, 2006 at 1:04 pm</a>		</div>

		<p>Presumably, if you&#8217;re explicity using the CS_CLASSDC style you should know what the heck you&#8217;re doing, but one wonders at what point elements like these should just be deprecated. &nbsp;Larry Osterman touched on deprecating API&#8217;s a while back: <a rel="nofollow" target="_new" href="http://blogs.msdn.com/larryosterman/archive/2005/05/11/416497.aspx" rel="nofollow">http://blogs.msdn.com/larryosterman/archive/2005/05/11/416497.aspx</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387513">
				<div id="div-comment-387513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AlanM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387513">
			June 2, 2006 at 3:05 pm</a>		</div>

		<p>Look, overall, I agree that CS_OWNDC and CS_CLASSDC are generally obsolete, but what if you have a class of window that you want, by design, to have a static set of properties across all instances/threads/etc.? In other words, the pen, brushes, font, colors, everything, would always be the same throughout the life of the window.</p>
<p>For example, let&#8217;s say I want a window to draw a progress bar in a single color (and for various reasons, I want to actually create a window class rather than just go windowless and draw into a DC). My design says there will always be exactly one background color for all instances, and one foreground color for the progress. No text will be drawn, or, if it does, will use the same standard system font everytime, in the same color as the foreground pen. I would think a CS_CLASSDC class style would be just the ticket for this.</p>
<p>What am I missing?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387563">
				<div id="div-comment-387563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Ringer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387563">
			June 2, 2006 at 5:31 pm</a>		</div>

		<p>Is this the sort of thing that the Miscellaneous/DangerousAPIs check in Application Verifier checks for? I certainly hope so &#8230; since the chances of this sort of bug being detected in old code aren&#8217;t high otherwise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387533">
				<div id="div-comment-387533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.darklock.com/blog/' rel='external nofollow' class='url'>Caliban Darklock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387533">
			June 2, 2006 at 3:23 pm</a>		</div>

		<p>I can see an immediate benefit to CS_CLASSDC: using an appropriate synchronisation mechanism (e.g. a semaphore), you can have any number of applications write their status to the same window. </p>
<p>However, it would be less complex and buggy to use a separate thread that does nothing but accept status updates and log them to the window. </p>
<p>If I were implementing this feature today, sure, I *could* do it the same way I might have done it in an old version of Windows&#8230; but why? There are better ways to do it.</p>
<p>I think the modern issue is not so much that there&#8217;s no good use for this feature, it&#8217;s that almost anything which might make good use of this feature can accomplish the same thing in a much better way WITHOUT it. </p>
<p>However, there is a saying in the UNIX world that UNIX does not stop you from doing stupid things because that would stop you from doing clever things. I think the same is true here. Someone out there may be truly brilliant and use CS_OWNDC or CS_CLASSDC to do something that would otherwise be impossible. </p>
<p>The question is whether you consider it so important to prevent stupid, you would trade away the potential for clever. I tend to think the answer to that question is always &quot;no&quot;.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387583">
				<div id="div-comment-387583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Garlans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387583">
			June 2, 2006 at 11:25 pm</a>		</div>

		<p>Just out of curiousity, is there a tool which will execute a win32 app, and intercepts/watches all of its calls and interactions with the operating system, and looks out for the use of such potentially bug-ridden options?</p>
<p>of course if it&#8217;s your own code, you can simply find-in-files for certain keywords, but, what about if it&#8217;s someone elses app, or you want another external way to test your code.</p>
<p>there has to be a way! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387593">
				<div id="div-comment-387593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387593">
			June 2, 2006 at 11:36 pm</a>		</div>

		<p>Agreed it shouldn&#8217;t be marked depreciated, but warning should be made &quot;more noticable&quot; in the MSDN documentation about the undesired effects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387603">
				<div id="div-comment-387603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cypherpunks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387603">
			June 3, 2006 at 1:18 am</a>		</div>

		<p>I doubt Chen can change the docs, I&#8217;d imagine the paperwork to do so would be daunting.</p>
<p>Anything with a large corporation takes a lot of effort, hence little change, as it is easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387663">
				<div id="div-comment-387663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387663">
			June 3, 2006 at 3:49 pm</a>		</div>

		<p>Since these flags are being used for back-compat, can they be removed from the headers and marked as reserved in the docs? &nbsp;(Maybe we run into the &#8216;Microsoft uses undocumented APIs&#8217; issue this way)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387673">
				<div id="div-comment-387673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/lexmitchell' rel='external nofollow' class='url'>Lex</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387673">
			June 3, 2006 at 6:14 pm</a>		</div>

		<p>I prefer that it is mentioned here than nowhere but it does seem unfortunate that things like this aren&#8217;t marked as deprecated. We&#8217;re all guilty of rooting around and finding something just to get something that works every now and then.</p>
<p>Again tho&#8217; I&#8217;m grateful that at least the recommendation is available somewhere (not to mention that a deprecated flag generally doesn&#8217;t give such a throurgh detailing of the reasons for its retirement).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387683">
				<div id="div-comment-387683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">teflon dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387683">
			June 3, 2006 at 6:19 pm</a>		</div>

		<p>while on the topic of DCs, I have always wondered if its really 100% necessary to deselect things out of DCs before the releasing, or destroying the DC. </p>
<p>HDC hDC;<br />
<br />HBITMAP orgBmp;</p>
<p>hDC = GetDC(hWnd);<br />
<br />orgBmp = SelectObject(hDC, newBmp);</p>
<p>// do something useful</p>
<p>SelectObject(hDC, orgBmp);<br />
<br />ReleaseDC(hWnd, hDC);<br />
<br />return;</p>
<p>Any thoughts?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387693">
				<div id="div-comment-387693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JST</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387693">
			June 3, 2006 at 6:59 pm</a>		</div>

		<p>Yeah! &nbsp;I wanna know too! </p>
<p>What badness results from releasing a &#8220;dirty&#8221; DC?</p>
<div CLASS=post>[<i>Why does it matter? Just don&#8217;t do it. If I told you what could go wrong, you might say &#8220;Eh, that&#8217;s not so bad, I&#8217;ll just keep doing it.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387703">
				<div id="div-comment-387703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387703">
			June 4, 2006 at 4:00 am</a>		</div>

		<blockquote><p>
  I doubt Chen can change the docs, I&#8217;d imagine the paperwork to do so would be daunting. </p>
<p>Actually, it&#8217;s just a matter of firing off an e-mail to the SDK feedback address. You don&#8217;t even have to work for Microsoft. I&#8217;ve done this on several occasions, and each time my suggestions were incorporated in the next release.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387733">
				<div id="div-comment-387733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JST</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387733">
			June 4, 2006 at 5:08 pm</a>		</div>

		<p>Ok. &nbsp;I guess I deserved that. &nbsp;And I should have known what your answer would be, Raymond. &nbsp;Fine. &nbsp;I&#8217;ll shut up now&#8230; except&#8230;</p>
<p>What I was really asking about was not &quot;What&#8217;s proper practice for a workaday Windows application programmer?&quot;, but &quot;I&#8217;m curious about the internals of Windows &#8212; please spill the beanz.&quot;</p>
<p>And I have no right to expect an answer to that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387743">
				<div id="div-comment-387743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">teflon dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387743">
			June 4, 2006 at 9:08 pm</a>		</div>

		<p>re: switching back in the original objects&#8230;</p>
<p>The reason I was wondering is, if you look back to examples dating all the way back to the win3.1 days, it was not done. even scads of MS examples in MSDN did not do it. And sometimes code can get quite complex and verbose trying to swap back in the original objects. It would be interesting to know how much time a SelectObject() takes, and just what can go wrong if you dont do it on the way out. As a matter of fact, I have not done it from the Win3.1 days until only in the last few years because BoundsChecker whines so loudly if you dont do it. And, I cant see that anything has evert gone wrong from not doing it. But, it would be nice to know, what could go wrong? Is this another of those cases like passing a GetDesktopWindow() into DialogBox() &#8211; where the OS is going to fix it anyway. Raymond, help us, you are our only hope.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-387773">
				<div id="div-comment-387773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387773">
			June 4, 2006 at 11:58 pm</a>		</div>

		<p>This is the sort of thing where it might be worth breaking existing source code (collective gasps sound), by updating win.*.h to exclude deprecated items unless #define DEPRECATED_WIN0310 is included somewhere.</p>
<p>This would only be source-level deprecation, not binary support &#8212; MS is probably cursed with that for the next few versions of windows yet.</p>
<p>Raymond, while I&#8217;m here, is it true the Win3.1 WinProc source code had a &quot;goto OhMyGodICantBelieveImDoingThis&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-387863">
				<div id="div-comment-387863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-387863">
			June 5, 2006 at 10:42 am</a>		</div>

		<p>2 teflon dan &amp; JST: </p>
<p>The MSDN doc for SelectObject() says it clearly (but without an explanation): <br />&#8230; An application should always replace a new object with the original, default object after it has finished drawing with the new object&#8230; </p>
<p>How about to ensure &#8216;unbinding&#8217; of any possible graphics objects from the device context memory, before you release/destroy that DC. I mean there could be a problem (GDI leak) with releasing/destroying of some previously allocated and selected-in bitmap resources/classes. </p>
<p>But I am curious too about that, are there any other &#8216;crucial&#8217; reasons to do so? </p>
<div CLASS=post>[<i>You already know why; you just don&#8217;t realize it yet. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-388013">
				<div id="div-comment-388013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-388013">
			June 5, 2006 at 2:48 pm</a>		</div>

		<p>I never restore the original stock pens/brushes/bitmaps/etc. before releasing DCs, and I&#8217;ve never observed any GDI resource leaks or incorrect painting on either the 9x or NT platforms.</p>
<p>So I, too, would like to see an explanation of what &quot;could&quot; go wrong if you fail to do this.<br />
<br />(Note: I don&#8217;t use CS_CLASSDC or CS_OWNDC.)</p>
<p>&quot;The documentation says so&quot; isn&#8217;t a good enough reason to go back and update/retest heaps of code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-388053">
				<div id="div-comment-388053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-388053">
			June 5, 2006 at 6:56 pm</a>		</div>

		<p>Actually, it might be a good enough reason, because you don&#8217;t know what Windows is doing inside. So if the docs tell you to do something, you should probably be doing it, because you don&#8217;t have the required intimate knowledge of when, exactly, it&#8217;s safe not to.</p>
<p>To make it easy, see SaveDC and RestoreDC.</p>
<p>(This attitude has saved me loads of grief, loads of times ;)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-388083">
				<div id="div-comment-388083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-388083">
			June 5, 2006 at 9:03 pm</a>		</div>

		<p>Monday, June 05, 2006 2:48 PM by A<br />
<br />&gt; &quot;The documentation says so&quot; isn&#8217;t a good<br />
<br />&gt; enough reason to go back and update/retest<br />
<br />&gt; heaps of code.</p>
<p>Sometimes it is. &nbsp;The problem is that the answer still isn&#8217;t clear.</p>
<p>Monday, June 05, 2006 6:56 PM by Tom<br />
<br />&gt; Actually, it might be a good enough reason,<br />
<br />&gt; because you don&#8217;t know what Windows is doing<br />
<br />&gt; inside. So if the docs tell you to do<br />
<br />&gt; something, you should probably be doing it,<br />
<br />&gt; because you don&#8217;t have the required intimate<br />
<br />&gt; knowledge of when, exactly, it&#8217;s safe not to.</p>
<p>Yup. &nbsp;Probably you should obey MSDN, because roughly somewhere around 75% of MSDN is accurate. &nbsp;But we don&#8217;t know which 75% until we experiment. &nbsp;Even after experimenting we don&#8217;t always know what to do, because we don&#8217;t know what Windows is doing inside. &nbsp;About all I can do, usually, is that if the result of an experiment agrees with MSDN then I&#8217;ll usually rely on it.</p>
<p>There are exceptions though. &nbsp;For example for a long time MSDN has disagreed with MSDN about whether the first argument to a DllMain function has type HANDLE or type HINSTANCE. &nbsp;A few months ago Microsoft posted a decision that the argument has type HINSTANCE. &nbsp;Shortly after that, Microsoft posted a decision that Visual Studio will continue giving that argument type HANDLE. &nbsp;Microsoft said that you can change the declaration, well sure you can change it, but if you change it to type HINSTANCE then Visual Studio gives you compile time errors. &nbsp;This has been resolved as &quot;won&#8217;t fix&quot;. &nbsp;So whether or not we know what Windows is doing internally, and regardless of MSDN maybe undergoing edits to come into agreement with it, we can&#8217;t go back and update/retest code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-388483">
				<div id="div-comment-388483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr. Ed</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-388483">
			June 6, 2006 at 7:52 pm</a>		</div>

		<p>Why don&#8217;t the libraries check for single-threadedness if CS_OWNDC or CS_CLASSDC are specified? </p>
<div CLASS=post>[<i>(1)&nbsp;Which libraries? Do you mean the window manager? Or do you mean MFC/ATL/etc.? (2)&nbsp;How does one &#8220;check for single-threadedness&#8221;? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-390433">
				<div id="div-comment-390433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993#comment-390433">
			June 12, 2006 at 7:06 pm</a>		</div>

		<p>For CS_CLASSDC and CS_OWNDC, how about when BeginPaint is called, lock the DC so another thread has to wait until the DC is released before drawing in it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

