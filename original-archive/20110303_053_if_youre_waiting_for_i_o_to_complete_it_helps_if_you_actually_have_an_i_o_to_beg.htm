<html>
<head>
<title>If you're waiting for I/O to complete, it helps if you actually have an I/O to begin with</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you&#8217;re waiting for I/O to complete, it helps if you actually have an I/O to begin with</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 3, 2011 / year-entry #54</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw earlier the importance of waiting for I/O to complete before freeing the data structures associated with that I/O. On the other hand, before you start waiting, you have to make sure that you have something to wait for. A customer reported a hang in Get­Overlapped­Result waiting for an I/O to cancel, and the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw earlier
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/03/10124060.aspx">
the importance of waiting for I/O to complete before
freeing the data structures associated with that I/O</a>.
On the other hand, before you start waiting, you have to make
sure that you have something to wait <i>for</i>.
</p>
<p>
A customer reported a hang in <code>Get&shy;Overlapped&shy;Result</code>
waiting for an I/O to cancel, and the
I/O team was brought in to investigate.
They looked at the I/O stack and found that the I/O the customer
was waiting for was no longer active.
The I/O people considered a few possibilities.
</p>
<ul>
<li>The I/O was active at one point, but when it completed,
    a driver bug prevented the completion event from being signaled.
</li>
<li>The I/O was active at one point, and the I/O completed,
    but the program inadvertently called <code>Reset&shy;Event</code>
    on the handle, negating the <code>Set&shy;Event</code> performed
    by the I/O subsystem.
</li>
<li>The I/O was never active in the first place.
</li>
</ul>
<p>
These possibilities are in increasing order of likelihood
(and, perhaps not coincidentally,
decreasing order of relevance to the I/O team).
</p>
<p>
A closer investigation of the customer's code showed a code path
in which the <code>Read&shy;File</code> call was bypassed.
When the bypass code path rejoined the mainline code path,
the code continued its work for a while, and then if it decided
that it was tired of waiting for the read to complete, it
performed a <code>Cancel&shy;Io</code> followed by a
<code>Get&shy;Overlapped&shy;Result</code> to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/02/10123392.aspx">
wait for the cancellation to complete</a>.
</p>
<p>
If you never issue the I/O, then a wait for the I/O to complete
will wait forever,
since you're waiting for something that will never happen.
</p>
<p>
Okay, so maybe this was a dope-slap type of bug.
But here's something perhaps a little less self-evident:
</p>
<pre>
<i>// there is a flaw in this code - see discussion
// assume operating on a FILE_FLAG_OVERLAPPED file
if (ReadFile(h, ..., &amp;overlapped)) {
 // I/O completed synchronously, as we learned earlier
} else {
 // I/O under way
 ... do stuff ...
 // okay, let's wait for that I/O
 GetOverlappedResult(h, &amp;overlapped, &amp;dwRead, TRUE);
 ...
}</i>
</pre>
<p>
The <code>Get&shy;Overlapped&shy;Result</code> call can hang here
because the comment "I/O is under way" is overly optimistic:
The I/O may never even have gotten started.
If it never started, then it will never complete either.
You cannot assume that a <code>FALSE</code> return from
<code>Read&shy;File</code> implies that the I/O is under way.
You also have to check that <code>Get&shy;Last&shy;Error()</code>
returns <code>ERROR_<wbr>IO_<wbr>PENDING</wbr></wbr></code>.
Otherwise, the I/O failed to start, and you shouldn't wait for it.
</p>
<pre>
// assume operating on a FILE_FLAG_OVERLAPPED file
if (ReadFile(h, ..., &amp;overlapped)) {
 // I/O completed synchronously, as we learned earlier
} else <font COLOR=blue>if (GetLastError() == ERROR_IO_PENDING)</font> {
 // I/O under way
 ... do stuff ...
 // okay, let's wait for that I/O
 GetOverlappedResult(h, &amp;overlapped, &amp;dwRead, TRUE);
 ...
<font COLOR=blue>} else {
 // I/O failed - don't wait because there's nothing to wait for!
}</font>
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-898913">
				<div id="div-comment-898913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898913">
			March 3, 2011 at 7:43 am</a>		</div>

		<p>You mean &quot;the call to ReadFile was bypassed&quot; not &quot;the call to ReadFileEx&quot;. GetOverlappedResult doesn&#39;t work in pair with ReadFileEx at all.</p>
<div class="post">[<i>Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898923">
				<div id="div-comment-898923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898923">
			March 3, 2011 at 8:31 am</a>		</div>

		<p>Nice one! Normally its a good idea to check your assumptions. This customer didn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898943">
				<div id="div-comment-898943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898943">
			March 3, 2011 at 9:05 am</a>		</div>

		<p>Musta been a junior coder. How could a read operation ever fail?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898953">
				<div id="div-comment-898953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">davep</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898953">
			March 3, 2011 at 9:33 am</a>		</div>

		<p>&quot;Nice one! Normally its a good idea to check your assumptions. This customer didn&#39;t.&quot;</p>
<p>Well, at least they commented about their assumptions. (The comment was a help in figuring out the problem.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898983">
				<div id="div-comment-898983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tihiy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898983">
			March 3, 2011 at 2:14 pm</a>		</div>

		<p>Is there any benefit of issue-async-I/O and wait-in-the-same-thread over just-perform-sync-I/O?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899013">
				<div id="div-comment-899013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899013">
			March 3, 2011 at 4:35 pm</a>		</div>

		<p>Tihiy:</p>
<p>The samples where they are waiting in the same thread is often just a simplification. In real world apps, you would use completion ports or async io and then do other things while checking occasionally, or put the io onto a seperate thread. Samples are always meant to illustrate the issue, not provide a real life usage since real life usage is much more complex and would distract people from what they are meant to be looking at. But as you noted, there is no benefit to start an async operation and wait.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899023">
				<div id="div-comment-899023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899023">
			March 3, 2011 at 5:36 pm</a>		</div>

		<p>Totally off-topic but here is a youtube video showing someone upgrading from MS-DOS 5.0 through every version of Windows up to Windows 7. Applications that are twenty years old still work! <a rel="nofollow" target="_new" href="http://www.youtube.com/watch?v=vPnehDhGa14" rel="nofollow">http://www.youtube.com/watch</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899033">
				<div id="div-comment-899033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899033">
			March 3, 2011 at 5:44 pm</a>		</div>

		<p>There are a few common scenarios for issuing an async I/O and waiting in the same thread. The most obvious is when you want to time out or otherwise cancel the operation. Prior to Vista there was no way to cancel a synchronous I/O, so if you wanted to cancel an I/O (because the user wanted to cancel or the operation timed out) you had to make it async.</p>
<p>The other common reason is that you have to do some I/O and a computation. You start the I/O, perform your computation, then wait for the I/O to complete so that you can continue with the result of the I/O.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898993">
				<div id="div-comment-898993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-898993">
			March 3, 2011 at 3:08 pm</a>		</div>

		<p>&quot;Is there any benefit of issue-async-I/O and wait-in-the-same-thread over just-perform-sync-I/O?&quot;</p>
<p>Well for starters you are not limited to waiting *only* on that, you can wait on multiple operations at once, or wait for some cancellation event as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899043">
				<div id="div-comment-899043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899043">
			March 4, 2011 at 2:41 am</a>		</div>

		<p>Surely it must be a source of confusion to use ERROR_IO_PENDING to indicate that the I/O was successfully initiated?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-899053">
				<div id="div-comment-899053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899053">
			March 4, 2011 at 5:39 am</a>		</div>

		<blockquote><p>
  Surely it must be a source of confusion to use ERROR_IO_PENDING to</p>
<p>  indicate that the I/O was successfully initiated?
</p></blockquote>
<p>Perhaps, but it&#39;s less clumsy than having two outputs, one to say whether the call was successful and another to say whether the I/O had never been started, had finished, or was ongoing.</p>
<p>The real trouble is that Win32 has only one way to say &#39;success&#39;. &nbsp;In the I/O system, &#39;pending&#39; is not an error but an alternative success status.</p>
<p>Well, that and the naming convention that gives us &#39;ERROR_SUCCESS&#39; ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899123">
				<div id="div-comment-899123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313#comment-899123">
			March 4, 2011 at 10:02 am</a>		</div>

		<p>The title, for English majors: &quot;Before you start waiting for Godot, make sure Godot is actually on his way.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

