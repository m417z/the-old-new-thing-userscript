<html>
<head>
<title>If you wished a language supported the preprocessor, you know, you can fix that</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you wished a language supported the preprocessor, you know, you can fix that</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 24, 2009 / year-entry #228</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer had the following question about the message compiler, something that I had noted almost nobody uses. Well how do you do, we found somebody who actually uses it. Anyway, the question went like this (paraphrased, as always): Can I use symbolic constants in my .mc file? For example, I have a message file...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had the following question about the
<a HREf="http://msdn2.microsoft.com/en-us/library/aa385638(VS.85).aspx">
message compiler</a>,
something that I had noted
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/05/29/2955171.aspx">
almost nobody uses</a>.
Well how do you do, we found somebody who actually uses it.
Anyway, the question went like this (paraphrased, as always):
</p>
<blockquote CLASS=q>
<p>
Can I use symbolic constants in my .mc file?
For example, I have a message file that goes like this:
</p>
<pre>
SymbolicName=ERROR_XYZ_TOO_LARGE
The XYZ parameter cannot exceed 100.
.

SymbolicName=ERROR_ABC_TOO_SMALL
The ABC parameter must be at least 1.
.

SymbolicName=ERROR_CANT_COMBINE_ABC_WITH_XYZ
You cannot specify values for both ABC and XYZ.
.
</pre>
<p>
I have symbols defined in a header file
<code>#define MINIMUM_ABC_VALUE 1</code> and
<code>#define MAXIMUM_XYZ_VALUE 100</code>
that I, of course, have to keep in sync with the error messages.
One way to do this is to change the messages:
</p>
<pre>
SymbolicName=ERROR_XYZ_TOO_LARGE
The XYZ parameter cannot exceed %1!d!.
.

SymbolicName=ERROR_ABC_TOO_SMALL
The ABC parameter must be at least %1!d!.
.
</pre>
<p>
And in my function that prints error messages, I can insert
these magic parameters:
</p>
<pre>
error = DoMyThing(...);

if (error != ERROR_SUCCESS) {
 switch (error) {
 case ERROR_ABC_TOO_SMALL:
  Insertion = MINIMUM_ABC_VALUE;
  break;
 case ERROR_XYZ_TOO_LARGE:
  Insertion = MAXIMUM_XYZ_VALUE;
  break;
 case ERROR_CANT_COMBINE_ABC_WITH_XYZ:
  Insertion = 0; // not used
  break;
 ... repeat for other error messages...
 }
 DWORD_PTR Parameters[1] = { Insertion };

 FormatMessage(FORMAT_MESSAGE_ARGUMENT_ARRAY ...
     ..., error, ..., (va_list*)&amp;Parameters)...
}
</pre>
<p>
This is obviously a rather high-maintenance approach.
Is there some way I could just write, say,
</p>
<pre>
SymbolicName=ERROR_XYZ_TOO_LARGE
The XYZ parameter cannot exceed {MAXIMUM_XYZ_VALUE}.
.

SymbolicName=ERROR_ABC_TOO_SMALL
The ABC parameter must be at least {MINIMUM_ABC_VALUE}.
.
</pre>
<p>
and have the message compiler do the substitution?
It would be great if it could even take the values from my header files.
</p>
</blockquote>
<p>
This is a case of standing right next to the answer and not even realizing it.
</p>
<p>
There's no law that says that you're not allowed to use any other tools.
It so happens that the preprocessor is a handy tool.
If you want the preprocessor to run over your message files before
they go into the message table,
then why not run the preprocessor over your message files
before they go into the message table?
</p>
<pre>
#include "qqlimits.h" // pretend the program's name is "qq"

...

SymbolicName=ERROR_XYZ_TOO_LARGE
The XYZ parameter cannot exceed MAXIMUM_XYZ_VALUE.
.

SymbolicName=ERROR_ABC_TOO_SMALL
The ABC parameter must be at least MINIMUM_ABC_VALUE.
.

SymbolicName=ERROR_CANT_COMBINE_ABC_WITH_XYZ
You cannot specify values for both ABC and XYZ.
.
</pre>
<p>
Give this file a name like, say, <code>qq.mcp</code>,
and add a rule to your makefile:
</p>
<pre>
qq.mc: qq.mcp qqlimits.h
  cl /EP qq.mcp &gt;qq.mc
</pre>
<p>
Make your changes to <code>qq.mcp</code>, and when you build,
the makefile will preprocess it and generate the <code>qq.mc</code>
file, which you can then compile with the message compiler just
like you were doing before.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-756873">
				<div id="div-comment-756873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-756873">
			July 24, 2009 at 10:41 am</a>		</div>

		<p>Hmm&#8230;The C preprocessor can be a bit tied to C/C++ language syntax for that to be generally useful. ISTR problems with quote (&#8216;) and double-quote (&#8220;) marks needing to balance out properly, and macros within quotes of either kind being ignored, as well as some other weird behaviours I didn&#8217;t expect (because I wasn&#8217;t thinking with my C hat on) when I tried this.</p>
<p>m4 (or another general text substitution/expansion tool) might be a better fit. Not sure if MS have an m4 implementation (as part of SFU maybe?) but I think that GNU m4 is available for Windows.</p>
<div class=post>[<i>Forest vs trees. Feel free to use whatever preprocessor works best for you. The point remains: If you want a preprocessor, use a preprocessor. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-756903">
				<div id="div-comment-756903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-756903">
			July 24, 2009 at 11:38 am</a>		</div>

		<p>I must be in the minority then &#8211; I started using mc for something in 2007!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-756923">
				<div id="div-comment-756923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-756923">
			July 24, 2009 at 11:46 am</a>		</div>

		<p>Was this post inspired by Googlewhacking? &nbsp;You&#8217;ve written a plausible post about two tools (message compiler and make) that probably aren&#8217;t being used together by anyone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-756933">
				<div id="div-comment-756933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdasd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-756933">
			July 24, 2009 at 11:57 am</a>		</div>

		<p>Will this compile in message comiler, even though the preprocessor includes a header file into the mc file?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-756943">
				<div id="div-comment-756943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-756943">
			July 24, 2009 at 12:30 pm</a>		</div>

		<p>@asdasd &gt; Good point. You&#8217;d have to be careful to ensure that the include file only contained preprocessor directives, and not, for example, enum definitions, global (const) variable declarations, function declarations, etc&#8230;. Otherwise that could cause syntax errors in the mc file.</p>
<p>I think comments would be OK, as I&#8217;m pretty sure it&#8217;s the preprocessor&#8217;s job to strip out comments. And there might be an option/switch to turn comment elimination on/off. But that&#8217;s another gotcha &#8211; you have to be careful about comment markers in text you want to keep. Fortunately they&#8217;re not that likely to crop up, unless they&#8217;re the messages for a C preprocessor/compiler! :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-756953">
				<div id="div-comment-756953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-756953">
			July 24, 2009 at 1:04 pm</a>		</div>

		<p>The C preprocessor is surprisingly useful for a variety of languages. We use it to preprocess Javascript, for example, which cuts down on maintenance quite a bit. (Try to create a Javascript assert() that has both a clear syntax and zero non-debug overhead without /bin/cpp.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-756973">
				<div id="div-comment-756973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-756973">
			July 24, 2009 at 1:39 pm</a>		</div>

		<p>Raymond, Daniel, and anyone else crazy enough to do this:</p>
<p>The C preprocessor is specified only to work on C. When you run it over something that isn&#8217;t C you are basically saying &quot;Oh I do I hope I introduce hard to find bugs into this system, that is sure to delight future maintenance programmers&quot;.</p>
<p>Don&#8217;t do it. If you want a general purpose macro language, use one. But then you&#8217;re back into another of Raymond&#8217;s pet issues about tool dependencies. The customer&#8217;s set of tools probably doesn&#8217;t yet include m4. If you&#8217;re going to make an exception for m4, why not make an exception for Perl? Or just use a better OS platform with nicer tools ? Or give it all up and become a goat herder ? With a suitably wide frame of view all these are valid answers, right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-756983">
				<div id="div-comment-756983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-756983">
			July 24, 2009 at 1:51 pm</a>		</div>

		<p>Nick, there&#8217;s a saying: the first time it&#8217;s a hack; the second time, it&#8217;s a trick; the third, a well-established technique.</p>
<p>The C preprocessor is standardized and robust. That is was designed to work with the C language has no bearing whether it actually /does/ work with other languages. In using it that way, you&#8217;re not relying on implementation details subject to arbitrary change, but precisely standardized behavior. There&#8217;s no harm in that.</p>
<p>The tool dependency issue for CPP is also a non-issue because practically every development environment includes a copy. It&#8217;s universal.</p>
<p>Also, in my book, m4 is a perfectly reasonable build dependency. Many projects (such as Mozilla) use ports of Unix tools to build even under win32. There&#8217;s no shame in that.</p>
<p>As for your argument that using CPP will confuse maintenance programmers: come on, the idea that we should never do anything that might confuse anybody was the central thesis behind COBOL. We&#8217;ll never make any progress that way. The advantages of preprocessing far outweigh the very slight learning curve. Any programmer worth his salt will easily be able to cope with it.</p>
<p>(Unless you&#8217;re hiring, that is, straight out of a school that teaches C pointers by explaining (and I quote verbatim), &quot;the star means it&#8217;s like Java&quot;. If you hire such people, may God have mercy on your code.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757063">
				<div id="div-comment-757063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757063">
			July 24, 2009 at 5:32 pm</a>		</div>

		<p>Yeah, we use this on our web configs for multiple versions of the web config depending on what we are doing. Handy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757083">
				<div id="div-comment-757083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757083">
			July 24, 2009 at 9:48 pm</a>		</div>

		<blockquote><p>
  &gt; The C preprocessor is specified only to work on C.
</p></blockquote>
<p>Yeah, think of all the idiots who use it with C++ and IDL. What were they thinking?</p>
<p>A true C preprocessor knows nothing about C in the first place, that&#8217;s the compilers job. So exactly how it&#8217;s supposed to only work on C I don&#8217;t know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757093">
				<div id="div-comment-757093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757093">
			July 24, 2009 at 9:56 pm</a>		</div>

		<p>@Nick Lamb</p>
<p>are you kidding? &nbsp;The C preprocessor is heavily used to pre-process many things. I can&#8217;t see danger in using it. &nbsp;All it does is strip C-style comments and respond to #-sign commands &nbsp;</p>
<p>There is no simpler and well-understood when you want to use defines, includes and comments in some kind of script or control file that is processed by a utility or a parser you wrote. &nbsp;</p>
<p>What would be dumb is using some other &quot;macro language&quot; that no one knows, and that requires some tool no one has.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757103">
				<div id="div-comment-757103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.roseharp.com' rel='external nofollow' class='url'>Timothy Byrd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757103">
			July 24, 2009 at 9:58 pm</a>		</div>

		<p>I&#8217;m also using the message compiler. To localize my company&#8217;s product, there is the .mc file, a dozen .rc resource files, files of global LPCTSTRs generated by automatically stripping out string literals from the C++ source and then compiled into resource .dlls, and C# .resx files generated from .txt files generated by stripping out literal strings from C# code.</p>
<p>My big task was to take all these sources of translatable strings and generate Excel files to send to our translators and then use those Excel files to create translated resouece binaries. I currently loathe code pages.</p>
<p>About the C preprocessor, if there aren&#8217;t macros to expand or directives to process, it doesn&#8217;t go arbtrarily changing the source code. And if you&#8217;re doing something vile like in Raymond&#8217;s &quot;A rant against flow control macros&quot; <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/01/06/347666.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/01/06/347666.aspx</a> , then you deserve what you get. And as Raymond says, you can write a custom preprocessor, or even a batch file driving a regex-replace utility.</p>
<p>&#8212; T</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757003">
				<div id="div-comment-757003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757003">
			July 24, 2009 at 4:05 pm</a>		</div>

		<p>&gt;&gt; You&#8217;ve written a plausible post about two tools (message compiler and make) that probably aren&#8217;t being used together by anyone.</p>
<p>I can happily confirm they *are* still being used together.</p>
<p>I wouldn&#8217;t be surprised if developers brought up only using IDEs have a mental road block to doing anything that isn&#8217;t on the menu options.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757143">
				<div id="div-comment-757143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757143">
			July 25, 2009 at 1:45 am</a>		</div>

		<p>The open-source folks use the C preprocessor a lot &#8211; preprocessing everything. Especially anything that can run through gcc, has a language variant tha understands preprocessor commands.</p>
<p>Anyhow, it encourages clean code and symbolic constants &#8211; a good thing. You put all your error defines in a header, and now it&#8217;s preprocessable with anything that might need it &#8211; assembly, HTML, README, what have you.</p>
<p>Defining things once is a good thing &#8211; less to maintain and less to worry about constants getting out of sync.</p>
<p>And less reliance on arbitrary commands to do the same thing.</p>
<p>E.g., in assembly, the assembler often has directives to include a file. Or you could do #include &quot;defs.inc&quot;.</p>
<p>Ditto when doing conditional compiles &#8211; the syntax differs, but if you can use #ifdef, the code seems more familiar&#8230; plus the C preprocessor can do a lot more than what other tools often allow&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757163">
				<div id="div-comment-757163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757163">
			July 25, 2009 at 5:43 am</a>		</div>

		<p>I use php to preprocess custom format xml (describing UI) into cpp a lot like code-behind files in c# (aided with partial classes). Only the IDE integration is lacking. I wish there was a way to similary view these &quot;to-be-preprocessed&quot; files as sub-items there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757173">
				<div id="div-comment-757173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757173">
			July 25, 2009 at 6:31 am</a>		</div>

		<p>“The C preprocessor is standardized and robust. That is was designed to work with the C language has no bearing whether it actually /does/ work with other languages. In using it that way, you&#8217;re not relying on implementation details subject to arbitrary change, but precisely standardized behavior.”</p>
<p>Nope. Only that fraction of the implementation which matters to a C compiler is standardized. The C preprocessor, for example, need not care about the difference between TAB and other kinds of whitespace. Did the text you were pre-processing care? Shame, you&#8217;ve just introduced a hard to find bug.</p>
<p>“A true C preprocessor knows nothing about C in the first place, that&#8217;s the compilers job. So exactly how it&#8217;s supposed to only work on C I don&#8217;t know.”</p>
<p>Again wrong, the C preprocessor is required to use C&#8217;s tokenisation. You probably unconsciously rely on this all the time. If you mention the name of a macro in a constant string for example, you are completely unastonished that CPP ignores it &#8211; that&#8217;s not a symbol it&#8217;s just part of a string. See?</p>
<p>“All it does is strip C-style comments and respond to #-sign commands”</p>
<p>And wrong a third time.</p>
<p>If you don&#8217;t know, don&#8217;t make up an answer and then insist you&#8217;re right no matter what. That works for politicians but it doesn&#8217;t work in programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757193">
				<div id="div-comment-757193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757193">
			July 25, 2009 at 3:42 pm</a>		</div>

		<p>@porter &#8211; the preprocessor is heavily dependent on a particular somewhat idiosyncratic tokenization model (do you know why 0x1E-2 isn&#8217;t 0x1C?) and also if you #include any files it will emit #line directives for the compiler to pick up. It will not necessarily work well for languages that are not designed to cope with this. That a few languages other than C either are designed to work with it or happen to coincidentally work with it does not change this fact.</p>
<p>In other words &#8211; yes it is well-defined standardized behavior, but that standard also includes behavior you may not want. So by all means try it &#8211; it might work. Just cross your fingers, and don&#8217;t be surprised if it doesn&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757203">
				<div id="div-comment-757203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757203">
			July 25, 2009 at 4:07 pm</a>		</div>

		<blockquote><p>
  &gt; also if you #include any files it will emit #line directives for the compiler to pick up
</p></blockquote>
<p>&quot;#line&quot; can be turned off.</p>
<p>I see what you are saying, for files that have a format which abides by the &quot;cpp&quot; processing rules, eg C, C++, def files, IDL files, C# and Java etc then &quot;cpp&quot; is appropriate.</p>
<p>Where you have more free form formats, especially including unquoted human text it&#8217;s asking for trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757213">
				<div id="div-comment-757213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757213">
			July 25, 2009 at 8:08 pm</a>		</div>

		<p>Alas even &quot;cpp&quot; can&#8217;t make up for the fact that Visual C++ 2008 Express omits MC.EXE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757263">
				<div id="div-comment-757263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757263">
			July 26, 2009 at 1:20 pm</a>		</div>

		<blockquote><p>
  And wrong a third time.
</p></blockquote>
<p>></p>
<blockquote><p>
  If you don&#8217;t know, don&#8217;t make up an answer and</p>
<p>  then insist you&#8217;re right no matter what. That</p>
<p>  works for politicians but it doesn&#8217;t work inprogramming.
</p></blockquote>
<p>@Nick Lamb: that insults our two decades experience with the C pre-processor. &nbsp;</p>
<p>You&#8217;re &quot;making up&quot; an unsubstantiated case against the C PreProcessor with allegations introduce &#8216;hard to find bugs&#8217;. Where are examples?</p>
<p>I&#8217;ll tell you what &quot;doesn&#8217;t work for programmings&quot;. It&#8217;s writing your own macro/include/conditional compilation system instead of using the one that&#8217;s there, debugged and well-understood. &nbsp;Or worse, not having it all and then creating more work and maintenance for everyone in the team.</p>
<p>Hard-to-find bugs? &nbsp;how about those cause by copy/paste or having to maintain different identical files because a stubborn dev didn&#8217;t want to use CPP to feed another tool.</p>
<p>Or even doubly-worse, inflicting on the team a perl script that pre-processes these files in a way that no one other than the author fully understands.</p>
<p>We use the CPP for dozens of different type of custom or standard control file or scripts. Everyone does. Do you put numeric constants in your .rc files to avoir using the pre-precessor? &nbsp;What about IDL files?</p>
<p>I&#8217;m absolutely outraged that you would write &#8216;those of you crazy enough to try this&#8217;. Everyone uses the C processor on non-C code. &nbsp;Every time you compile your Windows app resource you do.</p>
<p>Should you use it for the message compiler too? &nbsp;Naturally. &nbsp;There is no fault that can be found with that suggestion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757273">
				<div id="div-comment-757273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757273">
			July 26, 2009 at 1:34 pm</a>		</div>

		<blockquote><p>
  &gt;“All it does is strip C-style comments and respond to #-sign commands”</p>
<p>  And wrong a third time.</p>
<p>  If you don&#8217;t know, don&#8217;t make up an answer and</p>
<p>  then insist you&#8217;re right no matter what. That works for</p>
<p>  politicians but it doesn&#8217;t work in programming.
</p></blockquote>
<p>FYI: What I said is exactly what the C processor does. &nbsp;Do <em>you</em> know what the CPP? It&#8217;s a separate tool that runs before the C Compiler. &nbsp;It knows nothing of the C language syntax.</p>
<p>The C Pre Processor is compatible with any ACSII file that doesn&#8217;t give need to use the &quot;#&quot; pound sign, comments, or give a meaning to double quotes other than being string.</p>
<p>If whatever file you intend to process isn&#8217;t compatible with that, the option of using CPP didn&#8217;t even come up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757283">
				<div id="div-comment-757283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Lamb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757283">
			July 26, 2009 at 8:37 pm</a>		</div>

		<p>Wow, I think I made Ulric pretty mad, he&#8217;s lost the ability to write coherent sentences and spell words.</p>
<p>Ulric, take a text editor, and create a nice simple text file that contains just a tab (U+0009) character and then the word FILE immediately followed by a full stop and the three letters DOC.</p>
<p>Now run it through your preprocessor†, and see what yours does to the tab. In a lot of preprocessors your U+0009 tab will mysteriously turn into a U+0020 space, but not all of them.</p>
<p>Next, try defining FILE to a number, let&#8217;s try 1066. Hey, my preprocessor added some more whitespace after the number. It turns out to be convenient to avoid tokenisation problems with numbers in the next phase of compilation, so your preprocessor probably does this too. But not with every definition, ordinary words are left alone. On the other hand, if it&#8217;s not actually an ISO C preprocessor, it might not add whitespace at all. More unpredictability.</p>
<p>Neither of these little &quot;surprises&quot; is on your list. There are dozens more. Allow me to repeat myself: The C preprocessor is for C, if your input language has its own preprocessor, use it, if it doesn&#8217;t, use a general purpose macro processor like m4.</p>
<p>† Those at home feel free to play along with different CPPs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-757293">
				<div id="div-comment-757293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757293">
			July 26, 2009 at 9:31 pm</a>		</div>

		<p>@porter: That doesn&#8217;t matter &#8212; a lot of those sorts of tools are missing from there. &nbsp;But it&#8217;s in the Windows SDK.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-757313">
				<div id="div-comment-757313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">antoineL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090724-00/?p=17373#comment-757313">
			July 27, 2009 at 6:38 am</a>		</div>

		<p>I am not sure I understand the positions in this flamewar: while cpp is independant from the C semantic, it does require something pretty akin from C syntax, like for example  escaping, &quot; and &#8216; used for string litterals, /* */ for comments, handling of whithespaces, # for metacommands, 0x meaning hexadecimal overridding etc.</p>
<p>As a result, cpp disqualifies to be used with Intel-syntax assemblers, including both MASM and NASM; or Makefiles; or the special syntax with FILE.DOC Nick described just above.</p>
<p>But the other part of the same point is that several language were designed with that in mind; and it was also obviously done so for RC, MIDL, &#8230; and MC! So I do not see why it could be a bad idea not to rely on this.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

