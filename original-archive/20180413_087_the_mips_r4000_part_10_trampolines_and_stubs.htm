<html>
<head>
<title>The MIPS R4000, part 10: Trampolines and stubs</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 10: Trampolines and stubs</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 13, 2018 / year-entry #87</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You can't get there from here, at least not in one go.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw earlier
that the relative branch instructions have a reach of
&plusmn;128<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">KB</a>,
but what if the function you want to call is further away
than that?
</p>
<p>
The linker detects that the branch target is too far away
and creates a trampoline stub,
the same way
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170807-00/?p=96766">
the Alpha AXP compiler did</a>.
The branch instruction is then rewritten to be a branch
to the trampoline, and the trampoline performs another jump
to the final destination.
</p>
<pre>
    BAL     dest_trampoline ; was "BAL dest"
...
dest_trampoline:
    J       dest
    NOP                     ; branch delay slot
</pre>
<p>
The limited reach of the relative branch instructions
means that a single function cannot be larger than 256KB.
</p>
<p>
On the other hand, the existence of the <code>JAL</code>
instruction means that the compiler doesn't really need
to use <code>BAL</code> at all.
Trampolines come into play only with conditional calls,
and those are relatively rare.
</p>
<p>
If a function is
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20060721-06/?p=30433">
na&iuml;vely-imported</a>,
then the compiler will generate a normal branch-and-link
instruction,
and the import library will provide a stub that in turn
jumps indirectly through the import table.
Doing this requires a scratch register,
and that's where the <var>at</var> register once again
enters the picture:
</p>
<pre>
    BAL     imported_function_stub
...

imported_function_stub:
    LUI     at, XXXX
    LW      at, YYYY(at)    ; load from import address table
    JR      at              ; and jump there
    NOP                     ; branch delay slot
</pre>
<p>
Where <code>XXXX</code> and <code>YYYY</code>
are computed in the usual way, namely, so that
<code>(XXXX &lt;&lt; 16) + (int16_t)YYYY</code>
is the address of the import address table entry.
</p>
<p>
If you are unlucky enough that you are calling an imported
function na&iuml;vely, <i>and</i> the imported stub
is beyond the reach of the <code>BAL</code> instruction,
then you will have to bounce through two trampolines!
The first was generated by the linker to help you
reach the stub, and the second came from the import library
to get you from the stub to the final destination.
</p>
<p>
This double-trampoline could also happen on the
Alpha AXP, but it was less common because the Alpha AXP's
relative branch instructions have a reach of
&plusmn;4MB,
as opposed to the MIPS R4000's relative branch instructions,
which can reach only
&plusmn;128KB.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1333035">
				<div id="div-comment-1333035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505#comment-1333035">
			April 13, 2018 at 8:52 am</a>		</div>

		<p>Most (all?) 8-bit processors store the displacement of relative jumps in a single byte, so they are limited to a range of ±127 *bytes* (more like -126 to +129, taking into account the instruction&#8217;s two bytes). In my days of programming the Apple II in machine code and assembler, I didn&#8217;t found that limited range to be a big problem (I rarely had to use a trampoline). And I&#8217;d say that it&#8217;s good, because it forces to think about your code: if your functions are so big that you have to ask what the relative addressing limit is, then you are doing something wrong.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1333075">
				<div id="div-comment-1333075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505#comment-1333075">
			April 13, 2018 at 5:09 pm</a>		</div>

		<p>I encountered the x86 byte limit too frequently. Mid-function trampolines. Joy.</p>
<p>On an unrelated note a size-speed optimization is available: all the nops between the trampolines of the second form can be omitted for a minor speed penalty if the trampoline was correctly predicted. The nops after the last one has to remain or something other than the at register gets corrupted.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1333135">
				<div id="div-comment-1333135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505#comment-1333135">
			April 14, 2018 at 8:48 am</a>		</div>

		<p>On the other hand, packing the trampolines too tightly means that you have jump instructions so close to each other that they occupy the same slot in the branch predictor, so one of them will always mispredict. Hopefully your trampolines are not in high-performance code paths.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1333105">
				<div id="div-comment-1333105" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505#comment-1333105">
			April 14, 2018 at 3:18 am</a>		</div>

		<p>Aggressive inlining perhaps?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fjeldse even thread-odd thread-alt depth-1 parent" id="comment-1333555">
				<div id="div-comment-1333555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505#comment-1333555">
			April 18, 2018 at 8:50 am</a>		</div>

		<p>Would the old 8086 &#8220;anti-test&#8221; pattern be used by the compiler anymore, or does that mess up the branch predictor (e.g. instead of &#8220;JZ&#8221;, you use &#8220;JNZ $+xx&#8221; followed by &#8220;JMP yyyy&#8221;)? (BTW, is that basically a trampoline? I really never heard of that term until the late 1990s.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1333595">
				<div id="div-comment-1333595" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505#comment-1333595">
			April 18, 2018 at 9:47 am</a>		</div>

		<p>If the branch target is another function, the distance isn&#8217;t known until link time, at which point it&#8217;s too late to re-run the compiler to say, &#8220;Hey, could you use the anti-test pattern for this specific BGEZAL instruction?&#8221; (Has no effect on the branch predictor since you merely exchanged one conditional branch for another with the exact opposite taken/not-taken pattern. All branch predictors I&#8217;ve seen are symmetric with respect to taken and not-taken. And the unconditional branch doesn&#8217;t need to be predicted at all.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fjeldse even depth-3" id="comment-1333615">
				<div id="div-comment-1333615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505#comment-1333615">
			April 18, 2018 at 11:22 am</a>		</div>

		<p>That&#8217;s fair: I was only thinking of intra-function (and possibly intra-module without LTO) jumps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1333875">
				<div id="div-comment-1333875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180413-00/?p=98505#comment-1333875">
			April 23, 2018 at 12:07 am</a>		</div>

		<p>It&#8217;s not too late, that is what Link Time Optimisation is for. I guess nobody thought it was worth the investment back in the R4000 days.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

