<html>
<head>
<title>Why is CLIPFORMAT defined to be a WORD rather than a UINT?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is CLIPFORMAT defined to be a WORD rather than a UINT?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 28, 2011 / year-entry #283</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Ivo wants to know if the Register­Clipboard­Format function returns a UINT, why is the CLIP­FORMAT data type defined to be a WORD? Since a WORD is smaller than a UINT, you have to stick in a cast every time you assign the result of Register­Clipboard­Format to a CLIP­FORMAT. Rewind to 16-bit Windows. Back in...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter Ivo wants to know <a href="http://blogs.msdn.com/b/oldnewthing/archive/2008/04/30/8440201.aspx#8443802"> if the <code>Register&shy;Clipboard&shy;Format</code> function returns a <code>UINT</code>, why is the <code>CLIP&shy;FORMAT</code> data type defined to be a <code>WORD</code></a>? Since a <code>WORD</code> is smaller than a <code>UINT</code>, you have to stick in a cast every time you assign the result of <code>Register&shy;Clipboard&shy;Format</code> to a <code>CLIP&shy;FORMAT</code>.</p>
<p> Rewind to 16-bit Windows. Back in those days, a <code>UINT</code> and a <code>WORD</code> were the same size, namely, 16&nbsp;bits. As a result, people got lazy about the distinction. Six of one, a half dozen of the other. (People are lazy about this sort of distinction even today, assuming for example that <code>UINT</code> and <code>DWORD</code> are the same size, and in turn <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/01/31/363790.aspx"> forcing <code>UINT</code> to remain a 32-bit integer type even on 64-bit Windows</a>.) The <code>Register&shy;Clipboard&shy;Format</code> function came first, and when the OLE folks wanted to define a friendly name for the data type to hold a clipboard format, they said, "Well, a clipboard format is a 16-bit integer, so let me use a 16-bit integer." A <code>WORD</code> is a 16-bit integer, so there you go. </p>
<p> This mismatch had no effect in 16-bit code, but once Win32 showed up, you had a problem since 32-bit Windows expanded the <code>UINT</code> type to 32&nbsp;bits. Not only does keeping a <code>CLIP&shy;FORMAT</code> in a <code>WORD</code> create the need for all this casting, it also leaves two bytes of padding in the <code>FORMAT&shy;ETC</code> structure. Strike two. </p>
<p> Yeah, basically, it sucks. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-949853">
				<div id="div-comment-949853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BOFH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949853">
			November 28, 2011 at 7:32 am</a>		</div>

		<p>Post facto snarky comment:</p>
<p>&quot;It&quot; being Microsoft.</p>
<p>I can&#39;t believe you forgot to pre-empt that&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-949863">
				<div id="div-comment-949863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Curran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949863">
			November 28, 2011 at 7:43 am</a>		</div>

		<p>So, which was the &quot;real&quot; problem? &nbsp;Should RegisterÂ­ClipboardÂ­Format &nbsp;have been defined as returning a WORD, or should have CLIPÂ­FORMAT been defined as a UINT? I&#39;d lean towards the former (Do we really need more than 65000 clipboard formats? &nbsp;Will Klingon be one of them?)</p>
<p>And what would be the downside of&#8230; well.. fixing it. &nbsp;I&#39;m assuming RegisterÂ­ClipboardÂ­Format really is now returning 32 bits, even if only 16 of them are significant, so we&#39;d have to change CLIPÂ­FORMAT to a UINT &#8212; other than forcing people to remove a bunch of casts they didn&#39;t want to write in the frist place, what&#39;s the problem?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-949873">
				<div id="div-comment-949873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">barbie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949873">
			November 28, 2011 at 8:07 am</a>		</div>

		<p>@James Curran: I would say the &quot;fault&quot; lies with the one not respecting the initial contract (aka first one&#39;s right). Here, the OLE folks did not respect the format returned from RegisterClipboardFormat.</p>
<p>And it&#39;s not that easy to fix in after the fact. CLIPFORMAT is 2 bytes. Changing it would break any interface that uses the type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-949883">
				<div id="div-comment-949883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949883">
			November 28, 2011 at 8:22 am</a>		</div>

		<p>I think the solution is to have RegisterClipboardFormat, EnumClipboardFormats, etc return CLIPFORMAT (regardless of the number of bits). The Windows API is usually better at type safety. Like for example GlobalAddAtom returns ATOM and not WORD.</p>
<div class="post">[<i>Well, for one thing that would be a layering violation. (Lower-level interface dependent on a type defined by a higher-level interface.) And for another thing, changing the return type of a function is a breaking change, so you have to worry about the compatibility consequences. For example, old code which calls the revised <code>Register&shy;Clipboard&shy;Format</code> function will now receive garbage in the upper 16 bits. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-949893">
				<div id="div-comment-949893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949893">
			November 28, 2011 at 8:37 am</a>		</div>

		<p>I could envisage a situation where a computer needed more than 65k clipboard formats. &nbsp;Imagine, if you will, a poorly-designed piece of software that registers a dozen or so different clipboard formats for its purposes. &nbsp;Suppose further that to avoid potential compatibility issues, it uses different clipboard format names in each version of it (say, because V2 added a new field to the binary clipboard format or something, so you don&#39;t want it to crash if users copy and paste between V1 and V2 in either direction).</p>
<p>Now imagine that developers of this software have gone through thousands of different versions of it (several builds per day over years), with each build adding new clipboard formats but not deleting the old ones (either due to a bug, or because the developers are lazy and don&#39;t fully uninstall each build). &nbsp;At this rate, they could potentially eclipse 65k clipboard formats after a reasonable period of time.</p>
<p>Granted, that&#39;s an extremely contrived and unlikely scenario &#8212; in that case, running out of clipboard formats could be a signal to the developers that maybe they&#39;re not quite doing something right. &nbsp;A better solution would be to refactor their versioning into the clipboard data itself instead of the format name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-949903">
				<div id="div-comment-949903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JeroeN Mostert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949903">
			November 28, 2011 at 8:49 am</a>		</div>

		<p>@Adam: Why is it that every time someone starts off with &quot;imagine, if you will&#8230;&quot; they proceed by describing a scenario best left to the Twilight Zone? :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-949913">
				<div id="div-comment-949913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949913">
			November 28, 2011 at 10:55 am</a>		</div>

		<p>@Adam R:</p>
<p>Clipboard format registration is desktop-local and ethemeral. It&#39;s not persistent over a reboot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-949923">
				<div id="div-comment-949923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zan Lynx</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949923">
			November 28, 2011 at 11:04 am</a>		</div>

		<p>@JeroeN: Whenever you imagine a scenario so awful, so hideous, so twisted that you believe it could not actually happen &#8212; plan for it happening. It will happen. Someone will write it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-949933">
				<div id="div-comment-949933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Finn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949933">
			November 28, 2011 at 12:15 pm</a>		</div>

		<p>Why would anyone think C&#39;s types were a good idea anyway? Is there some advantage to &quot;int&quot; being 32-bit on one platform and 48-bit on another? Were they really that naÃ¯ve, to think that you could just compile the source on a different platform, and have it magically work? The mind boggles.</p>
<p>Every day I find new reasons to praise the interpreted languages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-949953">
				<div id="div-comment-949953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949953">
			November 28, 2011 at 12:46 pm</a>		</div>

		<p>@Finn: It largely worked and the user-mode code of various UNIX derivatives was very nearly source portable to wildly different architectures.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-949973">
				<div id="div-comment-949973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949973">
			November 28, 2011 at 1:41 pm</a>		</div>

		<p>Finn: Why would you want a 32-bit &quot;int&quot; on a 16-bit 8088, an 18-bit PDP-7, a 60-bit CDC 6600, or a Burroughs 7700 that has 39 bits for an integer plus a sign bit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-949983">
				<div id="div-comment-949983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeroen Mostert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949983">
			November 28, 2011 at 2:16 pm</a>		</div>

		<p>&quot;Is there some advantage to &quot;int&quot; being 32-bit on one platform and 48-bit on another? Were they really that naÃ¯ve, to think that you could just compile the source on a different platform, and have it magically work?&quot;</p>
<p>They were naive indeed, for thinking programmers could ever care enough to write their code with sufficient care to make this &quot;magic&quot; happen. But it&#39;s a failing of the programmers nevertheless, not of the language designers. Yes, Virginia, you can write algorithms, realistic ones even, that do not assume a fixed size for integral types.</p>
<p>In some worlds every int is 32-bit. These are not the worlds of C. Those who scorn the wisdom of C in this are not worthy to receive the blessings of the same. Verily.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-949993">
				<div id="div-comment-949993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-949993">
			November 28, 2011 at 3:30 pm</a>		</div>

		<p>The comment about UINT remaining 32 bit seems strange, did you mean ULONG? Otherwise you would have no 32-bit integer! (On AMD64 at least, 64-bit integers are still (slightly?) slower)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-950003">
				<div id="div-comment-950003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pdp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950003">
			November 28, 2011 at 5:21 pm</a>		</div>

		<p>Why would you want 2^18 clip board formats if windows was ported to pdp7?</p>
<p>This looks like a premature optimization indeed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-950013">
				<div id="div-comment-950013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Silly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950013">
			November 28, 2011 at 5:47 pm</a>		</div>

		<p>The documentation for RegisterClipboardFormat says it returns values only in the range C000-FFFF, so there are only 16K custom formats available per running instance of Windows. Oh dear! But at least I only need to use 14 bits in the foo bitfield of the #pragma packed Foo structure that gets persisted out to disk in MyCoolApp (because some other members do need to be persisted and this member is just slammed into the thing for convenience).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-950023">
				<div id="div-comment-950023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950023">
			November 28, 2011 at 7:39 pm</a>		</div>

		<p>@Silly:</p>
<p>If you&#39;ll ever want to do that in real life, remember that it doesn&#39;t make sense to persist the clipboard format tag, because it&#39;s not persistent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-950033">
				<div id="div-comment-950033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950033">
			November 28, 2011 at 8:43 pm</a>		</div>

		<p>Silly: Are you sure it&#39;s 16k formats per running instance of Windows, and not per window station? I haven&#39;t tried it myself, but in theory there&#39;s no reason that the clipboard formats in your Terminal Server session would interfere with those in my session.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-950213">
				<div id="div-comment-950213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950213">
			November 29, 2011 at 10:13 am</a>		</div>

		<p>@Gabe:</p>
<p>It&#39;s not just per window station, it&#39;s per desktop. A window station can contain multiple desktops. USER objects (windows, clipboard, hooks, menus) are isolated inside a desktop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-950243">
				<div id="div-comment-950243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950243">
			November 29, 2011 at 10:55 am</a>		</div>

		<p>alegr1: From <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms687096(v=VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms687096(v=VS.85).aspx</a></p>
<p>&quot;A window station contains a clipboard, an atom table, and one or more desktop objects.&quot;</p>
<p>Are you suggesting that MSDN is wrong here? You can actually test it yourself. Use a program (like Sysinternals&#39; Desktops.exe) to create multiple desktops. Then copy something to the clipboard, switch to a different desktop, and observe that you can paste what you copied from the previous desktop. You will see that your desktops all share a single clipboard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-950333">
				<div id="div-comment-950333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wondering</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950333">
			November 30, 2011 at 3:20 am</a>		</div>

		<p>@Gabe: &quot;Finn: Why would you want a 32-bit &quot;int&quot; on a 16-bit 8088, an 18-bit PDP-7, a 60-bit CDC 6600, or a Burroughs 7700 that has 39 bits for an integer plus a sign bit?&quot;</p>
<p>Why? Because this eliminates entires classes of errors (overflows, bit-logic errors), caused by different sizes of variables. Especially in C, when you &quot;need&quot; to cast variables now and then.</p>
<p>It make much more sence to work with INT32 even on a 8088 (if included in the list of target systems) as to constantly keep in mind that your int variables can be shrinked to 16 bit on one specific platform.</p>
<p>Anyway, who is developing software for such ancient or esoteric architectures today? Any architecture which does not handle data in granularity of power-of-two bytes is so marginal that this cannot justify any thoughts/work/discussion anymore. Using such CPUs even for embedded systems is just silly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-950713">
				<div id="div-comment-950713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950713">
			December 1, 2011 at 12:13 pm</a>		</div>

		<p>Wondering: If avoiding integer overflow is more important to you than performance, I highly suggest finding a language other than C. The whole point of C is that it&#39;s sort of a high-level assembly language. If you can&#39;t access your machine&#39;s native integer size, what&#39;s the point?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-950903">
				<div id="div-comment-950903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wondering</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111128-00/?p=9023#comment-950903">
			December 2, 2011 at 11:33 am</a>		</div>

		<blockquote><p>
  &gt;If you can&#39;t access your machine&#39;s native integer size, what&#39;s the point?&lt;&lt;
</p></blockquote>
<p>That does not matter. For example, you write your Word Processor by using INT32 for coordinates, counters, etc. If the target machine has 64 bit, and you recompile your project for 64 bit, no bad thing happen. The display will not magically have more pixels than before. You dont need to load other graphic formats than before (PGN is still PNG, JPG is still JPG), you need to import the same foreign document formats than before and so on and so on&#8230;.</p>
<blockquote><p>
  &gt;Wondering: If avoiding integer overflow is more important to you than performance, I highly suggest finding a language other than C&lt;&lt;
</p></blockquote>
<p>Using C is not (always) about getting the last edge of performance like you suggest. It is just a programming language which lets you build complex and abstract things like any other c-style language. Coding and testing is expensive. If you plan to port code of a general-purpose application (office suite, web server web browser, &#8230;) between platforms and you are working for money (that is, you have limited time), you better use integer types that does not change arbitrarily between the platforms.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

