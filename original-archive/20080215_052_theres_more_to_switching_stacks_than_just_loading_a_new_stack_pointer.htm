<html>
<head>
<title>There's more to switching stacks than just loading a new stack pointer</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>There&#8217;s more to switching stacks than just loading a new stack pointer</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 15, 2008 / year-entry #53</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Sometimes people think they can switch stacks by just loading a new value into the ESP register. This may seem to work but in fact it doesn't, because there is more to switching stacks than just loading a new value into ESP. On the x86, the exception chain is threaded through the stack, and the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Sometimes people <a href="http://groups.google.com/groups?selm=uxyOHzIDHHA.4024@TK2MSFTNGP04.phx.gbl"> think they can switch stacks</a> by just <a href="http://groups.google.com/groups?selm=euDyW3IDHHA.4396@TK2MSFTNGP02.phx.gbl"> loading a new value into the <code>ESP</code> register</a>. This may seem to work but in fact it doesn't, because there is more to switching stacks than just loading a new value into <code>ESP</code>.</p>
<p> On the x86, the exception chain is threaded through the stack, and the exception dispatch code verifies that the exception chain is "sane" before dispatching an exception. If you summarily yank <code>ESP</code> into a location outside the stack the operating system assigned to the thread, then the exception chain will appear to be corrupted, and once the exception dispatch code notices this, it will declare your program to be unrecoverably corrupted. It can't even raise an exception to indicate that this has happened, even if it wanted to, because it doesn't even know where the exception handlers are! </p>
<p> There are other parts of the system that rely on the stack pointer remaining inside the correct stack. For example, the code that expands the stack on demand needs to know where the stack is and how big it can get. (And the ia64 architecture has <i>two</i> stack pointers.) If a part of the system needs to do work with those values and it notices that the real stack pointer is "in la-la land", it will start taking drastic measures (typically by terminating the program). </p>
<p> If you want to switch stacks, use a fiber. Fibers provide a way to capture the state of a computation, which includes the instruction pointer and the stack. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-601283">
				<div id="div-comment-601283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601283">
			February 15, 2008 at 11:28 am</a>		</div>

		<p>My impression was that Fibers were unofficially deprecated. &nbsp;This, of course, does not imply they are not useful. &nbsp;In my study of SQL Server 2005 &lt; <a rel="nofollow" target="_new" href="http://msdn2.microsoft.com/en-us/library/ms191135.aspx" rel="nofollow">http://msdn2.microsoft.com/en-us/library/ms191135.aspx</a> &gt; it would seem that using Fibers in combination with asynchronous I/O might be beneficial, but I would have trouble justifying implementing Fibers when I/O Completion Ports already seem to give very good concurrency. &nbsp;</p>
<p>SQL Server does, however, give you the option to enable Fibers during execution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-601293">
				<div id="div-comment-601293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nksingh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601293">
			February 15, 2008 at 1:09 pm</a>		</div>

		<p>@Tom:</p>
<p>Fibers probably will not ever be removed from the OS, but they are usually a lot more trouble than they are worth (unless you&#8217;re already going to the trouble of munging directly with esp). &nbsp;I can&#8217;t imagine what awful breakage Raymond had to look at to find this problem&#8230;</p>
<p>The difficulty with fibers is that some components of the OS store state in the TEB of your thread and if you have code that expects to be able to store unique data in the TEB running in a fiber, two fibers could trample each other&#8217;s TEB states. &nbsp;Kernel Threads also build up a bit of state that might be relevant to user programs. &nbsp;This might get messed up if you move a fiber from one thread to another.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-601323">
				<div id="div-comment-601323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601323">
			February 15, 2008 at 2:04 pm</a>		</div>

		<p>Am I the only one that finds it strange the guys wants to swap stack for a stack over flow exception ? How about finding the infinite recursion and fixing his code rather than fixing the symptom of his bad code ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-601383">
				<div id="div-comment-601383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601383">
			February 15, 2008 at 10:15 pm</a>		</div>

		<p>@Nathan_works:</p>
<p>It&#8217;d definitely be better if he could fix his code rather than write a crash handler. However, writing a crash handler is either an admission of defeat on that front, or a back-stop debugging aid.</p>
<p>Other platforms (and embedded/OS programming) support ways of switching stacks to handle the case of stack overflows. For example, Unix supports such a mechanism, though as you imply, the wisdom of it is perhaps dubious, and it&#8217;s fraught with all sorts of dangers. And of all the uses of alternate signal stacks that I can think of, crash handlers are the &quot;least bad&quot; use. If Windows&#8217; Posix subsystem supports alternate signal stacks even for stack overflows, then you might be able to use a similar mechanism, but I believe it isn&#8217;t supported. This article: <a rel="nofollow" target="_new" href="http://technet.microsoft.com/en-us/library/bb497013.aspx" rel="nofollow">http://technet.microsoft.com/en-us/library/bb497013.aspx</a> says that sigaltstack isn&#8217;t supported by Services for Unix, and has no equivalent.</p>
<p>Anyway, it&#8217;d be better if people didn&#8217;t have to or want to write crash handlers, but switching stacks is pretty much required if you want a crash handler to work in the case of a stack overflow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-601403">
				<div id="div-comment-601403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601403">
			February 16, 2008 at 9:45 am</a>		</div>

		<p>I understand that some people want to show the message when their application crashes because of the stack overflow instead of leaving the user miffled with the application window suddenly disappearing without a trace.</p>
<p>Raymond already explained that the OS cannot do that for you because the application has lost the stack and the OS would want to run the error message in the context of your application.</p>
<p>If OS had its own thread and stack for displaying application errors which worked for <em>any</em> application error (stack overflow included), then nobody would have to even think about writing such hacks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-601423">
				<div id="div-comment-601423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601423">
			February 16, 2008 at 12:31 pm</a>		</div>

		<p>It works if alloca causes stack overflow. Doesn&#8217;t work for stray pointers hitting stack above the guard page.</p>
<p>MSDN says: &quot;The exception handler specified by lpTopLevelExceptionFilter is executed in the context of the thread that caused the fault. This can affect the exception handler&#8217;s ability to recover from certain exceptions, such as an invalid stack.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-madq42 even thread-even depth-1" id="comment-601443">
				<div id="div-comment-601443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MadQ1' rel='external nofollow' class='url'>MadQ1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601443">
			February 16, 2008 at 7:07 pm</a>		</div>

		<p>This is just the kernel of an idea&#8230; if you&#8217;re expecting a stack overflow, how about converting the thread to a fiber to begin with, then copying the EXCEPTION_POINTERS data to a pre-allocated location, and switch fibers in the exception handler?</p>
<p>I haven&#8217;t really thought this through yet, but it could be worth considering.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-601413">
				<div id="div-comment-601413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601413">
			February 16, 2008 at 12:05 pm</a>		</div>

		<p>Could this code work?</p>
<p>#include &lt;stdio.h&gt;</p>
<p>#include &lt;windows.h&gt;</p>
<p>void no_overflow(void)</p>
<p>{</p>
<p>	int	dummy[1024];</p>
<p>	dummy[1023] = 0;</p>
<p>}</p>
<p>void overflow(void)</p>
<p>{</p>
<p>	int	dummy[262144];</p>
<p>	dummy[262143] = 0;</p>
<p>}</p>
<p>long __stdcall Filter(struct _EXCEPTION_POINTERS *ep)</p>
<p>{</p>
<p>	DWORD	Code;</p>
<p>	PVOID	Address;</p>
<p>	DWORD	*esp;</p>
<p>	int	i;</p>
<p>	Code = ep-&gt;ExceptionRecord-&gt;ExceptionCode;</p>
<p>	Address = ep-&gt;ExceptionRecord-&gt;ExceptionAddress;</p>
<p>	esp = (DWORD*)ep-&gt;ContextRecord-&gt;Esp;</p>
<p>	if (Code == STATUS_STACK_OVERFLOW) {</p>
<p>		printf(&#8220;Stack overflow at address 0x%pn&#8221;, Address);</p>
<p>		printf(&#8220;Called from %pn&#8221;, esp[1] &#8211; 5);</p>
<p>		printf(&#8220;Called from %pn&#8221;, esp[3] &#8211; 5);</p>
<p>		printf(&#8220;Terminating execution&#8221;);</p>
<p>		return EXCEPTION_EXECUTE_HANDLER;</p>
<p>	} else {</p>
<p>		return EXCEPTION_CONTINUE_SEARCH;</p>
<p>	}</p>
<p>}</p>
<p>int main(int argc, char *argv[])</p>
<p>{</p>
<p>	SetUnhandledExceptionFilter(Filter);</p>
<p>	no_overflow();</p>
<p>	overflow();</p>
<p>	return 0;</p>
<p>}</p>
<p>It is just a quick hack and it works for this simple test case, not sure if it would work in debug build, nor in a complex application, and it most definitely wouldn&#8217;t work without changes in 64-bit mode.</p>
<div class="post">[<i>It depends on your definition of &#8220;work&#8221;. Most of the time, you can&#8217;t assume that esp[1]-5 is the return address and that you aren&#8217;t re-entering printf. There may be other problems; those are just the ones that I noticed right off the bat. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-601503">
				<div id="div-comment-601503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601503">
			February 16, 2008 at 11:14 pm</a>		</div>

		<p>I have experimented a bit with this and here is what I have found &#8212; catching stack overflow generated by alloca() is not a problem. Sure Raymond has a point about esp[1]-5, and re-entering printf() (I never said it was good aynway) but that is not the real problem.</p>
<p>The problem is catching the stack overflow caused by accessing the stack beyond the guard page by a stray pointer.</p>
<p>Since the exception handler is executing in the context of a thread that caused the exception the process gets terminated and you don&#8217;t even get the chance to catch the exception.</p>
<p>If I understand all of this correctly, the only way to catch the <em>real</em> stack overflow would be to launch a process that monitors the thread in some way and make that process dump the context before the thread gets terminated. Obviously, that is exactly what any debugger can do.</p>
<p>I would be very interested to hear of some more lightweight approach to this problem.</p>
<p>The more I think of the whole concept of exception handling, the more it seems to me like an arbitrary and rather poor design. It may be inherited from the underlying x86 architecture, but I still believe that the whole winding/unwinding thing with pointers to exception structures intermingled with the random bits of data on the stack doesn&#8217;t even remotely rhyme with the word &quot;reliable&quot;.</p>
<p>I remember Motorola 68000 CPU where you could directly modify CPU exception handler pointers (those were called traps) so if your program did something bad you were sure to catch it. In my Amiga 500 I had 68010 which differed from 68000 by the fact that it didn&#8217;t allow unaligned word accesses to memory. Some programs and games refused to work. My workaround was to write exception handler which could fit into the boot sector. It was intercepting alignment fault and emulating access to the odd addresses by using byte instead of word access. If only handling stack overflow on x86 would have been that easy.</p>
<p>By the way, Motorola also had two stack pointers &#8212; supervisor and user stack pointer both using the same register A7.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-601523">
				<div id="div-comment-601523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080215-00/?p=23443#comment-601523">
			February 17, 2008 at 12:02 am</a>		</div>

		<p>Anyone interested in some advanced application debugging should see this:</p>
<p><a rel="nofollow" target="_new" href="http://www.debuginfo.com/examples.html" rel="nofollow">http://www.debuginfo.com/examples.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

