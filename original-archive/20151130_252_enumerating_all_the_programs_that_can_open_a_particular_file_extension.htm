<html>
<head>
<title>Enumerating all the programs that can open a particular file extension</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Enumerating all the programs that can open a particular file extension</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 30, 2015 / year-entry #253</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program enumerates all the applications which are registered for a particular file extension and lets the user choose one. We then open a file with that chosen program. As always, Little Programs do little to no error checking. #include <windows.h> #include <ole2.h> #include <shlobj.h> #include <atlbase.h> #include <atlalloc.h> #include <vector> #include <iostream> std::vector<CComPtr<IAssocHandler>>...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program enumerates all the applications which are
registered for a particular file extension and lets the user choose one.
We then open a file with that chosen program.
</p>
<p>
As always, Little Programs do little to no error checking.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;ole2.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;atlalloc.h&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;

std::vector&lt;CComPtr&lt;IAssocHandler&gt;&gt; LoadHandlers(
  PCWSTR extension,
  ASSOC_FILTER filter)
{
  std::vector&lt;CComPtr&lt;IAssocHandler&gt;&gt; handlers;
  CComPtr&lt;IEnumAssocHandlers&gt; enumerator;
  SHAssocEnumHandlers(extension, filter, &amp;enumerator);
  for (CComPtr&lt;IAssocHandler&gt; handler;
       enumerator-&gt;Next(1, &amp;handler, nullptr) == S_OK;
       handler.Release()) {
       handlers.push_back(handler);
  }
  return handlers;
}
</pre>
<p>
The <code>Load&shy;Handlers</code> function shows off the
meat of the program: We use
<code>SHAssoc&shy;Enum&shy;Handlers</code> to enumerate all
the handlers for a particular extension.
The results get saved into a vector.
</p>
<pre>
auto
ChooseHandler(
  const std::vector&lt;CComPtr&lt;IAssocHandler&gt;&gt;&amp; handlers,
  bool allowChooseMore) -&gt; decltype(handlers.size())
{
  decltype(handlers.size()) i;
  for (i = 0; i &lt; handlers.size(); i++) {
    CComHeapPtr&lt;wchar_t&gt; name;
    handlers[i]-&gt;GetUIName(&amp;name);
    std::wcout &lt;&lt; i &lt;&lt; L": " &lt;&lt; static_cast&lt;PCWSTR&gt;(name)
                             &lt;&lt; std::endl;
  }
  if (allowChooseMore) {
    std::wcout &lt;&lt; i &lt;&lt; L": Show more handlers" &lt;&lt; std::endl;
    i++;
  }

  decltype(handlers.size()) selection;
  std::wcin &gt;&gt; selection;
  if (std::wcin.fail()) selection = i + 1;
  return selection;
}
</pre>
<p>
The <code>Choose&shy;Handler</code> function prints the vector
of handlers (and optionally adds a "Show more handlers" option).
It collects the user's reply and returns it,
using <code>handlers.size()</code> to represent the
"Show more handlers" option, if available.
If the user's input is invalid, we return a value that is out of range.
(I'm assuming you don't have four billion handlers.)
</p>
<pre>
int __cdecl main(int, char**)
{
  <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/05/20/135841.aspx">CCoInitialize</a> init;
  <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2008/05/28/8555658.aspx">ProcessReference</a> ref;

  auto handlers = LoadHandlers(L".txt", ASSOC_FILTER_RECOMMENDED);
  auto selection = ChooseHandler(handlers, true);
  if (selection == handlers.size()) {
    handlers = LoadHandlers(L".txt", ASSOC_FILTER_NONE);
    selection = ChooseHandler(handlers, false);
  }

  if (selection &lt; handlers.size()) {
    CComPtr&lt;IDataObject&gt; dobj;
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/09/20/231739.aspx">GetUIObjectOfFile</a>(nullptr, L"C:\\windows\\win.ini",
                      IID_PPV_ARGS(&amp;dobj));
    handlers[selection]-&gt;Invoke(dobj);
  }
  return 0;
}
</pre>
<p>
And here's the main function that ties everything together.
</p>
<p>
After some initial throat-clearing, it loads up the recommended
handlers for the <code>.txt</code> file extension and
lets the user choose from among them.
</p>
<p>
If the user says "Show more handlers", then we load up all
handlers and try again.
</p>
<p>
We then take the user's selection and open <code>WIN.INI</code>
with that program.
</p>
<p>
<b>Exercise</b>: What is the purpose of the
<code>Process&shy;Reference</code> object?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1215371">
				<div id="div-comment-1215371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215371">
			November 30, 2015 at 7:27 am</a>		</div>

		<p>Exercise answer: We don&#39;t know what&#39;s on the other side of IAssocHandler::Invoke() and our process needs to stick around in case the handler is asynchronous.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1215361">
				<div id="div-comment-1215361" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215361">
			November 30, 2015 at 7:29 am</a>		</div>

		<p>CComPtr&lt;T&gt;</p>
<p>Where was the dice roll?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1215351">
				<div id="div-comment-1215351" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215351">
			November 30, 2015 at 7:32 am</a>		</div>

		<p>Uhhh the ProcessReference object isn&#39;t referenced anywhere? Interesting. I would guess it&#39;s to force the auto-declared variables to align themselves?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1215331">
				<div id="div-comment-1215331" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215331">
			November 30, 2015 at 7:34 am</a>		</div>

		<p>@skSdnW Actually we don&#39;t care what&#39;s on the other side. In fact, we EXPECT it to be asynchronous (launching a process always is). Once we Invoke, we&#39;re done so we quit. We don&#39;t care what the other process does, that&#39;s outside our scope.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1215311">
				<div id="div-comment-1215311" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215311">
			November 30, 2015 at 7:37 am</a>		</div>

		<p>I think that Raymond has provided the answer to his bonus question, at the link for ProcessReference in the code! &nbsp;It goes to a previous article in 2008 that describes what it is and how it works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1215301">
				<div id="div-comment-1215301" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215301">
			November 30, 2015 at 7:42 am</a>		</div>

		<p>@The MAZZTer: It has nothing to do with alignment. Click on its link and you see the important bits in the constructor and destructor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1215291">
				<div id="div-comment-1215291" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215291">
			November 30, 2015 at 7:45 am</a>		</div>

		<p>So this enumerates everything, from the stuff in HKEY_CLASSES_ROOT to the stuff in ExplorerFileExts?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1215241">
				<div id="div-comment-1215241" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">FA85</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215241">
			November 30, 2015 at 1:02 pm</a>		</div>

		<p>The constructor of ProcessReference calls SHSetInstanceExplorer to &quot;prevent their host process from closing prematurely&quot; (from MSDN). I&#39;m not sure, but I think it&#39;s for preventing the last Explorer thread to entirely quit and stay alive before the Little Program quits, because the enumeration won&#39;t work further then&#8230;.?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1215231">
				<div id="div-comment-1215231" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1215231">
			November 30, 2015 at 4:27 pm</a>		</div>

		<p>&quot;I&#39;m assuming you don&#39;t have four billion handlers&quot;&#8230; I guess that should be &quot;I&#39;m assuming you don&#39;t have std::numeric_limits&lt;decltype(handlers.size())&gt;::max() handlers.&quot;? C++11+ is so purty on the eyes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1216391">
				<div id="div-comment-1216391" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1216391">
			December 1, 2015 at 2:29 am</a>		</div>

		<p>Like yme who commented on the linked page, I was initially confused that ProcessReference is a stack-allocated object with Addref and Release methods, and I think that if I ever had to write that then I&#39;d rather pay the price for allocating an object on the heap.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1216381">
				<div id="div-comment-1216381" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1216381">
			December 1, 2015 at 3:04 am</a>		</div>

		<p>@Neil: Then you wouldn&#39;t get the benefit of RAII&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1216581">
				<div id="div-comment-1216581" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Micha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1216581">
			December 2, 2015 at 12:29 am</a>		</div>

		<p>Could someone please explain, why it is okay to release the handler but still use/add it to the vector?</p>
<p> &nbsp; &nbsp;handler.Release()) {</p>
<p> &nbsp; &nbsp;handlers.push_back(handler);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1216531">
				<div id="div-comment-1216531" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151130-00/?p=92191#comment-1216531">
			December 2, 2015 at 3:54 am</a>		</div>

		<p>@Micha: handler.Release(), being in the &#39;next iteration&#39; part of the for() loop statement, is executed *after* the loop body (the push_back call). So at the point that push_back is called, the reference count is still 1.</p>
<p>handlers is a vector of CComPtr. When assigning a CComPtr from another CComPtr through the copy constructor, AddRef is called on the held pointer to increment the reference count. So now the count is 2. The Release() is necessary because CComPtr::operator&amp; returns the address of the internal pointer, which enumerator-&gt;Next will just overwrite without releasing. We have to explicitly clean up before reusing the CComPtr in this way, otherwise we&#39;d leak.</p>
<p>I&#39;m not convinced this is clearer than using a raw pointer for the loop variable.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

