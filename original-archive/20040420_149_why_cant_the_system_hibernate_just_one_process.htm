<html>
<head>
<title>Why can't the system hibernate just one process?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t the system hibernate just one process?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 20, 2004 / year-entry #150</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>48</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Windows lets you hibernate the entire machine, but why can't it hibernate just one process? Record the state of the process and then resume it later. Because there is state in the system that is not part of the process. For example, suppose your program has taken a mutex, and then it gets process-hibernated. Oops,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Windows lets you hibernate the entire machine, but why can't
it hibernate just one process?  Record the state of the process
and then resume it later.
</p>
<p>
Because there is state in the system that is not part of the process.
</p>
<p>
For example, suppose your program has taken a mutex, and then it
gets process-hibernated.  Oops, now that mutex is abandoned
and is now up for grabs.  If that mutex was protecting some
state, then when the process is resumed from hibernation,
it thinks it still owns the mutex and the state should therefore
be safe from tampering, only to find that it <b>doesn't
own the mutex any more</b> and its state is corrupted.
</p>
<p>
Imagine all the code that does something like this:</p>
<pre>
// assume hmtx is a mutex handle that
// protects some shared object G
WaitForSingleObject(hmtx, INFINITE);
// do stuff with G
...
// do more stuff with G on the assumption that
// G hasn't changed.
ReleaseMutex(hmtx);
</pre>
<p>
Nobody expects that the mutex could secretly get released
during the "..." (which is what would happen if the process
got hibernated).  That goes against everything mutexes stand for!</p>
<p>
<p>
Consider, as another example, the case where you have a file
that was opened for exclusive access.  The program will
happily run on the assumption that nobody can modify
the file except that program.  But if you process-hibernate
it, then some other process can now open the file (the exclusive owner
is no longer around), tamper with it, then resume the original program.
The original program on resumption will see a tampered-with file and
may crash or (worse) be tricked into a security vulnerability.
</p>
<p>
One alternative would be to keep all objects that belong to
a process-hibernated program still open.  Then you would have
the problem of a file that can't be deleted because it is
being held open by a program that isn't even running!
(And indeed, for the resumption to be successful across a reboot,
the file would have to be re-opened upon reboot. So now you have
a file that can't be deleted even after a reboot because it's
being held open by a program that isn't running.  Think of the
amazing denial-of-service you could launch against somebody:
Create and hold open a 20GB file, then hibernate the process
and then delete the hibernation file.
Ha-ha, you just created a permanently undeletable 20GB file.)
</p>
<p>
Now what if the hibernated program had created windows.
Should the window handles still be valid while the program
is hibernated?  What happens if you send it a message?
If the window handles should not remain valid, then what happens
to broadcast messages? Are they "saved somewhere" to be replayed
when the program is resumed?  (And what if the broadcast message
was something like "I am about to remove this USB hard drive,
here is your last chance to flush your data"?
The hibernated program wouldn't get a chance to flush its data.
Result: Corrupted USB hard drive.)
</p>
<p>
And imagine the havoc if you could take the hibernated process
and copy it to another machine, and then attempt to restore it there.
</p>
<p>
If you want some sort of "checkpoint / fast restore" functionality
in your program, you'll have to write it yourself.
Then you will have to deal explicitly with issues like the above.
("I want to open this file, but somebody deleted it in the meantime.
What should I do?"
Or
"Okay, I'm about to create a checkpoint, I'd better purge all my buffers
and mark all my cached data as invalid because the thing I'm
caching might change while I'm in suspended animation.")</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (48)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-165433">
				<div id="div-comment-165433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165433">
			April 20, 2004 at 7:43 am</a>		</div>

		<p>Lets take a crack at this:</p>
<p>First, let me say that I have no idea why you would want to do this.</p>
<p>&gt; Nobody expects that the mutex could secretly get released during the &quot;&#8230;&quot; (which is what would happen if the process got hibernated). That goes against everything mutexes stand for!</p>
<p>We could introduce the concept of hibernation eligibility. Holding a lock excludes you from this class, as you&#8217;re obviuosly doing something, right?.</p>
<p>&gt; Consider, as another example, the case where you have a file that was opened for exclusive access.</p>
<p>Straightforward generalization of the previous point. Either you&#8217;re doing something, or you shouldn&#8217;t have the file locked. One could argue that the app is ill-written, or at least not hibernatable.</p>
<p>&gt; One alternative would be to keep all objects that belong to a process-hibernated program still open. &#8230; Think of the amazing denial-of-service you could launch against somebody: Create and hold open a 20GB file, then hibernate the process and then delete the hibernation file. Ha-ha, you just created a permanently undeletable 20GB file.)</p>
<p>Even allowing all of this, Wouldn&#8217;t you be able to fix this fairly easily? File f is locked by process p, but when the OS resolves process p, it finds a missing hib file, so the processs no longer exists, therefore file f is not locked.</p>
<p>&gt; And imagine the havoc if you could take the hibernated process and copy it to another machine, and then attempt to restore it there.</p>
<p>Now this could work, though I&#8217;d prefer some sort of managed environment like Java or .Net. Still not sure what the point of this is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165443">
				<div id="div-comment-165443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165443">
			April 20, 2004 at 7:57 am</a>		</div>

		<p>Note that semaphores and events don&#8217;t have &quot;owners&quot; so it&#8217;s impossible to tell whether any particular process &quot;owns&quot; an event or sempahore (and therefore should not be hibernated).</p>
<p>Believe it or not, people periodically ask me how to hibernate a process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165453">
				<div id="div-comment-165453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Staffan Larsen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165453">
			April 20, 2004 at 8:07 am</a>		</div>

		<p>Raymond: any interesting anecdotes from the implementation of system hibernate? Any particular problems that showed up, or badly written apps?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165463">
				<div id="div-comment-165463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165463">
			April 20, 2004 at 8:07 am</a>		</div>

		<blockquote><p>
  people periodically ask me how to hibernate a process.</p>
<p>Do they ever tell you why?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165483">
				<div id="div-comment-165483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jojjo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165483">
			April 20, 2004 at 8:13 am</a>		</div>

		<p>The reason is of course, that no memory manager can know which program you will be using the f&#246;r the next hour.</p>
<p>When I have used computers with a small amount of memory I have often been in situations where I&#8217;ve known thet &quot;This thing I&#8217;m doing in Photoshop will require tons of memory. I could close InDesign to free up some memory, but then when I restarted it I wouldn&#8217;t get it back to exactly the state I was in. I wish I could swap it out to the hard drive and then just restore it when I was done.&quot;</p>
<p>The ability to minimize an application that you&#8217;re not actively using currently to the tray is a great feature. I would like to see applications that take it to the next level: when the application minimizes to the tray everything that doesn&#8217;t need to stay in memory gets stored on disc instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165493">
				<div id="div-comment-165493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165493">
			April 20, 2004 at 8:20 am</a>		</div>

		<p>Jojjo: That&#8217;s already what happens when you minimize a program. All the unnecessary memory gets written to disk and only the bare minimum needed to keep the program alive stays around. </p>
<p>Some people don&#8217;t like this feature, though.</p>
<p><a target="_new" href="http://bugzilla.mozilla.org/show_bug.cgi?id=76831" rel="nofollow">http://bugzilla.mozilla.org/show_bug.cgi?id=76831</a></p>
<p>Why do people want to hibernate their process? Here&#8217;s an example. &quot;I have a program that does a long computation. Sometimes I want to pause the computation and resume it later. How can I hibernate my process?&quot; These are people who don&#8217;t want to write a &quot;Save/Resume&quot; function; they are hoping there&#8217;s some magic function that will do it for them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165503">
				<div id="div-comment-165503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Shuttlewood</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165503">
			April 20, 2004 at 9:07 am</a>		</div>

		<p>Interestingly enough there is a similar concept in the UNIX world &#8211; stopping a process.</p>
<p>Also, note that Unix allows you to delete a file without umm, deleting it ;)</p>
<p>Obviously this doesn&#8217;t persist across a reboot, and sockets can wind up timed out. I think that a lock will not be dropped, nor will any mutexes held (couldn&#8217;t be sure on this). But this, combined with swapping means you can sort of hibernate a process on nix, assuming no rebooting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165513">
				<div id="div-comment-165513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MilesArcher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165513">
			April 20, 2004 at 9:18 am</a>		</div>

		<p>Excuse my ignorance, but is there a way to set a processes priority to very low so that it, in effect is hibernated?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165523">
				<div id="div-comment-165523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pookie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165523">
			April 20, 2004 at 9:34 am</a>		</div>

		<p>How&#8217;bout simply &quot;suspending&quot; the process&#8230; sysinternals.com have a &quot;pssuspend&quot; utility that allows one to suspend/resume a process. That might not release all possible memory, but it does free up the CPU (as in the long calculation example above).</p>
<p>Personnally, when I want to free CPU from some job I simply change its priority to &quot;Low&quot; and let it soak up whatever idle is left over from my more important foreground process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165533">
				<div id="div-comment-165533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.popcornfilms.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165533">
			April 20, 2004 at 9:35 am</a>		</div>

		<p>MilesArcher: hit Ctrl+Alt+Del, right-click the process in the processes list of the task manager, and select a priority using Set Priority.</p>
<p>I&#8217;d recommend only doing it on applications. Not on Explorer. Not on taskmgr. Not on anything you don&#8217;t recognize.</p>
<p>Actually, for this very reason it&#8217;s a shame that taskmgr doesn&#8217;t let you adjust priorities in the Applications tab as well &#8211; at least then you have a better idea of which app you&#8217;re messing with &#8211; because you can see the window title.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165543">
				<div id="div-comment-165543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.popcornfilms.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165543">
			April 20, 2004 at 9:37 am</a>		</div>

		<p>Cooney:<br />
<br />&gt; We could introduce the concept of<br />
<br />&gt; hibernation eligibility. Holding a lock<br />
<br />&gt; excludes you from this class, as you&#8217;re<br />
<br />&gt; obviuosly doing something, right?. </p>
<p>But then the user would be wondering why they can only hibernate some apps some of the time, and not all apps all of the time. And without any outward display, you&#8217;d never know if you could hibernate your app or not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165563">
				<div id="div-comment-165563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jojjo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165563">
			April 20, 2004 at 9:45 am</a>		</div>

		<blockquote><p>
  That&#8217;s already what happens when you minimize<br />
  <br />&gt;a program. All the unnecessary memory gets<br />
  <br />&gt;written to disk and only the bare minimum<br />
  <br />&gt;needed to keep the program alive stays<br />
  <br />&gt;around. </p>
<p>I wasn&#8217;t talking about what the OS does. The OS can not know which resources are really needed while the program is minimized. For example, Outlook and Word typically use 15-20 MB of unswapped memory on my system. When I minimize Word it goes down to 1 MB. When I minimize Outlook it still uses 10 MB memory. This difference is in how the applications are written.</p>
<p>Every application should have two ways of minimizing:</p>
<p>1) Minimize off the screen. Typically done to save space on screen. Easy for the OS to do.</p>
<p>2) Hybernate. Done to save resources. This is the application&#8217;s responsibility.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165573">
				<div id="div-comment-165573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165573">
			April 20, 2004 at 9:50 am</a>		</div>

		<blockquote><p>
  Why do people want to hibernate their process? Here&#8217;s an example. &quot;I have a program that does a long computation. Sometimes I want to pause the computation and resume it later. How can I hibernate my process?&quot; These are people who don&#8217;t want to write a &quot;Save/Resume&quot; function; they are hoping there&#8217;s some magic function that will do it for them.</p>
<p>That&#8217;s daft, but expected. It reminds me of an MPEG encoder I had a while back &#8211; it would crash after about 8-12 hours of runtime, but a 30 minute clip took 10 hours to encode. Naturally, checkpointing was unheard of.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165603">
				<div id="div-comment-165603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165603">
			April 20, 2004 at 10:01 am</a>		</div>

		<p>You can certainly suspend all threads of a process, but the next time somebody broadcasts a message, they will hang (since the system is waiting for the suspended process to respond to the message).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165643">
				<div id="div-comment-165643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.geary.com/' rel='external nofollow' class='url'>Michael Geary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165643">
			April 20, 2004 at 10:54 am</a>		</div>

		<p>&quot;&#8230;is there a way to set a processes priority to very low so that it, in effect is hibernated?&quot;</p>
<p>There&#8217;s generally no reason to. Any reasonably well-written Windows application uses no CPU cycles if it has nothing to do. It is blocked in a GetMessage() call, and it won&#8217;t get any CPU time until an input message causes GetMessage() to return.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165653">
				<div id="div-comment-165653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Serge Wautier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165653">
			April 20, 2004 at 11:20 am</a>		</div>

		<p>When booting up after hibernation, how does the system restore the state of hardware devices (e.g. such as serial ports baudrate) ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165673">
				<div id="div-comment-165673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.whirlingdervishes.com' rel='external nofollow' class='url'>Henk Devos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165673">
			April 20, 2004 at 11:40 am</a>		</div>

		<p>Don&#8217;t you have all the same problems (e.g. locked files etc.) when hibernating a computer that has network connections? It might have an exclusive lock on a network drive, it might be waiting on a named pipe,&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165683">
				<div id="div-comment-165683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165683">
			April 20, 2004 at 11:49 am</a>		</div>

		<p>I can see the appeal of a program hibernate.  I hibernate my work laptop every night simply because it takes so long to startup, due to a slow hard drive, low memory, and tons of programs I run.  A program hibernate and restore would have the same effect and let you bypass slow initialization and startup.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165693">
				<div id="div-comment-165693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165693">
			April 20, 2004 at 11:57 am</a>		</div>

		<p>But for network resources, applications are ready to handle errors like, &quot;Sorry, the connection to the server was lost.&quot; This is what happens if you unplug the network cable while you had an exclusive lock open.</p>
<p>Programs are not prepared for &quot;Sorry, the mutex you acquired was lost.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165743">
				<div id="div-comment-165743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gianluca Varenni</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165743">
			April 20, 2004 at 2:31 pm</a>		</div>

		<p>Simon Cooke:<br />
<br />&gt;recommend only doing it on applications. Not on Explorer. Not on taskmgr. Not on anything you don&#8217;t recognize.<br />
<br />&gt;<br />
<br />&gt;Actually, for this very reason it&#8217;s a shame that taskmgr doesn&#8217;t let you adjust priorities in the Applications tab as well &#8211; at least then you have a better idea of which app you&#8217;re messing with &#8211; because you can see the window title. </p>
<p>I think there is a good reason you cannot adjust priorities in the Application tab: that tab lists only some apps on your system, or better, only some windows: why TaskManager is not listed? if I have two IE windows, there are two lines in the application tab, but they correspond to one process, only.</p>
<p>However, you can use this trick: if you right click on an app in the application tab, and choose &quot;Go To Process&quot;, the corresponding process is highlighted in the Process Tab (I think I discovered this trick during a seminar from David Solomon and Mark Russinovich&#8230;).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165763">
				<div id="div-comment-165763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Edward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165763">
			April 20, 2004 at 3:03 pm</a>		</div>

		<p>Has anyone ever come up with a way of transfering a process between machines?</p>
<p>I&#8217;ve got used to dragging windows between muliple monitors and sometimes I think it would be good to be able to drag a running program over to my notebook so I can keep where I am at.</p>
<p>Is this something that is theoretically impossible on Windows? How about other OSes? </p>
<p>OneNote seems to have the state-preserving thing done pretty well. It just pops up exactly where you left off.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165773">
				<div id="div-comment-165773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165773">
			April 20, 2004 at 3:04 pm</a>		</div>

		<p>Raymond: When you hit Win+D or Win+M to minimize all windows, do those processes get paged to disk as well? I would expect the drive to start thrashing if several processes started getting paged out at the same time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165783">
				<div id="div-comment-165783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165783">
			April 20, 2004 at 3:07 pm</a>		</div>

		<p>The memory is put on standby but is not actually paged out until it&#8217;s needed for something else. (Win+D and Win+M are not exactly the same thing; I need to write an entry about the difference.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165793">
				<div id="div-comment-165793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165793">
			April 20, 2004 at 3:21 pm</a>		</div>

		<p>Raymond: Please do write an entry.  Your post in the newsgroup was really helpful on that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165803">
				<div id="div-comment-165803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.popcornfilms.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165803">
			April 20, 2004 at 3:30 pm</a>		</div>

		<p>Gianluca wrote:<br />
<br />&gt;I think there is a good reason you cannot<br />
<br />&gt;adjust priorities in the Application tab:<br />
<br />&gt;that tab lists only some apps on your system,<br />
<br />&gt;or better, only some windows: why TaskManager<br />
<br />&gt;is not listed? if I have two IE windows,<br />
<br />&gt;there are two lines in the application tab,<br />
<br />&gt;but they correspond to one process, only. </p>
<p>That&#8217;s a reason why you might want to switch to the process tab to perform the operation&#8230; I&#8217;m not certain it&#8217;s a good enough reason to prohibit users from being able to perform the same operation on both tabs.</p>
<p>&gt;However, you can use this trick: if you right<br />
<br />&gt;click on an app in the application tab, and<br />
<br />&gt;choose &quot;Go To Process&quot;, the corresponding<br />
<br />&gt;process is highlighted in the Process Tab (I<br />
<br />&gt;think I discovered this trick during a<br />
<br />&gt;seminar from David Solomon and Mark<br />
<br />&gt;Russinovich&#8230;). </p>
<p>Thanks &#8211; that&#8217;s useful :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165863">
				<div id="div-comment-165863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas H&#228;ber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165863">
			April 20, 2004 at 6:15 pm</a>		</div>

		<blockquote><p>
  Has anyone ever come up with a way of transfering a process between machines?</p>
<p>&gt;Is this something that is theoretically impossible on Windows? How about other OSes?</p>
<p>There is a lot of theories about this in distributed systems. Keywords to google for is &quot;code migration&quot; and &quot;strong mobility&quot; (&#8216;weak mobility&#8217; could be just xcopy).</p>
<p>As already mentioned above, one of the biggest problems with code migration is to migrate the resources needed by the application. There are several possibilities, depending on the type of the resource: move it, copy it or rebind it. Sockets are an example of a resource which must be rebound.</p>
<p>One system is called D&#8217;Agents which does code migration in a heterogenous system. For more information about it check out:<br />
  <br />Gray, R: &quot;Agent Tcl: A Flexible and Secure Mobile-Agent System.&quot; Proc. Fourth Tcl/Tk Workshop. USENIX. 1996b. pp. 9-23. </p>
<p>Also, for a more general description about code migration you can read this (which is where I&#8217;ve got this information from :)):<br />
  <br />* Tanenbaum, A., van Steen, M: &quot;Distributed Systems &#8211; Principles and Paradigms&quot;. Chapter 3.4. ISBN: 0-13-088893-1</p>
<p>Hope this helps :) Would be fun to see strong code migration in Windows, but I doubt that will happen this decade. I&#8217;m a very happy user of system hibernation this decade :)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165873">
				<div id="div-comment-165873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/ptorr/' rel='external nofollow' class='url'>Peter Torr</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165873">
			April 20, 2004 at 6:19 pm</a>		</div>

		<p>Raymond:</p>
<p>&gt; These are people who don&#8217;t want to write<br />
<br />&gt; a &quot;Save/Resume&quot; function; they are hoping<br />
<br />&gt; there&#8217;s some magic function that will do it<br />
<br />&gt; for them. </p>
<p>There is such a magic function &#8212; it is called &quot;Virtual PC.&quot; Sure your app runs a bit slower than if it was native, but you can instantly stop the VM and then resume it later on. You could probably even move the image across host machines, too, since it is all virtualised to the same hardware IIRC.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165893">
				<div id="div-comment-165893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165893">
			April 20, 2004 at 6:25 pm</a>		</div>

		<p>The reason why you can delete a file on UNIX that is in-use is due to how things are differently structured.  Directory entries and the actual files are seperate entities (with the latter known as inodes).  A directory entry just points to a particular inode.  This means that multiple directory entries can point to the same inode.  The inode keeps a reference count of how many point to it, and the actual underlying file is freed when the count reaches zero.  Opening a file increases the count, and closing decreases it.  Consequently you can open a file, delete the last remaining directory entry, and the file will still remain even though no directory entries point to it.  On closing the file handle, the underlying storage is released.  This is an easy way of getting temporary files, and ensuring they automatically go away if your process exits.  Also no other process can mess with, except for the short duration when the name did exist before you managed to remove it.  (Not surprisingly there have been a  few vulnerabilities in that area with various programs).  The ability to have multiple directory entries pointing to the same inode is used to make the . and .. entries in each directory.  They aren&#8217;t actually special to the filesystem code.  If you really want to mess with someone in a wierd ways and have root, go ahead and point those at other places on their filesystem randomly.</p>
<p>Windows (and DOS) keep the directory entry and the file as the same thing.  Consequently you can&#8217;t delete a file that is in use.  You can however rename one that is in use.  I frequently wonder why so many programs on installation don&#8217;t rename old files out of the way, rather than insisting on a reboot so they can put the new version in place then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165903">
				<div id="div-comment-165903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165903">
			April 20, 2004 at 6:38 pm</a>		</div>

		<p>Anon: Actually, NTFS has file indexes and directory entries seperate and has a reference count.  I just don&#8217;t think that opening a file increments that count and binds itself to the index like that.  Basically, at the filesystem level it&#8217;s like unix, but the interface to that system is 1:1 directory entry -&gt; file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165913">
				<div id="div-comment-165913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/script/articles/list_articles.asp?userid=152' rel='external nofollow' class='url'>Mike Dunn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165913">
			April 20, 2004 at 6:39 pm</a>		</div>

		<p>NTFS has the inode concept &#8211; look up CreateHardLink and see if it reminds you of ln ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165923">
				<div id="div-comment-165923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr. Cynic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165923">
			April 20, 2004 at 6:46 pm</a>		</div>

		<p>Lots of setup programs do use the rename-replace method for installing files, but it is not a panacea. </p>
<p>After all, somebody is still holding the old file in use, and presumably its because they&#8217;re still using it. So in order to safely perform a rename replace the thing being renamed has to be capable of running OK with a different version of itself loaded in a different process, and capable of (at minimum) detecting when some of its dependencies were updated OK (because they weren&#8217;t in use) but some of the others weren&#8217;t. </p>
<p>It is a lot of work, and not all applications want to go through the effort.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165943">
				<div id="div-comment-165943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.redwoodroot.org' rel='external nofollow' class='url'>Peter Evans</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165943">
			April 20, 2004 at 8:16 pm</a>		</div>

		<p>Raymond,</p>
<p>Has anyone done research on what it would take to snapshot a .NET process so that it might be eligible for hibernation-relocation.</p>
<p>It seems to me that a with regard to managed, barrier and distributed based computing that a generic snapshot enabled client application template in VS that delegates to the .NET framework the tasks of rebinding, relocationg and reactivating that this kind of app might be useful and eliminate a lot of common distributed computing implementation problems that occur because of reinvention of already solved distributed computing idioms.</p>
<p>I ask because I&#8217;m interested in the kind of idea of a mobile agent/OS that tags along with me whereever I go.  Kind of like personal perferences store, but much more.  More than just a roaming profile.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166003">
				<div id="div-comment-166003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166003">
			April 20, 2004 at 11:45 pm</a>		</div>

		<p>When an app goes crazy and starts using 100% CPU, and I don&#8217;t want to kill it immediately (for one of the reasons Norman mentioned), I usually suspend it with &#8216;ntsd -pv -p &lt;pid&gt;&#8217;.</p>
<p>Then I can examine the call stacks and if there&#8217;s some hope that it will eventually finish what it&#8217;s doing I might let it continue.</p>
<p>As for trimming on minimize, I suspect that in most cases it doesn&#8217;t have much impact on performance. Certainly not enough to explain 45 second lag on restore.</p>
<p>I once used kernel debugger to NOP out the code in win32k.sys that trims the working sets on minimize. I ran like this for several days and I didn&#8217;t notice much difference in performance. Things were painfully slow as usual :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-165933">
				<div id="div-comment-165933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165933">
			April 20, 2004 at 7:08 pm</a>		</div>

		<p>Indeed, the mixed case is the scary one, because you also have to worry about mixed versions in the *same* process. Suppose you have two DLLs, A.dll and B.dll.  Process X has loaded A.dll but not B.dll. Now you want to upgrade them. What do you do? If you rename A.dll to A.bak and install a new A.dll and B.dll, then process X will get the old A.dll (now named A.bak) and the new B.dll. Gosh, I hope the new B.dll and old A.dll (now named A.bak) interoperate!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-165973">
				<div id="div-comment-165973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-165973">
			April 20, 2004 at 9:14 pm</a>		</div>

		<p>4/20/2004 10:54 AM Michael Geary:<br />
<br />&gt; &quot;&#8230;is there a way to set a processes<br />
<br />&gt; priority to very low so that it, in effect<br />
<br />&gt; is hibernated?&quot;<br />
<br />&gt;<br />
<br />&gt; There&#8217;s generally no reason to. Any<br />
<br />&gt; reasonably well-written Windows application<br />
<br />&gt; uses no CPU cycles if it has nothing to do.</p>
<p>There sure is generally a reason to.  A well-written Windows application with lots of stuff to do will use lots of CPU cycles.  The less well-written user might temporarily (or permanently) decide that the user wishes to dedicate those CPU cycles to some other application.  The user might not wish to kill the well-written Windows application but might wish to keep it alive and let it get some CPU cycles when the user goes to sleep.</p>
<p>There&#8217;s another reason too.  A not-well-written Windows application, such as Internet Explorer or Word 2000 or sometimes Windows Explorer, will take 99% of the CPU cycles when no one can guess what it&#8217;s doing.  The user might not want to kill the window because it might contain something the user has been working on.  Or the user might not want to kill the window because even opening Word 2000 again on the same document will peg the CPU again.  But the user might just want to refer to its contents occasionally, while dedicating CPU cycles to other applications that the user is also working on.  More precise example:  one Word 2000 window displaying the original text of a document and trying to take 100% of the CPU doing nothing, and a different Word 2000 window where the user is trying to edit a translation of the original.  Less precise examples:  Internet Explorer and occasionally Windows Explorer for no known reproducible reasons.</p>
<p>4/20/2004 8:20 AM Raymond Chen:<br />
<br />&gt; Jojjo: That&#8217;s already what happens when you<br />
<br />&gt; minimize a program. All the unnecessary<br />
<br />&gt; memory gets written to disk and only the<br />
<br />&gt; bare minimum needed to keep the program<br />
<br />&gt; alive stays around.<br />
<br />&gt; Some people don&#8217;t like this feature, though.<br />
<br />&gt; <a target="_new" href="http://bugzilla.mozilla.org/show_bug.cgi?id=76831" rel="nofollow">http://bugzilla.mozilla.org/show_bug.cgi?id=76831</a> </p>
<p>You&#8217;re right, but did you notice this reason why some people don&#8217;t like it &#8212; quoting from the cited page:<br />
<br />Roope Lehmuslehto 2002-04-05 08:01 PDT<br />
<br />&lt; This is *very* annoying bug, because<br />
<br />&lt; bringing Moz from traybar takes longer than<br />
<br />&lt; launching Moz 100% from death ;).</p>
<p>Though it seems that Mozilla itself is partly responsible for that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166053">
				<div id="div-comment-166053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166053">
			April 21, 2004 at 8:08 am</a>		</div>

		<p>&quot;Has anyone done research on what it would take to snapshot a .NET process so that it might be eligible for hibernation-relocation.&quot;</p>
<p>Managed or not, you have to deal with globally-exposed state. Like window handles. When the program is restored, how do you restore its window handles? What if that numeric window handle is already being used by somebody else?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166073">
				<div id="div-comment-166073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166073">
			April 21, 2004 at 8:25 am</a>		</div>

		<p>In the Setup case, you can decide &quot;I will replace all the files at once. If any are in use, I will replace none.&quot;</p>
<p>This works as long as there are no hibernated processes, since those processes are using a file without holding it open! It becomes impossible to detect that you&#8217;re about to create a mixed-DLL scenario.</p>
<p>(Even worse: While you&#8217;re hibernated, what happens if somebody deletes a DLL you were using?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166083">
				<div id="div-comment-166083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166083">
			April 21, 2004 at 8:29 am</a>		</div>

		<p>Well one thing about the program hibernation is if you don&#8217;t let it hibernate across a restart, it makes problems like mutexes and window handles a lot easier to deal with.</p>
<p>I think rather than a solution happening from, say, the task manager, an API level call could be done.  The programs could have a &quot;Tools/Hibernate.&quot;  Of course, that would only make sense for MDI type programs.  Programs like Word, Outlook, et cetera would just confuse users with such an option.</p>
<p>So basically, Adobe needs to write a way to save their state, cause really they&#8217;re the only programs that eat up SO much memory that this would be a real problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166093">
				<div id="div-comment-166093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166093">
			April 21, 2004 at 9:00 am</a>		</div>

		<p>Window handles are a problem even without a restart. I discussed this in the main entry. Suppose there&#8217;s a program with a window. What happens to the window when you hibernate it?  Is it destroyed?  What if the program was relying on that window to receive messages from other programs? It can&#8217;t respond to those messages while it&#8217;s hibernated. Some of those messages may have been important. (E.g., &quot;System setting X changed, please refresh.&quot;) And when you restore the program, what if the numerical value of its window handle was re-used for some other window?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166243">
				<div id="div-comment-166243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166243">
			April 21, 2004 at 3:11 pm</a>		</div>

		<p>Well for window handles, you keep the values reserved while the application is hibernated.</p>
<p>I guess I&#8217;m making the assumption that since there&#8217;s no restart, the system would be able to remember what&#8217;s hibernated, and can keep the resources open but not enumerable.</p>
<p>In the case of global messages, it can be the responsibility of the application to remember to check things, the system can keep messages it knows about in a queue to resend, or whatever other hacky thing to think of.  Since the process would be calling an API, rather than the Process having such a thing imposed on it, it can know what it needs to check.  Hell, even a proxy fake window that records system messages it knows about, plus any addition ones the application specifies and then resends the last one of those messages across.  I haven&#8217;t thought it through completley (obviously :) ) but I could see it happen.</p>
<p>Of course, like I said, Abobe programs just saving their state would be enough for 99% of people wanting hibernation, because I think the logistical problems of distinguishing &quot;Process&quot; vs &quot;Document View&quot; are just too much for an end user to worry about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166253">
				<div id="div-comment-166253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166253">
			April 21, 2004 at 3:17 pm</a>		</div>

		<p>You can try shifting the responsibility to the program (e.g., &quot;all window messages sent to your window while you are hibernated will be lost&quot;), but that doesn&#8217;t help programs which support thirdparty plugins (e.g., Internet Explorer). If a plugin is not &quot;hibernation-aware&quot; then you&#8217;re toast.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166263">
				<div id="div-comment-166263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166263">
			April 21, 2004 at 3:17 pm</a>		</div>

		<p>And it&#8217;s pretty easy to structure a program around a hibernation type of activity.  Just making sure that things like writing settings aren&#8217;t married to the registry, but can be written out in any tree-type storage medium (XML &lt;-&gt; registry should be a piece of piss really).  Then you just need to make sure that your objects can be streamed in and out at any time, and really you can shut down your program and restore state, and it&#8217;s cleaner than just writing out process memory.</p>
<p>I guess (being in games) I always hated games that saved games by writing out all of the allocated memory, and restored them by reading it and fixing up the pointers (often missing a few of the pointers in the process).  Serialize everything, and you&#8217;ve solved both saving and reproducing any kind of state you need for your application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166063">
				<div id="div-comment-166063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166063">
			April 21, 2004 at 8:21 am</a>		</div>

		<p>&quot;Indeed, the mixed case is the scary one, because you also have to worry about mixed versions in the *same* process. Suppose you have two DLLs, A.dll and B.dll. Process X has loaded A.dll but not B.dll. Now you want to upgrade them. What do you do? If you rename A.dll to A.bak and install a new A.dll and B.dll, then process X will get the old A.dll (now named A.bak) and the new B.dll. Gosh, I hope the new B.dll and old A.dll (now named A.bak) interoperate!&quot;</p>
<p>Umm, isn&#8217;t this a problem anyway for current applications?  Run an update while a program keeps a.dll locked.  Then, before restarting, run a prorgam that depends on A.dll and B.dll.   So if Microsoft are willing to accept that case, the hibernation case falls under the same category of &quot;you&#8217;re on your own if you don&#8217;t restart.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166353">
				<div id="div-comment-166353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-166353">
			April 21, 2004 at 8:18 pm</a>		</div>

		<p>Although NT does the inode thing under the hood, that isn&#8217;t particularly exposed in user space.  I find it quite interesting how far apart win32 user space and the NT kernel are.</p>
<p>The versioning issue isn&#8217;t that big a deal.  It is exactly how UNIX packages have been upgraded for decades.  If it was a problem then you would also have to reboot your UNIX box on every update (like upgrading your web browser :-)</p>
<p>Raymond, if you are looking for another article to write, how about how damned difficult it is to write a new filesystem for NT.  There is some good stuff at <a target="_new" href="http://www.acc.umu.se/~bosse/" rel="nofollow">http://www.acc.umu.se/~bosse/</a>  and the rant in &quot;What ext2ifs can&#8217;t do&quot; on <a target="_new" href="http://uranus.it.swin.edu.au/~jn/linux/ext2ifs.htm" rel="nofollow">http://uranus.it.swin.edu.au/~jn/linux/ext2ifs.htm</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-174473">
				<div id="div-comment-174473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Candy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-174473">
			May 15, 2004 at 8:51 am</a>		</div>

		<p>I want this feature. Always have. I sometimes have 50 IE and Acrobat (well only one for this MDI piece of crap)windows open. It takes a long time to download 25 MB pdfs and 5mb html files on my very expensive ($400) 33.6K modem (1 mb per 6 minutes at best). So as I don;t know if I&#8217;m even interested in it I preload lots of documents.</p>
<p>At this moment I&#8217;m reviewing all USAF AU Journals in the 70s and 80s. So I only have 4 IE windows open as the pages are small anmd download in under a sec (lovely clean html code). I also have Rise Of Nations open and minimised and it&#8217;s been minimised for 5 days.</p>
<p>I&#8217;m looking through NGs and through this site. I want RON and the IE windows to go away from my taskbar for a while. And to survive a reboot (as 5 days ago I rebooted with another RON minimised).</p>
<p>I don&#8217;t care about memory (it can use as much as it wants &#8211; just goes to swap). I care about the UI and managing different tasks (reading this page, reading NG, Reading Air University Review (for three days now), playing (ot not playing RON for 5 days). I can close OE in NGs and it remembers state well enough.  The paper is now published so I&#8217;m about to open lots of web pages at smh.com.au. This will force me into the horrid scrolling buggy taskbar mode (because the taskbar remembers Z orders of the programs so you can&#8217;t click displayed buttons because the topmost button is scrolled out of sight).</p>
<p>Fix the taskbar but also allow programs to save state.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-174483">
				<div id="div-comment-174483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-174483">
			May 15, 2004 at 9:11 am</a>		</div>

		<p>That&#8217;s exactly my point. The OS can&#8217;t do it; the program has to be involved. So if you want this feature, ask the company that makes each program to implement it. (I thought most games had a &quot;save&quot; feature anyway.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-174503">
				<div id="div-comment-174503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Candy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-174503">
			May 15, 2004 at 11:32 am</a>		</div>

		<p>Ok, I&#8217;d like to ask the makers of Internet Explorer to save state. </p>
<p>The RON programmers insist on using there DirectX ui. So R.c the taskbutton and choosing close merely restores the program and displays Are you sure? which takes time to page in enough to display the stupid warning. (but if one reboots it just closes). Still this isn&#8217;t save state but it gets rid of it.</p>
<p>I don&#8217;t specify how implementing should be done but imagine it to be done through an API with the program&#8217;s cooperation. In my senario IE shouldn&#8217;t have any files open (notepad doesn&#8217;t hold a file open that it is editing). </p>
<p>I think things like this should be defined at the UI level. It requires no programming to handle most mouse movement in most apps becase Windows does it if the app doesn&#8217;t. What would be worse is multiple ways of doing this.</p>
<p>I remember you hot debate about file copy dialogs. Despite your sensible opposition to a 500 button dialog the No To All feature snuck in (but not on the folder warning dialog, only file overwrite dialog). I not used it for real.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-174513">
				<div id="div-comment-174513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040420-00/?p=39723#comment-174513">
			May 15, 2004 at 12:10 pm</a>		</div>

		<p>Since IE hosts thirdparty code, what should it do if there is an activex control on the page that doesn&#8217;t know how to save its state?</p>
<p>For most web pages (that don&#8217;t have lots of script), revisiting the page is usually good enough to restore the state.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

