<html>
<head>
<title>The wonderful world of shell bind context strings</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The wonderful world of shell bind context strings</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 22, 2015 / year-entry #16</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Some time ago, we saw how the IBindCtx parameter to IShell­Folder::Parse­Display­Name can be used to modify how the parse takes place. More generally, the IBindCtx parameter to a function is a catch-all miscellaneous options parameter. The interesting part of the bind context is all the stuff that has been added to it via the IBindCtx::Register­Object­Param...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/03/10415778.aspx"> Some time ago</a>, we saw how the <code>IBindCtx</code> parameter to <code>IShell&shy;Folder::<wbr>Parse&shy;Display&shy;Name</wbr></code> can be used to modify how the parse takes place. More generally, the <code>IBindCtx</code> parameter to a function is a catch-all <i>miscellaneous options</i> parameter.</p>
<p> The interesting part of the bind context is all the stuff that has been added to it via <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms687254(v=vs.85).aspx"> the <code>IBindCtx::<wbr>Register&shy;Object&shy;Param</wbr></code> method</a>. You can attach arbitrary objects to the bind context, using a string to identify each one. </p>
<p> Some bind context parameters are like Boolean parameters that simply change some default behavior of the operation. For these operations, the object that is associated with the bind context string is not important; the important thing is that there is <i>something</i> associated with it. Traditionally, you just connect a dummy object that implements just <code>IUnknown</code>. </p>
<p> In the most general case, the object associated with a bind context string implements some operation-specific interface. For example, <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/bb762592(v=vs.85).aspx"> the <code>STR_<wbr>BIND_<wbr>DELEGATE_<wbr>CREATE_<wbr>OBJECT</wbr></wbr></wbr></wbr></code> bind context string</a> expects you to associate an object that implements the <code>ICreate&shy;Object</code> interface, because the whole point of the <code>STR_<wbr>BIND_<wbr>DELEGATE_<wbr>CREATE_<wbr>OBJECT</wbr></wbr></wbr></wbr></code> bind context string is to say, "Hey, I want to create objects in a nonstandard way," so you need to tell it what that nonstandard way is. </p>
<p> At the other extreme, you may have a chunk of data that you want to associate with the bind context string. Since bind contexts want to associate objects, you need to wrap the data inside a COM object. We saw this earlier when <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/03/10415778.aspx"> we had to create an object that implemented the <code>IFile&shy;System&shy;Bind&shy;Data</code> interface</a> in order to babysit a <code>WIN32_<wbr>FIND_<wbr>DATA</wbr></wbr></code> structure. </p>
<p> Rather than having to create a separate interface for each data type (hello, <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/dd378297(v=vs.85).aspx"> <code>IObject&shy;With&shy;Folder&shy;Enum&shy;Mode</code></a>), and rather than going to the opposite extreme and just using <code>IStream</code> to pass arbitrary unstructured data, the shell folks decided to take a middle-ground approach: Use a common interface that still has a modicum of type safety, namely, <code>IProperty&shy;Bag</code>. Other nice things about this approach is that there are a lot of pre-existing helper functions for property bags and property variants. Also, you need to attach only one object instead of a whole bunch of tiny little ones. </p>
<p> Under this new regime (which took hold in Windows&nbsp;8), the bind context has an associated property bag, and you put your data in that property bag. </p>
<p> In pictures: </p>
<table cellpadding="3" style="border-collapse: collapse">
<tr>
<td></td>
<td>&nbsp;</td>
<td colspan="2"><code>IBindCtx::<wbr>Register&shy;Object&shy;Param</wbr></code></td>
<td></td>
<td colspan="2"><code>IProperty&shy;Bag::<wbr>Write</wbr></code></td>
</tr>
<tr>
<td style="border: solid 1px black"><code>IBindCtx</code></td>
<td>&rarr;</td>
<td style="border: solid 1px black">Boolean parameter</td>
<td style="border: solid 1px black"><code>IUnknown</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td style="border: solid 1px black">Interface parameter</td>
<td style="border: solid 1px black">object with custom interface</td>
</tr>
<tr>
<td></td>
<td></td>
<td style="border: solid 1px black"><code>STR_<wbr>PROPERTY&shy;BAG_<wbr>PARAM</wbr></wbr></code></td>
<td style="border: solid 1px black"><code>IPropertyBag</code></td>
<td>&rarr;</td>
<td style="border: solid 1px black">Property bag <code>DWORD</code> parameter</td>
<td style="border: solid 1px black"><code>VT_UI4</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td style="border: solid 1px black">Property bag string parameter</td>
<td style="border: solid 1px black"><code>VT_BSTR</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td style="border: solid 1px black">Property bag Boolean parameter</td>
<td style="border: solid 1px black"><a href="https://blogs.msdn.com/b/oldnewthing/archive/2004/12/22/329884.aspx"><code>VT_BOOL</code></a></td>
</tr>
</table>
<p> If you want a Boolean-style parameter to be <code>true</code>, then set it in the bind context with a dummy object that implements <code>IUnknown</code>. If you want a Boolean-style parameter to <code>false</code>, then omit it from the bind context entirely. </p>
<p> To set an interface-style parameter, set it in the bind context with an object that implements the desired interface. </p>
<p> To set a property bag-based parameter, set it in the property bag with the appropriate variant type. </p>
<p> Here are the bind context strings defined up through Windows&nbsp;8.1 and the way you set them into the bind context. </p>
<table border="1" bordercolor="black" cellpadding="3" style="border-collapse: collapse">
<tr>
<th>Bind context string</th>
<th>Model</th>
<th>Operation</th>
</tr>
<tr>
<td><code>STR_<wbr>AVOID_<wbr>DRIVE_<wbr>RESTRICTION_<wbr>POLICY</wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding</td>
</tr>
<tr>
<td><code>STR_<wbr>BIND_<wbr>DELEGATE_<wbr>CREATE_<wbr>OBJECT</wbr></wbr></wbr></wbr></code></td>
<td>Interface <code>ICreateObject</code></td>
<td>Binding</td>
</tr>
<tr>
<td><code>STR_<wbr>BIND_<wbr>FOLDER_<wbr>ENUM_<wbr>MODE</wbr></wbr></wbr></wbr></code></td>
<td>Interface <code>IObjectWith&shy;FolderEnumMode</code>     </td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>BIND_<wbr>FOLDERS_<wbr>READ_<wbr>ONLY</wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>BIND_<wbr>FORCE_<wbr>FOLDER_<wbr>SHORTCUT_<wbr>RESOLVE</wbr></wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding</td>
</tr>
<tr>
<td><code>STR_<wbr>DONT_<wbr>PARSE_<wbr>RELATIVE</wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>DONT_<wbr>RESOLVE_<wbr>LINK</wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding</td>
</tr>
<tr>
<td><code>STR_<wbr>ENUM_<wbr>ITEMS_<wbr>FLAGS</wbr></wbr></wbr></code></td>
<td>Property bag: <code>VT_<wbr>UI4</wbr></code></td>
<td>Binding for enumeration</td>
</tr>
<tr>
<td><code>STR_<wbr>FILE_<wbr>SYS_<wbr>FIND_<wbr>DATA</wbr></wbr></wbr></wbr></code></td>
<td>Interface <code>IFileSys&shy;BindData</code> or <code>IFileSys&shy;BindData2</code></td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>FILE_<wbr>SYS_<wbr>BIND_<wbr>DATA_<wbr>WIN7_<wbr>FORMAT</wbr></wbr></wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>GET_<wbr>ASYNC_<wbr>HANDLER</wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>GetUIObjectOf</td>
</tr>
<tr>
<td><code>STR_<wbr>GPS_<wbr>BEST&shy;EFFORT</wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding for <code>IProperty&shy;Store</code></td>
</tr>
<tr>
<td><code>STR_<wbr>GPS_<wbr>DELAY&shy;CREATION</wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding for <code>IProperty&shy;Store</code></td>
</tr>
<tr>
<td><code>STR_<wbr>GPS_<wbr>FAST&shy;PROPERTIES&shy;ONLY</wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding for <code>IProperty&shy;Store</code></td>
</tr>
<tr>
<td><code>STR_<wbr>GPS_<wbr>HANDLER&shy;PROPERTIES&shy;ONLY</wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding for <code>IProperty&shy;Store</code></td>
</tr>
<tr>
<td><code>STR_<wbr>GPS_<wbr>NO_<wbr>OPLOCK</wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding for <code>IProperty&shy;Store</code></td>
</tr>
<tr>
<td><code>STR_<wbr>GPS_<wbr>OPEN&shy;SLOW&shy;ITEM</wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding for <code>IProperty&shy;Store</code></td>
</tr>
<tr>
<td><code>STR_<wbr>IFILTER_<wbr>FORCE_<wbr>TEXT_<wbr>FILTER_<wbr>FALLBACK</wbr></wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding for <code>IFilter</code></td>
</tr>
<tr>
<td><code>STR_<wbr>IFILTER_<wbr>LOAD_<wbr>DEFINED_<wbr>FILTER</wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Binding for <code>IFilter</code></td>
</tr>
<tr>
<td><code>STR_<wbr>INTERNAL_<wbr>NAVIGATE</wbr></wbr></code></td>
<td>Boolean</td>
<td>Loading history</td>
</tr>
<tr>
<td><code>STR_<wbr>INTERNET&shy;FOLDER_<wbr>PARSE_<wbr>ONLY_<wbr>URLMON_<wbr>BINDABLE</wbr></wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>ITEM_<wbr>CACHE_<wbr>CONTEXT</wbr></wbr></wbr></code></td>
<td>Interface <code>IBindCtx</code></td>
<td>Parsing and initiailzing</td>
</tr>
<tr>
<td><code>STR_<wbr>NO_<wbr>VALIDATE_<wbr>FILE&shy;NAME_<wbr>CHARS</wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>ALLOW_<wbr>INTERNET_<wbr>SHELL_<wbr>FOLDERS</wbr></wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>AND_<wbr>CREATE_<wbr>ITEM</wbr></wbr></wbr></wbr></code></td>
<td>Interface <code>IParse&shy;And&shy;Create&shy;Item</code></td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>DONT_<wbr>REQUIRE_<wbr>VALIDATED_<wbr>URLS</wbr></wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>EXPLICIT_<wbr>ASSOCIATION_<wbr>SUCCESSFUL</wbr></wbr></wbr></wbr></code></td>
<td>Property bag: <code>VT_BOOL</code></td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>PARTIAL_<wbr>IDLIST</wbr></wbr></wbr></code></td>
<td>Interface <code>IShell&shy;Item</code></td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>PREFER_<wbr>FOLDER_<wbr>BROWSING</wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>PREFER_<wbr>WEB_<wbr>BROWSING</wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>PROPERTY&shy;STORE</wbr></wbr></code></td>
<td>Interface <code>IProperty&shy;Bag</code></td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>SHELL_<wbr>PROTOCOL_<wbr>TO_<wbr>FILE_<wbr>OBJECTS</wbr></wbr></wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>SHOW_<wbr>NET_<wbr>DIAGNOSTICS_<wbr>UI</wbr></wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>SKIP_<wbr>NET_<wbr>CACHE</wbr></wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>TRANSLATE_<wbr>ALIASES</wbr></wbr></wbr></code></td>
<td>Boolean</td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>WITH_<wbr>EXPLICIT_<wbr>ASSOCAPP</wbr></wbr></wbr></wbr></code></td>
<td>Property bag: <code>VT_BSTR</code></td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>WITH_<wbr>EXPLICIT_<wbr>PROGID</wbr></wbr></wbr></wbr></code></td>
<td>Property bag: <code>VT_BSTR</code></td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PARSE_<wbr>WITH_<wbr>PROPERTIES</wbr></wbr></wbr></code></td>
<td>Interface <code>IProperty&shy;Store</code></td>
<td>Parsing</td>
</tr>
<tr>
<td><code>STR_<wbr>PROPERTYBAG_<wbr>PARAM</wbr></wbr></code></td>
<td>Interface <code>IProperty&shy;Bag</code></td>
<td>holds property bag parameters</td>
</tr>
<tr>
<td><code>STR_<wbr>SKIP_<wbr>BINDING_<wbr>CLSID</wbr></wbr></wbr></code></td>
<td>Interface <code>IPersist</code></td>
<td>Parsing and binding</td>
</tr>
</table>
<p> There are some oddities in the above table. </p>
<ul>
<li>All of the <code>STR_<wbr>GPS_*</wbr></code> values would be more conveniently     expressed as a single <code>VT_UI4</code> property bag-based     value. (Exercise: Why isn't it?) </li>
<li>The <code>STR_<wbr>ITEM_<wbr>CACHE_<wbr>CONTEXT</wbr></wbr></wbr></code> bind context     parameter is itself another bind context!     The idea here is that you, the caller, are enabling caching     during the parse,     and the inner bind context acts as the cache. </li>
<li>The <code>STR_<wbr>PARSE_<wbr>EXPLICIT_<wbr>ASSOCIATION_<wbr>SUCCESSFUL</wbr></wbr></wbr></wbr></code>     value is unusual in that it is something set by the parser and passed     back to the caller. </li>
<li>As we have been discussing,     <code>STR_<wbr>PROPERTY&shy;BAG_<wbr>PARAM</wbr></wbr></code> is a bind context     string that doesn't mean anything on its own.     Rather, it provides a property bag into which more parameters can be     stored. </li>
</ul>
<p> Next time, I'll write some helper functions to make all this slightly more manageable. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1172613">
				<div id="div-comment-1172613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172613">
			January 22, 2015 at 7:35 am</a>		</div>

		<p>I have always found these hard to work with and there are lot&#39;s of undocumented strings that you run across when debugging IShellFolder and friends. That being said, this table is going to be really useful as a quick reference so on behalf of shell developers everywhere, thank you!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172643">
				<div id="div-comment-1172643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172643">
			January 22, 2015 at 9:46 am</a>		</div>

		<p>I&#39;d have to imagine that the only reason the STR_GPS_* values exist is that they predated the idea of having a standard property bag.</p>
<p>You could do it now, but prior to Win8 it was a lot easier to create a trivial object to represent a bool than to create an object to hold an int.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172653">
				<div id="div-comment-1172653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nikos z</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172653">
			January 22, 2015 at 10:05 am</a>		</div>

		<p>I always puzzled why such an over the top method like bind contexts was used to pass effectively 0-1 bits of information (mostly). So what if you want to activate 2 behaviours simultaneously (of the boolean type), you call Register&shy;Object&shy;Param twice with the same dummy IUnknown?</p>
<div class="post">[<em>You&#39;ll have to ask the COM folks why they chose to use a bind context to pass binding parameters. Sure, you could have a standard dummy IUnknown that you use. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172673">
				<div id="div-comment-1172673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CarlD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172673">
			January 22, 2015 at 11:27 am</a>		</div>

		<p>@nikos &#8211; my understanding is the bind context was meant for more than just passing extra parameters. &nbsp;In particular, during moniker binding, the bind context can also be used for internal communication between the objects that are performing the parse/bind operations as a composite moniker is processed. &nbsp;For example, an expensive-to-create resource that might be needed more than once could be cached in the binding context to allow simple monikers later in the pipeline to avoid the cost of re-creating it.</p>
<p>Or at least that what I&#39;ve understood. &nbsp;In all my years of COM programming (not with the shell APIs), I don&#39;t recall ever actually using the bind context for anything at all &#8211; it was just another object to haul around and pass long.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172703">
				<div id="div-comment-1172703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172703">
			January 22, 2015 at 3:18 pm</a>		</div>

		<p>[You&#39;ll have to ask the COM folks why they chose to use a bind context to pass binding parameters. Sure, you could have a standard dummy IUnknown that you use. -Raymond]</p>
<p>Would passing the IBindCtx itself be correct?</p>
<div class="post">[<em>From the API&#39;s standpoint, you can put anything you want. But putting the bind context inside itself would create a circular reference and therefore a memory leak. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172713">
				<div id="div-comment-1172713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150122-00/?p=44853#comment-1172713">
			January 22, 2015 at 7:31 pm</a>		</div>

		<p>Ohhh I missed the critical part. The boolean is evaluated later.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

