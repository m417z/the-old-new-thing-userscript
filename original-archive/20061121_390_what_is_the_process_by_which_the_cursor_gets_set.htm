<html>
<head>
<title>What is the process by which the cursor gets set?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is the process by which the cursor gets set?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 21, 2006 / year-entry #391</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter LittleHelper asked, "Why is the cursor associated with the class and not the window?" This question makes the implicit assumption that the cursor is associated with the class. While there is a cursor associated with each window class, it is the window that decides what cursor to use. The cursor-setting process is described in...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter LittleHelper asked,
"Why is the cursor associated with the class and not the window?"
This question makes the implicit assumption that the cursor is
associated with the class.
While there is a cursor associated with each window class,
it is the window that decides what cursor to use.
</p>
<p>
The cursor-setting process is described in the documentation of the
<code>WM_SETCURSOR</code> message:
</p>
<blockquote CLASS=q><p>
The <code>DefWindowProc</code> function passes the
<code>WM_SETCURSOR</code> message to a parent window before processing.
If the parent window returns <code>TRUE</code>,
further processing is halted.
Passing the message to a window's parent window
gives the parent window control over the cursor's setting in a child window.
The <code>DefWindowProc</code> function also uses this message
to set the cursor to an arrow if it is not in the client area,
or to the registered class cursor if it is in the client area.
</p>
</blockquote>
<p>
That paragraph pretty much captures the entire cursor-setting process.
all I'm writing from here on out is just restating those few sentences.
</p>
<p>
The <code>WM_SETCURSOR</code> goes to the child window beneath
the cursor.
(Obviously it goes to the child window and not the parent,
because the documentation says that <code>DefWindowProc</code>
forward the message to its parent.
if the message went to the parent originally, then there would be nobody
to forward the message to!)
At this point, your window procedure can trap the <code>WM_SETCURSOR</code>
message, set the cursor, and return <code>TRUE</code>.
Thus, the window gets the first priority on deciding what the cursor is.
</p>
<p>
If you don't handle the <code>WM_SETCURSOR</code> message,
then <code>DefWindowProc</code> forwards the message to the parent,
who in turn gets to decide whether to handle the message or forward
to its parent in turn.
One possibility is that one of the ancestor windows will handle
the message, set the cursor, and return <code>TRUE</code>.
In that case, the <code>TRUE</code> return value tells
<code>DefWindowProc</code> that the cursor has been set and no more
work needs to be done.
</p>
<p>
The other, more likely, possibility is that none of the ancestor
windows cared to set the cursor.
At each return to <code>DefWindowProc</code>, the cursor will be
set to the class cursor for the window that contains the cursor.
</p>
<p>
Here it is in pictures.
Suppose we have three windows, A, B, and C, where A is the top-level
window, B a child, and C a grandchild, and none of them do anything
special in <code>WM_SETCURSOR</code>.
Suppose further that the mouse is over window&nbsp;C:
</p>
<pre>
SendMessage(hwndC, WM_SETCURSOR, ...)
 C's window procedure does nothing special
 DefWindowProc(hwndC, WM_SETCURSOR, ...)
  DefWindowProc forwards to parent:
   SendMessage(hwndB, WM_SETCURSOR, ...)
   B's window procedure does nothing special
   DefWindowProc(hwndB, WM_SETCURSOR, ...)
    DefWindowProc forwards to parent:
     SendMessage(hwndA, WM_SETCURSOR, ...)
     A's window procedure does nothing special
      DefWindowProc(hwndA) cannot forward to parent (no parent)
      DefWindowProc(hwndA) sets the cursor to C's class cursor
      DefWindowProc(hwndA) returns FALSE
     A's window procedure returns FALSE
    SendMessage(hwndA, WM_SETCURSOR, ...) returns FALSE
    DefWindowProc(hwndB) sets the cursor to C's class cursor
    DefWindowProc(hwndB) returns FALSE
   B's window procedure returns FALSE
  SendMessage(hwndB, WM_SETCURSOR, ...) returns FALSE
  DefWindowProc(hwndC) sets the cursor to C's class cursor
  DefWindowProc(hwndC) returns FALSE
 C's window procedure returns FALSE
SendMessage(hwndC, WM_SETCURSOR, ...) returns FALSE
</pre>
<p>
Observe that the <code>WM_SETCURSOR</code> started at the
bottom (window&nbsp;C), bubbled up to the top (window&nbsp;A),
and then worked its way back down to window&nbsp;C.
On the way up, it asks each window if it wants to set the cursor,
and if it makes it all the way to the top with nobody expressing
an opinion, then on the way down, each window sets the cursor
to C's class cursor.
</p>
<p>
Now, of course, any of the windows along the way could have decided,
"I'm setting the cursor!" and returned <code>TRUE</code>,
in which case the message processing would have halted immediately.
</p>
<p>
So you see, the window really does decide what the cursor is.
Yes, there is a cursor associated with the class, but it is used
only if the window decides to use it.
If you want to associate a cursor with the window, you can do it
by handling the <code>WM_SETCURSOR</code> message explicitly
instead of letting <code>DefWindowProc</code> default to the class
cursor.
</p>
<p>
LittleHelper's second question:
"Many programs call <code>SetCursor</code> on every <code>WM_MOUSEMOVE</code>.
Is this not recommended?"
</p>
<p>
Although there is no rule forbidding you from using
<code>WM_MOUSEMOVE</code> to set your cursor, it's going to lead to some
problems.
First, and much less serious, you won't be able to participate in the
<code>WM_SETCURSOR</code> negotiations since you aren't doing
your cursor setting there.
But the real problem is that you're going to get cursor flicker.
<code>WM_SETCURSOR</code> will get sent to your window to
determine the cursor. 
Since you didn't do anything,
it will probably turn into your class cursor.
And then you get your <code>WM_MOUSEMOVE</code> and set the cursor
again.
Result: Each time the user moves the mouse, the cursor changes to
the class cursor and then to the final cursor.
</p>
<p>
Let's watch this happen. Start with the
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make these changes:
</p>
<pre>
void
OnMouseMove(HWND hwnd, int x, int y, UINT keyFlags)
{
 Sleep(10); // just to make the flicker more noticeable
 SetCursor(LoadCursor(NULL, IDC_CROSS));
}

 // Add to WndProc
 HANDLE_MSG(hwnd, WM_MOUSEMOVE, OnMouseMove);
</pre>
<p>
Run the program and move the mouse over the client area.
Notice that it flickers between an arrow (the class cursor,
set during <code>WM_SETCURSOR</code>)
and the crosshairs
(set during <code>WM_MOUSEMOVE</code>).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-444103">
				<div id="div-comment-444103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444103">
			November 21, 2006 at 10:30 am</a>		</div>

		<p>What if an application is busy with something and isn&#8217;t processing messages? &nbsp;Does Windows use a default cursor or does it remember and use the registered class cursor&#8230; or other?</p>
<p>All the apps on my computer are well behaved enough under WinXP that I can&#8217;t think of one to use in an attempt to answer this for myself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-444133">
				<div id="div-comment-444133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444133">
			November 21, 2006 at 11:30 am</a>		</div>

		<p>&#8220;The DefWindowProc function also uses this message to set the cursor to an arrow if it is not in the client area.&#8221;</p>
<p>Does &#8220;the client area&#8221; mean &#8220;some application&#8221;?</p>
<p>The cursor is not always an arrow if it is not in an application; it&#8217;s whatever the user set in the Mouse applet in the Control Panel, on the Pointers tab. &nbsp;It could be a hand from the &#8220;Conductor&#8221; system scheme.</p>
<div class="post">[<i>&#8220;Arrow&#8221; was shorthand for &#8220;logical arrow cursor, which might look like an actual arrow, or  might look like something else if the user customized the logical arrow cursor.&#8221; I can&#8217;t believe I had to write that. I&#8217;m assume you&#8217;re all smart enough to figure that out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-444163">
				<div id="div-comment-444163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Skizz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444163">
			November 21, 2006 at 1:11 pm</a>		</div>

		<p>That description reminded my of one of Humphrey Lyttelton&#8217;s descriptions of the game &#8216;One song to the tune of another.&#8217; (Listen to <a rel="nofollow" target="_new" href="http://www.bbc.co.uk/radio/aod/networks/bbc7/aod.shtml?bbc7/clue" rel="nofollow">http://www.bbc.co.uk/radio/aod/networks/bbc7/aod.shtml?bbc7/clue</a> about 8:20 minutes in for an example.)</p>
<p>Skizz</p>
<p>P.S.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-444193">
				<div id="div-comment-444193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444193">
			November 21, 2006 at 2:46 pm</a>		</div>

		<p>I&#8217;ve noticed an odd behavior with the cursor&#8217;s appearance in processes that are in a job object with the JOB_OBJECT_UILIMIT_HANDLES limit. This limit prevents processes inside the job from accessing USER handles (like HWNDs) not belonging to process inside the job. It&#8217;s quite useful in mitigating &#8216;shatter&#8217; attacks.</p>
<p>Many applications behave normally under this limit, except that they do not always update the cursor correctly. The cursor IS updated if they let DefWindowProc set the cursor according to the the window class&#8217;s cursor, but sometimes the cursor will get &quot;stuck&quot; as the I-beam (or some other) cursor after moving over a textbox, and not revert back to an arrow when it&#8217;s supposed to.</p>
<p>To try some psychic powers of my own, I suspect that a process under the JOB_OBJECT_UILIMIT_HANDLES limit can only set the cursor while processing WM_SETCURSOR, and not at other times: apps that normally set the cursor in response to WM_MOUSEMOVE have their requests ignored under this limit.</p>
<p>The rationale for this Windows behavior is that you wouldn&#8217;t want a sandboxed app just setting the cursor anytime it felt like it, so it&#8217;s only allowed to set the cursor when the window manager is sure that the cursor belongs to the app&#8211; while handling WM_SETCURSOR.</p>
<p>This behavior can be reproduced in XP or 2003 under the &quot;Restricted&quot; extended SAFER level (which creates a job with the HANDLES limit), or with ulimitnt.exe and the -handles option.</p>
<p>Winamp, for example, won&#8217;t update the cursor at all (except in common dialog boxes). Wordpad fails to show the I-beam in the main text area. Visual Studio 2005 doesn&#8217;t display the I-beam correctly, and often makes (leaves?) the cursor invisible.</p>
<p>I&#8217;m not trying to blame anyone for this: it&#8217;s just another example of how not following the rules (i.e. updating the cursor at the right time) can lead to unexepected problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-444203">
				<div id="div-comment-444203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444203">
			November 21, 2006 at 4:21 pm</a>		</div>

		<p>Raymond: &nbsp;Well, I could have assumed that you meant &quot;logical arrow cursor&quot; when you wrote &quot;arrow&quot;, but I couldn&#8217;t be sure. &nbsp;</p>
<p>After all, you were talking about changing the cursor. &nbsp;Sorry I wasn&#8217;t more prescient.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-444243">
				<div id="div-comment-444243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444243">
			November 21, 2006 at 8:24 pm</a>		</div>

		<p>just tested the modified scratch program, why the &nbsp;cursor is crosshair after some mouse moves stop? shouldn&#8217;t WM_SETCURSOR is the last message we get?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-444313">
				<div id="div-comment-444313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444313">
			November 22, 2006 at 3:18 am</a>		</div>

		<p>The documentation doesn&#8217;t make it entirely clear where the WM_SETCURSOR message comes from. Which is sometimes rather important to being able to divine out the messages true life and purpose.</p>
<p>I suspect its generated by PeekMessage/GetMessage when they see that the&#8217;yre meant to generate a WM_MOUSEMOVE message, the reason the cursor stays as a crosshair is that the WM_SETCURSOR is generated before, not after, the WM_MOUSEMOVE message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-444493">
				<div id="div-comment-444493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444493">
			November 22, 2006 at 7:38 pm</a>		</div>

		<p>&#8220;DefWindowProc(hwndA) sets the cursor to C&#8217;s class cursor&#8221;</p>
<p>Surely it would set it to *A*&#8217;s class cursor? &nbsp;Then<br />
DefWindowProc(hwndB) would set it to B&#8217;s cursor, and finally<br />
DefWindowProc(hwndC) would set it to C&#8217;s cursor.</p>
<p>Presumably this doesn&#8217;t result in flicker because it&#8217;s setting some<br />
internal flag telling it to not actually draw the cursor until the<br />
whole chain is complete. &nbsp;Unlike the WM_MOUSEMOVE case.</p>
<div class="post">[<i>There is no internal flag to &#8220;delay cursor<br />
changes&#8221;. It really does set it to C&#8217;s class cursor. It has to, because<br />
the hit-test value refers to C&#8217;s window, not A&#8217;s (or B&#8217;s). If you<br />
wanted to set the cursor to A&#8217;s class cursor, then you would need to<br />
have A&#8217;s hit-test code. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-444623">
				<div id="div-comment-444623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">LittleHelper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-444623">
			November 23, 2006 at 4:48 pm</a>		</div>

		<p>Thanks for explaining!</p>
<p>I still find it strange that cursors are an attribute of the window class, and not of the window instance. Maybe it is remains of constrained resources in older windows.</p>
<div class="post">[<i>??? It&#8217;s an attribute of the window instance that&#8217;s the whole point of this article! If the window instance chooses not to customize the cursor and lets DefWindowProc decide, then it comes from the class, but it was the window instance&#8217;s decision! I guess I completely failed in my attempt to explain this topic. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504293">
				<div id="div-comment-504293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://webionaire.com/island/?p=175' rel='external nofollow' class='url'>webionaire &raquo; Cursor Flicker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061121-15/?p=28943#comment-504293">
			May 14, 2007 at 6:18 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://webionaire.com/island/?p=175" rel="nofollow">http://webionaire.com/island/?p=175</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

