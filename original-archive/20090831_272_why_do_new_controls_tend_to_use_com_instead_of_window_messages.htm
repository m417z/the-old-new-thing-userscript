<html>
<head>
<title>Why do new controls tend to use COM instead of window messages?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why do new controls tend to use COM instead of window messages?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 31, 2009 / year-entry #273</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter David wonders why new controls tend to use COM instead of window messages. "It seems that there must have been a decision to only develop COM controls after the invention of COM." There have been plenty of Win32 controls invented after the invention of COM. In fact, the entire common controls library was developed...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter David wonders
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#649857">
why new controls tend to use COM instead of window messages</a>.
"It seems
that there must have been a decision to only
develop COM controls after the invention of COM."
</p>
<p>
There have been plenty of Win32 controls invented after the invention
of COM.
In fact, the entire common controls library was developed after
the invention of COM.
All your old friends like the list view,
tree view, and property sheets are good old Win32 controls.
But it's true that the newer stuff tends to use COM.
Why is that?
</p>
<p>
I am not aware of any grand pronouncement on this subject.
Each team makes a decision that they feel is best for their customers.
But if you think about it,
it's not an unreasonable choice:
Suppose you were writing a new C++ object.
Would you prefer to use this:
</p>
<pre>
class Thing {
public:
  enum MESSAGENUMBER {
  MESSAGE_INSERTITEM,
  MESSAGE_DELETEITEM,
  MESSAGE_DELETEALLITEMS,
  MESSAGE_SETLABELTEXT,
  MESSAGE_GETNEXTITEM,
  MESSAGE_ADDBITMAP,
  ...
  };
  LRESULT Message(MESSAGENUMBER m, WPARAM wParam, lPARAM lParam);
private:
  ...
};
</pre>
<p>
or would you rather use this:
</p>
<pre>
class Thing {
public:
  BOOL InsertItem(Item *item, Item *itemParent, Item *itemInsertAfter);
  BOOL DeleteItem(Item *item);
  BOOL DeleteAllItems();
  BOOL SetLabelText(Item *item, PCWSTR pszText);
  Item *GetNextItem(Item *item);
  BOOL AddBitmap(HINSTANCE hinst, PCWSTR pszResource, COLORREF crTransparent);
  ...
private:
  ...
};
</pre>
<p>
It's just less of a hassle using separate member functions,
where you don't have to try
to pack all your parameters into two parameters (cryptically named
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/11/25/55850.aspx">
<code>WPARAM</code> and <code>LPARAM</code></a>)
on the sending side, 
and then unpack the parameters on the window procedure side.
</p>
<p>
The overhead of sending a message can add up for high-traffic messages.
A C++ method call is pretty direct: You set up the parameters and call
the method.
Whereas when you send a window message,
it bounces around inside the window manager
until it magically pops out the other side.
</p>
<p>
Again, these are my personal remarks and are not the official
position of Microsoft on anything.
But if you were writing a control, which would you prefer to have
to implement?
And if you were using a control, which interface would you rather use?
</p>
<p>
(That said,
I can't think of many common controls that are COM-based.
All the ones I know about still use boring window messages.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-765443">
				<div id="div-comment-765443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.flickr.com/photos/ajgelado/' rel='external nofollow' class='url'>Antonio Rodr&#237;&#173;guez</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765443">
			August 31, 2009 at 11:10 am</a>		</div>

		<p>The link to the original comment doesn&#8217;t work. Its URL contains hte host name (blogs.msdn.com/) twice. Oh, and in the first paragraph after the code samples (the one that starts &#8220;It&#8217;s just less of a hassle&#8230;&#8221;), you open one bracket but don&#8217;t close it O:-) .</p>
<p>Apart from that, it&#8217;s a really interesting article, as most of the stuff you write. Being a Visual Basic programmer, I have the luck to access all controls through COM. But every now and then I need to send a message to a control and, it&#8217;s a lot less clean (and more easily broken) than calling a method.</p>
<div class=post>[<i>Fixed, thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765453">
				<div id="div-comment-765453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">edgar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765453">
			August 31, 2009 at 11:24 am</a>		</div>

		<p>If there is only a COM Interface, you have an unnecessary memory allocation overhead for returning objects in Inproc calls.</p>
<p>Therefore I want both options.</p>
<div class=post>[<i>Who said information had to be returned in COM objects? COM methods are allowed to fill in structures, same as window messages. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765463">
				<div id="div-comment-765463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeproject.com/KB/miscctrl/springctrls.aspx' rel='external nofollow' class='url'>Maxime LABELLE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765463">
			August 31, 2009 at 1:04 pm</a>		</div>

		<p>Thanks to ATL&#8217;s message map, you can actually have the best of both worlds. That is, a clean C++ implementation on the control side of what is really exposed as a plain old boring windows control.</p>
<p>I&#8217;m sure you can do this with MFC as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765473">
				<div id="div-comment-765473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765473">
			August 31, 2009 at 1:24 pm</a>		</div>

		<p>As a C programmer (mainly), I prefer simple functions that work for every thing (no class magic or messaging involved): Thing_InsertItem(thing, item, parent, predecessor), Thing_DeleteItem(thing, item), etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765543">
				<div id="div-comment-765543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765543">
			August 31, 2009 at 7:07 pm</a>		</div>

		<blockquote><p>
  &gt; As a C programmer (mainly),
</p></blockquote>
<p>Then define COBJMACROS and that is exactly the interface you get for COM objects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765553">
				<div id="div-comment-765553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://twitter.com/davidlmorris' rel='external nofollow' class='url'>davidlmorris</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765553">
			August 31, 2009 at 7:40 pm</a>		</div>

		<p>I still write in &#8216;C&#8217;. &nbsp;So obviously, I like that windows controls use the the Win32 &#8216;C&#8217; interface. &nbsp;I have at least an illusion that they are clean and fast.</p>
<p>Isn&#8217;t there an implied contract that there will be a low level message based interface, using only the format and structures &nbsp;(WM_COMMAND or WM_NOTIFY) common to the Win32 API? &nbsp;As a counter example the new Ribbon control in Win7 seems (at first glance) to be moving far away from this.</p>
<p>One of the really great things about Microsoft in the past is that MS has made tremendous efforts to maintain compatibility (I&#8217;m think of the bits in Raymond&#8217;s book about Win95). &nbsp;Shouldn&#8217;t this also apply to the style and type of interface?</p>
<div class=post>[<i>Actually, it&#8217;s quite the contrary. COM method dispatch is much, much faster than a message send. Think about it &#8211; a COM method call is a vtable lookup and an indirect call. A message send involves handle validation, looking up the window procedure, calling any hooks, thunking the message, then calling the destination window procedure, which in turn has to pass the message number to a switch statement. Backwards compatibility says that if a control had a message-based interface, it will continue to have one. But it doesn&#8217;t mean that new controls have to use those same interfaces. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765563">
				<div id="div-comment-765563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765563">
			August 31, 2009 at 8:28 pm</a>		</div>

		<blockquote><p>
  &gt; One of the really great things about Microsoft in the past is that MS has made tremendous efforts to maintain compatibility
</p></blockquote>
<p>I was impressed all the way back with the transition from Windows 1 to 2 where it interpreted the CreateWindow flags differently depending on the version of Windows SDK used to link the binary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765483">
				<div id="div-comment-765483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tungware.com' rel='external nofollow' class='url'>Henry Skoglund</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765483">
			August 31, 2009 at 1:39 pm</a>		</div>

		<p>Another answer to this question would be to require controls instead to be CLR-only. Say Win7 required Net4 to be mandatory installed, so all newly written controls for that OS could be CLR-flavored. </p>
<p>Of course there would still be plenty of interop and marshalling support around, but this time going *from* native *to* the CLR.</p>
<p>In my experience window messages are less error prone than COM when you have large projects with multiple languages, i.e. VB and VC. For example, a UDT with BSTRs created in VB6 requires &quot;inject_statement(&quot;#pragma pack(push,4)&quot;)&quot; to be properly opened in VC6. But a struct in VB.NET can be opened directly in VC9.</p>
<p>COM is an excellent infrastructure but so is the CLR. And we could leave lots of issues behind us, like discovering that this particular BSTR in that interface can be ANSI only&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765573">
				<div id="div-comment-765573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://twitter.com/davidlmorris' rel='external nofollow' class='url'>davidlmorris</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765573">
			August 31, 2009 at 8:52 pm</a>		</div>

		<p>@porter This is a nitpick and you know it. Perhaps, I should have said &#8216;has often&#8217; made &#8230; &nbsp;Compare and contrast with Apple who have made no such effort.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765583">
				<div id="div-comment-765583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765583">
			August 31, 2009 at 10:28 pm</a>		</div>

		<p>@davidlmorris: I believe @porter was being complimentary. The implication was that CreateWindow 1.0 had different documented behaviour to CreateWindow 2.0. Thus if your .exe was linked by linker 1.0 it continued to behave as it should.</p>
<p>Windows 1.0 and 2.0 doco is thin on the ground&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765593">
				<div id="div-comment-765593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://twitter.com/davidlmorris' rel='external nofollow' class='url'>davidlmorris</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765593">
			August 31, 2009 at 11:11 pm</a>		</div>

		<p>@steveg &nbsp;Quite right jumped to soon. I take my response to @porter back completely.</p>
<p>Sorry, @porter, clearly have completely miss-read what you had said.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765603">
				<div id="div-comment-765603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765603">
			September 1, 2009 at 4:20 am</a>		</div>

		<p>@davidlmorris</p>
<p>educated guess: Windows certainly won&#8217;t stop supporting existing code out of thin air.</p>
<p>But that does not preclude that it should continue to be expanded with constrained (message number, lParam, wParam) triple. That clearly works only for simplest of cases, and even then it&#8217;s ugly: it&#8217;s e.g. full of casts and implicit contracts that have to be explained in length in MSDN.</p>
<p>Take e.g. EM_GETLINE:</p>
<p>*(LPWORD)lpszBuffer = (WORD)nMaxLength; // Ugh!</p>
<p>return (int)::SendMessage(</p>
<p>&nbsp;m_hWnd,</p>
<p>&nbsp;EM_GETLINE,</p>
<p>&nbsp;nIndex,</p>
<p>&nbsp;(LPARAM)lpszBuffer);</p>
<p>Compare the to a potential</p>
<p>int Edit::GetLine(int nIndex, DWORD dwMaxLen, LPTSTR lpszBuffer)</p>
<p>and a call:</p>
<p>SomeEdit.GetLine(nIndex, nMaxLength, lpszBuffer);</p>
<p>Clearly, there&#8217;s much less to explain in the latter case. Nor is there syntax-induced-cast gibberish to read.</p>
<p>In fact, the bigger question (and perhaps an interesting one), is why was all of Windows UI initially made with (m, l, w) interface at all? It&#8217;s clearly inferior, ease-of-use-wise, to many other approaches.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765613">
				<div id="div-comment-765613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765613">
			September 1, 2009 at 5:07 am</a>		</div>

		<blockquote><p>
  &gt; In fact, the bigger question (and perhaps an interesting one), is why was all of Windows UI initially made with (m, l, w) interface at all? It&#8217;s clearly inferior, ease-of-use-wise, to many other approaches.
</p></blockquote>
<p>You lack a sense of history.</p>
<p>Windows was written back in the days of Microsoft C3.0. The two contemporary systems were Macintosh and XWindows. The windows messaging system is more powerful than the Mac approach, and simpler than Xt Widget writing. It is also a very lean system in memory footprint. It then spawned Presentation Manager which took the window procedure to it&#8217;s logical conclusion making window adornments invidual windows.</p>
<p>C++ is fine for building standalone applications but it&#8217;s appalling to build an operating system out of it, it is too fragile and C++ linkages deserve their own place in hell.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765623">
				<div id="div-comment-765623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765623">
			September 1, 2009 at 6:36 am</a>		</div>

		<p>Of course the nice thing about Windows messages is that it made dynamic subclassing possible. (Remember CTL3D.DLL?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765633">
				<div id="div-comment-765633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GSerg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765633">
			September 1, 2009 at 8:36 am</a>		</div>

		<p>That&#8217;s great, but what&#8217;s going to happen to interprocess calls?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765753">
				<div id="div-comment-765753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765753">
			September 1, 2009 at 1:50 pm</a>		</div>

		<blockquote><p>
  &gt; That&#8217;s great, but what&#8217;s going to happen to interprocess calls?
</p></blockquote>
<p>Out of interest, why do people still need to send arbitrary messages to other proceses&#8217; windows? There are plenty of other IPC mechanisms available.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765803">
				<div id="div-comment-765803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GSerg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765803">
			September 1, 2009 at 8:18 pm</a>		</div>

		<blockquote><p>
  &gt; There are plenty of other IPC mechanisms available.
</p></blockquote>
<p>Indeed, but the other program must support them in the first place. Have you ever had a need to get stuff out of a utility, automatically? A very simple one, does the job and is not concerned about rest of the world, and also is not able to output data the way you want. The data is there, in the textboxes, but you have to send an interprocess message to reach the data.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-765823">
				<div id="div-comment-765823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765823">
			September 1, 2009 at 8:31 pm</a>		</div>

		<blockquote><p>
  &gt; The data is there, in the textboxes, but you have to send an interprocess message to reach the data.
</p></blockquote>
<p>I would hazard that GetWindowText() will be around for a while.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-765853">
				<div id="div-comment-765853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-765853">
			September 2, 2009 at 1:34 am</a>		</div>

		<p>@porter: I would hazard that GetWindowText() will be around for a while.</p>
<p>And doesn&#8217;t GetWindowText internally use Windows messages? It&#8217;s just a prettier front end. You could just do the SendMessage yourself.</p>
<p>Windows messages are the only IPC mechanism guaranteed to be supported by a GUI program.</p>
<p>Heck, maybe during an automated test or something, your controlling test program can use it to blink offending fields when something goes wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-766053">
				<div id="div-comment-766053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-766053">
			September 3, 2009 at 7:35 am</a>		</div>

		<p>@porter:</p>
<p>I don&#8217;t think my example has to do anything with C++ in it&#8217;s essence. Only on the surface, it does. E.g. COM works with straight C, as is well noted in this thread.</p>
<p>You are also mistaken when bashing about C++ linkage. Linkage is not addressed in neither C++ nor C language standards. The fact that &quot;C linkage&quot; (seem to) work better is only due to it&#8217;s constraints and simplicity of C. And even the C linkage isn&#8217;t portable between compilers without agreeing on calling convention and respecting data alignment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-766063">
				<div id="div-comment-766063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-766063">
			September 3, 2009 at 7:56 am</a>		</div>

		<p>@porter:</p>
<p>IIRC, Turbo Vision of Borland, a text-screen-based UI uses simpler, yet more powerful mechanism. Does it predate Windows, I don&#8217;t know, but that could well be.</p>
<p>I maintain that (m, l, w) triple is just silly. E.g.</p>
<p>struct</p>
<p>{</p>
<p>&nbsp;int message;</p>
<p>&nbsp;union</p>
<p>&nbsp;{</p>
<p>&nbsp; &nbsp;int iParam;</p>
<p>&nbsp; &nbsp;unsigned uParam;</p>
<p>&nbsp; &nbsp;void* pParam;</p>
<p>&nbsp;};</p>
<p>}</p>
<p>is more simple, more explicit and more open. Not a lot of thinking is needed to see that right off the bat.</p>
<p>IMO, someone at MS thought, at the time, that WPARAM/LPARAM ought to be enough for everybody ;-)</p>
<div class=post>[<i>Um, your system is just (m, l)! You can do that with (m, l, w); just ignore the w. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-766243">
				<div id="div-comment-766243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-766243">
			September 3, 2009 at 6:04 pm</a>		</div>

		<blockquote><p>
  &gt; ? Do I have to rewrite it as &#8230;.
</p></blockquote>
<p>The marshalling is only when you cross process boundaries. If you have your parent window in a different process, then the answer would have been yes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-766163">
				<div id="div-comment-766163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-766163">
			September 3, 2009 at 1:17 pm</a>		</div>

		<p>&gt;&gt; And even the C linkage isn&#8217;t portable between compilers without agreeing on calling convention and respecting data alignment.</p>
<p>Agreed, which is exactly why platforms have ABIs, Windows has __stdcall and OS/2 had _System.</p>
<p>&gt;&gt; You could just do the SendMessage yourself.</p>
<p>However the SendMessage() mechanism has to mess around knowing what many messages mean and doing appropriate interprocess marshalling. It didn&#8217;t matter on Win16 with a single memory image. It&#8217;s a shame all the marshalling was lumped on SendMessage instead of the specific APIs.</p>
<div class=post>[<i>What &#8220;specific APIs&#8221; are you referring to? I can see the reverse argument: &#8220;Why did Microsoft write the marshalling code *twice* (once for SendMessage and again for the specific API)? That&#8217;s not only a waste of code but it pretty much guarantees that they will gradually fall out of sync.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-766173">
				<div id="div-comment-766173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">porter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-766173">
			September 3, 2009 at 2:08 pm</a>		</div>

		<p>&gt;&gt; Why did Microsoft write the marshalling code *twice* (once for SendMessage and again for the specific API)?</p>
<p>My suggestion is they only wrote marshalling once, for the specific APIs (eg GetWindowText) and not at all in SendMessage. Hence SendMessages job is to send the wParam and lParam parameters to the correct wndproc in the correct thread and return the lresult and that&#8217;s it. However, it&#8217;s all academic now.</p>
<div class=post>[<i>Note that most messages do not have corresponding APIs. So you would have questions like &#8220;How come WM_WININICHANGE marshals but WM_GETTEXT doesn&#8217;t? My 16-bit program just uses SendMessage for everything; now I have to go track down every <code>SendMessage</code> in my program and see if it needs to be changed. And what about this function: </p>
<pre>LRESULT ForwardMessageToParent(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{ return SendMessage(GetParent(hwnd), uMsg, wParam, lParam); }
</pre>
<p>? Do I have to rewrite it as </p>
<pre>LRESULT ForwardMessageToParent(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{ hwnd = GetParent(hwnd);
  switch (uMsg) {
  case WM_GETTEXT: return GetWindowText(hwnd, (PCTSTR)lParam, wParam);
  case WM_SETTEXT: return SetWindowText(hwnd, (PCTSTR)lParam);
  &#8230; /* what other cases do I need? */ &#8230;
  default: return SendMessage(hwnd, uMsg, wParam, lParam);
 }
}</pre>
<p>Screw you Microsoft for making it so hard to port from Win16 to Win32. -Raymond</i>] </div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-766353">
				<div id="div-comment-766353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090831-00/?p=16923#comment-766353">
			September 4, 2009 at 3:02 am</a>		</div>

		<p>@Raymond (&#8220;Um, your system is just (m, l)! You can do that with (m, l, w)&#8221;)</p>
<p>Yes, of course, it&#8217;s certainly nothing smart. I merely wanted to point out that the design could point out more clearly what is the purpose of the second parameter (to hold additional data related to message, be it an integer, or a pointer to whatever). That is the case with l, w, too, but is IMO more obscure. ( If nothing else, e.g. I had trouble remembering that WPARAM was 32, not 16 bits;-) ).</p>
<p>@porter: I don&#8217;t know about OS/2, but my guess is that there is no &#8220;official&#8221; Windows ABI, as you put it ( Raymond, help me out here ;-) ). There is only calling convention and structure data alignment, mandated by the Windows SDK headers, and these are simply consequence of a given C compiler settings. IOW, it&#8217;s about how it&#8217;s compiled, not about how it&#8217;s specified. Even the calling convention is quite accidental: __stdcall (a.k.a pascal) is used because at the time (now, too? don&#8217;t know), x86 instruction &#8220;ret X&#8221;, that is possible with _stdcall (but not with __cdecl), was slightly more efficient, and (perhaps more importantly) because some of the initial Windows code was written with a Pascal compiler.</p>
<div class=post>[<i>There definitely is an ABI (<a href="http://msdn.microsoft.com/en-us/library/ms794533.aspx%22" rel="nofollow">the x64 ABI is even online</a>; it&#8217;s a long, boring document). But it&#8217;s hardly a coincidence that the ABI agrees with the compiler. After all, there isn&#8217;t much value to a compiler that doesn&#8217;t support the ABI! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

