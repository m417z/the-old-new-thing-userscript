<html>
<head>
<title>How do I get the user-customized name of a mapped network drive?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I get the user-customized name of a mapped network drive?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 19, 2015 / year-entry #219</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151019-00/?p=91331</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we displayed the names of This PC and Recycle Bin. This time, we'll look at mapped volumes, because they are a little tricky. When you map a network drive, the name in Explorer defaults to something like sharename (\\server) (Z:). But you can right-click the label, select Rename, and change it to Awesome...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/10/12/10647157.aspx">
Last time</a>, we displayed the names of
This PC
and Recycle Bin.
This time, we'll look at mapped volumes,
because they are a little tricky.
</p>
<p>
When you map a network drive,
the name in Explorer defaults to something like
<i>sharename (\\server) (Z:)</i>.
But you can right-click the label,
select Rename,
and change it to <i>Awesome</i> if you like.
</p>
<p>
Let's try to retrieve the name <i>Awesome</i>.
Take the program from last time and make these changes:
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
  CoInitialize(0);
  <font COLOR=blue>IShellItem* item;
  SHCreateItemFromParsingName(argv[1], nullptr,
                              IID_PPV_ARGS(&amp;item));
  PrintDisplayName(item, SIGDN_NORMALDISPLAY, L"name");
  item-&gt;Release();</font>
  CoUninitialize();
  return 0;
}
</pre>
<p>
This prints the display name of whatever you pass on the command
line.
Let's say that drive Z: is mapped to <code>\\server\sharename</code>.
</p>
<p>
Run the program with the command line parameter <code>Z:</code>,
</p>
<pre>
name = sharename (\\server) (Z:)
</pre>
<p>
Now go to Explorer and rename the drive to <i>Awesome</i>.
Then run the program again with <code>Z:</code> on the command line.
</p>
<pre>
name = Awesome (Z:)
</pre>
<p>
Close. We got the <i>Awesome</i> part,
but the non-awesome drive letter is still there.
That sort of makes sense,
since Explorer also shows the non-awesome drive letter.
</p>
<p>
But what if you really want it without the drive letter?
Well, you can ask for a different kind of display name.
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
  CoInitialize(0);
  IShellItem* item;
  SHCreateItemFromParsingName(argv[1], nullptr,
                              IID_PPV_ARGS(&amp;item));
  PrintDisplayName(item, <font COLOR=blue>SIGDN_PARENTRELATIVEEDITING</font>, L"name");
  item-&gt;Release();
  CoUninitialize();
  return 0;
}
</pre>
<p>
This time, we ask for the parent-relative editing name.
This is the name used by the Rename command when you rename
an item that is displayed relative to its parent.
</p>
<p>
Run the program with <code>Z:</code> on the command line, and see
what happens:
</p>
<pre>
name = Awesome
</pre>
<p>
Awesome.
</p>
<p>
For those who want to do things the classic way,
you can use the <code>SHGDN_<wbr>IN&shy;FOLDER |
SHGDN_<wbr>FOR&shy;EDITING</code> flags.
</p>
<p>
Take the second program (the one that uses the classic style)
and make these changes:
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
  CoInitialize(0);
  <font COLOR=blue>PIDLIST_ABSOLUTE absolute;
  SHParseDisplayName(argv[1], nullptr, &amp;absolute, 0, nullptr);
  PrintDisplayName(absolute, SHGDN_INFOLDER | SHGDN_FOREDITING, L"name");
  CoTaskMemFree(absolute);</font>
  CoUninitialize();
  return 0;
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1197811">
				<div id="div-comment-1197811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151019-00/?p=91331#comment-1197811">
			October 19, 2015 at 8:08 am</a>		</div>

		<p>A link to the previous article would be awesome.</p>
<p>Generally, a better way of navigating this awesome blog&#39;s archive (by series or what) would&#39;ve been awesome.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197801">
				<div id="div-comment-1197801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151019-00/?p=91331#comment-1197801">
			October 19, 2015 at 9:19 am</a>		</div>

		<p>What happened to CCoInitialize? Withdrawn for security issues? :-)</p>
<div class="post">[<em>It lost the dice roll. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197781">
				<div id="div-comment-1197781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151019-00/?p=91331#comment-1197781">
			October 19, 2015 at 1:14 pm</a>		</div>

		<p>@sense</p>
<p>This blog is awesome even as is. You can easily search this site for all the articles that contain PrintDisplayName, as an example, from the search box on the right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197771">
				<div id="div-comment-1197771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151019-00/?p=91331#comment-1197771">
			October 19, 2015 at 2:06 pm</a>		</div>

		<p>It seems inappropriate to advocate using a constant specifically intended for _editing_ to generate a name for _display_.</p>
<p>Kind of like the many innocuous-at-the-time misuses of API that eventually wind up being the topic for other articles on this blog.</p>
<div class="post">[<em>True, but in this case, we don&#39;t want the display name. We want the thing the user customized, via editing. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1197751">
				<div id="div-comment-1197751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151019-00/?p=91331#comment-1197751">
			October 19, 2015 at 7:00 pm</a>		</div>

		<p>Analysis of returning boolean in flags vs register:</p>
<p>If it&#39;s in flags and we want it in register, we do:</p>
<p>&nbsp; mov al, 0</p>
<p>&nbsp; adc al, 0</p>
<p>If it&#39;s in register and we want it in flags, we do:</p>
<p>&nbsp;test al, al</p>
<p>So it turns out flags is a better choice unless moving the boolean to memory happens more than half as often as branching immediately on the return. Looking at the code I write, I&#39;d say it&#39;s weighted about one to one.</p>
<div class="post">[<em>You forgot to count the cost of setting the flag in the function being called. This can get tricky when destructors execute between the &quot;return&quot; statement and the final &quot;ret&quot;. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197671">
				<div id="div-comment-1197671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151019-00/?p=91331#comment-1197671">
			October 20, 2015 at 11:03 am</a>		</div>

		<p>@Joshua: Or sbb ax,ax if non-zero vs zero is all you need. Though I think your comment was intended for another article!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

