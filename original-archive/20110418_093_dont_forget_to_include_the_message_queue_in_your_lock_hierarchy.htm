<html>
<head>
<title>Don't forget to include the message queue in your lock hierarchy</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t forget to include the message queue in your lock hierarchy</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 18, 2011 / year-entry #94</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110418-00/?p=10913</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In addition to the loader lock, the message queue is another resource that people often forget to incorporate into their lock hierarchy. If your code runs on a UI thread, then it implicitly owns the message queue whenever it is running, because messages cannot be dispatched to a thread until it calls a message-retrieval function...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In addition to the loader lock,
the message queue is another resource that people often
forget to incorporate into their lock hierarchy.
If your code runs on a UI thread, then it implicitly owns
the message queue whenever it is running,
because messages cannot be dispatched to a thread until
it calls a message-retrieval function
such as <code>Get&shy;Message</code> or
<code>Peek&shy;Message</code>.
In other words, whenever a thread is not checking for a message,
it cannot receive a message.
</p>
<p>
For example, consider the following code:
</p>
<pre>
EnterCriticalSection(&amp;g_cs);
for (int i = 0; i &lt; 10; i++) {
  SendMessage(hwndLB, LB_ADDSTRING, 0, (LPARAM)strings[i]);
}
LeaveCriticalSection(&amp;g_cs);
</pre>
<p>
If <code>hwndLB</code> belongs to another thread,
then you have a potential deadlock,
because that thread might be waiting for your critical section.
</p>
<pre>
case WM_DOESNTMATTERWHAT:
    EnterCriticalSection(&amp;g_cs);
    ... doesn't matter what goes here ...
    LeaveCriticalSection(&amp;g_cs);
    break;
</pre>
<p>
If you happen to try to send the message while that other
thread is waiting for the critical section,
you will deadlock because you are waiting for that thread
to finish whatever it's doing so it can process the message
you sent to it,
but that thread is waiting for
the critical section which you own.
</p>
<p>
Even if you promise that
<code>hwndLB</code> belongs to your thread,
the possibility of subclassing or window hooks
means that you do not have full control over
what happens when you try to send that message.
A <code>WH_<wbr>CALL&shy;WND&shy;PROC</wbr></code>
window hook may decide to communicate with
another thread (for example, to log the message).
Boom, what you thought was a simple message sent
to a window on your thread turned into a cross-thread
message.
</p>
<p>
There are many actions that generate message traffic
that may not be obvious at first glance because
they don't involve explicitly sending a message.
Invoking a COM method from an STA thread on an object
which belongs to another apartment
requires the call to be marshaled to the thread that hosts
the object.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/21/10131989.aspx">
Tinkering with a window's scroll bars</a>
can result in
the <code>WS_<wbr>HSCROLL</wbr></code>
or <code>WS_<wbr>VSCROLL</wbr></code> style being added or removed,
which in turn generates
<code>WM_<wbr>STYLE&shy;CHANGING</wbr></code> and
<code>WM_<wbr>STYLE&shy;CHANGED</wbr></code> messages.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/08/21/54675.aspx">
Obtaining the text from a window
belonging to another thread in your process</a>
results in synchronous message traffic.
</p>
<p>
A good rule of thumb is basically to avoid anything that
involves windows belonging to other threads while holding
a critical section or other resource.
And even windows which belong to your thread are suspect
(due to hooks and subclassing).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-907883">
				<div id="div-comment-907883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110418-00/?p=10913#comment-907883">
			April 18, 2011 at 7:54 am</a>		</div>

		<p>Better advice is never call an &quot;outside&quot; function while holding a lock. &quot;Outside&quot; meaning something not under your control. Even better don&#39;t call any non-utility functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907963">
				<div id="div-comment-907963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110418-00/?p=10913#comment-907963">
			April 18, 2011 at 1:14 pm</a>		</div>

		<p>Even better: Lock only what you must, iff you must, and no longer than you must.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907973">
				<div id="div-comment-907973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110418-00/?p=10913#comment-907973">
			April 18, 2011 at 1:32 pm</a>		</div>

		<p>All the more reason to use lock-free.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-908093">
				<div id="div-comment-908093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110418-00/?p=10913#comment-908093">
			April 19, 2011 at 3:31 am</a>		</div>

		<p>Perhaps it would suffice to get the text from the &quot;special place&quot; and not send a message, if you know that the window in question doesn&#39;t subclass WM_GET/SETTEXT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-908103">
				<div id="div-comment-908103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110418-00/?p=10913#comment-908103">
			April 19, 2011 at 5:36 am</a>		</div>

		<p>@Alex Grigoriev: That&#39;s solid advice. I&#39;d add to that &quot;While holding a lock, try not to do anything except access the resource that the lock protects&quot;. If you can&#39;t specify exactly what resource your lock is supposed to be protecting &#8211; redesign the code / locking scheme until you can.</p>
<div class="post">[<i>This is far easier to say than to do. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

