<html>
<head>
<title>Why doesn't RealGetWindowClass return the real window class for my superclass?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why doesn&#8217;t RealGetWindowClass return the real window class for my superclass?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 13, 2012 / year-entry #162</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>41</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was reporting that the Real­Get­Window­Class function was not reporting the base window class of their superclass. (Error checking has been elided for expository purposes.) // Get the static window class window procedure WNDCLASS wc; GetClassInfo(NULL, TEXT("static"), &wc); WNDPROC StaticWndProc = wc.lpfnWndProc; // Build our derived class wc.lpfnWndProc = AwesomeWndProc; wc.hInstance = g_hinst; wc.lpszClassName...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was reporting that the
<code>Real&shy;Get&shy;Window&shy;Class</code> function
was not reporting the base window class of their superclass.
(Error checking has been elided for expository purposes.)
</p>
<pre>
// Get the static window class window procedure
WNDCLASS wc;
GetClassInfo(NULL, TEXT("static"), &amp;wc);
WNDPROC StaticWndProc = wc.lpfnWndProc;

// Build our derived class
wc.lpfnWndProc = AwesomeWndProc;
wc.hInstance = g_hinst;
wc.lpszClassName = TEXT("AwesomeWindow");
RegisterClass(&amp;wc);

LRESULT CALLBACK AwesomeWndProc(HWND hwnd, UINT uMsg,
                                WPARAM wParam, LPARAM lParam)
{
    TCHAR szClass[128];
    RealGetWindowClass(hwnd, szClass, 128);
    ASSERT(strcmp(szClass, TEXT("static")) == 0);

    switch (uMsg) { ... }

    return CallWindowProc(StaticWndProc, hwnd, uMsg, wParam, lParam);
}
</pre>
<p>
The customer found that the assertion fails,
returning a window class name of "AwesomeWindow"
instead of "static".
"I thought the point of RealGetWindowClass was to dig
through the superclassing to find the base class.
But it's not returning the base class."
</p>
<p>
That's right, because you haven't told it what the base class is yet!
</p>
<p>
"What do you mean I haven't told it?
It's right there at the end of my function:
<code>CallWindowProc(StaticWndProc)</code>."
</p>
<p>
Yeah, but that line of code hasn't executed yet.
The external behavior of your program is like this:
</p>
<pre>
WNDCLASS wc;
wc.style = (something);
wc.lpfnWndProc = AwesomeWndProc;
wc.cbClsExtra = (something);
wc.cbWndExtra = (something);
wc.hInstance = g_hinst;
wc.hIcon = (something);
wc.hCursor = (something);
wc.hbrBackground = (something);
wc.lpszMenuName = (something);
wc.lpszClassName = TEXT("AwesomeWindow");
RegisterClass(&amp;wc);


LRESULT CALLBACK AwesomeWndProc(HWND hwnd, UINT uMsg,
                                WPARAM wParam, LPARAM lParam)
{
    TCHAR szClass[128];
    RealGetWindowClass(hwnd, szClass, 128);
    ASSERT(strcmp(szClass, TEXT("static")) == 0);

    // ... it doesn't matter what goes here
    // because it hasn't executed yet ...
</pre>
<p>
The window manager isn't clairvoyant.
It doesn't know that <code>AwesomeWndProc</code> is
going to do a
<code>CallWindowProc(StaticWndProc)</code>
in the future.
All it knows is that somebody registered a class,
and then in response to its very first message,
that class asked, "Hey, you're so smart, tell me what my base class is."
</p>
<p>
The window manager says, "Dude, you haven't shown me any base class yet.
So I'm just going to say that you are your own base class."
</p>
<p>
Since anything can go into the "... it doesn't matter what goes here ...",
we can demonstrate that the window manager cannot possibly know what
you're going to pass to <code>CallWindowProc</code> by rewriting it
like this:</p>
<pre>
// Get the static window class window procedure
WNDCLASS wc;
GetClassInfo(NULL, TEXT("static"), &amp;wc);
WNDPROC StaticWndProc = wc.lpfnWndProc;

// Build our class
wc.lpfnWndProc = AwesomeWndProc;
wc.hInstance = g_hinst;
wc.lpszClassName = TEXT("AwesomeWindow");
RegisterClass(&amp;wc);

LRESULT CALLBACK AwesomeWndProc(HWND hwnd, UINT uMsg,
                                WPARAM wParam, LPARAM lParam)
{
    TCHAR szClass[128];
    RealGetWindowClass(hwnd, szClass, 128);
    ASSERT(strcmp(szClass, TEXT("static")) == 0);

    switch (uMsg) { ... }

    <font COLOR=blue>// Psych! You thought that when I asked for StaticWndProc
    // I was going to be a superclass of "static", but in fact
    // I'm just a regular boring window class.
    return DefWindowProc(hwnd, uMsg, wParam, lParam);</font>
}
</pre>
<p>
If you felt really crazy, you could do this:
</p>
<pre>
// Get the button window class procedure
WNDCLASS wcButton;
GetClassInfo(NULL, TEXT("button"), &amp;wcButton);
WNDPROC ButtonWndProc = wcButton.lpfnWndProc;

// Get the static window class window procedure
WNDCLASS wc;
GetClassInfo(NULL, TEXT("static"), &amp;wc);
WNDPROC StaticWndProc = wc.lpfnWndProc;

// Build our class
wc.lpfnWndProc = AwesomeWndProc;
wc.hInstance = g_hinst;
wc.lpszClassName = TEXT("AwesomeWindow");
wc.cbWndExtra = max(wc.cbWndExtra, wcButton.cbWndExtra);
wc.cbClsExtra = max(wc.cbClsExtra, wcButton.cbClsExtra);
RegisterClass(&amp;wc);

LRESULT CALLBACK AwesomeWndProc(HWND hwnd, UINT uMsg,
                                WPARAM wParam, LPARAM lParam)
{
    TCHAR szClass[128];
    RealGetWindowClass(hwnd, szClass, 128);
    ASSERT(strcmp(szClass, TEXT("static")) == 0);

    switch (uMsg) { ... }

    <font COLOR=blue>// Decide at the last moment what we are.
    static WNDPROC BaseClass = nullptr;
    if (BaseClass == nullptr)
    {
        BaseClass = rand() % 2 ? StaticWndProc : ButtonWndProc;
        // Or if you are particularly perverse,
        // BaseClass = <a HREF="http://en.wikipedia.org/wiki/Schr%C3%B6dinger's_cat">radioactive_decay_has_occurred</a>() ?
        //                StaticWndProc : ButtonWndProc;
    }
    return CallWindowProc(BaseClass, hwnd, uMsg, wParam, lParam);</font>
}
</pre>
<p>
Since the code to decide the base class hasn't run yet,
the window manager will have to use
<a HREF="https://blogs.msdn.com/b/oldnewthing/archive/2011/01/31/10122197.aspx">
that time machine that the research division has been working on</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (41)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-997913">
				<div id="div-comment-997913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-997913">
			July 13, 2012 at 7:58 am</a>		</div>

		<p>An even better example: if it says your base class is &quot;static&quot;, do the &quot;boring window class&quot; thing; if it says your base class is not &quot;static&quot;, make it be &quot;static&quot;. Even with a time machine, you cannot make that work. Related to the liar paradox and in particular the halting problem: if you have a magic machine which reads your code and says &quot;it does X&quot;, just call the magic machine and do the opposite of what it said you would do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997923">
				<div id="div-comment-997923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-997923">
			July 13, 2012 at 8:09 am</a>		</div>

		<p>@Cesar: I call this magic function NtTerminateProcess(). It has never yet returned the wrong value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997933">
				<div id="div-comment-997933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-997933">
			July 13, 2012 at 8:18 am</a>		</div>

		<p>@Cesar: I am sitting on a proof that reads in summary:</p>
<p>There exists a set of laws of physics that describe a universe in which a machine can be built that can emulate a Turing machine (infinite tape and all) for which a DoesProgramHalt() function for its own programs is &quot;return true;&quot;.</p>
<p>Ergo, something is wrong with GÃ¶del</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997943">
				<div id="div-comment-997943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-997943">
			July 13, 2012 at 8:28 am</a>		</div>

		<p>@Joshua: There is nothing wrong with Godel, just your understanding of his theory.</p>
<p>The requirement for Godel is that the system cannot be both CONSISTENT and COMPLETE. That is a function</p>
<p>BOOL DoesFunctionReturn(FARPROC fp) { return TRUE; } is COMPLETE, but not CONSISTENT.</p>
<p>BOOL DoesFunctionReturn(FARPROC fp) { NtTerminateProcess(); } is CONSISTENT but not COMPLETE.</p>
<p>Suppose AwesomeDoesFunctionReturn is both CONSISTENT and COMPLETE. Then I construct the godel function to your system:</p>
<p>BOOL GodelPwnsYou() { while(AwesomeDoesFunctionReturn(GodelPwnsYou)); }.</p>
<p>Either AwesomeDoesFunctionReturn is INCOMPLETE (since it refuses to give me an answer) or it is WRONG.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997963">
				<div id="div-comment-997963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-997963">
			July 13, 2012 at 8:41 am</a>		</div>

		<p>There must be an equivalent to Godwin&#39;s law for GÃ¶del: as a discussion on computational impossibilities proceeds, the probability of someone misrepresenting GÃ¶del&#39;s incompleteness theorems approaches 1.</p>
<p>Furthermore, it can be shown that such discussions are incomplete or inconsistent or both.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997973">
				<div id="div-comment-997973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-997973">
			July 13, 2012 at 8:47 am</a>		</div>

		<p>@Matt: Your function returns false. &quot;while(1);&quot; would also have returned false.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-997983">
				<div id="div-comment-997983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-997983">
			July 13, 2012 at 8:57 am</a>		</div>

		<p>@Joshua &#8211;</p>
<p>If AwesomeDoesFunctionReturn(GodelPwnsYou) returns FALSE, then GodelPwnsYou returns immediately &#8211; hence the function is wrong since it should have returned TRUE because the function does return.</p>
<p>If AwesomeDoesFunctionReturn(GodelPwnsYou) returns TRUE, &nbsp;then GodelPwnsYou never returns &#8211; hence the function is wrong since it should have returned FALSE because the function doesn&#39;t return.</p>
<p>Hence, there is a function (GodelPwnsYou) for which AwesomeDoesFunctionReturn cannot ever return a correct value. That&#39;s kind of the whole point of Godel&#39;s incompleteness theorem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-997993">
				<div id="div-comment-997993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JohnQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-997993">
			July 13, 2012 at 9:03 am</a>		</div>

		<p>I can&#39;t really blame the user for being confused. &nbsp;Your original article on this function said that it returns your class&#39;s base class. &nbsp;But window classes don&#39;t really have base classes. &nbsp;The Window manager infers this relationship from the call to CallWindowProc. &nbsp;I&#39;m also curious about your last example. &nbsp;What will RealGetWindowClass return in this case? &nbsp;Will it return a value based on the first call to CallWindowProc or the most recent one? &nbsp;(And no, I won&#39;t write a test program to find out&#8211;I don&#39;t care that much.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998003">
				<div id="div-comment-998003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998003">
			July 13, 2012 at 9:04 am</a>		</div>

		<blockquote><p>
  then GodelPwnsYou never returns
</p></blockquote>
<p>I don&#39;t think you understand. Infinite loops return false.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998013">
				<div id="div-comment-998013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998013">
			July 13, 2012 at 9:16 am</a>		</div>

		<p>If AwesomeDoesFunctionReturn(GodelPwnsYou) returns FALSE, then GodelPwnsYou doesn&#39;t have an infinite loop and GodelPwnsYou returns immediately (follow the function through in your head)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998043">
				<div id="div-comment-998043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JEAC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998043">
			July 13, 2012 at 9:52 am</a>		</div>

		<p>@Joshua</p>
<blockquote><p>
  If AwesomeDoesFunctionReturn(GodelPwnsYou) returns FALSE, then GodelPwnsYou doesn&#39;t have an infinite loop and GodelPwnsYou returns immediately (follow the function through in your head)
</p></blockquote>
<p>In which case, since GodelPwnsYou did manage to return, AwesomeDoesFunctionReturn(GodelPwnsYou) should have returned TRUE not FALSE (it&#39;s checking if the function would return). &nbsp;But if AwesomeDoesFunctionReturn(GodelPwnsYou) returns TRUE, then GodelPwnsYou never returns, so AwesomeDoesFunctionReturn(GodelPwnsYou) should have returned FALSE, in which case&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998053">
				<div id="div-comment-998053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mlzg4_4000_yahoo.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>mlzg4@yahoo.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998053">
			July 13, 2012 at 9:58 am</a>		</div>

		<p>Infinite loops don&#39;t return false. &nbsp;They just don&#39;t return.</p>
<p>@Matt your quip &quot;I call this magic function NtTerminateProcess(). It has never yet returned the wrong value.&quot; was very clever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998063">
				<div id="div-comment-998063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998063">
			July 13, 2012 at 10:06 am</a>		</div>

		<p>@JEAC: It is not physically possible to write a loop that does not return on this architecture due to time contraction. Remember it begins &quot;There exists a set of laws of physics&#8230;&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998073">
				<div id="div-comment-998073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JEAC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998073">
			July 13, 2012 at 10:14 am</a>		</div>

		<p>@Joshua</p>
<p>There is nothing even in our own laws of physics that guarantees an &quot;end of time&quot; situation. &nbsp;Going beyond that, &quot;return&quot; is a different concept to &quot;computer dissociates into dust&quot; or &quot;power fails&quot;; in any such situation, the function has not &quot;returned&quot;.</p>
<p>So it is extremely easy to write a loop that does not return.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998083">
				<div id="div-comment-998083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998083">
			July 13, 2012 at 10:22 am</a>		</div>

		<p>@JEAC: Since when was the current set of laws of physics listed as an assumption in GÃ¶del&#39;s work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998093">
				<div id="div-comment-998093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998093">
			July 13, 2012 at 10:50 am</a>		</div>

		<p>@Joshua</p>
<blockquote><p>
  Remember it begins &quot;There exists a set of laws of physics&#8230;&quot;
</p></blockquote>
<p>Your &quot;Turing machine&quot; isn&#39;t a real Turing machine, though. As a Turing machine can compute partial functions, the set of functions which can be computed by your machine is a strict subset of Turing-computable functions.</p>
<p>To put it another way: A requirement for GÃ¶del&#39;s theorem that a system cannot be both consistent and complete is that the system has to be of a certain complexity, namely being able to express arithmetic. Likewise, your system is not complex enough to simulate a Turing machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998103">
				<div id="div-comment-998103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998103">
			July 13, 2012 at 12:27 pm</a>		</div>

		<p>@AC: My construct is a Turing machine mounted inside a time-compressed region of space and given the ability as a primitive operation to construct more like it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998113">
				<div id="div-comment-998113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998113">
			July 13, 2012 at 12:48 pm</a>		</div>

		<p>Can someone elaborate on what mechanism RealGetWindowClass uses to determine the base class?</p>
<p>I&#39;ve read the MSDN description and Raymond&#39;s earlier post about this function, but I still have no idea how it would work. &nbsp;I could imagine that a special query message is passed to the window, which propagates up through the base classes and that the common Windows controls know to respond with their own types, but that wouldn&#39;t explain how a custom window class that merely calls DefWindowProc would be detected.</p>
<div class="post">[<i>Um, see today&#39;s article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998123">
				<div id="div-comment-998123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998123">
			July 13, 2012 at 3:56 pm</a>		</div>

		<p>What I learnt today, there is a universe where</p>
<p>bool fun(){while(1){}return false;}</p>
<p>actually returns. Reality is vast and scary.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-998133">
				<div id="div-comment-998133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998133">
			July 13, 2012 at 5:54 pm</a>		</div>

		<p>FYI: <a rel="nofollow" target="_new" href="http://forums.wincustomize.com/3258" rel="nofollow">forums.wincustomize.com/3258</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-998143">
				<div id="div-comment-998143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998143">
			July 13, 2012 at 5:55 pm</a>		</div>

		<p>For more technical details.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998153">
				<div id="div-comment-998153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998153">
			July 13, 2012 at 7:08 pm</a>		</div>

		<p>I&#39;m so glad I don&#39;t do any Win32 programming any more. &nbsp;All this window class craziness&#8230; &nbsp;just a thing of the past&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998163">
				<div id="div-comment-998163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998163">
			July 14, 2012 at 3:54 am</a>		</div>

		<p>@Matt I recently discovered a PC on which two competing sets of anti-virus software were installed simultaneously. On such a PC, NtTerminateProcess incorrectly returns ERROR_SUCCESS. I was hoping to get the PC into a state where NtTerminateProcess didn&#39;t return but Task Manager wouldn&#39;t let me attempt to terminate csrss.exe and now the PC is basically paralysed and will need to be physically restarted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998173">
				<div id="div-comment-998173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998173">
			July 14, 2012 at 7:00 am</a>		</div>

		<p>i do not understand why that function would be necessary. does some service in windows need this to detect edit controls or something for accessibility?</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/12/31/10110524.aspx" rel="nofollow">Explained two years ago</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998183">
				<div id="div-comment-998183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jeronimo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998183">
			July 14, 2012 at 7:27 am</a>		</div>

		<p>I found all that text to look like garbage</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998193">
				<div id="div-comment-998193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998193">
			July 14, 2012 at 10:24 am</a>		</div>

		<p>@Joshua Since a Turing Machine has to have an infinite tape by definition, how would that fit together with your definition of the universe? If the &quot;turing machine&quot; is only physically able to read a finite number of tape states I&#39;m pretty sure that violates its definition. If it can read infinitely many states from the tape &#8211; how exactly could such a program ever return?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998203">
				<div id="div-comment-998203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998203">
			July 14, 2012 at 9:05 pm</a>		</div>

		<p>If your laws of physics don&#39;t allow for an infinite loop for *whatever* reason, they&#39;re not Turing-complete. &nbsp;Don&#39;t tell me that it&#39;s an infinite loop for one set of purposes, but not an infinite loop for another. &nbsp;Either it is or it isn&#39;t. &nbsp;If we&#39;re working within this &quot;time compressed field&quot; or whatever it is, fine, GodelPwnsYou does, in fact, pwn you. &nbsp;If we&#39;re working outside this field, it&#39;s not Turing complete. &nbsp;Pick one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998213">
				<div id="div-comment-998213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">#INF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998213">
			July 15, 2012 at 5:21 am</a>		</div>

		<p>I find the conclusion of infinity hard to understand. Some mathematicians don&#39;t help much either from a tl;dl perspective, other than to describe the idea. <a rel="nofollow" target="_new" href="http://video.ias.edu/The-Mathematical-Infinity" rel="nofollow">video.ias.edu/The-Mathematical-Infinity</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998223">
				<div id="div-comment-998223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">getchar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998223">
			July 15, 2012 at 5:26 am</a>		</div>

		<p>As soon as you depend on user input, it usually undecidable if the function returns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 odd alt thread-odd thread-alt depth-1" id="comment-998233">
				<div id="div-comment-998233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998233">
			July 15, 2012 at 2:30 pm</a>		</div>

		<p>@Joshua: Obeying the known laws of physics are pretty much an unspoken assumption in every (non theoretical physics) theory.</p>
<p>Since there could exist a universe in which the laws of physics were such that the state of every atom at all points in time is entirely deterministic, there therefore exists a possible set of the laws of physics in which the halting problem is fundamentally solvable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998243">
				<div id="div-comment-998243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998243">
			July 15, 2012 at 6:22 pm</a>		</div>

		<p>&quot;Since the code to decide the base class hasn&#39;t run yet, the window manager will have to use that time machine that the research division has been working on.&quot;&lt;/quote&gt;</p>
<p>Hey Ray, I thought you made it clear, very clear actually &#8211; your research division is working on a time machine that would be used to go into past only. Now you tell us they are working on another time machine that can go into future?</p>
<div class="post">[<i>Their time machine will <a href="http://www.wired.com/business/2010/05/video-microsoft-attempts-to-predict-the-future/" rel="nofollow">predict the future</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998253">
				<div id="div-comment-998253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998253">
			July 15, 2012 at 9:06 pm</a>		</div>

		<p>@Danny, would *you* want to be stuck in the 80&#39;s? &#39;Nuff said! ;-)</p>
<p>Seriously, I had never considered writing a window procedure that could call different base classes, but there are a couple of times that it could be useful (dynamic loading/plug-ins and back compat being two that come to mind right away).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-998273">
				<div id="div-comment-998273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998273">
			July 16, 2012 at 7:42 am</a>		</div>

		<blockquote><p>
  therefore exists a possible set of the laws of physics in which the halting problem is fundamentally solvable
</p></blockquote>
<p>Halting theorem doesn&#39;t rely on the laws of physics.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998283">
				<div id="div-comment-998283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998283">
			July 16, 2012 at 8:24 am</a>		</div>

		<p>@INF: What&#39;s after the infinite loop doesn&#39;t execute. The machine&#39;s calling convention wraps functions in a time-compressed field and failure to return (which can be done by finite timer on the outside) is translated into return false.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andycadley2 even thread-even depth-1" id="comment-998383">
				<div id="div-comment-998383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998383">
			July 16, 2012 at 11:51 am</a>		</div>

		<p>@Alegr1: Halting theorem doesn&#39;t rely on the laws of physics.</p>
<p>It assumes cause leads to effect, which is a result of the laws of physics. If you can redefine the laws such that cause and effect are unrelated, you can solve the halting problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998433">
				<div id="div-comment-998433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@AndyCadley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998433">
			July 16, 2012 at 1:42 pm</a>		</div>

		<p>No it doesn&#39;t. I suggest you read Matt&#39;s function above. It doesn&#39;t rely on cause and effect &#8211; it conditionally relies on your function and chooses its behaviour to be the opposite behaviour that your function predicted &#8211; hence forcing your function to be wrong.</p>
<p>The Halting Theorem is independent of causality, the universe, time-constraints and quantum uncertainty, it merely requires a formal logic that allows recursion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998443">
				<div id="div-comment-998443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998443">
			July 16, 2012 at 1:45 pm</a>		</div>

		<p>@Joshua</p>
<p>What infinite loop? GodelPwnsYou has a conditional loop. It doesn&#39;t have an infinite loop. The conditional loop just happens to be taken every time if your function thinks GodelPwnsYou will terminate you, and is never taken if your function thinks GodelPwnsYou will infinitely loop.</p>
<p>Hence, whatever your functions is, and whatever it decides about GodelPwnsYous&#39; decidability, I can construct a function where your function is wrong about GodelPwnsYou.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998463">
				<div id="div-comment-998463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998463">
			July 16, 2012 at 3:16 pm</a>		</div>

		<p>@Crescens2k: Not only is there such a scary universe, it is compliant with the C++11 Standard. &nbsp;Section 1.10p24: &quot;The implementation may assume that any thread will eventually do one of the following:</p>
<p>â &nbsp;terminate,</p>
<p>â &nbsp;make a call to a library I/O function,</p>
<p>â &nbsp;access or modify a volatile object, or</p>
<p>â &nbsp;perform a synchronization operation or an atomic operation.</p>
<p>[ Note: &nbsp;This is intended to allow compiler transformations such as removal of empty loops, even when termination cannot be proven. &nbsp;â end note ]&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-998473">
				<div id="div-comment-998473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998473">
			July 16, 2012 at 3:41 pm</a>		</div>

		<blockquote><p>
  If you can redefine the laws such that cause and effect are unrelated, you can solve the halting problem.
</p></blockquote>
<p>I though that cause and effect are related by definition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-998673">
				<div id="div-comment-998673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998673">
			July 17, 2012 at 8:36 am</a>		</div>

		<p>@alegrl: They are, but cause before effect is not true by definition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-998783">
				<div id="div-comment-998783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120713-00/?p=7133#comment-998783">
			July 17, 2012 at 1:03 pm</a>		</div>

		<p>@Yuhong Bao: &nbsp;Thanks for that link. &nbsp;It answered my questions.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

