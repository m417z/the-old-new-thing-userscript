<html>
<head>
<title>The implementation of iterators in C# and its consequences (part 2)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The implementation of iterators in C# and its consequences (part 2)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 13, 2008 / year-entry #272</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>49</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Now that you have the basic idea behind iterators under your belt, you can already answer some questions on iterator usage. Here's a scenario based on actual events: I have an iterator that is rather long and complicated, so I'd like to refactor it. For illustrative purposes, let's say that the enumerator counts from 1...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Now that you have
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/08/12/8849519.aspx">
the basic idea behind iterators</a>
under your belt, you can already answer some questions
on iterator usage.
Here's a scenario based on actual events:
</p>
<blockquote CLASS=m>
<p>
I have an iterator that is rather long and complicated,
so I'd like to refactor it.
For illustrative purposes, let's say that the enumerator
counts from 1 to 100 twice.
(In real life, of course, the iterator will not be this simple.)
</p>
<pre>
IEnumerable&lt;int&gt; CountTo100Twice()
{
 int i;
 for (i = 1; i &lt;= 100; i++) {
  yield return i;
 }
 for (i = 1; i &lt;= 100; i++) {
  yield return i;
 }
}
</pre>
<p>
As we learned in
Programming&nbsp;<a HREF="http://en.wikipedia.org/wiki/101_%28number%29">101</a>,
we can pull common code into a subroutine and call the subroutine.
But when I do this, I get a compiler error:
</p>
<pre>
IEnumerable&lt;int&gt; CountTo100Twice()
{
 CountTo100();
 CountTo100();
}

void CountTo100()
{
 int i;
 for (i = 1; i &lt;= 100; i++) {
  yield return i;
 }
}
</pre>
<p>
What am I doing wrong?
How can I move the "count to 100" into a subroutine
and call it twice from the <code>CountTo100Twice</code> function?
</p>
</blockquote>
<p>
As we saw last time,
iterators are not coroutines.
The technique above would have worked great 
had we
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/12/31/344799.aspx">
built iterators out of, say, fibers</a>
instead of building them out of state machines.
As state machines, all <code>yield return</code> statements
must occur at the "top level".
So how do you iterate with the help of subroutines?
</p>
<p>
You make the subroutine its own iterator
and suck the results out from the main function:
</p>
<pre>
IEnumerable&lt;int&gt; CountTo100Twice()
{
 foreach (int i in CountTo100()) yield return i;
 foreach (int i in CountTo100()) yield return i;
}

IEnumerable&lt;int&gt; CountTo100()
{
 for (i = 1; i &lt;= 100; i++) {
  yield return i;
 }
}
</pre>
<p>
<b>Exercise</b>:
Consider the following fragment:
</p>
<pre>
 foreach (int i in CountTo100Twice()) {
  ...
 }
</pre>
<p>
Explain what happens on the 150th call to
<code>MoveNext()</code> in the above loop.
Discuss its consequences for recursive enumerators
(such as tree traversal).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (49)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-656663">
				<div id="div-comment-656663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656663">
			August 13, 2008 at 10:26 am</a>		</div>

		<p>Am I alone in thinking that CLR week sucks?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656693">
				<div id="div-comment-656693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656693">
			August 13, 2008 at 11:00 am</a>		</div>

		<p>If you think CLR week sucks, go somewhere else for a week. It&#8217;s Raymond&#8217;s blog, he gets to choose his own comments.</p>
<p>&quot;Gee, Raymond, I don&#8217;t like the brand of free ice cream you&#8217;re serving! &nbsp;You should give me what I like!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656703">
				<div id="div-comment-656703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656703">
			August 13, 2008 at 11:21 am</a>		</div>

		<p>John: most likely, but who cares?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-656723">
				<div id="div-comment-656723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656723">
			August 13, 2008 at 11:47 am</a>		</div>

		<p>Since I don&#8217;t do much CLR type things, I&#8217;ve got to ask: where are anonymous functions and iterators used/useful ?</p>
<p>C++/STL iterators are handy, but in my experience I&#8217;ve never had the need to write one. The ones Raymond has show here don&#8217;t fit the C++/STL iterator pattern, so I&#8217;m more left to wonder why someone would need it and what it would be used for (aside from &quot;it&#8217;s neat!&quot;).</p>
<p>Can anyone fill in the blanks (CLR haters excused from answering this..)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656733">
				<div id="div-comment-656733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq naq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656733">
			August 13, 2008 at 12:16 pm</a>		</div>

		<p>Everybody who criticizes NET week should instead of sharing their comprehension problems with us put on their thinking caps and read and reread Raymond&#8217;s posts and think very, very hard until something happens.</p>
<p>That&#8217;s because the quality of Raymond&#8217;s NET posts is unbelievably high compared to almost any other material you are about to encounter on the web, no matter in which programming language the topic is presented! The material presented IS in fact of universal value, but you have to understand it first. If you manage to understand, you&#8217;ll be immensely better programmer. And then you&#8217;ll also agree with my claims.</p>
<p>I don&#8217;t use C# but I can&#8217;t express enough how thankful I am to Raymond for these posts. Thanks Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656743">
				<div id="div-comment-656743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656743">
			August 13, 2008 at 12:17 pm</a>		</div>

		<p>Nathan: iterators, anonymous functions, and anonymous types, are all extremely useful with LINQ, which is awesome and everyone should make an effort to learn as soon as possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656753">
				<div id="div-comment-656753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">weird examples ahead!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656753">
			August 13, 2008 at 12:30 pm</a>		</div>

		<p>@Nathan:</p>
<p>anonymous delegates are very useful everytime you need a very short delegate since they improve readability of code.</p>
<p>For example the Sort method might accept a delegate with the comparing function and it&#8217;s both shorter and more readable to have it inline; another example are BeginInvokes or SynchronizationContexts which are in practice ways to use the messaging facitilites to execute code in the UI thread &#8211; you can pass the code inline using an anonymous delegate instead of having a separate one.</p>
<p>Iterators are unbeliavably useful.. when you get used to them you can&#8217;t go back.</p>
<p>You can create easy to navigate views on your data structures, filters and much more.</p>
<p>For example:</p>
<p>List&lt;Entry&gt; m_AddressBook1 = &#8230;;</p>
<p>List&lt;Entry2&gt; m_AddressBook2 = &#8230;;</p>
<p>IEnumerable&lt;Entry&gt; GetAddressBooksFilteredBySomeWeirdMethodology()</p>
<p>{</p>
<p>&nbsp; foreach(Entry E in m_AddressBook1)</p>
<p>&nbsp; &nbsp; if (Whatever(E)) yield return E;</p>
<p>&nbsp; foreach(Entry2 E in m_AddressBook2)</p>
<p>&nbsp; &nbsp; if (Whatever(E)) yield return Entry2ToEntry(E);</p>
<p>}</p>
<p>GetAddressBooksFilteredBySomeWeirdMethodology() returns both address books combined, with conversion of the second addressbook format on the fly, of only items matching some weird criterion. Without copying any memory around and you can navigate the result with a simple</p>
<p>foreach(Entry E in GetAddressBooksFilteredBySomeWeirdMethodology())</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656763">
				<div id="div-comment-656763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Baker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656763">
			August 13, 2008 at 12:41 pm</a>		</div>

		<p>I&#8217;ve never used .NET, and only done a littl ebit of Win32. I develop for linux at work, and use a Mac (mostly just for web browsing) at home. And I find almost everything Raymond writes about interesting, including the C# stuff this week.</p>
<p>If you&#8217;re a programmer, and you don&#8217;t think what Raymond writes about is relevant to what you do, you&#8217;re probably not a very good one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert even thread-even depth-1" id="comment-656773">
				<div id="div-comment-656773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656773">
			August 13, 2008 at 1:28 pm</a>		</div>

		<p>To return to the subject at hand&#8230;</p>
<p>We could fix the issue Raymond alludes to by implementing a new syntax which allows you to</p>
<p>&quot;yield foreach CountTo100()&quot;.</p>
<p>The compiler could generate efficient code which does not run into the problem. We could make this work even with complex iterators on recursive data structures.</p>
<p>We know that in both principle and practice it is possible to build a compiler which does this because someone has:</p>
<p><a rel="nofollow" target="_new" href="http://citeseer.ist.psu.edu/cache/papers/cs2/355/http:zSzzSzwww.cs.kuleuven.ac.bezSz~frankzSzPAPERSzSzFTfJP2005.pdf/iterators-revisited-proof-rules.pdf" rel="nofollow">http://citeseer.ist.psu.edu/cache/papers/cs2/355/http:zSzzSzwww.cs.kuleuven.ac.bezSz~frankzSzPAPERSzSzFTfJP2005.pdf/iterators-revisited-proof-rules.pdf</a></p>
<p>However, this has never been a high enough priority to make it into the C# language. I would very much like it to be in the future, but I would not get my hopes up too high if I were you.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656783">
				<div id="div-comment-656783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jprl.com/' rel='external nofollow' class='url'>Jonathan Pryor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656783">
			August 13, 2008 at 1:35 pm</a>		</div>

		<p>As an alternative to having two <code>foreach</code> loops within CountTo100Twice(), you could instead use the .Concat() extension method [0]</p>
<p>IEnumerable&lt;int&gt; CountTo100Twice()</p>
<p>{</p>
<p>&nbsp;return CountTo100().Concat(CountTo100());</p>
<p>}</p>
<p>The only problem with .Concat() is that it&#8217;s limited to combining only two lists, though it&#8217;s ~trivial to write a verion of .Concat() that handles more [1].</p>
<ul>
<li>Jon</li>
</ul>
<p>[0] <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/bb302894.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/bb302894.aspx</a></p>
<p>[1] <a rel="nofollow" target="_new" href="http://anonsvn.mono-project.com/source/branches/rocks-playground/Mono.Rocks/IEnumerable.cs" rel="nofollow">http://anonsvn.mono-project.com/source/branches/rocks-playground/Mono.Rocks/IEnumerable.cs</a></p>
<p>Search for &quot;Concat&lt;TSource&gt;&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656793">
				<div id="div-comment-656793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://projectdream.org' rel='external nofollow' class='url'>Lukas Beeler</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656793">
			August 13, 2008 at 1:43 pm</a>		</div>

		<p>I&#8217;m mostly a system administratos, and while there&#8217;s a lot of content on this blog that i don&#8217;t understand at all, there&#8217;s still so much useful information to be found here even for nonprogrammers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656803">
				<div id="div-comment-656803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656803">
			August 13, 2008 at 2:12 pm</a>		</div>

		<p>@John: &quot;Am I alone in thinking that CLR week sucks?&quot;</p>
<p>Yes, you&#8217;re alone. You&#8217;re also alone in having too low an IQ to see where Raymond&#8217;s posts are educational whether you like or use C# or not.</p>
<p>Find somewhere else to spend your time, please.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656813">
				<div id="div-comment-656813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Palladinos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656813">
			August 13, 2008 at 2:16 pm</a>		</div>

		<p>One typo</p>
<p>IEnumerable&lt;int&gt; CountTo100()</p>
<p>{</p>
<p>// should be &#8220;for&#8221;</p>
<p>foreach (i = 1; i &lt;= 100; i++){</p>
<p>&nbsp;yield return i;</p>
<p>}</p>
<p>}</p>
<div class=post>[<i>Fixed. Thanks. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656823">
				<div id="div-comment-656823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Grumpy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656823">
			August 13, 2008 at 2:29 pm</a>		</div>

		<blockquote><p>
  Am I alone in thinking that CLR week sucks?
</p></blockquote>
<p>God, where do you people come from? &nbsp;Go whine at someone else.</p>
<p>You don&#8217;t like what&#8217;s here? &nbsp;Go bore someone else with your whining.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656833">
				<div id="div-comment-656833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Palladinos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656833">
			August 13, 2008 at 2:36 pm</a>		</div>

		<p>I believe that in F# you can write</p>
<p>seq {</p>
<p>&nbsp; yield! CountTo100()</p>
<p>}</p>
<p>Raymond keep up the good work</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656843">
				<div id="div-comment-656843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">alex.r.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656843">
			August 13, 2008 at 2:51 pm</a>		</div>

		<p>Nathan:</p>
<p>Most people never had to write their own &nbsp;STL iterators mainly because it&#8217;s really the last thing you want to do given the complexity it involves. It seems that STL iterators were meant to be easy to use but hard to build.</p>
<p>Things don&#8217;t have to be that way.</p>
<p>An example : you might have some file containing a list of serialized objects. By building an iterator that parses each record and outputs the de-serialized objects one at a time, you can use the same functions to do operations on an in-memory list of these objects and the serialized representation.</p>
<p>You&#8217;d probably do this anyway by re-implementing the general idea of the iterator in your program &#8212; the fact that there&#8217;s a built-in mechanism for it is just nice.</p>
<p>In the same way, anonymous methods are nothing more than a convenience really. They favor a certain program style that is not necessarily bad in itself but would be too &#8216;messy&#8217; to be practical without them.</p>
<p>For example, some people prefer not to use std::foreach because you have to separate the looping from what you&#8217;re actually doing in the loop. With anonymous functions you wouldn&#8217;t have to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656873">
				<div id="div-comment-656873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Colascione</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656873">
			August 13, 2008 at 3:45 pm</a>		</div>

		<p>alex.r, boost has a bunch of utilities to make iterators much easier to build.</p>
<p>Also, I haven&#8217;t used C# iterators, but I do use the Python equivalents quite often. Generally, I don&#8217;t try to make them recursive, as in Raymond&#8217;s example. Instead, if I need to walk some tree structure, I just write the walk with an explicit stack inside the iterator. (Which also makes it simple to change the walk to a breadth-first one.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656883">
				<div id="div-comment-656883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656883">
			August 13, 2008 at 4:49 pm</a>		</div>

		<p>The VB team has recognized this limitation and has proposed an alternate syntax for iterators.</p>
<p>Function CountTo100Twice() As IEnumerable&lt;int&gt;</p>
<pre><code>Dim Count100 = Iterator

    For i = 1 to 100

        Return i

    Next

End Iterator

Return Iterator

    Return Each CountTo100()

    Return Each CountTo100()

End Return
</code></pre>
<p>End Function</p>
<p>This function creates two anonymous iterators.</p>
<p>The first is assigned to CountTo100.</p>
<p>The second, which is returned, iterates through each item in CountTo100 (Return Each), and then of course does it again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656893">
				<div id="div-comment-656893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656893">
			August 13, 2008 at 5:21 pm</a>		</div>

		<p>You mentioned fibres and coroutines. You could also use continuations to implement this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656913">
				<div id="div-comment-656913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656913">
			August 13, 2008 at 5:51 pm</a>		</div>

		<p>Robert:&gt; You mentioned fibres and coroutines. You could also use continuations to implement this.</p>
<p>Yes! &nbsp;That should be the NEXT BIG FEATURE of .NET &#8212; &quot;call-with-current-continuation&quot;! &nbsp;Is foreach not good enough for you? &nbsp;Are you tired of writing your tree traversal algorithms recursively? &nbsp;With &quot;call/cc&quot;, now you can have the spaghetti code you&#8217;ve always dreamed of, and still manage to look like a programming master to the maintainer of your code 50 years from now!</p>
<p>Sarcasm aside, I would certainly love to have this Scheme feature in some .NET language. &nbsp;While it will probably never happen (does anyone actually use call/cc, other than Scheme implementors?), it would certainly help show that .NET has arrived as a system for programming language research, as well as a boring but practical app development system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656923">
				<div id="div-comment-656923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Christian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656923">
			August 13, 2008 at 7:56 pm</a>		</div>

		<p>Raymond picked the most interessting thing about iterators in C# 2.0. These two blog posts were STRAIGT to the point and absolutely excellent.</p>
<p>Not some &quot;how to&quot;, but directly how it works!</p>
<p>I had to use Reflector back then to figure out how they work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656943">
				<div id="div-comment-656943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656943">
			August 13, 2008 at 8:05 pm</a>		</div>

		<p>Michael + Robert</p>
<p>I think (hope?) you&#8217;re joking&#8230; A programming jedi always chooses languages that use { and }. A programming sith choose languages with ( ).</p>
<p>Ewoks choose VB (don&#8217;t be angry, you&#8217;re cute).</p>
<p>For those of you too lazy to google:</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Call-with-current-continuation" rel="nofollow">http://en.wikipedia.org/wiki/Call-with-current-continuation</a>.</p>
<p>I like C#&#8217;s simplicity&#8230; I did a lot of C++ STL programming and never really liked the library. Too many of its design decisions favoured performance over readability and it always reeked of an academic provenance. And the error messages&#8230; you know something&#8217;s wrong with a language when the error message fills the screen.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656963">
				<div id="div-comment-656963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.deltics.co.nz/blog' rel='external nofollow' class='url'>Jolyon Smith</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656963">
			August 13, 2008 at 8:25 pm</a>		</div>

		<p>A very useful series of posts.</p>
<p>They are demonstrating very nicely what a waste of time a lot of so called &quot;language improvements&quot; (especially those that the .NET camp smugly call their own, whilst sneering at unmanaged languages that have to be more explicit to achieve the same thing) can lead to.</p>
<p>by removing the details of how some piece of code works SO FAR from the way that code is expressed, the potential for unanticipated side-effects is increased and huge impediments introduce to being able to identify the causes of, and resolutions to, those side-effects.</p>
<p>So for the occasional trivial use, where you save a few scant seconds by using these oh-so-clever language features, you pay a huge price in hours/days spent scratching your head trying to figure out how some piece of code that you think you understand but clearly don&#8217;t (because you don&#8217;t have a compiler embedded in your brain).</p>
<p>I am not some luddite who believes we should all be using assembler, but I do believe there is a PRACTICAL limit to how high a high level language should go.</p>
<p>Pressure suits and oxygen masks shouldn&#8217;t be required.</p>
<p>Keep It Simple, doesn&#8217;t necessarily mean &quot;make it so we can write as little code as possible&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-656973">
				<div id="div-comment-656973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wolf Logan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656973">
			August 13, 2008 at 9:24 pm</a>		</div>

		<p>@Jolyon Smith</p>
<p>That practical limit is your ability to hold onto the concepts expressed in a particular piece of code in a particular language. I for one find nothing complicated or abstruse about C#3, and save more than &quot;a few scant seconds&quot; with &quot;occasional trivial use&quot; of its many &quot;language improvements&quot;. Rather, my livelihood is based on making very good use of them to simplify not only the lines of code I type, but the ability of those after me to understand and maintain that code.</p>
<p>I have difficulty following some types of monadic functional code in certain languages. Should I then declare that such things are stratospheric and baroque, and then deride those that use them? No. Instead I recognise that code written in that style has value, and that I as a professional programmer have some work to do to improve my skills.</p>
<p>Compared to the languages that we were programming in twenty years ago, modern languages (even those without &quot;language improvements&quot;) are dramatically more abstract and removed from implementation. There&#8217;s no reason to believe that we&#8217;re somehow in programming&#8217;s &quot;golden age&quot; with languages that are at the pinnacle of perfection with regards to abstraction, and that any further refinement is just architecture astronautics.</p>
<p>I for one welcome our new abstraction overlords.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-656993">
				<div id="div-comment-656993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.vb6andvista.org' rel='external nofollow' class='url'>Kevin Provance</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-656993">
			August 14, 2008 at 2:04 am</a>		</div>

		<p>Someone suggested instead of complaining about CLR/.NET I should state my reasons why?</p>
<p>Here they are: &nbsp;The concept was stolen from the original VB Classic team and mutilated. &nbsp;The folks who currently develop it have no idea of the true VB history and what it represents&#8230;and in the process M$ declared VB6 dead and not work saving&#8230;even tho we could not move our code assets to .NET without a rewrite. &nbsp;There is a word for that, but as this is a PG-13 blog, I&#8217;ll keep it to myself. &nbsp;WHy build another layer (.NET) ontop of the WIn32 and makes our lives even more complicated. &nbsp;Does someone really think this is an advantage? &nbsp;It isn&#8217;t. &nbsp;With VB6 I had ample control over what kind of code I could write and how to hack it to make VB do col things it was never meant to do. &nbsp;I can&#8217;t do this in .NET because it&#8217;s either do it M$&#8217;s way via the framework, so go use Delphi. &nbsp;I chose the latter, mostly because I don&#8217;t trust MS to screw us developers again when they get tired of .NET and want to do .ORG where nothing is backwards compatible, we can only write the code MS wants us to and only have it work on the latest OS (and if it&#8217;s like Vista (which I do like) which many do not&#8230;it&#8217;s yet more bullets in the foot if MSFT. &nbsp;Don&#8217;t they have pain receptors to keep them from making the same mistakes over and over again, or will they just slowly bleed to death until they are dead.</p>
<p>One has to wonder.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657003">
				<div id="div-comment-657003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MichaelGG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657003">
			August 14, 2008 at 3:03 am</a>		</div>

		<p>@Nick I came here for that :)</p>
<p>#light</p>
<p>open System</p>
<p>let countTo100 = { 1..100 }</p>
<p>let countTo100Twice = {</p>
<p>&nbsp; &nbsp;yield! countTo100</p>
<p>&nbsp; &nbsp;yield! countTo100 }</p>
<p>@Wolf Logan: Exactly. Once you learn and grasp a concept, its yours to reuse anytime you need it &#8211; it&#8217;s a one time payment. If you don&#8217;t learn the concept, you have to pay every single time you run into that problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657013">
				<div id="div-comment-657013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.timebeforeday.com' rel='external nofollow' class='url'>Luk Vermeulen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657013">
			August 14, 2008 at 3:07 am</a>		</div>

		<p>@Nathan:</p>
<p>Iterators (writing my own) have been very useful to me in various API wrapping situations: writing an iterator around an accounting system SDK isn&#8217;t hard, but makes life so much easier for the people using your wrappers.</p>
<p>I haven&#8217;t had much need for anonymous delegates so far, but have been nice in cases of small IDisposable utility classes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657033">
				<div id="div-comment-657033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Palladinos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657033">
			August 14, 2008 at 4:58 am</a>		</div>

		<p>@MichaelGG</p>
<p>:) F# is the elite language for .Net</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657043">
				<div id="div-comment-657043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MichaelGG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657043">
			August 14, 2008 at 5:19 am</a>		</div>

		<p>@Nathan, anonymous methods can replace objects.</p>
<p>For a cheap example, let&#8217;s say we have some method &quot;SanitizeWords&quot; that takes a callback of (string -&gt; string). Taking a callback ensures the consumer of this method can customize the behaviour easily.</p>
<p>.NET delegates, contain a function pointer + an object. So you can define a new type (say, ListBasedSanitizer) and create a &quot;string Sanitize(string word)&quot; function and any supporting fields (string[] badWords), etc. When you call SanitizeWords, you first create a new ListBasedSanitizer, then specify that instance&#8217;s Sanitize method as the callback. If the logic for Sanitize needs to be different, you define a new type. You end up with little types just to hold your state and logic for the callback. In some cases, you could add more methods and fields to the type you&#8217;re currently in. At best:</p>
<p>string mySanitize(string w) { &#8230; }</p>
<p>&#8230;</p>
<p>this.someDataForSanitize = &#8230;</p>
<p>SanitizeWords(this.mySanitize)</p>
<p>&quot;Closures&quot; eliminate all this work. They work by &quot;capturing&quot; variables. Suppose you want to call SanitizeWords with some custom logic, like randomly replacing 4 letter words with &quot;OHMY&quot;. You don&#8217;t need to create a new type or define fields and methods:</p>
<p>var r = new Random()</p>
<p>SanitizeWords(word =&gt;</p>
<p>&nbsp; &nbsp;word.Length != 4 ? word :</p>
<p>&nbsp; &nbsp;r.NextDouble() &gt; 0.1 ? word :</p>
<p>&nbsp; &nbsp;&quot;OHMY&quot;);</p>
<p>Even though r is outside of the anonymous method, we can use it. Using r &quot;captures&quot; it, and now you&#8217;ve brought external data into SanitizeWords without having to write unnecesary code. Behind the scenes it&#8217;ll create a type and field and new up a new instance for you.</p>
<p>My favourite thought on closures and objects is the koan here:</p>
<p><a rel="nofollow" target="_new" href="http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg03277.html" rel="nofollow">http://people.csail.mit.edu/gregs/ll1-discuss-archive-html/msg03277.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657073">
				<div id="div-comment-657073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MichaelGG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657073">
			August 14, 2008 at 6:40 am</a>		</div>

		<p>@Jonathan Pryor</p>
<p>What about:</p>
<p>return (new[] { CountTo100(), CountTo100() }).Aggregate(Enumerable.Concat);</p>
<p>(Or SelectMany)?</p>
<p>A problem may be that each enumerator in the array will be created before it&#8217;s actually needed. Getting around that isn&#8217;t hard, but it&#8217;s not exactly elegant either:</p>
<p>return (new Func&lt;IEnumerable&lt;int&gt;&gt; [] { ()=&gt; CountTo100(), ()=&gt;CountTo100() }).Select(f=&gt;f()).Aggregate(Enumerable.Concat);</p>
<p>[Not the first or last time I wish Expression&lt;T&gt; had different syntax.]</p>
<p>@Nick &#8211; Oh no! Don&#8217;t use that term :(. I&#8217;m trying to keep some hope that F# will become mainstream, even though everyone tells me that&#8217;ll never happen. (Although, my ego does enjoy the delusion of being &quot;elite&quot;.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657083">
				<div id="div-comment-657083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Palladinos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657083">
			August 14, 2008 at 6:59 am</a>		</div>

		<p>@MichaelGG</p>
<p>I mean that it is elite in terms of rich language features (among other .Net languages)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657093">
				<div id="div-comment-657093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MichaelGG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657093">
			August 14, 2008 at 7:04 am</a>		</div>

		<p>@Nick &#8211; Definately agree with that then :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657113">
				<div id="div-comment-657113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/cbrumme/archive/2003/10/01/51524.aspx' rel='external nofollow' class='url'>AndyB</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657113">
			August 14, 2008 at 8:34 am</a>		</div>

		<p>@steveg: absolutely right, if MS has released .NET as a VB.NET only language (ie and not released C#) then everyone would be complaining about it, saying its not a real language, its performance and ease-of-use, and &#8216;fancy features&#8217; suck.</p>
<p>As they cleverly created a Ja.. ahem, sorry, a language with curly braces, they made it acceptable for everyone to use and love it.</p>
<p>Strangely, VB.NET is actually the stronger and more powerful language, it has a few additional bits that are missing from C# but everyone thinks the only .NET language is VB.NET. Go figure.</p>
<p>I always recall the COM attacks that appeared from MS when .NET first came out, all the crufty things that were added to COM that sucked were attacked by MS people, only now I see .NET getting the same kind of crufty things added to it. I reckon 5, 10 years from now someone will post a blog saying how iterators were such a mistake and how we should all move to MSs&#8217; coolest newest architecture&#8230;..</p>
<p>CLR week does suck, but Raymond &#8211; keep it up, its still informative and entertaining. (can we have more on exceptions please &#8211; check Chris Brumme&#8217;s old blog for posts as excellent as Raymonds).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657123">
				<div id="div-comment-657123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CShartp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657123">
			August 14, 2008 at 8:43 am</a>		</div>

		<p>What a bunch of crusty old whiners. &nbsp;C# rocks. &nbsp;Everything is 10x simpler than C++. &nbsp;I can focus on the problem I&#8217;m trying to solve instead of problems with the language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657133">
				<div id="div-comment-657133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://drazen.dotlic.name/weblog' rel='external nofollow' class='url'>Drazen Dotlic</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657133">
			August 14, 2008 at 9:03 am</a>		</div>

		<p>In short: not only does the CLR week not suck, if possible, I&#8217;d love to see more of it please.</p>
<p>It hasn&#8217;t been as hard-core as some of the Win32 entries, but it&#8217;s surely interesting.</p>
<p>Thanks Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657163">
				<div id="div-comment-657163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657163">
			August 14, 2008 at 9:55 am</a>		</div>

		<p>Well, at least I am not alone. &nbsp;But to clarify, I didn&#8217;t mean his writing was poor or anything; as a Win32 guy, I just don&#8217;t find .NET stuff particularly interesting compared to the usual topics. &nbsp;For a Win32 &#8220;Not a .NET blog&#8221;, I was not expecting a full week of it. &nbsp;Granted its his blog and he can do what he wants, but I suspect it probably wasn&#8217;t his choice.</p>
<div class="post">[<i>&#8220;I was not expecting a full week of it.&#8221; You must be new here. It&#8217;s an annual tradition. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657253">
				<div id="div-comment-657253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://starik-x.livejournal.com/' rel='external nofollow' class='url'>Andrew</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657253">
			August 14, 2008 at 11:02 am</a>		</div>

		<p>As of the question, I don&#8217;t see anything specific about the 150th call.</p>
<p>(If it meant to be 101st &#8211; then it&#8217;s the point &nbsp;where the first sub-enumerator gets disposed. So with recursive itarators, you&#8217;d still had a non-disposed object to put more pressure on GC)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657263">
				<div id="div-comment-657263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657263">
			August 14, 2008 at 11:06 am</a>		</div>

		<p>I&#8217;m a .NET developer who comes to this site to gain a better understanding of programming in general and also get a clearer understanding of what is going on under the hood in an OS (it just happens to be WIN32 here). The programming language used to describe the functionality or idea isn&#8217;t that important but it sure is nice to get some of Raymonds extremely in depth thoughts and explanations on something that is actually of use to me on a daily bases. DOTNET week is fascinating!</p>
<p>Thanks Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657293">
				<div id="div-comment-657293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657293">
			August 14, 2008 at 11:32 am</a>		</div>

		<p>@Kevin Provance: &quot;Someone suggested instead of complaining about CLR/.NET I should state my reasons why?</p>
<p>/snip long tirade about demise of VB6&quot;</p>
<p>You still haven&#8217;t. All you&#8217;ve done is complain about how VB6 is finally dying, and you can&#8217;t seem to move on to a real language (although you did mention Delphi, which is very much a real language &#8211; that confused me somewhat, I&#8217;ll admit).</p>
<p>You said nothing about problems with .NET whatsoever, and even less about C# and iterators (which were the topic of Raymond&#8217;s blog post). All you did is whine about VB6&#8217;s demise.</p>
<p>Other than you lack of skills (which if you had would make it easy for you to move on to a better language), what is your problem with .NET?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert odd alt thread-odd thread-alt depth-1" id="comment-657313">
				<div id="div-comment-657313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657313">
			August 14, 2008 at 12:22 pm</a>		</div>

		<p>To attempt to bring this back on topic again&#8230;</p>
<blockquote><p>
  The only problem with .Concat() is that it&#8217;s limited to combining only two lists
</p></blockquote>
<p>Though your suggestion is an excellent one, its parameter arity is not the only problem with Concat. Concat suffers from exactly the problem that Raymond was alluding to, a problem which as yet no one has mentioned here.</p>
<p>I believe the problem that Raymond is alluding to is that we now have an iterator which calls another iterator; to get each item, two calls to MoveNext have to happen, so the total cost of enumerating is O(2n). Which is fine, that&#8217;s O(n). &nbsp;</p>
<p>But if you were enumerating a binary tree, say:</p>
<p>foreach(T t in Left) yield return t;</p>
<p>yield return Value;</p>
<p>foreach(T t in Right) yield return t;</p>
<p>then the average number of calls to MoveNext per item yielded will be O(h) where h is the average height of the tree. &nbsp;In a balanced binary tree, h is O(lg n), so enumerating all n items is O(n lg n). &nbsp;In an unbalanced binary tree, h is potentially O(n), so enumerating all n items is O(n^2).</p>
<p>Grant Richins, Wes Dyer and I have all written blog articles on ways to solve this problem; as I said before, we could have the compiler solve it for you, but don&#8217;t hold your breath waiting. We have other priorities.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657363">
				<div id="div-comment-657363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.dirteam.com/blogs/mjohnson/archive/2008/08/14/interesting-links-8-14-2008.aspx' rel='external nofollow' class='url'>Matt Johnson's Technical Adventures</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657363">
			August 14, 2008 at 1:05 pm</a>		</div>

		<p>Ask the Directory Services Team : MCS Talks Infrastructure Architecture joeware &#8211; never stop exploring…</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657423">
				<div id="div-comment-657423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg D</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657423">
			August 14, 2008 at 2:39 pm</a>		</div>

		<p>@KenW: &quot;You&#8217;ve managed to join the company of Igor and Yuhong*&quot;</p>
<p>Don&#8217;t forget everybody&#8217;s favorite blogs.msdn.com troll Norman Diamond! &nbsp;I wonder if he ever got his SCSI floppy&#8217;s interface working on that ancient laptop of his. &nbsp;I think it cost him, like, 2000 yen. heheheh.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657503">
				<div id="div-comment-657503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/' rel='external nofollow' class='url'>Today&#8217;s Blogs &laquo; Roman&#8217;s Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657503">
			August 14, 2008 at 4:11 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/" rel="nofollow">http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert odd alt thread-odd thread-alt depth-1" id="comment-657523">
				<div id="div-comment-657523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657523">
			August 14, 2008 at 4:25 pm</a>		</div>

		<p>Re: people who still refer to Microsoft as &quot;M$&quot;.</p>
<p><a rel="nofollow" target="_new" href="http://www.penny-arcade.com/comic/2002/7/22/ms/" rel="nofollow">http://www.penny-arcade.com/comic/2002/7/22/ms/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657603">
				<div id="div-comment-657603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Good Point</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657603">
			August 14, 2008 at 6:34 pm</a>		</div>

		<p>@Kevin Provance: &quot;and in the process M$ declared VB6 dead and not work saving&quot;</p>
<p>And God Bless Microsoft for doing that!</p>
<p>They wanted to move development away from native code to some kind of managed code. &nbsp;I congratulate them for not dragging along all of the VB baggage and proposing a new solution.</p>
<p>If not, in 2015 (maybe earlier) Raymond would have been blogging about how the design decisions in VB3 shape our programming environment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657303">
				<div id="div-comment-657303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657303">
			August 14, 2008 at 11:39 am</a>		</div>

		<p>@John: &quot;Well, at least I am not alone. &quot;</p>
<p>No. You&#8217;ve managed to join the company of Igor and Yuhong*. Congratulations.</p>
<p>And it was Raymond&#8217;s choice, as it is every year, and as is every blog entry he writes. Nice try, though.</p>
<p>*I suspect you&#8217;re too new here to understand the reference. The two people I mentioned are the two biggest trolls here, who use many of Raymond&#8217;s articles as the launching point to bring up old, long resolved issues relating to MS and Windows. IOW, they constantly whine and complain and never post anything of any value, and generally just tick people off.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657623">
				<div id="div-comment-657623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657623">
			August 14, 2008 at 6:54 pm</a>		</div>

		<p>@Ken: &nbsp;Actually Yuhong is one of my favorites, though I don&#8217;t care much for Igor. &nbsp;AndyB said he also thinks CLR week sucks, therefore I am not alone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657653">
				<div id="div-comment-657653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657653">
			August 14, 2008 at 9:18 pm</a>		</div>

		<p>John: you are quite OT &#8211; <a rel="nofollow" target="_new" href="http://tinyurl.com/2bjua8" rel="nofollow">http://tinyurl.com/2bjua8</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657743">
				<div id="div-comment-657743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AndyB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080813-00/?p=21253#comment-657743">
			August 15, 2008 at 10:16 am</a>		</div>

		<p>Come to think of it, I was mistaken. CLR week does NOT suck. At all.</p>
<p>Its the CLR and all the Managed code hype and reinvention that sucks. my most abject apologies to Mr Chen.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

