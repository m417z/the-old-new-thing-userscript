<html>
<head>
<title>Why doesn't the Windows Vista copy progress dialog show the names of the files being copied?, redux</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why doesn&#8217;t the Windows Vista copy progress dialog show the names of the files being copied?, redux</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 1, 2010 / year-entry #160</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>45</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As expected, everybody concluded that the Windows Vista copy progress dialog made every wrong decision possible. Let's look at some of the suggestions on making it suck less: Why not update the file name every five seconds to the file that is being copied at that time? Sure, you could do that, but the cost...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>As expected, everybody concluded that the Windows Vista copy progress dialog made every wrong decision possible. Let's look at some of the suggestions on making it suck less:</p>
<p> <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10014738"> Why not update the file name every five seconds to the file that is being copied at that time?</a> </p>
<p> Sure, you could do that, but the cost of getting the name is part of the problem. Retrieving the name is more than just "Remove everything after the last dot." You may have to look up localization information in order to display the name of the item in a manner appropriate for the user's preferred language. Since the operation being performed might be destructive (for example, delete or move), you need to retrieve the display name <i>before</i> you begin the operation. Since Microsoft Research hasn't yet finished their <a href="http://www.wired.com/epicenter/2010/05/video-microsoft-attempts-to-predict-the-future/"> project to predict the future</a>, we don't know at the time an operation starts whether it will take more than five seconds. Therefore, we have to play it safe and retrieve the name just in case. All you saved was the cost of the screen update; you didn't save the cost of retrieving the display names. </p>
<p> That said, in Windows&nbsp;7, when you expand the file copy progress dialog, it updates the fields at a maximum speed of four times per second. This is probably a decent balance between not updating faster than the screen refresh rate while still updating fast enough that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10015941"> you don't get the impression that it's skipping some files</a>. </p>
<p> <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10017262"> Obviously the solution is to make getting localised names faster</a>. </p>
<p> Yup, work was done to make getting localized names faster. When the copy engine begins operating on a directory, it <a href="http://blogs.msdn.com/oldnewthing/archive/2006/04/06/569873.aspx"> caches all the localized names at one go</a> and reads the names out of the cache as it processes the directory. </p>
<p> <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10016251"> The reason 'updating the display is slow' is nonsense, as the progress bar is constantly updating anyway.</a> </p>
<p> I think Drak didn't click through the discussion of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/02/20/535440.aspx"> how updating the screen can be a significant cost when you are updating continuously</a>. The operative word here is <i>continuously</i>. If you're copying a lot of small files, and you redraw each time you get to a new file, you may end up redrawing hundreds of times a second. On the other hand, the progress bar updates only around ten times a second, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10017452"> and the copy rate only once a second</a>, and neither have to access the disk to decide what to display next. A changing progress bar or updating copy estimate does not come across as unstable; they appear as progress. But a hundred file names flying past per second? That looks unstable. </p>
<p> <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10016139"> Is it really necessary to display those names localized?  Most users will never see them, and it'll confuse many of those that do see them.</a> </p>
<p> Imagine if you clicked to delete the file <i>Calculator.lnk</i> and the dialog box said "Deleting &#35336;&#31639;&#22120;.lnk". Would you be concerned? </p>
<p> It's only confusing if you sometimes see the nonlocalized names, like from programs which just assume that the display name can be obtained by deleting everything after the last dot instead of using the <code>SHGetFileInfo</code> function. But <a href="http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPFileSystem/Articles/DisplayNames.html"> Apple has the same problem</a>, and everybody knows that Apple does everything right. </p>
<p> It took me a while to realize that the complaint about <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10014946"> disk-to-disk copy of several large files at once</a> referred not to selecting multiple files and copying them in a single operation but rather starting one copy, then starting another copy, then starting another copy. If you copy them as a single operation, then they will queue up behind each other. But if you copy them as separate operations, then they will all compete with each other. The proposal to <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10015125"> have a single queue for files copied to/from the same disk</a> sounds interesting, but it quickly gets complicated: </p>
<ul>
<li>Suppose there is a copy in progress from volume A to volume B,     and another copy from volume B to volume C,     and another copy from volume D to itself.     Presumably, the second copy should wait behind the first     (since they both involve volume B);     should the third copy "jump the queue" and start immediately? </li>
<li>Is the queue implicit or explicit?     In other words, is there a single dialog with a list box,     one entry per queued-up operation?     Or do you still keep separate dialog boxes, but just have     the second dialog box wait until the first one is finished     before it starts its operation?     If you think about it, you can't have a single dialog with a     list box:     Suppose a program calls <code>SHFileOperation</code>, and its     operation gets queued up.     You disable the application window and do... what?     Do you set focus to the queue dialog?     That queue dialog is part of some other window hierarchy,     so     <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/02/23/378866.aspx">     it can get stuck behind the caller's window</a>.     And even if you make sure it comes to the foreground     (hooray for focus-stealing),     you then have the problem that when the operation completes,     focus goes to the queue dialog's owner, not to the program     that triggered the focus change. </li>
<li>Suppose I start copying a large file from volume A to volume B,     and then a colleague asks, "Hey, can you copy that shortcut     to volume B so I can take a look at it?"     Under the old system, you would start a second copy operation,     and it would run concurrently with the first copy operation     but complete first (since shortcuts are relatively small).     With the queueing design, you would need a way to let people     adjust the priority of jobs in the queue so the second one     could be bumped ahead of the first.     Which also means that when a partially-completed operation gets     pushed down the queue,     you need to be able to pause the operation and resume it later.     This is a lot of UI to design, implement, and test,     especially since we already decided that you can't have a     single dialog box with a list box. </li>
<li>When the second operation queues up behind the first,     its total estimated time needs to include the estimated times     for all the jobs ahead of it in the queue.     How do you get an estimate for a job that hasn't started yet?     Do you do some preliminary calculations to come up with the     estimate? But wait, that's going to access the hard drive     and interfere with the first operation.     Even if you have only one job ahead of you in the queue     (and therefore have an estimate for that job),     it means that     copying a 1KB file might tell you     "Estimated time to completion: 30 minutes" because it's     waiting behind a 4GB file. </li>
</ul>
<p> I'm not saying that these problems are unsolveable. But the simple suggestion of using a queue created a very large new problem. As we saw last time, <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/31/10017567.aspx"> you can't solve every problem; you have to decide which twenty problems you're going to solve and leave the others for next time</a>. </p>
<p> Windows&nbsp;7 decided to address the problem by letting you trade off performance for information. The operation defaults to performance (no file name updates), but you can expand the dialog to say, "I'm willing for my file operation to be a smidge slower in exchange for more information about how it's going." </p>
<p> I wonder if there are people would be willing to make the tradeoff "I'm willing to lose the progress bar in exchange for not having to wait for the operation to start while it calculates how big the progress bar should be." But I guess those people just use xcopy. </p>
<p> At any rate, the issue of the missing file names was fixed in Windows&nbsp;7, so any further complaining just falls into the category of asking for a time machine. Though I did find it interesting that people suggested solutions that involved doing more work. Doing more work means writing more code, which means designing and testing more code, which means the product ships even later. I bet these are also the same people who complain that Windows always ships late. (What ever happened to the commenters who say that Microsoft should be deleting code more aggressively? Oh, wait, I know what happened to them. "Microsoft should be deleting code, but only the code for for features that I personally don't like." Good luck getting people to agree on what code to delete. It's like the people who argue that Microsoft should intentionally abandon backward compatibility, then change their tune when they realize that their favorite program stopped working.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (45)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-836133">
				<div id="div-comment-836133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836133">
			June 1, 2010 at 7:10 am</a>		</div>

		<p>xcopy? You must mean Robocopy. Although neither seem to be designed for NTFS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836143">
				<div id="div-comment-836143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SDL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836143">
			June 1, 2010 at 7:18 am</a>		</div>

		<p>Considering RoboCopy has explicit support for NTFS Attributes, ACLs, Owner Info, Auditing Info, EFS, Symbolic Links and possibly other NTFS features, I can only assume you&#39;re incredibly ignorant or a troll. What does RoboCopy not support that it should that is specific to NTFS? I don&#39;t doubt that there may be NTFS features that RoboCopy lacks awareness of, but suggesting that it wasn&#39;t designed with NTFS in mind is clearly not true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836153">
				<div id="div-comment-836153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836153">
			June 1, 2010 at 7:27 am</a>		</div>

		<p>&quot;It took me a while to realize that the complaint about disk-to-disk copy of several large files at once referred not to selecting multiple files and copying them in a single operation but rather starting one copy, then starting another copy, then starting another copy. If you copy them as a single operation, then they will queue up behind each other&quot;</p>
<p>And you know what? You guessed wrong.</p>
<p>Do a simple test. In Windows 7, start Resource Monitor (a quick way would be to click that button in Taskmgr Performance tab). Dump a few (5 or more) big ISO files (&gt;500MB) or AVI files or whatever into one directory, select them all (or go up one level and select the directory) and do a copy to another drive. Watch per-process file IO stats in ResMon. You&#39;ll see that Explorer is reading them all at the same time. And the target files are also being written in parallel, in System process context (cache manager artifact).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836163">
				<div id="div-comment-836163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836163">
			June 1, 2010 at 7:38 am</a>		</div>

		<p>Interesting, I didn&#39;t know expanding the Windows 7 copy dialog actually made it do the extra work for the filenames. &nbsp;Good to know I guess.</p>
<p>A queuing feature would be useful for a future Windows. &nbsp;I would suggest the following:</p>
<ul>
<li>
<p>Queuing happen based on the disk that a volume resides in. &nbsp;If volumes A and B share the same disk and C and D share a second disk, copies from A-&gt;C and B-&gt;D should result in the second one being queued. &nbsp;This would work in the majority of cases, though would fail with some virtual disks IE TrueCrypt volumes which reside in physical files on another volume would not be detected as being part of the parent disk. &nbsp;Perhaps an API could be created to change the physical disk that Windows treats a volume as belonging to for queuing purposes to work around this.</p>
</li>
<li>
<p>Based on the number of files, size of files, and past r/w performance of a drive (perhaps), Windows could make a rough guess at a completion time and decide whether or not to queue for that volume, or whether a copy is fast enough that it can be bumped to the top of the queue to quickly complete (your 1kb behind 4gb scenario).</p>
</li>
<li>
<p>A power user could manually pause copies (or use some other &quot;defer until other copies on this volume complete&quot; advanced button) to manually control the queue order.</p>
</li>
</ul>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836173">
				<div id="div-comment-836173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">aaawww</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836173">
			June 1, 2010 at 7:39 am</a>		</div>

		<p>I wonder if there is a statistic on how much copy operation are completed with and without the extended information dialog open</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836183">
				<div id="div-comment-836183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Masklinn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836183">
			June 1, 2010 at 7:45 am</a>		</div>

		<p>Well I guess it&#39;s still SuperCopier for me, too bad it&#39;s still in beta for 64b systems. Yet it manages to be more stable than Explorer, as fast if not faster, and it does provide such features as queueing (and queues appending, removal and reordering), file-by-file names during transfer, much better estimates than Windows&#39;s own copy/move utility, pause/resume and a bunch of other stuff.</p>
<div class="post">[<i>And more power to them. Remember that Explorer&#39;s copy engine operates on abstract storage, not on files. (It can copy files to/from ZIP archives, FTP sites, etc.) If you specialize to files, you can obviously do a better job than if you need to be general-purpose. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836193">
				<div id="div-comment-836193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836193">
			June 1, 2010 at 7:57 am</a>		</div>

		<p>“What does RoboCopy not support that it should that is specific to NTFS?”</p>
<p>Hardlinks? Also, Junctions are lost, even those internal to the copied directory tree.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836203">
				<div id="div-comment-836203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Bray</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836203">
			June 1, 2010 at 8:11 am</a>		</div>

		<blockquote><p>
  &gt; I wonder if there are people would be willing to make the tradeoff &quot;I&#39;m willing to lose the progress bar in exchange for not having to wait for the operation to start while it calculates how big the progress bar should be.&quot;
</p></blockquote>
<p>Count me in. &nbsp;I&#39;ve had numerous occasions where the aforementioned calculation time far exceeds the actual copy time. &nbsp;Granted, its mainly on removeable media, or when there are lots (tens of thousands) of items; but its still annoying.</p>
<p>Still, like you say &#8211; its all about tradeoffs. &nbsp;I&#39;m sure if the progress bar was removed, you&#39;d get plenty of complaints too :-)</p>
<p>James</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836213">
				<div id="div-comment-836213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SDL</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836213">
			June 1, 2010 at 8:12 am</a>		</div>

		<p>Marquess:</p>
<p>I think Junctions are a bit of a dirty hack with Symlinks being preferable, but they only work on Vista or newer, so I can see their place.</p>
<p>Hardlink awareness would definitely be very useful for a future version of RoboCopy, I have to agree with you there :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836233">
				<div id="div-comment-836233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836233">
			June 1, 2010 at 8:42 am</a>		</div>

		<p>I feel that Dan and Masklinn kind of missed the point of the post. Raymond never said that the queuing problem was unsolvable, he said that solving it would mean a lot of work for Microsoft. (Including the associated QA time and overhead, and the potential delay of the product.) Additionally, more code always equals more bugs for people to complain about.</p>
<p>If a third party company like SuperCopier wants to step in and take care of that work, more power to them. If you&#39;re happy with their product, then more power to you. But realize that that has nothing to do with whether Microsoft should add the feature to Explorer or not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836243">
				<div id="div-comment-836243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ari Kalish</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836243">
			June 1, 2010 at 8:51 am</a>		</div>

		<p>Off topic and maybe it&#39;s just me, but in IE and Firefox intra-page links to comments aren&#39;t working:</p>
<p><a target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/25/10014185.aspx#10014738" rel="nofollow">blogs.msdn.com/&#8230;/10014185.aspx</a> (first link in this post) brings up the post, but doesn&#39;t jump to the comment. &nbsp;Probably a side-effect of the recent changes.</p>
<div class="post">[<i>Yup, I even called it out on the &quot;things that are still broken&quot; page. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836253">
				<div id="div-comment-836253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Masklinn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836253">
			June 1, 2010 at 9:06 am</a>		</div>

		<p>&gt; And more power to them. Remember that Explorer&#39;s copy engine operates on abstract storage, not on files. (It can copy files to/from ZIP archives, FTP sites, etc.)</p>
<p>While that is true, I don&#39;t think that&#39;s really relevant: the abstract backends could easily provide support for that kind of operations (any FTP client worth it salt has manipulable queues and support for suspend/resume for instance). Therefore I don&#39;t think it&#39;s a very good justification for the limitations of Explorer&#39;s file transfert. As far as I know, most of those limitations were there since the beginning, the file transfert stuff hasn&#39;t noticeably improved since the days of &#39;95 (maybe earlier, but my recollections of this dialog become fuzzy)</p>
<div class="post">[<i>The interface for the abstract backend was established in Windows 95 (IShellFolder). They were revised in Windows Vista with ITransferSource, but we all know how people feel about Windows Vista. So now all we have to do is update all the data backends in the system! (Good luck getting anybody to update WinINet.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836273">
				<div id="div-comment-836273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ari Kalish</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836273">
			June 1, 2010 at 10:31 am</a>		</div>

		<p>Oops&#8230; &nbsp;thanks Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836283">
				<div id="div-comment-836283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836283">
			June 1, 2010 at 10:34 am</a>		</div>

		<p>Actually, why have localized names at all? What&#39;s wrong with just&#8230; naming the file with the localized name it should have?</p>
<p>All this dichotomy between &quot;what the file is called&quot; and &quot;what desktop.ini says Explorer should call it&quot; has been source of countless confusion to me in the past.</p>
<p>As a bonus it would solve the &quot;having to get the file&#39;s name&quot; problem for the copy dialog.</p>
<p>(Pre-emtpive reply: Yes, I know it may be related to backwards compatiblity, again. I&#39;d like to know if there are other reasons)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836293">
				<div id="div-comment-836293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836293">
			June 1, 2010 at 10:46 am</a>		</div>

		<p>@Koro</p>
<p>The reason that localized filenames are implemented as is allows different users on the same machine to use different languages. This would not be possible with normal filenames. So MS actually has a good reason to do that.</p>
<p>Still I strongly dislike the desktop.ini changes filenames. If I have ever seen a leaky abstraction, then this one. And IMO leaky abstractions are one of the worst things you can do.</p>
<p>For example in WinXP some folders in &quot;documents and settings&quot; changed their name depending on which user you are logged in. (&quot;My Files&quot; vs &quot;Files of &lt;username&gt;&quot;). This really confused me.</p>
<p>Or you can manage to get two files with the exact filename shown in explorer in the same directory.</p>
<p>Now I&#39;m using a filemanager which ignores those desktop.ini filenames. Still I&#39;d like for an easy way to tell explorer to show the &quot;truth&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836303">
				<div id="div-comment-836303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836303">
			June 1, 2010 at 10:47 am</a>		</div>

		<p>@James Bray</p>
<p>You have to be careful with measuring to prove that.</p>
<p>It probably depends on which of the drives is limiting your copying speed. If it is the destination drive, you are probably right. If it is the source drive calculating the size first should not slow down the process much or might even be faster.</p>
<p>To calculate the total size you need to enumerate the directory tree recursively. Once you have done that it is cached in RAM(either by the copying program or by the filesystem cache) which makes a second enumeration much faster.</p>
<p>If you don&#39;t calculate the size first, you need to do that enumeration anyways, but this time you interleave it with the copying process. This should take at least as much time as if you had done it beforehand, but due to potential additional disk-seeks it might be even slightly slower.</p>
<p>So you can&#39;t simply subtract the time the size-calculation takes from the total time to get the time copying would take without the size calculation. So you once again see that measuring performance is hard, especially in the presence of caches.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836313">
				<div id="div-comment-836313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter da Silva</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836313">
			June 1, 2010 at 10:51 am</a>		</div>

		<p>I agree with Koro. I didn&#39;t even understand what this: &quot;Imagine if you clicked to delete the file Calculator.lnk and the dialog box said &quot;Deleting 計算器.lnk&quot;. Would you be concerned?&quot; referred to until I did some research&#8230; and I was basically horrified. If the file name is &quot;Calculator.lnk&quot; then why would it say &quot;Deleting 計算器.lnk&quot;? If the file name is &quot;計算器.lnk&quot; then why would I see it as &quot;Calculator.lnk&quot;? Changing the displayed names of objects is just plain evil.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836323">
				<div id="div-comment-836323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836323">
			June 1, 2010 at 10:55 am</a>		</div>

		<p>@Koro,</p>
<p>This is done to support highy hypothetical situation of multiple users on the same machine using different UI languages. Actually, this is how MUI works, and not necessarily for simultaneous different languages. Anyway, this discrepancy between display name and filesystem-exposed name has been there since I think XP, but perhaps not throughout the whole shell.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836333">
				<div id="div-comment-836333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://arnshea.blogspot.com/' rel='external nofollow' class='url'>arnshea</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836333">
			June 1, 2010 at 11:11 am</a>		</div>

		<p>BTW I loved the Windows Vista file copy dialog. &nbsp;For small copies (in either number or size) the basic view (no throughput indicator) is just right. &nbsp;For large copies I usually expand to advanced view but toss that up to subjective preference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836343">
				<div id="div-comment-836343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kelden</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836343">
			June 1, 2010 at 11:55 am</a>		</div>

		<p>&gt; This is a lot of UI to design, implement, and test, &#8230;</p>
<p>I cannot understand your complaints. If users would care about this we would still use DOS. Our customers don&#39;t care if a feature needs 10 lines of code or 10000.</p>
<div class="post">[<i>Customers do care if a product is late or if some other feature got cut to make room for this one. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836353">
				<div id="div-comment-836353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jared</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836353">
			June 1, 2010 at 12:36 pm</a>		</div>

		<p>I only need the file name for error recovery.</p>
<p>If windows/explorer is going to barf while copying a file, I want to know which file (and why). &nbsp;Until there is a problem, I&#39;ll gladly give up watching file names. &nbsp;But when there is a problem, I want the FULL name VISIBLE so I can know where to start fixing the problem.</p>
<p>And the &quot;cold stop&quot; on error has always bothered me. &nbsp;(Though each release gets better..)</p>
<p>Out of space? &nbsp;Suspend the operation wile I move some stuff around and then let&#39;s resume/retry at/with the failing file. &nbsp;Target protected? &nbsp;Ditto while I check the security settings. &nbsp;Unexpected duplicate? &nbsp;Ditto while I see what happened. &nbsp;And so on&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836373">
				<div id="div-comment-836373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JJJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836373">
			June 1, 2010 at 12:49 pm</a>		</div>

		<p>Regarding queueing, I think a context-menu item when you right-click and drag (in the same menu that says &quot;Copy to&quot;, &quot;Move to&quot;, etc.) that allows you to queue up the copy operation would work. &nbsp;It offloads the algorithm intelligence to the user, is sufficiently discoverable by power users, and yet it&#39;s also hidden from users who generally wouldn&#39;t understand it. &nbsp;Of course, I can say that because I copy everything with a right-click drag.</p>
<p>To solve the other problems, I&#39;d have a single queue, have each copy in its own window just like today, and not show estimations or progress at all for queued items. &nbsp;The windows would just indicate that the copy is queued, perhaps with a button to unqueue it (and no, no putting it back once you&#39;ve unqueued it). &nbsp;It&#39;s OK if not everyone is satisfied with this solution. &nbsp;If you can&#39;t satisfy everyone, at least you can satisfy me. ;)</p>
<p>Plus, this feature would probably make a good intern project.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836383">
				<div id="div-comment-836383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">hova</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836383">
			June 1, 2010 at 1:06 pm</a>		</div>

		<p>I love how Raymond rips into all the ideas and criticisms surrounding the file copy dialog. &nbsp; Unfortunately, the problem still remains that if I&#39;m copying anything of serious size, the command prompt copy variants always provide 2x-5x speed increases. &nbsp; Why? &nbsp;I do not know, it simply is and has always been this way. &nbsp;Changing the look of the dialog only makes it faster for trivial copies because it&#39;s easier to drag files than opening up cmd prompts and typing it out. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836393">
				<div id="div-comment-836393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RotJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836393">
			June 1, 2010 at 1:07 pm</a>		</div>

		<p>Slightly off topic, but what&#39;s the reason behind the drag and drop behavior when dragging files from a 3rd party program like 7-zip into an Explorer window? &nbsp;Files are always copied to the %temp% directory first, and then copied from there to the intended destination. &nbsp;This often severely increases the time it takes for the process to complete compared to using &quot;extract&quot; or &quot;save to&quot; commands in those programs, which bypass the %temp% directory. A few programs also use custom drag and drop routines to bypass Windows default behavior.</p>
<div class="post">[<i>Because the people who wrote the third party programs <a href="http://blogs.msdn.com/oldnewthing/archive/2008/03/19/8080215.aspx" rel="nofollow">don&#39;t read my blog</a>. If all you have is a hammer (CF_HDROP), everything looks like a nail (file). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836433">
				<div id="div-comment-836433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836433">
			June 1, 2010 at 2:01 pm</a>		</div>

		<p>One of the problems seems to be that users can&#39;t read &nbsp;file names showing too fast.</p>
<p>The obvious solution is to introduce a delay so that each file name show for at least one second ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836443">
				<div id="div-comment-836443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836443">
			June 1, 2010 at 2:10 pm</a>		</div>

		<p>A queue would require a lot of &quot;intelligence&quot; on the part of the shell designer / explorer designer that I don&#39;t trust they have. &nbsp;Don&#39;t go there.</p>
<p>Start the copy before you know how long it will take or how much total there is &#8211; just adjust the progress bar as a 2nd thread does the enumeration (and only then if the details box is expanded).</p>
<p>Fix fundamental issues before worrying about performance. &nbsp;examples: (1) Give me a clear, easy-to-understand and manipulate interface for managing security settings on all of my shell objects. &nbsp;(2) Create a scheme to allow an incomplete (failed) shell operation to be resumed (such as out of disk space on target &#8211; resume, cancel) instead of a &quot;Error: blah-blah. &nbsp;Press Ok (to NOT continue&#8230;)&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836453">
				<div id="div-comment-836453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836453">
			June 1, 2010 at 3:45 pm</a>		</div>

		<p>Alexandre Grigoriev, at least on my computer IE saves them in the temporary internet files folder. Presumably this is because that&#39;s where the cache resides and there is no way to make files outside of that folder part of the cache. Either there is no way to get files from the internet while not using the cache, or IE&#39;s designers thought it was unsafe to leave an incomplete file already in place (which it is). I don&#39;t know if there are dangers to moving files out of the cache (which is shared between processes) but I do know that in some common cases moving is impossible (for example in the common configuration where the cache resides on C: but your documents on D:). But it does have an important downside: if you download a file and there is enough space at the target location, but not enough space for the cached file, you run into trouble. Either the download will fail, or the copy in which case you have to hunt for the file in the cache. (I haven&#39;t really used IE in ages though. The newer versions won&#39;t run decently and IE6&#8230; well&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836473">
				<div id="div-comment-836473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dale</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836473">
			June 1, 2010 at 7:50 pm</a>		</div>

		<p>&quot;What ever happened to the commenters who say that Microsoft should be deleting code more aggressively?&quot;</p>
<p>Right here!</p>
<p>Get rid of all that code bloat due to application compatibility &quot;fixes&quot;. Though, I get the feeling from reading &quot;The Old New Thing&quot; book, that Microsoft has started doing that by implementing application shims.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836413">
				<div id="div-comment-836413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836413">
			June 1, 2010 at 1:33 pm</a>		</div>

		<p>&quot;Slightly off topic, but what&#39;s the reason behind the drag and drop behavior when dragging files from a 3rd party program like 7-zip into an Explorer window?&quot;</p>
<p>Even more offtopic, by why, when doing &quot;Save target as&quot;, does Internet Explorer saves files into %TEMP% first, then _copies_ (instead of fast _move_) them into the target folder? That doesn&#39;t make sense at all. *Competing browser* doesn&#39;t do that.</p>
<div class="post">[<i>Why not ask the IE folks? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836493">
				<div id="div-comment-836493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymuos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836493">
			June 1, 2010 at 11:01 pm</a>		</div>

		<p>Bullshit again. What % of performance is impacted anyways? Explorer displays the speed in MB/s too right? I don&#39;t see ANY drop in MB/s when I expand to show file names. May it has a hit of less than 0.5 MB/s?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836503">
				<div id="div-comment-836503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836503">
			June 2, 2010 at 12:28 am</a>		</div>

		<p>@Alexandre Grigoriev&gt;</p>
<p>If you want to download a resource from the web then IE first checks if it&#39;s already in the cache and uses the HEAD http command to check if the resource has been modified on the server since you have downloaded it the last time. If not then IE can simple copy the file from the TIF to the destination without haveing to download the resource again.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836523">
				<div id="div-comment-836523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836523">
			June 2, 2010 at 1:11 am</a>		</div>

		<blockquote><p>
  Imagine if you clicked to delete the file Calculator.lnk and the dialog box said &quot;Deleting 計算器.lnk&quot;. Would you be concerned?
</p></blockquote>
<p>I should have been clearer &#8211; I was specifically referring to the folders on C: (Program Files, Users, &#8230;), since those will be seen/used more often. Having one name in the list, and a different name in the textbox is really confusing. OTOH, I doubt that many people will care about the shortcuts (since those are usually pretty deep in the directory tree).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836463">
				<div id="div-comment-836463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836463">
			June 1, 2010 at 7:39 pm</a>		</div>

		<p>It seems kinda stupid to slow down copying for 99% of users for the extreme edge case where multiple users on the same machine use different languages. Wow, talk about missing the forest for the trees. </p>
<p>Also, 100 file names a second doesn&#39;t look unstable, it looks *fast* (at the expense of the CPU required to redraw).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836533">
				<div id="div-comment-836533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836533">
			June 2, 2010 at 3:55 am</a>		</div>

		<p>Man &#8230; people sure do have some opinions about a dialog.</p>
<p>I don&#39;t even feel it&#39;s one of those small &quot;spit and polish&quot; things you can justifiably spend a lot of time on to make a good user experience into a great one. &nbsp;I&#39;d even go so far as to wager that 99.&lt;some long string of 9&#39;s&gt;% of Windows users have spent more time angry about calc.exe&#39;s scientific mode lacking [sqrt] than they&#39;ve ever spent time thinking about the copy dialog. &nbsp;</p>
<p>Which is great, because when someone isn&#39;t thinking about it, it means it&#39;s working well for them. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836543">
				<div id="div-comment-836543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836543">
			June 2, 2010 at 5:28 am</a>		</div>

		<p>Regarding queues, I think it would be a nice feature to be able to drop files onto a file copy dialog to append files to the queue of that dialog. This would of course also set the destination folder of the dropped files to the destination folder of the copy dialog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836553">
				<div id="div-comment-836553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scorpion007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836553">
			June 2, 2010 at 6:29 am</a>		</div>

		<p>@Tom, &quot;Windows users have spent more time angry about calc.exe&#39;s scientific mode lacking [sqrt]&quot;</p>
<p>Huh? Calc has had a square root from day one: Inv + x^2.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836593">
				<div id="div-comment-836593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836593">
			June 2, 2010 at 7:23 am</a>		</div>

		<p>@Someone &amp; Anon,</p>
<p>From what I saw, Internet Explorer does NOT keep the downloaded file in the cache after it&#39;s done. The point of cache is to keep files that are fetched implicitly. WHen an user wants to save a file, why would he want to keep another copy of it around?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-836603">
				<div id="div-comment-836603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexander Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836603">
			June 2, 2010 at 7:24 am</a>		</div>

		<p>@Someone &amp; Anon,</p>
<p>From what I saw, Internet Explorer does NOT keep the downloaded file in the cache after it&#39;s done. The point of cache is to keep files that are fetched implicitly. WHen an user wants to save a file, why would he want to keep another copy of it around?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-836513">
				<div id="div-comment-836513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wladimir Palant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-836513">
			June 2, 2010 at 1:11 am</a>		</div>

		<p>@Alexandre Grigoriev: The case that multiple languages are being used on the same machine isn&#39;t very theoretical any more, with Windows 7 it is pretty much reality. It will even happen that *the same user* switches between different user interface languages. On previous Windows versions already changing regional settings had horrible consequences. E.g. German &quot;Zubehör&quot; (Accessories) used to morph into &quot;Zubehцr&quot; with Russian regional settings and applications could no longer find it. While you might argue that this is all due to OEM charset which is an abomination anyway, I am really happy that in Windows 7 the file names are always the same &#8211; no matter what user interface language you use. It is only the displayed name that changes. Leaky or not, this abstraction made many things a lot simpler. And I no longer need to be afraid that switching to Georgian regional settings (which I do for testing occasionally) will mess up my system horribly. Thanks, I can live with file name display being slightly slower.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837323">
				<div id="div-comment-837323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-837323">
			June 4, 2010 at 4:13 am</a>		</div>

		<p>A much more pressing matter than this is figuring out what each click of Undo does since it doesn&#39;t seem to show what it does anywhere. eg. You do a bunch of file operations, then realize you may have done a mistake, it would be nice to see what the undo will do.</p>
<p>Another issue is that Undo doesn&#39;t often undo things back to exactly as they were, for example if files were moved between two internal partitions it should be able to set the dates back as they were after undoing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837523">
				<div id="div-comment-837523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-837523">
			June 5, 2010 at 1:34 am</a>		</div>

		<p>Why does not the Move file progress dialog in Windows 7 show the names or even speed of the files being moved?</p>
<p>You can try this:</p>
<p>Mount a 2nd HDD under say C:mountpoints2NDHDDMOUNTPOINT using diskmgmt.msc</p>
<p>Then move large files that would take say a minute to copy between from one hdd to next from say c:here to under the mounted volume of 2nd HDD.</p>
<p>No file names or speed is displayed.</p>
<p>Also:</p>
<p>No free space or total size is shown for the mounted volumes in the view that comes when pressing Windows+E (explorer) like is shown for volumes with drive letter and network shares with drive letters.</p>
<p>Also:</p>
<p>Why am I mounting the HDDs in inconvenient place instead of through Drive Letters? Well for some reason, the caching system doesn&#39;t properly cache information from QueryWhateverDriveInformation API (forget the name), and when the 2nd HDD is sleeping, it is woken up by for example Visual Studio that wants to know the size of all physical HDD&#39;s. Even though that information cannot change while the drive is sleeping! Seriously annoying design. If you ask me, if I got 8 GB of memory and 7 GB usually free, the whole MFT,Index and all root files of sleeping HDDs should be cached up just before it goes to sleep.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837533">
				<div id="div-comment-837533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ac</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-837533">
			June 5, 2010 at 2:04 am</a>		</div>

		<p>correction: The QueryVolumeWhatever still wakes up drives even when they&#39;re mounted behind the mountpoints, however some 3rd party apps just go through all drive letters rather than all volumes so it does seem to help sometimes in avoiding unnecessary wake ups when apps just want to know some basic drive information that could be cached before sleep at practically no cost. And Visual Studio isn&#39;t truely the culprit, the Customer Experience Improvement feature is.</p>
<p>In other annoying news, the defrag/indexing service goes off when computer is not idle (any Human input device such as USB MIDI dongle activity counts should count as Not Idle). Also the WEI benchmark is configured to run regardless if there is say a game running after the 24 hour elapsed from display driver update after when it was first supposed to run. I&#39;ve also seen something cause freezes exactly X (20?) minutes into watching a video file with WMP. I suspect it&#39;s some service waking up the sleeping HDD&#39;s.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837593">
				<div id="div-comment-837593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Samantha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-837593">
			June 6, 2010 at 11:25 am</a>		</div>

		<p>I&#39;d say that windows should just run a few test benchmarks copying between different volumes in order to get some ideas on performance or different operations, not just a single copy from A to B but also if parallel copies from A to B and C to D or C to B can run at an acceptable performance (for instance if B was SSD) once it had it&#39;s numbers, it can make a quick estimate based on the file size, I would have the queue / gueue jumping / parallel copying / pausing one operation to complete another first, customisable but i&#39;d say a good setting would be, that it will allow another operation to either run in parallel or complete first, if it doesn&#39;t increase the time it will take by more than 10%. you can also just have a &#39;faster&#39; button on the dialogue box, which then gives that operation priority (easier than clicking &#39;pause&#39; on 5 other boxes)</p>
<p>solution for the dialogue boxes, is have both, when a program calls a copy operation and it gets a box, then it displays it as it should, when a second simultaneous operation starts, the original boxes stay with their parent windows, but the entry in the task bar is replaced with a single &quot;multiple file operations&quot; window that when displayed, pauses or greys out the individual boxes (if their parent windows were still visible) and itself contains a queue, showing the multiple operations, with the ability to pause them, or start others in parallel shift them up and down the queue etc. (perhaps in an advanced mode). greying out the individual dialog boxes will prevent the user from thinking there are extra copies happening than there really are, and it won&#39;t cost extra in resources, but leaving them existing means that they&#39;re still valid if the program that started the operation grabs focus back or the user alt-tabs or whatever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-837603">
				<div id="div-comment-837603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Samantha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-837603">
			June 6, 2010 at 5:07 pm</a>		</div>

		<p>I&#39;d say that windows should just run a few test benchmarks copying between different volumes in order to get some ideas on performance or different operations, not just a single copy from A to B but also if parallel copies from A to B and C to D or C to B can run at an acceptable performance (for instance if B was SSD) once it had it&#39;s numbers, it can make a quick estimate based on the file size, I would have the queue / gueue jumping / parallel copying / pausing one operation to complete another first, customisable but i&#39;d say a good setting would be, that it will allow another operation to either run in parallel or complete first, if it doesn&#39;t increase the time it will take by more than 10%. you can also just have a &#39;faster&#39; button on the dialogue box, which then gives that operation priority (easier than clicking &#39;pause&#39; on 5 other boxes)</p>
<p>solution for the dialogue boxes, is have both, when a program calls a copy operation and it gets a box, then it displays it as it should, when a second simultaneous operation starts, the original boxes stay with their parent windows, but the entry in the task bar is replaced with a single &quot;multiple file operations&quot; window that when displayed, pauses or greys out the individual boxes (if their parent windows were still visible) and itself contains a queue, showing the multiple operations, with the ability to pause them, or start others in parallel shift them up and down the queue etc. (perhaps in an advanced mode). greying out the individual dialog boxes will prevent the user from thinking there are extra copies happening than there really are, and it won&#39;t cost extra in resources, but leaving them existing means that they&#39;re still valid if the program that started the operation grabs focus back or the user alt-tabs or whatever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-837613">
				<div id="div-comment-837613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Samantha</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100601-01/?p=13853#comment-837613">
			June 6, 2010 at 5:07 pm</a>		</div>

		<p>You know what, I think there&#39;s a fairly elegant, simple soultion that works at least until there&#39;s more than a handful of operations at the same time. If the performance drop off that happens with multiple symultaneous copies is due to disk seek times, then simply make it so that the round robin between which item is hitting the disk is set to something like 1MB, so that any file under 1 meg will wait it&#39;s turn in the queue and then in a second or two will copy entirely and be done, with 3 files 100mb each, then each one would copy 1MB in turn until they&#39;re done. This will massively reduce the number of seeks the disk has to make while doing multiple symultaneous copies, while still allowing suitable fast response when trying to do a very small operation while a large one is already being carried out.</p>
<p>for more than a handful of files at the same time, then a queue could still be useful in which case i&#39;d say the manual queue using the right click dialog as suggested above, would work great.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

