<html>
<head>
<title>Adventures in application compatibility: Following a detour off a cliff</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Adventures in application compatibility: Following a detour off a cliff</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 4, 2018 / year-entry #127</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">An arrow pointing to nowhere.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The application compatibility team reported that a program was
crashing in its installer.
Debugging the installer revealed that it actually triggered
<i>three</i> exceptions.
</p>
<p>
The first exception was due to passing an invalid pointer to the
<code>lstrlen</code> function.
However, this didn't crash the installer because the
<code>lstrlen</code> function
contains an application compatibility mitigation:
If you pass a pointer to invalid memory,
it handles the access violation exception by reporting that
the string length is zero.
</p>
<p>
It did this twice, so that is the second exception as well.
</p>
<p>
The third exception is the one that crashed the installer:
A system function wanted to report a runtime issue.
It did this by checking if a debugger was present,
and if so, it printed a diagnostic message to the debugger
so that the developer could see that there was a problem and
get a chance to investigate it.
</p>
<p>
The problem is that the call to
<code>Is&shy;Debugger&shy;Present</code> was crashing.
</p>
<p>
And it was crashing because the installer used
<a HREF="https://sourceforge.net/projects/gplmpgdec/files/">
a DLL</a>
which
detours the <code>Is&shy;Debugger&shy;Present</code> function
when it is loaded,
presumably to make it harder to reverse-engineer (though since
<a HREF="https://sourceforge.net/projects/gplmpgdec/files/GPL%20MPEG-1_2%20Decoder/GplMpgDec012/">
the source code is freely available</a>,
it's not sure why they are so concerned about it).
</p>
<p>
But notice that the DLL does not un-detour the function when it is
unloaded.&sup1;
</p>
<p>
Therefore, if you load the DLL and then unload it,
you leave the
<code>Is&shy;Debugger&shy;Present</code> function
detoured to a function that no longer exists.
And the next person to call the
<code>Is&shy;Debugger&shy;Present</code> function
will crash.
</p>
<p>
(Also curious is that the DLL is licensed under the GPL,
yet the product that uses it makes no mention of the GPL
in its license agreement.)
</p>
<p>
The fix was to remove the debugging message for the particular
case that this program's installer was tripping over.
</p>
<p>
&sup1;
Not that un-detouring is a perfect solution either,
because it runs into the
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050607-00/?p=35413">
What if two programs did this?</a> problem:
Suppose another DLLs also detoured the
<code>Is&shy;Debugger&shy;Present</code> function.
When this DLL unloads, it restores the original function,
which also removes the other DLL's detour.
And then when the other DLL unloads, it restores what it thought
was the original function, but which was actually the detour installed
by this DLL.
As a result, this DLL's detour gets <i>reinstalled</i>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1344215">
				<div id="div-comment-1344215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344215">
			June 4, 2018 at 7:30 am</a>		</div>

		<p>This is why I think Windows should come with a built-in method for API hooking, so everyone would stop hand-rolling their own thing.<br />
Something like SetWindowSubclass. Coupled with a &#8220;load this DLL in all processes right now&#8221; call (requiring administrator of course, but bypassing UIPI, sessions, and all other roadblocks) would be perfect. Something like RegisterUserApiHook, but public and less theme-specific.</p>
<p>And yes I know the &#8220;but it could be used by malware!!!111&#8221; excuse applies, but there are many legitimate uses to be able to tweak one&#8217;s system completely.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1344245">
				<div id="div-comment-1344245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344245">
			June 4, 2018 at 9:36 am</a>		</div>

		<p>Load DLL into all processes actually exists, and needs to go away. Application DLLs don&#8217;t behave when loaded into specialized memory-layout processes. The level of compatibility required to make it work is absurd, and the programming shops who want to use this feature aren&#8217;t willing to even try to get it right.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1344265">
				<div id="div-comment-1344265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344265">
			June 4, 2018 at 10:36 am</a>		</div>

		<p>AppInit_DLLs is a bad system, forces you to do stuff in your DllMain.<br />
And most DLLs misbehaving are doing so exactly because there is no proper way of doing API hooking.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1344285">
				<div id="div-comment-1344285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344285">
			June 4, 2018 at 5:10 pm</a>		</div>

		<p>Ideally there would be a separate subsystem for processes that want complete control over their memory space.  But I&#8217;m thinking this is a case of -100 points; apart from Cygwin, I doubt such a subsystem would have seen all that much use.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1344295">
				<div id="div-comment-1344295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344295">
			June 5, 2018 at 2:52 am</a>		</div>

		<p>This is a thing: <a href="https://blogs.msdn.microsoft.com/wsl/2016/05/23/pico-process-overview/" rel="nofollow">https://blogs.msdn.microsoft.com/wsl/2016/05/23/pico-process-overview/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1344515">
				<div id="div-comment-1344515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344515">
			June 5, 2018 at 5:56 pm</a>		</div>

		<p>A long time ago I dealt with something that needed a gigabyte byte array and 64 bit was not yet available. A random 3rd party dll would be a major headache unless I could rebase it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-hans-yperman even depth-5" id="comment-1344685">
				<div id="div-comment-1344685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/hyperman_' rel='external nofollow' class='url'>hyperman_</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344685">
			June 6, 2018 at 11:57 am</a>		</div>

		<p>Got exactly your problem:  A 32 bit  JVM of windows has a heap limit of the maximum contiguous block of addres space it can allocate.  So of course our company bought some security contraption which injects a DLL in every process to lock down the proxy for crying out loud.   It doesn&#8217;t enable ASLR and decided on a base adress somewhere around the 1GB mark to cause maximal damage. No heaps above 600 mb possible.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1344725">
				<div id="div-comment-1344725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344725">
			June 6, 2018 at 3:35 pm</a>		</div>

		<p>On second thoughts, although minimal/pico processes would be nice to have for special cases, the more common problems (such as those Joshua and Hyperman describe) could have been more easily solved by making rebasing mandatory for any DLL loaded via an API hook.</p>
<p>(And perhaps some mechanism for an executable to say &#8220;reserve me a single chunk of X megabytes of address space before you start loading any DLLs&#8221;?)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1345505">
				<div id="div-comment-1345505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harry Johnston</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1345505">
			June 8, 2018 at 11:34 pm</a>		</div>

		<p>&#8230; which of course you can already do.  D&#8217;oh!</p>
<p>@Joshua, wouldn&#8217;t making the array static have solved your problem?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1344225">
				<div id="div-comment-1344225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344225">
			June 4, 2018 at 8:07 am</a>		</div>

		<p>I looked at the actual Detours code being used for IsDebuggerPresent and ChangeDisplaySettingsEx, and that code makes a lot of sense. But whoever wrote that code forgot one thing. If you&#8217;re going to detour something, call LoadLibrary on yourself so that you don&#8217;t get unloaded.</p>
<p>Hint: IsDebuggerPresent() =&gt; false;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1344305">
				<div id="div-comment-1344305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344305">
			June 5, 2018 at 5:00 am</a>		</div>

		<p>Presumably if an actual debugger is present it&#8217;s not beyond the wit of the programmer to set a breakpojnt on IsDebuggerPresent and simulate return true;&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1344405">
				<div id="div-comment-1344405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R P (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344405">
			June 5, 2018 at 8:26 am</a>		</div>

		<p>Back in the day, a program which shall not be named (but which, remarkably, wasn&#8217;t a virus) did IsDebuggerPresent their own way: they&#8217;d do an int 3 and use (presumably) a hardware clock to see how quickly it executed. If it took too long, the program would terminate. And they sprinkled these checks liberally throughout the code, so they quickly got annoying.<br />
If you&#8217;re good enough with your debugger, you can work around that check, too, and without having to find where they&#8217;re checking the clock.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1344275">
				<div id="div-comment-1344275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">adrianm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344275">
			June 4, 2018 at 12:37 pm</a>		</div>

		<p>I had the same problem back in the Amiga days. Two programs patched the same function and if you closed them in the wrong order it crashed.<br />
I solved it by patching the patch-function (SetFunction?) to return a trampoline which could be modified when the programs unhooked themselves. Caused extra indirections of course but lacking memory protection the alternative was a guru meditation.  Worked well until anti-virus became a thing</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1344875">
				<div id="div-comment-1344875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Styles</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180604-00/?p=98905#comment-1344875">
			June 7, 2018 at 9:24 am</a>		</div>

		<p>Quis patchiet ipsos patches?&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

