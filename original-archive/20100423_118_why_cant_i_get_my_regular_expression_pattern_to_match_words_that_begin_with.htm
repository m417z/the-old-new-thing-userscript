<html>
<head>
<title>Why can't I get my regular expression pattern to match words that begin with %?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I get my regular expression pattern to match words that begin with %?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 23, 2010 / year-entry #119</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer asked for help writing a regular expression that, in the customer's words, matched the string %1 when it appeared as a standalone word. Match No match %1 %1b :%1: x%1 One of the things that people often forget to do when asking a question is to describe the things that they tried and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer asked for help writing a regular expression that, in the customer's words, matched the string <code>%1</code> when it appeared as a standalone word.</p>
<table border="1">
<tr>
<th>Match</th>
<th>No match</th>
</tr>
<tr>
<td><tt><u>%1</u></tt></td>
<td><tt>%1b</tt></td>
</tr>
<tr>
<td><tt>:<u>%1</u>:</tt></td>
<td><tt>x%1</tt></td>
</tr>
</table>
<p> One of the things that people often forget to do when asking a question is to <a href="http://blogs.msdn.com/oldnewthing/archive/2010/04/22/10000406.aspx"> describe the things that they tried and what the results were</a>. This is important information to include, because it saves the people who try to answer the question from wasting their time repeating the things that you already tried. </p>
<table border="1">
<tr>
<th>Pattern</th>
<th>String</th>
<th>Result</th>
<th>Expected</th>
</tr>
<tr>
<td><tt>\b%1\b</tt></td>
<td><tt>%1</tt></td>
<td>No match</td>
<td>Match</td>
</tr>
<tr>
<td><tt>\b%1\b</tt></td>
<td><tt>:%1:</tt></td>
<td>No match</td>
<td>Match</td>
</tr>
<tr>
<td><tt>\b%1\b</tt></td>
<td><tt>x%1</tt></td>
<td>Match</td>
<td>No match</td>
</tr>
<tr>
<td><tt>^..$</tt></td>
<td><tt>%1</tt></td>
<td>Match</td>
<td>Match</td>
</tr>
</table>
<p> That last entry was just to make sure that the test app was working, a valuable step when chasing a problem: First, make sure the problem is where you think it is. If the <tt>^..$</tt> hadn't worked, then the problem would not have been with the regular expression but with some other part of the program. </p>
<p> "Is the <tt>\b</tt> operator broken?" </p>
<p> No, the <tt>\b</tt> operator is working just fine. The problem is that the <tt>\b</tt> operator doesn't do what you think it does. </p>
<p> For those not familiar with this notation, well, first you were probably confused by the <tt>\b</tt> in the original question and skipped the rest of this article. Anyway, <tt>\w</tt> matches A through Z (either uppercase or lowercase), a digit 0 through 9, or an underscore. (It's actually more complicated than that, but the above description is good enough for the current discussion.) By contrast, <tt>\W</tt> matches every other character. And in regular expression speak, a "word" is a maximal contiguous string of <tt>\w</tt> characters. Finally, the <tt>\b</tt> operator matches the location between a <tt>\w</tt> and a <tt>\W</tt>, treating the beginning and end of the string as an invisible <tt>\W</tt>. I will stop mentioning the pretend <tt>\W</tt> at the ends of the string; just mentally insert them where applicable. </p>
<p> Okay, let's go back to the original regular expression of <tt>\b%1\b</tt>. Notice that the percent sign is not one of the things which is matched by <tt>\w</tt>. Therefore, in order for the <tt>\b</tt> that comes before it to match, the character before the percent sign must be a <tt>\W</tt>. That way, the <tt>\b</tt> comes between a <tt>\w</tt> and a <tt>\W</tt>. The pattern <tt>\b%1\b</tt> means "A percent sign which comes after a <tt>\w</tt>, followed by a 1 which comes before a <tt>\W</tt>." </p>
<p> Looking at it another way, the string <tt>%1</tt> breaks down like this: </p>
<table border="1">
<tr>
<td><tt>\W</tt></td>
<td>beginning of string (virtual)</td>
</tr>
<td><tt>\W</tt></td>
<td><tt>%</tt></td>
<td><tt>\w</tt></td>
<td><tt>1</tt></td>
<td><tt>\W</tt></td>
<td>end of string (virtual)</td>
</table>
<p> There is a <tt>\b</tt> between the <tt>%</tt> and the <tt>1</tt> and another one between the <tt>1</tt> and the end of the string, but there is no <tt>\b</tt> before the percent sign, because that location has <tt>\W</tt> on both sides. </p>
<p> The question started off on the wrong foot: You are having trouble writing a regular expression that matches a word that begins with <tt>%</tt> because <i>there are no words which begin with <tt>%</tt></i>. The percent sign is not a <tt>\w</tt> and therefore cannot be part of a word. </p>
<p> What the customer is looking for is something more like <tt>(?&lt;!\w)%1\b</tt>, a regular expression which means <i>a percent sign not preceded by a <tt>\w</tt>, followed by a 1 which comes before a <tt>\W</tt></i>. </p>
<p> The customer realized the mistake once it was pointed out. "I keep forgetting that I can't get <tt>%</tt> included in <tt>\w</tt> just because I want it to." </p>
<p><a href="http://blogs.msdn.com/michkap/"> Michael Kaplan</a><a href="http://blogs.msdn.com/michkap/archive/2008/11/10/9056364.aspx"> covered this same topic some time ago</a></p>
<p>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-828133">
				<div id="div-comment-828133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828133">
			April 23, 2010 at 7:26 am</a>		</div>

		<p>As the old adage goes:</p>
<p>“Some people, when confronted with a problem, think &quot;I know, I&#8217;ll use regular expressions.&quot; Now they have two problems.”</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828203">
				<div id="div-comment-828203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828203">
			April 23, 2010 at 9:30 am</a>		</div>

		<p>Was beaten to it by Marquess.. RegEx &quot;work&quot;, but getting it right can be a non-trivial pain..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-828223">
				<div id="div-comment-828223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828223">
			April 23, 2010 at 10:21 am</a>		</div>

		<p>I meant B%1b of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828273">
				<div id="div-comment-828273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Blake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828273">
			April 23, 2010 at 12:55 pm</a>		</div>

		<p>The real problem is the common one of under-specification. &nbsp; Without a more clear defintion of &quot;standalone word&quot; in the customer&#8217;s problem domain, any proposed solution is a crapshoot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828313">
				<div id="div-comment-828313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">HATE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828313">
			April 23, 2010 at 1:27 pm</a>		</div>

		<p>Every time I hear the word RegEx I reach for my gun.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828323">
				<div id="div-comment-828323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://arnshea.blogspot.com/' rel='external nofollow' class='url'>arnshea</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828323">
			April 23, 2010 at 2:00 pm</a>		</div>

		<p>I keep regexlib.com in my link bar just for such occasions. &nbsp;I do have to admit to loving regular expressions though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828373">
				<div id="div-comment-828373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828373">
			April 23, 2010 at 4:08 pm</a>		</div>

		<p>RegEx is very powerful.. so much so that it is easy to fall into the trap of using it.</p>
<p>Not Microsoft bashing here, but there was a recent security exploit for Explorer involving its dynamic generation of RegEx expressions at runtime.</p>
<p>You read that correctly. The dynamic generation of RegEx expressions at runtime.</p>
<p>I will now repeat..</p>
<p>RegEx is very powerful.. so much so that it is easy to fall into the trap of using it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-828213">
				<div id="div-comment-828213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828213">
			April 23, 2010 at 10:19 am</a>		</div>

		<p>Do they really want to match things like &quot;-%1&quot; but not &quot;a%1&quot;?</p>
<p>If so this works*: B%1 where B means &quot;not a word boundary&quot;.</p>
<p>I suspect not, but I can&#8217;t make a guess as to their real requirements without knowing more about the situation.</p>
<p>* It works in Perl 5.8, anyway; every regular expression implementation seems to have their own rules.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828413">
				<div id="div-comment-828413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clovis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828413">
			April 24, 2010 at 1:26 am</a>		</div>

		<p>&quot;A customer asked for help writing a regular expression&quot; &#8211; wow. There isn&#8217;t enough time in the day for that sort of helpless customer. Tell them to Google for it or to switch to Linux.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828433">
				<div id="div-comment-828433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marquess</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828433">
			April 24, 2010 at 2:45 am</a>		</div>

		<p>“Tell them to [&#8230;] switch to Linux.”</p>
<p>Well, now they have *three* problems. How exactly does switching to Linux help with regexes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828483">
				<div id="div-comment-828483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Artem</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828483">
			April 24, 2010 at 11:54 am</a>		</div>

		<p>&quot;Therefore, in order for the b that comes before it to match, the character before the percent sign must be a W.&quot;</p>
<p>According to expression &quot;b%1b&quot; % matches /W so the character before the percent sign should be /w.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828503">
				<div id="div-comment-828503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clovis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828503">
			April 25, 2010 at 12:32 am</a>		</div>

		<p>@Marquess &#8211; &quot;How exactly does switching to Linux help&#8230;&quot; &#8211; by freeing up the MS customer lines for people with useful questions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828513">
				<div id="div-comment-828513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kasper Henriksen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828513">
			April 25, 2010 at 1:51 am</a>		</div>

		<p>Coming from perl, what really puzzles me is why noone bothered to try /(^|s)%1($|s)/ (aaah, line noise!). Or is matching whitespace forbidden magic that should never be used under any circumstance?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828543">
				<div id="div-comment-828543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828543">
			April 25, 2010 at 10:12 pm</a>		</div>

		<p>Clovis: If this were paid support, then the easy questions are welcomed of course.</p>
<p>Btw, I&#8217;m not aware that I can ask this kind of question in Microsoft Support. I should have tried RegEx groups in programming forums first.</p>
<p>That said, I found that lots of RegEx groups are getting less traffic than it used to be&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-828593">
				<div id="div-comment-828593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828593">
			April 26, 2010 at 7:38 am</a>		</div>

		<blockquote><p>
  why noone bothered to try /(^|s)%1($|s)/
</p></blockquote>
<p>That works for one particular definition of &quot;standalone word&quot;, but what if it&#8217;s wrapped in quotes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828603">
				<div id="div-comment-828603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://xkcd.com/208/' rel='external nofollow' class='url'>Bulletmagnet</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828603">
			April 26, 2010 at 7:45 am</a>		</div>

		<p>Help is available:</p>
<p><a rel="nofollow" target="_new" href="http://xkcd.com/208/" rel="nofollow">http://xkcd.com/208/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828643">
				<div id="div-comment-828643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828643">
			April 26, 2010 at 8:57 am</a>		</div>

		<p>nathan_works: The issue is that people use RegEx to solve problems that RegEx can&#8217;t solve (correctly.) For example, you can&#8217;t correctly validate an email address using RegEx. If your RegEx does anything more than just checking for an @ symbol, it&#8217;s probably far too strict and rejecting perfectly valid email addresses.</p>
<p>The &quot;correct&quot; RegEx for validating an email address is something like 3 pages long&#8211; I wish I could find the link. Writing it with traditional code is much easier, quicker, and more explainable to future maintainers.</p>
<p>Also remember that validating an email address also includes validating a domain name, another task which is&#8230; well&#8230; painful at best to do in RegEx alone.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-828653">
				<div id="div-comment-828653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828653">
			April 26, 2010 at 8:59 am</a>		</div>

		<p>Oh, I should also mention that if you accept local domain email addresses, even the @ is optional. :) In theory at least, my co-workers can email me using just &quot;james.schend&quot; without anything else, since we&#8217;re on the same domain.</p>
<p>Anyway, what it boils down to is stop rejecting email addresses with &quot;+&quot; in them. Huge pet peeve.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-828723">
				<div id="div-comment-828723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828723">
			April 26, 2010 at 10:18 pm</a>		</div>

		<p>Same goes for parsing IPv4 addresses. It&#8217;s not 3 pages long, but it&#8217;s a good page or so of dense gobbledygook that&#8217;s unmaintainable.</p>
<p>Especially when you consider how many ways you can enter an IPv4 address.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-828903">
				<div id="div-comment-828903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100423-00/?p=14263#comment-828903">
			April 27, 2010 at 12:26 pm</a>		</div>

		<blockquote><p>
  parsing IPv4 addresses
</p></blockquote>
<p>See Raymond&#8217;s blog entry &quot;How do I write a regular expression that matches an IPv4 dotted address?&quot; <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/05/22/603788.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/05/22/603788.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

