<html>
<head>
<title>How do I convert a method name to a method index for the purpose of INTERFACEINFO?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I convert a method name to a method index for the purpose of INTERFACEINFO?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 29, 2013 / year-entry #87</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130329-00/?p=4813</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The IMessage­Filter::Handle­Incoming­Call method describes the incoming call by means of an INTERFACE­INFO structure: typedef struct tagINTERFACEINFO { LPUNKNOWN pUnk; IID iid; WORD wMethod; } INTERFACEINFO, *LPINTERFACEINFO; The wMethod is a zero-based index of the method within the interface. For example, IUnknown::Query­Interface has index zero, IUnknown::Add­Ref has index one, and IUnknown::Release has index two. If you...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The
<code>IMessage&shy;Filter::<wbr>Handle&shy;Incoming&shy;Call</code>
method describes the incoming call by means of an
<code>INTERFACE&shy;INFO</code> structure:
</p>
<blockquote CLASS=q>
<pre>
typedef struct tagINTERFACEINFO { 
  LPUNKNOWN pUnk; 
  IID iid; 
  WORD wMethod; 
} INTERFACEINFO, *LPINTERFACEINFO;
</pre>
</blockquote>
<p>
The <code>wMethod</code> is a zero-based index of the method
within the interface.
For example,
<code>IUnknown::<wbr>Query&shy;Interface</code>
has index zero,
<code>IUnknown::<wbr>Add&shy;Ref</code>
has index one,
and
<code>IUnknown::<wbr>Release</code>
has index two.
</p>
<p>
If you want to filter on a method in an interface,
you need to know its index.
One way of doing this would be to sit and count the methods,
but this is error-prone,
especially if the interface is still under active
development and is not yet set in stone.
</p>
<p>
C to the rescue.
</p>
<p>
The IDL compiler spits out a C-compatible structure for the
virtual function table,
and you can use that structure to derive the method indices.
For example:
</p>
<pre>
#if defined(__cplusplus) &amp;&amp; !defined(CINTERFACE)
    ...
#else   /* C style interface */
    typedef struct IPersistStreamVtbl
    {
        BEGIN_INTERFACE

        HRESULT ( STDMETHODCALLTYPE *QueryInterface )(
            __RPC__in IPersistStream * This,
            /* [in] */ __RPC__in REFIID riid,
            /* [annotation][iid_is][out] */
            _COM_Outptr_  void **ppvObject);

        ULONG ( STDMETHODCALLTYPE *AddRef )(
            __RPC__in IPersistStream * This);

        ULONG ( STDMETHODCALLTYPE *Release )(
            __RPC__in IPersistStream * This);

        HRESULT ( STDMETHODCALLTYPE *GetClassID )(
            __RPC__in IPersistStream * This,
            /* [out] */ __RPC__out CLSID *pClassID);

        HRESULT ( STDMETHODCALLTYPE *IsDirty )(
            __RPC__in IPersistStream * This);

        HRESULT ( STDMETHODCALLTYPE *Load )(
            __RPC__in IPersistStream * This,
            /* [unique][in] */ __RPC__in_opt IStream *pStm);

        HRESULT ( STDMETHODCALLTYPE *Save )(
            __RPC__in IPersistStream * This,
            /* [unique][in] */ __RPC__in_opt IStream *pStm,
            /* [in] */ BOOL fClearDirty);

        HRESULT ( STDMETHODCALLTYPE *GetSizeMax )(
            __RPC__in IPersistStream * This,
            /* [out] */ __RPC__out ULARGE_INTEGER *pcbSize);

        END_INTERFACE
    } IPersistStreamVtbl;
    ...
#endif  /* C style interface */
</pre>
<p>
(You get roughly the same thing if you
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/10/05/238050.aspx">
use the
<code>DECLARE_<wbr>INTERFACE</code> macros</a>.)
</p>
<p>
After we remove the distractions, the structure is just
</p>
<pre>
    typedef struct IPersistStreamVtbl
    {
        BEGIN_INTERFACE
        HRESULT (*QueryInterface)(...);
        ULONG (*AddRef)(...);
        ULONG (*Release)(...);
        HRESULT (*GetClassID)(...);
        HRESULT (*IsDirty)(...);
        HRESULT (*Load)(...);
        HRESULT (*Save)(...);
        HRESULT (*GetSizeMax)(...);
        END_INTERFACE
    } IPersistStreamVtbl;
</pre>
<p>
From this, we can write a macro which extracts the method index:
</p>
<pre>
// If your compiler supports offsetof, then you can use that
// instead of FIELD_OFFSET.
#define METHOD_OFFSET(itf, method) FIELD_OFFSET(itf##Vtbl, method)

#define METHOD_INDEX(itf, method) \
    ((METHOD_OFFSET(itf, method) - \
      METHOD_OFFSET(itf, QueryInterface)) / sizeof(FARPROC))
</pre>
<p>
The macro works by looking at the position of the method in the
vtable and calculating its index relative to
<code>Query&shy;Interface</code>,
which we know has index zero
for all <code>IUnknown</code>-derived COM interfaces.
</p>
<p>
These macros assume
that the size of a pointer-to-function
is the same regardless of the prototype,
but this assumption is safe to make because it is required by the COM ABI.
</p>
<p>
Observe that in order to get the C-style interfaces,
you must define the <code>CINTERFACE</code> macro before
including the header file.
(And observe that the C-style interfaces are not available
in C++;
you must do this in C.)
</p>
<p>
If the bulk of your program is in C++,
you can slip in a single C file to extract the method indices
and expose them to the C++ side either through global variables
or short functions.
Depending on how fancy your link-time code generator is,
the global variable or function call might even become eliminated.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1048113">
				<div id="div-comment-1048113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130329-00/?p=4813#comment-1048113">
			March 29, 2013 at 7:40 am</a>		</div>

		<p>#define CINTERFACE gives you the C interface even if coding in C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1048133">
				<div id="div-comment-1048133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130329-00/?p=4813#comment-1048133">
			March 29, 2013 at 9:47 am</a>		</div>

		<p>I was surprised when I saw BEGIN_INTERFACE and END_INTERFACE for the first time, because the SDK COM Tutorial Samples didn&#39;t use them. I guess the fact that it&#39;s defined to nothing on x86 platforms has to do with it.</p>
<p>(also, +1 to Adam and Joshua)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048143">
				<div id="div-comment-1048143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SpecLad</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130329-00/?p=4813#comment-1048143">
			March 29, 2013 at 11:03 am</a>		</div>

		<p>What kind of compiler doesn&#39;t support offsetof?</p>
<div class="post">[<em>A very old one. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048103">
				<div id="div-comment-1048103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130329-00/?p=4813#comment-1048103">
			March 29, 2013 at 7:35 am</a>		</div>

		<p>#if defined(__cplusplus) &amp;&amp; !defined(CINTERFACE)</p>
<p> &nbsp; &nbsp;&#8230;</p>
<p>#else &nbsp; /* C style interface */</p>
<p>Wouldn&#39;t this give you the C-style interface if you&#39;re coding in C *or* if you define the CINTERFACE macro in C++? &nbsp;The behavior in C shouldn&#39;t depend on CINTERFACE, since a C compiler cannot compile the C++ interface.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1048223">
				<div id="div-comment-1048223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130329-00/?p=4813#comment-1048223">
			March 30, 2013 at 8:16 am</a>		</div>

		<p>[A very old one. -Raymond]</p>
<p>I found this in stddef of a 16 bit compiler:</p>
<p>#define offsetof(type, member) ((size_t)&amp;(((type *)0)-&gt;member))</p>
<p>I personally can&#39;t imaging any Win32 compiler missing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1048273">
				<div id="div-comment-1048273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130329-00/?p=4813#comment-1048273">
			March 31, 2013 at 4:27 am</a>		</div>

		<p>Are (latest) plaform/windows sdk officially supported with any other compiler than msvc?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

