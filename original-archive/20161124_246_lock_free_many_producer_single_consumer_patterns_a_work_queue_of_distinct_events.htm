<html>
<head>
<title>Lock free many-producer/single-consumer patterns: A work queue of distinct events, order not important</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Lock free many-producer/single-consumer patterns: A work queue of distinct events, order not important</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 24, 2016 / year-entry #247</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161124-00/?p=94775</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Each one is different in its own special way, but we don't care what order they are processed.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Almost done with our miniseries on lock-free
many-producer/single-consumer patterns.
Today, we'll look at the case of
multiple producers generating distinct work items
which cannot be coalesced,
but for which the order of processing is not important.
</p>
<p>
As I noted last time,
you can view this as a scenario built on top of the
previous one.
In the previous scenario, there was a counter of
the number of work items to be done, but the work
itself was fixed.
You can pair this with another data structure that
contains a collection of things to do.
In that case, the 
<code>Do&shy;Some&shy;Work()</code> function
pulls a work item out of the collection.
</p>
<p>
We're going to go one step further:
We're going to let the work item be its own counter.
</p>
<pre>
SLIST_HEADER WorkQueue;

struct alignas(MEMORY_ALLOCATION_ALIGNMENT)
WorkItem : SLIST_ENTRY
{
    ... other stuff ...
};

void Initialize()
{
 InitializeSListHeader(&amp;WorkQueue);
}

void RequestWork(WorkItem* work)
{
 if (InterlockedPushEntrySList(&amp;WorkQueue, work)
                                               == nullptr) {
  // You provide the WakeConsumer() function.
  WakeConsumer();
 }
}

// You call this function when the consumer receives the
// signal raised by WakeConsumer().
void ConsumeWork()
{
 PSLIST_ENTRY entry;
 while ((entry = InterlockedPopEntrySList(&amp;WorkQueue))
                                               != nullptr) {
  ProcessWorkItem(static_cast&lt;WorkItem*&gt;(entry));
  delete entry;
 }
}
</pre>
<p>
We use the lock-free linked list data structure
<code>LIST_<wbr>HEADER</code> to manage our work queue.
To request some work, we push an item onto the front
of the list.
The
<code>Interlocked&shy;Push&shy;Entry&shy;SList</code>
function returns the previous list head.
If that returns <code>nullptr</code>,
then it means that the list was empty,
so we wake up the consumer.
If the list was not empty, then it means that
somebody else woke the consumer,
so we won't do it (to avoid a spurious wake).
</p>
<p>
On the consumer side, we atomically pop work off
the list and process them,
and we stop when there is no more work.
Since the order in which work items are processed
is presumed to be unimportant, we can process
them LIFO.
</p>
<p>
Remember, there is only one consumer,
so if <code>Wake&shy;Consumer</code> is called
while <code>Consume&shy;Work</code> is still
running, the wake will not start a new consumer
immediately.
It will wait for the existing
<code>Consume&shy;Work</code> to complete
before starting a new
<code>Consume&shy;Work</code>.
</p>
<p>
Next time, we'll wrap up by looking at the case
where work items must be processed FIFO.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1275065">
				<div id="div-comment-1275065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161124-00/?p=94775#comment-1275065">
			November 27, 2016 at 8:36 pm</a>		</div>

		<p>What about this sequence?:</p>
<p>1. Producer pushes item. Queue was empty, so WakeConsumer is called.</p>
<p>2. Consumer starts running and makes queue empty again.</p>
<p>3. While consumer is still running, another work item is produced. Queue is empty, so WakeConsumer is called again &#8212; but the first consumer is still in the middle of its loop.</p>
<p>Is this spurious wake just a necessary evil to keep the algorithm simple?</p>
<p>It looks harmless; the way the consumer function is written looks threadsafe to me.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

