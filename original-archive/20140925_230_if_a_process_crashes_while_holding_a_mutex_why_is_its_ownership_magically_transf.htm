<html>
<head>
<title>If a process crashes while holding a mutex, why is its ownership magically transferred to another process?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If a process crashes while holding a mutex, why is its ownership magically transferred to another process?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 25, 2014 / year-entry #231</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>29</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was observing strange mutex ownership behavior. They had two processes that used a mutex to coordinate access to some shared resource. When the first process crashed while owning the mutex, they found that the second process somehow magically gained ownership of that mutex. Specifically, when the first process crashed, the second process could...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was observing strange mutex ownership behavior.
They had two processes that used a mutex to coordinate access to
some shared resource.
When the first process crashed while owning the mutex,
they found that the second process somehow magically gained ownership
of that mutex.
Specifically, when the first process crashed,
the second process could take the mutex,
but when it released the mutex, the mutex was still not released.
They discovered that
in order to release the mutex, the second process had to call
<code>Release&shy;Mutex</code> <i>twice</i>.
It's as if the claim on the mutex from the crashed process was
secretly transferred to the second process.
</p>
<p>
My psychic powers told me that that's not what was happening.
I guessed that their code went something like this:
</p>
<pre>
<i>// code in italics is wrong
bool TryToTakeTheMutex()
{
 return WaitForSingleObject(TheMutex, TimeOut) == WAIT_OBJECT_0;
}</i>
</pre>
<p>
The code failed to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/09/12/463977.aspx">
understand the consequences of <code>WAIT_<wbr>ABANDONED</code></a>.
</p>
<p>
In the case where the mutex was held by the first process when
it crashed,
the second process will attempt to claim the mutex,
and it will succeed,
and the return code from <code>Wait&shy;For&shy;Single&shy;Object</code>
will be
<code>WAIT_<wbr>ABANDONED</code>.
Their code treated that value as
a failure code rather than a modified success code.
</p>
<p>
The second program therefore claimed the mutex <i>without realizing it</i>.
That is what led the customer to believe that ownership was being
magically transferred to the second program.
It wasn't magic.
The second program misinterpreted the return code.
</p>
<p>
The second program saw that
<code>Try&shy;To&shy;Take&shy;The&shy;Mutex</code>
"failed",
and it went off and did something else for a while.
Then the next time it called
<code>Try&shy;To&shy;Take&shy;The&shy;Mutex</code>,
the function succeeded:
It was a successful recursive acquisition,
but the program thought it was the <i>initial</i> acquisition.
</p>
<p>
The customer didn't reply back, so we never found out whether
that was the actual problem,
but I suspect it was.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (29)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1152653">
				<div id="div-comment-1152653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152653">
			September 25, 2014 at 7:08 am</a>		</div>

		<p>Hmmm I made abandoned mutex an asserted condition. Then again, I don&#39;t use cross-process mutexes except for no duplicate process checks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152673">
				<div id="div-comment-1152673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152673">
			September 25, 2014 at 7:30 am</a>		</div>

		<p>My psychic powers appear to be working today as well &#8212; my first thought was &quot;they&#39;re probably not checking for a WAIT_ABANDONED error&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152683">
				<div id="div-comment-1152683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152683">
			September 25, 2014 at 7:40 am</a>		</div>

		<p>@Joshua</p>
<p>Yep, it&#39;s a good idea to assert on WAIT_ABANDONED and terminate yourself, unless you explicitely want to recover from crashed processes (most people won&#39;t want to, but some do).</p>
<p>Unfortunately this requires reading the docs and understanding the return codes.</p>
<p>I made it a habit to terminate the process on any return code I don&#39;t expect, unless it&#39;s a failure HRESULT and I can handle generic failures without knowing why it failed. This way I can at least get a crash dump and examine what happened. Has served me well quite a few times to fix cases which weren&#39;t observed during normal development.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152693">
				<div id="div-comment-1152693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Count Zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152693">
			September 25, 2014 at 7:43 am</a>		</div>

		<p>I never really understood the necessity of WAIT_ABANDONED or the &quot;abandoned&quot; status of the synchronisation objects. I mean it comes with really few benefits, but causes a lot of code break this way. I know they all are actually wrong but they are wrong in a very special and hard-to-detect way. You can force extensive automated and manual testing of those sources and there is a good reason the error will never appear &#8211; since it requires a certain process failing at a certain point to be detectable in an other un-(or loosely) related process. Why don&#39;t &nbsp;they simply become released?</p>
<p>Joshua &#8211; Then what are you use them for? For intraprocess synchronisation you can use Crtital Sections and for &nbsp;communicating a status there are Events and Semaphores. Using a Mutex is a waste of resources (time mainly) if you use it within a process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152703">
				<div id="div-comment-1152703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152703">
			September 25, 2014 at 7:53 am</a>		</div>

		<p>Crashes: they cause trouble for following code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152713">
				<div id="div-comment-1152713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152713">
			September 25, 2014 at 8:17 am</a>		</div>

		<p>@Count Zero: You&#39;re right, the specific object I am using is almost always some kind of event. I tend to use &quot;mutex&quot; as the non-specific object term and interpret it as such on encountering it. I still check for WAIT_ABANDONED and assert.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152723">
				<div id="div-comment-1152723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152723">
			September 25, 2014 at 8:42 am</a>		</div>

		<p>&gt;I never really understood the necessity of WAIT_ABANDONED or the &quot;abandoned&quot; status of the synchronisation objects. </p>
<p>A mutex is there to establish consistency guarantees: it ensures that an object can never be used in an inconsistent state.</p>
<p>Code which wants to modify the state of the object, from one consistent state to another consistent state, may have to proceed through some inconsistent state. &nbsp;But that&#39;s okay while it is holding the mutex; the mutex guarantees that no-one else (that follows the locking rules) will see the inconsistent states.</p>
<p>But if the code doing the modifications crashes holding the mutex, the state may be inconsistent. Thus there are two main choices on mutex-holder-crashes:</p>
<p>1. &nbsp;Leave the mutex held forever and the object will be inaccessible forever.</p>
<p>2. &nbsp;Release the mutex but tell the next guy to claim the mutex that the consistency warranty is null and void.</p>
<p>Case #2 is &quot;mutex abandoned&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152733">
				<div id="div-comment-1152733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152733">
			September 25, 2014 at 9:56 am</a>		</div>

		<p>@Count Zero:</p>
<p>For a bit of an addition to what dave said, consider the following sequence of events.</p>
<p>Process A and Process B use a mutex to control access to a shared file. Process A needs to update the file, but due to a bug causing memory corruption, it has an access violation trying to access some memory address. When the process terminates, it has only managed to update part of the data in the file.</p>
<p>Process B finds that it needs to update the file and tries to obtain the mutex. It gets notified of the wait abandoned state and then goes about updating the file. What will it find the state of the file to be? It could find references to an element that has been removed, or values that are not in sync.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152753">
				<div id="div-comment-1152753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152753">
			September 25, 2014 at 12:00 pm</a>		</div>

		<p>@Joshua: you should perhaps revisit that. Abandoned mutexes are about threads, not processes. It&#39;s a dead thread that causes &quot;abandoned&quot; case (here, it was merely a thread in another process, which is immaterial).</p>
<p>It is possible to build your code to never abandon a mutes held by a thread (always do RAII, /Eha, don&#39;t TerminateThread), in which case you can&#39;t ever abandon an in-process muted. I would never use /Eha&#8230; unless c++/cli </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152763">
				<div id="div-comment-1152763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152763">
			September 25, 2014 at 12:24 pm</a>		</div>

		<p>@Goran: What&#39;s to revisit? I assert on abandoned mutex. I don&#39;t ever choose to abandon one. The only way I know to make that code reachable is somebody else calling TerminateThread on one of my threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152773">
				<div id="div-comment-1152773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152773">
			September 25, 2014 at 5:34 pm</a>		</div>

		<p>@Goran: So now in case of exception you still break the consistency guarantee, but without having the mutex marked as abandoned? You&#39;ve quite possibly done the only thing than corrupting data&#8230;. doing so silently. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152783">
				<div id="div-comment-1152783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark VY</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152783">
			September 25, 2014 at 6:51 pm</a>		</div>

		<p>@Ben: typo alert: &quot;done the only thing than&quot; &#8211;&gt; &quot;done the only thing worse than&quot;??</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152793">
				<div id="div-comment-1152793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DebugErr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152793">
			September 26, 2014 at 12:50 am</a>		</div>

		<p>It&#39;s always good to read &quot;code in italics is wrong&quot; and then the whole code block is in italics :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152803">
				<div id="div-comment-1152803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Count Zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152803">
			September 26, 2014 at 12:56 am</a>		</div>

		<p>@dave &#8211; Theoretically I agree. Only I don&#39;t see any practical use. If we are talking about production code and the IPC data is vital, my program will check the consistency of all input data especially data received through some sort of IPC (to close an obvious attack vector) and will fail gracefully if it is inconsistent. If the IPC data is not vital, my program will happily ignore it. </p>
<p>In the best case scenario the abandoned mutex is only a clue that the data might be inconsistent, but not a guarantee. So it (the abandoned state of the mutex) is only useful if the code is not so badly written (God, how I miss the opportunity to use italic text!), which does no input validation but checks the (extra) state of the sync object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152813">
				<div id="div-comment-1152813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152813">
			September 26, 2014 at 1:40 am</a>		</div>

		<p>I&#39;ve always considered WAIT_ABANDONED to be another one of those &quot;In order to demonstrate our superior intellect, we will now report to you an error condition you cannot handle&quot; cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152823">
				<div id="div-comment-1152823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Count Zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152823">
			September 26, 2014 at 2:20 am</a>		</div>

		<p>@Joshua &#8211; Three objections:</p>
<p>1) As I already said using a Mutex to sync threads in a single process is a waste of resources. You should use CriticalSections, Semaphores or Events for that purpose. You answered &quot;I tend to use &quot;mutex&quot; as the non-specific object term and interpret it as such on encountering it.&quot;. Let&#39;s assume you are using a wrong terminology but the right methods. THen your coding practice is still &quot;a bit&quot; wrong. Let&#39;s see why&#8230;</p>
<p>2) Are you aware that (native/built-in) assertions are only raised in debug builds? So even if you assert on WAIT_ABANDONED, your production code could still break in case of a WAIT_ABANDONED return code. (But it won&#39;t&#8230; see my next point about the why.)</p>
<p>3) According to the documentation of the WaitForSingleObject() API function the WAIT_ABANDONED return code can only be returned if the object you are waiting for is a Mutex (and the process that owns it is terminated without releasing it), so an assertion checking the aforementioned state is kind of pointless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152833">
				<div id="div-comment-1152833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">manuell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152833">
			September 26, 2014 at 2:36 am</a>		</div>

		<p>@Dave You CAN handle the case! That is: 1) aborting or 2) reset state to &quot;consistent&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152863">
				<div id="div-comment-1152863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152863">
			September 26, 2014 at 6:28 am</a>		</div>

		<p>Well, of course &#39;you&#39; (the app programmer) can handle it &#8211; but only if you&#39;re told it needs handling, which is why there is a mutex-abanadoned indication.</p>
<p>In fact you pretty much have to handle it: pick either of the two methods you mention. &nbsp;(Most cases I&#39;d code as &#39;abort&#39;, only making the effort to find and fix inconsistencies in situations that warranted that extra work).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152873">
				<div id="div-comment-1152873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152873">
			September 26, 2014 at 6:30 am</a>		</div>

		<p>Uh-oh: too many daves. &nbsp;I now see that I replied to a reply to capital-D Dave. &nbsp;Sorry for the confusion.</p>
<p><a rel="nofollow" target="_new" href="http://www.poetryfoundation.org/poem/171612">http://www.poetryfoundation.org/&#8230;/171612</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152893">
				<div id="div-comment-1152893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152893">
			September 26, 2014 at 7:05 am</a>		</div>

		<p>@Count Zero: I ship with assertions on. This particular one is in the default case of the select decoding WaitForMultipleObjects. It would also assert on an event signalled off the array (WAIT_OBJECT_0 + 4 on a size 3 array for example).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152903">
				<div id="div-comment-1152903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Count Zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152903">
			September 26, 2014 at 7:19 am</a>		</div>

		<p>@Joshua &#8211; Still there is the problem that you said &quot;You&#39;re right, the specific object I am using is almost always some kind of event.&quot; if by &quot;some kind of event&quot; you mean a windows event, that won&#39;t ever return WAIT_ABANDONED since &#8211; according to the documentation of WaitForSingleObject(), WAIT_ABANDONED can only be returned if the object you are waiting for is a Mutex &#8211; so an assertion checking that state is pointless.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152913">
				<div id="div-comment-1152913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152913">
			September 26, 2014 at 7:46 am</a>		</div>

		<p>Logically speaking, you can only have an &#39;abandoned&#39; state for objects with ownership semantics, which doesn&#39;t include events.</p>
<p>I think the mutex is the only such synch object, at least of those exposed to user mode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152933">
				<div id="div-comment-1152933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152933">
			September 26, 2014 at 8:24 am</a>		</div>

		<p>@Count Zero: On the contrary, ASSERTing against an &quot;impossible&quot; thing that may only happen if your OS has glitched, for example, makes sense. Assertions are for checking that the contracts are followed, exceptions are for checking that the work is being done. If a function promises to return only non-negative numbers, you should ASSERT(f() &gt;= 0). If it instead promises to return negative numbers if there was an error, then you may &quot;if (f() &lt; 0) throw unexpected_error(&quot;I&#39;m lazy lol&quot;);&quot; or something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152943">
				<div id="div-comment-1152943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152943">
			September 26, 2014 at 9:57 am</a>		</div>

		<p>@Joker_vD</p>
<p>&#8230; which usage is exactly in keeping with the meaning of the word &quot;assert&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1152963">
				<div id="div-comment-1152963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152963">
			September 26, 2014 at 10:54 am</a>		</div>

		<p>@Joshua, so you don&#39;t use mutexes except for the top-most reason almost everyone else uses mutexes.</p>
<p>How quaint&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1152883">
				<div id="div-comment-1152883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1152883">
			September 26, 2014 at 6:58 am</a>		</div>

		<p>@dave: Which, ironically, is proof that you can&#39;t have the &#39;case&#39;. *rimshot*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153023">
				<div id="div-comment-1153023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave (the other Dave)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1153023">
			September 27, 2014 at 9:40 pm</a>		</div>

		<p>@manuell:</p>
<p>&gt;You CAN handle the case! That is: 1) aborting</p>
<p>Which is basically just crashing, i.e. not handling it at all.</p>
<p>&gt;or 2) reset state to &quot;consistent&quot;.</p>
<p>That&#39;s like saying that you can handle a crashed hard drive by resetting its state to non-crashed. If you&#39;re doing something sufficiently complex and critical that you need to protect it with a mutex to make sure no-one else disturbs it then it&#39;s not just a case of calling the WinMakeConsistentOnWaitAbandoned() (documented in the appendix to the apocrypha to MSDN) function to fix things.</p>
<div class="post">[<em>True in general, but you may be able to roll back to a previous checkpoint or something like that. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1153193">
				<div id="div-comment-1153193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Count Zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1153193">
			September 30, 2014 at 2:11 am</a>		</div>

		<p>@Joker_vD &#8211; I also use assertions to handle &quot;impossible&quot; conditions, but in my case &quot;impossible&quot; means &quot;very unlikely&quot;. I mainly use assertions for &quot;premature&quot; parameter checking at the beginning of subroutines. Input parameters might be wrong (type/value/missing/some sort of null) during development (mostly they are not), but can not be wrong in production code in real life environment (Since that code has gone through extensive testing.), so they can be checked in assertions.</p>
<p>Invalidity of data received through IPC communication does not fall in the area of &quot;impossible&quot; (or &quot;very unlikely&quot;), since it is received from another module(/process maybe running in another context or on another machine) which can be impersonated, or the actual communication might be corrupted. Even in the heavily tested and (to the boundary of possibilities) bug free production code, so an assertion here seems to be a failure.</p>
<p>@Joshua &#8211; Shipping with assertions on seems to be a bad practice. It is like shipping debug code. It actually cries for a D.O.S. attack (by leaving obvious attack vectors opened) &#8211; not to mention the unnecessary code compiled into your executable and the CPU time eaten by the unnecessary code running on all assertion checking for &quot;impossible&quot; conditions. Oh, and did I mention the (mostly similar) structures built in your executable that can be detected and hijacked for injecting malicious code? I&#39;m not saying you can&#39;t ship stabile, solid and working code with assertions on if your entire coding practice is built around the &quot;ship with assertions on&quot; principle, but there is only two ways for that: You can either have special assertions for &quot;possible impossible&quot; conditions and only include those (which is still misused terminology which can mislead the maintenance programmer), or you can prepare your program to handle a lot of &quot;impossible&quot; situations and fail gracefully over them (which enlarges source code produces unnecessarily huge executables and eats up a lot of resources AND still causes confusion for the maintenance guy).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1153183">
				<div id="div-comment-1153183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140925-00/?p=43983#comment-1153183">
			September 30, 2014 at 12:16 am</a>		</div>

		<p>Perhaps the best decision to appease both sides would be:</p>
<p>* Have WaitForSingleObject/etc return WAIT_OBJECT_0 (or whatever the usual return value would be) instead of WAIT_ABANDONED, but:</p>
<p>* Also have a WasMutexAbandoned function which returns TRUE if the mutex was abandoned since the function was last called (and the function must be called while holding the mutex).</p>
<p>That way, programs that aren&#39;t written to expect abandoned mutexes don&#39;t cause additional bugs (other than the ones caused by inconsistent data), and carefully-written programs can still avoid propagating corrupted data.</p>
<p>Of course, there&#39;s a third side which will say that developers should be forced to deal with the abandoned mutex case (as WAIT_ABANDONED does), and also it&#39;s too late to change anything now.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

