<html>
<head>
<title>How do I fix the problem of a long-running task running on the thread pool persistent thread?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I fix the problem of a long-running task running on the thread pool persistent thread?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 16, 2017 / year-entry #40</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Hey, you, get off of my thread.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we diagnosed a problem caused by
a long-running task on the thread pool persistent thread,
which prevented other tasks which target the persistent thread
from running.
But what motivated the developers to write code that put a long-running
task on the persistent thread in the first place?
</p>
<p>
My theory is that the developers saw
this sentence in the documentation for
<code>Reg&shy;Notify&shy;Change&shy;Key&shy;Value</code>:
</p>
<blockquote CLASS="q"><p>
With the exception of
<b>Reg&shy;Notify&shy;Change&shy;Key&shy;Value</b>
calls with
<b>REG_NOTIFY_THREAD_AGNOSTIC</b> set,
this function must be called on persistent threads.
</p>
</blockquote>
<p>
The reasoning was probably,
"Well, the documentation says that this must be called on
a persistent thread, so we have to schedule it with
the
<code>WT_EXECUTE&shy;IN&shy;PERSISTEN&shy;THREAD</code> flag."
</p>
<p>
That's not what the documentation is trying to say,
but I can't fault them for misinterpreting it that way.
</p>
<p>
What the documentation is trying to say is,
"If you know what's good for you,
you will call this function on a thread that will not exit
until you close the registry key.
If the thread exits prematurely, then the notification will
stop working (in a specific way described below, though you
would be best to just avoid the problem entirely)."
</p>
<p>
The documentation is using the word "persistent thread" here
in a generic sense, meaning any thread that does not exit
(until the thing you care about is over).
It doesn't have to run on the thread pool's persistent thread;
any persistent thread will do.
</p>
<p>
The callback function registered by the application does not
close the registry key handle until it has finished with the
change notification,
so it's fine to run this code on any thread;
it doesn't have to run on the thread pool's persistent thread.
</p>
<p>
Therefore, one fix for the problem is to remove the
<code>WT_EXECUTE&shy;IN&shy;PERSISTEN&shy;THREAD</code> flag.
This runs the work item on a thread pool thread with no special
attributes.
You still want the
<code>WT_EXECUTE&shy;LONG&shy;FUNCTION</code> flag
because the work item runs long:
It runs indefinitely until the monitoring is stopped.
</p>
<p>
However, running a long function with indefinite lifetime
isn't really the thread pool's bread and butter.
The thread pool is really for running large numbers of
short items.
After all, scheduling a work item on the thread pool
that runs indefinitely isn't really all that different
from running a dedicated thread for the work item.
The purpose of the thread pool is to amortize the cost
of starting up a thread over many work items.
Otherwise, the system will be spending more time
starting up threads than it does actually performing work.
</p>
<p>
This benefit doesn't really help work items with indefinite
running time.
From a percentage standpoint, the added cost of starting
up a new thread is not significant if the thread is going
to be running for minutes.
</p>
<p>
But if you look at the work item that the customer was
scheduling,
it's not really doing work most of the time anyway.
It spends most of its time waiting!
Next time, we'll look at another way of designing the
code so that instead of burning
a thread for each active monitoring
request,
it pools the requests.
</p>
<p>
In other words, we're going to use the thread pool as
a thread pool.
Tune in next time for the exciting conclusion.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1285255">
				<div id="div-comment-1285255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285255">
			February 16, 2017 at 9:46 am</a>		</div>

		<p>Exactly; the documentation is unclear, and the flag (in hindsight) could have been named WT_EXECUTE­IN­THE THREADPOOLSONEANDONLYPERSISTEN­THREAD.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1285276">
				<div id="div-comment-1285276" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IChrisI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285276">
			February 16, 2017 at 11:35 am</a>		</div>

		<p>How about WT_EXECUTEBLOCKING?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1285286">
				<div id="div-comment-1285286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285286">
			February 16, 2017 at 12:32 pm</a>		</div>

		<p>&#8220;Why yes, my task is blocking. I&#8217;ll set this flag so the thread pool knows that my task will block for a long time.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1285335">
				<div id="div-comment-1285335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285335">
			February 16, 2017 at 4:00 pm</a>		</div>

		<p>WT_HOGENTIREPOOL</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1285296">
				<div id="div-comment-1285296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285296">
			February 16, 2017 at 12:50 pm</a>		</div>

		<p>Why does the execution time matter in a thread pool? Shouldn&#8217;t it be irrelevant? Shouldn&#8217;t a thread pool be just an array of pre-created threads waiting for work no matter how long it takes? Like a thread pool waiting for HTTP requests &#8211; some may finish in less than a second, while some may stall due to a long SQL query.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1285305">
				<div id="div-comment-1285305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285305">
			February 16, 2017 at 1:46 pm</a>		</div>

		<p>Because if everyone used the thread pool to run long tasks there would be no threads in the thread pool. You also wouldn&#8217;t get any benefit over creating your own threads. The purpose of thread pool is to avoid the overhead of creating a new thread when you only need one for a short time. Rent-a-Thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1285315">
				<div id="div-comment-1285315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285315">
			February 16, 2017 at 2:55 pm</a>		</div>

		<p>Thread pools work best when the work dispatched to the pool threads all takes roughly the same amount of time (give or take, for some definition of roughly).  Consider the case where you have two generators of work that dispatch to the same thread pool, but the work from each generator is off by, say, three orders of magnitude (some work takes 1 second and some work takes 1000 seconds).  Eventually, all (for some definition of all) of the threads will be occupied doing the 1000 second tasks.<br />
Now, in real life, you get a mix of work dispatched to the thread pool, at a mix of frequencies.  But, if you start getting really long work (where really long is measured in comparison to the other tasks dispatched), bad things start to happen.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-even depth-1" id="comment-1285325">
				<div id="div-comment-1285325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285325">
			February 16, 2017 at 3:39 pm</a>		</div>

		<p>I know this is slightly off topic but it would be fun if you could talk a bit about the original shlwapi threadpool from Win2000, it has several interesting reserved parameters (Id, Tag, Priority) that did not survive the move to the new threadpool in XP. And then the threadpool was changed again in Vista.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1285365">
				<div id="div-comment-1285365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Will</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285365">
			February 17, 2017 at 5:05 am</a>		</div>

		<p>I saw this in the doc for RegNotifyChangeKeyValue, so what is it trying to say? &#8220;For the original thread pool API, specify WT_EXECUTEINPERSISTENTTHREAD using the QueueUserWorkItem function.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1285665">
				<div id="div-comment-1285665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170216-00/?p=95455#comment-1285665">
			February 21, 2017 at 12:02 pm</a>		</div>

		<p>It does indeed appear to be incorrectly documented on the MSDN page. So, the client was probably doing it that way because they were told to, simple as that. :-P</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

