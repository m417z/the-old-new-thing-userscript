<html>
<head>
<title>Why does the OpenThread function behave differently when the target thread belongs to another process?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the OpenThread function behave differently when the target thread belongs to another process?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 22, 2014 / year-entry #203</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140822-00/?p=173</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer discovered strange behavior in the Open­Thread function and wondered whether it was expected. We use the Open­Thread function to obtain a thread handle with THREAD_QUE­RY_LIM­IT­ED_IN­FOR­MA­TION, passing in a valid thread ID. We later pass this handle to Get­Exit­Code­Thread to get the thread exit code. We have found that the function succeeds if the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer discovered strange behavior in the <code>Open&shy;Thread</code> function and wondered whether it was expected.</p>
<blockquote class="q"><p> We use the <code>Open&shy;Thread</code> function to obtain a thread handle with <code>THREAD_<wbr>QUE&shy;RY_<wbr>LIM&shy;IT&shy;ED_<wbr>IN&shy;FOR&shy;MA&shy;TION</wbr></wbr></wbr></code>, passing in a valid thread ID. We later pass this handle to <code>Get&shy;Exit&shy;Code&shy;Thread</code> to get the thread exit code. We have found that the function succeeds if the thread in question belongs to another process, provided the thread is still running (has not yet exited). On the other hand, if the thread belongs to our own process, then the call always succeeds regardless of whether the thread is running or not. Is this expected behavior? And can we assume that if <code>Open&shy;Thread</code> fails with <code>ERROR_<wbr>INVALID_<wbr>PARAMETER</wbr></wbr></code>, then it means that the target thread has already exited? </p>
</blockquote>
<p> The <code>Open&shy;Thread</code> function fails if you pass it an invalid thread ID. Thread IDs go invalid when the corresponding thread object is destroyed, and thread objects are destroyed when the thread exits and there are no open handles to the thread. Once a thread object is destroyed, its thread ID becomes invalid and may be re-used by a future thread. </p>
<p> Whether the thread belongs to the same process or a different process does not play a r&ocirc;le in this determination. </p>
<p> My guess is that the reason the call succeeds if the target thread belongs to the same process, even if the target thread has already exited, is something much more mundane: They have a thread handle leak in their application. </p>
<p> The customer never wrote back after receiving this explanation, so we'll never know whether my guess was correct. </p>
<p> <b>Bonus chatter</b>: If you aren't sure whether you are passing a valid thread ID to <code>Open&shy;Thread</code>, then you most likely already have a bug. Since thread IDs can be reused, if you haven't taken other steps to ensure that the thread you want still exists, then it's possible that the thread you want has already exited, the corresponding thread object has been destroyed, and the thread ID has been reused by some other thread. Your <code>Open&shy;Thread</code> call will now <i>succeed</i>, but it will refer to some totally unrelated thread. Your program will most likely get very confused at this point. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1145893">
				<div id="div-comment-1145893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140822-00/?p=173#comment-1145893">
			August 22, 2014 at 7:21 am</a>		</div>

		<p>OpenThread is one of those functions use of which is very suspicious. If you use it, then most likely you do the things wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1146133">
				<div id="div-comment-1146133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140822-00/?p=173#comment-1146133">
			August 22, 2014 at 10:55 pm</a>		</div>

		<p>@alegr1: Pretty much. &nbsp;It&#39;s not very often that I use it (outside of debuggers and crash handlers).</p>
<p>In general, thread IDs should only be used during the lifetime of a thread that you started, and discarded once the thread is terminated and waited upon. &nbsp;So expanding on alegr1&#39;s statement, calling OpenThread probably means that you&#39;re mismanaging the lifetime of your program&#39;s threads, and probably have a bug somewhere that can occur if threads start and stop in a particular order or timing. &nbsp;You generally shouldn&#39;t need OpenThread because you should already have a handle to the thread.</p>
<p>If, when you create a thread, both the new thread and the creating thread need the new thread&#39;s handle, and want to maintain the lifetime of the handle on their own, have the creating thread own the handle returned by _beginthreadex, and have the new thread make a handle to itself using DuplicateHandle of GetCurrentThread(). &nbsp;You can also OpenThread on GetCurrentThreadId()&#8211;this particular use of OpenThread is safe, because a thread always knows that itself still exists. &nbsp;The scenario I&#39;ve describe isn&#39;t all that common, though; most often, a thread doesn&#39;t need its own handle.</p>
<p>Aside: Periodic reminder for your readers that the proper way to check for termination is not the STILL_RUNNING return value of GetExitCodeThread, but rather WaitForSingleObject with a zero timeout.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

