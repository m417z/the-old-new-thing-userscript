<html>
<head>
<title>Why couldn't you have more than one instance of a 16-bit multi-DS program?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why couldn&#8217;t you have more than one instance of a 16-bit multi-DS program?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 8, 2008 / year-entry #46</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Recall that the HINSTANCE identified a set of variables. This causes a bit of a problem if your program has multiple data segments; in other words, multiple sets of variables. In such a program, the code would load the data segment of whatever variable it needed each time it needed to access a variable from...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Recall that the <code>HINSTANCE</code> identified a set of variables. This causes a bit of a problem if your program has multiple data segments; in other words, multiple sets of variables. In such a program, the code would load the data segment of whatever variable it needed each time it needed to access a variable from a different segment.</p>
<p> This was no problem at all for a DLL, since 16-bit DLLs were single-instance. Go ahead, load your selectors whenever you want. Since there's only one copy of each data segment, you can just use them in your code and let the loader fix them up. No matter which processes calls your DLL, you're still good. </p>
<p> But if you are doing this in a program, you run into trouble once the user runs a second copy of the program. All you get is an <code>HINSTANCE</code> to pass to <code>MakeProcInstance</code> (or to infer from your stack selector). In other words, you get one set of variables. If your program uses multiple sets of variables, you don't have a way to access those other variables, and the operating system has no way of telling you where they are. </p>
<p> Now, a sufficiently clever compiler could work around this failure of mathematics. It could store the selectors of the extra data segments into the data segment specified by the <code>HINSTANCE</code>. When the program needed to access a variable from another data segment, it could access them by loading the appropriate selector from the stack segment register (since <nobr>SS == DS</nobr>). I don't know whether anybody actually bothered to write a compiler that did this. </p>
<p> Not that writing one today will win you any accolades since nobody writes 16-bit Windows programs any more. It's one of those things that may have been a neat idea back in its day but today will just get you quizzical looks. Think of it as the computer version of inventing a higher-capacity eight-track cartridge. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-599403">
				<div id="div-comment-599403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Green</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599403">
			February 8, 2008 at 1:10 pm</a>		</div>

		<p>Every time I read one of these posts I get the feeling that 32-bit programming is far more sane than 16-bit programming was. Then again, we really just have complexities of a different sort. Resource consumption just isn&#8217;t as big of a factor in programming nowadays, and articles like this seem almost quaint with that mindset.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599423">
				<div id="div-comment-599423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599423">
			February 8, 2008 at 3:18 pm</a>		</div>

		<p>The fundmental problem here was that the code segments was shared across multiple instances, but the data segments were not, and the way the fixups in NE work means that the selectors were an immediate instead of being stored in a variable in the data segment. OS/2 did not have this problem because of separate process address spaces.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599433">
				<div id="div-comment-599433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tyler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599433">
			February 8, 2008 at 3:30 pm</a>		</div>

		<p>Some day in the not so distant future, we&#8217;ll all be laughing about how constrained for address space 32-bit processes were.</p>
<p>I apologize for being off-topic, Raymond, but how about an article on (the evils of) code/dll injection, if there is such a thing as a way to do it &#8216;safely&#8217; for arbitrary processes?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599443">
				<div id="div-comment-599443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599443">
			February 8, 2008 at 5:01 pm</a>		</div>

		<p>@Matt: &quot;resource consumption just isn&#8217;t a bit of a factor in programming nowadays&quot;. &nbsp;That&#8217;s a fallacy that bites many a designer. &nbsp;I&#8217;ve dealt with designers that had that attitude and did things like create windows with hundreds of controls on them. &nbsp;When deployed these applications caused system-wide instability and the designer couldn&#8217;t figure out why. &nbsp;There are still aspects of development on Windows, even 32-bit, where you must think before you write code. &nbsp;The problem with the hundreds of controls per window is that Windows has a limited number of system-wide GDI handles (apologies for not referencing one of Raymond&#8217;s posts on the topic if he&#8217;s posted about it before). &nbsp;And, to a certain extent you even have that with memory in 32-bit Windows. &nbsp;As applications are using more and more memory people don&#8217;t realized that an application is dealing with a maximum of a 2Gb heap (by default), despite having 4GB of RAM and lots of hard-drive space. &nbsp;Going 64-bit alleviates that memory issue (trading it for a different limit) much the same as going from 16- to 32-bit.</p>
<p>The issues are different but designers still have to account for system limits when designing good software, it&#8217;s always best to design as if everything you use is a limited resource.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599453">
				<div id="div-comment-599453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599453">
			February 8, 2008 at 6:15 pm</a>		</div>

		<p>It&#8217;s always been my experience that the more you increase limits, the more people will find creative ways to fill them up. &nbsp;The biggest advantage of 32 bit was a flat address space (I may be wrong, but protected mode was just a processor feature that happened to coincide with 32 bit).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599463">
				<div id="div-comment-599463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">oj</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599463">
			February 8, 2008 at 8:41 pm</a>		</div>

		<p>&#8230;do I even need to say it?!</p>
<p>Come on, Raymond. Instead of going into such detail about obsolete old Win16 stuff all the time, why not use your obviously COPIOUS amounts of free (work) time, and your extensive knowledge of the inner workings of Win32, to actually give out some useful insights, that might actually help us &#8216;mere mortals&#8217; work around your team&#8217;s various past gaffs so we can write sligthly-less-sucky Windows apps?</p>
<p>Between these kinds of entries and the &#8216;hilarious personal anecdotes&#8217;, there is very little value coming out of this blog imho, given its supposed theme.</p>
<p>3.0</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599473">
				<div id="div-comment-599473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">colin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599473">
			February 8, 2008 at 9:08 pm</a>		</div>

		<p>Then stop reading it, geez! &nbsp;He&#8217;s not your personal problem solver.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599483">
				<div id="div-comment-599483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599483">
			February 8, 2008 at 10:35 pm</a>		</div>

		<p>Funny, I don&#8217;t remember any of this multiple-data segment thing. &nbsp;I was always using the Large memory model, I believe. &nbsp; Coincidently We were trying to remember last week at work what the various models did (tiny, small, medium, large, huge!).</p>
<p>Anyway, a search got me this helpful KB article, which mentions the multiple-DS issue!</p>
<p>Using Large Memory Model, Microsoft C/C++, &amp; Windows 3.1</p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/kb/90294" rel="nofollow">http://support.microsoft.com/kb/90294</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599413">
				<div id="div-comment-599413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599413">
			February 8, 2008 at 3:01 pm</a>		</div>

		<p>Mmmmmm, bringing back hazy memories of such horrors as segments and offsets, different memory models, and how *everybody* on my course in college managed to write &quot;the C program that rebooted your PC&quot; within a week of each other (and all in a totally different way, of course). &nbsp;Makes one realise and appreciate how good we actually do have it these days.</p>
<p>Love these articles, keep it up!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599493">
				<div id="div-comment-599493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599493">
			February 8, 2008 at 11:41 pm</a>		</div>

		<p>&quot;&#8230;and your extensive knowledge of the inner workings of Win32, to actually give out some useful insights, that might actually help us &#8216;mere mortals&#8217; work around your team&#8217;s various past gaffs so we can write sligthly-less-sucky Windows apps?&quot;</p>
<p>Ahh &#8211; But there is value in these posts!</p>
<p>The situations Mr. Chen is describing can apply to any kind of system that shares data in a similiar fashion. It&#8217;s simply a manner of noticing a pattern repeat itself. As programmers, we&#8217;re naturally apt at finding such patterns.</p>
<p>&quot;I&#8217;ve dealt with designers that had that attitude and did things like create windows with hundreds of controls on them. &nbsp;When deployed these applications caused system-wide instability and the designer couldn&#8217;t figure out why.&quot;</p>
<p>Is it just me, or would you think that with a system so <em>vastly</em> used, and designed to be used in this way, Windows UI management code would be optimized enough to be able to handle this? 2GB is <em>alot</em> of memory, when properly utilized.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599513">
				<div id="div-comment-599513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599513">
			February 9, 2008 at 5:55 am</a>		</div>

		<p>mh wrote:</p>
<p>&quot;It&#8217;s always been my experience that the more you increase limits, the more people will find creative ways to fill them up.&quot;</p>
<p>Some programmers don&#8217;t understand that if I buy a new computer, I want it to treat larger data sets, not smaller ones.</p>
<p>With a 80486 DX2 66 with 4 megabytes of RAM, it&#8217;s possible to open large text files with Emacs (e.g. 50 megabytes).</p>
<p>With extremely powerful computers, most modern text editors (including Microsoft Word) painfully open 10 megabytes files!</p>
<p>mh wrote:</p>
<p>&quot;The biggest advantage of 32 bit was a flat address space (I may be wrong, but protected mode was just a processor feature that happened to coincide with 32 bit).&quot;</p>
<p>Yeah, you&#8217;re wrong. The 80286 CPU had a 16 bits protected mode, with a 16MiB physical addressing space. The model wasn&#8217;t flat, of course.</p>
<p>Windows 3.x in standard mode uses it.</p>
<p>Triangle wrote:</p>
<p>&quot;</p>
<p>Windows UI management code would be optimized enough to be able to handle this? 2GB is <em>alot</em> of memory, when properly utilized.</p>
<p>&quot;</p>
<p>No. Read these entries.</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/07/16/3885472.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/07/16/3885472.aspx</a></p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/07/17/3903614.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/07/17/3903614.aspx</a></p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2007/07/18/3926581.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2007/07/18/3926581.aspx</a></p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/03/15/395866.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/03/15/395866.aspx</a></p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/?scid=126962" rel="nofollow">http://support.microsoft.com/?scid=126962</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599523">
				<div id="div-comment-599523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599523">
			February 9, 2008 at 6:11 am</a>		</div>

		<p>@oj: Come on, it&#8217;s a blog not a reference manual or help desk.</p>
<p>Raymond shares what he likes. History blog entries are especially interesting because</p>
<p>oj wrote:</p>
<p>&quot;</p>
<p>Between these kinds of entries and the &#8216;hilarious personal anecdotes&#8217;, there is very little value coming out of this blog imho, given its supposed theme.</p>
<p>&quot;</p>
<p>What&#8217;s the part of &quot;The Old New Thing&quot; title that you didn&#8217;t understand?</p>
<p>Many entries give a look at old things, with a new eye, in a modern world. (Well, that&#8217;s an interpretation that&#8217;s worth another one).</p>
<p>Of course, it&#8217;s also a blog on which Raymond dumps what he found funny, valuable or just want to share.</p>
<p>If you find there&#8217;s very little value coming there, why do you come?</p>
<p>I find these entries valuable because there&#8217;s very little data on the Web about 16 bits Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599533">
				<div id="div-comment-599533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599533">
			February 9, 2008 at 12:06 pm</a>		</div>

		<p>SuperKoko: All you&#8217;ve established is that the current system is inefficient. Obviously it won&#8217;t improve without any change. And don&#8217;t forget that windows 64-bit no longer runs DOS programs, so 16 bit limits don&#8217;t even apply there.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599543">
				<div id="div-comment-599543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599543">
			February 9, 2008 at 4:43 pm</a>		</div>

		<p>&quot;All you&#8217;ve established is that the current system is inefficient. &quot;</p>
<p>Which is exactly what I meant.</p>
<p>&quot;</p>
<p>Obviously it won&#8217;t improve without any change. And don&#8217;t forget that windows 64-bit no longer runs DOS programs, so 16 bit limits don&#8217;t even apply there.</p>
<p>&quot;</p>
<p>Which doesn&#8217;t change my point.</p>
<p>I just explained why Windows aren&#8217;t a cheap resource in Win32, not in Win64.</p>
<p>AFAIK, WinFX doesn&#8217;t have these limitations at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599563">
				<div id="div-comment-599563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ross Bemrose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599563">
			February 10, 2008 at 7:38 am</a>		</div>

		<p>oj:</p>
<p>Given that the title of both the blog (The Old New Thing) and book (The Old New Thing: Practical Development Throughout the Evolution of Windows), I think it&#8217;s fairly clear that Windows history is going to be brought up&#8230; a lot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599583">
				<div id="div-comment-599583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599583">
			February 11, 2008 at 9:14 am</a>		</div>

		<p>You&#8217;ve got a lot of nerve, Mr. Chen. &nbsp;How dare you post to your blog without consulting me on whether I find your topics interesting!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599593">
				<div id="div-comment-599593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599593">
			February 11, 2008 at 10:04 am</a>		</div>

		<p>Those who don&#8217;t understand history are doomed to repeat it, or something like that. &nbsp;To coin a phrase.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599603">
				<div id="div-comment-599603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.mschaef.com' rel='external nofollow' class='url'>mschaef</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599603">
			February 11, 2008 at 10:30 am</a>		</div>

		<p>Ulric wrote: &quot;Coincidently We were trying to remember last week at work what the various models did (tiny, small, medium, large, huge!).&quot;</p>
<p>It&#8217;s been a while, but here&#8217;s how I remember it. Segmented pointers typically fell into three categories: near, far, and huge. A near pointer was only an offset, and had an implied segment. A far pointer was a segment:offset pair, and a huge pointer was a segment:offset pair that was treated with special code to give the illusion of a flat address space. Given that, the models broke down like so:</p>
<p>Tiny = All pointers are near pointers to a shared code and data segment. This is the memory model that was used to compile .COM files, as opposed to .EXE files.</p>
<p>Small = All pointers are near pointers, but there are separate segments for code and data.</p>
<p>Medium = All data pointers are near pointers to one data segment. &nbsp;Multiple code segments are allowed, so code pointers are far. Typically, each compilation unit got its own segment.</p>
<p>Large = Medium, plus far data pointers by default, so there could be multiple data segments.</p>
<p>Huge = Large, but data pointers are huge by default, giving a slow illusion of a flat address space.</p>
<p>Notably, the memory model of a program mainly specified the default properties. For example, it was still possible to explicitly declare a far or huge pointer in a medium model program. There were also differences in standard libraries. Switching from medium model (1 data segment) to large (multiple) typically required a different implementation of malloc/free that could handle far pointers.</p>
<p>My recollection of huge pointers was that they were mainly a curiosity for easily porting programs from larger machines. If you really wanted fast performance with multiple data segments, you explicitly managed the segments yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-599783">
				<div id="div-comment-599783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599783">
			February 11, 2008 at 1:10 pm</a>		</div>

		<p>I predict the segmented memory model is going to come back into fashion when people complain that all their objects are twice the size on 64-bit platforms. Silly masochistic programmers will manually attempt shrinking pointers and sillier compiler vendors will help them out with syntax sugar instead of working on ways apply these optimizations automatically.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-599943">
				<div id="div-comment-599943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-599943">
			February 12, 2008 at 2:12 am</a>		</div>

		<p>SuperKoko: Have you ever actually *tried* to open a 50MB file in emacs on a 4MB computer?</p>
<p>Back in 1995 I was doing profiling and ended up with log files that got up to 60MB. I tried opening the file in emacs but couldn&#8217;t because it had a limit of 32MB. If I had changed the limit, though, it would have sat there thrashing while trying to read the whole file into memory before it would ever let me see the first character of it. For the record, vi and Notepad had similar failures.</p>
<p>Word showed me the first page immediately, then slowly chugged through the whole file to paginate it. Why? Because it was originally designed to run in an environment Raymond describes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-600383">
				<div id="div-comment-600383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080208-00/?p=23513#comment-600383">
			February 12, 2008 at 10:48 pm</a>		</div>

		<p>&quot;Anyway, a search got me this helpful KB article&quot;.</p>
<p>I always wonder why MS removes recent articles from KB while leaving such ancient ones?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

