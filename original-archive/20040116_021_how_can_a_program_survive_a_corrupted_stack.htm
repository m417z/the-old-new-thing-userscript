<html>
<head>
<title>How can a program survive a corrupted stack?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can a program survive a corrupted stack?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 16, 2004 / year-entry #22</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Continuing from yesterday: The x86 architecture traditionally uses the EBP register to establish a stack frame. A typical function prologue goes like this: push ebp ; save old ebp mov ebp, esp ; establish new ebp sub esp, nn*4 ; local variables push ebx ; must be preserved for caller push esi ; must be...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Continuing from
<a HREF=/oldnewthing/archive/2004/01/15/58973.aspx>
yesterday</a>:</p>
<p>
The x86 architecture traditionally uses the EBP register to
establish a stack frame.  A typical function prologue goes like this:
</p>
<pre>
  push ebp       ; save old ebp
  mov  ebp, esp  ; establish new ebp
  sub  esp, nn*4 ; local variables
  push ebx       ; must be preserved for caller
  push esi       ; must be preserved for caller
  push edi       ; must be preserved for caller
</pre>
<p>This establishes a stack frame that looks like this,
for, say, a __stdcall function that takes two parameters.</p>
<table BORDER=0>
<col ALIGN=center>
<tr>
<td STYLE="border: solid 1px buttonshadow; border-top: none"><br>.. rest of stack ..</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">param2</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">param1</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">return address</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EBP</td>
<td>&lt;- EBP</td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local1</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local2</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">...</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local-nn</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EBX</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved ESI</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EDI</td>
<td>&lt;- ESP</td>
</tr>
</table>
<p>
Parameters can be accessed with positive offsets from EBP;
for example, param1 is [ebp+8].  Local variables have negative
offsets from EBP; for example, local2 is [ebp-8].
</p>
<p>
Now suppose that a calling convention or function declaration
mismatch occurs and extra garbage is left on the stack:</p>
<table BORDER=0>
<col ALIGN=center>
<tr>
<td STYLE="border: solid 1px buttonshadow; border-top: none"><br>.. rest of stack ..</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">param2</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">param1</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">return address</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EBP</td>
<td>&lt;- EBP</td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local1</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local2</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">...</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local-nn</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EBX</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved ESI</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EDI</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">garbage</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">garbage</td>
<td>&lt;- ESP</td>
</tr>
</table>
<p>
The function doesn't really feel any damage yet. The parameters
are still accessible at the same positive offsets and the local
variables are still accessible at the same negative offsets.
</p>
<p>
The real damage doesn't occur until it's time to clean up.
Look at the function epilogue:</p>
<pre>
  pop  edi       ; restore for caller
  pop  esi       ; restore for caller
  pop  ebx       ; restore for caller
  mov  esp, ebp  ; discard locals
  pop  ebp       ; restore for caller
  retd 8         ; return and clean stack
</pre>
<p>
In a normal stack, the three "pop" instructions match with the
actual values on the stack and nobody gets hurt. But on the
garbage stack, the "pop edi" actually loads garbage into the EDI
register, as does the "pop esi".  And the "pop ebx" - which thinks
it's restoring the original value of EBX - actually loads the
original value of the EDI register into EBX.  But then the
"mov esp, ebp" instruction fixes the stack back up, so the
"pop ebp" and "retd" are executed with a repaired stack.
</p>
<p>
What happened here?  Things sort of got put back on their feet.
Well, except that the ESI, EDI, and EBX registers got corrupted.
If you're lucky, the values in ESI, EDI and EBX weren't important
and could have survived corruption. Or all that was important was
whether the value was zero or not, and you were lucky and replaced
one nonzero value with another. For whatever reason, the corruption
of those three registers is not immediately apparent, and you end up
never realizing what you did wrong.
</p>
<p>
Maybe the corruption has a subtle effect (say, you changed a value
from zero to nonzero, causing the caller to go down the wrong codepath),
but it's subtle enough that you don't notice, so you ship it,
throw a party, and start the next project.
</p>
<p>
But then a new compiler comes along, say one that does FPO optimization.
</p>
<p>
FPO stands for "frame pointer omission"; the function dispenses with the
EBP register as a frame register and instead just uses it like any other
register.  On the x86,
<a HREF=/oldnewthing/archive/2004/01/05/47685.aspx>
which has comparatively few registers</a>, an extra
arithmetic register goes a long way.
</p>
<p>
With FPO, the function prologue goes like this:</p>
<pre>
  sub  esp, nn*4 ; local variables
  push ebp       ; must be preserved for caller
  push ebx       ; must be preserved for caller
  push esi       ; must be preserved for caller
  push edi       ; must be preserved for caller
</pre>
<p>The resulting stack frame looks like this:</p>
<table BORDER=0>
<col ALIGN=center>
<tr>
<td STYLE="border: solid 1px buttonshadow; border-top: none"><br>.. rest of stack ..</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">param2</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">param1</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">return address</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local1</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local2</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">...</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local-nn</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EBP</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EBX</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved ESI</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">saved EDI</td>
<td>&lt;- ESP</td>
</tr>
</table>
<p>
Everything is now accessed relative to the ESP register.
For example, local-nn is [esp+0x10].
</p>
<p>
Under these conditions, garbage on the stack is much more fatal.
The function epilogue goes like this:</p>
<pre>
  pop  edi       ; restore for caller
  pop  esi       ; restore for caller
  pop  ebx       ; restore for caller
  pop  ebp       ; restore for caller
  add  esp, nn*4 ; discard locals
  retd 8         ; return and clean stack
</pre>
<p>
If there is garbage on the stack, the four "pop" instructions will
restore the wrong values, as before, but this time, the cleanup of
local variables won't fix anything.
The "add esp, nn*4" will adjust the stack by what the function believes
to be the correct amount, but since there was garbage on the stack,
the stack pointer will be off.</p>
<table BORDER=0>
<col ALIGN=center>
<tr>
<td STYLE="border: solid 1px buttonshadow; border-top: none"><br>.. rest of stack ..</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">param2</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">param1</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">return address</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local1</td>
<td></td>
</tr>
<tr>
<td STYLE="border: solid 1px buttonshadow">local2</td>
<td>&lt;- ESP (oops)</td>
</tr>
</table>
<p>
The "retd 8" instruction now attempts to return to the caller,
but instead it returns to whatever is in local2, which is probably
not valid code.
</p>
<p>
So this is an example of where optimizing your code reveals
other people's bugs.
</p>
<p>
Monday, I'll give a much more subtle example of something
that can go wrong if you use the wrong function signature for a
callback.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-136963">
				<div id="div-comment-136963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.geocities.com/pramodbiligiri' rel='external nofollow' class='url'>Pramod</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-136963">
			January 16, 2004 at 9:21 am</a>		</div>

		<p>Absolutely amazing! and extremely useful for students like me!<br />
<br />Btw..in these days of OOPS, SOAP and buzzword-compliance, I can&#8217;t believe that it&#8217;s necessary to know these nitty-gritties! Or do u work in this particularly low level stuff?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136973">
				<div id="div-comment-136973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Larry Osterman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-136973">
			January 16, 2004 at 10:11 am</a>		</div>

		<p>I don&#8217;t work in the nitty gritties, but I&#8217;m constantly being brought into other peoples offices to look at mysterious problems (I called this routine and it corrupted a local variable) simply because I DO know how all this stuff works.</p>
<p>Of course the fact that I figuratively cut my development teeth on MS-DOS 4.0 back in 1984 helps :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-136983">
				<div id="div-comment-136983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-136983">
			January 16, 2004 at 10:24 am</a>		</div>

		<p>If you work in C or C++, you pretty much have no choice but to learn these nitty-gritties because there is no framework around to do this for you. (And even if you are using a framework like VB or the CLR you still need to know this if you intend to interop with C/C++.) When your program crashes mysteriously, you&#8217;re stuck staring at nitty-gritties.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-136993">
				<div id="div-comment-136993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MilesArcher</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-136993">
			January 16, 2004 at 10:32 am</a>		</div>

		<p>This is one of my pet peeves. That someone writing business apps in C++ has to worry about these details. I am hoping that C# takes off.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137013">
				<div id="div-comment-137013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-137013">
			January 16, 2004 at 3:26 pm</a>		</div>

		<p>That&#8217;s not really true, you can program in C++ and not even have to worry about something like *memory management* if you use smart pointers and classes that take care of themselves. Though I agree, C# is a better language than C++ for mediocre programmers to use. Not knowing basic assembly or how the architecture is implemented is like not knowing calculus or linear algebra. You can get away with not knowing it in life but if you ever come across a problem that can be solved using it, you&#8217;ve just saved yourself a lot of time and trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-137023">
				<div id="div-comment-137023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-137023">
			January 16, 2004 at 3:35 pm</a>		</div>

		<p>True, you can get the compiler to do a lot of the work for you, but you have to do it right. A mistake as simple as declaring the same (extern &quot;C&quot;) function two different ways will go unnoticed by the compiler and lead to all sorts of strange crashes.</p>
<p>(Plus of course there are fun things like returning a pointer to a stack-allocated object and using it after the function returns&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-137033">
				<div id="div-comment-137033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.virtualdub.org/' rel='external nofollow' class='url'>Phaeron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-137033">
			January 16, 2004 at 8:56 pm</a>		</div>

		<p>It is very seldom that a C++ programmer needs to keep low-level internals in mind when coding, but that doesn&#8217;t mean you shouldn&#8217;t know of them.  Just knowing how the underlying code generation model works gives you a lot of insight as to why code (mis)behaves as it does, and that is true whether you are using C++ or C#.</p>
<p>You can get very nasty bugs by mismatching calling conventions.  One time I accidentally declared a VFW callback as __cdecl instead of __stdcall, and the result was stack hemorrhaging in the video capture loop.  Normally the capture went OK because the garbage was removed by the frame pointer, but if I went above a certain time limit the thread ran out of stack and crashed.</p>
<p>Sometimes declaration errors can be caught in a program by compiling it as managed C++ (/clr), even if you never intend to actually run or ship it that way.  In particular, One Definition Rule (ODR) violations are caught, such as declaring a structure differently in two modules with the same name.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-146943">
				<div id="div-comment-146943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">floyd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-146943">
			February 22, 2004 at 11:27 am</a>		</div>

		<p>MilesArcher: &quot;This is one of my pet peeves. That someone writing business apps in C++ has to worry about these details. I am hoping that C# takes off.&quot;</p>
<p>I have a different perspective on the issue: If a programming language makes it too easy on the developer chances are that you&#8217;ll wind up with hordes of poor programmers flooding the business. Of course that is not to say that a Java programmer, for example, is a bad programmer per se, just because (s)he doesn&#8217;t have to care about as many details as a C++ programmer ideally would. From personal experience though, I have seen few good programmers that never got in touch with their machines on a low level. Many just never even cared, and it is lack of interest that seperates the boys from the men ;)</p>
<p>So my opinion is that knowledge never hurts. With low-level languages you&#8217;re forced to get to know those details under the hood. This, however, doesn&#8217;t disqualify a language as the tool of choice for a given project.</p>
<p>The problem with C++ is not so much that you have to know about certain details. It&#8217;s more that it was old already at the time it was brand new. There is too much C legacy and those who read D&amp;E know how great C++ would have turned out if it didn&#8217;t have to care to attract C coders.</p>
<p>.f</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-407093">
				<div id="div-comment-407093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dewb.wordpress.com/2005/09/25/using-a-hammer-to-guarantee-a-mathematical-result/' rel='external nofollow' class='url'>Dewb &raquo; Blog Archive &raquo; Using a hammer to guarantee a mathematical result.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-407093">
			August 8, 2006 at 5:30 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://dewb.wordpress.com/2005/09/25/using-a-hammer-to-guarantee-a-mathematical-result/" rel="nofollow">http://dewb.wordpress.com/2005/09/25/using-a-hammer-to-guarantee-a-mathematical-result/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-735153">
				<div id="div-comment-735153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.eurekalog.com/?p=177' rel='external nofollow' class='url'>Access Violation in details post | EurekaLog Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040116-00/?p=41023#comment-735153">
			May 12, 2009 at 4:11 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.eurekalog.com/?p=177" rel="nofollow">http://blog.eurekalog.com/?p=177</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

