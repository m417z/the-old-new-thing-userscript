<html>
<head>
<title>Generating different types of timestamps from quite a long way away</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Generating different types of timestamps from quite a long way away</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 13, 2015 / year-entry #145</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150713-00/?p=45161</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program does the reverse of what we had last time. It takes a point in time and then generates timestamps in various formats. using System; class Program { static void TryFormat(string format, Func<long> func) { try { long l = func(); if ((ulong)l > 0x00000000FFFFFFFF) { Console.WriteLine("{0} 0x{1:X16}", format, l); } else {...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program does the reverse of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/07/06/10624290.aspx">
what we had last time</a>.
It takes a point in time and then generates timestamps in various formats.
</p>
<pre>
using System;

class Program
{
 static void TryFormat(string format, Func&lt;long&gt; func)
 {
  try {
   long l = func();
   if ((ulong)l > 0x00000000FFFFFFFF) {
       Console.WriteLine("{0} 0x{1:X16}", format, l);
   } else {
       Console.WriteLine("{0} 0x{1:X08}", format, l);
   }
  } catch (ArgumentException) {
   Console.WriteLine("{0} - invalid", format);
  }
 }
</pre>
<p>
Like last time, the
<code>Try&shy;Format</code> method executes
the passed-in function inside a try/catch block.
If the function executes successfully, then we
print the result.
There is a tiny bit of cleverness where we choose the output format
depending on the number of bits in the result.
</p>
<pre>
 static long DosDateTimeFromDateTime(DateTime value)
 {
  int result = ((value.Year - 1980) &lt;&lt; 25) |
               (value.Month &lt;&lt; 21) |
               (value.Day &lt;&lt; 16) |
               (value.Hour &lt;&lt; 11) |
               (value.Minute &lt;&lt; 5) |
               (value.Second &gt;&gt; 1);
  return (uint)result;
 }
</pre>
<p>
The <code>Dos&shy;Date&shy;Time&shy;From&shy;Date&shy;Time</code>
converts the <code>Date&shy;Time</code> into a 32-bit
date/time stamp in MS-DOS format.
This is not quite correct because MS-DOS format date/time stamps
are in local time, but we are not converting the incoming
<code>Date&shy;Time</code> to local time.
It's up to you to understand what's going on.
</p>
<pre>
 public static void Main(string[] args)
 {
  int[] parts = new int[7];
  for (int i = 0; i &lt; 7; i++) {
   parts[i] = args.Length &gt; i ? int.Parse(args[i]) : 0;
  }

  DateTime value = new DateTime(parts[0], parts[1], parts[2],
                                parts[3], parts[4], parts[5],
                                parts[6], DateTimeKind.Utc);

  Console.WriteLine("Timestamp {0} UTC", value);

  TryFormat("Unix time",
    () =&gt; <a HREF="http://blogs.msdn.com/b/brada/archive/2003/07/30/50205.aspx">value.ToFileTimeUtc() / 10000000 - 11644473600</a>);
  TryFormat("UTC FILETIME",
    () =&gt; value.ToFileTimeUtc());
  TryFormat("Binary DateTime",
    () =&gt; value.ToBinary());
  TryFormat("MS-DOS Date/Time",
    () =&gt; DosDateTimeFromDateTime(value));
  TryFormat("OLE Date/Time",
    () =&gt; <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/06/22/10623021.aspx">BitConverter.DoubleToInt64Bits</a>(value.ToOADate()));
 }
}
</pre>
<p>
The parameters on the command line are the year, month, day,
hour, minute, second, and millisecond; any omitted parameters
are taken as zero.
We create a UTC <code>Date&shy;Time</code> from it,
and then try to convert that <code>Date&shy;Time</code>
into the other formats.
</p>
<p>
[Raymond is currently away; this message was pre-recorded.]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237556">
				<div id="div-comment-1237556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150713-00/?p=45161#comment-1237556">
			July 13, 2015 at 7:55 am</a>		</div>

		<p>Nitpicky but I&#39;ve only iterate until args.Length and then avoid the unnecessary if in the loop &#8211; works since values are initialized to zero by default anyhow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237546">
				<div id="div-comment-1237546" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150713-00/?p=45161#comment-1237546">
			July 13, 2015 at 8:00 am</a>		</div>

		<p>The DosDateTimeFromDateTime function omits the 1980 year bias.</p>
<div class="post">[<em>Oops. Fixed. Thanks. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237536">
				<div id="div-comment-1237536" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150713-00/?p=45161#comment-1237536">
			July 13, 2015 at 8:17 am</a>		</div>

		<p>Why a are you passing a function taking no arguments to TryFormat, only to execute it there once?</p>
<p>What&#39;s the advantage over evaluating these in main and just passing the generated result?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237526">
				<div id="div-comment-1237526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150713-00/?p=45161#comment-1237526">
			July 13, 2015 at 8:35 am</a>		</div>

		<p>@AC: Look closer. func is called from inside the try block in the function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237496">
				<div id="div-comment-1237496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150713-00/?p=45161#comment-1237496">
			July 13, 2015 at 11:11 am</a>		</div>

		<p>I personally would do checked { } around the integral math in this code and in the previous article. &nbsp;Out-of-range values would throw an exception and thus be eliminated from the output.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1237486">
				<div id="div-comment-1237486" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150713-00/?p=45161#comment-1237486">
			July 13, 2015 at 11:27 am</a>		</div>

		<p>@Myria: Normally, &quot;Little Programs&quot; posts run with a disclaimer that they do little to no error checking. The idea is that Raymond is trying to demonstrate a point, and some times error checking code can get in the way of that point. Especially with nitpickers and so forth.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1237476">
				<div id="div-comment-1237476" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150713-00/?p=45161#comment-1237476">
			July 13, 2015 at 11:39 am</a>		</div>

		<p>@Joe: I&#39;d argue that the error-checking is actually important here: it eliminates invalid time formats from the output, improving its usefulness and not just robustness. &nbsp;Also, Raymond&#39;s original code already has some error-checking, so why not overflow checking as well?</p>
<p>If Raymond&#39;s example programs call, say, CreateWindowExW and don&#39;t check for an error, that&#39;s definitely in the realm of what you&#39;re talking about, since the program will work. &nbsp;Here, and in the previous article, overflow checking is a semantic improvement.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

