<html>
<head>
<title>Separating the metadata from the DIB pixels: Precalculating the BITMAPINFO</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Separating the metadata from the DIB pixels: Precalculating the BITMAPINFO</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 15, 2009 / year-entry #217</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090715-00/?p=17483</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we saw that you can use the SetDIBitsToDevice function to draw a DIB with an alternate color table without having to modify the HBITMAP. In that version of the function, we selected the HBITMAP into a device context in preparation for drawing from it, but in fact that step isn't necessary for drawing....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we saw
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/07/14/9832544.aspx">
that you can use the <code>SetDIBitsToDevice</code> function
to draw a DIB with an alternate color table without having
to modify the <code>HBITMAP</code></a>.
In that version of the function, we selected the <code>HBITMAP</code>
into a device context in preparation for drawing from it,
but in fact that step isn't necessary for drawing.
It was merely necessary to get the original color table
so we could build our grayscale color table.
If you don't care what the original colors are,
then you can skip that step.
And even if you care what the old colors are,
and if you assume that the colors don't change,
then you only need to ask once.
</p>
<p>
To demonstrate, that
all the work of building the <code>BITMAPINFO</code> 
structure could have been done ahead of time,
let's use this alternate version of our program:
</p>
<pre>
HBITMAP g_hbm;
<font COLOR=blue>struct BITMAPINFO256 {
 BITMAPINFOHEADER bmiHeader;
   RGBQUAD bmiColors[256];
} g_bmiGray;
void *g_pvBits;</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
 // change path as appropriate
 g_hbm = (HBITMAP)LoadImage(g_hinst,
                      TEXT("C:\\Windows\\Gone Fishing.bmp"),
                      IMAGE_BITMAP, 0, 0,
                      LR_CREATEDIBSECTION | LR_LOADFROMFILE);</font>
 <font COLOR=blue>if (g_hbm) {
  BITMAP bm;
  if (GetObject(g_hbm, sizeof(bm), &amp;bm) == sizeof(bm) &amp;&amp;
                bm.bmBits != NULL &amp;&amp;
                bm.bmPlanes * bm.bmBitsPixel &lt;= 8) {
   ZeroMemory(&amp;g_bmiGray, sizeof(g_bmiGray));
   HDC hdc = CreateCompatibleDC(NULL);
   if (hdc) {
    HBITMAP hbmPrev = SelectBitmap(hdc, g_hbm);
    UINT cColors = GetDIBColorTable(hdc, 0, 256, g_bmiGray.bmiColors);
    for (UINT iColor = 0; iColor &lt; cColors; iColor++) {
     BYTE b = (BYTE)((30 * g_bmiGray.bmiColors[iColor].rgbRed +
                      59 * g_bmiGray.bmiColors[iColor].rgbGreen +
                      11 * g_bmiGray.bmiColors[iColor].rgbBlue) / 100);
     g_bmiGray.bmiColors[iColor].rgbRed   = b;
     g_bmiGray.bmiColors[iColor].rgbGreen = b;
     g_bmiGray.bmiColors[iColor].rgbBlue  = b;
    }
    g_bmiGray.bmiHeader.biSize        = sizeof(g_bmiGray.bmiHeader);
    g_bmiGray.bmiHeader.biWidth       = bm.bmWidth;
    g_bmiGray.bmiHeader.biHeight      = bm.bmHeight;
    g_bmiGray.bmiHeader.biPlanes      = bm.bmPlanes;
    g_bmiGray.bmiHeader.biBitCount    = bm.bmBitsPixel;
    g_bmiGray.bmiHeader.biCompression = BI_RGB;
    g_bmiGray.bmiHeader.biClrUsed     = cColors;
    <font COLOR=red>g_pvBits                          = bm.bmBits;</font>
    DeleteDC(hdc);
   }
 }</font>
 return TRUE;
}

void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
 <font COLOR=red>if (g_pvBits) {</font>
    <font COLOR=blue>SetDIBitsToDevice(pps-&gt;hdc, 0, 0,
                  g_bmiGray.bmiHeader.biWidth,
                  g_bmiGray.bmiHeader.biHeight, 0, 0,
                  0, g_bmiGray.bmiHeader.biHeight,
                  <font COLOR=red>g_pvBits</font>,
                  (BITMAPINFO*)&amp;g_bmiGray, DIB_RGB_COLORS);
 }</font>
}
</pre>
<p>
I moved the blue code from <code>PaintContent</code>
to <code>OnCreate</code> to demonstrate that pretty much all
of the work we used to do in <code>PaintContent</code>
could have been done ahead of time.
The only other thing we had to do was save the pointer to the bits
so we could pass them to <code>SetDIBitsToDevice</code>.
(Of course, that pointer becomes invalid once the controlling
<code>HBITMAP</code> is destroyed, so be careful!
In practice, you probably would be better off calling
<code>GetObject</code> immediately before drawing
to protect against the case that somebody deleted the bitmap
out from under you.)
</p>
<p>
Next time,
we'll look at another operation we can perform
when we have a <code>BITMAPINFO</code> and a collection of pixels.
</p>
<p>
(Note that there are issues with this technique
which will be taken up on Friday.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-nathan_works even thread-even depth-1" id="comment-755243">
				<div id="div-comment-755243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090715-00/?p=17483#comment-755243">
			July 15, 2009 at 10:10 am</a>		</div>

		<p>Should the pointer (red text) in PaintContent be &quot;g_pvBits&quot; and not &quot;pvBits&quot; ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-755283">
				<div id="div-comment-755283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick Tompson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090715-00/?p=17483#comment-755283">
			July 15, 2009 at 10:38 am</a>		</div>

		<p>&quot;I moved the blue code moved from PaintContent &quot;</p>
<p>I believe it should read &quot;I moved the blue code from PaintContent&quot; (without the second &#8216;moved&#8217;)</p>
<p>;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-755363">
				<div id="div-comment-755363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090715-00/?p=17483#comment-755363">
			July 15, 2009 at 12:35 pm</a>		</div>

		<p>@Nathan works: &nbsp;I think you&#8217;re right about the g_pvBits. &nbsp;Looking over the code, I can&#8217;t see any other reference to that variable.</p>
<p>In addition, it looks like the reference to bmiGray in the PaintContent() function should also be g_bmiGray. &nbsp;In all, I think these are just cut &amp; paste errors from the code yesterday.</p>
<p>I can&#8217;t get over the expression g_pvBits.bm = bm.bmBits. &nbsp;I know it&#8217;s just an example and a warning is clearly expressed in the text about why it is bad, but that just looks evil.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-755493">
				<div id="div-comment-755493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Koss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090715-00/?p=17483#comment-755493">
			July 15, 2009 at 9:51 pm</a>		</div>

		<p>SetDIBitsToDevice() truely is a nice function.</p>
<p>I&#8217;ve used it for some animation stuff (eye candy) where I didnt really want (or need) to mess with any other rendering capabilities (software rendering straight to a simple pixel buffer)</p>
<p>&quot;I have a pointer to some pixel data, please put it on screen.. thanks&quot;</p>
<p>All rendering API&#8217;s should support this sort of functionality, but sadly most do not.</p>
<p>..its all fine and dandy until you work with a language that does not support direct pointer operations (ex, visual basic) and are forced to deal with making secondary copy operations with those API&#8217;s. The value of something like SetDIBitsToDevice really begins to show in these languages.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

