<html>
<head>
<title>Why does RegOpenKey sometimes (but not always) fail if I use two backslashes instead of one?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does RegOpenKey sometimes (but not always) fail if I use two backslashes instead of one?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 4, 2012 / year-entry #234</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that on Windows XP, they observed that their program would very rarely get the error ERROR_INVALID_ARGUMENT when they passed two backslashes instead of one to the Reg­Open­Key­Ex function: RegOpenKeyEx(hk, L"Blah\\\\Oops", ...); After removing C++ escapes, the resulting string passed to Reg­Open­Key­Ex is Blah\\Oops The failure was very sporadic and not reproducible under controlled...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that on Windows&nbsp;XP, they observed that
their program would very rarely get the error
<code>ERROR_<wbr>INVALID_<wbr>ARGUMENT</code> when they passed
two backslashes instead of one to the
<code>Reg&shy;Open&shy;Key&shy;Ex</code> function:
</p>
<pre>
RegOpenKeyEx(hk, L"Blah<font COLOR=red>\\\\</font>Oops", ...);
</pre>
<p>
After removing C++ escapes, the resulting string passed to
<code>Reg&shy;Open&shy;Key&shy;Ex</code> is
</p>
<pre>
Blah<font COLOR=red>\\</font>Oops
</pre>
<p>
The failure was very sporadic and not reproducible under
controlled conditions.
</p>
<p>
Well, first of all, doubled backslashes are not legal in
registry key paths in the first place,
so the first recommendation is <i>stop doubling the backslashes</i>.
Once you fix that, the problem will go away.
</p>
<p>
But the next question is why the error was detected sometimes
but not always.
</p>
<p>
When an application tries to open a registry key, the registry
code first consults a cache of recently-opened keys,
since registry accesses exhibit very high locality of reference.
If a match is found in the cache, then the cached result is used.
Otherwise, it's a cache miss,
and the registry tree is searched in the old-fashioned way.
The registry tree search rejects the double-backslash since it
interprets the path 
<code>Blah\\Oops</code> as
"Look for a subkey called <code>"Blah"</code>,
then a subkey called <code>""</code>,
then a subkey called <code>"Oops"</code>."
The "subkey called <code>""</code>" step fails
because key cannot have an empty string as their name.
</p>
<p>
On the other hand, the code that checks the cache
has a different search algorithm which
happens to have the effect of
collapsing consecutive
backslashes, so the path
<code>Blah\\Oops</code> is interpreted as
"Look for a subkey called <code>"Blah"</code>,
then a subkey called <code>"Oops"</code>."
(Note: "has the effect of". There is no explicit
"collapse backslashes" step; it just turns out that the
way the path is parsed, consecutive backslashes end up
being treated as if they were single backslashes.)
</p>
<p>
In the customer's case, therefore, the key in question is
in the cache most of the time,
which is why the doubled backslash is silently corrected to a
single backslash.
But every so often, the key is not in the cache,
and the old-fashioned search is performed.
And the old-fashioned search rejects the double-backslash
as an invalid path.
</p>
<p>
The discrepancy in the two parsing algorithms
was resolved in Windows Vista,
so you'll see this issue only on Windows&nbsp;XP and earlier.
</p>
<p>
But this historical tidbit does highlight one of the hidden
gotchas of optimization:
If your optimized version
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/08/31/10345196.aspx">
differs from the unoptimized version</a>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/09/29/10217910.aspx">
in cases that are theoretically anyway illegal</a>,
you may find yourself chasing elusive bugs
when somebody accidentally stumbles into those cases
and managed to get away with it... until now.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1014463">
				<div id="div-comment-1014463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014463">
			October 4, 2012 at 8:05 am</a>		</div>

		<p>To be fair, the MSDN documentation for RegOpenKeyEx doesn&#39;t specify the naming rules for registry key paths. Not even in the links in the section describing the lpSubKey parameter. <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms724897(v=vs.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms724897(v=vs.85).aspx</a></p>
<p>Even the MSDN doc describing the structure of the registry is not clear (it only says the key name cannot have  in it, nothing about path delimiting): <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms724946%28VS.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms724946%28VS.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014473">
				<div id="div-comment-1014473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kog999</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014473">
			October 4, 2012 at 8:08 am</a>		</div>

		<p>I really thought you were going to write &quot;doubled backslashes are not legal in registry key paths so the behavior is undefined and anything could happen&quot; and that would be the end of the blog entry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-1014493">
				<div id="div-comment-1014493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014493">
			October 4, 2012 at 8:24 am</a>		</div>

		<p>On the other hand, AFAIK doubling the path separator in paths seems to have no effect (both on Windows and Linux); is this even guaranteed? On the usual MSDN page (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/aa365247%28v=vs.85%29.aspx</a>) I found nothing about this; is this behavior guaranteed in some way or is just an implementation-specific detail (that will never go away since almost everybody relies on it for poor man&#39;s path concatenation)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014483">
				<div id="div-comment-1014483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014483">
			October 4, 2012 at 8:17 am</a>		</div>

		<p>That&#39;s really interesting! &nbsp;It also points out that when you are writing code, another benefit of reusing the same code block (made into a function call, etc.) is that the *exact* same algorithm is used in all of the places that are trying to do the same thing. &nbsp;I have made this subtle mistake myself, where one piece of code tries to do the same thing as another piece of code, and the first set of code almost matches the second set in functionality&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1014563">
				<div id="div-comment-1014563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014563">
			October 4, 2012 at 4:27 pm</a>		</div>

		<p>I can&#39;t help but wonder why at all the cache should parse the key name, rather than treat it as a single unit. A cache must be fast and simple, after all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014573">
				<div id="div-comment-1014573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ry Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014573">
			October 4, 2012 at 4:37 pm</a>		</div>

		<p>There was a developer for distributed.net that found certain iterations of the algorithm for GPUs were much faster than others. He optimized dnet to get the client to use this fast setup as much as possible. Years later, it was found this fast mode was in fact failing silently.</p>
<p>Much hair was pulled in frustration when the bug was fixed, causing key rates to fall greatly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-gregm even thread-even depth-1" id="comment-1014603">
				<div id="div-comment-1014603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/GregM' rel='external nofollow' class='url'>GregM</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014603">
			October 4, 2012 at 6:02 pm</a>		</div>

		<p>&quot;I can&#39;t help but wonder why at all the cache should parse the key name, rather than treat it as a single unit. A cache must be fast and simple, after all.&quot;</p>
<p>Because the currently open key may not be a root key, so the currently open key would need to be combined with the key being opened. &nbsp;It&#39;s likely also much more efficient to store the cache in tree form rather than flat.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014613">
				<div id="div-comment-1014613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A. Skrobov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014613">
			October 5, 2012 at 12:45 am</a>		</div>

		<blockquote><p>
  so the currently open key would need to be combined with the key being opened
</p></blockquote>
<p>Combined? OK. Why do you need to parse the key name for that?</p>
<blockquote><p>
  It&#39;s likely also much more efficient to store the cache in tree form rather than flat.
</p></blockquote>
<p>How can it be more efficient? RegOpenKeyEx receives strings anyway, so you can&#39;t avoid doing string comparison. But why do anything besides it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1014643">
				<div id="div-comment-1014643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014643">
			October 5, 2012 at 3:16 am</a>		</div>

		<p>ASkrobov: Security? If a particular key has an ACL which denies you access, having the cache give you access to some of the contents (or even just disclose information about the presence or absence of subkeys) would be a hole: &#39;bypass traverse checking&#39; is granted by default, but that&#39;s not enough to let you hard-wire it into the caching algorithm for all time! So, if someone accesses &#39;SoftwareExampleBlah&#39;, you still potentially need to check the ACL on &#39;Software&#39; and &#39;SoftwareExample&#39; first.</p>
<p>The other issue of course is that you could open a key to &#39;SoftwareExample&#39;, then ask for &#39;Blah&#39; within that key-handle &#8211; so a simpler cache which just stored &#39;SoftwareExampleBlah&#39; would then need at least some parsing or similar logic anyway. If your cache is tree-based, though, the tree-walk could BE your string comparison step as well, keeping things neat and efficient. (Or just memory-map the hive, walk the on-disk format in every case and let the virtual memory subsystem deal with caching data for you.)</p>
<p><!-- p>In Stefan's quadruple-backslash cases, I suspect something else then parses the registry data he's posted: his "SOFTWARE\\MICROSOFT\\CLOCK" will be written to the registry as "SOFTWARE\MICROSOFT\CLOCK", then some other mechanism will read that value out again and take the first of each pair as an escape, producing "SOFTWAREMICROSOFTCLOCK" in the end.
</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1014713">
				<div id="div-comment-1014713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ltw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1014713">
			October 5, 2012 at 6:30 pm</a>		</div>

		<p>I know how to fix the bug! Just add a timer that checks the value every second so it&#39;s always in the cache! Problem solved :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1015383">
				<div id="div-comment-1015383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121004-00/?p=6413#comment-1015383">
			October 10, 2012 at 9:44 am</a>		</div>

		<p>What happened to the 20+ posts that happened to be here before yesterday?</p>
<div class="post">[<i>When a thread turns to insults, I delete it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

