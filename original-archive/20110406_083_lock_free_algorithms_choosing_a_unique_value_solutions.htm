<html>
<head>
<title>Lock-free algorithms: Choosing a unique value (solutions)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Lock-free algorithms: Choosing a unique value (solutions)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 6, 2011 / year-entry #84</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110406-01/?p=11013</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, I left a warm-up exercise consisting of a code fragment which tries to compute a unique process-wide value. Here it is again: dwUniqueId = InterlockedCompareExchange(&g_dwUniqueId, g_dwUniqueId+1, g_dwUniqueId); It may be easier to enumerate what the function does right rather than what it does wrong. Um, the words are correctly-spelled. That's about it. Damien...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, I left a
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/05/10149783.aspx">
warm-up exercise</a>
consisting of a code fragment which tries to compute a unique
process-wide value.
Here it is again:
</p>
<blockquote CLASS=m>
<pre>
dwUniqueId = InterlockedCompareExchange(&amp;g_dwUniqueId, 
                                        g_dwUniqueId+1, 
                                        g_dwUniqueId);
</pre>
</blockquote>
<p>
It may be easier to enumerate what the function does <i>right</i>
rather than what it does wrong.
</p>
<p>
Um, the words are correctly-spelled.
</p>
<p>
That's about it.
</p>
<p>
Damien was the first to note that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/05/10149783.aspx#10150008">
the author basically reimplemented <code>Interlocked&shy;Increment</code>.
Poorly</a>.
</p>
<p>
As we saw earlier, the algorithm for performing complex calculations with
interlocked functions is
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/09/15/229915.aspx">
(capture, compute, compare-exchange, retry)</a>.
But the above code didn't do any of these things.
</p>
<p>
By failing to capture the values, the code is vulnerable to another
thread modifying the <code>g_dwUniqueId</code> value simultaneously.
This means that the computation step can fail,
because the inconsistent reads of <code>g_dwUniqueId</code>
result in who-knows-what getting passed to the
<code>Interlocked&shy;Compare&shy;Exchange</code> function.
</p>
<p>
Okay, they managed to spell
<code>Interlocked&shy;Compare&shy;Exchange</code> correctly.
</p>
<p>
And then they forgot to retry the operation if the compare-exchange
failed,
which means that they will just proceed with whatever value the
<code>g_dwUniqueId</code>
variable held at the time of the
<code>Interlocked&shy;Compare&shy;Exchange</code> call.
If it just got incremented by another thread, then this thread
and the other thread will be using the same "unique" value.
</p>
<p>
Joshua points out that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/05/10149783.aspx#10150063">
compiler optimization can prevent the capture from being a true capture</a>.
Though I would put the <code>volatile</code> keyword on
<code>g_dwUniqueId</code> rather than <code>scv</code>,
because the volatile object is the global variable, not the local.
Marking the local as volatile forces all accesses to the local to be
executed as written, but the compiler can still optimize the access
to <code>g_dwUniqueId</code>.
(It might, for example, propagate the value in from a previous read
earlier in the function.)
</p>
<p>
And do take into consideration
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/05/10149783.aspx#10150047">
Leo Davidson's warning</a>:
This series of articles is a <i>peek behind the scenes</i> series,
not a <i>here's how you should do it</i> series.
We're taking apart a bunch of toasters to see how they work.
When possible, take advantage of code written by people smarter
than you.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-905943">
				<div id="div-comment-905943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110406-01/?p=11013#comment-905943">
			April 6, 2011 at 9:50 am</a>		</div>

		<p>Windows should make this easier.</p>
<div class="post">[<i>InterlockedIncrement isn&#39;t easy enough? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-905973">
				<div id="div-comment-905973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110406-01/?p=11013#comment-905973">
			April 6, 2011 at 10:26 am</a>		</div>

		<p>@dot</p>
<p>And really, how can Windows make interlocking and synchronization easier. &nbsp;The concepts are simple, but the combination of concept and execution timeline is extremely difficult. &nbsp;Windows can&#39;t make that easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906003">
				<div id="div-comment-906003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110406-01/?p=11013#comment-906003">
			April 6, 2011 at 11:32 am</a>		</div>

		<blockquote><p>
  (It might, for example, propagate the value in from a previous read earlier in the function.)
</p></blockquote>
<p>I would seriously question the ability of the optimizer to optimize if it made that transform; however even if it did the penalty is one pass through the loop on rare occasions rather than the code not working.</p>
<p>Instead of:</p>
<p>@1: &nbsp;mov &nbsp;eax, [g_dwUniqueId]</p>
<p>&nbsp; &nbsp; mov &nbsp;[scv], eax</p>
<p>&nbsp; &nbsp; push [scv]</p>
<p>&nbsp; &nbsp; mov &nbsp;eax, [scv]</p>
<p>&nbsp; &nbsp; inc &nbsp;eax</p>
<p>&nbsp; &nbsp; push eax</p>
<p>&nbsp; &nbsp; lea &nbsp;eax, [g_dwUniqueId]</p>
<p>&nbsp; &nbsp; push eax</p>
<p>&nbsp; &nbsp; call InterlockedCompareExchange</p>
<p>&nbsp; &nbsp; cmp &nbsp;eax, [scv]</p>
<p>&nbsp; &nbsp; jne &nbsp;@1</p>
<p>&nbsp; &nbsp; mov &nbsp;eax, [scv]</p>
<p>&nbsp; &nbsp; mov &nbsp;[dwUniqueId], eax</p>
<p>It would have to write:</p>
<p>@1: &nbsp;mov &nbsp;[scv], edx</p>
<p>&nbsp; &nbsp; push [scv]</p>
<p>&nbsp; &nbsp; mov &nbsp;eax, [scv]</p>
<p>&nbsp; &nbsp; inc &nbsp;eax</p>
<p>&nbsp; &nbsp; push eax</p>
<p>&nbsp; &nbsp; lea &nbsp;eax, [g_dwUniqueId]</p>
<p>&nbsp; &nbsp; push eax</p>
<p>&nbsp; &nbsp; call InterlockedCompareExchange</p>
<p>&nbsp; &nbsp; cmp &nbsp;eax, [scv]</p>
<p>&nbsp; &nbsp; je &nbsp; @2</p>
<p>&nbsp; &nbsp; mov &nbsp;edx, [g_dwUniqueId]</p>
<p>&nbsp; &nbsp; jmp &nbsp;@1</p>
<p>@2: &nbsp;mov &nbsp;eax, [scv]</p>
<p>&nbsp; &nbsp; mov &nbsp;[dwUniqueId], eax</p>
<p>All the same Raymond is correct that volatie on g_dwUniqueId allows for better code as follows:</p>
<p>@1: &nbsp;mov &nbsp;esi, [g_dwUniqueId]</p>
<p>&nbsp; &nbsp; push esi</p>
<p>&nbsp; &nbsp; mov &nbsp;eax, esi</p>
<p>&nbsp; &nbsp; inc &nbsp;eax</p>
<p>&nbsp; &nbsp; push eax</p>
<p>&nbsp; &nbsp; lea &nbsp;eax, [g_dwUniqueId]</p>
<p>&nbsp; &nbsp; push eax</p>
<p>&nbsp; &nbsp; call InterlockedCompareExchange</p>
<p>&nbsp; &nbsp; cmp &nbsp;eax, esi</p>
<p>&nbsp; &nbsp; mov &nbsp;[dwUniqueId], esi</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes odd alt thread-odd thread-alt depth-1" id="comment-906013">
				<div id="div-comment-906013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110406-01/?p=11013#comment-906013">
			April 6, 2011 at 11:38 am</a>		</div>

		<p>The last few posts have sufficiently garbled my brain to the point where programming feels like an exercise in magic and wizardry.</p>
<p>This just goes to show that threaded programming is (almost) always evil.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906033">
				<div id="div-comment-906033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110406-01/?p=11013#comment-906033">
			April 6, 2011 at 12:03 pm</a>		</div>

		<p>@dot</p>
<p>Windows &lt;= 3.x did!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-906043">
				<div id="div-comment-906043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A very bad programmer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110406-01/?p=11013#comment-906043">
			April 6, 2011 at 12:04 pm</a>		</div>

		<p>This series has once again made me realize that I am in the wrong field and would better server mankind as either a shepherd or the owner of a tiki bar.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-906183">
				<div id="div-comment-906183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110406-01/?p=11013#comment-906183">
			April 7, 2011 at 5:36 am</a>		</div>

		<p>I think maybe what the programmer of that horrible snippet thought was that &quot;Interlocked&quot; in InterlockedCompareExchange implied an invisible mutex around the entire function call expression, including the argument expressions. That would (a) explain how anyone thought this code could possibly be correct, but (b) betray a fundamental misunderstanding of how the C(++) programming language works.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

