<html>
<head>
<title>What happens if you call VirtualAlloc to MEM_COMMIT a page you never MEM_RESERVE?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What happens if you call VirtualAlloc to MEM_COMMIT a page you never MEM_RESERVE?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 8, 2015 / year-entry #211</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that while trying to solve a problem with their program, they noticed that they had been calling Virtual­Alloc incorrectly for years. They were able to reduce it into a simple program: #include <windows.h> #include <stdio.h> #include <tchar.h> int _tmain(int argc, _TCHAR* argv[]) { LPVOID base = VirtualAlloc(NULL, 4096, MEM_COMMIT, PAGE_READWRITE); _tprintf(TEXT("Allocated at...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that while trying to solve a problem
with their program, they noticed that they had been
calling <code>Virtual&shy;Alloc</code> incorrectly
for years.
They were able to reduce it into a simple program:
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include &lt;tchar.h&gt;

int _tmain(int argc, _TCHAR* argv[])
{
 LPVOID base = VirtualAlloc(NULL, 4096, MEM_COMMIT, PAGE_READWRITE);
 _tprintf(TEXT("Allocated at %p\n"), base);
 return 0;
}
</pre>
<p>
First of all, thank you for
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/10/18/10457796.aspx">
reducing</a>
your program.
That really focuses the investigation.
</p>
<p>
The customer noted that their code was passing the
<code>MEM_<wbr>COMMIT</code> flag without the
<code>MEM_<wbr>RESERVE</code> flag,
a scenario that is specifically called out
in the documentation:
</p>
<blockquote CLASS=q><p>
The function fails if you attempt to commit a page that has not been reserved. 
The resulting error code is <b>ERROR_<wbr>INVALID_<wbr>ADDRESS</b>.
</p>
</blockquote>
<p>
But their call to
<code>Virtual&shy;Alloc</code> was succeeding!
The customer suspected that this was
not actually the source of their problem,
but they wanted to double-check that perhaps their incorrect
use of
<code>Virtual&shy;Alloc</code> was somehow indirectly
contributing to it.
Specifically, they were wondering if what they're doing is okay,
or whether they should always use
<code>MEM_<wbr>RESERVE | MEM_<wbr>COMMIT</code>.
</p>
<p>
What the customer found is a compatibility hack.
A lot of application forget to set the
<code>MEM_<wbr>RESERVE</code> flag when they
<code>MEM_<wbr>COMMIT</code>,
so the memory manager lets it slide if they also pass
<code>lpAddress = NULL</code>,
indicating that they are requesting a new allocation
rather than modifying an existing one.
</p>
<p>
The problem is that MSDN fell into the trap of over-documenting.
Instead of documenting the contract, MSDN documented the implementation.
The contract is "A page being committed must also be reserved."
If you try to commit a page that is not also reserved,
then the behavior is unspecified.
It is therefore valid for the implementation to treat the violation
as "Sorry, you lose,"
or "Okay, I'll let you do it, but just this time."
</p>
<p>
It appears that some time after this issue was identified,
the MSDN documentation was revised.
But they didn't revise it by documenting the contract.
They revised it by documenting the implementation <i>more precisely</i>.
</p>
<blockquote CLASS=q><p>
Attempting to commit a specific address range
by specifying <b>MEM_<wbr>COMMIT</b>
without <b>MEM_<wbr>RESERVE</b>
and a non-<b>NULL</b> <i>lpAddress</i>
fails unless the entire range has already been reserved.
The resulting error code is <b>ERROR_<wbr>INVALID_<wbr>ADDRESS</b>.
</p>
</blockquote>
<p>
My recommendation to the customer was to switch to
<code>MEM_<wbr>RESERVE | MEM_<wbr>COMMIT</code>,
since that is the preferred behavior
and therefore the one least likely to trigger compatibility behavior.
But the fact that they were accidentally omitting the
<code>MEM_<wbr>RESERVE</code> was not related to their problem,
and they should keep looking.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1199221">
				<div id="div-comment-1199221" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dirk gently</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199221">
			October 8, 2015 at 8:30 am</a>		</div>

		<p>So, doesn&#39;t the implementation become the contract as soon as you document it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1199211">
				<div id="div-comment-1199211" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199211">
			October 8, 2015 at 8:54 am</a>		</div>

		<p>I wish there were an easy, low-overhead way to know when your code has triggered a compatibility shim. &nbsp;Like if AppVerifier screamed or if there were notices in the debug output when running your app in the debugger. &nbsp;Developers used to have checked versions of Windows, with more thorough parameter checking on the APIs. &nbsp;Without such things, more and more code will be developed that become dependent on these shims, and there will inevitably be cases where the shim won&#39;t cover all the cases or Microsoft will have to abandon the shim in order to move forward.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1199201">
				<div id="div-comment-1199201" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 230985712</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199201">
			October 8, 2015 at 9:53 am</a>		</div>

		<p>Adrian,</p>
<p>I haven&#39;t had an opportunity to look at an MSDN subscription lately. Do they no longer provide checked builds?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mngoldeneagle odd alt thread-odd thread-alt depth-1" id="comment-1199171">
				<div id="div-comment-1199171" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199171">
			October 8, 2015 at 10:56 am</a>		</div>

		<p>@Random User 230985712: Not for Windows 10, apparently. &nbsp;I can find checked builds for the earlier releases though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1199161">
				<div id="div-comment-1199161" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199161">
			October 8, 2015 at 11:00 am</a>		</div>

		<p>I would dare say that *most* programs calling VirtualAlloc pass MEM_COMMIT without MEM_RESERVE. &nbsp;This compatibility functionality is embedded into NtAllocateVirtualMemory, rather than a compatibility shim. &nbsp;I think it&#39;s too late to change it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1199151">
				<div id="div-comment-1199151" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199151">
			October 8, 2015 at 11:45 am</a>		</div>

		<p>I think the implementation worked that way from the day 1. The flags specify what should be the result of the function, not what should be all the intermediate steps to get to that result. If you ask for new committed memory, you don&#39;t specify that you want the MM first reserve it and them immediately commit it. That must have been the developers intention all along.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kwadwomi even thread-even depth-1" id="comment-1199071">
				<div id="div-comment-1199071" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Master+Programmer' rel='external nofollow' class='url'>Master Programmer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199071">
			October 8, 2015 at 4:25 pm</a>		</div>

		<p>It wouldn&#39;t be that difficult to scream if the program is being run under a debugger. That way it forces the developers to fix it (they won&#39;t be able to debug otherwise). I believe the heap manager does that if you start under a debugger and cause a memory problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1199051">
				<div id="div-comment-1199051" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199051">
			October 8, 2015 at 10:51 pm</a>		</div>

		<p>[It wouldn&#39;t be that difficult to scream if the program is being run under a debugger.]</p>
<p>The kernel mode code inside APIs don&#39;t know what is the calling process, so there is a problem.</p>
<p>On the other hand, &quot;Just throw when run in Checked build&quot; is much much easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00037ffe8545d1b7 even thread-even depth-1" id="comment-1199041">
				<div id="div-comment-1199041" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/David+Totzke' rel='external nofollow' class='url'>David Totzke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1199041">
			October 9, 2015 at 4:20 am</a>		</div>

		<p>I see this listed in my subscription:</p>
<p>Windows 10 Symbols Debug/Checked (x64) &#8211; (English)</p>
<p>en_windows_10_symbols_debug_checked_x64_6903166.msi</p>
<p>It&#39;s only 859 Mb so maybe you just install it over a normal Windows 10 installation? &nbsp;Others may know.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198861">
				<div id="div-comment-1198861" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quacka6</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1198861">
			October 11, 2015 at 5:39 pm</a>		</div>

		<p>@David, That&#39;s just the symbols</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1198801">
				<div id="div-comment-1198801" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1198801">
			October 12, 2015 at 2:48 pm</a>		</div>

		<p>&quot;if (addr == 0 &amp;&amp; (flags &amp; MEM_COMMIT)) flags |= MEM_RESERVE;&quot; compiles to less machine code than &quot;if ((flags &amp; (MEM_COMMIT|MEM_RESERVE) == MEM_COMMIT) &amp;&amp; CallingProcessWantsToBeLinted()) { ReportError(); }&quot;, and adding the second bit doesn&#39;t eliminate the need for the first bit, and the API is more ergonomic with this feature anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198461">
				<div id="div-comment-1198461" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151008-00/?p=91411#comment-1198461">
			October 14, 2015 at 9:29 am</a>		</div>

		<p>I just happened to discover I&#39;m among those who made this mistake (NULL address, MEM_COMMIT but no MEM_RESERVE) in working on some code yesterday. One program fixed, millions to go. Really fortuitous discovery while this blog post is still open for comments as this code doesn&#39;t even get opened every year.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

