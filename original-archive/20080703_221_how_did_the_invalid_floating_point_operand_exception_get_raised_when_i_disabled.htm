<html>
<head>
<title>How did the invalid floating point operand exception get raised when I disabled it?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How did the invalid floating point operand exception get raised when I disabled it?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 3, 2008 / year-entry #222</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we learned about the dangers of uninitialized floating point variables but left with a puzzle: Why wasn't this caught during internal testing? I dropped a hint when I described how SNaNs work: You have to ask the processor to raise an exception when it encounters a signaling NaN, and the program disabled that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Last time, we learned about <a href="http://blogs.msdn.com/oldnewthing/archive/2008/07/02/8679191.aspx"> the dangers of uninitialized floating point variables</a> but left with a puzzle: Why wasn't this caught during internal testing?</p>
<p> I dropped a hint when I described how <code>SNaN</code>s work: You have to ask the processor to raise an exception when it encounters a signaling NaN, and the program disabled that exception. Why was an exception being raised when it had been disabled? </p>
<p> The clue to the cause was that the customer that was encountering the crash reported that it tended to happen after they printed a report. It turns out that <a href="http://blogs.msdn.com/oldnewthing/archive/2008/07/02/8679191.aspx#8681705"> the customer's printer driver</a> was re-enabling the <i>invalid operand</i> exception in its <code>DLL_PROCESS_ATTACH</code> handler. Since the exception was enabled, the <code>SNaN</code> exception, which was previously masked, was now live, and it crashed the program. </p>
<p> I've also seen DLLs change the floating point rounding state in their <code>DLL_PROCESS_ATTACH</code> handler. This behavior can be traced back to <a href="http://blogs.msdn.com/oldnewthing/archive/2008/07/02/8679191.aspx#8681805"> old versions of the C runtime library</a> which reset the floating point state as part of their <code>DLL_PROCESS_ATTACH</code>; this behavior was corrected as long ago as 2002 (possibly even earlier; I don't know for sure). Obviously that printer driver was even older. Good luck convincing the vendor to fix a bug in a driver for a printer they most likely don't even manufacture any more. If anything, they'll probably just treat it <a href="http://blogs.msdn.com/oldnewthing/archive/2003/12/19/44644.aspx"> as incentive for you to buy a new printer</a>. </p>
<p> When you load external code into your process, you implicitly trust that the code won't screw you up. This is just another example of how a DLL can inadvertently screw you up. </p>
<p> <b>Sidebar</b> </p>
<p> One might argue that the <code>LoadLibrary</code> function should save the floating point state before loading a library and restore it afterwards. This is an easy suggestion to make in retrospect. Writing software would be so much easier if people would just extend the courtesy of coming up with a comprehensive list of "bugs applications will have that you should protect against" <i>before</i> you design the platform. That way, when a new class of application bugs is found, and they say "You should've protected against this!", you can point to the list and say, "Nuh, uh, you didn't put it on the list. You had your chance." </p>
<p> As a mental exercise for yourself: Come up with a list of "all the bugs that the <code>LoadLibrary</code> function should protect against" and <a href="http://blogs.msdn.com/oldnewthing/archive/2008/01/24/7213752.aspx"> how the <code>LoadLibrary</code> function would go about doing it</a>. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-644303">
				<div id="div-comment-644303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644303">
			July 3, 2008 at 10:12 am</a>		</div>

		<p>LoadLibrary shouldn&#8217;t have to protect against anything; it&#8217;s not its job.</p>
<p>The problem lies with a design where loading untrusted (meaning potentially buggy, not &quot;wanting to steal your secrets&quot;) libraries in your process state is not only common, but expected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-644323">
				<div id="div-comment-644323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644323">
			July 3, 2008 at 10:15 am</a>		</div>

		<p>Would a white list be better than a black list ? Trying to word it right, something like: be aware that these things can be changed when a library is loaded. Though I guess both lists might be very long.. I&#8217;ll admit, changing the FP exceptions never would have crossed my mind..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644343">
				<div id="div-comment-644343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644343">
			July 3, 2008 at 10:31 am</a>		</div>

		<p>At the very least, give the application some control. I didn&#8217;t like Dells crapware to start with, but the wxVault.dll which they force on every application infects all applications.</p>
<p>Hindsight is not having a complete list of bugs that LoadLibrary should fix. Hindsight is not having the printer driver in-process in the first place. Just define a nice COM interface. For backcompat, load the old DLL-based drivers in a COM wrapper. That way, only that one executable needs to worry about such pesky drivers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644363">
				<div id="div-comment-644363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CPG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644363">
			July 3, 2008 at 10:35 am</a>		</div>

		<p>For me dlls that make calls to SetUnhandledExceptionFilter removing my minidump reporter really annoy me. &nbsp;There are certain global aspects like exceptions and their handlers I wish could be protected. &nbsp;We ended up using detours to find out who was taking over the filter. &nbsp;In one case it was a xerox printer driver; in other it was a video driver.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644373">
				<div id="div-comment-644373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644373">
			July 3, 2008 at 10:46 am</a>		</div>

		<p>Bob: &nbsp;Looks like Anthony Wieser in yesterday&#8217;s post is the winner! &nbsp;Rod Roddy, tell him what prize he&#8217;s won today!</p>
<p>Rod: Anthony Wieser, pack your bags, because you&#8217;re are going to faaaabulous Acapulco! &nbsp;You and a special guest will be spending four days and three nights in the glamorous, five-star Hotel Paradiso! &nbsp;You&#8217;ll be dining the lap of luxury at Restaurant d&#8217;Ennui, and having your cares massaged away at the Bango di Fango Spa. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644383">
				<div id="div-comment-644383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TEHb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644383">
			July 3, 2008 at 11:03 am</a>		</div>

		<p>DLLs writeen in Borland C++ love to enable FP exceptions. Recently we had the same bug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644393">
				<div id="div-comment-644393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bcthanks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644393">
			July 3, 2008 at 12:32 pm</a>		</div>

		<p>&quot;Good luck convincing the vendor to fix a bug in a driver for a printer they most likely don&#8217;t even manufacture any more.&quot;</p>
<p>This is the exact experience that led Richard Stallman to create the GNU Public License 20 years ago: if the vendor won&#8217;t fix their bugs, then at least give the customer a chance fix them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644413">
				<div id="div-comment-644413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cereal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644413">
			July 3, 2008 at 12:46 pm</a>		</div>

		<p>Write an exception handler to catch floating point exceptions, disable them and resume execution?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644433">
				<div id="div-comment-644433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644433">
			July 3, 2008 at 1:27 pm</a>		</div>

		<p>This problem, like most, will not be solved until somebody figures out a way to punch somebody in the face over the Internet.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644443">
				<div id="div-comment-644443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry Kolosov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644443">
			July 3, 2008 at 1:38 pm</a>		</div>

		<p>1) Thou shalt initialize your variables.</p>
<p>2) Thou shalt not disable exceptions. Catch them!</p>
<p>Can&#8217;t wait to see the installment about the dangers of unreferencing the NULL pointer&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644453">
				<div id="div-comment-644453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644453">
			July 3, 2008 at 1:47 pm</a>		</div>

		<p>This is why having having state that should be local to a piece of code be implemented as global state is a bad idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-644463">
				<div id="div-comment-644463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644463">
			July 3, 2008 at 2:03 pm</a>		</div>

		<p>But protecting the state in LoadLibrary is not enough. Presumably there&#8217;s a reason why they wanted to handle floating point that way. You have to intercept every call to the DLL and change the flags back to the way that the DLL wants them. The problem then becomes callbacks &#8211; do you set the state back to the way the caller wanted it? How do you know whether an arbitrary parameter to a function is a function pointer? How does Windows even know how many parameters a function takes and how deep to look, in the general case?</p>
<p>Basically I don&#8217;t think there&#8217;s a viable workaround here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-friedicusrediculoushotmail-com even thread-even depth-1" id="comment-644473">
				<div id="div-comment-644473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Fried' rel='external nofollow' class='url'>Mike Fried</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644473">
			July 3, 2008 at 2:08 pm</a>		</div>

		<p>This reminds me of an old crashing bug I fixed a very long time ago. There was this tiny snippet of code somewhere which didn&#8217;t protect against division by zero. The exception for dividing by zero wasn&#8217;t handled because the flags were set so that dividing by zero wasn&#8217;t a fault.</p>
<p>I talked with some other engineers, and they had also experienced this &quot;printer driver sometimes leaves CPU registers in undetermined state&quot; issues before.</p>
<p>In addition to checking the divide by zero, my fix added a check which was put somewhere global to assert (in debug builds) that the CPU registers were correct, and it would then fix them up so that the chances of this problem affecting other parts of the application were negated.</p>
<p>The amusing thing is that after fixing this bug, I was given several bugs over the years for this assertion firing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644483">
				<div id="div-comment-644483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ConradHex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644483">
			July 3, 2008 at 3:40 pm</a>		</div>

		<p>This article (and the predecessor) were a revelation to me. I&#8217;m pretty sure I encountered this exact bug on a PC game I was working on, 5 or 6 years ago.</p>
<p>The game worked perfectly, except on one machine that was offsite. There it would crash, and when I hooked up a debugger (had to drive like 2 hours to the site) it was getting a floating-point exception. We ended up having to put all kinds of special code in to make sure we weren&#8217;t ever dividing by zero, if I recall correctly. (And we had a LOT of floating-point math code.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644503">
				<div id="div-comment-644503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644503">
			July 3, 2008 at 4:44 pm</a>		</div>

		<p>Then start an ephemeral thread and have it to call LoadLibrary. Any FP interrupt mask changes will be gone with the thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644543">
				<div id="div-comment-644543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644543">
			July 3, 2008 at 8:50 pm</a>		</div>

		<p>I&#8217;m with Michiel. &nbsp;Printer drivers should have been loaded out-of-process, so that they can&#8217;t interfere with the app.</p>
<p>(It&#8217;s actually really scary when you look at the list of DLLs being attached to any given process. &nbsp;It&#8217;s a wonder with all that third-party code hooking into all sorts of weird places that the programs work at all. &nbsp;Oh wait, a lot of them don&#8217;t.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644563">
				<div id="div-comment-644563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644563">
			July 4, 2008 at 2:22 am</a>		</div>

		<p>More on this:</p>
<p><a rel="nofollow" target="_new" href="http://www.virtualdub.org/blog/pivot/entry.php?id=53" rel="nofollow">http://www.virtualdub.org/blog/pivot/entry.php?id=53</a></p>
<p>BTW, loading shell32.dll by itself loads a lot of DLLs, and displaying a dialog like Open/Save loads more include shell extensions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644583">
				<div id="div-comment-644583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644583">
			July 4, 2008 at 2:55 am</a>		</div>

		<p>&quot;For me dlls that make calls to SetUnhandledExceptionFilter removing my minidump reporter really annoy me. &quot;</p>
<p>Especially when they do not chain back to the previous handler. There is an article on Nynaeve talking about this, but that seems a little overblown. It can be a security hole, yes, but they are talking about a general problem that is not limited to this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644623">
				<div id="div-comment-644623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">no one in particular</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644623">
			July 4, 2008 at 6:00 am</a>		</div>

		<p>Wow &#8211; Raymond Chen as Open-Source (-Driver) evangelist!</p>
<p>I had never dreamed that!</p>
<p>&quot;Good luck convincing the vendor to fix a bug in a driver for a printer they most likely don&#8217;t even manufacture any more. If anything, they&#8217;ll probably just treat it as incentive for you to buy a new printer.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644643">
				<div id="div-comment-644643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ack</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644643">
			July 4, 2008 at 7:49 am</a>		</div>

		<p>Like for ConradHex, for me it&#8217;s also a relevation.</p>
<p>I haven&#8217;t known that so many DLLs change the mask bits of FPU.</p>
<p>Thanks Yuhong Bao for</p>
<p><a rel="nofollow" target="_new" href="http://www.virtualdub.org/blog/pivot/entry.php?id=53" rel="nofollow">http://www.virtualdub.org/blog/pivot/entry.php?id=53</a></p>
<p>which has a nice summary (I believe written by Avery Lee, the author of VirtualDub). Another good summary is linked in comments there, the Gimp related Bugzilla entry:</p>
<p><a rel="nofollow" target="_new" href="http://bugzilla.gnome.org/show_bug.cgi?id=316645" rel="nofollow">http://bugzilla.gnome.org/show_bug.cgi?id=316645</a></p>
<p>(see Comment #14 from Rapha&#235;l Quinet)</p>
<p>I&#8217;m now inspired to test how a few of my apps interact with a few of the printer drivers.</p>
<p>Cereal, on the virtualdub link you can read the following (search for Phaeron &#8211; 14 06 05 &#8211; 00:30):</p>
<p>&quot;(&#8230;) You cannot simply recover by remasking the FPU exceptions and restarting the faulting instruction. The problem is that the x87 FPU doesn’t signal the interrupt until the next floating-point instruction, at which point necessary information to retry the instruction is irretrievably lost. Take this instruction sequence for example:</p>
<p>FDIV DWORD PTR [EAX]</p>
<p>XOR EAX, EAX</p>
<p>FSTP DWORD PTR [EDX]</p>
<p>A divide-by-zero error here will actually result in the FSTP instruction faulting, not the FDIV.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-644653">
				<div id="div-comment-644653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codeka.com/blogs' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644653">
			July 4, 2008 at 8:10 am</a>		</div>

		<p>&quot;Raymond Chen as Open-Source (-Driver) evangelist!&quot;</p>
<p>If that surprises you, I suggest you grep the Linux kernel&#8217;s CREDITS file for Raymond&#8217;s name&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-644773">
				<div id="div-comment-644773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd Laney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-644773">
			July 4, 2008 at 1:39 pm</a>		</div>

		<p>I remember this exact problem caused the first patch for Flight SImulator 95. &nbsp;FS95 was crashing out in the field because of a floating point exception, we never could repro in house, so I added code to our exception handler to reset the FP exception state to what it should have been and continue. &nbsp;That fixed the problems.</p>
<p>on a side note the exception handlers for FS95 needed to be in a DLL, they did not work right inside the app. &nbsp;the DLL name we used was DIVTRAP.DLL if you have a old version of flightsim you will have this file. &nbsp;I cant remember what the reason was, but I bet it would make a good post Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-645053">
				<div id="div-comment-645053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080703-00/?p=21753#comment-645053">
			July 7, 2008 at 12:29 pm</a>		</div>

		<p>raymond, is there any documentation on what should be saved between api calls (library loading) [except ESP EBP ESI EDI EBX, direction flag] ?</p>
<p>i&#8217;ve been looking for this information for a long time, for example, is it legal to modify MMX/SSE2 register state between function calls?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

