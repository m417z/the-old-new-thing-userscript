<html>
<head>
<title>A library loaded via LOAD_LIBRARY_AS_DATAFILE (or similar flags) doesn't get to play in any reindeer module games</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A library loaded via LOAD_LIBRARY_AS_DATAFILE (or similar flags) doesn&#8217;t get to play in any reindeer module games</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 20, 2014 / year-entry #272</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you load a library with the LOAD_LIBRARY_AS_DATA­FILE flag, then it isn't really loaded in any normal sense. In fact, it's kept completely off the books. If you load a library with the LOAD_LIBRARY_AS_DATA­FILE, LOAD_LIBRARY_AS_DATA­FILE_EXCLUSIVE, or LOAD_LIBRARY_AS_IMAGE_RESOURCE flag (or any similar flag added in the future), then the library gets mapped into the process address...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If you load a library with the <code>LOAD_<wbr>LIBRARY_<wbr>AS_<wbr>DATA&shy;FILE</wbr></wbr></wbr></code> flag, then it isn't really loaded in any normal sense. In fact, it's kept completely <i>off the books</i>.</p>
<p> If you load a library with the <code>LOAD_<wbr>LIBRARY_<wbr>AS_<wbr>DATA&shy;FILE</wbr></wbr></wbr></code>, <code>LOAD_<wbr>LIBRARY_<wbr>AS_<wbr>DATA&shy;FILE_<wbr>EXCLUSIVE</wbr></wbr></wbr></wbr></code>, or <code>LOAD_<wbr>LIBRARY_<wbr>AS_<wbr>IMAGE_<wbr>RESOURCE</wbr></wbr></wbr></wbr></code> flag (or any similar flag added in the future), then the library gets mapped into the process address space, but it is not a true module. Functions like <code>Get&shy;Module&shy;Handle</code>, <code>Get&shy;Module&shy;File&shy;Name</code>, <code>Enum&shy;Process&shy;Modules</code> and <code>Create&shy;Toolhelp32&shy;Snapshot</code> will not see the library, because it was never entered into the database of loaded modules. </p>
<p> These "load library as..." flags don't actually load the library in any meaningful sense. They just take the file and map it into memory manually without updating any module tracking databases. This functionality was overloaded into the <code>Load&shy;Library&shy;Ex</code> function, which in retrospect was probably not a good idea, because people expect <code>Load&shy;Library&shy;Ex</code> to create true modules, but these flags create <i>pseudo-modules</i>, a term I made up just now. </p>
<p> It would have been less confusing in retrospect if the "load library as..." functionality were split into another function like <code>Load&shy;File&shy;As&shy;Pseudo&shy;Module</code>. Okay, that's a pretty awful name, but that's not the point. The point is to put the functionality in some function that doesn't have the word <i>library</i> in its name. </p>
<p> Okay, so now that we see that these pseudo-modules aren't true modules, and they don't participate in any <a href="http://en.wiktionary.org/wiki/reindeer_games"> reindeer module games</a>. So what use are they? </p>
<p> Basically, the only thing you can do with a pseudo-module is access its resources with functions like <code>Find&shy;Resource</code>, <code>Load&shy;Resource</code>, and <code>Enum&shy;Resource&shy;Types</code>. Note that this indirectly includes functions like <code>Load&shy;String</code>, and <code>Format&shy;Message</code> which access resources behind the scenes. </p>
<p> So maybe a better name for the function would have been <code>Load&shy;File&shy;For&shy;Resources</code>, since that's all the pseudo-module is good for. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1162903">
				<div id="div-comment-1162903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Markus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1162903">
			November 20, 2014 at 7:15 am</a>		</div>

		<p>The hardest part with programming is not writing bug free fast and scalable code it is the naming of functions/classes&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1162923">
				<div id="div-comment-1162923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1162923">
			November 20, 2014 at 7:34 am</a>		</div>

		<p>So you do have it in memory, right? Well, how hard can be to do a bit of calculation and find the functions addresses the library exports? I used exactly this but with memory mapped file, and I mapped a .dll, then zbang!! call it from there. Well, was part of a self-modifying code in order to obfuscate the real code from the existing disk file, but still you can use it. Write a wrapper and you can have MyAwesomeLoadLibrary to fiddle with these files. After all, you wrote the library, you know what is inside.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1162953">
				<div id="div-comment-1162953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1162953">
			November 20, 2014 at 8:17 am</a>		</div>

		<p>@Danny: you have to remember about relocations and what not, which basically means you are writing your own module loader. And what&#39;s the point?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1162973">
				<div id="div-comment-1162973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1162973">
			November 20, 2014 at 9:31 am</a>		</div>

		<p>@Markus: &quot;it is the naming of functions/classes&#8230;&quot;</p>
<p>Probably everyone has heard this, but there&#39;s the old quote (in a modified version I like):</p>
<p>There are only two difficult problems in computer science: cache coherence, naming things, and counting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1162983">
				<div id="div-comment-1162983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1162983">
			November 20, 2014 at 9:31 am</a>		</div>

		<p>Is the loader not able to upgrade a LOAD_LIBRARY_AS_IMAGE_RESOURCE loaded module to a &quot;normal&quot; module? I guess this scenario is rare and would slow down regular loading slightly?</p>
<div class="post">[<em>You can&#39;t upgrade it in place because RVAs are rarely compatible with direct mapping. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1162993">
				<div id="div-comment-1162993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1162993">
			November 20, 2014 at 9:38 am</a>		</div>

		<p>I have problems with talking about &quot;loading&quot; anything on a virtual memory system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1163003">
				<div id="div-comment-1163003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163003">
			November 20, 2014 at 9:41 am</a>		</div>

		<p>xor88: The reason you would use LOAD_LIBRARY_AS_DATAFILE alone is just to use the loader to find the file.</p>
<p>The reason you would use LOAD_LIBRARY_AS_IMAGE_RESOURCE is to get the proper memory alignment. </p>
<p>Both are things that you can&#39;t do just by mapping a file yourself.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1163023">
				<div id="div-comment-1163023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163023">
			November 20, 2014 at 10:11 am</a>		</div>

		<p>[You can&#39;t pass a manually mapped file to Load&shy;String, for example. -Raymond]</p>
<p>I bet you could. The module handle is just a pointer to its header. LoadString just goes from the header to the resource section. You may have to map it with COPY_ON_WRITE, though.</p>
<div class="post">[<em>But the resource section is not mapped where the header said it would be. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1163033">
				<div id="div-comment-1163033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163033">
			November 20, 2014 at 10:19 am</a>		</div>

		<p>[You can&#39;t pass a manually mapped file to LoadÂ­String, for example. -Raymond]</p>
<p>The worst part of this one is it probably works in 32 bit Windows because HINSTANCE == (load address). However, IT WILL BREAK on 64 bit Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1163053">
				<div id="div-comment-1163053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163053">
			November 20, 2014 at 11:54 am</a>		</div>

		<p>Thanks for that wonderful &quot;reindeer games&quot; reference; nice to put a name to the disease</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1163063">
				<div id="div-comment-1163063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163063">
			November 20, 2014 at 11:59 am</a>		</div>

		<p>What&#39;s the exact difference between that and using CreateFileMapping with the SEC_IMAGE flag? If I recall, that&#39;s what the NT loader does underneath anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1163073">
				<div id="div-comment-1163073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163073">
			November 20, 2014 at 12:21 pm</a>		</div>

		<p>if requested dll is already loaded as normal executable module then LOAD_LIBRARY_AS_DATAFILE will return that already loaded HINSTANCE. </p>
<p>This introduces a bit of mess for caller, since that mean that LoadLibraryEx(..LOAD_LIBRARY_AS_DATAFILE..) can return either plain data of file, either its image loaded just like PE image usually loaded for execution&#8230; And returned HINSTANCE tagged with less significant bit to let resources API know what they have as input&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1163083">
				<div id="div-comment-1163083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163083">
			November 20, 2014 at 1:31 pm</a>		</div>

		<p>Why would you load the library a second time, as a data file, when you&#39;ve already got it in memory?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1163093">
				<div id="div-comment-1163093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163093">
			November 20, 2014 at 2:46 pm</a>		</div>

		<p>@Rick C:</p>
<p>You may not know that it is loaded (i.e. indirect dependency), it may be optionally loaded (dynamically through a call to LoadLibrary(Ex)) or you may just want to bump the reference count so it isn&#39;t unloaded until you free it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1163103">
				<div id="div-comment-1163103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163103">
			November 20, 2014 at 2:47 pm</a>		</div>

		<p>why not?:) See what happens in win2003&#39;s explorer.exe when I check version info of shell32.dll:</p>
<p>0:017&gt; bp kernel32!LoadLibraryExW</p>
<p>0:017&gt; g</p>
<p>Breakpoint 0 hit</p>
<p>eax=00000001 ebx=00000001 ecx=0277ee48 edx=7c82845c esi=77e6c2bc edi=00000001</p>
<p>eip=77e41b14 esp=0277ee64 ebp=0277eeb0 iopl=0 &nbsp; &nbsp; &nbsp; &nbsp; nv up ei pl zr na pe nc</p>
<p>cs=001b &nbsp;ss=0023 &nbsp;ds=0023 &nbsp;es=0023 &nbsp;fs=003b &nbsp;gs=0000 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; efl=00000246</p>
<p>kernel32!LoadLibraryExW:</p>
<p>77e41b14 6a34 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;push &nbsp; &nbsp;34h</p>
<p>0:017&gt; kv</p>
<p>ChildEBP RetAddr &nbsp;Args to Child &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</p>
<p>0277ee60 77b91879 0277ef90 00000000 00000002 kernel32!LoadLibraryExW (FPO: [Non-Fpo])</p>
<p>0277eeb0 7c9ab2fe 0277ef90 0277eec8 01d2b5d0 VERSION!GetFileVersionInfoSizeW+0x31 (FPO: [Non-Fpo])</p>
<p>0277f19c 7ca37ab7 0277f200 7c9a9a16 0277fc74 SHELL32!AddVersionPage+0x75 (FPO: [Non-Fpo])</p>
<p>0277fb74 7c9f0ad9 0017a410 7c9a9a16 0277fc74 SHELL32!FileSystem_AddPages+0x157 (FPO: [Non-Fpo])</p>
<p>0277fb88 7c9a9abc 02159638 7c9a9a16 0277fc74 SHELL32!CShellExecMenu::AddPages+0x14 (FPO: [Non-Fpo])</p>
<p>0277fbb0 7c9a9ef4 01c90df8 0000082e 02159630 SHELL32!DCA_AppendClassSheetInfo+0x78 (FPO: [Non-Fpo])</p>
<p>0277fccc 7c9ffec7 0215a488 0277fcfc 00000003 SHELL32!SHOpenPropSheetW+0x131 (FPO: [Non-Fpo])</p>
<p>0277ff40 7c9bfe5e 020f1bd8 00000000 00000000 SHELL32!CFSFolder::_PropertiesThread+0xba (FPO: [Non-Fpo])</p>
<p>0277ff54 7d183f12 020f1bd8 00000000 00000000 SHELL32!_PropSheetThreadProc+0x18 (FPO: [Non-Fpo])</p>
<p>0277ffb8 77e6484f 00000000 00000000 00000000 SHLWAPI!WrapperThreadProc+0x94 (FPO: [Non-Fpo])</p>
<p>0277ffec 00000000 7d183ea5 0254ec1c 00000000 kernel32!BaseThreadStart+0x34 (FPO: [Non-Fpo])</p>
<p>0:017&gt; du 0277ef90 </p>
<p>0277ef90 &nbsp;&quot;C:WINDOWSsystem32shell32.dll&quot;</p>
<p>0:017&gt; gu; r eax</p>
<p>eax=7c8d0000</p>
<p>so&#8230; Version info dialog implemented in SHELL32.dll, since I requested version info of shell32&#39;s file &#8211; it called LoadLibraryEx to load it (itself actually) with LOAD_LIBRARY_AS_DATAFILE flag (3rd arg that equals 00000002). And &#8211; finally it gets its own base.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1163113">
				<div id="div-comment-1163113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163113">
			November 20, 2014 at 2:54 pm</a>		</div>

		<p>Not exactly speaked.. its version.dll loaded shell32.dll in this stack, but not shell32.dll itself.. however this doesn&#39;t change anything in this context, btw also when I check properties of version.dll &#8211; then version.dll calls LoadLibraryExW for version.dll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1162963">
				<div id="div-comment-1162963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xor88</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1162963">
			November 20, 2014 at 9:09 am</a>		</div>

		<p>Is there *any* difference to manually mapping the file?</p>
<div class="post">[<em>You can&#39;t pass a manually mapped file to <code>Load&shy;String</code>, for example. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1163153">
				<div id="div-comment-1163153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163153">
			November 21, 2014 at 3:03 am</a>		</div>

		<p>@Evan: The quote I&#39;m used to just calls it off-by-one errors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1163163">
				<div id="div-comment-1163163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Boris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163163">
			November 21, 2014 at 4:07 am</a>		</div>

		<p>In other words, a library thus loaded isn&#39;t like the ones I used to know?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1163173">
				<div id="div-comment-1163173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DebugErr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163173">
			November 21, 2014 at 5:30 am</a>		</div>

		<p>Am I the only one understanding the hint the flag names give on first sight?</p>
<p>Use them only for DLLs in which you stuff ressources. Not functionality.</p>
<p>Or did I misunderstand something?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1163183">
				<div id="div-comment-1163183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163183">
			November 21, 2014 at 6:30 am</a>		</div>

		<p>I saw that movie. Who would want to play mind games with a bunch of psychopaths? Well&#8230; Charlize Theron&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1163343">
				<div id="div-comment-1163343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1163343">
			November 21, 2014 at 1:12 pm</a>		</div>

		<p>@Boris: &nbsp;You win the Internets with that quote.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-1164163">
				<div id="div-comment-1164163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141120-00/?p=43573#comment-1164163">
			November 26, 2014 at 9:23 pm</a>		</div>

		<p>One difference between opening it as a file vs. using LoadLibraryEx is that the latter does not add a handle to the process&#39; handle table. &nbsp;In Sysinternals Process Explorer, open DLL View and add the Mapping Type column. &nbsp;It distinguishes between &quot;Image&quot; and &quot;Data&quot; modules, where the former has executable code, relocations, DLL dependencies, etc., and the latter is just data like icons, localized text, bitmaps, &#8230;</p>
<p>(FWIW, I&#39;ve never been confused about LOAD_LIBRARY_AS_DATAÂ­FILE or been surprised about what I could or could not do with the resulting module handle&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

