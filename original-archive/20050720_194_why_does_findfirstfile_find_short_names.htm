<html>
<head>
<title>Why does FindFirstFile find short names?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does FindFirstFile find short names?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 20, 2005 / year-entry #195</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The FindFirstFile function matches both the short and long names. This can produce somewhat surprising results. For example, if you ask for "*.htm", this also gives you the file "x.html" since its short name is "X~1.HTM". Why does it bother matching short names? Shouldn't it match only long names? After all, only old 16-bit programs...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a href="http://msdn.microsoft.com/library/en-us/fileio/base/findfirstfile.asp"> The <code>FindFirstFile</code> function</a> matches both the short and long names. This can produce somewhat surprising results. For example, if you ask for "*.htm", this also gives you the file "x.html" since its short name is "X~1.HTM".</p>
<p> Why does it bother matching short names? Shouldn't it match only long names? After all, only old 16-bit programs use short names. </p>
<p> But that's the problem: 16-bit programs use short names. </p>
<p> Through a process known as <a href="http://msdn.microsoft.com/library/en-us/winprog/winprog/generic_thunks.asp"> generic thunks</a>, a 16-bit program can load a 32-bit DLL and call into it. Windows&nbsp;95 and  the Windows 16-bit emulation layer in Windows&nbsp;NT rely heavily on generic thunks so that they don't have to write two versions of everything. Instead, the 16-bit version just thunks up to the 32-bit version. </p>
<p> Note, however, that this would mean that 32-bit DLLs would see two different views of the file system, depending on whether they are hosted from a 16-bit process or a 32-bit process. </p>
<p> "Then make the <code>FindFirstFile</code> function check to see who its caller is and change its behavior accordingly," doesn't fly because <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/01/47042.aspx"> you can't trust the return address</a>. </p>
<p> Even if this problem were solved, you would still have the problem of 16/32 interop across the process boundary. </p>
<p> For example, suppose a 16-bit program calls <code>WinExec("notepad X~1.HTM")</code>. The 32-bit Notepad program had better open the file X~1.HTM even though it's a short name. What's more, a common way to get properties of a file such as its last access time is to call <code>FindFirstFile</code> with the file name, since the <code>WIN32_FIND_DATA</code> structure returns that information as part of the find data. (Note: <code>GetFileAttributesEx</code> is a better choice, but that function is comparatively new.) If the <code>FindFirstFile</code> function did not work for short file names, then the above trick would fail for short names passed across the 16/32 boundary. </p>
<p> As another example, suppose the DLL saves the file name in a location external to the process, say a configuration file, the registry, or a shared memory block.  If a 16-bit program program calls into this DLL, it would pass short names, whereas if a 32-bit program calls into the DLL, it would pass long names.  If the file system functions returned only long names for 32-bit programs, then the copy of the DLL running in a 32-bit program would not be able to read the data written by the DLL running in a 16-bit program. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-291563">
				<div id="div-comment-291563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291563">
			July 20, 2005 at 12:00 pm</a>		</div>

		<p>I got bitten badly by this once.  I used some tool that made HTML files for me.  On perusing the directory listing, I saw that it had made files with an extension of .htm.  Fortunately it had the option of using the correct extension and I got it to make them with an extension of .html.  Now my directory had both .htm and .html files.  I thought I&#8217;d quickly delete the redundant *.htm files and had all of my data wiped clean.</p>
<p>Although the backwards compatibility was appreciated in 1994, I do sometimes like to scream in the general direction of Microsoft that it is no longer necessary for me and hasn&#8217;t been for many years, and is especially unappreciated when I lose data in 2005!</p>
<p>I guess it is time to go off and see if I can find the registry key that turns off short file name generation on NTFS and then check to see if Windows synthesizes the short names if the filesystem doesn&#8217;t actually have them &#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-291593">
				<div id="div-comment-291593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291593">
			July 20, 2005 at 1:31 pm</a>		</div>

		<p>On 64bit windows, does this still return the short file names?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291603">
				<div id="div-comment-291603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291603">
			July 20, 2005 at 1:34 pm</a>		</div>

		<p>Anonymous Coward,<br />
<br />Note that you can disable short filenames on your system if you&#8217;re willing to suffer the consequences. Once you&#8217;ve done this, there will be no longfi~1.htm generated anymore and so there&#8217;ll be nothing there to match *.htm.</p>
<p>In the process, though, you&#8217;ll almost certainly end up breaking a few applications. That&#8217;s what you get when you shun back-compat! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-291613">
				<div id="div-comment-291613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291613">
			July 20, 2005 at 1:35 pm</a>		</div>

		<p>Anonymous Coward,<br />
<br />I didn&#8217;t see your last paragraph the first five or six times I read your comment. Apologies for the redundancy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291643">
				<div id="div-comment-291643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">vince</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291643">
			July 20, 2005 at 3:17 pm</a>		</div>

		<p>Ben Cooke said: &gt; In the process, though, you&#8217;ll almost certainly end up breaking a few<br />
<br />&gt; applications. That&#8217;s what you get when you shun back-compat! :)</p>
<p>Or, more accurately, that&#8217;s what you get when the backwards-compatibility is poorly designed.<br />
<br />I am sure whoever designed this had their reasons, but it is almost hard to picture a more obscure and confusing way to implement this.</p>
<p>It sometimes feels like that despite all the money MS has, and all the reputedly expert programmers, that much of the code seems to be written by confused summer interns.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-edge odd alt thread-odd thread-alt depth-1" id="comment-291653">
				<div id="div-comment-291653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Edge</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291653">
			July 20, 2005 at 3:47 pm</a>		</div>

		<p>Why not add a flag that can be used with FindFirstFileEx (passed in the dwAdditionalFlags parameter?) that can turn off this backwards compatibility? Surely anything done by the API would be faster than the wrappers GregM (above) and others have no doubt had to write to get around this.</p>
<p>In any event, thanks for the explanation. As someone who also also been tripped up by this, it&#8217;s always interesting to hear why it is the way it is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291663">
				<div id="div-comment-291663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.foxyshadis.com' rel='external nofollow' class='url'>foxyshadis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291663">
			July 20, 2005 at 3:53 pm</a>		</div>

		<p>Windows won&#8217;t synthesize the names. The biggest problem I see is that 32-bit packages came in 16-bit installers as late as 2001, although they were mostly gone by 1999. Nowadays I recognize the symptoms and can relocate them to a folder without spaces or long names, but it sure was frustrating when I didn&#8217;t know why it broke.</p>
<p>Hopefully in longhorn this option will be off by default in home installations. For business edition, well, who knows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-291683">
				<div id="div-comment-291683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291683">
			July 20, 2005 at 4:35 pm</a>		</div>

		<p>If only Win95TruncatedExtensions defaulted to 0&#8230;</p>
<p><a rel="nofollow" target="_new" href="http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/regentry/28234.asp" rel="nofollow">http://www.microsoft.com/resources/documentation/Windows/2000/server/reskit/en-us/regentry/28234.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291583">
				<div id="div-comment-291583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291583">
			July 20, 2005 at 12:29 pm</a>		</div>

		<p>My question would not be so much &quot;Why does FindFirstFile find short names&quot;, but &quot;Why is there no function like FindFirstFile that can be told to only find long names&quot;.  I had to write my own FindFirstFile wrapper function that checked that the extension exactly matched what I provided, because *.mod would match foo.model and bar.model.  If I then did a find on *.model, I would get foo.model and bar.model again.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-291713">
				<div id="div-comment-291713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas H&#228;ber</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291713">
			July 20, 2005 at 9:39 pm</a>		</div>

		<p>Anon Coward: On Windows XP (and I assume Windows 2003) just type this command:<br />
<br />&quot;fsutil behavior query disable8dot3&quot; to check the current short name generation setting and &quot;fsutil behavior set disable8dot3 1&quot; to disable short name generation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291723">
				<div id="div-comment-291723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291723">
			July 20, 2005 at 9:53 pm</a>		</div>

		<blockquote><p>
  After all, only old 16-bit programs use<br />
  <br />&gt; short names.</p>
<p>One time in the registry of a Windows XP machine I noticed several string values that were pathnames in the 8.3 format (&#8230;PROGRA~1&#8230; or was it &#8230;DOCUME~1&#8230;).  I haven&#8217;t hunted for them but I&#8217;m pretty sure they were associated with 32-bit programs not 16-bit programs.  Sure that&#8217;s in the registry not on disk, but if I removed 8.3 filenames from the disk then surely those programs would fail.</p>
<p>By the way when 8.3 filenames are disabled in an NTFS partition, does that delete existing short names or only disable generation of new ones?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-291743">
				<div id="div-comment-291743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291743">
			July 21, 2005 at 12:12 am</a>		</div>

		<p>&quot;Hopefully in longhorn this option will be off by default in home installations.&quot;</p>
<p>Or XP x64, which doesn&#8217;t support 16-bit processes&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291753">
				<div id="div-comment-291753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew W. Jackson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291753">
			July 21, 2005 at 12:30 am</a>		</div>

		<p>I second the idea about a flag to disable this behavior.  Surely no 16-bit software would use a flag that didn&#8217;t exist until now.</p>
<p>I also agree that disabling short filename generation at some point would be the way to go, although I&#8217;ve seen a few too many 32-bit programs that cannot handle spaces in their file names (one major product by a major database vendor that is not Microsoft comes to mind), so I resort to setting them up in PROGRA~1.  I&#8217;ve seen other 32-bit programs store short filenames themselves, even when they&#8217;re capable of using long filenames.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-291763">
				<div id="div-comment-291763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.foxyshadis.com' rel='external nofollow' class='url'>foxyshadis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291763">
			July 21, 2005 at 1:21 am</a>		</div>

		<p>Only disables new ones.</p>
<p>I felt kind of bad recently, when I found out apache+php won&#8217;t shell out to a path with spaces, that my workaround was using progra~1. I should file a bug report, but I&#8217;m not sure with which.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291773">
				<div id="div-comment-291773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291773">
			July 21, 2005 at 3:32 am</a>		</div>

		<p>I&#8217;ve seen a few cases where people write their own version of GetLongPathName (usually because they need to support NT4) using FindFirstFile.  Are there situations where that approach would return an incorrect path?  Is it safe in practice because FindFirstFile(&quot;foo.bar&quot;) always will return the exact match first before returning &quot;foo.barbaz&quot;?</p>
<p>Or does this wacky behavior apply only when wildcards are used?  I don&#8217;t imagine that many 16-bit apps called FindFirstFile with an exact path as an argument, so backward compatibility there probably wouldn&#8217;t be a concern.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-291813">
				<div id="div-comment-291813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291813">
			July 21, 2005 at 6:33 am</a>		</div>

		<p>Raymond, I know this is the wrong place for requests, but seeing you mention generic thunks made me wonder why the same approach isn&#8217;t being used for 64 bit Windows. It seems that on WOW64, only syscalls are thunked &#8211; every other DLL an app uses except NTDLL has to have a 64-bit pair. I know that&#8217;s a lot simpler than using thunks, so is it just that these days, shipping/loading two copies of every DLL isn&#8217;t as costly as it once was?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-291823">
				<div id="div-comment-291823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.xceedsoft.com/plantem' rel='external nofollow' class='url'>Martin Plante</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-291823">
			July 21, 2005 at 9:35 am</a>		</div>

		<p>Would have it been possible to only support short filenames in FindFirstFileA? I understand it would have meant duplication of a lot of stuff. Are there other reasons FindFirstFileW required the same behavior?</p>
<p>Just curious.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-292023">
				<div id="div-comment-292023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-292023">
			July 21, 2005 at 9:33 pm</a>		</div>

		<p>Thursday, July 21, 2005 12:30 AM by Matthew W. Jackson<br />
<br />&gt; I&#8217;ve seen a few too many 32-bit programs<br />
<br />&gt; that cannot handle spaces in their file<br />
<br />&gt; names (one major product by a major database<br />
<br />&gt; vendor that is not Microsoft comes to mind),</p>
<p>And one major DDK by a major DDK vendor.</p>
<p>Thursday, July 21, 2005 9:35 AM by Martin Plante<br />
<br />&gt; Would have it been possible to only support<br />
<br />&gt; short filenames in FindFirstFileA?</p>
<p>That would be disastrous.  FindFirstFileA is not capable of reporting every match that it finds.  If you need reports of all matching existing filenames then you must call FindFirstFileW.  It doesn&#8217;t matter if your argument is a short name or a long name, you must call the W version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-292273">
				<div id="div-comment-292273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.sereneconcepts.nl' rel='external nofollow' class='url'>Martijn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-292273">
			July 23, 2005 at 6:05 am</a>		</div>

		<p>&quot;If the file system functions returned only long names for 32-bit programs, then the copy of the DLL running in a 32-bit program would not be able to read the data written by the DLL running in a 16-bit program.&quot;</p>
<p>This is true for the reverse anyway (16-bit programs trying to read find files with their long file names), so maybe this should not be considered a problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-415563">
				<div id="div-comment-415563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://smallcode.weblogs.us/2006/08/31/dark-corners-in-microsoft-documentation/' rel='external nofollow' class='url'>smallcode &raquo; Blog Archive &raquo; Dark corners in Microsoft documentation</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-415563">
			August 30, 2006 at 10:28 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://smallcode.weblogs.us/2006/08/31/dark-corners-in-microsoft-documentation/" rel="nofollow">http://smallcode.weblogs.us/2006/08/31/dark-corners-in-microsoft-documentation/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-690483">
				<div id="div-comment-690483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/12/08/9182990.aspx' rel='external nofollow' class='url'>The Old New Thing : A file can go by multiple names, but two files can't have the same name</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050720-16/?p=34883#comment-690483">
			December 8, 2008 at 10:12 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2008/12/08/9182990.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2008/12/08/9182990.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

