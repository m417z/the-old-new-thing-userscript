<html>
<head>
<title>The lackey catastrophe</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The lackey catastrophe</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 29, 2016 / year-entry #206</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You know it will be done, but you don't know when.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We encountered a real problem with global object destruction
in Explorer.
The object in question was an RAII container for a graphics object,
so its destructor destroyed the graphics object.
But the call to destroy the object was crashing.
</p>
<pre>
GDI32!IS_INDEX_IN_USER_SHARED_ARRAY+0x17
GDI32!HANDLE_TO_INDEX+0x1a
GDI32!DeleteObject+0x2a
explorer!CBitmap::~CBitmap+0x20
msvcrt!doexit+0xb6
msvcrt!_cexit+0xb
msvcrt!__CRTDLL_INIT+0x9f
ntdll!LdrxCallInitRoutine+0x16
ntdll!LdrpCallInitRoutine+0x43
ntdll!LdrShutdownProcess+0x1c1
ntdll!RtlExitUserProcess+0x96
kernel32!ExitProcess+0x32
explorer!wWinMain+0x4ef
explorer!WinMainCRTStartup+0x151
KERNEL32!BaseThreadInitThunk+0x24
ntdll!__RtlUserThreadStart+0x2b
ntdll!_RtlUserThreadStart+0x1b
</pre>
<p>
What's going on?
</p>
<p>
The call to <code>Delete&shy;Object</code> was occurring
after <code>GDI32</code> had already run its
<strike><code>DLL_<wbr>PROCESS_<wbr>ATTACH</code></strike>
<code>DLL_<wbr>PROCESS_<wbr>DETACH</code>.
As a result, it was calling into a DLL that had already
uninitialized,
so bad things happen.
</p>
<p>
But wait, how can you call into a DLL that has already
uninitialized?
The EXE links to the DLL via a load-time dependency,
so the EXE should uninitialize first.
But it's not.
Why not?
</p>
<p>
Recall
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20141017-00/?p=43823">
how global objects are constructed and destructed</a>.
If the global object
had been in a DLL,
then indeed the loader dependency analysis would have seen
that the global object's DLL
depends upon
<code>GDI32</code>.
</p>
<p>
As we saw in the earlier discussion,
executables do not have <code>DLL_<wbr>PROCESS_<wbr>DETACH</code>.
You can look at the situation in two ways:
One interpretation is that the executable has already stopped
running at the point it calls <code>Exit&shy;Process</code>.
All that's left is to shut down the DLLs.
Another interpretation is that the executable is <i>always</i>
running (seeing as DLLs run in the context of a process),
so there's no point trying to wait until the executable
has "finished" because if you did that, you'd be waiting forever.
</p>
<p>
Anyway,
regardless of how you choose to look at the situation,
the problem is the same:
The lackey we hired to run down our global objects
is running them down too late.
</p>
<p>
This is a case where the C runtime is doing the best
it possibly can, but it's still not good enough.
</p>
<p>
Next time, we'll look at one possible extrication
from this quandary.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1266505">
				<div id="div-comment-1266505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266505">
			September 29, 2016 at 7:14 am</a>		</div>

		<p>This is probably a generic problem so GDI32 could be helpful and deal with it for everyone: When it gets a DLL_PROCESS_DETACH that is for the processes it can neuter DeleteObject and let the kernel deal with the final cleanup.</p>
<p>Typo: &#8220;had already run its DLL_PROCESS_ATTACH&#8221; you probably mean DLL_PROCESS_DETACH.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1266525">
				<div id="div-comment-1266525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266525">
			September 29, 2016 at 8:29 am</a>		</div>

		<p>That doesn&#8217;t actually work (GDI.DLL might be unloaded with FreeLibrary); however it&#8217;s not all that bad of an idea. If DeleteObject was changed to recover from handle out of range it would fix everybody. DLL_PROCESS_DETACH set the number of handles to zero.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-3" id="comment-1266565">
				<div id="div-comment-1266565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266565">
			September 29, 2016 at 9:05 am</a>		</div>

		<p>You can tell if DLL_PROCESS_DETACH is because of FreeLibrary by looking at the third DllMain parameter&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1266545">
				<div id="div-comment-1266545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266545">
			September 29, 2016 at 8:31 am</a>		</div>

		<p>GDI32.DLL has been unloaded. An unloaded library should not be called. So GDI32.DLL can not expect to receive calls at that point. Solving the problem at that level is wrong.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-3" id="comment-1266585">
				<div id="div-comment-1266585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266585">
			September 29, 2016 at 9:26 am</a>		</div>

		<p>Yes, letting GDI32 solve it would be at the wrong level but it would not be the first time that the ExitProcess case changes APIs: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20070503-00/?p=27003/" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20070503-00/?p=27003/</a></p>
<p>Another way to solve it in Explorer.exe would be:</p>
<p>CBitmap *g_mybitmap;<br />
int WinMain(&#8230;)<br />
{<br />
  CBitmap mybitmap;<br />
  g_mybitmap = &amp;mybitmap;<br />
  &#8230;<br />
  return 0;<br />
}</p>
<p> but that is rather ugly and only works if you return, not if you manually call ExitProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1266575">
				<div id="div-comment-1266575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266575">
			September 29, 2016 at 9:26 am</a>		</div>

		<p>The semi-deterministic ordering of construction and destruction of globals (in C++) is just another in a long list of reasons why we shouldn&#8217;t use globals.  Singletons are marginally better in this regard since we can explicitly control when they get created and destroyed.</p>
<p>My psychic powers predict that the possible solution we&#8217;ll explore tomorrow is to skip the clean-up.  After all, the process is on the way out, so the OS is going to reclaim nearly all the resources anyone could care about.  As a bonus, you may get faster shutdown.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1266625">
				<div id="div-comment-1266625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">not important</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266625">
			September 29, 2016 at 10:55 am</a>		</div>

		<p>Andrei &#8211; Just like you I think that the problem is &#8220;The semi-deterministic ordering of construction and destruction of globals (in C++) &#8220;. Your solution is to not use globals. Another solution is to not do &#8220;interesting&#8221; work in constructor / destructor and do this work in methods that need to be called explicitly (Initialize / Finalize) by programmers.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-samuel-bronson odd alt depth-3" id="comment-1266715">
				<div id="div-comment-1266715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Samuel+Bronson' rel='external nofollow' class='url'>Samuel Bronson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266715">
			September 29, 2016 at 10:12 pm</a>		</div>

		<p>I&#8217;d like to see an RAII container try that&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1266645">
				<div id="div-comment-1266645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266645">
			September 29, 2016 at 1:19 pm</a>		</div>

		<p>I think there is a mistake: &#8220;The call to Delete¬≠Object was occurring after GDI32 had already run its DLL_PROCESS_ATTACH.&#8221;, it should say DLL_PROCESS_DETACH, or am I wrong?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman odd alt depth-2 parent" id="comment-1266655">
				<div id="div-comment-1266655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266655">
			September 29, 2016 at 2:23 pm</a>		</div>

		<p>Technically, Raymond wasn&#8217;t wrong either. The call to GDI32 certainly was after _ATTACH had run, because _DETACH runs after _ATTACH, and the call was after _DETACH.</p>
<p>DLL_PROCESS_ATTACH-&gt;(bunch of stuff)-&gt;DLL_PROCESS_DETACH-&gt;(the breaking call)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-samuel-bronson even depth-3" id="comment-1267535">
				<div id="div-comment-1267535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Samuel+Bronson' rel='external nofollow' class='url'>Samuel Bronson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1267535">
			October 6, 2016 at 11:06 am</a>		</div>

		<p>Not wrong, sure, but not terribly interesting either.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kwadwomi odd alt thread-odd thread-alt depth-1 parent" id="comment-1266675">
				<div id="div-comment-1266675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Master+Programmer' rel='external nofollow' class='url'>Master Programmer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266675">
			September 29, 2016 at 4:38 pm</a>		</div>

		<p>Maybe WinMainCRTStartup should call the global destructors then call ExitProcess.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1266685">
				<div id="div-comment-1266685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266685">
			September 29, 2016 at 6:04 pm</a>		</div>

		<p>If you look at the call stack, it is wWinMain that is calling ExitProcess, it isn&#8217;t returning to CRT/VCRuntime code.<br />
I have a good idea why this is happening, but I don&#8217;t want to spoil it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1266735">
				<div id="div-comment-1266735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266735">
			September 30, 2016 at 2:02 am</a>		</div>

		<p>One way to fix this would be to use  #pragma init_seg(user) to force the object to be constucted last and destructed first.</p>
<p>Not a nice solution though&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-odd thread-alt depth-1" id="comment-1266955">
				<div id="div-comment-1266955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160929-00/?p=94415#comment-1266955">
			October 2, 2016 at 1:59 pm</a>		</div>

		<p>This reminds me of UnregisterClass in DllMain. I disassembled it and in addition to NtUserUnregisterClass it deals with activation contexts (which is what user32!ClassNameToVersion does) and sometimes free memory, all via NTDLL calls.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

