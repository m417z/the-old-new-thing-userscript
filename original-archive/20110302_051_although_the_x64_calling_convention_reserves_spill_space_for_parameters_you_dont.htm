<html>
<head>
<title>Although the x64 calling convention reserves spill space for parameters, you don't have to use them as such</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Although the x64 calling convention reserves spill space for parameters, you don&#8217;t have to use them as such</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 2, 2011 / year-entry #52</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Although the x64 calling convention reserves space on the stack as spill locations for the first four parameters (passed in registers), there is no requirement that the spill locations actually be used for spilling. They're just 32 bytes of memory available for scratch use by the function being called. We have a test program that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Although the
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/01/14/58579.aspx">
x64 calling convention</a>
reserves space on the stack as spill locations
for the first four parameters (passed in registers),
there is no requirement that the spill locations actually be used
for spilling.
They're just 32 bytes of memory available for scratch use by the function
being called.
</p>
<blockquote CLASS=q>
<p>
We have a test program that works okay when optimizations are disabled,
but when compiled with full optimizations, everything appears to be wrong
right off the bat.
It doesn't get the correct values for
<code>argc</code> and <code>argv</code>:
</p>
<pre>
int __cdecl
wmain( int argc, WCHAR** argv ) { ... }
</pre>
<p>
With optimizations disabled, the code is generated correctly:
</p>
<pre>
        mov         [rsp+10h],rdx  // argv
        mov         [rsp+8],ecx    // argc
        sub         rsp,158h       // local variables
        mov         [rsp+130h],0FFFFFFFFFFFFFFFEh
        ...
</pre>
<p>
But when we compile with optimizations, everything is completely
messed up:
</p>
<pre>
        mov         rax,rsp 
        push        rsi  
        push        rdi  
        push        r13  
        sub         rsp,0E0h 
        mov         qword ptr [rsp+78h],0FFFFFFFFFFFFFFFEh 
        mov         [rax+8],rbx    // ??? should be ecx (argc)
        mov         [rax+10h],rbp  // ??? should be edx (argv)
</pre>
</blockquote>
<p>
When compiler optimizations are disabled, the Visual C++ x64 compiler
will spill all register parameters into their corresponding slots.
This has as a nice side effect that debugging is a little easier,
but really it's just because you disabled optimizations,
so the compiler generates simple, straightforward code,
making no attempts to be clever.
</p>
<p>
When optimizations are enabled, then the compiler becomes more
aggressive about removing redundant operations and using memory
for multiple purposes when variable lifetimes don't overlap.
If it finds that it doesn't need to save <code>argc</code>
into memory (maybe it puts it into a register),
then the spill slot for <code>argc</code> can be used for
something else; in this case, it's being used to preserve
the value of <code>rbx</code>.
</p>
<p>
You see the same thing even in x86 code,
where the memory used to pass parameters can be re-used
for other purposes once the value of the parameter is no
longer needed in memory.
(The compiler might load the value into a register and use
the value from the register for the remainder of the function,
at which point the memory used to hold the parameter becomes
unused and can be redeployed for some other purpose.)
</p>
<p>
Whatever problem you're having with your test program,
there is nothing obviously wrong with the code generation
provided in the purported defect report.
The problem lies elsewhere.
(And it's probably somewhere in your program.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/02/10/10127054.aspx">
Don't immediately assume that the reason for your problem
is a compiler bug</a>.)
</p>
<p>
<b>Bonus chatter</b>:
In a (sadly rare) follow-up, the customer confessed that the
problem was indeed in their program.
They put a function call inside an <code>assert</code>,
and in the nondebug build, they disabled assertions
(by passing <code>/DNDEBUG</code> to the compiler),
which means that in the nondebug build, the function was never called.
</p>
<p>
<b>Extra reading</b>:
<a HREF="http://blogs.msdn.com/ntdebugging/archive/2009/01/09/challenges-of-debugging-optimized-x64-code.aspx">
Challenges of debugging optimized x64 code</a>.
That <code>.frame /r</code> command is real time-saver.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-898513">
				<div id="div-comment-898513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898513">
			March 2, 2011 at 7:10 am</a>		</div>

		<p>The application programmer says &quot;It must be a bug in the library.&quot; &nbsp;The library programmer says &quot;It must be a bug in the kernel.&quot; &nbsp;The kernel programmer says &quot;It must be a bug in the hardware.&quot; &nbsp;They&#39;re nearly always wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898533">
				<div id="div-comment-898533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898533">
			March 2, 2011 at 7:13 am</a>		</div>

		<p>@Adam Rosenfield</p>
<p>And what does Intel say? It&#39;s a bug in Physics?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898543">
				<div id="div-comment-898543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898543">
			March 2, 2011 at 7:19 am</a>		</div>

		<p>@Sunil you should already know the answer to that: <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Pentium_FDIV_bug" rel="nofollow">en.wikipedia.org/&#8230;/Pentium_FDIV_bug</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898563">
				<div id="div-comment-898563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Just Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898563">
			March 2, 2011 at 7:24 am</a>		</div>

		<p>I used to work with a guy who blamed nearly all of his bugs on the .NET framework. &nbsp;He never found a bug in the framework.</p>
<p>I had an irritating issue that I assumed was my own bug, but I couldn&#39;t find it. &nbsp;I opened a support case, and it was eventually determined to be a bug in the .NET Sql Provider (very much a corner case). &nbsp;Neat!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898593">
				<div id="div-comment-898593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MazeGen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898593">
			March 2, 2011 at 7:50 am</a>		</div>

		<p>It&#39;s interesting how &quot;x86&quot; became synonym for &quot;32-bit&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898613">
				<div id="div-comment-898613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898613">
			March 2, 2011 at 8:17 am</a>		</div>

		<p>MazeGen: It didn&#39;t. x86 is a specific type of 32-bit processor; others don&#39;t have x86 code, so it would be wrong (or undefined) to say you&#39;re talking about 32-bit code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898643">
				<div id="div-comment-898643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">lixiong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898643">
			March 2, 2011 at 8:27 am</a>		</div>

		<p>&quot;.frame /r&quot; !!!!!! Thanks~~~</p>
<p>Before reading this blog, I thought I was clever because I could read the ASM code to find out the parameters&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898653">
				<div id="div-comment-898653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898653">
			March 2, 2011 at 8:42 am</a>		</div>

		<p>I&#39;ve found a nasty bug in .NET Framework.</p>
<p>Pooled connections inherit the transaction isolation level from the previous user of the connection.</p>
<p>It&#39;s no fun when a data saver that must be thread-safe gets READ UNCOMMITTED from a long-running report.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898673">
				<div id="div-comment-898673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MazeGen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898673">
			March 2, 2011 at 9:07 am</a>		</div>

		<p>configurator: The term &quot;x86&quot; is vague. Intel architecture manuals don&#39;t even mention it so one could argue it&#39;s &quot;a specific type of 32-bit processor&quot;. For example, Wikipedia says that it is derived &quot;from the fact that early successors to the 8086 also had names ending in &quot;86&quot;&quot;. Neither 8086 nor 80186 is a 32-bit processor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-brunopitrus odd alt thread-odd thread-alt depth-1" id="comment-898683">
				<div id="div-comment-898683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kinokijuf' rel='external nofollow' class='url'>kinokijuf</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898683">
			March 2, 2011 at 9:26 am</a>		</div>

		<p>Microsoft calls it officially i386.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898693">
				<div id="div-comment-898693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898693">
			March 2, 2011 at 10:02 am</a>		</div>

		<p>@MazeGen: It is doubtful that anyone would be discussing the 16-bit varieties today, just as it is understood that a &quot;Windows program&quot; is going to be Win32 or Win64 nowadays. I prefer the term &quot;x86&quot; because it less ambiguous than &quot;32-bit&quot;; 32-bit could mean anything from a VAX to a Motorola 68xxx to a MIPS!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898703">
				<div id="div-comment-898703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898703">
			March 2, 2011 at 10:11 am</a>		</div>

		<p>I&#39;m not surprized anymore when I find a bug or a bottleneck in the kernel mode. Mostly with storport.sys, but sometimes in another component.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003400182d76c6f even thread-even depth-1" id="comment-898813">
				<div id="div-comment-898813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Richard+Russell' rel='external nofollow' class='url'>Richard Russell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898813">
			March 2, 2011 at 2:57 pm</a>		</div>

		<p>@ErikF: Take a look at comp.lang.asm.x86 where 16-bit code is still regularly discussed. &nbsp;I tend to call the 32-bit variant IA-32: <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/IA-32" rel="nofollow">en.wikipedia.org/&#8230;/IA-32</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898833">
				<div id="div-comment-898833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RobThree</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898833">
			March 2, 2011 at 3:44 pm</a>		</div>

		<p>&quot;They&#39;re just 32 bytes of memory available&quot;&#8230; wouldn&#39;t that be 32 BITS?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898843">
				<div id="div-comment-898843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898843">
			March 2, 2011 at 4:50 pm</a>		</div>

		<p>@RobThree:</p>
<p>4 of 8-byte registers=32 bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-898883">
				<div id="div-comment-898883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898883">
			March 3, 2011 at 1:13 am</a>		</div>

		<p>Yep; thought of that as soon as I posted&#8230; D&#39;uh&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-898903">
				<div id="div-comment-898903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-898903">
			March 3, 2011 at 7:28 am</a>		</div>

		<p>Processor folks call it a soft error: &nbsp;<a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Soft_error" rel="nofollow">en.wikipedia.org/&#8230;/Soft_error</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-899003">
				<div id="div-comment-899003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110302-00/?p=11333#comment-899003">
			March 3, 2011 at 4:10 pm</a>		</div>

		<p>I call them x86-16, x86-32, and x86-64, specifying &quot;real mode&quot; or &quot;protected mode&quot; in the 16-bit case. &nbsp;That avoids the annoying ambiguity of the names, and is more reflective of what the machine code actually is.</p>
<p>As for bugs in Windows, I have found a total of two actual Windows API bugs *ever*. &nbsp;And I&#39;ve done some crazy stuff.</p>
<p>1. KiUserExceptionDispatcher didn&#39;t have a &quot;cld&quot;, which could break vectored handler functions if the exception occurred during a memmove call. &nbsp;Fixed in Vista.</p>
<p>2. WOW64&#39;s NtQuerySystemInformation(SystemHandleInformation) forgot to increment an index when converting the 64-bit function&#39;s result to the 32-bit format, meaning that the first element of the array was the last handle, and all the other elements were uninitialized. &nbsp;Fixed in 7.</p>
<p>By the way, you can use this Win64 x86-64 parameter shadow space from leaf functions, not just frame functions. &nbsp;This gives leaf functions 32 bytes of stack space to work with.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

