<html>
<head>
<title>What's the difference between VARIANT and VARIANTARG?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the difference between VARIANT and VARIANTARG?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 21, 2017 / year-entry #279</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171221-00/?p=97625</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Well, is it an argument?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of my colleagues asked me,
"What's the difference between <code>VARIANT</code>
and
<code>VARIANTARG</code>?"
</p>
<p>
If you look at the definitions in the <code>oaidl.h</code>
header file, you'll see that <code>VARIANTARG</code> is just
an alias for <code>VARIANT</code>.
</p>
<pre>
typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;
</pre>
<p>
"Why have two names for the same thing?"
</p>
<p>
The two structures are physically identical,
but the rules surrounding them are different.
</p>
<p>
This is mentioned rather opaquely in
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/ms221627(v=vs.85).aspx">
the documentation for <code>VARIANT</code></a>:
</p>
<blockquote CLASS=q>
<p>
<b>VARIANTARG</b> describes arguments passed
within DISPPARAMS,
and <b>VARIANT</b> to specify variant data
that cannot be passed by reference.
</p>
<p>
When a variant refers to another variant
by using the VT_VARIANT | VT_BYREF vartype,
the variant being referred to cannot also be of type VT_VARIANT | VT_BYREF.
VARIANTs can be passed by value, even if VARIANTARGs cannot.
</p>
</blockquote>
<p>
The first sentence says that you use <code>VARIANTARG</code>
as part of a <code>DISPPARAMS</code>,
which is the structure used to pass parameters (also known as "arguments")
to methods of dispatch interfaces.
</p>
<p>
The second sentence is not relevant to the discussion.
It says that only one level of pointer chasing is allowed.
You can't send the method on a wild goose chase where you pass
a variant that says "The real data is over
there, in that other variant",
and then have the second variant say,
"Ha ha, fooled, you. The real data is over there in that other other variant."
</p>
<p>
The third sentence starts to hint at the underlying issue.
It says that <code>VARIANT</code>s can be passed by value,
but <code>VARIANTARG</code>s cannot.
</p>
<p>
Interesting, but no real insight as to why you can pass <code>VARIANT</code>
by value but not <code>VARIANTARG</code>.
</p>
<p>
There's another MSDN page titled
<a HREF="https://msdn.microsoft.com/en-us/library/ms891678.aspx">
VARIANT and VARIANTARG</a>.
Maybe that'll help us get to the bottom of the mystery.
</p>
<blockquote CLASS=q>
<p>
The <b>VARIANT</b> type cannot have the <b>VT_BYREF</b> bit set.
</p>
</blockquote>
<p>
Aha, that's the difference.
The <code>VARIANTARG</code> structure is allowed to say,
"Hey, I don't contain the data you want, but you can look over there for it."
For example, it could set its variant type to
<code>VT_BYREF | VT_I4</code> to say,
"There is an integer, but it's not stored in the <code>lVal</code> member.
Instead, you have to go to the <code>plVal</code> member,
which is a pointer to the integer you want."
</p>
<p>
This explains why <code>VARIANT</code> can be copied,
but <code>VARIANTARG</code> cannot:
If you try to copy a <code>VARIANTARG</code> that uses
<code>VT_BYREF</code>,
you are just copying the raw pointer to the data,
not the data itself.
You have no control over the memory being pointed to,
so you have no way to prevent it from being freed.
</p>
<p>
Using <code>VT_BYREF</code> is allowed in a
<code>DISPPARAMS</code>
because the caller assumes the responsibility of keeping the
pointed-to data valid for the duration of the method call.
That's just one of the
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20060320-13/?p=31853">
basic ground rules of programming</a>,
specifically the stability requirement.
The caller has to wait for the method call to return before it can
free the memory pointed to by the
<code>VARIANTARG</code>.
</p>
<p>
Okay, so what if you're implementing a method and you want to make
a copy of the <code>VARIANTARG</code>?
How do you deal with the <code>VT_BYREF</code>?
</p>
<p>
This is where
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/ms221184(v=vs.85).aspx">
the
<code>Variant&shy;Copy&shy;Ind</code> function</a>
comes into play.
This function takes a <code>VARIANTARG</code>,
possibly with <code>VT_BYREF</code>,
and converts it into a <code>VARIANT</code>,
with all <code>VT_BYREF</code> removed.
It does this by chasing the pointer one level and copying the
value back into the <code>VARIANT</code>.
For example, if the <code>VARIANTARG</code> were a
<code>VT_BYREF | VT_I4</code>,
then the
<code>Variant&shy;Copy&shy;Ind</code> function
would follow the <code>plVal</code> pointer,
read the integer stored there,
and copy it to the output <code>VARIANT</code>'s
<code>lVal</code> member,
resulting in a simple <code>VT_I4</code>.
</p>
<p>
The "Ind" therefore stands for "Indirect".
The <code>Variant&shy;Copy&shy;Ind</code> function
indirects through the pointer hiding inside the <code>VT_BYREF</code>.
</p>
<p>
Well, that was a strange bit of spelunking.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20171221-00/?p=97625#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='97625' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="5e50d609c4" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="205"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1318425">
				<div id="div-comment-1318425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JAS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171221-00/?p=97625#comment-1318425">
			December 21, 2017 at 7:13 am</a>		</div>

		<p>VARIANTARG seems straightforward and obvious.  What confuses me is that there is a lot of infrastructure which distinguishes VARIANT and PROPVARIANT even though they seem the same exact thing, they can share the same C# interop struct type, and they use different VT_ types from the same namespace. Was there an internal fight or something?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20171221-00/?p=97625&#038;replytocom=1318425#respond' onclick='return addComment.moveForm( "div-comment-1318425", "1318425", "respond", "97625" )' aria-label='Reply to JAS'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1318435">
				<div id="div-comment-1318435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sh_code</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171221-00/?p=97625#comment-1318435">
			December 22, 2017 at 5:46 am</a>		</div>

		<p>&#8220;Whatâ€™s the difference between VARIANT and VARIANTARG?&#8221;</p>
<p>&#8230;<br />
&#8220;Well, that was a strange bit of spelunking&#8221; he says cheerfully as he emerges from a cave tens of hours later, dusts his shoulderpads off, and walks back to his car*</p>
<p>love it</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20171221-00/?p=97625&#038;replytocom=1318435#respond' onclick='return addComment.moveForm( "div-comment-1318435", "1318435", "respond", "97625" )' aria-label='Reply to sh_code'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

