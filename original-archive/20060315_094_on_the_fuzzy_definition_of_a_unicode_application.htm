<html>
<head>
<title>On the fuzzy definition of a "Unicode application"</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>On the fuzzy definition of a &quot;Unicode application&quot;</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 15, 2006 / year-entry #95</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>33</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter mpz wondered why the IME cannot detect whether it is sending characters to a Unicode or non-Unicode application and generate the appropriate character accordingly. But what exactly is a Unicode application? Actually, let me turn the question around: What is a non-Unicode application? Suppose you write a program and don't #define UNICODE, so you'd...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter mpz wondered <a href="http://blogs.msdn.com/oldnewthing/archive/2005/10/14/481044.aspx#481387"> why the IME cannot detect whether it is sending characters to a Unicode or non-Unicode application and generate the appropriate character accordingly</a>.</p>
<p> But what exactly is a Unicode application? Actually, let me turn the question around: What is a non-Unicode application? </p>
<p> Suppose you write a program and don't <code>#define UNICODE</code>, so you'd think you have a non-Unicode application. But your program uses a control provided by another library, and the authors of that library defined <code>UNICODE</code>. The controls created by that library are therefore Unicode, aren't they? Now you type that frustrating character to a control created by that library. Should it generate a U+00A5 or a U+005C? </p>
<p> To know the answer to that question requires psychic powers. If the control takes the character and uses it exclusively internally, then presumably the IME should generate U+00A5. But if the control takes the character and returns it back to your program (say the control is a fancy edit control), then presumably the IME should generate U+005C. How does it know? It's not going to do some sort of analysis of the code in the helper library to decide what it's going to do with that character. Even human beings with access to the source code may have difficulty deciding whether the character will ever get converted to the <code>CP_ACP</code> code page in the future. Indeed, if the decision is based on the user's future actions, then you will need to invoke some sort of clairvoyance (and relinquishing of free will) to get the correct answer. </p>
<p> Note that this helper library might be in the form of a static library, in which case your application is really neither Unicode nor ANSI, but rather a mix of the two. Parts of it are Unicode and parts are ANSI. What's a poor IME to do? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (33)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-354903">
				<div id="div-comment-354903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete Cawley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-354903">
			March 15, 2006 at 10:33 am</a>		</div>

		<p>In my current project, there is the engine and the GUI. Parts of the engine are unicode, parts of it are ASCII and the GUI is totally unicode. As the two parts are statically linked together, it would be impossible for IME to get it right.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion odd alt thread-odd thread-alt depth-1" id="comment-354933">
				<div id="div-comment-354933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-354933">
			March 15, 2006 at 11:48 am</a>		</div>

		<p>Raymond, isn&#8217;t the IMM supposed to send a WM_UNICHAR in any case (to a non-IME-aware window, that is)? In my experience that never happens, though</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-354983">
				<div id="div-comment-354983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-354983">
			March 15, 2006 at 12:08 pm</a>		</div>

		<p>Waitaminute! Is this Raymond Chen or Michael Kaplan??</p>
<p>Am I getting my MS bloggers confused again?? :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355013">
				<div id="div-comment-355013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355013">
			March 15, 2006 at 12:37 pm</a>		</div>

		<p>The &quot;poor IME&quot; should call IsWindowUnicode on the control and use that result to make the decision.</p>
<p>If the control is Unicode and rest of the application is not, then the one who did the mix in the beginning should take care of the possible problems. IME &quot;talks&quot; to the control, not to the application, so it should give Unicode.</p>
<p>One reason why you see this mixed approach is because one need to get some of the Unicode benefits without migrating the whole application. So one can add Unicode support for user input/output, serialization, file system access, and have an almost functional application, without defining UNICODE/_UNICODE.</p>
<p>So having IME taking the decision to send ANSI would be the wrong one.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-355023">
				<div id="div-comment-355023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355023">
			March 15, 2006 at 12:54 pm</a>		</div>

		<p>&quot;If the control is Unicode and rest of the application is not, then the one who did the mix in the beginning should take care of the possible problems.&quot;</p>
<p>Then all ANSI applications that use the system edit control have a lot of work ahead of them. Good luck signing them up for this new work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355043">
				<div id="div-comment-355043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikenbondi.blogspot.com' rel='external nofollow' class='url'>Mike</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355043">
			March 15, 2006 at 1:35 pm</a>		</div>

		<p>I remember that around the time I worked on Access 2000+XP, the data-store had been converted to Unicode, but there were still bits of UI hanging around which were purely ANSI. I haven&#8217;t looked in 5 years, but it wouldn&#8217;t surprise me if such pieces were still waiting to be rewritten. Michael Kaplan could undoubtedly recount many war stories from that time :-).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-355103">
				<div id="div-comment-355103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355103">
			March 15, 2006 at 2:40 pm</a>		</div>

		<p>&quot;Then all ANSI applications that use the system edit control have a lot of work ahead of them. Good luck signing them up for this new work.&quot;</p>
<p>If I am calling GetWindowTextA or SendMessageA( &#8230; WM_GETTEXT, &#8230;) , the controls gives me ANSI, I call GetWindowTextW or SendMessageW, the control should give me Unicode.</p>
<p>Well, in fact this is not at control level, is deeper. So I call GetWindowTextA, which on Unicode systems is a wrapper and calls GetWindowTextW. When that one returns, the wrapper converts the result to ANSI and gives it back to the application.</p>
<p>A while ago I got something on this:<br />
<br /><a rel="nofollow" target="_new" href="http://www.mihai-nita.net/20050306b.shtml" rel="nofollow">http://www.mihai-nita.net/20050306b.shtml</a><br />
<br />I think everything is at API level, with W doing &quot;the work&quot; and the A doing the wrapping.<br />
<br />Sure, I have no access to the Windows sources, but &quot;stuff&quot; seems to heppen &quot;as if.&quot;</p>
<p>Am I am missing something?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-355123">
				<div id="div-comment-355123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355123">
			March 15, 2006 at 3:14 pm</a>		</div>

		<p>Mihai: And it would be too late. The app would get 0x5C instead of 0xAC or vice versa. That&#8217;s the whole point of the article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-355253">
				<div id="div-comment-355253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.abstractspoon.com' rel='external nofollow' class='url'>dan.g.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355253">
			March 15, 2006 at 5:38 pm</a>		</div>

		<p>raymond,</p>
<p>any chance of a (brief) explanation of how XP is able to treat non-unicode apps as unicode via &#8216;regional and langage options &gt; advanced&#8217;. having always believed that the only way to display, say, chinese characters correctly was to compile with _UNICODE, this facility seems all the more remarkable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355273">
				<div id="div-comment-355273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">8</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355273">
			March 15, 2006 at 5:50 pm</a>		</div>

		<p>&quot;&#8230;we&#8217;re not going to use ANSI code pages any more (and use Unicode instead&#8230;&quot; (Dean)</p>
<p>except Unicode != Unicode. Now if we would all decide on UTF8&#8230; But there are always those who want UTF16&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-355293">
				<div id="div-comment-355293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355293">
			March 15, 2006 at 6:52 pm</a>		</div>

		<p>Why would we want to use UTF-8? It&#8217;s horribly inefficient for anything but US-ASCII&#8230; Sure UTF-16 has the crappiness with the surrogates, but then you could just move to UTF-32.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355333">
				<div id="div-comment-355333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355333">
			March 15, 2006 at 10:39 pm</a>		</div>

		<p>Wednesday, March 15, 2006 3:14 PM by oldnewthing<br />
<br />&gt; Mihai: And it would be too late. The app<br />
<br />&gt; would get 0x5C instead of 0xAC or vice versa.</p>
<p>I don&#8217;t quite see the problem with Mihai&#8217;s suggestion. &nbsp;As for determining whether the app gets 0x5C or 0xAC, surely that could depend on CP_ACP because the user will already be accustomed to whichever code page they&#8217;re using. &nbsp;The user might even have been known to run other apps besides this one (on rare occasions) so they expect to get what their CP_ACP delivers.</p>
<p>Back to the base note:</p>
<p>&gt; To know the answer to that question requires<br />
<br />&gt; psychic powers.</p>
<p>So now you know that you&#8217;re well suited to writing the next IME ^u^</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-355353">
				<div id="div-comment-355353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355353">
			March 15, 2006 at 11:50 pm</a>		</div>

		<p>&quot;Mihai: And it would be too late. The app would get 0x5C instead of 0xAC or vice versa. That&#8217;s the whole point of the article.&quot;</p>
<p>I still don&#8217;t get it.</p>
<p>I type U+00A5 (the &quot;correct&quot; halfwidth yen). IME checks the control, is Unicode, sends U+00A5.</p>
<p>The application calls GetWindowTextA. That is &nbsp;a wrapper which calls GetWindowTextW, gets U+00A5, and before returning converts the buffer to ANSI.<br />
<br />If the ANSI code page is 932, it is mapped to a &quot;best fit,&quot; U+005C (there is no real halfwidth Yen in 932).<br />
<br />If the ANSI code page is something other than 932, I probably get a question mark (I don&#8217;t know all tables by heart :-)</p>
<p>If the application calls GetWindowTextW, it gets the original U+00A5, all nice and dandy.</p>
<p>I intentionally avoid saying the &quot;application is Unicode,&quot; is all about calling the A or W version of the API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-355363">
				<div id="div-comment-355363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355363">
			March 16, 2006 at 12:41 am</a>		</div>

		<p>But U+00AC is not a path separator. Converting it to 0x5C would be wrong, wouldn&#8217;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-355243">
				<div id="div-comment-355243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355243">
			March 15, 2006 at 5:37 pm</a>		</div>

		<p>What should happen is everybody should one day decide that from now on, we&#8217;re not going to use ANSI code pages any more (and use Unicode instead), and everything that *does* use ANSI dies a horrible, horrible death from that day on.</p>
<p>A man can dream&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355423">
				<div id="div-comment-355423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Bryant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355423">
			March 16, 2006 at 8:41 am</a>		</div>

		<p>I agree with Mihai. Simply put:</p>
<p>There is no way to tell if an application is Unicode, but you <em>can</em> tell if a <em>window</em> is Unicode. Since IME deals with the window, not the application, it should be able to generate the appropriate A or W messages.</p>
<p>What am I missing?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even thread-even depth-1" id="comment-355553">
				<div id="div-comment-355553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355553">
			March 16, 2006 at 11:34 am</a>		</div>

		<p>Because the application that created the window might use only ANSI functions to access the data (GetWindowTextA, etc) &#8211; if the application only manipulates the data as ANSI, does it matter that the window is marked as a Unicode window? That&#8217;s my whole point. The effective behavior is ANSI even if the window itself is &quot;Unicode&quot;. I guess I didn&#8217;t explain this well; I&#8217;ll try again later.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355893">
				<div id="div-comment-355893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355893">
			March 16, 2006 at 9:08 pm</a>		</div>

		<p>Wednesday, March 15, 2006 11:50 PM by Mihai<br />
<br />&gt; (there is no real halfwidth Yen in 932).</p>
<p>0x5C is the real halfwidth yen sign in 932. &nbsp;(Real in the sense of being a character in the codepoint, not the sense of being real Japanese. &nbsp;Real Japanese in this case is really a Chinese character ^u^ &nbsp;But the symbol is also really used in Japan now.)</p>
<p>In an ANSI code page, characters aren&#8217;t U+xxxx, they&#8217;re code page codepoints.</p>
<p>If the app is Unicode then U+00A5 looks OK. &nbsp;If the app is ANSI then the selection of codepoint should depend on CP_ACP.</p>
<p>Oh yeah I see the problem there for Unicode apps. &nbsp;The IME presents a list of candidates but how can the user distinguish two of the candidates. &nbsp;If the user wants a character that will be printed as a yen sign then they want to select U+00A5. &nbsp;If the user wants a character that will work as a path separator then they want U+005C, even though U+005C is a character that they&#8217;ve never seen in a Japanese system because Shift-JIS doesn&#8217;t have any codepoint for it. &nbsp;The IME could display a half-width yen sign for U+005C, but then how could the user distinguish which half-width yen sign they want.</p>
<p>This problem doesn&#8217;t arise for an ANSI window because 0x5C is the yen sign. &nbsp;This problem only arises for a Unicode window.</p>
<p>Anyone want to give me a million path separators so I can send path separators to Microsoft to renew my MSDN subscription? &nbsp;(Not yen, because path separators are more important than money.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-355903">
				<div id="div-comment-355903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">michkap</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355903">
			March 17, 2006 at 2:28 am</a>		</div>

		<p>As I think Raymond has indicated pretty clearly, it is not as simple as an IsWindowUnicode call. Because whether the specific DLGPROC or WNDPROC is expecting Unicode is what tells whether Unicode is expected or not, as modified by the actual message in some cases (like all of those Shell common control messages that are &#8216;A&#8217; or &#8216;W&#8217; specific). </p>
<p>And the Unicodality of the window can also be a factor, as well as the habit people have of calling WNDPROCs/DLGPROCs directly rather than going through CallWindowProc (in which case all bets are quite literally off).</p>
<p>Now in the specific case of the Yen, it will seldom survive as U+00a5 due to the best fot mapping to U+005c, which is the main reason that they are treated as being equal on a Japanese system. They look the same anyway, in that case.</p>
<p>Summary &#8212; if you think its easy then you don&#8217;t understand the problem&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355923">
				<div id="div-comment-355923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355923">
			March 17, 2006 at 4:18 am</a>		</div>

		<p>&lt;&lt;Because whether the specific DLGPROC or WNDPROC is expecting Unicode is what tells whether Unicode is expected or not&gt;&gt;</p>
<p>Yes. But the control is Unicode and has it&#8217;s own WNDPROC.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-355943">
				<div id="div-comment-355943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355943">
			March 17, 2006 at 4:33 am</a>		</div>

		<p>If CP_ACP is different from 932 but has a codepoint for the yen sign then the user probably wants to map the yen sign to the same codepoint that U+00A5 maps to. &nbsp;I think I have a Vista beta 1 installation that is configured this way at the moment, and maybe can experiment. &nbsp;I&#8217;ve configured English-language Windows XP in a similar manner for a few friends and maybe should ask if one of them will lend their machine for an experiment.</p>
<p>In a Unicode application we would want U+00A5 to remain as U+00A5 except for the path separator problem. &nbsp;By the way I really do agree that the path separator is more important in the Windows environment, but that doesn&#8217;t lessen the ugliness of the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-355963">
				<div id="div-comment-355963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Bryant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355963">
			March 17, 2006 at 6:57 am</a>		</div>

		<p>Oh, I didn&#8217;t pay attention, this is really ALL about the path separator, in which case even knowing if the window is Unicode does not tell you what the program wants. In short, yes &quot;Unicode application&quot; is fuzzy, but even if it wasn&#8217;t, it wouldn&#8217;t help the Yen/separator issue. That&#8217;s the problem with this post: it implies that knowing whether the application was Unicode would have a bearing on what character to generate.</p>
<p>There is NO simple solution to the U+00A5 U+005C issue, because if the text happens to be a pathname, you will need U+005C even in a Unicode program. As Mihai pointed out elsewhere, in Japan the user may have the option of using the fullwidth Yen U+FFE5 when he doesn&#8217;t want the path separator, but otherwise in a Japanese local you generally have to drive U+00A5 to U+005C so as not to break pathnames. I&#8217;ve posted about this:<br />
<br /><a rel="nofollow" target="_new" href="http://codesnipers.com/?q=node/128" rel="nofollow">http://codesnipers.com/?q=node/128</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-355993">
				<div id="div-comment-355993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2006/03/17/553499.aspx' rel='external nofollow' class='url'>Sorting It All Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-355993">
			March 17, 2006 at 9:12 am</a>		</div>

		<p>Riffing on Raymond here, and his post On the fuzzy definition of a &amp;quot;Unicode application&amp;quot;&#8230;.<br />
<br />The points&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-356163">
				<div id="div-comment-356163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-356163">
			March 17, 2006 at 5:03 pm</a>		</div>

		<p>Two of my previous comments did not make it, but let&#8217;s hope this one does:<br />
<br />&lt;a href=&quot;<a rel="nofollow" target="_new" href="http://www.mihai-nita.net/w20060317a.shtml&quot;&gt;http://www.mihai-nita.net/w20060317a.shtml&lt;/a&gt;" rel="nofollow"></a><a href="http://www.mihai-nita.net/w20060317a.shtml&quot;&gt;http://www.mihai-nita.net/w20060317a.shtml&lt;/a&#038;gt" rel="nofollow">http://www.mihai-nita.net/w20060317a.shtml&quot;&gt;http://www.mihai-nita.net/w20060317a.shtml&lt;/a&#038;gt</a>;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-356003">
				<div id="div-comment-356003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">michkap</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-356003">
			March 17, 2006 at 9:16 am</a>		</div>

		<p>Hi Mihai &#8212;</p>
<p>That assumes everyone in the WNDPROC/DLGPROC chain is also Unicode &#8212; a *huge* assumption, one that does not always bear out, unfortunately&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-356183">
				<div id="div-comment-356183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mpz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-356183">
			March 17, 2006 at 5:38 pm</a>		</div>

		<p>I am honored by Raymond taking the time to answer my question (the answer of which I guessed correctly, ie. next to impossible).</p>
<p>God I wish they wouldn&#8217;t have mucked with the ASCII area when making the Japanese codepages. Would it have been that hard to put the halfwidth yen into the 128-255 area with all the other halfwidth characters.. I suspect it will take decades until all non-Unicode apps have died out and the IME can finally output the correct character.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-356203">
				<div id="div-comment-356203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-356203">
			March 17, 2006 at 5:44 pm</a>		</div>

		<p>Hm, the link is all messed-up.<br />
<br />Try this: <a rel="nofollow" target="_new" href="http://www.mihai-nita.net/w20060317a.shtml" rel="nofollow">http://www.mihai-nita.net/w20060317a.shtml</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-356073">
				<div id="div-comment-356073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Bryant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-356073">
			March 17, 2006 at 12:17 pm</a>		</div>

		<p>&quot;assumes everyone in the WNDPROC/DLGPROC chain is also Unicode&quot;</p>
<p>No it doesn&#8217;t assume that (as far as my limited understanding can tell). It just supports the fact that you know whether the particular *window* is Unicode, not talking about everybody who hooks into the proc. The window is the point of reference by which the behavior would be consistent and as expected for everyone involved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-356293">
				<div id="div-comment-356293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Bryant</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-356293">
			March 18, 2006 at 9:11 am</a>		</div>

		<p>Even if non-Unicode charsets go away completely we will still have these yen and won sign problems. Japan and Korea display the Unicode character U+005C (backslash) differently and encode their halfwidth monetary symbol differently than the rest of the world. It will continue to be a problem as text is transferred between locales.</p>
<p>Before Japan and Korea originated Unicode text is shared internationally, programmers have to be on the lookout to repair it so that the U+005C is only used in pathnames and not where it is meant to be a monetary symbol.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-356763">
				<div id="div-comment-356763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-356763">
			March 20, 2006 at 10:35 pm</a>		</div>

		<p>Friday, March 17, 2006 5:38 PM by mpz<br />
<br />&gt; God I wish they wouldn&#8217;t have mucked with<br />
<br />&gt; the ASCII area when making the Japanese<br />
<br />&gt; codepages.</p>
<p>ASCII already mucked with the ASCII area. &nbsp;In case anyone considers the &quot;A&quot; of ASCII to be ambiguous, ASCII was originally called USASCII. &nbsp;The name made it clear that the encoding already included national character assignments.</p>
<p>Other nations made national character assignments as they needed.</p>
<p>If you don&#8217;t like it, don&#8217;t buy ASCII compatible equipment, buy equipment that uses 7-bit German encodings and persuade all your friends to agree with you.</p>
<p>&gt; Would it have been that hard to put the<br />
<br />&gt; halfwidth yen into the 128-255 area</p>
<p>There is no such thing. &nbsp;In general the 0-127 area consists of single-byte characters but I&#8217;m not sure if that&#8217;s required. &nbsp;In principle the 128-255 area consists of characters that aren&#8217;t single bytes. &nbsp;Shift-JIS (code page 932) does put some single-byte characters in part of the 128-255 range but non-Microsoft character sets don&#8217;t. &nbsp;For example in EUC if a lead byte is in the 128-255 range then the character length will be 2 or 3 bytes. &nbsp;In Shift-JIS the character length will be 1 or 2 bytes, and the maximum number of representable characters is smaller.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-356813">
				<div id="div-comment-356813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Istv&#225;n N&#233;meth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-356813">
			March 21, 2006 at 9:18 am</a>		</div>

		<p>Hi all,</p>
<p>I have recently (today) run into a similar problem.</p>
<p>I am trying to hook up on some ASCII dlls and ocxs in a .NET environment (and there are some detours library too, so it will be a wonderful hack :) ).</p>
<p>I have found that there are SendMessageA/W, CallWindowProcA/W and Get/SetWindowLongA/W.</p>
<p>So the question: should I call the SetWindowLongA to handle SendMessageA and to call it further CallWindowProcA, and similar to W? (sounds logical to me) Or is there anything else I should check before hooking on some window?</p>
<p>So how fuzzy is the definition of a Unicode application&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-359193">
				<div id="div-comment-359193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mpz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-359193">
			March 26, 2006 at 12:42 am</a>		</div>

		<p>&gt;&gt; Would it have been that hard to put the<br />
<br />&gt;&gt; halfwidth yen into the 128-255 area<br />
<br />&gt;<br />
<br />&gt; There is no such thing. &nbsp;In general the 0-127 area consists of single-byte characters<br />
<br />&gt; but I&#8217;m not sure if that&#8217;s required. &nbsp;In principle the 128-255 area consists of<br />
<br />&gt; characters that aren&#8217;t single bytes.</p>
<p>Yes there is. Please have a look at the JIS X 0201:1976 standard. It specifies the most basic Japanese character set. 0-127 is ASCII (with backslash replaced by the yen and tilde replaced by overline) and halfwidth katakana are in the 161-223 area.</p>
<p>*That* is the root of this problem. They shouldn&#8217;t have messed with the ASCII area.</p>
<p>Microsoft then eventually chose the Shift-JIS algorithm to cram the JIS X 0208 set of characters into the unused space of JIS X 0201 (by putting the first byte of a doublebyte sequence into the 128-160 or 224-255 range). What EUC does with the characters is beside the point of the debate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-360843">
				<div id="div-comment-360843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060315-16/?p=31913#comment-360843">
			March 29, 2006 at 4:33 am</a>		</div>

		<p>Sunday, March 26, 2006 12:42 AM by mpz<br />
<br />&gt; Yes there is. Please have a look at the JIS<br />
<br />&gt; X 0201:1976 standard.</p>
<p>Ouch, I am amazed to see that this standard assigned the 160-223 range. &nbsp;Previously I had only seen this standard cited for JIS-Romaji. &nbsp;You are right about this part of it.</p>
<p>&gt; They shouldn&#8217;t have messed with the ASCII<br />
<br />&gt; area.</p>
<p>Everyone (including ASCII) messed with the national character portion of the 0-127 range. &nbsp;It&#8217;s somewhat like saying humans shouldn&#8217;t have messed with chimpanzee DNA, when they didn&#8217;t. &nbsp;Both humans and chimpanzees made separate branches from a common ancestor.</p>
<p>Telling Japanese to copy ASCII characters in that range is like telling Americans to copy German characters in that range, instead of curly braces and such stuff.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

