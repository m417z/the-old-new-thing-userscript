<html>
<head>
<title>Cancelling the INamespace­Walk::Walk operation a little faster</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Cancelling the <CODE>INamespace&shy;Walk::</CODE><CODE>Walk</CODE> operation a little faster</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 10, 2017 / year-entry #249</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You can use <CODE>IAction­Progress</CODE></td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20171109-00/?p=97375">
last time</a>
that you can stop a
<code>INamespace&shy;Walk::</code><code>Walk</code> operation
by returning a COM error code from the
<code>Enter&shy;Folder</code> or
<code>Found&shy;Item</code> callback.
However, that may not be fast enough.
</p>
<p>
I noted some time ago
that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050203-00/?p=36533">
if you're going to enumerate the contents of a directory,
you'd best do it all at once</a>.
And that's what
<code>INamespace&shy;Walk::</code><code>Walk</code> does.
After it enters a directory,
it enumerates the whole thing at one shot,
and then (optionally) sorts it,
and then calls the <code>Found&shy;Item</code> method
for each item that was found.
</p>
<p>
If you happen to enter a large directory,
then the "enumerate the whole thing at one shot" step
can take a while.
But there's a way to sneak in during the enumeration phase
and cancel the operation:
Implement the
<code>IAction&shy;Progress</code> interface on your
<code>INamespace&shy;Walk&shy;CB</code> object.
Note that this works only if you do <i>not</i> pass the
<code>NSWF_</code><code>SHOW_</code><code>PROGRESS</code> flag.
If you pass the
<code>NSWF_</code><code>SHOW_</code><code>PROGRESS</code> flag,
then the progress dialog's Cancel button controls the cancellation.
</p>
<p>
Assuming you don't pass the
<code>NSWF_</code><code>SHOW_</code><code>PROGRESS</code> flag,
the
<code>INamespace&shy;Walk::</code><code>Walk</code> method
will call
<code>IAction&shy;Progress::</code><code>Begin</code> to get
the party started,
and
<code>IAction&shy;Progress::</code><code>End</code> when it's all over.
In between, it will call
<code>IAction&shy;Progress::</code><code>QueryCancel</code>.
If your
<code>IAction&shy;Progress::</code><code>QueryCancel</code>
method returns
<code>*pfCancelled = TRUE</code>,
then the
<code>INamespace&shy;Walk::</code><code>Walk</code> operation
will abandon the enumeration, unwind all the entered folders with
<code>Leave&shy;Folder</code>, and then return
<code>HRESULT_</code><code>FROM_</code><code>WIN32(</code><code
>ERROR_</code><code>CANCELLED)</code>.
</p>
<p>
Let's use this technique
to cancel the
<code>INamespace&shy;Walk::</code><code>Walk</code> operation
a bit more quickly.
Make the following changes to the program we had last time:
</p>
<pre>
#define STRICT
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;wrl/client.h&gt;
#include &lt;wrl/implements.h&gt;
#include &lt;stdio.h&gt; // Horrors! Mixing stdio and C++!

namespace wrl = Microsoft::WRL;

class WalkCallback : public wrl::RuntimeClass&lt;
  wrl::RuntimeClassFlags&lt;wrl::ClassicCom&gt;,
  INamespaceWalkCB,
  <font COLOR=blue>IActionProgress</font>&gt; // New interface!
{
public:
  // INamespaceWalkCB
  IFACEMETHODIMP FoundItem(IShellFolder *,
   PCUITEMID_CHILD) override
   { m_itemCount++; return TimeoutStatus(); }

  IFACEMETHODIMP EnterFolder(IShellFolder *,
   PCUITEMID_CHILD) override
   { m_folderCount++; return TimeoutStatus(); }

  IFACEMETHODIMP LeaveFolder(IShellFolder *,
   PCUITEMID_CHILD) override { return S_OK; }

  IFACEMETHODIMP InitializeProgressDialog(PWSTR *ppszTitle,
    PWSTR *ppszCancel) override
    { *ppszTitle = nullptr; *ppszCancel = nullptr;
      return E_NOTIMPL; }

  <font COLOR=blue>// IActionProgress - new interface!
  IFACEMETHODIMP Begin(SPACTION, SPBEGINF) override
  { return S_OK; }

  IFACEMETHODIMP UpdateProgress(ULONGLONG, ULONGLONG) override
  { return S_OK; }

  IFACEMETHODIMP UpdateText(SPTEXT, LPCWSTR, BOOL) override
  { return S_OK; }

  IFACEMETHODIMP QueryCancel(BOOL *pfCancelled) override
  { *pfCancelled = IsTimedOut(); return S_OK; }

  IFACEMETHODIMP ResetCancel() override { return S_OK; }
  IFACEMETHODIMP End() override { return S_OK; }</font>

  int ItemCount() const { return m_itemCount; }
  int FolderCount() const { return m_folderCount; }

private:
  bool IsTimedOut()
    { return <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493">GetTickCount() - m_startTime</a> &gt; 1000; }

  HRESULT TimeoutStatus()
    { return IsTimedOut() ?
      HRESULT_FROM_WIN32(ERROR_CANCELLED) : S_OK; }

  DWORD m_startTime = GetTickCount();
  int m_itemCount = 0;
  int m_folderCount = 0;
};

int __cdecl wmain(int argc, PWSTR argv[])
{
  <a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040520-00/?p=39243">CCoInitialize</a> coinit;

  wrl::ComPtr&lt;INamespaceWalk&gt; walk;
  CoCreateInstance(CLSID_NamespaceWalker, nullptr,
    CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&amp;walk));

  wrl::ComPtr&lt;IShellItem&gt; root;
  SHCreateItemFromParsingName(argv[1], nullptr,
    IID_PPV_ARGS(&amp;root));

  auto callback = wrl::Make&lt;WalkCallback&gt;();

  HRESULT hr = walk-&gt;Walk(root.Get(), NSWF_DEFAULT,
    100, callback.Get());

  printf("Walk completed with result 0x%08x\n", hr);
  printf("Found %d items and %d folders\n",
   callback-&gt;ItemCount(), callback-&gt;FolderCount());

  return 0;
}
</pre>
<p>
All we did was add <code>IAction&shy;Progress</code>
support to our callback object.
When asked if we want to cancel the operation,
we report whether the operation has timed out.
</p>
<p>
Adding this extra support will not be noticeable
when enumerating relatively small directories
from relatively fast media.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1315425">
				<div id="div-comment-1315425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315425">
			November 10, 2017 at 7:32 am</a>		</div>

		<p>I found that enumerating file system contents has always been reasonably fast, even on slow network drives. However, retrieving additional information, such as icons from SHGetFileInfo() and related interfaces, can take up considerable time, and I usually do this from a background thread. I always wondered if there&#8217;s a way to cancel a pending SHGetFileInfo() call, maybe a way to (non-sepcifically) cancel all pending IO for the background icon thread?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1315435">
				<div id="div-comment-1315435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315435">
			November 10, 2017 at 7:49 am</a>		</div>

		<p>while(thread hasn&#8217;t acknowledged shutdown command)<br />
    CancelIoEx(thread handle)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1315445">
				<div id="div-comment-1315445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Koro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315445">
			November 10, 2017 at 8:07 am</a>		</div>

		<p>This sounds almost as bad as closing handles you don&#8217;t own or forcibly terminating the thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1315446">
				<div id="div-comment-1315446" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315446">
			November 10, 2017 at 9:01 am</a>		</div>

		<p>But CancelIoEx() takes a hFile that only SHGetFileInfo() knows &#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1315456">
				<div id="div-comment-1315456" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315456">
			November 10, 2017 at 9:10 am</a>		</div>

		<p>Ah, I see, it&#8217;s CancelSynchronousIo(hThread) that could end the pending IO requests inside SHGetFileInfo(). Would that be good practice, say, like Windows Explorer is doing?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1315486">
				<div id="div-comment-1315486" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio RodrÃ­guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315486">
			November 10, 2017 at 3:48 pm</a>		</div>

		<p>As Koro says, it is the moral equivalent of a user saying &#8220;this file copy is so slow, I&#8217;m going open the Task Manager and terminate Explorer.exe&#8221;. As we say in Spain, it&#8217;s using a cannon to kill a fly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1315525">
				<div id="div-comment-1315525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315525">
			November 11, 2017 at 2:51 pm</a>		</div>

		<p>Turns out this is a bad idea. I had neglected shell plugins.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1315495">
				<div id="div-comment-1315495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio RodrÃ­guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315495">
			November 10, 2017 at 3:53 pm</a>		</div>

		<p>@florian: yes, SHGetFileInfo() is slow by default. It has to be. Reading a directory, even one with thousands of files, is a single operation on SMB. Extracting the icon requires opening the executable and reading the executable header, the resource directory and the actual icon. If the file is not an executable, in many cases you still have to check for alternate file streams or extra metadata that is not provide by the directory enumeration. These are several separate operations for each file. So you can expect it to be three or four orders of magnitude slower.</p>
<p>But Raymond explained a few years ago how to trick SHGetFileInfo() into ignoring the actual file icon and metadata, and return the default icon looking only at the local registry database. Just pass the SHGFI_USEFILEATTRIBUTES flag. It means &#8220;just pretend the file exists locally and doesn&#8217;t have any strange attributes&#8221;, so it makes the SHGetFileInfo() call almost instant. See the details at <a href="https://blogs.msdn.microsoft.com/oldnewthing/20040601-00/?p=39073" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20040601-00/?p=39073</a> .</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1315505">
				<div id="div-comment-1315505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315505">
			November 11, 2017 at 4:09 am</a>		</div>

		<p>Thank you very much for all the interesting comments.</p>
<p>I agree that calling CancelSynchronousIo() to abort SHGetFileInfo() seems like a terrible hack. At first I thought maybe it&#8217;s not quite as bad as calling TerminateThread(), but given that a thread also needs to call CoInitialize() before, and CoUninitialize() after using SHGetFileInfo(), there may be, well, &#8230; a lot of &#8220;undesired effects&#8221;.</p>
<p>I&#8217;m aware of the differences between enumerating file system directories, querying &#8220;simple&#8221; file system meta data (such as file attributes), and retrieving advanced, possibly file content-dependent meta data (as does SHGetFileInfo()). I think that SHGFI_USEFILEATTRIBUTES is useful to get a quick initial view, say of a list view showing a directory. But once the background icon thread is running, it can only be terminated gracefully in between the calls to SHGetFileInfo().</p>
<p>Here&#8217;s why this bothers me so much: on my (100-MBit) NAS, I keep backup copies of important downloads and disk snapshots. Many of the downloaded files are large SFX ZIP- or CAB-archives, with a .exe extension, and a custom icon (such as WindowsXPMode_N_en-us.exe, for example). SHGetFileInfo() takes much longer than I&#8217;d expect it would take to find and load the icon resource from such files, probably because Windows Defender checksums (and reads) the whole file, before allowing SHGetFileInfo() to read just the PE header, find the resource tables, and load the icon.</p>
<p>To avoid the user having to wait for SHGetFileInfo() to return before navigating to a new directory on my NAS, it&#8217;s probably best to let the icon thread run as long as it needs (from some yet to be designed wrapper to take care of CloseHandle()&#8217;ing the thread handle when done), but synchronize access to the list view showing the directory, and have the icon thread check if it&#8217;s still on the same directory, before updating the list view icons retrieved through SHGetFileInfo().</p>
<p>Or, disable the antivirus software? Is there any registry hack for this, anyone? Or maybe, buy faster LAN switches and mount new wires?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1315506">
				<div id="div-comment-1315506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315506">
			November 11, 2017 at 7:40 am</a>		</div>

		<p>I consider running my programs on slow infrastructure an interesting test to unveil if I have done something terribly wrong &#8230; That&#8217;s why I&#8217;ve been keeping an old PC with a floppy drive for a long time.</p>
<p>Indeed, disabling Windows Defender makes SHGetFileInfo() return much faster in the case of the large SFX archive WindowsXPMode_N_en-us.exe. The lag it takes to calculate the checksum of this file with 3rd party command line utilities feels about the same as the lag caused by SHGetFileInfo() with Windows Defender enabled.</p>
<p>So it may even be more complicated to cancel SHGetFileInfo(), as the antivirus checks are probably on another thread in another process, and &#8220;cancelling them&#8221; (in theory) would look like a malware attack?</p>
<p>Anyway, what I don&#8217;t get is that 1) why the antivirus checks only seem to be cached for the lifetime of the current session, and seem to be run in full length after the next login, and 2) why SHGetFileInfo() does not simply return information from Windows Explorer&#8217;s Icon Cache (the system image list icon index), but instead seems to &#8220;read&#8221; the underlying file in a way that triggers the antivirus checks.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1315515">
				<div id="div-comment-1315515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio RodrÃ­guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315515">
			November 11, 2017 at 9:52 am</a>		</div>

		<p>I don&#8217;t have definite answers for your questions, but I can make an educated guess about the cache lifetime. A cache with a bad policy is the same as a resource leak. Windows (and any other general purpose OS) has to work on portable computers, that may be connected to the office&#8217;s network in the morning, to the home&#8217;s one in the evening, and to two different clients&#8217; networks the following day when you are doing field service. It has to draw a line somewhere, and a session is a natural border.</p>
<p>Disabling Windows Defender (or any other antimalware) via a registry hack should not be possible, at least not without elevation. Else, malware would do it to defeat its detection.</p>
<p>I&#8217;m not sure you have many options. I&#8217;d try to reorder the calls to SHGetFileInfo() so the more expensive ones happen last. That would make the results show faster. First, I&#8217;d get the icon for every file that is not an executable (or maybe get all default icons using the SHGFI_USEFILEATTRIBUTES flag), and then I&#8217;d make a second round for obtaining the executables&#8217; icons, smaller files first. It wouldn&#8217;t make it faster, but it would make it more responsive. Also, if you have kept the view open long enough for it to process the larger files, chances are you aren&#8217;t going to leave/close it soon, so the block would be less noticeable.</p>
<p>You may also want to take into account which icons are actually shown in the current view and get their icons first. If you are listing a lot of files, chances are that the list view shows a scroll bar, and there is no hurry in getting the icon for a file that we aren&#8217;t showing right now.</p>
<p>If you open in Explorer the System32 folder (or any other with hundreds of executables) and look carefully, you&#8217;ll see that Explorer seems to implement most of these suggestions (except for the ordering by size).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt depth-3 parent" id="comment-1315535">
				<div id="div-comment-1315535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315535">
			November 11, 2017 at 3:06 pm</a>		</div>

		<p>Go one step lower and call IExtractIcon::GetIconLocation with GIL_ASYNC and fall back to GIL_DEFAULTICON.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1315545">
				<div id="div-comment-1315545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315545">
			November 12, 2017 at 2:46 am</a>		</div>

		<p>Thanks for the input.</p>
<p>The current flow is:</p>
<p>Background thread â call SHGetFileInfo() â wait for background thread to return from SHGetFileInfo() before clearing the directory list view and navigating to a new directory.</p>
<p>With IExtractIcon, things would go like this:</p>
<p>call IExtractIcon::GetIconLocation(GIL_ASYNC) â returns E_PENDING â background thread â call IExtractIcon::GetIconLocation(~GIL_ASYNC) â call IExtractIcon::Extract() â wait for background thread to return from IExtractIcon::Extract() before clearing the directory list view and navigating to a new directory.</p>
<p>This would produce the same lag that bothers me right now, I suppose. I should not wait for the background thread to finish, before enabling navigation to a new directory.</p>
<p>Windows Explorer exhibits the same lags when extracting icons for a directory full of large SFX archives (can also be experienced on a new machine, with the latest OS and updates, and SFX archives stored on the local hard drive, so it&#8217;s not just a network latency/caching issue), but it allows navigating to another directory, or closing the window, without waiting for the pending icon extractions. It&#8217;s really amazing how Windows Explorer handles these kinds of async background tasks, keeping the UI light-weight and responsive.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-5" id="comment-1315546">
				<div id="div-comment-1315546" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315546">
			November 12, 2017 at 5:13 am</a>		</div>

		<p>No, don&#8217;t wait, use GIL_DEFAULTICON to get a plain icon or if that is to slow, just cache the index of the folder and plain document in the system image list at startup and use those while populating the file list initially. Then you can just update the image index of each item as they complete on the background thread.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1315685">
				<div id="div-comment-1315685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1315685">
			November 14, 2017 at 4:00 am</a>		</div>

		<p>So, as a summary, here&#8217;s the methods to find the icons associated with files and folders (follow either path A or B):</p>
<p>Get plain/default icons for a quick initial view:</p>
<p>A1. SHGetFileInfo(SHGFI_USEFILEATTRIBUTES)<br />
B1. IExtractIcon::GetIconLocation(GIL_DEFAULTICON) â IExtractIcon::Extract()</p>
<p>Get &#8220;fast&#8221; final icons:</p>
<p>B2. IExtractIcon::GetIconLocation(GIL_ASYNC)==S_OK â IExtractIcon::Extract()</p>
<p>Get &#8220;slow&#8221; final icons:</p>
<p>B3. IExtractIcon::GetIconLocation(GIL_ASYNC)==E_PENDING â IExtractIcon::GetIconLocation(~GIL_ASYNC)==S_OK â IExtractIcon::Extract()</p>
<p>Get &#8220;fast&#8221; and &#8220;slow&#8221; final icons:</p>
<p>A2. SHGetFileInfo(~SHGFI_USEFILEATTRIBUTES)</p>
<p>Steps B3. and A2. should run on a background thread.</p>
<p>Both path A and path B would take the same total time to find all final icons, I would guess. But path B might make the UI feel quicker, in some cases.</p>
<p>I feel that the order to retrieve the final icons (Windows Explorer-style: visible-first and visible-only vs. whole list view top-down following path A) does not impact usability too much, but the important thing is that the background tasks B3. and A2. must not block the UI.</p>
<p>Did I get it?</p>
<p>BTW: asking for a registry hack to disable antivirus checks was just kidding &#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn odd alt depth-2" id="comment-1316465">
				<div id="div-comment-1316465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171110-00/?p=97385#comment-1316465">
			November 20, 2017 at 1:25 am</a>		</div>

		<p>Not registry hack, but I wonder if it is possible to temporarily disable antivirus scanning for icon extraction. E.g. if you rename the file, will AV let SHGetFileInfo() run faster?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

