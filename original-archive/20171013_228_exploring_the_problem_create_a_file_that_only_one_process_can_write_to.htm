<html>
<head>
<title>Exploring the problem: Create a file that only one process can write to</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Exploring the problem: Create a file that only one process can write to</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 13, 2017 / year-entry #229</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>49</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">That's not the real problem.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer liaison explained that they had a customer who wanted
to create a file that only one process can write to.
The customer has a program that
writes important information to a file,
and they want to prevent the user
from modifying that file.
The program is running under the credentials of the logged-in user,
so they cannot deny write access to the file,
because that would prevent the program itself from being able to write to it.
They considered locking the file
by denying sharing,
but that would be effective only while the program is running.
</p>
<p>
This is a difficult position right off the bat,
because permissions belong to users, not to processes.
Since the program is running under the user's credentials,
the user has full control over the process and can access
to the sensitive file by stealing the file handle out of
the process.
Any solution would therefore require the involvement of
more than one set of user credentials.
</p>
<p>
One solution is to have a service.
The sensitive file is accessible only to the account
under which the service runs.
The application contacts the service,
and it is the service which writes the data to the file.
</p>
<p>
Mind you, this is still vulnerable:
The user can attack the program and manipulate the parameters
that it passes to the service.
The service cannot trust the data received from the program
because the program could be passing false data.
</p>
<p>
The customer liaison explained that the
customer wants to prevent the end users from tampering with
the program's log file.
The program is monitoring employee activities,
and the customer has found that in many cases,
employees report issues with the program,
and when they debug the problem, they discover that
the log files have been tampered with.
To prevent tampering,
they want the file to be writable only by the program
generating the log.
</p>
<p>
I noted that the fact that the employee is tampering with
the log file should be a significant data point in building
a case against them.
After all, if the user doesn't want the information to be logged,
they can reformat the hard drive that contains the log file.
</p>
<p>
The customer liaison thanked us for our feedback and reported
that the customer decided to use a separate account for accessing
the log file.
To avoid the complexity of a Windows service,
the customer is simply having the program temporarily
impersonate the special account,
write the data to the log file,
and then stop impersonating.
The password for the special account is stored in an encrypted
configuration file,
which is how they are currently storing the password to their database.
</p>
<p>
Okay, now you've created a system that would never pass a security
review.
</p>
<p>
You think you're so smart by encrypting the password,
but that doesn't add any security because the program itself
must be able to decrypt it.
An attacker can simply set a breakpoint in the program right
after the code that decrypts the password,
and now they have the password in the clear.
With this password, they can not only manipulate their log files,
they can also manipulate the log files of <i>other users</i>.
Your original problem was a
data tampering security vulnerability,
but by giving the user the password to the special account,
you added spoofing (the user can impersonate the special user
and do <i>anything</i> that special user can do),
information disclosure (obtaining access to log files for other
users),
and
denial of service
(locking the log file and preventing anybody else from accessing it).
</p>
<p>
And in fact, they have this insecure system already in production,
since they admitted that they are already using this technique
to record the password to their database.
</p>
<p>
The customer liaison thanked us for pointing this out and
will advise the custom of these additional issues.
</p>
<p>
Another approach that doesn't involve a service is to use
the system event log.
The program can write entries to a custom event log,
and you get to take advantage of existing infrastructure to collect
logs across your organization.
</p>
<p>
We never did find out what the customer ended up doing.
But we hope it wasn't the thing about putting the password
in an encrypted file (and giving everybody the decryption key).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (49)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1" id="comment-1312216">
				<div id="div-comment-1312216" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312216">
			October 13, 2017 at 7:09 am</a>		</div>

		<p>If they need that kind of oversight they might want to consider using Terminal Services instead&#8230; that way the server can run the monitoring process as an admin and the users are sandboxed as standard users in their own Terminal Services session. That would alleviate any need to do any of this and would allow them to log using the windows logging system&#8230; which is probably what they should have used in the first place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1312226">
				<div id="div-comment-1312226" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312226">
			October 13, 2017 at 7:16 am</a>		</div>

		<p>When I have had requirements like this in the past, I send the log data off box to a server via tcp.  The program on the other end then has responsibility to write the log files.   To make this secure, one has to deal with certificates on both ends, encrypting the data stream, and a other issues as well.  </p>
<p>BTW, what the customer wants to do would be trivial on an AS/400 using owner adopted authority.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-iboyd even depth-2 parent" id="comment-1312316">
				<div id="div-comment-1312316" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312316">
			October 13, 2017 at 9:33 am</a>		</div>

		<p>The problem with the idea of sending logs off to a logging server is that you&#8217;re still at the mercy of the client application.</p>
<p>We&#8217;re already in a world where the user can debug their own program. That means they can alter logs about to be sent, or they can completely `nop` or `jmp` around logging.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-3" id="comment-1312626">
				<div id="div-comment-1312626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312626">
			October 15, 2017 at 6:51 pm</a>		</div>

		<p>There&#8217;s no need to send the log entries in plain text.</p>
<p>In my experience, if there&#8217;s no requirement for the users to be able to read their own records, without the &#8220;map&#8221; to the message numbers you use, it&#8217;d be very difficult for them to modify the program to generate data in meaningful way, without generating a few suspicious entries first. If there are report to catch honeypot messages (some message must only appear after some other message), there would be very high chance to catch any employee who try to temper with it.</p>
<p>When you design it to store data on remote server and only allow &#8220;insert&#8221; but not &#8220;update&#8221; and &#8220;delete&#8221;, I would be satisfy that such &#8220;security measure&#8221; would be enough.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1312245">
				<div id="div-comment-1312245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jake</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312245">
			October 13, 2017 at 7:54 am</a>		</div>

		<p>if the integrity of the log file is so important, i would investigate using a blockchain.  send new blocks out via tcp and udp to different hosts, and keep a local copy of the bitstream on a separate raw partition :-)  let them try to modify that successfully, if they can even find it!</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1312296">
				<div id="div-comment-1312296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312296">
			October 13, 2017 at 9:17 am</a>		</div>

		<p>&#8230;.but <i>why</i>?  The problem is that the blockchain isn&#8217;t being secured by the users (presumably the company would be managing the keys and infrastructure), so the company could still rewrite the logs whenever they feel like (since a work-factor based chain would likely be too expensive).  At that point you have a distributed copy of a centrally managed log, which, while possibly nice from a recovery point of view, isn&#8217;t otherwise helpful (especially since I&#8217;d imagine most logging tools can set backup log locations).  That&#8217;s ignoring the fact you have to be very careful about what you write to a publicly viewable distributed log, less so about a central one which can be access controlled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd even depth-2 parent" id="comment-1312325">
				<div id="div-comment-1312325" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312325">
			October 13, 2017 at 9:35 am</a>		</div>

		<p>The problem with the client application sending logs out via UDP to be incorporated into a blockchain, is that you still have to trust the client application.</p>
<p>We&#8217;re already in a world where the user is attaching debuggers to the process (to read database credentials); they can then certainly use the debugger to `nop` or alter logging before it goes out.</p>
<p>Of course, we&#8217;re not talking about **security**, we&#8217;re talking about **defense in depth**.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3 parent" id="comment-1312326">
				<div id="div-comment-1312326" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312326">
			October 13, 2017 at 9:51 am</a>		</div>

		<p>Yup. &#8220;The user can attack the program and manipulate the parameters that it passes to the service.&#8221; The user can make the program log &#8220;The user is being super-productive&#8221; instead of &#8220;The user is playing Minecraft.&#8221;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jernej-ms-live even depth-4 parent" id="comment-1312646">
				<div id="div-comment-1312646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ender9' rel='external nofollow' class='url'>ender9</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312646">
			October 16, 2017 at 1:24 am</a>		</div>

		<p>Wouldn&#8217;t this be resolved by the logging program running in it&#8217;s own account while user&#8217;s account is a standard user?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-5" id="comment-1312665">
				<div id="div-comment-1312665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312665">
			October 16, 2017 at 3:12 am</a>		</div>

		<p>I think it&#8217;s supposed NOT to be a locked down machine.</p>
<p>If the user is just a standard user, and the internet access goes though proxy with proper ACL set, there aren&#8217;t much interesting thing the machine can do, and such program would not be necessary. (why measure the amount on inactive time, but not try to measure the amount of work done instead?)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1312247">
				<div id="div-comment-1312247" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken in NH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312247">
			October 13, 2017 at 8:16 am</a>		</div>

		<p>There is a solution that doesn&#8217;t require special permissions or logs or anything: if you find a user is tampering with logs to hide data, fire them. If they can&#8217;t be trusted then why do you continue to employ them?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1312255">
				<div id="div-comment-1312255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PJH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312255">
			October 13, 2017 at 8:24 am</a>		</div>

		<p>This. The problem should be solved via (HR) policy, not by trying to code around it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1312276">
				<div id="div-comment-1312276" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312276">
			October 13, 2017 at 8:45 am</a>		</div>

		<p>Yup, I said as much. &#8220;I noted that the fact that the employee is tampering with the log file should be a significant data point in building a case against them.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1312295">
				<div id="div-comment-1312295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312295">
			October 13, 2017 at 8:51 am</a>		</div>

		<p>I&#8217;m guessing they were more worried about the employees who were tampering with the log files that weren&#8217;t stupid enough to be so obvious that they got caught.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fleet-command even depth-3" id="comment-1312445">
				<div id="div-comment-1312445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312445">
			October 13, 2017 at 11:44 pm</a>		</div>

		<p>Is it me or has anyone else also noticed it is a case where the zeroth law of security (a.k.a law #3 of Scott Culp&#8217;s ten immutable laws of security) applies? The user is in control of the system and probably has physical access too, so theoretically, it is only a matter of time (and by extension, knowledge) to defeat the system.</p>
<p>What should be done here is:<br />
Remove physical access<br />
Make it hard enough, i.e. make sure the system cannot be broken long enough, until the next audit.<br />
Put audits in place</p>
<p>Debugging isn&#8217;t something that everyone can do, and there are ways to stop it, e.g. by implementing whitelist-based app restriction policy. When the user cannot run a debugger, it cannot debug. Now, asymmetric encryption (from Windows API) to encrypt log entries and add hash to them. This way, even if both the log is carried off system and the encryption key is compromised, the user still cannot readily decrypt the log. (It needs a time-consuming brute-force attack, which takes longer than the next audit&#8217;s deadline.) Keep the layout of the log unknown to the user, and he or she cannot fabricate a wholly new log either.</p>
<p>But ultimately, all these only make sense when the auditor has the power to remove the disrupting user. As the zeroth law says, no system can permanently withstand a persistent disrupter.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1312636">
				<div id="div-comment-1312636" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Metalhed666</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312636">
			October 16, 2017 at 12:46 am</a>		</div>

		<p>We are always having people in our organisation trying to use technology to solve a &#8216;human&#8217; problem; firing people makes you the bad guy &#8211; if you use technology to control people, you don&#8217;t have to do the horrible (but necessary) jobs such as firing people and can offload the blame for any problems to an inanimate piece of software.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1312257">
				<div id="div-comment-1312257" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312257">
			October 13, 2017 at 8:26 am</a>		</div>

		<p>Nah. They started off thinking badly and had an immediate bad conclusion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1312265">
				<div id="div-comment-1312265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312265">
			October 13, 2017 at 8:31 am</a>		</div>

		<p>This would be a whole lot easier if Windows actually had a chmod u+s equivalent. (Yeah I know such a thing can&#8217;t traverse networks.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1312275">
				<div id="div-comment-1312275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robin Stevens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312275">
			October 13, 2017 at 8:31 am</a>		</div>

		<p>The employees are apparently tampering with log files in order to frustrate the developers&#8217; efforts to debug the program?</p>
<p>Why would an employee report a bug, then deliberately prevent a dev from fixing it?</p>
<p>I suspect a bad dev claiming employee tampering as an excuse for writing shoddy code in the first place and being unable to fix it in the second.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1312286">
				<div id="div-comment-1312286" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312286">
			October 13, 2017 at 8:46 am</a>		</div>

		<p>The employee tampers with the log file, and then some time later reports a problem with the program. They forgot that they had tampered with the log file, or they didn&#8217;t think the tampering would be detected, or they didn&#8217;t think the tampering was the cause of the problem. (Think of the people who apply unauthorized patches to Windows and then report bugs in it.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1312645">
				<div id="div-comment-1312645" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robin Stevens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312645">
			October 16, 2017 at 1:22 am</a>		</div>

		<p>The customer is reporting that users are complaining about errors in user-monitoring software, and the devs are asserting that the users are tampering with the log.</p>
<p>From the context, I would presume that the issue could be with missing entries rather than changed ones.</p>
<p>How does one prove the the user tampered with the log rather than a buggy program failed to write correct log entries in the first place?</p>
<p>This is classic he-said/she-said, and (with a cynical eye) the customers&#8217; solution (impersonation with encrypted credentials) has the appearance of being a strong solution, yet leaves enough wriggle room that the developers can still point the finger at a tampering user.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1312306">
				<div id="div-comment-1312306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312306">
			October 13, 2017 at 9:28 am</a>		</div>

		<p>Perhaps the employee is angry about the employer monitoring their computer use and so complains that the monitoring software is slowing everything down and reducing productivity.  In an effort to make a stronger case, they tamper with the log file to make it look like it&#8217;s doing more than it actually does or with the timestamps to make it looks like it&#8217;s slower than it actually is.  Their goal isn&#8217;t to get the software fixed but to get it removed.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd even thread-odd thread-alt depth-1 parent" id="comment-1312335">
				<div id="div-comment-1312335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312335">
			October 13, 2017 at 9:57 am</a>		</div>

		<p>Authenticating to a server is always a challenge. If the client has a set of credentials, then those credentials can be snooped on.</p>
<p>People will argue for using Kerberos in order to authenticate yourself with the remote server (i.e. SQL Server). The problem with that, of course is:</p>
<p>&#8211; it doesn&#8217;t work where Kerberos is not available<br />
&#8211; it doesn&#8217;t add any security</p>
<p>If you&#8217;re in the world where you&#8217;re afraid of a user attaching a debugger to their own process in order to steal database credentials (i.e. Username and Password), then they can also debug to application to alter T-SQL queries before they are sent to the database:</p>
<p>&#8211; <b>information disclosure</b>: they can alter the <code>WHERE</code> clause of a <code>SELECT</code> statement to return more data  (obtaining access to log files for other users)<br />
&#8211; <b>denial of service</b>: the can delete or drop, update, alter, or damage the logs &#8211; or perform a long-running that took an update lock  (locking the log file and preventing anybody else from accessing it).<br />
&#8211; <b>spoofing</b>: They can identify themselves as another user (the user can impersonate the special user and do anything that special user can do)</p>
<p>Even worse, is if users are authenticating against the database server as <i>&#8220;themselves&#8221;</i> (i.e. Windows Integrated Authentication), rather than as another user (e.g. SQL Server login), then they can use other applications to connect to the database directly without having to even go through the bother and expense of using a debugger. Just use one of the hundreds of applications that let you connect to an SQL Server data store (e.g. Excel), and start issuing queries.</p>
<p>Kerberos/Active Directory authentication doesn&#8217;t add any <i>security</i> in this situation. It attempts to add defense-in-depth; but trades away another huge amount of defense. Requiring a separate set of credentials, that are not the credentials of the user, is a better way to go if you want more defense.</p>
<p>But the only <b>security</b> comes from users not having the ability to interfere with the running code; either:</p>
<p>&#8211; move the code into the context of another user (e.g. another user on same machine; another machine)<br />
&#8211; deny the user PROCESS_VM_READ, PROCESS_VM_WRITE, PROCESS_VM_OPERATION [1], and change the process owner to someone else</p>
<p>[1] Inside Windows Debugging &#8211; Table 3.1 &#8211; Win32 API Support for User-Mode Windows Debuggers</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-andycadley2 odd alt depth-2" id="comment-1312515">
				<div id="div-comment-1312515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/AndyCadley' rel='external nofollow' class='url'>AndyCadley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312515">
			October 14, 2017 at 9:37 am</a>		</div>

		<p>If you were doing it via SQL Server, you&#8217;d only grant their accounts permission to call a specific stored procedure. There doesn&#8217;t have to be any way they could read or modify the database in any other way. It&#8217;s not a perfect solution but to some extent that depends on what you&#8217;re trying to prevent. When I&#8217;ve seen this thing before, it&#8217;s not uncommon that the users are running with full admin rights anyway which pretty much defeats the entire purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1312336">
				<div id="div-comment-1312336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312336">
			October 13, 2017 at 10:13 am</a>		</div>

		<p>That sounded a bit like the &#8220;perfect attacker fallacy&#8221;.</p>
<p>Step back a bit: who is modifying the log file? Most people aren&#8217;t high-level hackers who can debug an executable armed solely with Notepad and a stopwatch.</p>
<p>In the original issue, the log file is most probably a simple text file, which the user edits by hand. Moreover, the user probably wanted to tamper with it after the fact. Sending every log entry to a service running under a separate account, which then writes it to a file owned by that account, would be enough to stop more than 90% of the tampering attempts. In fact, even a simple XOR of the log file with a constant key would probably be enough to foil more than 50% of the attempts.</p>
<p>Of course, the &#8220;system event log&#8221; solution (which is a variant of the &#8220;service under a separate account&#8221; solution) is probably the best one. And the &#8220;encrypted password&#8221; solution is the worst one, since while the user might not be an advanced hacker, someone who invades the user&#8217;s account might be.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1312385">
				<div id="div-comment-1312385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">zboot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312385">
			October 13, 2017 at 1:48 pm</a>		</div>

		<p>I don&#8217;t need to be an advanced hacker. I can just find some app written by one that does what I want.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1312585">
				<div id="div-comment-1312585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312585">
			October 14, 2017 at 7:01 pm</a>		</div>

		<p>Hackers don&#8217;t usually have access to the crappy LOB apps that embed passwords. It could be worse, you could have posted them on github. <a href="https://www.wired.com/2013/01/users-scramble-as-github-search-exposes-passwords-security-details/" rel="nofollow">https://www.wired.com/2013/01/users-scramble-as-github-search-exposes-passwords-security-details/</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1312346">
				<div id="div-comment-1312346" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312346">
			October 13, 2017 at 10:31 am</a>		</div>

		<p>Just a reminder that probably the poor people tasked to implement this know it is stupid but either do it or get fired themselves</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn even depth-2" id="comment-1312796">
				<div id="div-comment-1312796" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312796">
			October 16, 2017 at 12:11 pm</a>		</div>

		<p>And probably they also have this logging program installed on their workstations, so they have a good reason to reduce their own suffering.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1312356">
				<div id="div-comment-1312356" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312356">
			October 13, 2017 at 10:46 am</a>		</div>

		<p>Once we &#8220;solved&#8221; a similar situation by having a clear text and an encrypted log file (with a trivial but nonstandard cypher). The clear text one is easy to read and gives the user the impression that he can tamper with it, the encrypted one is for us to see when we spot some &#8220;impossible&#8221; problem potentially caused by the user (which as always denies touching the configuration).</p>
<p>Of course this is not <i>actually</i> secure, but:<br />
&#8211; the application runs on a machine where the user has full privileges, so it&#8217;s an unwinnable game by definition;<br />
&#8211; the threat model is &#8220;an unskilled employee is clumsily trying to hide a mistake&#8221;, not &#8220;the NSA is trying to read reserved data&#8221;; when the maximum sophistication of your adversary is editing text files (usually leaving broken rows around) you don&#8217;t really have to worry about him hacking your executable.</p>
<p>This trivial solution has indeed helped us debug &#8220;impossible&#8221; problems in several occasions (and to spot and warn some clients who were quite keen of playing this kind of tricks). </p>
<p>So: in some cases you have to accept that a &#8220;perfect&#8221; solution is either impossible or extremely impractical, but fortunately often good enough is actually good enough.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1312387">
				<div id="div-comment-1312387" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.hazelnutsoftware.co.uk' rel='external nofollow' class='url'>Electron Shepherd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312387">
			October 13, 2017 at 2:10 pm</a>		</div>

		<p>I&#8217;ve had to do something very similar, but instead of two log files, I wrote the information &#8220;in the clear&#8221; to a text file, and then stored the same information in an alternate data stream in the same file.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1312635">
				<div id="div-comment-1312635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312635">
			October 15, 2017 at 11:08 pm</a>		</div>

		<p>Oh, nice! I like that one, very sneaky.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1312396">
				<div id="div-comment-1312396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312396">
			October 13, 2017 at 2:35 pm</a>		</div>

		<p>Hang on, isn&#8217;t this sort of thing, where you need to give users the ability to use a crypographic key, but not the ability to access it, or to debug the processes that access it, exactly what DRM was invented for? Can&#8217;t Windows do this already?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1312765">
				<div id="div-comment-1312765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312765">
			October 16, 2017 at 9:40 am</a>		</div>

		<p>&#8230;..if Windows could do this <i>reliably</i> why are there so many failing (game) DRM attempts?  Because the user has sufficient privileges (ie, is admin) to run whatever they want, including accessing the raw key.  If the user isn&#8217;t admin the proper response isn&#8217;t to give them access to the key, it&#8217;s to implement something running under a separate account that they can pass data to/from.  If the user must be admin, then you have to change &#8220;separate process&#8221; to &#8220;separate physical machine&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1312425">
				<div id="div-comment-1312425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312425">
			October 13, 2017 at 6:53 pm</a>		</div>

		<p>In the last years, I have started to think that giving applications/bundles/suites their own security identity would help solve many problems. This is one of them. The other is the user&#8217;s App Data problem: in the current model, any application (say, a &#8220;free&#8221; game with bundled adware/spyware) can mess with other application&#8217;s private data (maybe a browser&#8217;s stored password database), because they all run under the same user identity.</p>
<p>Of course, you can argue that a malicious application, or one with a security bug, can defeat this system. But if you can convince the user to install/run a malicious app, or get to abuse a vulnerability, well, you are already on the other side of the airtight hatchway (and even then, with this model, you don&#8217;t get unlimited access to all of the user&#8217;s data).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1312495">
				<div id="div-comment-1312495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312495">
			October 14, 2017 at 7:35 am</a>		</div>

		<p>&gt; In the last years, I have started to think that giving applications/bundles/suites their own security identity would help solve many problems.</p>
<p>That&#8217;s Android&#8217;s security model: each application has its own separate user account.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf even depth-3 parent" id="comment-1312655">
				<div id="div-comment-1312655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312655">
			October 16, 2017 at 2:52 am</a>		</div>

		<p>Too bad they demand rights instead of requesting them: Unless you&#8217;ve rooted your phone, you can&#8217;t install/update an app without giving it ALL the rights it wants.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1312705">
				<div id="div-comment-1312705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312705">
			October 16, 2017 at 8:01 am</a>		</div>

		<p>Right. It&#8217;s a nice example of a good concept ruined by a detail in the implementation. Users should be in control of privileges at all times. That would make it harder for developers, but who said our work had to be easy?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even depth-4" id="comment-1312805">
				<div id="div-comment-1312805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312805">
			October 16, 2017 at 12:25 pm</a>		</div>

		<p>Yes you can. Even if the app does not &#8216;target Android M&#8217; and use runtime permissions itself, you can install it, deny any permission, and try to launch the app. Your mileage may vary.</p>
<p>This was first introduced in Cynaogenmod in 2011.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1312505">
				<div id="div-comment-1312505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312505">
			October 14, 2017 at 9:07 am</a>		</div>

		<p>If the employee complained to IT about the program using all the disk or whatever then that would be a counterpoint I reckon. Though that depends on whether the program was dos&#8217;ing him and other unknowns. Communication is the key.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1312575">
				<div id="div-comment-1312575" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312575">
			October 14, 2017 at 6:31 pm</a>		</div>

		<p>When I first read this I had it in my mind that employees were deleting (possibly very large) log files rather than modifying them, even though the blog title in bold face font suggests otherwise. Oops. That&#8217;s a whole different kettle of fish.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1312587">
				<div id="div-comment-1312587" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312587">
			October 14, 2017 at 7:07 pm</a>		</div>

		<p>We had users changing the date and time on an msdos based handheld to try to provide evidence against parking tickets. They couldn&#8217;t have been parked there, because they were delivering elsewhere.</p>
<p>I think we might have ended up writing a TSR.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1312597">
				<div id="div-comment-1312597" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312597">
			October 14, 2017 at 8:39 pm</a>		</div>

		<p>I&#8217;d rather that stunt work than the nonsense we have to put up with with parking tickets now.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1312625">
				<div id="div-comment-1312625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Anderson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312625">
			October 15, 2017 at 8:26 am</a>		</div>

		<p>Tampering with logs is not always bad as people seems to think</p>
<p>I worked for a company that was so paranoid they forced us to use 1 computer to access the internet, that computer had a guest account for us to use. They also installed a key logger on that machine so they could spy on what we did when accessing the outside world.<br />
The key logger only dumped everything in a file using the guest account rights, nothing fancy. It happened that log file was easily accessible once you knew where it was. I looked into those logs and could see my colleague password when they were connecting to their bank accounts and other services which required password</p>
<p>Of course I told my friends about it and how using notepad they could erase that data from those log file.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alexcohn even depth-2" id="comment-1312795">
				<div id="div-comment-1312795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312795">
			October 16, 2017 at 11:49 am</a>		</div>

		<p>auch</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1312675">
				<div id="div-comment-1312675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1312675">
			October 16, 2017 at 6:48 am</a>		</div>

		<p>Surely, this is the sort of problem that you want a service for. (Because many users can be logged in at once!)</p>
<p>How about running a service, which creates a process in the users session as the user, inheriting a handle to an IPC object? (Pipe, Shared memory etc)</p>
<p>The process then writes the logs to the IPC handle. The user would have to inject code/debug process to fake/block logs.</p>
<p>Have a ping message on the IPC object and the service kill the process if the user suspends threads. Respawn the logger process if the user kills it.</p>
<p>The service can save the logs using Machine local encryption to keep it tamper proof.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1313005">
				<div id="div-comment-1313005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karlis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1313005">
			October 18, 2017 at 12:18 am</a>		</div>

		<p>I did once see another solution. It is possible to set an append permission on a file, and then open the file with only append rights.<br />
So the user&#8217;s software has the rights to append to the log, but cannot delete or modify anything.<br />
Unfortunately, we had to use custom written software for this purpose, as for example when Powershell&#8217;s add-content cmdlet is told to append to the file, it still tries to open the file using the write permission, not the append permission, and fails.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1313115">
				<div id="div-comment-1313115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1313115">
			October 18, 2017 at 11:48 am</a>		</div>

		<p>Why not use dedicated service and service SIDs?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1313126">
				<div id="div-comment-1313126" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171013-00/?p=97225#comment-1313126">
			October 18, 2017 at 2:54 pm</a>		</div>

		<p>Yup. &#8220;One solution is to have a service.&#8221; Of course, you still have the issue of the untrusted client sending bogus data to the service.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

