<html>
<head>
<title>Why you should never suspend a thread</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why you should never suspend a thread</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 9, 2003 / year-entry #155</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's almost as bad as terminating a thread. Instead of just answering a question, I'm going to ask you the questions and see if you can come up with the answers. Consider the following program, in (gasp) C#: using System.Threading; using SC = System.Console; class Program { public static void Main() { Thread t =...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
It's almost as bad as terminating a thread.
</p>
<p>
Instead of just answering a question, I'm going
to ask you the questions and see if you can come
up with the answers.
</p>
<p>
Consider the following program, in (gasp) C#:
</p>
<pre>
using System.Threading;
using SC = System.Console;

class Program {
  public static void Main() {
    Thread t = new Thread(new ThreadStart(Program.worker));
    t.Start();
    SC.WriteLine("Press Enter to suspend");
    SC.ReadLine();
    t.Suspend();
    SC.WriteLine("Press Enter to resume");
    SC.ReadLine();
    t.Resume();
  }
  static void worker() {
    for (;;) SC.Write("{0}\r", System.DateTime.Now);
  }
}
</pre>
<p>
When you run this program and hit Enter to suspend, the program hangs.
But if you change the worker function to just "for(;;) {}" the program
runs fine.
Let's see if we can figure out why.
</p>
<p>
The worker thread spends nearly all its time calling System.Console.WriteLine,
so when you call Thread.Suspend(), the worker thread is almost certainly
inside the System.Console.WriteLine code.
</p>
<p>
Q: Is the System.Console.WriteLine method threadsafe?
</p>
<p>
Okay, I'll answer this one:  Yes.  I didn't even have to look at any
documentation to figure this out.  This program calls it from two
different threads without any synchronization, so it had better be
threadsafe or we would be in a lot of trouble already even before
we get around to suspending the thread.
</p>
<p>
Q: How does one typically make an object threadsafe?
</p>
<p>
Q: What is the result of suspending a thread in the middle of a threadsafe
operation?
</p>
<p>
Q: What happens if - subsequently - 
you try to access that same object (in this case,
the console) from another thread?
</p>
<p>
These results are not specific to C#. The same logic applies
to Win32 or any other threading model.
In Win32, the process heap
is a threadsafe object, and since it's hard to do very much in
Win32 at all without accessing the heap, suspending a thread
in Win32 has a very high chance of deadlocking your process.
</p>
<p>
So why is there even a SuspendThread function in the first place?
</p>
<p>Debuggers use it to freeze all the threads in a process while you
are debugging it.  Debuggers can also use it to freeze all but one
thread in a process, so you can focus on just one thread at a time.
This doesn't create deadlocks in the debugger since the debugger
is a separate process.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-133853">
				<div id="div-comment-133853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573#comment-133853">
			December 9, 2003 at 10:58 am</a>		</div>

		<p>Q: How does one typically make an object threadsafe?</p>
<p>A. Working off of the stack rather than the heap, thread local storage, and critical sections. (I know you&#8217;re looking for critical sections :) )</p>
<p>Q: What is the result of suspending a thread in the middle of a threadsafe operation?</p>
<p>Critical section never gets unlocked if you&#8217;re inside it.</p>
<p>Q: What happens if &#8211; subsequently &#8211; you try to access that same object (in this case, the console) from another thread?</p>
<p>Deadlock&#8230;</p>
<p>&#8212;</p>
<p>One thing, btw, that suspendthread is good for, and perfectly safe, is for a thread to suspend <em>itself</em>.  That&#8217;s been a useful tool to me in the past, and probably the only OTHER useful purpose of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-133863">
				<div id="div-comment-133863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573#comment-133863">
			December 10, 2003 at 5:25 am</a>		</div>

		<p>since you&#8217;re on processes here (this is 99% off-topic) if you have a process that passes an uri to the system&#8217;s protocol handler (this is an asynchronous pluggable protocol that&#8217;s being passed, a self-rolled one, but it could be http:, outlook: , etc.) can one find out what process the uri was passed from by knowing what the uri is?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-133873">
				<div id="div-comment-133873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573#comment-133873">
			December 10, 2003 at 11:40 am</a>		</div>

		<p>Sorry, I don&#8217;t understand the question. Who is &quot;one&quot;? The process that is responsible for handling the protocol? If you choose DDE as your protocol invocation mechanism, I believe DDE lets you determine who is on the other end of a DDE conversation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-133883">
				<div id="div-comment-133883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Wilhelm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573#comment-133883">
			December 10, 2003 at 9:43 pm</a>		</div>

		<p>I had a bug on this exact matter &#8211; I was suspending a thread, and it was ending up in the middle of a memory allocation mutex. Grrr. Useless function &#8211; totally useless.</p>
<p>I&#8217;ve always been trying to think of a way to do SuspendThread() without having to make the thread poll constantly, but have never managed to come up with one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-133893">
				<div id="div-comment-133893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573#comment-133893">
			December 10, 2003 at 10:11 pm</a>		</div>

		<p>1) Not useless.  Again, if used by the thread itself, it&#8217;s extremely useful.<br />
2) Well, there&#8217;s always going to HAVE to be some way to poll.  A way would be to put the unsafe code in critical sections, and make the thread that suspends your thread is also enter the critical section.  Then you can guarantee that only when you&#8217;re out of it can the suspend get called.  But in this case, you may as well just poll in a safe place, rather than this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-133903">
				<div id="div-comment-133903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573#comment-133903">
			December 11, 2003 at 6:10 am</a>		</div>

		<p>&#8216;Who is &quot;one&quot;? The process that is responsible for handling the protocol? If you choose DDE as your protocol invocation mechanism, I believe DDE lets you determine who is on the other end of a DDE conversation.&#8217;</p>
<p>The one was grammatical, as in any unnamed individual, or I guess process as well in this case.</p>
<p>The problem I&#8217;m thinking about specifically is that I&#8217;ve rolled my own pluggable protocol in a third-party scripting language, and registered it as such via the registry,  this language however has no understanding of DDE, and no especially easy way of implementing it, I can however pass off the protocol information via the command line and using Standard I/O get information back, so what I&#8217;m wondering (and I figure it&#8217;s probably not doable) is there anyway for a third process to work out from just the protocol information, what process invoked the uri.</p>
<p>Sorry for taking up the time on your blog with this, but I figure there are not very many people out there competent to answer this question with either an authoritative no, or a &#8216;read these 15 links&#8217; yes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-138093">
				<div id="div-comment-138093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericlippert/archive/2004/01/22/61745.aspx' rel='external nofollow' class='url'>Fabulous Adventures In Coding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573#comment-138093">
			January 22, 2004 at 1:20 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-504383">
				<div id="div-comment-504383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://advdbg.org/blogs/advdbg_system/articles/336.aspx' rel='external nofollow' class='url'>AdvDbg System Section</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031209-00/?p=41573#comment-504383">
			May 15, 2007 at 1:00 am</a>		</div>

		<p>Breaking The Secrets &#8212;&#8211; Dessecting The Stack Part3 Walking The Callstack Last time I cover much&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

