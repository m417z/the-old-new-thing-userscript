<html>
<head>
<title>Strange uses for window class atoms</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Strange uses for window class atoms</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 1, 2008 / year-entry #147</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When you register a window class (with the RegisterClass or RegisterClassEx function), you get an ATOM back. What use is this atom? Not much. You can use this atom in many places where a window class name can be used; just convert it to a string with the MAKEINTATOM macro. Let's change our scratch program...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When you register a window class (with the
<code>RegisterClass</code> or
<code>RegisterClassEx</code> function),
you get an <code>ATOM</code> back.
What use is this atom?
</p>
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/10/11/240744.aspx">
Not much</a>.
</p>
<p>
You can use this atom in many places where a window class name
can be used; just convert it to a string with the
<code>MAKEINTATOM</code> macro.
Let's change our
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a> to illustrate:
</p>
<pre>
<font COLOR=blue>ATOM g_atmClass;</font>

BOOL
InitApp(void)
{
    ...
    <font COLOR=blue>g_atmClass = RegisterClass(&amp;wc);
    if (!g_atmClass) return FALSE;</font>
    ...
}

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
    ...

        hwnd = CreateWindow(
            <font COLOR=blue>MAKEINTATOM(g_atmClass)</font>,        /* Class Name */
            "Scratch",                      /* Title */
            WS_OVERLAPPEDWINDOW,            /* Style */
            CW_USEDEFAULT, CW_USEDEFAULT,   /* Position */
            CW_USEDEFAULT, CW_USEDEFAULT,   /* Size */
            NULL,                           /* Parent */
            NULL,                           /* No menu */
            hinst,                          /* Instance */
            0);                             /* No special parameters */

    ...
}
</pre>
<p>
We save the atom returned by the <code>RegisterClass</code>
function and use it (in the form of a <code>MAKEINTATOM</code>)
in place of the class name.
if you run this program, you'll see that it works exactly the same
as the old version that used the class name.
The class atom is valid as long as the class remains registered.
</p>
<p>
Functions that accept a <code>MAKEINTATOM</code> as the class name
include
<code>CreateWindow</code>,
<code>FindWindow</code>,
<code>GetClassInfo</code>,
and <code>UnregisterClass</code>
(and the <code>Ex</code> versions of them).
</p>
<p>
Why would you do this?
</p>
<p>
Well, there really isn't much reason.
The string name works just as well as the atom,
so the atom is just one more thing to keep track of.
However, even though you don't use it,
you have to be aware that other people might.
For example, the <code>lpszClass</code> member of the
<code>CREATESTRUCT</code> structure is usually a pointer
to a string, but it could be a <code>MAKEINTATOM</code> if
somebody decided to pass an atom instead of a string to
<code>CreateWindow</code>.
Those of you who've read
<a HREF="http://www.awprofessional.com/title/0321440307">
the first Bonus Chapter of my book</a>
are already familiar with the program that crashed when
somebody created a window via an atom.
</p>
<p>
There is one interesting thing you can do with the atom:
If you have a valid class atom, you can quickly tell whether
a window belongs to that class by checking the window word
for the atom:
</p>
<pre>
if (GetWindowWord(hwnd, GWW_ATOM) == atom) ...
</pre>
<p>
This technique saves you the trouble of calling
<code>GetClassName</code> and then doing a string comparison,
reducing it instead to an integer comparison.
This technique makes it very simple to
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/02/01/521962.aspx#522672">
write a <code>TestIfWndIsDialog</code> function</a>:
</p>
<pre>
BOOL TestIfWndIsDialog(HWND hwnd)
{
  return GetWindowWord(hwnd, GWW_ATOM) == (ULONG_PTR)<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/08/31/733521.aspx">WC_DIALOG</a>;
}
</pre>
<p>
<b>Exercise</b>: Discuss the limitations of the above
<code>TestIfWndIsDialog</code> function.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-625443">
				<div id="div-comment-625443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625443">
			May 1, 2008 at 10:11 am</a>		</div>

		<p>Limitations?</p>
<p>1) Just because it&#8217;s a &quot;dialog&quot; doesn&#8217;t mean it&#8217;s a modal dialog. &nbsp;Someone could have created a &quot;dialog&quot; as a tool window just to use dialog resources, and you wouldn&#8217;t know the difference. &nbsp;And you can&#8217;t just check by seeing if the parent&#8217;s disabled, because that could be because a real model dialog is up as well.</p>
<p>2) Some real dialogs will subclass the dialog window class. &nbsp;This will not find those.</p>
<p>3) Related to number 1, anyone can use a dialog in any way that they want to, so even if you know something &quot;is&quot; a dialog, it doesn&#8217;t mean that you can manipulate it like standard dialogs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625473">
				<div id="div-comment-625473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625473">
			May 1, 2008 at 11:24 am</a>		</div>

		<p>How do I get the atom for an existing class?</p>
<p>In my case I want to know if a control is a combo box and I want to avoid GetClassName.</p>
<p>GetClassInfo doesn&#8217;t return the atom, and GetClassLong requires an already created window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625493">
				<div id="div-comment-625493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625493">
			May 1, 2008 at 12:11 pm</a>		</div>

		<p>a (standard) combo box has a known class name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-eric-brown odd alt thread-odd thread-alt depth-1" id="comment-625503">
				<div id="div-comment-625503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+C+Brown' rel='external nofollow' class='url'>Eric C Brown</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625503">
			May 1, 2008 at 12:30 pm</a>		</div>

		<p>Ivo &#8211; how are you locating the control without also getting the window?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-625533">
				<div id="div-comment-625533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625533">
			May 1, 2008 at 1:29 pm</a>		</div>

		<p>@Jack Mathews:</p>
<p>4) CreateDialogIndirect/DialogBoxIndirect allow you to use a DLGTEMPLATEEX structure, which allows you to specify your own window class for your shiny new dialog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625553">
				<div id="div-comment-625553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625553">
			May 1, 2008 at 1:42 pm</a>		</div>

		<p>Another use for the atom returned by RegisterClass:</p>
<p>CreateWindow((LPCTSTR)(ULONG)RegisterClass(&#8230;), &#8230;);</p>
<p>Note the casts, needed because just a cast to LPCSTR would put DS in the high word in 16-bit Windows.</p>
<div class=post>[<i>Wait I thought I already mentioned that. Yes, the entire first half of the article. Not sure what your point is. Maybe you just like hearing yourself talk. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625563">
				<div id="div-comment-625563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625563">
			May 1, 2008 at 1:57 pm</a>		</div>

		<p>[Wait I thought I already mentioned that. Yes, the entire first half of the article. Not sure what your point is. Maybe you just like hearing yourself talk. -Raymond]</p>
<p>I mean you can&#8217;t do this with strings.</p>
<div class=post>[<i>Not sure what &#8220;this&#8221; is. All you did was expand the MAKEINTATOM macro. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625573">
				<div id="div-comment-625573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625573">
			May 1, 2008 at 1:58 pm</a>		</div>

		<p>Because you don&#8217;t return a pointer as a return value often, because what about the memory used, while with an atom you don&#8217;t have to worry about that.</p>
<div class=post>[<i>Not sure what that has to do with expanding the MAKEINTATOM macro inline. Please do not post multiple comments in rapid succssion &#8211; it&#8217;s a violation of the ground rules. You&#8217;re the only person who violates it regularly. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625603">
				<div id="div-comment-625603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625603">
			May 1, 2008 at 3:33 pm</a>		</div>

		<p>Lets rewrite this code as:</p>
<p>CreateWindow(MAKEINTATOM(RegisterClass(&#8230;)), &#8230;);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625613">
				<div id="div-comment-625613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625613">
			May 1, 2008 at 3:35 pm</a>		</div>

		<p>expanding the MAKEINTATOM macro inline is not my point.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625633">
				<div id="div-comment-625633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ens</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625633">
			May 1, 2008 at 4:00 pm</a>		</div>

		<p>I&#8217;m a bit confused about what your point actually is. &nbsp;If it&#8217;s not the MAKEINTATOM macro, then what remains is you&#8217;re inlining RegisterClass and not explicity storing a variable (relying on compiler magic to take care of the mean old nested function call). &nbsp;Oh, and made it less readable. &nbsp;I guess if it helps you remember the format of your one-off hwnds, then alright.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625643">
				<div id="div-comment-625643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625643">
			May 1, 2008 at 4:07 pm</a>		</div>

		<p>&#8220;what remains is you&#8217;re inlining RegisterClass and not explicity storing a variable (relying on compiler magic to take care of the mean old nested function call).&#8221;</p>
<p>That is exactly my point, and you can&#8217;t do this with strings.</p>
<div class=post>[<i>That point has nothing to do with the article. Oh, and you can inline strings too: </p>
<pre>PCTSTR pszClassName = TEXT(&#8220;Scratch&#8221;);
CreateWindow(pszClassName, &#8230;);

</pre>
<p>becomes </p>
<pre>CreateWindow(TEXT(&#8220;Scratch&#8221;), &#8230;)

</pre>
<p>Woo-hoo, I inlined the string. What this has to do with the article I have no idea. All you did was perform by hand what the compiler does automatically. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625653">
				<div id="div-comment-625653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625653">
			May 1, 2008 at 4:24 pm</a>		</div>

		<p>I am not talking about inlining strings, I am talking about inlining a function call.</p>
<div class=post>[<i>I give up. Woo-hoo, you can inline a function call. I would never have thought of that. You&#8217;re so smart. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625673">
				<div id="div-comment-625673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625673">
			May 1, 2008 at 5:42 pm</a>		</div>

		<p>My mind has just been boggled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625713">
				<div id="div-comment-625713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625713">
			May 1, 2008 at 5:59 pm</a>		</div>

		<p>@Eric Brown: I have a window (HWND). I want to check if it is a combo box or not. I can call GetClassName and see if it returns WC_COMBOBOX. I can also call GetWindowWord(GWW_ATOM) and compare it with the atom for the combo box, which is hopefully faster. But how to get the atom corresponding to WC_COMBOBOX?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625733">
				<div id="div-comment-625733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrismcb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625733">
			May 1, 2008 at 6:40 pm</a>		</div>

		<p>@Ivo: As Eric stated a combo box has a standard class name. So call FindAtom on that name?</p>
<p>@Yuhong yeah you can&#8217;t do it with strings because RegisterClass doesn&#8217;t return a string. But so what? What did you save?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625743">
				<div id="div-comment-625743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IUnknown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625743">
			May 1, 2008 at 6:55 pm</a>		</div>

		<p>There&#8217;s more! You can actually inline functions!</p>
<p>inline BOOL isNull( const INT_PTR x )</p>
<p>{</p>
<p>&nbsp; &nbsp;return x == 0;</p>
<p>}</p>
<p>(That&#8217;s probably the most useless function I wrote, ever.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-madq42 odd alt thread-odd thread-alt depth-1" id="comment-625753">
				<div id="div-comment-625753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MadQ1' rel='external nofollow' class='url'>MadQ1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625753">
			May 1, 2008 at 8:36 pm</a>		</div>

		<p>Ivo: You can use Active Accessibility to find out if a window is a combobox, but this only works for windows that have already processed the WM_CREATE message. The nice thing is that it also works for superclassed windows (hi, Windows Forms! ;) Oh, and make sure to never try this with windows that do not have the WS_CHILD style.</p>
<p>if( 65536+5 == SendMessage(hWnd, WM_GETOBJECT, NULL, OBJID_QUERYCLASSNAMEIDX) )</p>
<p>&nbsp; &nbsp;then it&#8217;s a combobox;</p>
<p>See ms-help://MS.MSDNQTR.v90.en/msaa/msaapndx_5at4.htm if you have the VS 2008 MSDN library, or <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms697642" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms697642</a>(vs.85).aspx</p>
<p>Erm, and lest I be &quot;mostly wrong anyway&quot; again, I should say something on topic&#8230; you see, this way you don&#8217;t even have to mess with ATOMs, thereby avoiding any of the Exercise&#8217;s limitations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625773">
				<div id="div-comment-625773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625773">
			May 1, 2008 at 10:51 pm</a>		</div>

		<p>chrismcb: FindAtom is exactly what I need. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-625813">
				<div id="div-comment-625813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">scorpion007</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625813">
			May 2, 2008 at 1:11 am</a>		</div>

		<p>Raymond, it seems that GetWindowWord is deprecated in favour of GetWindowLong, and GetWindowLong&#8217;s documentation don&#8217;t mention GWW_ATOM or anything similar.</p>
<p>Should we still rely on it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-625903">
				<div id="div-comment-625903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-625903">
			May 2, 2008 at 1:11 pm</a>		</div>

		<p>@Yuhong Bao: I am not talking about inlining strings, I am talking about inlining a function call.</p>
<p>No, you&#8217;re not even talking about that &#8211; you&#8217;re talking about *nested* function calls, which like every other post you make here has nothing to do with Raymond&#8217;s original subject.</p>
<p>Are you just really dense? Or are you just *trying* to be annoying and irritating?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626063">
				<div id="div-comment-626063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Johann Gerell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-626063">
			May 4, 2008 at 5:43 pm</a>		</div>

		<p>@ IUnknown:</p>
<blockquote><p>
  (That&#8217;s probably the most useless function I wrote, ever.)
</p></blockquote>
<p>Nooooo. You&#8217;ve just turned a blackbox expression to an easy testable nugget. Just toss in an ASSERT before the return!</p>
<p>;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-626243">
				<div id="div-comment-626243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IUnknown</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-626243">
			May 5, 2008 at 4:17 pm</a>		</div>

		<p>@Johann: Wow, I never thought of that! Yeah, lets crash on null pointers! For free! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-626773">
				<div id="div-comment-626773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Napalm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080501-00/?p=22503#comment-626773">
			May 6, 2008 at 11:54 pm</a>		</div>

		<p>For those of you who dont want to use the depreciated call GetWindowWord(hwnd, GWW_ATOM) you can use GetClassLong(hwnd, GCW_ATOM) instead. I am not too sure why Raymond didn&#8217;t choose this in the first place. Maybe it was his love of 16bit Windows?</p>
<p>@Raymond: Please tell us.</p>
<p>Napalm</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

