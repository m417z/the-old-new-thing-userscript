<html>
<head>
<title>A high waiter count on a free critical section may indicate a lock convoy</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A high waiter count on a free critical section may indicate a lock convoy</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 12, 2006 / year-entry #410</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you're debugging a performance problem in your application, you may run across a critical section in a very strange state: A lot of threads are waiting for it, but nobody owns it! 0:000> !critsec 0x10009C70 CritSec at 0x10009C70 LockCount 37 RecursionCount 0 OwningThread 0 This state means that the previous owner of the critical...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you're debugging a performance problem in your application,
you may run across a critical section in a very strange state:
A lot of threads are waiting for it, but nobody owns it!
</p>
<pre>
0:000&gt; !critsec 0x10009C70
CritSec at 0x10009C70
LockCount          37
RecursionCount     0
OwningThread       0
</pre>
<p>
This state means that the previous owner of the critical section
has just exited it and signalled a waiting thread to take it,
but that thread hasn't yet gotten a chance to run yet.
This is normally a transient condition,
but if you see it a lot, then you very likely the victim of a
lock convoy.
</p>
<p>
<a HREF="http://blogs.msdn.com/larryosterman/archive/2004/03/29/101329.aspx">
Others</a>
<a HREF="http://blogs.msdn.com/sloh/archive/2005/05/27/422605.aspx">
have written</a>
<a HREF="http://www.serious-code.net/moin.cgi/CategoryOptimization?action=AttachFile&do=get&target=satips2.ppt">
about lock convoys</a>,
so I'm just going to refer you to them to get the details.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-452443">
				<div id="div-comment-452443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452443">
			December 12, 2006 at 11:32 am</a>		</div>

		<p>Great tip. &nbsp;Thanks! &nbsp;As the processors go multi-core, we&#8217;re all going to have to get a lot more multi-threading savvy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452463">
				<div id="div-comment-452463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ricardo Montalban</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452463">
			December 12, 2006 at 1:11 pm</a>		</div>

		<p>I never have this problem in C#</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452493">
				<div id="div-comment-452493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anony Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452493">
			December 12, 2006 at 2:36 pm</a>		</div>

		<p>Yes, of course, because multi threading synchronisation is definately a language (and maybe runtime) issue and never under any circumstances has anything to do with the application design.</p>
<p>(I hope everyone&#8217;s sarcasm detectors are working today, though I&#8217;m kinda hoping that mine is broken and I&#8217;m just stating the blindingly obvious.)</p>
<p>In the real world, it&#8217;s impossible to build a locking primitive that can never be misused,</p>
<p>even if C# has some pretty neat lock classes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452593">
				<div id="div-comment-452593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452593">
			December 12, 2006 at 4:32 pm</a>		</div>

		<p>After reading Larry&#8217;s article, I came up with this model that doesn&#8217;t use completion ports (because I&#8217;m a unix-head):</p>
<p>the threadpool is divided into two groups, working and idle (stolen shamelessly)</p>
<p>when adding a job, lock the pool and allocate an idle thread if possible. Otherwise add it to the queue.</p>
<p>When a job completes, lock the pool, check for another job in the queue. If available, allocate jobs to idle threads and kick them, else unlock and sleep.</p>
<p>This should eliminate boxcarring, as most threads are sleeping instead of blocking, and the pool is only locked when adding a job to the queue or ending a job/setting up jobs. It&#8217;s a bit more complicated design, so more potential for screwups, but it looks more efficient.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452633">
				<div id="div-comment-452633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452633">
			December 12, 2006 at 7:06 pm</a>		</div>

		<p>Cooney: On POSIX systems we can avoid some of these cases by using condition variables and pthread_cond_notify. (Windows appears to have a similar facility in PulseEvent, but unfortunately this sometimes fails to wake any waiters.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-452643">
				<div id="div-comment-452643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452643">
			December 12, 2006 at 7:35 pm</a>		</div>

		<p>Cooney, that&#8217;s actually pretty close to the model that NT used before Cutler designed completion ports. &nbsp;The big advantage completion ports have is that you can trigger them on I/O completion as well as work. &nbsp;In addition, you still have the boxcar potential, it&#8217;s just less likely (you still have to lock and unlock the queue on the active threads, and if you&#8217;re queueing a lot of items to the queue you can still get lock convoys).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452653">
				<div id="div-comment-452653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452653">
			December 12, 2006 at 7:46 pm</a>		</div>

		<p>The 3rd link (<a rel="nofollow" target="_new" href="http://www.serious-code.net/moin.cgi/CategoryOptimization?action=AttachFile&amp;do=get&amp;target=satips2.ppt" rel="nofollow">http://www.serious-code.net/moin.cgi/CategoryOptimization?action=AttachFile&#038;do=get&#038;target=satips2.ppt</a>) seems to be dead now.</p>
<p>This may (or may not) be a reasonable facsimile of the document Raymond linked to:</p>
<p><a rel="nofollow" target="_new" href="http://ftp.dynamiceventsupload.com/upload/SDR_Postshow/Breakouts/CF04_Vicik.ppt" rel="nofollow">http://ftp.dynamiceventsupload.com/upload/SDR_Postshow/Breakouts/CF04_Vicik.ppt</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452663">
				<div id="div-comment-452663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452663">
			December 12, 2006 at 7:47 pm</a>		</div>

		<p>True, but the boxcar problem should be less of a problem, since any threads that queue up will likely acquire the lock, see that they already have work (or that no work is available) and immediately drop the lock. It still trashes the L1 cache, but I would expect (assuming a fifo lock scheme) that it would flush rapidly, since the first one to get the lock doles out all the jobs it can.</p>
<p>I&#8217;ll have to look at pthread_cond_notify and see how that works for this.</p>
<div class=post>[<i>I think you missed the fundamental point of the lock convoy problem. It&#8217;s not how long you hold the lock, it&#8217;s how often you ask for it. See Sue Loh&#8217;s article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452683">
				<div id="div-comment-452683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452683">
			December 12, 2006 at 8:10 pm</a>		</div>

		<p>That&#8217;s what I was trying to address by making the default state sleep (or pthread_cond_wait on your own cond variable). I&#8217;ve still got a situation where the mutex gets hit a lot, but I might be able to eliminate a fair amount of that with a check of the job queue size against 0, or simply sleep if the mutex is busy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452743">
				<div id="div-comment-452743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452743">
			December 13, 2006 at 2:47 am</a>		</div>

		<p>Another scenario when owner=0, is when thread A calls lock, but thread B calls release. We observed this scenario in an old ReadWriteLock implementation.</p>
<p>(See <a rel="nofollow" target="_new" href="http://groups.google.com/groups/search?hl=en&amp;q=RtlpNotOwnerCriticalSection" rel="nofollow">http://groups.google.com/groups/search?hl=en&#038;q=RtlpNotOwnerCriticalSection</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-452773">
				<div id="div-comment-452773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ema</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452773">
			December 13, 2006 at 9:51 am</a>		</div>

		<p>Maybe use semaphore primitive to sync threads?</p>
<p>Just 1 consumer thread should be able to execute push, after the pop has been executed from the producer thread?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452793">
				<div id="div-comment-452793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ema</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-452793">
			December 13, 2006 at 10:03 am</a>		</div>

		<p>Ehhmmm don&#8217;t get confused by my english errors.</p>
<p>I meant:</p>
<p>1) Producer(s) execute push after putting element in queue (use CS or mutexes for the list).</p>
<p>2) Consumer(s) wait trying to pop on the semaphore (use CS or mutexes for the list).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-453263">
				<div id="div-comment-453263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.bluebytesoftware.com/blog/' rel='external nofollow' class='url'>Joe Duffy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-453263">
			December 15, 2006 at 1:33 am</a>		</div>

		<p>Fwiw, Server 2003 SP1 and Vista eliminate fairness in the locks in an attempt to reduce convoys. &nbsp;I jotted down a tiny essay at: <a rel="nofollow" target="_new" href="http://www.bluebytesoftware.com/blog/PermaLink,guid,e40c2675-43a3-410f-8f85-616ef7b031aa.aspx" rel="nofollow">http://www.bluebytesoftware.com/blog/PermaLink,guid,e40c2675-43a3-410f-8f85-616ef7b031aa.aspx</a>.</p>
<p>&#8211;joe</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-453323">
				<div id="div-comment-453323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Old Fart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-453323">
			December 15, 2006 at 12:01 pm</a>		</div>

		<p>Grumble, this isn&#8217;t a &quot;lock convoy&quot; or &quot;boxcar problem&quot; (the latter from Larry Osterman&#8217;s blog), this is the thundering herd problem, which has been around for at least two decades (it predates all of Win32 by some years). &nbsp;I wish people wouldn&#8217;t invent new, incompatible names for this&#8230; if you search for &quot;thundering herd&quot; you&#8217;ll find plentiful discussion of the problem and various solutions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-453383">
				<div id="div-comment-453383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-453383">
			December 15, 2006 at 2:50 pm</a>		</div>

		<p>&quot;The thundering herd problem is an issue that occurs when a number of processes waiting for an event scramble en masse when the event occurs.&quot; &#8211; <a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/Thundering_herd_problem" rel="nofollow">http://en.wikipedia.org/wiki/Thundering_herd_problem</a></p>
<p>Larry Osterman&#8217;s post describes something that sounds a lot like thundering herd, but Sue Loh describes a very different problem. &nbsp;It may just be a difference in the way that Larry describes it, or Larry and Sue may be describing totally different issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-454103">
				<div id="div-comment-454103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20061212-00/?p=28753#comment-454103">
			December 18, 2006 at 8:21 pm</a>		</div>

		<p>A thundering herd would be when a number of threads are waiting on an event, and when that events gets signalled they all get released and fight over the same resources.</p>
<p>In this case a number of threads are waiting on a mutex, and only a single thread gets released at a time.</p>
<p>What&#8217;s happening in Larry&#8217;s post is the thundering herd results in a lock convoy.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

