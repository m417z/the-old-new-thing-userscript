<html>
<head>
<title>What can I do if I want to throw a C++ exception from my InitOnce callback?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What can I do if I want to throw a C++ exception from my InitOnce callback?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 6, 2017 / year-entry #87</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170406-00/?p=95915</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There's the naïve solution and a sneakier one.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose you want to use the
<code>Init&shy;Once&shy;Execute&shy;Once</code> function
to perform one-time initialization,
but your initialization function might throw a C++ exception.
We know that
this is not allowed because
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120910-00/?p=6653">
you don't control all the frames the exception is being thrown across</a>,
so what are your options?
</p>
<p>
The na&iuml;ve solution is to catch the exception before
it escapes your callback,
and then rethrow it on the other side.
</p>
<pre>
void Sample()
{
    struct State {
        std::exception_ptr p;
        // other members you want to access from the lambda
    } state;
    if (!InitOnceExecuteOnce(&amp;g_InitOnce,
          [](PINIT_ONCE InitOnce, void* Parameter, void** Context)
          -&gt; BOOL
          {
              auto s = reinterpret_cast&lt;State*&gt;(Parameter);
              try {
                  init_stuff();
                  return TRUE;
              } catch (std::exception&amp; e) {
                  s-&gt;p = std::current_exception();
                  return FALSE;
              }
          }, &amp;state, nullptr)) {
        // Failed due to exception.  Rethrow now that we are
        // safely outside the InitOnceExecuteOnce function.
        std::rethrow_exception(state.p);
    }
}
</pre>
<p>
A less cumbersome solution is to use
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20161222-00/?p=94995">
synchronous two-phase initialization</a>:
</p>
<pre>
void Sample()
{
    void* result;
    BOOL pending;
    if (!InitOnceBeginInitialize(&amp;g_InitOnce, 0,
                                 &amp;pending, &amp;result)) {
        if (pending) {
            try {
                init_stuff();
            } catch (...) {
                InitOnceComplete(&amp;g_InitOnce,
                                 INIT_ONCE_INIT_FAILED, result);
                throw;
            }
            InitOnceComplete(&amp;g_InitOnce, 0, result);
        }
    }
}
</pre>
<p>
Synchronous two-phase initialization performs the initialization
inline rather than in a callback,
which saves you the trouble of having to save the exception in one place
and rethrow it in another place.
You can just tell the InitOnce engine that initialization failed
and then allow the exception to propagate.
</p>
<p>
You might decide to wrap this pattern inside an RAII type.
</p>
<pre>
class InitOnceGuard
{
public:
    InitOnceGuard(PINIT_ONCE initOnce) :
        m_initOnce(initOnce),
        m_success(InitOnceBeginInitialize(initOnce, 0, &amp;m_pending, nullptr)),
        m_status(INIT_ONCE_INIT_FAILED)
    {
    }

    ~InitOnceGuard()
    {
        if (NeedInitialization()) InitOnceComplete(m_initOnce, m_status, nullptr);
    }

    InitOnceGuard(const InitOnceGuard&amp;) = delete;
    InitOnceGuard(InitOnceGuard&amp;&amp;) = delete;
    InitOnceGuard&amp; operator=(const InitOnceGuard&amp;) = delete;
    InitOnceGuard&amp; operator=(const InitOnceGuard&amp;&amp;) = delete;

    bool NeedInitialization() { return m_success &amp;&amp; m_pending; }

    // If you don't Complete, then the guard assumes that initialization failed.
    void Complete() { m_status = 0; }

private:
    PINIT_ONCE m_initOnce;
    bool m_success;
    bool m_pending;
    DWORD m_status;
}

void Sample()
{
    InitOnceGuard guard(&amp;g_InitOnce);
    if (guard.NeedInitialization()) {
        init_stuff();
        guard.Complete();
    }
}
</pre>
<p>
If the <code>guard</code> destructs without ever being
<code>Complete</code>d,
either because of an exception,
or because the caller decided that initialization failed
in an unexceptional way,
then the destructor will tell the InitOnce engine that
initialization failed.
This will unblock any other threads that are waiting for
initialization to complete and allow them to give it a try.
</p>
<p>
If the <code>guard</code>
is <code>Complete</code>d,
then its destructor tells the InitOnce engine that
initialization was successful.
</p>
<p>
After thinking about all that,
you might realize that the fact that you're throwing
C++ exceptions means that you're already committed
to C++, so
you may as well go all in:
Use <code>std::call_once</code>
or C++ static locals.
These are part of the C++ standard and are fully exception-aware.
Of course, it assumes that all the frames you are throwing
across came from the same C++ compiler.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1291625">
				<div id="div-comment-1291625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170406-00/?p=95915#comment-1291625">
			April 6, 2017 at 3:28 pm</a>		</div>

		<p>&gt; Use std::call_once or C++ static locals.</p>
<p>Be careful with C++ static locals: from what I recall, their initialization isn&#8217;t thread-safe in MSVC.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1291635">
				<div id="div-comment-1291635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170406-00/?p=95915#comment-1291635">
			April 6, 2017 at 3:42 pm</a>		</div>

		<p>It is after c++11.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-2" id="comment-1291646">
				<div id="div-comment-1291646" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170406-00/?p=95915#comment-1291646">
			April 6, 2017 at 11:41 pm</a>		</div>

		<p>This was added to VC in VC2015.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1291935">
				<div id="div-comment-1291935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Guteniev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170406-00/?p=95915#comment-1291935">
			April 11, 2017 at 3:01 am</a>		</div>

		<p>std::call_once is implemented via InitOnceExecuteOnce in VS2015.<br />
I guess this means that you can just throw from InitOnceExecuteOnce parameter, if you want to use InitOnceExecuteOnce.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1291985">
				<div id="div-comment-1291985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170406-00/?p=95915#comment-1291985">
			April 11, 2017 at 9:38 am</a>		</div>

		<p>Ah, but notice that std::call_once wraps the lambda inside a try/catch before calling InitOnceExecuteOnce (<code>_TRY_BEGIN</code>&#8230;<code>_CATCH_ALL</code>) and rethrows the exception after InitOnceExecuteOnce returns (<code>_XSTD rethrow_exception</code>). So the evidence is the opposite of what you claim.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

