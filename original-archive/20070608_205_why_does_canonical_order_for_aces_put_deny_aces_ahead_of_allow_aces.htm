<html>
<head>
<title>Why does canonical order for ACEs put deny ACEs ahead of allow ACEs?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does canonical order for ACEs put deny ACEs ahead of allow ACEs?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 8, 2007 / year-entry #206</td></tr>
<tr><td><b>Tags:</b></td><td>tipssupport</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>31</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">So-called canonical order for ACEs in an access control list places deny ACEs ahead of allow ACEs. Why is this the canonical order? Because it gives results that are sensible. The algorithm for determining whether a user has access to an object protected by an ACL is as follows: let access-still-needed = access-requested for each...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>So-called canonical order for ACEs in an access control list  places deny ACEs ahead of allow ACEs.  Why is this the canonical order?</p>
<p>  Because it gives results that are sensible.  </p>
<p>  The algorithm for determining whether a user has access to an  object protected by an ACL is as follows:  </p>
<blockquote class="m"><p>  let access-still-needed = access-requested<br>  for each ACE in the ACL that applies to the user (in order)<br>  &nbsp;&nbsp;&nbsp;&nbsp;if it is a deny ACE:<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if  (access-still-needed &amp; ace-mask) return access-denied<br>  &nbsp;&nbsp;&nbsp;&nbsp;if it is an allow ACE:<br>  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;access-still-needed &amp;= ~ace-mask<br>  end for loop<br>  if access-still-needed != 0 return access-denied<br>  return access-granted  </p>
</blockquote>
<p>  In words,  we go through the ACEs in the ACL in the order they appear,  paying attention only to the ones that apply to the user,  i.e. the ones whose SIDs are present in the user's token.  If a permission is being denied, and the user is still looking for  that permission, then access is denied.  If a permission is being granted, then those permissions are  subtracted from the permissions the user is still looking for.  If, at the end of the day,  all the permissions the user requests have been granted,  then access is granted.  </p>
<p>  The key detail in the above algorithm is that deny ACEs  apply to permissions <i>not yet granted</i> and not to  the original set of permissions requested.  If you deny write, but an earlier ACE grants it,  then the deny has no effect.  </p>
<p>  Let's look at what happens if we apply this algorithm to an ACL  that is not in canonical order.  Our ACL is as follows:  </p>
<ul>
<li>Grant write access to Alice.  </li>
<li>Deny read and write access to Users.  </li>
<li>Grant read access to Users.  </li>
</ul>
<p>  Let's say that Alice wants write access.  We start with access-still-needed = write,  and the first ACE grants it,  leaving access-still-needed equal to zero.  The second ACE denies read and write, but Alice already got write  access thanks to the first rule, and she never asked for read access,  so this deny ACE has no effect.  The third ACE also has no effect since Alice wasn't looking for read  access.  Result: Alice gets write access.  </p>
<p>  On the other hand, suppose Alice wants read access.  The first ACE has no effect, since Alice isn't interested in write access.  The second ACE then denies access since Alice is being denied read access  which she hasn't gotten yet.  Alice's request is rejected without even looking at the third ACE.  </p>
<p>  Notice that if the ACEs are not canonically-ordered,  you can't use a simple rule like  "deny ACEs take priority over allow ACEs".  The rule is "Well, you have to go through each ACE one by one,  and you get access if you get all the things you want before  somebody denies them."  It sort of turns into a game show.  </p>
<p>  Since graphical ACL editors typically don't show the order of the ACEs,  some sort of canonical order needs to be established so that you don't  run afoul of this "order of operations" problem.  Notice that in the algorithm above,  you can swap two adjacent allow ACEs and two adjacent deny ACEs  without affecting the result,  but you cannot swap the positions of an allow and a deny ACE.  Therefore, the canonical ordering must either be  "all deny ACEs come before all allow ACEs" or  "all allow ACEs come before all deny ACEs".  </p>
<p>  Note, however, that if you choose to have all allow ACEs come before  all deny ACEs, then you don't need deny ACEs at all!  If you look at the algorithm above,  if there is no ACE that mentions the permission you want,  then access is denied.  The deny ACEs don't add anything to the picture:  </p>
<blockquote class="m"><p>  // assuming that all allow ACEs come before all deny ACEs<br>  let access-still-needed = access-requested<br>  for each allow ACE in the ACL that applies to the user (in order)<br>  &nbsp;&nbsp;&nbsp;&nbsp;access-still-needed &amp;= ~ace-mask<br>  end for loop<br>  for each deny ACE in the ACL that applies to the user (in order)<br>  &nbsp;&nbsp;&nbsp;&nbsp;if  (access-still-needed &amp; ace-mask) return access-denied<br>  end for loop<br>  if access-still-needed != 0 return access-denied<br>  return access-granted  </p>
</blockquote>
<p>  Notice that once you make it out of the first "for" loop,  the return value is going to be access-denied if access-still-needed is  nonzero.  All the deny ACEs give you is another way to say "no".  But you were going to say "no" anyway.  </p>
<p>  Therefore, for deny ACEs to be meaningful, the canonical  ordering should place them ahead of allow ACEs.  That way, you get three tiers of permission instead of just two:  </p>
<ul>
<li>If there is a deny ACE, then it is denied.  </li>
<li>If there is no deny ACE but there is an allow ACE, then it is allowed.  </li>
<li>If there is neither a deny ACE or an allow ACE, then it is denied.  </li>
</ul>
<p>  <b>Postscript</b>:  Our sample non-canonical ACL above can easily be converted  to an equivalent canonical one:  </p>
<ul>
<li>Grant write access to Alice.  </li>
</ul>
<p>  Why does this work?  </p>
<p>  Well, first notice that the second rule ("Deny read and write access  to Users") completely overrides the  third rule ("Grant read access to Users"),  since any attempt by the third rule to grant read access to Users  will be thwarted by the second rule, which denies it.  </p>
<p>  But the second rule itself is unnecessary.  We are taking advantage of the test outside the loop in the  access algorithm:  <code>if access-still-needed != 0 return access-denied</code>.  This rule means that the default for all access mode is to deny.  Therefore, you don't need to deny anything explicitly unless you  have a broader rule later that grants it.  (If you have a more narrow rule later that grants it, then that   narrower rule is pointless, as we saw in the previous paragraph.)  In other words, there's no point denying read and write to Users  since merely not saying anything is equivalent to a denial.  </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-513193">
				<div id="div-comment-513193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://peeved.org/blog' rel='external nofollow' class='url'>Evan Anderson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513193">
			June 8, 2007 at 10:19 am</a>		</div>

		<p>I suppose that it adds flexibility for the API to allow you to specify non-canonical ACE ordering, but I never understood why the API wasn&#8217;t designed to just re-order ACEs to the canonical order automatically.</p>
<p>(I know that non-canonical ACE ordering is used to reproduce the behaviour of MAPI permissions, so I won&#8217;t deny that the ability to use non-canonical ACE ordering has some utility, but it sure feels like a hack&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-513263">
				<div id="div-comment-513263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513263">
			June 8, 2007 at 11:20 am</a>		</div>

		<p>What effect does the inheritance of permissions from parent containers have on all this?</p>
<p>Does it apply all of the DENY rules for the entire heirarchy and then all of the ALLOWs, or does it do that algorithm separately for each item in the heirarchy?</p>
<p>I guess this boils down to whether an ALLOW on the parent overrides a DENY on the child or vice-versa&#8230; but does anything special happen in this case?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-513293">
				<div id="div-comment-513293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513293">
			June 8, 2007 at 12:20 pm</a>		</div>

		<p>I thought I understood and then I actually tried :)</p>
<p>In my C: root folder (with &quot;Full Access&quot; permission for administrators/SYSTEM and &quot;Read/Execute&quot; access for users), I create a new empty file and then edit its ACL to deny the &quot;remove&quot; permission for Administrators (as I was one during the test).</p>
<p>Now if I understand correctly this post and this page (<a rel="nofollow" target="_new" href="http://www.microsoft.com/technet/prodtechnol/windows2000serv/reskit/distrib/dsce_ctl_hziq.mspx?mfr=true" rel="nofollow">http://www.microsoft.com/technet/prodtechnol/windows2000serv/reskit/distrib/dsce_ctl_hziq.mspx?mfr=true</a>), the inherited permissions come after the explicit ones so my deny remove should apply.</p>
<p>But it doesn&#8217;t&#8230; I can delete the file!</p>
<p>I know it has something to do with the fact that there&#8217;s also a &quot;delete file&quot; permission in the parent folder and that this permission is granted for me but then how do I prevent a file to be deleted???</p>
<p>If I remove the &quot;delete file&quot; permission from the parent folder then I won&#8217;t be able to delete any file from folder!!</p>
<p>PS:</p>
<p>I&#8217;m sorry that I do not use the correct permission names, but I have a french XP and those fields have been badly translated&#8230; you can see what happens when I translate them back!</p>
<p>For instance there&#8217;s a interesting confusion made by the translators: What was (I suspect) &quot;Read attributes&quot; has been translated as if it was &quot;Attributes of read&quot;! So you end up wondering what happens when you deny/grant that kind of access! Fortunately, the &quot;Read extended attributes&quot; was correctly translated (since there are no confusion possible) and you are able to deduce what was meant for the previous field&#8230;</p>
<p>Was that a digression? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-513353">
				<div id="div-comment-513353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513353">
			June 8, 2007 at 2:19 pm</a>		</div>

		<p>You can&#8217;t have full POSIX mapping of owner/group/world style access using only canonically ordered ACEs.</p>
<p>For example, rw-r-xrw-, which grants read-write access to the owner, read execute to the group and read write to everyone else can only be represented by having a deny entry in the middle:</p>
<p>Owner Deny Execute</p>
<p>Owner Allow Write</p>
<p>Group Deny Write</p>
<p>Group Allow Execute</p>
<p>Everyone Allow Read+Write</p>
<p>See <a rel="nofollow" target="_new" href="http://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-mapping" rel="nofollow">http://cygwin.com/cygwin-ug-net/ntsec.html#ntsec-mapping</a></p>
<p>Unix-over-NT layers like SFU (now SUA) and Cygwin correctly represent such access modes in ACEs but the standard ACL editor will mangle them, given the chance.</p>
<p>There are other mappings that can only be represented by non-canonical ACE orderings&#8211; any time more than two different overlapping layerings or groupings of users and groups need different access.</p>
<p>Incidentally, SD Edit is a graphical ACL editor that supports explicit ACE ordering.</p>
<p><a rel="nofollow" target="_new" href="http://czwsoft.dyndns.org/sdedit.html" rel="nofollow">http://czwsoft.dyndns.org/sdedit.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-513383">
				<div id="div-comment-513383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513383">
			June 8, 2007 at 3:04 pm</a>		</div>

		<p>The differences between the way ACLs really work and they way they appear to work in the Explorer/RegEdit UI, coupled with the amount of code you have to write to do anything with file or registry permissions, is something that I&#8217;d love to see improved by a higher-level API or wrapper.</p>
<p>Trying to reproduce functionality of those UIs, even when using the same standard dialogs, is a big task. Either you have to spend a lot of time writing complex, error prone, and yet quite boring, code that is already inside Explorer/RegEdit (but not exposed) or, more often, the feature is left out completely on the basis that so few people mess with permissions that it isn&#8217;t worth the effort. It&#8217;s a shame in both cases.</p>
<p>An API which took care of canonical ordering, merging, inheritance and, especially, the permissions dialogs would mean that more apps would allow proper permissioning of things. There&#8217;s nothing wrong with the existing API &#8212; you have to expose the full granularity &#8212; but it would really help if there was a higher-level API or wrapper in addition to it.</p>
<p>Having read up on how to use the permissions dialogs (while I was looking at writing an alternative registry editor) it looked like a hell of a lot of code to write just to duplicate the &#8220;set permissions&#8221; context menu of RegEdit. I didn&#8217;t plan to do anything special with permissions &#8212; my planned improvements were in other areas &#8212; but I also did not want to provide a tool which did less than RegEdit in any area, else people would have to switch between tools which is nasty.</p>
<p>When mistakes are made in this kind of code the results can be very confusing to both user and programmer since the other tools (Explorer, RegEdit) show you simplified views of permissions and thus don&#8217;t show you what&#8217;s really gone wrong. (cacls.exe to the rescue, but not many people know about that.)</p>
<p>Anyway, this isn&#8217;t a complaint and I&#8217;m sure there are a million other higher priority APIs and wrappers and examples to write but it&#8217;d be great if one day this stuff was made less of a burden on application developers.</p>
<div class=post>[<i>Explorer and Regedit don&#8217;t have ACL-editing UI. They use the common ACL editor in aclui.dll. Is there shame in not exposing that doesn&#8217;t exist? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-513413">
				<div id="div-comment-513413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513413">
			June 8, 2007 at 3:39 pm</a>		</div>

		<p>Leo: <a rel="nofollow" target="_new" href="http://www.codeproject.com/win32/accessctrl4.asp" rel="nofollow">http://www.codeproject.com/win32/accessctrl4.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-513423">
				<div id="div-comment-513423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513423">
			June 8, 2007 at 4:19 pm</a>		</div>

		<p>Regarding inherited ACEs:</p>
<p>Aren&#8217;t they pushed down to the children &quot;automatically&quot;? &nbsp;I thought that the ACL-check code only had to look at the ACEs that existed on the object itself, because that&#8217;s how the inheritance stuff worked.</p>
<p>(And I thought it was set up this way to stay more compatible with NT4, which couldn&#8217;t inherit permissions, but which had a UI option to push a parent object&#8217;s permissions down to its children instead. &nbsp;IOW, I thought that the ACL-editing APIs took over the job of forcibly pushing down the parent&#8217;s inheritable ACEs to any children that are marked inheriting.)</p>
<p>If all that&#8217;s true (and I&#8217;m not sure whether it is), then it doesn&#8217;t matter when inherited ACEs are checked, because they&#8217;re present on the children already. &nbsp;(I suppose it does matter where the APIs put them on the children in that case, though. &nbsp;Hmm.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-513533">
				<div id="div-comment-513533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513533">
			June 8, 2007 at 8:11 pm</a>		</div>

		<p>Foolhardy: no way, you don&#8217;t need the deny entries. Accesses that are not granted are denied by default. They are perfectly supported by the ACL editor, too. Try chmodding a file from Cygwin, and then look at its ACL. This is what a mode of 700 looks like from the Windows point of view:</p>
<p>C:cygwinhomeHyperionaaa REGULUSHyperion:(accesso speciale:)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STANDARD_RIGHTS_ALL</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; DELETE</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; READ_CONTROL</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WRITE_DAC</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; WRITE_OWNER</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; SYNCHRONIZE</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STANDARD_RIGHTS_REQUIRED</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_GENERIC_READ</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_GENERIC_WRITE</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_GENERIC_EXECUTE</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_READ_DATA</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_WRITE_DATA</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_APPEND_DATA</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_READ_EA</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_WRITE_EA</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_EXECUTE</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_READ_ATTRIBUTES</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_WRITE_ATTRIBUTES</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;REGULUSNessuno:(accesso speciale:)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;READ_CONTROL</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FILE_READ_EA</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;FILE_READ_ATTRIBUTES</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Everyone:(accesso speciale:)</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; READ_CONTROL</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_READ_EA</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FILE_READ_ATTRIBUTES</p>
<p>Note that READ_CONTROL is always allowed (not coincidentally it&#8217;s part of STANDARD_RIGHTS_REQUIRED), as are FILE_READ_EA and FILE_READ_ATTRIBUTES (because you can always read file modes and attributes with fstat)</p>
<p>Windows ACLs were pretty much designed with the express aim to support UNIX file modes</p>
<p>Leo Davidson: for high-level, canonical form editing of ACLs from code, see the TRUSTEE and EXPLICIT_ACCESS structures and all related functions; for the standard ACL editor UI, see CreateSecurityPage and ISecurityInformation</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-513543">
				<div id="div-comment-513543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513543">
			June 8, 2007 at 8:38 pm</a>		</div>

		<p>@Ben Cooke and others:</p>
<p>The canonical ACE ordering when inheritance is involved is:</p>
<ol>
<li>&nbsp;Direct Deny ACEs</li>
<li>
<p>&nbsp;Direct Allow ACEs</p>
</li>
<li>
<p>&nbsp;Inherited Deny ACEs</p>
</li>
<li>
<p>&nbsp;Inherited Allow ACEs</p>
</li>
</ol>
<p>@Nawak:</p>
<p>Deleting a file is really an operation on the containing folder.</p>
<p>@BryanK:</p>
<p>If you mean what I think you mean, then yes, you&#8217;re right. &nbsp;When an object inherits an ACL, it actually gets its own copy, with inherited ACEs marked as inherited.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-513563">
				<div id="div-comment-513563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513563">
			June 9, 2007 at 12:17 am</a>		</div>

		<p>@Nawak: Yes, it is because of the permissions on the folder. &nbsp;An ACE has two delete permissions, &quot;delete child&quot; (the UI calls it &quot;delete subfolders and files&quot;) and &quot;delete&quot; (self). &nbsp;If you are granted &quot;delete child&quot; permisson on a folder, then you are allowed to delete any files within it. &nbsp;If not, you must have &quot;delete&quot; permission on the file itself.</p>
<p>Usually what you would do is have an inheritable ACE on the folder grant the &quot;delete&quot; permission, so any new files created inside it have the &quot;delete&quot; permission already. &nbsp;Then you remove &quot;delete child&quot; permission from the folder, and remove &quot;delete&quot; from specific files. &nbsp;(I said &quot;remove&quot;, but obviously adding deny ACEs works just as well.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-513593">
				<div id="div-comment-513593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513593">
			June 9, 2007 at 1:11 am</a>		</div>

		<p>@KJK::Hyperion: That&#8217;s what I thought originally, but it&#8217;s not sufficient. &nbsp;POSIX has 3 permission buckets: owning User, owning Group, and Other. &nbsp;The key issue is that NT has no concept of &quot;Other&quot;; &quot;Everyone&quot; consists of, well, everyone (except anonymous users in some configurations, but that&#8217;s not relevant here) which includes both the owning user and group. &nbsp;The POSIX &quot;Other&quot; does not.</p>
<p>Foolhardy&#8217;s example denies a permission (Write) to the owning group, while still granting it to everyone else. &nbsp;This type of exclusion requires a deny ACE, but since the owning user is also part of that group, this ACE cannot come first as canonical order demands.</p>
<p>Indeed, tests with SUA demonstrate this. &nbsp;I created a file with an ACL containing one ACE, granting full access to Everyone. &nbsp;The file was owned by user Administrator, group None. &nbsp;SUA&#8217;s CSH shows:</p>
<p>-rwxrwxrwx &nbsp;1 Administrator &nbsp;None &nbsp;0 Jun &nbsp;8 21:00 test.txt*</p>
<p>&#8230;after &quot;chmod u=rw,g=rx,o=rw test.txt&quot;:</p>
<p>-rw-r-xrw- &nbsp;1 Administrator &nbsp;None &nbsp;0 Jun &nbsp;8 21:00 test.txt*</p>
<p>&#8230;and back in NT land, the ACL now contains 5 ACEs:</p>
<p>1 allow Administrator &lt;all but execute&gt;</p>
<p>2 deny Administrator &lt;execute&gt;</p>
<p>3 allow None &lt;read rights, execute&gt;</p>
<p>4 deny None &lt;write rights&gt;</p>
<p>5 allow Everyone &lt;all but execute and write DACL/owner&gt;</p>
<p>ACE #2 is required under the assumption that the User is part of the Group &#8212; and execute permission is granted to the Group. &nbsp;It could be in canonical order in this particular case though.</p>
<p>ACE #4 is required to deny write permissions to the Group, since they are allowed for everyone else. &nbsp;It must be below the allow entry for the User, and not in canonical order, because the User is still allowed these permissions.</p>
<p>I suppose this is a bad example since the owning group was None in my test, but the logic still works.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-513633">
				<div id="div-comment-513633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513633">
			June 9, 2007 at 11:07 am</a>		</div>

		<p>[Explorer and Regedit don&#8217;t have ACL-editing UI. They use the common ACL editor in aclui.dll. Is there shame in not exposing that doesn&#8217;t exist? -Raymond]</p>
<p>I know they don&#8217;t contain have the dialog itself, and I know the dialog is exposed, but to use that dialog a lot of APIs and concepts have to be digested, most of which are orthogonal to what an application developer uses. (By which I mean that getting this dialog &nbsp;to display in their app is the only time they will use most of this knowledge and that makes it more difficult to justify the time and energy, given the amount of reading and fact-digestion involved.)</p>
<p>That code is presumably in Explorer and RegEdit and I figured it&#8217;d be nice to move it into a higher level API that other programs can use.</p>
<p>I mean, look at the amount of code and understanding required in the CodeProject article that&#8217;s also linked in these comments (<a rel="nofollow" target="_new" href="http://www.codeproject.com/win32/accessctrl4.asp" rel="nofollow">http://www.codeproject.com/win32/accessctrl4.asp</a>) and keep in mind that is part four and requires an understanding of two of the previous parts. (The third part is about .Net so can be skipped.)</p>
<p>If all you want to do is to allow someone to modify the permissions on a file or registry item, that&#8217;s a lot of work for a feature that is easy to strike off the list. For file&#8217;s it&#8217;s not so bad since there is an API to display a standard Properties page which gives you the security dialog for free, and there&#8217;s also example code on the net for doing it, but for the registry it seemed like you had to do things the hard way.</p>
<p>Or is there an easy way to use the dialog? I might be wrong.</p>
<p>Ignoring the dialog for a second, an API for dealing with ACLs in the way which the UI deals with them, supporting inheritance, merging, copying and so on would come in handy. I guess the code to do that is in aclui.dll but I don&#8217;t know and I don&#8217;t think it is exposed anywhere as a public API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-513713">
				<div id="div-comment-513713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513713">
			June 10, 2007 at 4:12 pm</a>		</div>

		<p>@Leo Davidson:</p>
<p>SetKernelObjectSecurity on a file or key only edits the object in question, with no inheritance.</p>
<p>SetNamedSecurityInfo, OTOH does implement auto-inheritance for children below the named object.</p>
<p>TreeResetNamedSecurityInfo also implements auto-inheritance, supports the replace-direct-entries option and gives you the option of status reports and cancel/retry error handling. Presumably, it&#8217;s the same function that regedit and the shell use when you click OK.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-513743">
				<div id="div-comment-513743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513743">
			June 11, 2007 at 3:34 am</a>		</div>

		<blockquote><p>
  Why is this the canonical order?</p>
<p>  Because it gives results that are sensible.
</p></blockquote>
<p>The actual order of traversal from beginning to end is sensible. &nbsp;The canonical order is required as a workaround for broken ACL editing tools, not for the ACL structures themselves.</p>
<p>Friday, June 08, 2007 8:38 PM by Aaron Margosis</p>
<blockquote><p>
  Deleting a file is really an operation on the</p>
<p>  containing folder.
</p></blockquote>
<p>&quot;The&quot; containing folder? &nbsp;Who says there&#8217;s only one? &nbsp;For pedantic reasons we might want to check for write permissions on one or all containing folders, but delete permissions should depend only on the file itself and the credentials of the intending deletor.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-513783">
				<div id="div-comment-513783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513783">
			June 11, 2007 at 8:16 am</a>		</div>

		<blockquote><p>
  When an object inherits an ACL, it actually gets its own copy, with inherited ACEs marked as inherited.
</p></blockquote>
<p>Yeah, that&#8217;s how I thought it worked. &nbsp;That&#8217;s much more concise though. &nbsp;;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-513793">
				<div id="div-comment-513793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-513793">
			June 11, 2007 at 9:22 am</a>		</div>

		<p>@Norman Diamond: &nbsp;&quot;Who says there&#8217;s only one?&quot; &nbsp;I don&#8217;t know whether you&#8217;re referring to hard links or to parent/grandparent/greatgrandparent containers, so I&#8217;ll answer both.</p>
<p>With hard links, a file can exist in multiple folders at the same time. &nbsp;&quot;Deleting a file&quot; deletes the reference to the file from one folder. &nbsp;You might have permission to delete it from one folder, but not from another.</p>
<p>Grandparent/etc folder permissions do not matter, unless your token doesn&#8217;t have the ChangeNotify (Bypass traverse checking) privilege, which should always be present and enabled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-514153">
				<div id="div-comment-514153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514153">
			June 11, 2007 at 8:44 pm</a>		</div>

		<p>Monday, June 11, 2007 9:22 AM by Aaron Margosis</p>
<blockquote><p>
  With hard links, a file can exist in multiple</p>
<p>  folders at the same time. &nbsp;&quot;Deleting a file&quot;</p>
<p>  deletes the reference to the file from one</p>
<p>  folder. &nbsp;You might have permission to delete</p>
<p>  it from one folder, but not from another.
</p></blockquote>
<p>As described so far, that resembles Unix. &nbsp;In Unix it is pretty much documented that rm&#8217;ing a filename really only removes an inode and the file doesn&#8217;t really go away until the counts of inodes that link to it and processes that have it open are both zero.</p>
<p>In Windows I don&#8217;t recall seeing it documented that way. &nbsp;The MSDN page for DeleteFile doesn&#8217;t describe it that way. &nbsp;Also in the page on File Security and Access Rights, FILE_DELETE_CHILD gives permission to delete the directory and files that it contains, including read-only files. &nbsp;Does this mean deletion of NTFS equivalents of indoes? &nbsp;Including read-only NTFS equivalents of inodes?</p>
<p>Tangent:</p>
<blockquote><p>
  Grandparent/etc folder permissions do not</p>
<p>  matter, unless your token doesn&#8217;t have the</p>
<p>  ChangeNotify (Bypass traverse checking)</p>
<p>  privilege, which should always be present and</p>
<p>  enabled.
</p></blockquote>
<p>If Bypass Traverse Checking should always be present and enabled, why does it even exist? &nbsp;Meanwhile, surprises don&#8217;t hit the owners of processes that have this thing set, surprises hit the owners of directories and files who didn&#8217;t want their files to get traversed to by bypassers. &nbsp;If an administrator created a hard link somewhere else so that persons unknown to the file&#8217;s owner can still read the file, well tough, the owner will have to apply for administrative sanctions. &nbsp;But when persons unknown reach the file when the owner didn&#8217;t expect it because Windows provides that privilege, I don&#8217;t agree with you about &quot;should&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-514233">
				<div id="div-comment-514233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514233">
			June 11, 2007 at 9:58 pm</a>		</div>

		<p>@Norman: &nbsp;I believe that the answers to both your comments derive from the fact that NT was built to support Posix and other applications. &nbsp;I&#8217;m sure there are subtle differences wrt inodes, but I&#8217;m not expert in UNIX so I couldn&#8217;t specify.</p>
<p>Marking a file &quot;read-only&quot; is just a hint. &nbsp;NTFS permissions are what really protect them. &nbsp;Just like &quot;rm -f&quot; can delete &quot;read-only&quot; files in UNIX.</p>
<p>The reason for &quot;bypass traverse checking&quot; was also to support Posix functionality. &nbsp;Note that having that privilege doesn&#8217;t mean you can scan any folder. &nbsp;You need to have permissions on the folder and be able to name it before you can perform any operations in it. &nbsp;What &quot;bypass traverse checking&quot; does is skip the recursive check to parent/grandparent/etc up to the root before determining whether access is granted or denied, which is a performance benefit if nothing else. &nbsp;But if you have no permissions in the target node, then bypass traverse won&#8217;t give you anything.</p>
<p>My use of the word &quot;should&quot; is because that&#8217;s in our recommended guidance. &nbsp;Here&#8217;s what the WinXP Threats and Countermeasures Guide says:</p>
<p>&quot;The Windows operating systems, as well as many applications, were designed with the expectation that anyone who can legitimately access the computer will have this user right. Therefore, Microsoft recommends that you thoroughly test any changes to assignments of the Bypass traverse checking user right &nbsp;before you make such changes to production systems. In particular, IIS requires this user right to be assigned to the Network Service, Local Service, IIS_WPG, IUSR_&lt;ComputerName&gt;, and IWAM_&lt;ComputerName&gt; accounts. (It must also be assigned to the ASPNET account through its membership in the Users group.) This guide recommends that you leave this policy setting at its default configuration.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-514243">
				<div id="div-comment-514243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514243">
			June 11, 2007 at 10:11 pm</a>		</div>

		<p>Monday, June 11, 2007 9:58 PM by Aaron Margosis</p>
<blockquote><p>
  Marking a file &quot;read-only&quot; is just a hint.
</p></blockquote>
<p>That is true for users who have (or can acquire) privileges to change the file&#8217;s permissions. &nbsp;If it&#8217;s true for other users too then we&#8217;re in bigger trouble than I thought.</p>
<blockquote><p>
  What &quot;bypass traverse checking&quot; does is skip</p>
<p>  the recursive check to parent/grandparent/etc</p>
<p>  up to the root
</p></blockquote>
<p>Yes, which is exactly the reason why it doesn&#8217;t surprise the owner of the process that does this traversing and it only surprises the owner of the parent/grandparent/etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-514263">
				<div id="div-comment-514263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514263">
			June 11, 2007 at 11:34 pm</a>		</div>

		<p>Speaking of Posix semantics, two by-the-ways:</p>
<p>(1) &nbsp;In a case that happened a millennium or two ago, the equivalent of &#8220;bypass traverse checking&#8221; did surprise a Unix user. &nbsp;A professor had disabled read access to a directory and thought that meant students would be unable to read file in the directory. &nbsp;Some students turned in assignments containing the professor&#8217;s code. &nbsp;Some even forgot to rename all the variables to prevent us from recognizing it.</p>
<p>(2) &nbsp;Windows hard links are still harder to understand than Unix hard links. &nbsp;This case is on a Windows XP system with Windows Services for Unix and case sensitivity enabled. &nbsp;I took this screenshot before doing any experimenting, and guess that the differently cased directory was created by some XP security patch in 2006:</p>
<p><a href="http://www.geocities.jp/hitotsubishi/xp_sfu_casesensitivity.png" target=_new rel=nofollow rel="nofollow">http://www.geocities.jp/hitotsubishi/xp_sfu_casesensitivity.png</a></p>
<p>As far as I can tell, both directories are hard links to the same place. &nbsp;If I try to display either folder in Windows Explorer, the address bar shows the pathname with uppercase P. &nbsp;If I use the CMD.EXE command prompt to CD into either directory, it CDs into the pathname with uppercase P. &nbsp;Korn Shell could cd into either directory as directed. &nbsp;In both directories, ls -l showed identical contents. &nbsp;Today as an experiment, using Korn Shell, in one directory I created a file (touch diamond.txt) and then cd&#8217;d into the other directory and deleted the file (rm diamond.txt). &nbsp;So I&#8217;m pretty sure both folder names really are hard links to the same place. &nbsp;But now after that experiment, one folder has its last-written timestamp changed to today, and the other folder still has its old timestamp. &nbsp;How can this be? &nbsp;File creation in one directory should have done a write on that directory, and file deletion in the other directory should have done a write on that other directory, even though these were done using SFU commands.</p>
<div class=post>[<i>Hey guys, remember when we were talking about deny ACEs? Me neither. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-514273">
				<div id="div-comment-514273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514273">
			June 12, 2007 at 12:39 am</a>		</div>

		<p>@Norman Diamond:</p>
<blockquote><p>
  &gt; Marking a file &quot;read-only&quot; is just a hint.</p>
<p>  That is true for users who have (or can acquire) privileges to change the file&#8217;s permissions. &nbsp;If it&#8217;s true for other users too then we&#8217;re in bigger trouble than I thought.
</p></blockquote>
<p>&quot;Read-only&quot; is not a permission, it&#8217;s just an attribute on the file. &nbsp;As Aaron said, if you want to declare someone has only read permission, you need to use the actual permission system: the file&#8217;s DACL.</p>
<p>More on &quot;bypass traverse checking&quot;: <a rel="nofollow" target="_new" href="http://blogs.technet.com/markrussinovich/archive/2005/10/19/the-bypass-traverse-checking-or-is-it-the-change-notify-privilege.aspx" rel="nofollow">http://blogs.technet.com/markrussinovich/archive/2005/10/19/the-bypass-traverse-checking-or-is-it-the-change-notify-privilege.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-514333">
				<div id="div-comment-514333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514333">
			June 12, 2007 at 1:35 am</a>		</div>

		<p>@Raymond: &nbsp;Sorry about that. &nbsp;Windows authz has some very complex rules, so any discussion of it risks numerous ratholes.</p>
<p>@Norman Diamond: re &#8211; (1) surprising the UNIX user. &nbsp;I don&#8217;t know how UNIX security works beyond the limited 0777 thing, so I don&#8217;t have an answer. &nbsp;In Windows it&#8217;s straightforward to get permissions to be inherited, particularly when using the GUI ACL editor. &nbsp;Like I said, if the user had no permissions to read the file, then bypass-traverse wouldn&#8217;t have allowed it either.</p>
<p>Re (2) your [URL] link must be broken. &nbsp;I clicked on it and got a picture of a middle-aged Asian woman with bad teeth. &nbsp;Tried a few more times and got other ads, all in Japanese (I think). &nbsp;Babelfish didn&#8217;t help.</p>
<p>Links are easy &#8211; run MKLINK at a Vista CMD prompt&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-514343">
				<div id="div-comment-514343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514343">
			June 12, 2007 at 1:36 am</a>		</div>

		<p>I put a Deny ACE for my personal account on Pinball, and then was rejected in an attempt to see the contents of pinball. &nbsp;Korn Shell was prohibited from doing an ls command on both directories too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-514353">
				<div id="div-comment-514353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514353">
			June 12, 2007 at 1:43 am</a>		</div>

		<p>Tuesday, June 12, 2007 1:35 AM by Aaron Margosis</p>
<blockquote><p>
  Re (2) your [URL] link must be broken.
</p></blockquote>
<p>It wasn&#8217;t broken when I posted it. &nbsp;Now it says the page is under construction. &nbsp;I can&#8217;t imagine how a png file could be under construction. &nbsp;Oh it gets weirder:</p>
<p>Right-click the shortcut, copy the shortcut, open a new instance of Internet Explorer, paste the URL, and my screenshot displays.</p>
<p>Right-click the shortcut, open the target page in a new window, and Yahoo says my page is under construction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-514363">
				<div id="div-comment-514363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514363">
			June 12, 2007 at 1:54 am</a>		</div>

		<p>@Norman: &nbsp;strange, yes, but when I copy/paste the URL I get the screenshot. &nbsp;Click on the link and I get the bad teeth.</p>
<p>Anyway: &nbsp;I&#8217;m not a file system expert, but I *think* that hard links apply only to files, not to folders. &nbsp;I also think that while the Windows kernel can handle a case-sensitive file system (to support Posix), Win32 is case-preserving but case-insensitive. &nbsp;Two folders that differ only by case seems like something that likely was done within Services for Unix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-514413">
				<div id="div-comment-514413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514413">
			June 12, 2007 at 2:46 am</a>		</div>

		<p>Tuesday, June 12, 2007 1:54 AM by Aaron Margosis</p>
<p>&gt; strange, yes, but when I copy/paste the URL I</p>
<p>&gt; get the screenshot. &nbsp;Click on the link and I</p>
<p>&gt; get the bad teeth.</p>
<p>So Yahoo is doing the same to you that they do to me. &nbsp;I wonder why.</p>
<p>&gt; I&#8217;m not a file system expert, but I *think*</p>
<p>&gt; that hard links apply only to files, not to</p>
<p>&gt; folders.</p>
<p>But when I set a Deny ACE on one of them, the ACE affected both of them.</p>
<p>(The next weird thing is that I was able to delete the Deny ACE. &nbsp;Since I successfully denied myself access, I thought it would be necessary to use another account to delete that Deny ACE, but no, Windows granted the denied user permission to delete the denial.)</p>
<p>&gt; I also think that while the Windows kernel</p>
<p>&gt; can handle a case-sensitive file system (to</p>
<p>&gt; support Posix), Win32 is case-preserving but</p>
<p>&gt; case-insensitive.</p>
<p>Win32&#8217;s default is case-preserving but case-insensitive. &nbsp;Posix support allows changing that to case-sensitive, and I did change that when installing Services for Unix. &nbsp;(I didn&#8217;t know that some XP security patch was going to give me a second pinball directory differing only in case. &nbsp;And I didn&#8217;t know these other weird characteristics were going to arise.)</p>
<div class="post">[<i>Okay, you&#8217;ve been warned. No more discussion of what specific ACEs mean or which ACL editors let you create ACEs in non-canonical order. If you want to continue it, go start your own blog. Today&#8217;s topic is why canonical ACE order puts deny ACEs ahead of allow ACEs. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-514863">
				<div id="div-comment-514863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-514863">
			June 12, 2007 at 5:20 pm</a>		</div>

		<p>I wonder why you bother having comments enabled at all Raymond. Either it&#8217;s people asking the wrong question (&#8220;Don&#8217;t you dare ask me about this in the comments!&#8221;) or talking amongst themselves about the wrong thing (&#8220;Don&#8217;t you dare talk about this in the comments!&#8221;). Why not just turn comments off altogether? What&#8217;s the point of having them enabled when you have this sort of attitude?</p>
<div class=post>[<i>Feel free to start your own blog called &#8220;Discussion of things Raymond considers off-topic or off the table.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-515093">
				<div id="div-comment-515093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">rdamiani</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-515093">
			June 12, 2007 at 11:49 pm</a>		</div>

		<p>This seems like a really complicated way to handle permissions. The way they are described, they seem less like file attributes and more like mailbox rules with unintended effects that result from conditions the &#8216;standard&#8217; tools are unable to detect, indicate, or correct. What does Windows gain from this complexity that a simpler system would not provide?</p>
<div class="post">[<i>I&#8217;m not sure what you&#8217;re looking for. Which simpler system do you want to compare it to? Obviously it provides more expressive power than a simple system like FAT with a single &#8220;read-only&#8221; flag that anybody can change. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-515133">
				<div id="div-comment-515133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-515133">
			June 13, 2007 at 1:08 am</a>		</div>

		<p>Another point is that this security system applies to many different kinds of objects within NT, not just files. &nbsp;(Raymond never even mentioned files, it&#8217;s just what first came to mind for everyone.) &nbsp;I would argue that a unified security model is a very important thing to have.</p>
<p>Perhaps that&#8217;s why it&#8217;s complex, as there are so many different needs to address.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-515103">
				<div id="div-comment-515103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-515103">
			June 13, 2007 at 12:22 am</a>		</div>

		<p>@rdamiani: &nbsp;Actually, this is just the tip of the iceberg! &nbsp;We haven&#8217;t even touched on restricting SIDs, deny-only SIDs, the CREATOR OWNER ACE, the new OWNER RIGHTS and WRITE RESTRICTED SIDs, the TakeOwnership, Backup and Restore privileges, SD &amp; ACE inheritance flags, integrity levels/labels, and more. &nbsp;It is so complex that many of the best books on Windows security don&#8217;t get it 100% completely accurate, and some miss pretty badly.</p>
<p>But: &nbsp;it is very powerful, and very useful. &nbsp;*Much* more so than -rwxr-xr-x. &nbsp;And the basics are not that hard to grasp.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-515703">
				<div id="div-comment-515703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://geekswithblogs.net/quension/archive/2007/06/14/113220.aspx' rel='external nofollow' class='url'>Q-ologues</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070608-00/?p=26503#comment-515703">
			June 14, 2007 at 6:16 am</a>		</div>

		<p>Intricacies of the NT Filesystem</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

