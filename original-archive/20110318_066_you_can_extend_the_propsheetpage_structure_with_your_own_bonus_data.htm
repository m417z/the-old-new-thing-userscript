<html>
<head>
<title>You can extend the PROPSHEETPAGE structure with your own bonus data</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You can extend the PROPSHEETPAGE structure with your own bonus data</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 18, 2011 / year-entry #67</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">... for when regular strength lParam just isn't enough. A little-known and even less-used feature of the shell property sheet is that you can hang custom data off the end of the PROPSHEETPAGE structure, and the shell will carry it around for you. Mind you, the shell carries it around by means of memcpy and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<i>... for when regular strength lParam just isn't enough.</i>
</p>
<p>
A little-known and even less-used feature of the shell property sheet
is that you can hang custom data off the end of the
<code>PROPSHEETPAGE</code> structure,
and the shell will carry it around for you.
Mind you, the shell carries it around by means of
<code>memcpy</code> and destroys it by just freeing the
underlying memory,
so whatever you stick on the end needs to be
<a HREF="http://en.wikipedia.org/wiki/Plain_old_data_structures">
plain old data</a>.
(Though you do get an opportunity to "construct" and "destruct"
if you register a <code>PropSheetPageProc</code> callback,
during which you are permitted to modify your bonus data
and the <code>lParam</code> field of the
<code>PROPSHEETPAGE</code>.)
</p>
<p>
Here's a program that illustrates this technique.
It doesn't do much interesting, mind you,
but maybe that's a good thing: Makes for fewer distractions.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;prsht.h&gt;

HINSTANCE g_hinst;

struct ITEMPROPSHEETPAGE : public PROPSHEETPAGE
{
 int cWidgets;
 TCHAR szItemName[100];
};
</pre>
<p>
<code>ITEMPROPSHEETPAGE</code> is a
custom structure that appends our bonus
data (an integer and a string) to the standard
<code>PROPSHEETPAGE</code>.
This is the structure that our property sheet page will use.
</p>
<pre>
INT_PTR CALLBACK DlgProc(HWND hwnd, UINT uiMsg, WPARAM wParam, LPARAM lParam)
{
 switch (uiMsg) {
 case WM_INITDIALOG:
  {
   ITEMPROPSHEETPAGE *ppsp =
      reinterpret_cast&lt;ITEMPROPSHEETPAGE*&gt;(lParam));
   SetDlgItemText(hwnd, 100, ppsp-&gt;szItemName);
   SetDlgItemInt(hwnd, 101, ppsp-&gt;cWidgets, FALSE);
  }
  return TRUE;
 }
 return FALSE;
}
</pre>
<p>
The <code>lParam</code> passed to <code>WM_INITDIALOG</code>
is a pointer to the shell-managed copy of the <code>PROPSHEETPAGE</code>
structure.
Since we associated this dialog procedure with a
<code>ITEMPROPSHEETPAGE</code> structure,
we can cast it to the larger structure to get at our bonus data
(which the shell happily <code>memcpy</code>'d from our copy
into the shell-managed copy).
</p>
<pre>
HPROPSHEETPAGE CreateItemPropertySheetPage(
    int cWidgets, PCTSTR pszItemName)
{
 ITEMPROPSHEETPAGE psp;
 ZeroMemory(&amp;psp, sizeof(psp));
 psp.dwSize = sizeof(psp);
 psp.hInstance = g_hinst;
 psp.pszTemplate = MAKEINTRESOURCE(1);
 psp.pfnDlgProc = DlgProc;
 psp.cWidgets = cWidgets;
 lstrcpyn(psp.szItemName, pszItemName, 100);
 return CreatePropertySheetPage(&amp;psp);
}
</pre>
<p>
It is here that we associate the <code>DlgProc</code>
with the <code>ITEMPROPSHEETPAGE</code>.
Just to highlight that the pointer passed to the <code>DlgProc</code>
is a copy of the <code>ITEMPROPSHEETPAGE</code> used to create
the property sheet page, I created a separate function to create
the property sheet page, so that the <code>ITEMPROPSHEETPAGE</code>
on the stack goes out of scope,
making it clear that the copy passed to the <code>DlgProc</code>
is not the one we passed to <code>CreatePropertySheetPage</code>.
</p>
<p>
Note that you must set the <code>dwSize</code> of the
base <code>PROPSHEETPAGE</code>
to the size of the
<code>PROPSHEETPAGE</code> <i>plus</i> the size of your bonus data.
In other words, set it to the size of your <code>ITEMPROPSHEETPAGE</code>.
</p>
<pre>
int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst,
                   LPSTR lpCmdLine, int nCmdShow)
{
 g_hinst = hinst;
 HPROPSHEETPAGE hpage =
   CreateItemPropertySheetPage(42, TEXT("Elmo"));
 if (hpage) {
  PROPSHEETHEADER psh = { 0 };
  psh.dwSize = sizeof(psh);
  psh.dwFlags = PSH_DEFAULT;
  psh.hInstance = hinst;
  psh.pszCaption = TEXT("Item Properties");
  psh.nPages = 1;
  psh.phpage = &amp;hpage;
  PropertySheet(&amp;psh);
 }
 return 0;
}
</pre>
<p>
Here is where we display the property sheet.
It looks just like any other code that displays a property sheet.
All the magic happens in the way we created
the <code>HPROPSHEETPAGE</code>.
</p>
<p>
If you prefer to use the
<code>PSH_PROPSHEETPAGE</code> flag, then the above code could have
been written like this:
</p>
<pre>
int WINAPI WinMain(HINSTANCE hInst, HINSTANCE hPrevInst,
                   LPSTR lpCmdLine, int nCmdShow)
{
 ITEMPROPSHEETPAGE psp;
 ZeroMemory(&amp;psp, sizeof(psp));
 psp.dwSize = sizeof(psp);
 psp.hInstance = g_hinst;
 psp.pszTemplate = MAKEINTRESOURCE(1);
 psp.pfnDlgProc = DlgProc;
 psp.cWidgets = cWidgets;
 lstrcpyn(psp.szItemName, pszItemName, 100);

 PROPSHEETHEADER psh = { 0 };
 psh.dwSize = sizeof(psh);
 psh.dwFlags = PSH_PROPSHEETPAGE;
 psh.hInstance = hinst;
 psh.pszCaption = TEXT("Item Properties");
 psh.nPages = 1;
 psh.ppsp = &amp;psp;
 PropertySheet(&amp;psh);
 return 0;
}
</pre>
<p>
If you want to create a property sheet with more than one page,
then you would pass an array of <code>ITEMPROPSHEETPAGE</code>s.
Note that passing an array requires all the pages in the array
to use the same custom structure (because that's how arrays work;
all the elements of an array are the same type).
</p>
<p>
Finally, here's the dialog template.
Pretty anticlimactic.
</p>
<pre>
1 DIALOG 0, 0, PROP_SM_CXDLG, PROP_SM_CYDLG
STYLE WS_CAPTION | WS_SYSMENU
CAPTION "General"
FONT 8, "MS Shell Dlg"
BEGIN
    LTEXT "Name:",-1,7,11,42,14
    LTEXT "",100,56,11,164,14
    LTEXT "Widgets:",-1,7,38,42,14
    LTEXT "",101,56,38,164,14
END
</pre>
<p>
And there you have it.
Tacking custom data onto the end of a <code>PROPSHEETPAGE</code>,
an alternative to
trying to cram everything into a single <code>lParam</code>.
</p>
<p>
<b>Exercise</b>:
Observe that the size of the <code>PROPSHEETPAGE</code> structure
has changed over time.
For example, the original <code>PROPSHEETPAGE</code> ends at the
<code>pcRefParent</code>.
In Windows&nbsp;2000, there are two more fields,
the <code>pszHeaderTitle</code> and <code>pszHeaderSubTitle</code>.
Windows&nbsp;XP added yet another field, the <code>hActCtx</code>.
Consider a program written for Windows&nbsp;95 that uses this
technique.
How does the shell know that the <code>cWidgets</code> is really
bonus data and not a <code>pszHeaderTitle</code>?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-902123">
				<div id="div-comment-902123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niels</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902123">
			March 18, 2011 at 7:15 am</a>		</div>

		<p>From the documentation for pszHeaderTitle: &quot;If dwFlags does not include the PSP_USEHEADERTITLE value, this member is ignored.&quot;</p>
<p>What I&#39;m guessing is that the system doesn&#39;t even attempt to access the fields if the appropriate flags aren&#39;t set, and an application built against an old version of the struct won&#39;t have those flags set.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902133">
				<div id="div-comment-902133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niels</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902133">
			March 18, 2011 at 7:17 am</a>		</div>

		<p>As an aside, does this trick work for all structs that have a dwSize, cbSize or similar member? Or should we assume that the size field is generally used for struct versioning?</p>
<div class="post">[<i><a href="http://blogs.msdn.com/b/oldnewthing/archive/2003/12/12/56061.aspx" rel="nofollow">The trick does not work in general</a>. The property sheet manager gets away with it because it uses a different method for version checking. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902143">
				<div id="div-comment-902143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902143">
			March 18, 2011 at 7:20 am</a>		</div>

		<p>So, same as OVERLAPPED, really, except it&#39;s being copied around and not remaining at the same address. Are there other commonly-used structures that enable the same technique? It seems very useful to be able to provide extra data with everything, although it does remind me of the .net Tag property which I never ever use.</p>
<p>To answer your exercise: Id guess there&#39;s a flag specifying if pszHeaderTitle, pszHeaderSubTitle, and hActCtx are being used, possibly in the dwFlags you mentioned.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902153">
				<div id="div-comment-902153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902153">
			March 18, 2011 at 7:22 am</a>		</div>

		<p>Niels: I always assumed that the size would determine which fields would be accessed by the OS. &nbsp;And in fact this seems to be the underlying assumption of Raymond&#39;s Exercise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902163">
				<div id="div-comment-902163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902163">
			March 18, 2011 at 7:23 am</a>		</div>

		<p>@configurator I use Tag all the time, usually to link UI items with the underlying code objects they represent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902173">
				<div id="div-comment-902173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902173">
			March 18, 2011 at 7:30 am</a>		</div>

		<p>I can&#39;t believe my eyes. Raymond recommends using a kludge that potentially breaks future compatibility, and depends generally on internal implementation and non-guaranteed behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902183">
				<div id="div-comment-902183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902183">
			March 18, 2011 at 7:39 am</a>		</div>

		<p>+1 Alex. &nbsp;Not only is this undocumented (as far as I can tell), the PROPSHEETPAGE documentation even says that you can&#39;t do this: &quot;Size, in bytes, of this structure. The property sheet manager uses this member to determine which version of the PROPSHEETHEADER structure you are using.&quot; &nbsp;(Assuming that PROPSHEETHEADER was intended to read PROPSHEETPAGE; it makes no sense at all as it is.)</p>
<div class="post">[<i>Clearly a documentation error (bad copy/paste from PROPSHEETHEADER). The correct text is in <a href="http://msdn.microsoft.com/en-us/library/aa815151(VS.85).aspx" rel="nofollow">this version of PROPSHEETPAGE</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902193">
				<div id="div-comment-902193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902193">
			March 18, 2011 at 7:48 am</a>		</div>

		<p>@Alex, couldn&#39;t agree more. The documentation for lstrcpyn even says to use StringCchCopy instead of it, which I know I&#39;ve seen Raymond use before. Are we sure that Raymond hasn&#39;t secretly been replaced by an imposter?</p>
<div class="post">[<i>Dude, calm down. It&#39;s just a sample. Using StringCchCopy would have made the sample bigger and distracted from the point. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902213">
				<div id="div-comment-902213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Typical Microsoft Dev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902213">
			March 18, 2011 at 8:21 am</a>		</div>

		<p>&quot;Consider a program written for Windows 95 that uses this technique. How does the shell know that the cWidgets is really bonus data and not a pszHeaderTitle?&quot;</p>
<p>Because it&#39;s using the &quot;MS Shell&quot; Font and not Tahoma?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902233">
				<div id="div-comment-902233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Absotively</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902233">
			March 18, 2011 at 8:34 am</a>		</div>

		<p>The first search result for PROPSHEETPAGE is <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/aa815151%28VS.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/aa815151%28VS.85%29.aspx</a> for some reason. &nbsp;It says dwSize is &quot;Size, in bytes, of the PROPSHEETPAGE structure. The size includes any extra application-defined data at the end of the structure.&quot; &nbsp;But it also links to the main PROPSHEETPAGE documentation quoted by laonianren. &nbsp;Perhaps the main documentation is a victim of careless copying and pasting from the documentation for PROPSHEETHEADER?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902243">
				<div id="div-comment-902243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902243">
			March 18, 2011 at 10:00 am</a>		</div>

		<p>Your reasoning for why the trick doesn&#39;t work in general makes perfect sense &#8211; it can cause bugs. So why enable it in this case? Was there a distinct advantage that doesn&#39;t exist elsewhere? Or perhaps just because it already existed this way and is now needed for compatibility?</p>
<div class="post">[<i>There was already a different version-detection algorithm in place (flags) so the size was no longer meaningful for version detection. Remember, this stuff was designed back in the days when saving 4KB of memory was a huge deal. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902253">
				<div id="div-comment-902253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902253">
			March 18, 2011 at 10:06 am</a>		</div>

		<p>COMCTL32 uses a different method of versioning, you have to request which behaviour/version you want, using InitCommonControls.</p>
<p>That&#39;s how it knows whether that extra data is yours, or whether it is pszHeaderTitle, not the size.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902273">
				<div id="div-comment-902273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dllver</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902273">
			March 18, 2011 at 11:06 am</a>		</div>

		<p>Some Shell functions (methods) also reads the calling assembly&#39;s DLLVERSIONINFO and exposes different behaviour depending on what the caller happens to be compiled with.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-902283">
				<div id="div-comment-902283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902283">
			March 18, 2011 at 11:15 am</a>		</div>

		<p>Could be through the size of the header:</p>
<p>&nbsp;PROPSHEETHEADER psh = { 0 };</p>
<p>&nbsp;psh.dwSize = sizeof(psh);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-902303">
				<div id="div-comment-902303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110318-00/?p=11183#comment-902303">
			March 18, 2011 at 3:02 pm</a>		</div>

		<p>So I guess TRWTF is that there are two descriptions of PROPSHEETPAGE in the MSDN library, that contradict each other. And the one that seems more legitimate is wrong.</p>
<div class="post">[<i>My theory is that when I originally reported the error in PROPSHEETPAGE to the documentation team, they fixed only one of the copies of PROPSHEETPAGE. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

