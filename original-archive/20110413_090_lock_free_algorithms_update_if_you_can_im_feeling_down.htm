<html>
<head>
<title>Lock-free algorithms: Update if you can I'm feeling down</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Lock-free algorithms: Update if you can I&#8217;m feeling down</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 13, 2011 / year-entry #91</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was looking for advice on this synchronization problem: We have a small amount of data that we need to share among multiple processes. One way to protect the data is to use a spin lock. However, that has potential for deadlock if the process which holds the spinlock doesn't get a chance to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was looking for advice on this synchronization problem:
</p>
<blockquote CLASS=q>
<p>
We have a small amount of data that we need to share among
multiple processes.
One way to protect the data is to use a spin lock.
However, that has potential for deadlock if the process
which holds the spinlock doesn't get a chance to release it.
For example, it might be suspended in the debugger,
or somebody might decide to use <code>Terminate&shy;Process</code>
to nuke it.
</p>
<p>
Any suggestions on how we can share this data without exposure to
these types of horrible failure modes?
I'm thinking of something like a reader takes the lock,
fetches the values, and then checks at status at the end of
tell if the data is valid.
Meanwhile, a writer tries to take the lock with a timeout,
and if the timeout fires, then the writer just goes ahead
anyway and updates the values, and somehow sets the status
on the reader so it knows that the value is no good and it
should try again.
Basically, I don't want either the reader or writer to get
stuck indefinitely if a developer, say, just happens to break
into the debugger at the worst possible time.
</p>
</blockquote>
<p>
This can be solved with a publishing pattern.
When you want to update the values,
you indicate that new values are ready by publishing their new location.
</p>
<p>
Let's say that the data that needs to be shared is a collection
of four integers.
</p>
<pre>
struct SHAREDDATA {
 int a, b, c, d;
};
</pre>
<p>
Assume that there is
a practical limit on how often the value can change;
this is usually a safe assumption because you'll have some
sort of external rate limiter, like "This value changes
in response to a user action."
(Even if there is no such limit, most solutions will simply
posit one.
For example, the
<a HREF="http://msdn.microsoft.com/en-us/library/ms684121.aspx">
<code>SLIST</code> functions</a>
simply assume that a processor won't get locked out more
than 65535 times in a row.)
In our case, let's say that the value will not change more than
64 times in rapid succession.
</p>
<pre>
#define SHAREDDATA_MAXCONCURRENT 64

SHAREDDATA g_rgsd[SHAREDDATA_MAXCONCURRENT];
UINT g_isd; // current valid value

void GetSharedData(__out SHAREDDATA *psd)
{
 *psd = g_rgsd[g_isd];
}
</pre>
<p>
Reading the data simply retrieves the most recently
published value.
The hard part is publishing the value.
</p>
<p>
Actually, it's not hard at all.
</p>
<pre>
LONG g_isdNext = 1;

void UpdateSharedData(__in const SHAREDDATA *psd)
{
 UINT isd = (UINT)InterlockedIncrementAcquire(&amp;g_isdNext);
 isd %= SHAREDDATA_MAXCONCURRENT;
 g_rgsd[isd] = *psd;
 InterlockedExchange(&amp;g_isdNext, isd);
 
}
</pre>
<p>
Publishing the data is a simple matter of obtaining a slot
for the data, using <code>Interlocked&shy;Increment</code> to
get a unique location to store the data,
or at least least unique until
<code>SHAREDDATA_<wbr>MAXCONCURRENT - 1</wbr></code> intervening
publications have occurred.
We store our results into the memory we obtained
and then publish the new index.
The publication needs to be done with release semantics,
but since there is no
<code>Interlocked&shy;Exchange&shy;Release</code>,
we just do a full barrier exchange.
</p>
<p>
Note that the update is not atomic with the read.
A processor can call <code>Get&shy;Shared&shy;Data</code>,
revise the values, then publish them,
only to find that it overwrite a publication from
another processor.
If the new values are dependent on the old values
(for example, if they are a running total),
then you just lost an update.
</p>
<p>
Note also that if two threads try to update at the same
time, it's pretty much random which set of values you get
since it's <i>last writer wins</i>.
</p>
<p>
It so happens that in this particular case,
the new values had nothing to do with the old values,
so there was no problem with lost updates.
And in practice, only one process updated the values at a time.
(There is a master controller who updates the values, and everybody
else just reads them.)
Therefore, this simple method meets the requirements.
</p>
<p>
<b>Exercise</b>:
How would you adapt this solution if the new values depended on the
old values?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-907183">
				<div id="div-comment-907183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907183">
			April 13, 2011 at 7:17 am</a>		</div>

		<p>If the new values depend on the old values, you just have to check to make sure that the version that was current when you read the data is still the current version when you publish your data. If it&#39;s not, start over.</p>
<p>I believe that this is the situation that InterlockedCompareExchange was designed for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907213">
				<div id="div-comment-907213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907213">
			April 13, 2011 at 7:20 am</a>		</div>

		<p>Doesn&#39;t GetSharedData need some sort of memory barrier or something to ensure it doesn&#39;t keep reading cached values of g_isd? Or is this somehow different than the Erratum from the singleton constructor article?</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/06/10150261.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10150261.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907223">
				<div id="div-comment-907223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907223">
			April 13, 2011 at 7:32 am</a>		</div>

		<p>If the new values depended on the old values, use the try/commit/try again pattern. &nbsp;However, the code needs to be modified so that the computation of the next datum occurs inside UpdateSharedData so that the data appears in the correct order in the array. &nbsp;Something like this should work:</p>
<p>void UpdateSharedData(SHAREDDATA (*ComputeNextDatum)())</p>
<p>{</p>
<p>&nbsp; &nbsp;UINT orig_isd, isd;</p>
<p>&nbsp; &nbsp;do</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;orig_isd = (UINT)g_isdNext; &nbsp;// or Raymond&#39;s InterlockedReadAcquire from yesterday</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;isd = (orig_isd + 1) % SHAREDDATA_MAXCONCURRENT;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;g_rgsd[isd] = ComputeNextDatum();</p>
<p>&nbsp; &nbsp;} while(InterlockedCompareExchange(&amp;g_isdNext, isd, orig_isd) != orig_isd);</p>
<p>}</p>
<p>This assumes that the computation of the next datum is relatively fast compared to the frequency that multiple writers will try to call UpdateShareData. &nbsp;If you have high contention, you&#39;ll waste a lot of time looping and recomputing here, in which case it&#39;s better just to use a lock and only have each call do one computation instead of potentially many.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907243">
				<div id="div-comment-907243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Groosalugg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907243">
			April 13, 2011 at 7:42 am</a>		</div>

		<p>I like to use a seqlock with a read-only shared memory section for that kind of lock-free writer-&gt;reader publishing.</p>
<p>Especially if I&#39;m designing the writer and someone else is designing the reader &#8211; There&#39;s no way for them to mess up my process by crashing or freezing at an inopportune time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907253">
				<div id="div-comment-907253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907253">
			April 13, 2011 at 7:46 am</a>		</div>

		<p>Shouldn&#39;t &quot;InterlockedExchange(&amp;g_isdNext, isd);&quot; be &quot;InterlockedExchange(&amp;g_isd, isd);&quot; ?</p>
<div class="post">[<i>Yes. Last-minute editing strikes again. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907303">
				<div id="div-comment-907303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907303">
			April 13, 2011 at 8:56 am</a>		</div>

		<p>Alex: There are plenty of scenarios where these requirements are valid. I&#39;ll give a mostly-write case and a mostly-read case.</p>
<p>Assume you have a multi-process web server (like how Apache works). You want to have a single file to log accesses and want to buffer the log file writes, but you don&#39;t want a separate log buffer for each process because that could make the log file entries wildly out of order. The solution is to have a single shared buffer that every child process writes to. The controlling process will kill a child process every Nth request or after consuming too much CPU, so the child process can get terminated at any time &#8212; and of course a process might need to be debugged. Doing either of these common tasks should not deadlock your web server.</p>
<p>Another example is a web browser. You have multiple browser processes running different tabs in your browser, and they all need to share session cookies and site credentials. An easy way to do that is with shared memory. Since I kill and debug browser processes every day, I would really hate it if doing either of those everyday things locked up my browser!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907313">
				<div id="div-comment-907313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907313">
			April 13, 2011 at 9:43 am</a>		</div>

		<p>It seems like this issue, where any code that acquires a lock can fail or be terminated before releasing it, could happen all the time. (Presumably, when you&#39;re debugging, you don&#39;t want locks that the debugged code is holding to be ignored or forcibly released.)</p>
<p>Therefore, obtaining locks is a bad idea. &nbsp;</p>
<p>Obviously that&#39;s not true, so I suppose all code that acquires and releases a lock just needs to be robust and well-debugged. Or am I missing something?</p>
<div class="post">[<i>Is your lock shared across processes? Robustness requirements for cross-process locks tend to be higher than for locks within a process. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907333">
				<div id="div-comment-907333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Muller</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907333">
			April 13, 2011 at 10:03 am</a>		</div>

		<p>@Gabe: for the multi-process server, wouldn&#39;t it be easy enough to tack a time code onto each log entry, so the logs can be trivially merged in-order? (unless the events occur too close together that they share a time interval)</p>
<p>In the last-writer-wins scenario, couldn&#39;t some really bad stuff happen if the write are preformed in different orders? you might get half of one update, and half of another, you would have to ensure that the write always occur in the same sequence.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907343">
				<div id="div-comment-907343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907343">
			April 13, 2011 at 10:18 am</a>		</div>

		<p>@Gabe:</p>
<p>Please read about FILE_APPEND_DATA and how it solves a problem of multiple writers to a file, even overseparate handles.</p>
<p>Also, if your processes simply share a non-overlapped handle to the log file, WriteFile operations will be serialized even with GENERIC_WRITE.</p>
<p>Regarding the browser. Frigging IE8/9 solves this very wrong way. After a crash it simply loses all saved credentials. Handy, isn&#39;t it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907363">
				<div id="div-comment-907363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907363">
			April 13, 2011 at 2:12 pm</a>		</div>

		<p>David: Yes, obtaining locks is a bad idea. :) Of course there are times when it is unavoidable and you just have to make sure you&#39;re careful then (hold locks for the least amount of time necessary, always acquire locks in the same order, and so on). Also, most locks are not shared across processes so this isn&#39;t very common. In one situation where I was sharing semaphores across processes, terminating one of them was catastrophic. In another situation I was sharing a mutex and terminating one of the processes was fine.</p>
<p>@John: Would you want to have to post-process a 10GB web server access log before you could make sense of it? I wouldn&#39;t. Also, log files generally have granularity of 1 second but can have thousands of requests per second so order really does matter. When you use a last-writer-wins algorithm, you probably want to have your writes always be atomic to avoid seeing partial writes.</p>
<p>@Alex: You&#39;re suggesting calling WriteFile for each log entry. I specifically said &quot;&#8230;buffer the log file writes&#8230;&quot; to preclude your suggestion. Why on Earth would you want to buffer writes to the log file? For the same reason you&#39;d want to buffer writes to any file: you&#39;re doing thousands of writes per second and you want to spend your CPU and disk resources serving up web pages and not handling bookkeeping for the log file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907373">
				<div id="div-comment-907373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907373">
			April 13, 2011 at 2:22 pm</a>		</div>

		<p>@Gabe:</p>
<p>Remember that the disk files are opened by default in buffered mode. And if your bottleneck is in writing the logs, you&#39;re doing it wrong. Anyway, it depends what logging guarantees you want. If you want to guarantee that the record was logged, even if the issuing process died immediately aafter that, you may not want any intermediate buffering, just a WriteFile per record. If you&#39;re OK with occasional record loss on process termination, buffer a rew records and then issue WriteFile for a number of whole records only.</p>
<p>&quot;In another situation I was sharing a mutex and terminating one of the processes was fine.&quot; If you think it was fine, you didn&#39;t really need the mutex. If you really needed the mutex, it was not really fine. In either case, you&#39;re mistaken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907383">
				<div id="div-comment-907383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907383">
			April 13, 2011 at 3:26 pm</a>		</div>

		<p>In your example code how does g_isd used by GetSharedData() get updated? From what I can see it will always be &#39;1&#39;? As Pierre said above, shouldn&#39;t the final InterlockedExchange update g_isd not g_isdNext?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907283">
				<div id="div-comment-907283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907283">
			April 13, 2011 at 8:27 am</a>		</div>

		<p>Ugh, the problem description is as vague as it could be, and the approach was wrong as it could be.</p>
<p>I assume the customers used a shared memory section, since they&#39;re talking about multiple processes. Of course, they should not even have considered a spinlock. Only a mutex will work reliably.</p>
<p>TerminateProcess or debugger is not a real life scenario and there should not even be a requirement for robustness against that. This is not a continuable failure. In case of TerminateProcess, other processes need to take note of STATUS_WAIT_ABANDONED and bail out also. A complete restart of the package or other appropriate recovery should be performed. In case of non-mission-critical application, other components should just go along, but NOT TOUCH the shared data, as it can be inconsistent.</p>
<p>They could also fashion a handmade shareable equivalent of CRITICAL_SECTION. But it would be harder (although still possible) to detect an abandoned wait.</p>
<p>The problem description doesn&#39;t say what&#39;s the usage case. Is it &quot;write seldom, read often&quot;? Does it require consistent view in all clients? Does it allow one client to work on stale state? If not, then publishing won&#39;t work. How many clients can write (one or all), now many clients can read (one or all). These are all factors that affect the choice of a solution.</p>
<p>A simple and quite robust solution can be done with a multicast of WM_COPYDATA, if the requirements can be met with its constraints.</p>
<p>Obligatory rant: new help in VS2010 and latest SDK *sucks*. I want index back.</p>
<div class="post">[<i>If your application encounters an unhandled exception, the kernel will TerminateProcess it. Are you saying that unhandled exceptions are not a real life scenario? And it looks like you&#39;re saying that the rule for WAIT_ABANDONED is that the person who gets a WAIT_ABANDONED should mark the shared data as corrupted so that nobody will use it, and the only way to get it working again is to reboot your server. Some people might want a system with a better error recovery model than &quot;reboot the server.&quot; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907393">
				<div id="div-comment-907393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907393">
			April 13, 2011 at 3:44 pm</a>		</div>

		<p>I had this to implement this into a bigger real life application which was a an database administration app with multiple databases scattered all over internet, of course all of them in the same VPN. Problem was to not disrupt the databases work while upgrading the structure inside and also not to disrupt already connected applications to those applications when a new version of application was released into the wild. So my real app was actually the exercise Ray gave it, since my previous n-1 version was holding the scripts to upgrade to version n (of the software or/and the app, both could be upgraded in the same new version). My implementation was to write a watchdog which on timeout would trigger a rollback.</p>
<p>And for the case of one upgrade happening very close to the next &#8211; a customer will have a older version of the app that will upgrade a fresh installed database (which is the oldest in version terms since the installer is installing version 1.0) and let&#39;s say a developer will connect to the same database with the latest version &#8211; well for this case I relied on the database atomicity of the sessions &#8211; big thanks to the developers of PostgreSQL for it.</p>
<p>The entire solution is in continue update, new versions are coming each 2 weeks on regular bases and is happening for over a year now, so I think I solved your exercise Ray.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907413">
				<div id="div-comment-907413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907413">
			April 14, 2011 at 12:03 am</a>		</div>

		<p>Alex: On my computer it takes 20 times more CPU cycles to write a file one line (80 bytes) at a time as compared to 64k at a time. My educated guess is that the system call overhead is eating up all those cycles. That also explains why protecting the buffer with a mutex (adding one Wait and one Release system call per line logged) makes it several times slower than using a lock-free buffer (but still about 25% faster than the version that calls WriteFile for each log line).</p>
<p>My application with a shared mutex was protecting an I/O device. If a process is terminated while using the device, it ceases to be using it, thus freeing up the mutex (and thus the device) for any of the still-running processes to use it. If I didn&#39;t use a mutex, multiple processes could try to use the device simultaneously, causing disastrous results. Still, if you think you&#39;re smarter than me, I&#39;d love to know how I&#39;m mistaken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907423">
				<div id="div-comment-907423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907423">
			April 14, 2011 at 3:23 am</a>		</div>

		<p>So in the case of single writer, multiple readers, how many SHAREDDATA structures should you expect to need? I was thinking maybe you only need two but maybe that&#39;s a bit optimistic.</p>
<div class="post">[<i>It depends. How frequent are the updates to the SHAREDDATA? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907453">
				<div id="div-comment-907453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907453">
			April 14, 2011 at 8:44 am</a>		</div>

		<p>Did anyone else notice the musical echo from the title of the post?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-907493">
				<div id="div-comment-907493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907493">
			April 14, 2011 at 11:39 am</a>		</div>

		<p>When I was younger, so much younger than today,</p>
<p>I&#39;ve never needed anybody&#39;s help in any way&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-907823">
				<div id="div-comment-907823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110413-00/?p=10943#comment-907823">
			April 16, 2011 at 12:48 pm</a>		</div>

		<p>&quot;For example, the SLIST functions simply assume that a processor won&#39;t get locked out more than 65535 times in a row.&quot;</p>
<p>Is that actually documented anywhere? I&#39;m not finding anything on MSDN or Google.</p>
<p>What happens if a processor *does* get locked out more than 65535 times in a row? Potential corruption of the list structures?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

