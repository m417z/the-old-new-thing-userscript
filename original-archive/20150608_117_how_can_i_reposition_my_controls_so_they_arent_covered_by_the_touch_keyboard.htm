<html>
<head>
<title>How can I reposition my controls so they aren't covered by the touch keyboard?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I reposition my controls so they aren&#8217;t covered by the touch keyboard?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 8, 2015 / year-entry #118</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last week, we saw how to tell the Windows 8 touch keyboard to appear automatically in a desktop program when focus enters an edit control. But we did nothing to prevent the touch keyboard from covering the edit control. To find out when the touch keyboard appears and disappears, you register with the framework input...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/06/01/10618435.aspx">
Last week, we saw how to tell the Windows 8 touch keyboard to appear
automatically in a desktop program when focus enters an edit control</a>.
But we did nothing to prevent the touch keyboard from covering
the edit control.
</p>
<p>
To find out when the touch keyboard appears and disappears, you
register with the framework input pane.
The framework input pane tells you the current location of the
keyboard and informs you when the keyboard state changes.
(Note that it does not tell you about the keyboard when it is in
floating mode, on the theory that when the user floats the keyboard,
the user has taken responsibility for making sure it doesn't cover
anything interesting.)
</p>
<p>
Take our program from last week and make these changes:
</p>
<pre>
<font COLOR=blue>#include &lt;strsafe.h&gt;</font>

using namespace Microsoft::WRL;

<font COLOR=blue>// Add immediately before DoLayout

ComPtr&lt;IFrameworkInputPane&gt; g_frameworkInputPane;
DWORD g_cookie;
RECT g_rcKeyboard;</font>
</pre>
<p>
In a real program, of course, we wouldn't use global variables,
but this is a Little Program.
</p>
<pre>
<font COLOR=blue>void Relayout(HWND hwnd,
  bool isKeyboardShowing = false);

class Handler : public RuntimeClass&lt;
  RuntimeClassFlags&lt;RuntimeClassType::ClassicCom&gt;,
  IFrameworkInputPaneHandler&gt;
{
public:
  Handler(HWND hwnd) : m_hwnd(hwnd) { }

  STDMETHODIMP Hiding(BOOL fEnsureFocusedElementInView) override
  {
    SetRectEmpty(&amp;g_rcKeyboard);
    Relayout(m_hwnd);
    return S_OK;
  }

  STDMETHODIMP Showing(RECT *prcScreenLocation,
      BOOL fEnsureFocusedElementInView) override
  {
    g_rcKeyboard = *prcScreenLocation;
    Relayout(m_hwnd, true);
    return S_OK;
  }
private:
  HWND m_hwnd;
};</font>
</pre>
<p>
Our <code>Handler</code> class implements the
<code>IFramework&shy;Input&shy;Pane&shy;Handler</code> interface
so it can be called when the input pane shows and hides.
When this happens, we update the keyboard rectangle and ask our
window to update its layout in response to the new information.
We pass a special flag that indicates whether the call is in response
to the keyboard showing, because we want to do extra work in that case.</p>
<pre>
void
DoLayout(HWND hwnd, int cx, int cy, bool isKeyboardShowing = false)
{
  <font COLOR=blue>// Just for fun, put the keyboard position in the title bar.
  if (IsRectEmpty(&amp;g_rcKeyboard)) {
    SetWindowText(hwnd, TEXT("Keyboard is not visible"));
  } else {
    TCHAR message[256];
    StringCchPrintf(message, ARRAYSIZE(message),
      TEXT("Keyboard is at (%d,%d)-(%d,%d)"),
      g_rcKeyboard.left, g_rcKeyboard.top,
      g_rcKeyboard.right, g_rcKeyboard.bottom);
    SetWindowText(hwnd, message);
  }</font>

  if (g_hwndChild) {
    <font COLOR=blue>int cyEdit = cy;
    if (!IsRectEmpty(&amp;g_rcKeyboard)) {
      RECT rcEdit = { 0, 0, cx - 100, cy };
      RECT rcKeyboardClient = g_rcKeyboard;
      MapWindowRect(nullptr, hwnd, &amp;rcKeyboardClient);
      RECT rc;
      if (IntersectRect(&amp;rc, &amp;rcEdit, &amp;rcKeyboardClient)) {
        cyEdit = min(rcKeyboardClient.top, cy);
      }
    }</font>
    MoveWindow(g_hwndChild, 0, 0, cx - 100, cyEdit, TRUE);
    <font COLOR=blue>if (isKeyboardShowing) {
      SendMessage(g_hwndChild, EM_SCROLLCARET, 0, 0);
    }</font>
  }
  if (g_hwndButton) {
    MoveWindow(g_hwndButton, cx - 100, 0, 100, 50, TRUE);
  }
}
</pre>
<p>
First, we update the title bar to show where we think the keyboard is,
just so it's easier to follow what's happening.
And then the actual action:
If the keyboard is visible and it overlaps the edit control,
then we resize the edit control to avoid it.
And if the keyboard is showing, then we scroll the edit control so
that the caret is visible.
We don't want to force the caret visible in the general case,
because that would cause the contents to scroll at unexpected times.
</p>
<pre>
<font COLOR=blue>void
OnMove(HWND hwnd, int x, int y)
{
  Relayout(hwnd);
}</font>
</pre>
<p>
When the window moves, we want to perform relayout,
because the window may have moved in such a way that the
edit control is obscured by the keyboard.
</p>
<pre>
<font COLOR=blue>void
Relayout(HWND hwnd, bool isKeyboardShowing);
{
  RECT rc;
  GetClientRect(hwnd, &rc);
  DoLayout(hwnd, rc.right, rc.bottom, isKeyboardShowing);
}</font>
</pre>
<p>This function is kind of anticlimactic.
To perform relayout, we get the client rectangle and ask
<code>DoLayout</code> to lay out the contents inside that
rectangle.
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  ...
  EnableTouchKeyboardFocusTracking();</font>

  <font COLOR=blue>CoCreateInstance(__uuidof(FrameworkInputPane), nullptr,
    CLSCTX_INPROC_SERVER, IID_PPV_ARGS(&amp;g_frameworkInputPane));
  g_frameworkInputPane-&gt;AdviseWithHWND(hwnd,
    Make&lt;Handler&gt;(hwnd).Get(),
    &g_cookie);</font>

  return TRUE;
}
</pre>
<p>
Here is how the ball gets set into motion:
When we create the window,
we also register our handler with the framework input pane,
so that we are called back when the keyboard moves.
</p>
<pre>
void
OnDestroy(HWND hwnd)
{
  <font COLOR=blue>if (g_cookie) {
    g_frameworkInputPane->Unadvise(g_cookie);
  }
  g_frameworkInputPane = nullptr;</font>
  PostQuitMessage(0);
}
</pre>
<p>
And some bookkeeping: When the window is destroyed,
we unregister from the framework input pane.
We also need to release the framework input pane
<a HREF="http://blogs.msdn.com/LarryOsterman/archive/2004/04/22/118240.aspx">
before COM get uninitialized</a>.
(This wouldn't have been necessary if we had put the framework
input pane in a member variable, since the member variable would
be destructed at window destruction.
But we were lazy and used a global variable, and now we pay the price.)
</p>
<p>
If you take this program out for a ride,
you'll see that it manages to resize the edit control so that
it is not covered by the touch keyboard.
But there's still a problem:
What if the window is near the bottom of the screen,
and the user calls up the touch keyboard?
The entire edit control ends up obscured!
No amount of resizing will fix this.
We'll look at this problem next time.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1242546">
				<div id="div-comment-1242546" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431#comment-1242546">
			June 8, 2015 at 7:12 am</a>		</div>

		<p>MSDN does not say anything about 0 being a invalid cookie value. Is &quot;if (g_cookie)&quot; really safe? What if the cookie is just an array index in Win vNext?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1242526">
				<div id="div-comment-1242526" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431#comment-1242526">
			June 8, 2015 at 8:58 am</a>		</div>

		<p>MSDN on IConnectionPoint::Advise says about pdwCookie:</p>
<p>If the connection was not successfully established, this value is zero.</p>
<p>So yes, 0 is not a valid cookie value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1242516">
				<div id="div-comment-1242516" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431#comment-1242516">
			June 8, 2015 at 3:06 pm</a>		</div>

		<p>@Andre, IFrameworkInputPane does not inherit from IConnectionPoint, they&#39;re totally unrelated. &nbsp;So, there&#39;s no point in your argument, you can have 0 cookie.</p>
<div class="post">[<em>It&#39;s a general rule for the Advise pattern, in the same way that returning S_FALSE from Next is a general rule for the IEnumXxx pattern. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1242496">
				<div id="div-comment-1242496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431#comment-1242496">
			June 8, 2015 at 10:54 pm</a>		</div>

		<p>The COM interface is nice, but isn&#39;t there a Win32 plain &quot;C&quot; API?</p>
<p>If so, could you please point me into the right direction?</p>
<p>Thanks!</p>
<div class="post">[<em>From C, call <code>CoCreateInstance</code>, and then use the <code>lpVtbl</code>, e.g. <code>g_frameworkInputPane-&gt;lpVtbl-&gt;AdviseWithHWND(g_frameworkInputPane, hwnd, handler, &amp;g_cookie);</code>. You can build the handler out of a vtable also. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1242466">
				<div id="div-comment-1242466" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431#comment-1242466">
			June 9, 2015 at 7:34 am</a>		</div>

		<p>This looks like cross-process COM so probably not.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1242366">
				<div id="div-comment-1242366" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431#comment-1242366">
			June 9, 2015 at 6:02 pm</a>		</div>

		<p>Is there actually a set of documents for how to do COM in C or is it just tribal knowledge? I never find myself wanting any COM API where C++ is in use, but only .NET or some degenerate C context where no stdlibs are available.</p>
<div class="post">[<em>You just do manually what C++ does natively. It&#39;s like asking for documents on how to write a <code>for</code> loop in assembly. Um, you just do in assembly what the C compiler does natively. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1242356">
				<div id="div-comment-1242356" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431#comment-1242356">
			June 9, 2015 at 6:28 pm</a>		</div>

		<p>I think you missed the point. C++ ABI does not normally work across compilers but suddenly does when its a COM class. There&#39;s no C++ ABI document. Yet somehow COM spans Compiler vendors. This was arranged to happen somehow. &quot;Do what the compiler does&quot; is asking for a non-true assumption that has held so far but suddenly won&#39;t in Windows next.</p>
<div class="post">[<em>I described the vtable layout <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/05/68017.aspx">earlier</a>. You can also see this layout if you look at the header file spit out by MIDL. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1241766">
				<div id="div-comment-1241766" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150608-00/?p=45431#comment-1241766">
			June 13, 2015 at 3:35 am</a>		</div>

		<p>I had the misfortune to use a PC that had been preinstalled to work with a gamepad rather than the mouse and keyboard that I had attached to it. Not only did it keep on opening the OSK over whichever control it was that I wanted to click next, but it wouldn&#39;t let me permanently dismiss it (at least, not without discovering the option buried in the Control Panel, or via the correct solution, which was to reinstall Windows from scratch as I didn&#39;t want that installation anyway).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

