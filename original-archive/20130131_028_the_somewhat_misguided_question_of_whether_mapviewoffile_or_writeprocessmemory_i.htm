<html>
<head>
<title>The somewhat misguided question of whether MapViewOfFile or WriteProcessMemory is faster</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The somewhat misguided question of whether MapViewOfFile or WriteProcessMemory is faster</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 31, 2013 / year-entry #29</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer asked, "Which is faster for copying data from one process to another; Map­View­Of­File or Write­Process­Memory?" This is one of those "Huh?"-type questions, where the customer has solved half of a problem and is looking for help with the other half, the half that makes no sense. First of all, the question is malformed...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer asked, "Which is faster for copying data from one process to another; <code>Map&shy;View&shy;Of&shy;File</code> or <code>Write&shy;Process&shy;Memory</code>?"</p>
<p> This is one of those "Huh?"-type questions, where the customer has solved half of a problem and is looking for help with the other half, the half that makes no sense. </p>
<p> First of all, the question is malformed because <code>Map&shy;View&shy;Of&shy;File</code> does not copy any data at all. It takes existing data and maps it into a process. No copy takes place; both processes are seeing the same memory block, and <a href="http://blogs.msdn.com/b/oldnewthing/archive/2003/10/07/55194.aspx"> if the memory is modified via one mapping, the change will be visible in other mappings</a>. </p>
<p> It's like asking "Which company has better wireless telephone coverage: FedEx or Sprint?" </p>
<p> Okay, so maybe the question is really "Which is a faster way of transferring data between two processes?" (In the same way the FedEx/Sprint question might really be asking "Which company has a larger service area for me to communicate with my customers?") </p>
<p> But before you choose one or the other based on performance, you need to make the decision be appropriate from a correctness standpoint. </p>
<p> "We want to transfer some data from a client process to a server process. We found that mapping the shared memory causes more virtual memory to be consumed by the server, which is already constrained by the large number of components loaded into the server process. We were hoping we could switch to <code>Write&shy;Process&shy;Memory</code>, assuming the performance characteristics are acceptable." </p>
<p> Okay, now you sort of go "Whoa." </p>
<p> The <code>Write&shy;Process&shy;Memory</code> function requires <code>PROCESS_<wbr>VM_<wbr>WRITE</wbr></wbr></code> permission on the target process. That permission allows you to write to <i>any byte in the process</i>. If you allow a client process full write access to the complete memory space of a server, then the server is pwned! </p>
<p> It doesn't matter how much faster (if any) <code>Write&shy;Process&shy;Memory</code> is compared to <code>Map&shy;View&shy;Of&shy;File</code>, because you can't use it if you want to maintain any shred of security. </p>
<p> "I don't want my packages to get wet, so I taped the key to the front door with instructions to the FedEx delivery person to put the package in the living room." </p>
<p> That key is not a key to the living room. That is a key to <i>the entire house</i>. </p>
<p> If you want to reduce the amount of address space consumed by a <code>Map&shy;View&shy;Of&shy;File</code>, you can pass a nonzero value for <code>dwNumber&shy;Of&shy;Byte&shy;To&shy;Map</code> and map a sliding window into the data rather than mapping it all at once. </p>
<p> And then looking at the question again, it's not clear that the <code>Write&shy;Process&shy;Memory</code> function will help in the first place: If the problem is address space exhaustion, then switching to <code>Write&shy;Process&shy;Memory</code> won't change your address space profile: The memory written by <code>Write&shy;Process&shy;Memory</code> must all be committed in the target process. Whereas <code>Map&shy;View&shy;Of&shy;File</code> lets the server control how much address space is consumed by the view, the <code>Write&shy;Process&shy;Memory</code> function requires it all to be committed up front. </p>
<p> We never did hear back from the customer, so it's not clear whether they understood that their question was confused and misguided, or whether they were just frustrated with us for "not answering their question." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1036283">
				<div id="div-comment-1036283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036283">
			January 31, 2013 at 7:53 am</a>		</div>

		<p>Using WriteProcessMemory will certainly help with their memory usage. This way, the client can just poke the appropriate data values directly into the server&#39;s data structures. This will be much faster than the hack of using a file as a proxy, and use less memory because it won&#39;t have to load or parse it.</p>
<p>Cleaner, faster, smaller&#8230; I cannot see any downsides to this technique!</p>
<p>(Yes, this is a joke)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1036293">
				<div id="div-comment-1036293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036293">
			January 31, 2013 at 8:17 am</a>		</div>

		<p>Hmmm. If loopback TCP/IP proves not fast enough, I&#39;d be using WriteProcessMemory the other way around. The privileged server will call the API (and ReadProcessMemory) targeting the unprivileged client (the control channel would still use TCP/IP). If you have to worry about the server attacking the client then you have bigger problems. I tend to not bother to make my services work without admin privileges (besides the fact they&#39;re often given working directories by the customer that only admin has write access to) so anybody who can exploit that already has the machine.</p>
<p>Address space exhaustion sucks. /3GB to the rescue sometimes. amd64 to the rescue more frequently.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036323">
				<div id="div-comment-1036323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036323">
			January 31, 2013 at 8:35 am</a>		</div>

		<p>Or maybe client doesn&#39;t mean what you think, and refers to architecture alone, not to where it runs or how (un)privileged it is. In that case the customer may have thought â€˜these people don&#39;t know what they&#39;re talking aboutâ€™ and went on to seek help elsewhere. (They&#39;d be wrong, but they would have no way of knowing.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1" id="comment-1036333">
				<div id="div-comment-1036333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036333">
			January 31, 2013 at 9:26 am</a>		</div>

		<p>I&#39;m amazed by the fact that I replied to an identical question on StackOverflow&#8230; <a rel="nofollow" target="_new" href="http://stackoverflow.com/q/7127242/214671" rel="nofollow">stackoverflow.com/&#8230;/214671</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036343">
				<div id="div-comment-1036343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036343">
			January 31, 2013 at 10:37 am</a>		</div>

		<p>@Joshua: named pipes are also worth considering if you&#39;re only doing message-based local communication (although they also work remotely, they have some quirks and security implications that mean you&#39;re probably not better off than with TCP/IP). Locally they&#39;re faster than TCP/IP and they free you from having to write a message layer over shared memory yourself.</p>
<p>If you are going the shared memory route, there is still no excuse for using ReadProcessMemory()/WriteProcessMemory() as opposed to CreateFileMapping()/MapViewOfFile(). WriteProcessMemory() has no restrictions whatsoever &#8212; even if you don&#39;t care about the security, a simple bug could hose the receiving party in unforeseen and unboundedly subtle ways. At least a file mapping allows you to have a well-defined interface (well, more or less).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1036353">
				<div id="div-comment-1036353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036353">
			January 31, 2013 at 11:18 am</a>		</div>

		<blockquote><p>
  I tend to not bother to make my services work without admin privileges
</p></blockquote>
<p>o_O</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036363">
				<div id="div-comment-1036363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036363">
			January 31, 2013 at 11:33 am</a>		</div>

		<p>@JM &quot;Locally they&#39;re faster than TCP/IP&quot;</p>
<p>They both run equally fast on the same machine. Connecting to localhost doesn&#39;t put packets on the network donchaknow. &#8230;</p>
<p>I think something that is worth mentioning is that shared memory is a BAD choice for IPC unless you REALLY know what you&#39;re doing. You have to be really careful about Time-of-check Time-of-use bugs since when you&#39;re reading the memory in the server there&#39;s nothing to stop a malicious program on the other side writing to that data. You have to manually buffer the content to avoid these TOCTOU bugs.</p>
<p>If you use a named pipe or a socket, the bytes you&#39;ve read in aren&#39;t subject to those race-conditions, and whilst you&#39;re waiting on the pipe or the socket the guy on the other side gets a short scheduler boost, so using those makes your programs more reliable AND faster; and you don&#39;t need to allocate funky memory sections which consume lots of Virtual Memory in your process to do it :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1036373">
				<div id="div-comment-1036373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036373">
			January 31, 2013 at 12:24 pm</a>		</div>

		<p>@Matt: last time I measured it, pipes were faster. Obviously local TCP/IP doesn&#39;t go over the network, but the overhead characteristics still differ from pipes. Of course, benchmarks always lie, nor do I remember what version of Windows I tested it on &#8212; probably Server 2008. Disregarding speed, named pipes don&#39;t take up ports.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036383">
				<div id="div-comment-1036383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">L.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036383">
			January 31, 2013 at 12:55 pm</a>		</div>

		<p>@JM @Matt:</p>
<p>Moreover, pipes have an ACL. &nbsp;TCP/IP on localhost does not, an attacker could race the client for connecting to the server.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1036393">
				<div id="div-comment-1036393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sirin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036393">
			January 31, 2013 at 1:22 pm</a>		</div>

		<p>There is also always the possibility to use RFC 1149 to share data. Although not faster and overkill for sharing it on a &nbsp;single computer</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036403">
				<div id="div-comment-1036403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MeaCulpa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036403">
			January 31, 2013 at 1:39 pm</a>		</div>

		<p>@sirin: you are evil! I was curious about the mention of RFC 1149 (not one I have committed to memory, so I looked it up. Humph!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1036413">
				<div id="div-comment-1036413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036413">
			January 31, 2013 at 1:59 pm</a>		</div>

		<p>@L. If your server is running as SYSTEM and does bad things when the wrong client connects in, you&#39;re probably Doing It Wrong(TM).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036443">
				<div id="div-comment-1036443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036443">
			January 31, 2013 at 4:01 pm</a>		</div>

		<p>Additionally, using WriteProcessMemory in a production application is ill-advised because anti-virus programs&#39; heuristics will often assume that your application is malware. &nbsp;After all, the two primary users of WriteProcessMemory are debuggers and malware, and debuggers are uncommon in the wild.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1036453">
				<div id="div-comment-1036453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036453">
			February 1, 2013 at 2:41 am</a>		</div>

		<p>@Matteo Do you suppose the age of that question correlates with Raymond&#39;s queue length?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036463">
				<div id="div-comment-1036463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bombsoft_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bombsoft@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036463">
			February 1, 2013 at 2:56 am</a>		</div>

		<p>I&#39;m upset now.</p>
<p>I knew what RFC 1149 was. I need to get out more.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1" id="comment-1036473">
				<div id="div-comment-1036473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036473">
			February 1, 2013 at 6:15 am</a>		</div>

		<p>@Neil: honestly? At first I thought that it may have been the same guy, but I&#39;ve actually seen several times people asking about ReadProcessMemory as IPC, so probably it&#39;s just a common misunderstanding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1036543">
				<div id="div-comment-1036543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036543">
			February 1, 2013 at 8:14 am</a>		</div>

		<p>@Matteo, Raymond has mentioned previously that his queue for blog posts is about 18 months. So it does seem about the correct timeframe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1036793">
				<div id="div-comment-1036793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036793">
			February 1, 2013 at 12:05 pm</a>		</div>

		<p>@Ken Hagan: Let&#39;s say that you want to spawn a child process of your same .exe and only want to give it one of your handles. &nbsp;One solution, though not the best, is to spawn a copy of yourself with CREATE_SUSPENDED but no handle inheritance, DuplicateHandle the handle into the target process, then WriteProcessMemory the new handle&#39;s value into a global variable within the .exe before resuming the new process. &nbsp;This works, but is extremely hacky.</p>
<p>Another non-development use is cheating in games. =)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036863">
				<div id="div-comment-1036863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036863">
			February 1, 2013 at 6:12 pm</a>		</div>

		<blockquote><p>
  I tend to not bother to make my services work without admin privileges
</p></blockquote>
<p>Please tell me you&#39;re not involved with writing any software I may buy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1036783">
				<div id="div-comment-1036783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036783">
			February 1, 2013 at 11:45 am</a>		</div>

		<p>@Myria: Nicely put! In fact, *are* there non-development uses for WriteProcessMemory? I can&#39;t think of any.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036983">
				<div id="div-comment-1036983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036983">
			February 2, 2013 at 7:14 am</a>		</div>

		<p>Let&#39;s assume that security is not a concern. The client is already in the &quot;inner ring&quot; and trusted. The problem is still valid. Which way is the fastest to copy data from the client to the server? One real-life example would be data analysis done by No Such Agency that receives from spy satellites images (or live video feed) and each satellite is focusing on it&#39;s perimeter. To achieve a good analysis for an entire given region (let&#39;s say Taliban mountains) you would need that each client to fast upload it&#39;s data to the server whom will then start the algorithm that will spit out the response to the question &quot;Do they have an increased activity in the north or the south?&quot; received from White House war room. As you can see in the above illustrated example the clients can do whatever they like, including but not limited to directly inject data into server process. So, in this case, what is the fastest way do achieve it?</p>
<div class="post">[<em>Okay, well if you&#39;re uploading data, then that&#39;s your bottleneck, not the performance of intra-computer data transfer. And if you read the question, you&#39;ll see that the customer already knew which one was faster. They just wanted to know whether WriteProcessMemory was fast enough for their needs. And there&#39;s only one way to know for sure: Measure it and see if it&#39;s fast enough for your needs. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1037003">
				<div id="div-comment-1037003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1037003">
			February 2, 2013 at 10:43 am</a>		</div>

		<p>@Danny: I think the No Such Agency streaming Taliban hideouts to the Whitehouse is definitely not a case where &quot;security is not a concern&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1036943">
				<div id="div-comment-1036943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas Rejbrand</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1036943">
			February 2, 2013 at 3:02 am</a>		</div>

		<p>I really dislike when people don&#39;t know when to use (and, in this case, when *not* to use) semicolon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1037013">
				<div id="div-comment-1037013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1037013">
			February 3, 2013 at 9:37 am</a>		</div>

		<p>@Matt</p>
<p>The agency will respond to a question received from white house in my scenario, not streaming data to it. Read again my scenario</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-1037023">
				<div id="div-comment-1037023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130131-00/?p=5393#comment-1037023">
			February 3, 2013 at 12:37 pm</a>		</div>

		<p>So, the agency didn&#39;t find Bin Laden for 10+ years due to race conditions in their memory sharing code?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

