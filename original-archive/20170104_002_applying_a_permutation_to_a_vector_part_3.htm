<html>
<head>
<title>Applying a permutation to a vector, part 3</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Applying a permutation to a vector, part 3</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 4, 2017 / year-entry #3</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170104-00/?p=95115</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Permuting more than just vectors.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We spent the last two days looking at the
<code>apply_permutation</code> function
and arguing pros and cons of various implementation
choices.
Today's we're going to look at generalization.
</p>
<p>
One of the things you are taught in mathematics is that
after you've proved something, you should try to
strengthen the conclusion and weaken the hypotheses.
Can we apply that principle here?
</p>
<p>
I don't see much that can be done to strengthen
the conclusion, but I see a way to weak the
hypotheses:
The inputs don't actually have to be vectors.
Anything that supports random access will do.
So let's use a random access iterator.
</p>
<p>
And the indices don't have to be integers.
Anything that can be used to index the random
access iterator will do.
So let's not require to to be an integer;
we'll take whatever it is.
</p>
<pre>
template&lt;typename Iter1, typename Iter2&gt;
void
apply_permutation(
    Iter1 first,
    Iter1 last,
    Iter2 indices)
{
 using T = std::iterator_traits&lt;Iter1&gt;::value_type;
 using Diff = std::iterator_traits&lt;Iter2&gt;::value_type;
 Diff length = last - first;
 for (Diff i = 0; i &lt; length; i++) {
  Diff current = i;
  if (i != indices[current]) {
   T t{std::move(first[i])};
   while (i != indices[current]) {
    Diff next = indices[current];
    first[current] = std::move(first[next]);
    indices[current] = current;
    current = next;
   }
   first[current] = std::move(t);
   indices[current] = current;
  }
 }
}
</pre>
<p>
Note that we used <code>std::iterator_traits</code>
to determine the appropriate types for the indices and the
underlying type.
This is significant when the iterator returns a proxy type
(such as the infamous <code>vector&lt;bool&gt;</code>).
</p>
<p>
Another observation is that the <code>indices</code>
don't have to be in the range [0, <var>N</var> &minus; 1];
as long as we can map the values into that range.
But we don't need to generalize that, because that
can already be generalized in another way:
By creating a custom iterator whose <code>*</code> operator
returns a proxy object that does the conversion.
</p>
<p>
Okay, I think I've run out of things to write about this
<code>apply_permutation</code> function.
But we'll use it later.
</p>
<p>
<b>Exercise</b>:
Write an <code>apply_inverse_permutation</code> which
applies the inverse of the specified permutation:
Instead of each element of the <code>indices</code>
telling you where the item comes from,
it specifies where the item <i>goes to</i>.
In other words, if <code>v</code> is a copy of the
original vector and <code>v2</code> is a copy of the
result vector,
then <code>v2[indices[i]] = v[i]</code>.
</p>
<hr>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-dodheim even thread-even depth-1" id="comment-1279255">
				<div id="div-comment-1279255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ildjarn' rel='external nofollow' class='url'>ildjarn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170104-00/?p=95115#comment-1279255">
			January 4, 2017 at 10:20 am</a>		</div>

		<p>Your alias declarations are missing `typename`.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1279405">
				<div id="div-comment-1279405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170104-00/?p=95115#comment-1279405">
			January 6, 2017 at 1:02 pm</a>		</div>

		<p>iterator_traits has a difference_type, which is what a type alias &#8220;Diff&#8221; clearly intends.  If you really meant to use the value_type corresponding to Iter2, as the code actually does, you need a better name for the type alias.  (and I see no reason that locals i and current should be signed, so I agree that difference_type is not actually wanted, just the name is bad)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1279655">
				<div id="div-comment-1279655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hauke Heibel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170104-00/?p=95115#comment-1279655">
			January 12, 2017 at 2:06 am</a>		</div>

		<p>I did not look it up in the standard, but according to what is described here (<a href="https://goo.gl/PZCSYq" rel="nofollow">https://goo.gl/PZCSYq</a>) for the RandomAccessIterator concept, &#8216;current&#8217;, &#8216;next&#8217; and &#8216;i&#8217; should be &#8216;difference_type&#8217;. On a 64bit build, I actually get a warnings when using 32 bit integer indices.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

