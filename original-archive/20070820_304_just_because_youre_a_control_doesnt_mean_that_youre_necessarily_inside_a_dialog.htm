<html>
<head>
<title>Just because you're a control doesn't mean that you're necessarily inside a dialog box</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Just because you&#8217;re a control doesn&#8217;t mean that you&#8217;re necessarily inside a dialog box</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 20, 2007 / year-entry #305</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Prerequisites: Moderate to advanced understanding of the window and dialog managers. When you're implementing a control, you need to be aware that you aren't necessarily being hosted inside a dialog box. One commenter suggested handling WM_KEYDOWN and closing the dialog box as a way to prevent multi-line edit controls from eating the Enter key. But...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><i>Prerequisites: Moderate to advanced understanding of the window and dialog managers.</i></p>
<p> When you're implementing a control, you need to be aware that you aren't necessarily being hosted inside a dialog box. <a href="http://blogs.msdn.com/oldnewthing/archive/2006/10/12/819674.aspx#822041%0A"> One commenter suggested handling <code>WM_KEYDOWN</code> and closing the dialog box</a> as a way to prevent multi-line edit controls from eating the Enter key. But the edit control can't do that because people create edit controls outside of dialog boxes. How do you "close the dialog box" when there isn't one? </p>
<p> This leads to a related topic brought up by another comment: </p>
<blockquote class="q"><p> <a href="http://blogs.msdn.com/oldnewthing/archive/2006/10/12/819674.aspx#819885"> Doesn't <code>ES_WANTRETURN</code> do exactly this?</a> The MSDN states the following (emphasis mine): "ES_WANTRETURN: Specifies that a carriage return be inserted when the user presses the ENTER key while entering text into a multiple-line edit control in a dialog box. Without this style, <b>pressing the ENTER key has the same effect as pressing the dialog box's default pushbutton</b>. This style has no effect on a single-line edit control." </p>
</blockquote>
<p> I remarked that <code>ES_WANTRETURN</code> is a messy subject. Now I'm going to show you the mess. It's sort of like visiting your friend's house when they're not expecting you and wandering into their bedroom where they haven't tidied up and there's clothes all over the floor. </p>
<p> The authors of the edit control back in 1981 didn't follow the above guidance. Probably&sup1; because back in the days when the edit control was first written, the window manager was still in a state of flux and its design hadn't settled down. You can't blame the edit control for not following guidance that didn't exist. </p>
<p> The edit control implements <code>ES_WANTRETURN</code> as you might expect: It include <code>DLGC_WANTALLKEYS</code> in its response to <code>WM_GETDLCODE</code>, which causes all keys, including Enter, to go to the edit control. </p>
<p> What's more interesting is how the edit control implemented the absence of <code>ES_WANTRETURN</code>: It still includes <code>DLGC_WANTALLKEYS</code>, but when it receives the Enter key, it first attempts to detect whether it's inside a dialog box, and if so, it tries to mimic what the dialog box would have done: It asks its parent dialog box for the default ID, sets focus to the corresponding control, and <a href="http://blogs.msdn.com/oldnewthing/archive/2005/05/30/423202.aspx"> simulates input via <code>PostMessage</code></a> to make that control act as if the user had pressed Enter. Since only button controls can be the default ID, the edit control "knows" that the recipient of the simulated input is the button control. The author of the edit control then went in and modified the button control so that it didn't rely on virtualized input state when handling the <code>WM_KEYDOWN</code> message. </p>
<p> This is ugly no matter how you slice it, and it violates so many principles of control design it isn't funny. For one thing, the way it detects whether the control it hosted inside a dialog is fragile and can be tricked into guessing wrong. Next, its mimcry of the <code>IsDialogMessage</code> function is incorrect. When it wants to invoke the default button, it does so by simulating input, which we already know is wrong. And before it does so, it sets focus to the control, which is also wrong; the <code>IsDialogMessage</code> function generates a <code>WM_COMMAND</code> message <i>without changing focus</i>. And finally, it totally misses the boat if the edit control is inside a nested dialog. </p>
<p> As I noted, all these mistakes are obvious in retrospect, but when the control was first written, these mistakes might not&sup1; even have been mistakes. (For example, nested dialogs didn't appear on the scene until Windows&nbsp;95.) Why haven't these mistakes been fixed? Well, how can you prove that there aren't any programs that rely on the mistakes? One thing you quickly learn in application compatibility is that a bug once shipped gains the status of a feature, because you can be pretty sure that some program somewhere relies on it. (I've seen a plugin that relies on a memory leak in Explorer, for example.) This goes doubly true for core controls like the edit control. Any change to the edit control must be taken with a great deal of trepidation, because your change affects pretty much every single Windows program on the entire planet. With that high a degree of risk, the prudent choice is often to let sleeping dogs lie. </p>
<p> <b>Nitpicker's Corner</b> </p>
<p> &sup1;Note weasel words. This is my educated guess as to what happened based on personal observation and thought. It is not a <a href="http://blogs.msdn.com/oldnewthing/archive/2007/08/10/4315707.aspx#4327521"> statement of the official position of Microsoft Corporation</a>, and this guess may ultimately prove incorrect. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-539243">
				<div id="div-comment-539243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539243">
			August 20, 2007 at 10:41 am</a>		</div>

		<p>&gt;I&#8217;ve seen a plugin that relies on a memory leak in Explorer, for example</p>
<p>How?</p>
<p>Not to demand anything, but that&#8217;s quite a feat that should be enshrined somewhere.</p>
<div class="post">[<i>And indeed it is. In my book. Appendix A. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539333">
				<div id="div-comment-539333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bahbar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539333">
			August 20, 2007 at 12:12 pm</a>		</div>

		<p>[And indeed it is. In my book. Appendix A. -Raymond]</p>
<p>Hehe, it made my day to see a leak discussion end with a plug (I know, my pun is quite artificial).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-539403">
				<div id="div-comment-539403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539403">
			August 20, 2007 at 2:24 pm</a>		</div>

		<p>You note that the edit control has behaviour related to the way it was implemented in 1981.</p>
<p>I wonder whether the WPF edit control has been implemented fresh and will address the issues that you raised?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539433">
				<div id="div-comment-539433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">musicmusic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539433">
			August 20, 2007 at 4:30 pm</a>		</div>

		<p>Common controls 6 may have been a good time to fix it since it was opt-in.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-539453">
				<div id="div-comment-539453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BOFH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539453">
			August 20, 2007 at 4:57 pm</a>		</div>

		<p>In the installationprogram of Win3.1 there was a stage where you could manually edit system.ini, win.ini, or was it even both, via a multi-line edit control.</p>
<p>If you hit enter inside this control, it would send the enter key to the OK button and the installation would unexpectedly continue.</p>
<p>Too bad if you wanted to add lines to the INI-file.</p>
<p>The solution was to press control-enter, which would insert a newline into the control, and not trigger the OK button.</p>
<p>Later, in Win95, I used the same method in other programs, where I wanted to add newlines inside a multi-line edit control in some window, where I could see the OK button had a heavy frame around it, so it would catch the enter key if it got pressed while that window had focus.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xepol odd alt thread-odd thread-alt depth-1" id="comment-539573">
				<div id="div-comment-539573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Xepol' rel='external nofollow' class='url'>Xepol</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539573">
			August 21, 2007 at 12:30 am</a>		</div>

		<p>Code that relies on bugs deserves to be broken.</p>
<p>Period.</p>
<p>Depend on a memory leak? &nbsp;When you REQUIRE another app to malfunction for your app to work right, you just KNOW you are asking to get shut down, and frankly, you also know you deserve it.</p>
<p>If you had no clue, you accept that you screwed up and fix it asap.</p>
<p>Sadly, most people just whine that it is someone else&#8217;s fault.</p>
<p>I could seriously stand to see a few breaking changes for the better, so long as it is clearly documented. &nbsp;Vista has a lot of problems and some of them are mind-numbling stupid (try tab and shift-tabing through a file selection dialog one day, the path is not symetrical), but others make good sense.</p>
<p>Depend on weak security? &nbsp;Too bad, so sad. &nbsp;You want to run on my machine? &nbsp;Fix your app, you probably didn&#8217;t need that editor to format my hd anyways. At least now I get a warning.</p>
<p>You want to install drivers on my machine? &nbsp;Signing doesn&#8217;t seem that odious a problem to me, as long as I can do something really stupid like load them anyways if I really want to (and have to work at it).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rosyna even thread-even depth-1" id="comment-539603">
				<div id="div-comment-539603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rosyna</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539603">
			August 21, 2007 at 3:01 am</a>		</div>

		<p>Has this behaviour changed to be more sane for 64-bit versions of windows running 64-bit bit apps (where there is no backwards compatibility story)?</p>
<div class="post">[<i>I don&#8217;t understand why people claim that 64-bit Windows has no backward compatibility requirement. How many people would port their code to 64-bit if if the 32-bit APIs and 64-bit APIs behaved differently? Suppose I had to write every sample program twice, once for 32-bit and again for 64-bit? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539503">
				<div id="div-comment-539503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539503">
			August 20, 2007 at 9:03 pm</a>		</div>

		<p>So, just for reference: the &quot;right&quot; way to do this would be to make WM_GETDLGCODE report that it didn&#8217;t want ENTER, thereby letting the parent dialog procedure capture and process it?</p>
<p>I&#8217;m a little curious why it wasn&#8217;t done that way, since that seems a *lot* easier. &nbsp;Still, I guess that answer is lost in the mists of time&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-539633">
				<div id="div-comment-539633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539633">
			August 21, 2007 at 5:48 am</a>		</div>

		<p>So, you write a lot of sample programs that rely on historically enshrined bugs, then?</p>
<p>Surely 64-bit Windows has compatibility requirements, but I can&#8217;t agree with the apparent Microsoft position that these requirements are absolute, and that all bugs are to be enshrined for posterity, in case anyone relies on them. It makes sense for Microsoft, since you avoid pissing off existing customers, but at the price of making life more difficult for every future developer (while the mistakes of past developers are covered by the infinite goodwill checks Microsoft will cash). I&#8217;m sure it makes good business sense, because if there&#8217;s one thing you can&#8217;t accuse Microsoft of it&#8217;s having bad business sense, but let&#8217;s just say I&#8217;m glad I&#8217;m not a Microsoft developer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539673">
				<div id="div-comment-539673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539673">
			August 21, 2007 at 8:33 am</a>		</div>

		<p>Xepol, I agree in part, but sometimes people make mistakes and you end up with programs that only happen to work because of a bug (or undocumented feature), not on purpose but because it worked and was never detected.</p>
<p>Years later that program may no longer be maintained. The source could even be lost. If it&#8217;s a popular/important program then it makes sense for MS to do what they have to do (within reason) to keep it working.</p>
<p>With programs that are still being updated it obviously makes sense to try to contact the vendor and get them to fix it in their next update. I would hope most vendors would want to do so, if they still supported that product. Even then, though, MS have to worry about people who may have the old version and not update, and then blame the new version of Windows when it suddenly starts to crash.</p>
<p>Regarding 64-bit Windows, anyone who has looked at it will quickly realise that MS have gone out of their way to allow people to re-compile code as 64-bit with the minimum amount of changes. In my opinion they went too far but maybe there are good reasons behind it that I&#8217;m not aware of. Either way, there hasn&#8217;t been a break from backwards compatibility with 64-bit. Probably just as well since if a program compiles and seems to run then people may not check every single codepath for bugs.</p>
<p>(An example is how you don&#8217;t even have to change &quot;System32&quot; to &quot;System64&quot; when you recompile your code, which shouldn&#8217;t have had either string hardcoded in the first place. This which results in a confusing and (IMO) messy system of virtual/substituted folders with strange names. The 64-bit binaries are in a folder whose name ends in &quot;32&quot; while the 32-bit binaries are in a folder whose name ends in &quot;64&quot;, which is backwards, and your process will see different things depending on whether it is 32-bit or 64-bit.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-539703">
				<div id="div-comment-539703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539703">
			August 21, 2007 at 9:27 am</a>		</div>

		<p>1981??? Really? &nbsp;Don&#8217;t you mean 91?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539843">
				<div id="div-comment-539843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539843">
			August 21, 2007 at 11:19 am</a>		</div>

		<p>Xepol: &quot;Code that relies on bugs deserves to be broken.</p>
<p>Period.&quot;</p>
<p>You&#8217;re right, but as Raymond and others have said many times, if you replace your operating system (let&#8217;s say Windows 98) with Windows XP, or XP with Windows Vista, or install a Microsoft patch, and your programs STOP WORKING, who are you going to blame? &nbsp;</p>
<p>You&#8217;ll blame Microsoft, and the new operating system will not get very many sales, and will get a bad reputation for breaking applications that worked &quot;fine&quot; under the old operating system. &nbsp;(You, as the customer, won&#8217;t know that the program that worked &quot;fine&quot; was relying on bad behavior that is now fixed.)</p>
<p>Bugs that are depended on by programs gain the status of features&#8230; as someone once said.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-539913">
				<div id="div-comment-539913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539913">
			August 21, 2007 at 11:47 am</a>		</div>

		<p>Thank you, thank you, thank you. &nbsp;I have long been asked why I refuse to touch Windows for any development purpose, and you have eloquently encapsulated the entire reason within a single example. &nbsp;Bravo, and my appreciation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539683">
				<div id="div-comment-539683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539683">
			August 21, 2007 at 9:05 am</a>		</div>

		<p>Leo &#8212; you&#8217;ll also see weird things in the registry, of course. &nbsp;HKEY_LOCAL_MACHINESoftware is no longer there for a 32-bit process; it&#8217;s now at SoftwareWow6432Node (whose name makes a *lot* more sense than SysWOW64).</p>
<p>But here&#8217;s the (IMO dumb) part of that: you&#8217;ll *also* see weird things if you try to connect to the registry of a 64-bit Server 2003 box from a (remote) 32-bit Server 2003 box. &nbsp;You&#8217;ll see the 32-bit registry under Software, and you&#8217;ll have no way to get at the 64-bit parts.</p>
<p>This does *not* happen if you connect from 32-bit XP, or (obviously 32-bit) 2000 Pro; from those OSes, you get the &quot;correct&quot; Software key, as you&#8217;d see it on the local machine with 64-bit regedit. &nbsp;It only happens from 32-bit Server 2003.</p>
<p>This has bugged me ever since I first saw it, but I never bothered to look up why it happened. &nbsp;I assume the 64-bit 2k3 is looking at the SMB/CIFS session from the 32-bit 2k3, realizing that it&#8217;s 2k3, then finding out its register-size (somehow), then changing its behavior accordingly. &nbsp;Why it doesn&#8217;t do this with XP or 2000 is a mystery, though; if it was a back-compat thing, it should do it with all OSes (especially ones that can only run 32-bit).</p>
<p>But I haven&#8217;t done a lot of searching either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rosyna even thread-even depth-1" id="comment-539863">
				<div id="div-comment-539863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rosyna</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539863">
			August 21, 2007 at 11:37 am</a>		</div>

		<p>My point was that these apps that depend on the bug have to be recompiled anyways and not every API that existed in 32-bit still exists in 64-bit, does it?</p>
<p>Transitioning is a great time to fix up APIs, remove ugly hacks, and change stuff to remove the potential for ugly hacks in the future.</p>
<p>If they&#8217;ve recompiled on 64-bit that means a few things:</p>
<p>1. They have the source code.</p>
<p>2. They&#8217;re going to have to modify other stuff anyways (like the &quot;banned&quot; functions).</p>
<p>3. If they weren&#8217;t following the documentation and a hack was added to windows to work around their usage, this is the perfect time to force them to actually follow the documentation.</p>
<p>Since all 3 of those means they&#8217;re *actively* working on the code base, they can fix it to be proper as soon as the problem is discovered.</p>
<p>The same thing applies when you actually write an app specific hack in windows. Version it to that specific version of the app that relies on the bug. (or you can base it on the version of the DLL they say they link to) Remove the hack if the version becomes newer. Because that means the developer had to touch the code and update stuff, so it is the most perfect time to make them fall in line.</p>
<p>If people are allowed to write crap code without being punished, they&#8217;ll continue to write crap code.</p>
<p>I don&#8217;t see how keeping around buggy code from 1981 is in any way, shape, or form a good thing. Does this mean Microsoft never removes app specific hacks or that they always leave in &quot;backwards compatibility cruft&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-539943">
				<div id="div-comment-539943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jens.ayton.se/blag/' rel='external nofollow' class='url'>Ahruman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-539943">
			August 21, 2007 at 11:57 am</a>		</div>

		<p>A different perspective on what Rosyna is saying:</p>
<p>When Windows 95 came along, Microsoft made a huge, arguably heroic effort to maintain bugwards-compatibility with every application ever released. For instance, there is the famous story of how Windows 95 recognized Sim City and used a memory manager implementation that allowed writes to recently-freed memory to avoid destabilising it. The point of this, of course, was that using old software with the new system would be stable, so people wouldn’t say “Windows 95 is unstable –&#160;it crashes every time I run Sim City, which worked fine in Windows 3.11”.</p>
<p>However, the situation with the 64-bit transition is different. In this case, software must be recompiled and a new version released to be using the 64-bit API. Therefore, when an application crashes, it is *the new version of the app* that is seen as unstable. People will latch on to the last thing they changed, and attribute differences in behaviour to it.</p>
<p>Over in Mac OS X land, this sort of break was made at the x86 transition, and can be expected at the 64-bit transition in Leopard. Additionally, smaller versions happen with each OS release: if an application is linked against the Mac OS X 10.3 SDK, buggy behaviours from 10.3 and earlier are retained, but if it is linked against the 10.4 SDK, fixed behaviours are used. This means all existing software retains the old behaviours, but new apps benefit from less crufty API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-540603">
				<div id="div-comment-540603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-540603">
			August 22, 2007 at 3:20 am</a>		</div>

		<p>@Ahruman: It also means new apps can&#8217;t run on older versions of OS X . &nbsp;That drives me nuts &#8212; I use Panther and can&#8217;t run half the simplest apps out there. &nbsp;The main reason I&#8217;m on Panther is because everyone stopped supporting Jaguar.</p>
<p>Situations like this really make you appreciate the lengths Microsoft goes to as a user. &nbsp;As a developer, I can certainly appreciate breaking changes to fix bugs, but I&#8217;ve yet to see anyone come up with a versioning scheme that actually works in the real world. &nbsp;(Look at what happened when Microsoft tried to fix that with .NET.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-540693">
				<div id="div-comment-540693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Philo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-540693">
			August 22, 2007 at 9:03 am</a>		</div>

		<p>[disclaimer &#8211; I work for Microsoft]</p>
<p>Some perspective &#8211; first of all, I&#8217;ve recently started playing Total Annihilation (the best RTS ever written) again, even though all the documentation is about installing on Windows 98. I&#8217;m sure there are backwards compatibility tweaks that enable it to run &#8211; without those, I&#8217;d have to just throw the CD&#8217;s away, because the company (and the source code) are long gone. </p>
<p>On the flip side, I use <font color="red">Company Q XYZ</font> for work. I bought <font color="red">XYZ</font> 2 in May of this year, even with the warning that it wouldn&#8217;t run on Vista, because the chatter at the time was that <font color="red">XYZ</font> 2 would be patched to run on Vista.</p>
<p>Now <font color="red">Company Q</font> has released <font color="red">XYZ</font> 3, which runs on Vista, and I&#8217;m betting no patch is forthcoming. <font color="red">Company Q</font> wants me to upgrade for $300, which is insane. </p>
<p>Before I started reading Raymond&#8217;s blog, I may have grumbled about Microsoft breaking backwards compatibility. But after appreciating his perspective, I blame <font color="red">Company Q</font> for being caught by surprise by an OS that was in late beta for eight months and the biggest buzz on the planet. </p>
<p>But I&#8217;m sure that most folks who installed Vista and found <font color="red">XYZ</font> 2 didn&#8217;t work blamed Microsoft. And there are plenty of comments all over the &#8216;net to the effect of &#8220;Vista has compatibility issues, don&#8217;t upgrade&#8221;</p>
<p>That&#8217;s what happens when you break backwards compatibility. Not &#8220;oh, silly third party program coder should fix is product&#8221;, but the standard &#8220;blame Microsoft&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-540723">
				<div id="div-comment-540723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jens.ayton.se/blag/' rel='external nofollow' class='url'>Ahruman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-540723">
			August 22, 2007 at 9:57 am</a>		</div>

		<p>@Random Reader: actually, that’s a different issue. It’s entirely possible to build code for OS X 10.3, or 10.2, or 10.1 on an OS X 10.4 system. The same will be possible from Leopard, too. However, to do so requires the developer to avoid using new functionality, or to jump through hoops to use it if available but provide alternatives if it is not. Exactly the same applies to a Windows developer targeting Vista; if they use Vista-specific features, their software will not run on XP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-540803">
				<div id="div-comment-540803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Prof</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-540803">
			August 22, 2007 at 10:50 am</a>		</div>

		<p>@Philo</p>
<p>I agree that it is entirely <font color="red">Company Q</font>&#8216;s fault in this situation, the fact that there are &#8216;don&#8217;t update&#8217; comments tend to stem more from the fact that there are people depending on the product for their careers, and like you, will not, or perhaps cannot, spend the money to get the new version. &nbsp;These people will not update to Vista until the product they use for their livelyhood works. &nbsp;</p>
<p>Again, this is no fault of Microsoft, but the fact is that people are still running Windows 95/98 because Product X doesn&#8217;t work anywhere else.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-541073">
				<div id="div-comment-541073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-541073">
			August 22, 2007 at 12:39 pm</a>		</div>

		<p>@Ahruman: &nbsp;It&#8217;s a little different in Apple&#8217;s case, though. &nbsp;The Windows API doesn&#8217;t use a versioning scheme that ties an application to a platform version &#8212; features are available or not, and that&#8217;s it. &nbsp;On OS X, even the <em>same features</em> get versioned to the platform level, so by default developers end up tying their apps to the latest version unless they jump through hoops from the beginning. &nbsp;You don&#8217;t even have to change anything, simply recompiling has unexpected consequences.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-541313">
				<div id="div-comment-541313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jens.ayton.se/blag/' rel='external nofollow' class='url'>Ahruman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-541313">
			August 22, 2007 at 3:18 pm</a>		</div>

		<p>Random Reader: … unless you compile to a specific SDK, which you should.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-541393">
				<div id="div-comment-541393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-541393">
			August 22, 2007 at 4:55 pm</a>		</div>

		<p>But that&#8217;s my point &#8212; if you do that, you can&#8217;t get bugfixes. &nbsp;(And because of Apple&#8217;s versioning defaults, there&#8217;s no downlevel compatibility for most applications, and therefore fewer potential users.)</p>
<p>IOW, versioning allows bugfixes but causes user grief. &nbsp;You can&#8217;t have your cake and eat it too :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-541933">
				<div id="div-comment-541933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-541933">
			August 23, 2007 at 12:12 pm</a>		</div>

		<p>@Ahruman: &quot;It’s entirely possible to build code for OS X 10.3, or 10.2, or 10.1 on an OS X 10.4 system. The same will be possible from Leopard, too. However, to do so requires the developer to avoid using new functionality, or to jump through hoops to use it if available but provide alternatives if it is not. Exactly the same applies to a Windows developer targeting Vista; if they use Vista-specific features, their software will not run on XP.&quot;</p>
<p>Not necessarily true. I use Delphi 2007 for Win32 development, and write applications that use the new Vista Task Dialogs and File Open/Save dialogs when run on Vista, and the old style MessageDlg and File Open/Save dialogs when running on Win2K/XP/98/95/ME.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-542163">
				<div id="div-comment-542163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random Reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070820-00/?p=25513#comment-542163">
			August 23, 2007 at 3:29 pm</a>		</div>

		<p>@KenW: That&#8217;s what he meant with the &quot;jump through hoops&quot; bit &#8212; doing dynamic calls or whatever else is necessary to activate features without creating a hard dependency.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

