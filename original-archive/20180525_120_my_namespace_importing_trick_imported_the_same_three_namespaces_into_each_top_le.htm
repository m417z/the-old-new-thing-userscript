<html>
<head>
<title>My namespace importing trick imported the same three namespaces into each top-level namespace, yet it worked?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>My namespace importing trick imported the same three namespaces into each top-level namespace, yet it worked?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 25, 2018 / year-entry #120</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">They are different namespaces, spelled the same.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A little while ago,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180516-00/?p=98765">
I noted
a technique formally known as namespace composition</a>.
There was one section that appeared to confuse some people:
</p>
<pre>
namespace ABI
{
  using namespace Windows::System::Profile::SystemManufacturers;
  using namespace Windows::UI::ViewManagement;
  using namespace Windows::Security::Cryptography;
}

namespace cx
{
  using namespace Windows::System::Profile::SystemManufacturers;
  using namespace Windows::UI::ViewManagement;
  using namespace Windows::Security::Cryptography;
}

namespace winrt
{
  using namespace Windows::System::Profile::SystemManufacturers;
  using namespace Windows::UI::ViewManagement;
  using namespace Windows::Security::Cryptography;
}
</pre>
<p>
Was this a copy/paste error?
After all, the same three namespaces are being imported
each time.
</p>
<p>
Well, no, actually.
The text is the same, but each one is interpreted differently.
</p>
<p>
Let's take a simpler example:
</p>
<pre>
namespace X { namespace W { void f(); }}
namespace Y { namespace W { void f(); }}
namespace W { void f(); }

namespace X
{
    using namespace W;
    auto do_something = f;
}

namespace Y
{
    using namespace W;
    auto do_something = f;
}

namespace Z
{
    using namespace W;
    auto do_something = f;
}
</pre>
<p>
Each of the three namespaces contain a <code>using namespace W;</code>,
but each one refers to a different namespace,
which you can see by pasting the above into
<a HREF="https://gcc.godbolt.org/">Compiler Explorer</a>
and observing the definitions of
<code>X::<code></code>do_something</code>,
<code>Y::<code></code>do_something</code>,
and
<code>Z::<code></code>do_something</code>.
</p>
<p>
The first <code>using namespace W;</code> takes place inside a
<code>namespace X</code>,
so the search begins relative to that namespace,
and we find it at <code>::X::W</code>.
</p>
<p>
Similarly, the second
<code>using namespace W;</code> takes place inside a
<code>namespace Y</code>,
so the search begins relative to that namespace,
and we find it at <code>::Y::W</code>.
</p>
<p>
The third <code>using namespace W;</code> takes place inside a
<code>namespace Z</code>,
so the search begins relative to that namespace.
There is no
<code>::Z::W</code>,
so we resume our search at the next outer namespace,
which is the global namespace,
and we find it as <code>::W</code>.
</p>
<p>
Even though the three namespace imports are textually
identical,
they have different effects
because they each occur in different contexts.
</p>
<p>
I wrote it this way because it showed that I was "pulling in"
the relative namespace declarations into the corresponding
first-level namespace.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1342785">
				<div id="div-comment-1342785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342785">
			May 25, 2018 at 10:59 am</a>		</div>

		<p>It surprises me that someone with any proficiency in C++ would ask such a question. And not just someone, but three someones.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1342895">
				<div id="div-comment-1342895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342895">
			May 27, 2018 at 11:04 pm</a>		</div>

		<p>Not everyone who reads this blog is proficient in C++. I&#8217;m certainly not. Then again, I thought it was pretty clear what was going on in the referenced article. It was only necessary to look at the previous section, which had all the fully qualified namespaces listed out.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1343065">
				<div id="div-comment-1343065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://geelaw.blog/' rel='external nofollow' class='url'>GL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1343065">
			May 29, 2018 at 4:38 am</a>		</div>

		<p>Agreed. I would say any sane language with any scoping would perform name look-ups that way.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1342795">
				<div id="div-comment-1342795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342795">
			May 25, 2018 at 11:27 am</a>		</div>

		<p>Might it be better to fully qualify the nested namespaces?</p>
<p>namespace X<br />
{<br />
  using namespace ::X::W;<br />
}</p>
<p>It would avoid potential confusion.  The fact that the first two namespaces are importing relative namespaces and the third is importing a top-level namespace is pretty subtle, in my opinion.  There&#8217;d be no way to tell that was happening in a code review, for example, unless you were intimately familiar with the external definitions of W, X, Y, and Z.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-2 parent" id="comment-1342875">
				<div id="div-comment-1342875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342875">
			May 27, 2018 at 8:13 pm</a>		</div>

		<p>I would disagree about confusion and this being subtle because if you find this subtle and it confuses you then you simply don&#8217;t understand the language. The unqualified name lookup rules are easy to understand and (not including ADL for functions) the same for variables, functions and namespaces. Basically start at the current namespace and then work outwards until you hit the global namespace.<br />
For the code review, that would imply that you take incomplete code to the review, i.e. not taking at least the declaration of the namespace you are importing and all of the contained items. Because remember, to be able to use the using directive in the way that Raymond mentioned, you need to be familiar with the external definitions, and the only other places this would occur in your code would be in namespaces that you wrote yourself.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1342905">
				<div id="div-comment-1342905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342905">
			May 28, 2018 at 12:25 am</a>		</div>

		<p>Because I don&#8217;t know: Is there really a namespace ABI::Windows::System::Profile::SystemManufacturers as also cx::Windows::System::Profile::SystemManufacturers as also winrt::Windows::System::Profile::SystemManufacturers? And when: Why on earth (assuming they contain the same)?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4" id="comment-1342915">
				<div id="div-comment-1342915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342915">
			May 28, 2018 at 7:03 am</a>		</div>

		<p>ABI contains the raw definitions. cx contains the definitions for use in C++/CX. And winrt contains the definitinos for use in C++/winrt.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1342815">
				<div id="div-comment-1342815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zachary</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342815">
			May 25, 2018 at 2:54 pm</a>		</div>

		<p>It would be much better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1342835">
				<div id="div-comment-1342835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342835">
			May 25, 2018 at 6:51 pm</a>		</div>

		<p>It&#8217;s easy to see why there&#8217;s no IOC++CC, the language is self-obfuscating.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1342975">
				<div id="div-comment-1342975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JohnR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180525-00/?p=98835#comment-1342975">
			May 28, 2018 at 1:45 pm</a>		</div>

		<p>Really, that confused people? I guess some people need to brush up on their C++.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

