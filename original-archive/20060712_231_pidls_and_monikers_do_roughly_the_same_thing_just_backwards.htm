<html>
<head>
<title>Pidls and monikers do roughly the same thing, just backwards</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Pidls and monikers do roughly the same thing, just backwards</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 12, 2006 / year-entry #232</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When operating with the Windows shell, you will almost certainly find yourself at some point working with a pointer to an item ID list, known also as a "pidl" (rhymes with "middle"). On the other hand, when working with OLE you may find yourself having do deal with monikers. In a sense, they both do...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>When operating with the Windows shell, you will almost certainly find yourself at some point working with a pointer to an item ID list, known also as a "pidl" (rhymes with "middle"). On the other hand, when working with OLE you may find yourself having do deal with monikers. In a sense, they both do the same thing. They let you refer to some sort of object inside a namespace (to which you can bind or otherwise operate on), they have a hierarchical structure, you can persist them, and so on.</p>
<p> Why, then, did the Windows shell team invent pidls when monikers do the same thing? </p>
<p> The fundamental difference between pidls and monikers is not in what you can do with them, but rather in their "bias". A moniker is a COM object. This means that its primary existence is in the form of a COM interface (<code>IMoniker</code>), which means that the code behind the object is loaded and ready. You can convert it to a persistence format, but that's not how monikers really spend their lives. If you have an array of monikers, all the code behind those objects has been loaded and initialized. </p>
<p> A pidl, on the other hand, spends most of its life in its persistence format. Only when you bind to it does a live COM object come out. Consider, for example, the case where you enumerated the contents of a shell folder. This produces a pidl for each item in the folder, but producing and retaining that pidl doesn't require that the code for each item be loaded and initialized. A folder with a thousand items produces a thousand little chunks of data, not a thousand COM objects. Consider, for example, a folder that contains a dozen Excel spreadsheets. If you enumerate the contents of the folder, you don't want Excel to fire up and load each of those spreadsheets to give you a dozen live, running spreadsheet objects. At this stage, you are just talking <strong>about</strong> that spreadsheet file. It's not until the user double-clicks on other otherwise tries to activate that spreadsheet that you want Excel to start up. </p>
<p> Since the shell spends nearly all its time talking <strong>about</strong> things and comparatively rarely talks <strong>to</strong> them, an object that spends most of its time "dead" was more appropriate. You might say that the difference between pidls and monikers is a matter of life and death. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-patriotb even thread-even depth-1" id="comment-399643">
				<div id="div-comment-399643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PatriotB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-399643">
			July 12, 2006 at 11:55 am</a>		</div>

		<p>Plus the fact that using monikers instead of PIDLs would&#8217;ve been a nightmare given Windows 95&#8217;s requirement to fit in 4 MB of RAM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-399693">
				<div id="div-comment-399693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Tandetnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-399693">
			July 12, 2006 at 1:11 pm</a>		</div>

		<p>You appear to misunderstand the idea of monikers. You seem to believe that, as soon as you have a moniker to Excel file, Excel itself is started. This is <em>not</em> the case. A separate step &#8211; a call to IMoniker::BindToObject &#8211; is necessary to actually run the underlying server. This is equivalent to ShellExecuteEx call on a PIDL. Until then, the moniker is just like PIDL &#8211; a generalized notion of a file path if you will.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-399803">
				<div id="div-comment-399803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-399803">
			July 12, 2006 at 3:26 pm</a>		</div>

		<p>Excel isn&#8217;t started, but the code for the IMoniker implementation must be loaded.</p>
<p>I don&#8217;t know how much code that is (less than a page?), and it&#8217;s nowhere near Excel&#8217;s footprint. &nbsp;But I think it is more than the space required for the code behind a PIDL, because AFAIK there is no code behind a PIDL (it&#8217;s just plain-old-data). &nbsp;Could be wrong on that, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-399813">
				<div id="div-comment-399813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mattd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-399813">
			July 12, 2006 at 3:28 pm</a>		</div>

		<p>Igor,</p>
<p>Q. What do you think is implementing IMoniker?</p>
<p>A. A COM object. </p>
<p>Hence, you would have 1000 COM objects as pointed out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-399833">
				<div id="div-comment-399833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S. Ganesh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-399833">
			July 12, 2006 at 4:28 pm</a>		</div>

		<p>Igor&#8217;s point is that you don&#8217;t get &#8220;a dozen live, running spreadsheet objects&#8221;. You do get a dozen file monikers, the code for which is shared. The data within each instance of the file moniker is probably is just plain-old-data.</p>
<div CLASS=post>[<i>Even if it&#8217;s not live running spreadsheet objects, it&#8217;s still code that has to be loaded off the disk. And all that just to show a list of files? The principle of &#8220;pay for play&#8221; applies here. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-400283">
				<div id="div-comment-400283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Tandetnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-400283">
			July 13, 2006 at 12:52 pm</a>		</div>

		<blockquote><p>
  You have to load an external DLL to load the moniker class implementation </p>
<p>Not if the moniker is implemented by shell32.dll, or shlwapi.dll &#8211; whoever now implements PIDL manipulation API. It does not have to be a file moniker implemented in ole32.dll &#8211; anybody can implement a COM interface. It can very well be an IMoniker implementation wrapping a PIDL internally. </p>
<p>&gt; And what if there&#8217;s an Excel file but you don&#8217;t have Excel installed? Does that mean no moniker? </p>
<p>A moniker does not know nor care which server a particular file belongs to &#8211; until you call BindToObject. Until then, it just carries around a file path or whatever information is necessary to locate a file &#8211; just like PIDL does. When you call BindToObject and no server can be found to handle the file, it fails &#8211; just like ShellExecuteEx does. </p>
<p>Face it &#8211; monikers and PIDLs are two manifestations of the same fundamental concept. One is exposed via COM-based API while the other via C style API, and that&#8217;s pretty much the only difference.</p>
<div CLASS=post>[<i>True, but the COM object is &#8220;live&#8221; &#8211; it&#8217;s hard to marshal, it&#8217;s hard to copy into a block of memory, good luck sending it to another computer. A pidl is &#8220;dead&#8221;; it&#8217;s just a bunch of bytes. You can copy it around with impunity. It&#8217;s the difference between FindFirstFile returning a bunch of HANDLEs and returning a bunch of file names. -Raymond</i>]</div>
</blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-399973">
				<div id="div-comment-399973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Tandetnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-399973">
			July 13, 2006 at 8:53 am</a>		</div>

		<p>&gt;Hence, you would have 1000 COM objects as pointed out.</p>
<p>So? Why do you think it matters if you have 1000 PIDLs or 1000 COM<br />
pointers each wrapping a PIDL? Do you also believe that a 1000<br />
instances of C++ class are more expensive than a 1000 instances of<br />
plain old C struct with the same fields? COM is not black magic, a COM<br />
object is little more than a C++ class instance.</p>
<p>I admit a moniker would be slightly more expensive (by one vtable<br />
pointer) than raw PIDL, but not vastly, outlandishly expensive as<br />
Raymond makes it sound.</p>
<p>&gt; AFAIK there is no code behind a PIDL</p>
<p>What do you mean, no code? How do you manipulate a PIDL in your<br />
application then? What&#8217;s really the difference between calling<br />
SHGetPathFromIDList and calling IMoniker::GetDisplayName?</p>
<p>Consider:</p>
<p>struct X {<br />
<br /> &nbsp;int n;<br />
<br />};<br />
<br />void DoSomething(X* p);</p>
<p>class CX {<br />
<br /> &nbsp;int n;<br />
<br />public:<br />
<br /> &nbsp;void DoSomething();<br />
<br />};</p>
<p>You seem to imply that there is &#8220;no code&#8221; behind X, but there is<br />
&#8220;some code&#8221; behind CX. I fail to see the fundamental difference between</p>
<p>X x;<br />
<br />DoSomething(&amp;x);</p>
<p>and</p>
<p>CX cx;<br />
<br />cx.DoSomething();</p>
<p>In fact, the latter is internally implemented very similarly to the former: the compiler generates something like</p>
<p>void CX_DoSomething(CX* this);<br />
<br />// cx.DoSomething();<br />
<br />CX_DoSomething(&amp;cx);</p>
<p>That&#8217;s where &#8216;this&#8217; pointer inside a C++ method comes from.</p>
<div CLASS=post>[<i>You have to load an external DLL to load the moniker class implementation. You don&#8217;t have to load an external DLL to load the pidl implementation. And what if there&#8217;s an Excel file but you don&#8217;t have Excel installed? Does that mean no moniker? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-400603">
				<div id="div-comment-400603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Tandetnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-400603">
			July 13, 2006 at 6:29 pm</a>		</div>

		<p>Marshalling could have been implemented with Marshal-By-Value, transferring PIDL to the target process or machine and wrapping it in another moniker instance once there (all transparently behind the scenes). </p>
<p>IMoniker is derived from IPersistStream &#8211; that&#8217;s how you store the underlying data in a block of memory. </p>
<p>Note, I&#8217;m not arguing that using PIDLs was a bad decision and that the shell should have used monikers instead. In fact, the issue didn&#8217;t occur to me until you raised it. I&#8217;m just arguing against your claim that monikers are somehow fundamentally different and completely unsuitable for the task.</p>
<div CLASS=post>[<i>Oh, you&#8217;re talking about using monikers <strong>in addition to</strong> pidls? That&#8217;s just wasteful. You have only 4MB of memory. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-400683">
				<div id="div-comment-400683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Tandetnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-400683">
			July 13, 2006 at 10:16 pm</a>		</div>

		<p>Your article makes a number of false claims about monikers, quite unrelated to whether or not Shell could or should use them. Somebody reading it might get wrong ideas. I&#8217;m just trying to set the record straight, is all.</p>
<p>Shell can happily continue to use PIDLs as far as I&#8217;m concerned. I&#8217;m not advocating adding moniker support. I&#8217;m arguing in principle that your claim about monikers being fundamentally unsuitable, and a few other claims, are wrong. That doesn&#8217;t mean somebody has to rush and implement monikers in the shell just because it&#8217;s possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-401883">
				<div id="div-comment-401883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/archive/2006/07/18/669277.aspx' rel='external nofollow' class='url'>Sorting It All Out</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-401883">
			July 19, 2006 at 3:04 am</a>		</div>

		<p>The other day, Raymond Chen posted Pidls and monikers do roughly the same thing, just backwards.<br />
<br />And&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-401943">
				<div id="div-comment-401943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.gorvin.de' rel='external nofollow' class='url'>Caspar Gorvin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060712-17/?p=30543#comment-401943">
			July 19, 2006 at 5:36 am</a>		</div>

		<p>The whole discussion misses the real difference between a PIDL and a Moniker, which is, that a PIDL not only contains an identification of an object (i. e. a file name, object pointer etc.) but may contain as much additional data as you please. In practice, this is used to store attributes of the objects the PIDLs refer to in the PIDL structure. In the Windows Shell, you can display files&#8217; attributes or virtual folders&#8217; attributes given the PIDL without &quot;binding&quot; to the target object. In case you have a large list of objects which you want to display in the Windows Explorer Details View, it&#8217;s much faster to find the attributes (columns in details view) in the PIDL than to open the objects one by one.</p>
<p>And of course, every Shell Extension needs a PIDL-Manager Module, which might be a pain to program.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

