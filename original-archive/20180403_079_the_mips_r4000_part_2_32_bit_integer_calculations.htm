<html>
<head>
<title>The MIPS R4000, part 2: 32-bit integer calculations</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 2: 32-bit integer calculations</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 3, 2018 / year-entry #79</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The usual suspects.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The MIPS R4000 has the usual collection of arithmetic operations,
but the mnemonics are confusingly-named.
The general notation for arithmetic operations is
</p>
<pre>
    OP      destination, source1, source2
</pre>
<p>
with the destination register on the left and the source register
or registers on the right.
</p>
<p>
Okay, here goes.
We start with addition and subtraction.
</p>
<pre>
    ADD     rd, rs, rt      ; rd = rs + rt, trap on overflow
    ADDU    rd, rs, rt      ; rd = rs + rt, no trap on overflow
    SUB     rd, rs, rt      ; rd = rs - rt, trap on overflow
    SUBU    rd, rs, rt      ; rd = rs - rt, no trap on overflow
</pre>
<p>
The <code>ADD</code> and <code>SUB</code> instructions perform
addition and subtraction and raise a trap if a signed overflow occurs.
The <code>ADDU</code> and <code>SUBU</code> instructions do the
same thing, but without the overflow trap.
The <code>U</code> suffix officially means "unsigned",
but this is confusing because the addition can be performed on both
signed and unsigned values, thanks to twos complement.
The real issue is whether an overflow trap is raised.
</p>
<p>
There are also versions of the addition instructions that accept
a 16-bit signed immediate as a second addend:
</p>
<pre>
    ADDI    rd, rs, imm16   ; rd = rs + (int16_t)imm16, trap on overflow
    ADDIU   rd, rs, imm16   ; rd = rs + (int16_t)imm16, no trap on overflow
</pre>
<p>
Note that the <code>U</code> is double-confusing here,
because even though the <code>U</code> officially stands for
"unsigned",
the immediate value is treated as signed,
and the addition is suitable for both signed and unsigned values.
</p>
<p>
There are no corresponding <code>SUBI</code> or <code>SUBIU</code>
instructions,
but they can be synthesized:
</p>
<pre>
    ADDI   rd, rs, -imm16   ; SUBI   rd, rs, imm16
    ADDIU  rd, rs, -imm16   ; SUBIU  rd, rs, imm16
</pre>
<p>
(Of course, this doesn't work if the value you want to subtract
is &minus;32768, but hey, it mostly works.)
</p>
<p>
The next group of instructions is the bitwise operations.
These never trap.&sup1;
</p>
<pre>
    AND     rd, rs, rt      ; rd = rs &amp; rt
    ANDI    rd, rs, imm16   ; rd = rs &amp; (uint16_t)imm16
    OR      rd, rs, rt      ; rd = rs | rt
    ORI     rd, rs, imm16   ; rd = rs | (uint16_t)imm16
    XOR     rd, rs, rt      ; rd = rs ^ rt
    XORI    rd, rs, imm16   ; rd = rs ^ (uint16_t)imm16
    NOR     rd, rs, rt      ; rd = ~(rs | rt)
</pre>
<p>
Note the inconsistency:
The addition instructions treat the immediate
as a signed 16-bit value (and sign-extend it to a 32-bit value),
but
the bitwise logical operations treat it as an unsigned 16-bit value
(and zero-extend it to a 32-bit value).
Stay alert!
</p>
<p>
The last group of instructions for today is the shift instructions.
These also never trap.
</p>
<pre>
    SLL     rd, rs, imm5    ; rd = rs &lt;&lt;  imm5
    SLLV    rd, rs, rt      ; rd = rs &lt;&lt;  (rt % 32)
    SRL     rd, rs, imm5    ; rd = rs &gt;&gt;U imm5
    SRLV    rd, rs, rt      ; rd = rs &gt;&gt;U (rt % 32)
    SRA     rd, rs, imm5    ; rd = rs &gt;&gt;  imm5
    SRAV    rd, rs, rt      ; rd = rs &gt;&gt;  (rt % 32)
</pre>
<p>
The mnemonics stand for "shift left logical",
"shift right logical"
and "shift right arithmetic".
The <code>V</code> suffix stands for "variable",
and indicates that the shift amount comes from a register
rather than an immediate.
</p>
<p>
Yup, that's another inconsistency.
Following the pattern of the addition and bitwise logical groups,
these instructions should have been named
<code>SLL</code> for shifting by an amount specified by a register
and
<code>SLLI</code> for shifting by an amount specified by an
immediate.
Go figure.
</p>
<p>
There are no built-in sign-extension or zero-extension instructions.
You can get zero-extension in one instruction by explicitly masking
out the upper bytes:
</p>
<pre>
    ; zero extend byte to word
    ANDI    rd, rs, 0xFF    ; rd = ( uint8_t)rs

    ; zero extend halfword to word
    ANDI    rd, rs, 0xFFFF  ; rd = (uint16_t)rs
</pre>
<p>
Sign extension requires two instructions.
</p>
<pre>
    ; sign extend byte to word
    SLL     rd, rs, 24      ; rd = rs &lt;&lt; 24
    SRA     rd, rd, 24      ; rd = (int32_t)rd &gt;&gt; 24

    ; sign extend halfword to word
    SLL     rd, rs, 16      ; rd = rs &lt;&lt; 16
    SRA     rd, rd, 16      ; rd = (int32_t)rd &gt;&gt; 16
</pre>
</p>
<p>
And I'm going to mention these instructions here
because I can't find a good place to put them:
</p>
<pre>
    SYSCALL imm20           ; system call
    BREAK   imm20           ; breakpoint
</pre>
<p>
Both instructions trap into the kernel.
The system call instruction
is intended to be used to make operation system calls;
the breakpoint instruction is intended to be used for
software breakpoints.
Both instructions carry a 20-bit immediate payload
that can be used for whatever purpose the operating system chooses.
</p>
<p>
Here are some more instructions you can synthesize from the official
instructions:
</p>
<pre>
    SUB     rd, zero, rs    ; NEG     rd, rs
    SUBU    rd, zero, rs    ; NEGU    rd, rs
    ADDU    rd, zero, rs    ; MOVE    rd, rs
    OR      rd, zero, rs    ; MOVE    rd, rs
    NOR     rd, zero, rs    ; NOT     rd, rs
    SLL     zero, zero, 0   ; NOP
    SLL     zero, zero, 1   ; SSNOP
</pre>
<p>
There are many possible ways of synthesizing a <code>MOVE</code>
instruction,
but in order to be able to unwind exceptions,
Windows NT requires that register motion in the prologue or
epilogue of a function
must take one of the two forms given above.
</p>
<p>
Similarly, there are many ways of performing a <code>NOP</code>.
Basically, any non-trapping 32-bit
computation that targets the <var>zero</var>
register is functionally a nop,
but the two above are treated specially by the processor.
</p>
<ul>
<li>
    <code>NOP</code> = <code>SLL zero, zero, 0</code>
    is special-cased by the processor as a nop that can be optimized
    out entirely.
    Use it when you need to pad out some code for space.
</li>
<li>
    <code>SSNOP</code> = <code>SLL zero, zero, 1</code>
    is special-cased by the processor as a nop that must be issued,
    and it will not be simultaneously issued with any other
    instruction.
    Use it when you need to pad out some code for time.
    (The <code>SS</code> stands for "super-scalar".)
</li>
</ul>
<p>
The encoding of <code>SLL zero, zero, 0</code> happens to be
<code>0x00000000</code>,
which I'm sure is not a coincidence.
I'm not convinced that it's a good idea, though.
I would have chosen <code>0x00000000</code>
to be the encoding of a breakpoint or invalid instruction.
</p>
<p>
Okay, those are the 32-bit computation instructions.
Next time, we'll look at multiplication, division,
and the temperamental <var>HI</var> and <var>LO</var> registers.
</p>
<p>
&sup1;
Alas, there is no
<code><a HREF="https://en.wikipedia.org/wiki/Nori">NORI</a></code> instruction.
You think I'm joking, but I'm not.
Be patient.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1331895">
				<div id="div-comment-1331895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1331895">
			April 3, 2018 at 8:39 am</a>		</div>

		<p>In the 6502, the BRK instruction&#8217;s opcode is 0x00 ($00 in 6502 notation). This has the side effect of dropping into the debugger whenever there is a jump to a position in memory that doesn&#8217;t contain code (0 is pretty common among data or uninitialized memory, so there is a big chance that the processor will hit a zero pretty soon if something goes bad).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1331905">
				<div id="div-comment-1331905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">calvin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1331905">
			April 3, 2018 at 9:05 am</a>		</div>

		<p>Just be careful: SLL 0, 0, 0 might not work properly on some processors: <a href="https://apebox.org/wordpress/linux/545" rel="nofollow">https://apebox.org/wordpress/linux/545</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1331995">
				<div id="div-comment-1331995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://os161.eecs.harvard.edu' rel='external nofollow' class='url'>David Holland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1331995">
			April 3, 2018 at 6:18 pm</a>		</div>

		<p>Having all-bits-zero be a valid instruction is definitely not a good idea&#8230; having it be NOP is worse. It&#8217;s easy to have a bug in your virtual memory system that results in getting pages of zeros where you intended to have code; if that happens, and you jump to that page, the processor silently executes the NOPs. Then it either (if you&#8217;re lucky) runs off the end of that chunk of memory and triggers a fatal trap, or (otherwise) gets to a non-zeroed page, where it will continue executing in some entirely unrelated code. When that code then crashes it can be very difficult to figure out what happened or how you managed to get a clearly impossible call stack.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1332015">
				<div id="div-comment-1332015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Petteri Aimonen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332015">
			April 3, 2018 at 10:22 pm</a>		</div>

		<p>Another not-good idea is how some microcontrollers such as ARM Cortex-M have vector table at 0x0000. Having null pointer be a mapped address is bad enough, having it be a mapped address that always contains lots of valid pointers is even worse. It&#8217;s easy to end up in a very confusing state when calling e.g. a virtual function on a null pointer to C++ object.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1332045">
				<div id="div-comment-1332045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332045">
			April 4, 2018 at 6:43 am</a>		</div>

		<p>The x86 has that in real mode. I&#8217;m 2 steps from the guy who formatted his hd by it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1332065">
				<div id="div-comment-1332065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Patrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332065">
			April 4, 2018 at 7:35 am</a>		</div>

		<p>x86 realmode has the same issue, with the IVT living at address 0:0.<br />
In fact, if I&#8217;m not totally mistaken, there were special hacks in Win95 (using expand-down segments) to protect it from misbehaving applications.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1332025">
				<div id="div-comment-1332025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332025">
			April 3, 2018 at 10:53 pm</a>		</div>

		<p>0x00 was the NOP instruction on the Z80 as well (the first processor I ever got down to machine code with). Of course, not many people were putting a virtual memory system onto one of those.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332085">
				<div id="div-comment-1332085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">R P (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332085">
			April 4, 2018 at 9:32 am</a>		</div>

		<p>I had a Z80-based S-100 box (made by Digitex) that sported 256KB of RAM and a 20MB hard drive. It was also a multi-user system, so it&#8217;s more than likely that it wasn&#8217;t using virtual memory as we know it now, but just switching between static pages on context switches.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even depth-2 parent" id="comment-1332195">
				<div id="div-comment-1332195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332195">
			April 5, 2018 at 6:51 am</a>		</div>

		<p>The Motorola 68k had both a 16-bit NOP with a specific code, and a 0x00000000 instruction that decoded to &#8220;ORI.b #0, D0&#8221; (or in C terms, &#8220;D0 |= 0&#8221;) which is which is, in fact, also a no-op.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332205">
				<div id="div-comment-1332205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Falcon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332205">
			April 5, 2018 at 7:07 am</a>		</div>

		<p>Close to a no-op, but not quite &#8211; it affected condition codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even depth-3" id="comment-1332215">
				<div id="div-comment-1332215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332215">
			April 5, 2018 at 7:12 am</a>		</div>

		<p>Well thinking about it, it might not be a <i>complete</i> no-op: It&#8217;s possible it sets the status bits (zero, negative etc.) according to the D0 register.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1332235">
				<div id="div-comment-1332235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332235">
			April 5, 2018 at 9:31 am</a>		</div>

		<p>&gt;  The U suffix officially means &#8220;unsigned&#8221;, but this is confusing because the addition can be performed on both signed and unsigned values, thanks to twos complement. The real issue is whether an overflow trap is raised. </p>
<p>Not that this makes them a good name, but I wonder if the names come from C. C signed int overflow is undefined behavior, meaning a trap is an acceptable response (and I actually think is a /good/ response, though I&#8217;m sure that&#8217;s controversial), so the trapping ADD/SUB instructions can be used. Unsigned overflow* /is/ defined though, so it can&#8217;t trap &#8212; or rather, it could, but then it would just have to continue execution, so that&#8217;s slow &#8212; and you have to use the non-trapping ADDU/SUBU instructions.</p>
<p>I don&#8217;t know what MIPS compliers actually do, and Compiler Explorer doesn&#8217;t seem to have a MIPS option. It&#8217;d be interesting to know.</p>
<p>* Technically, the C and C++ standards say that, because it&#8217;s defined, unsigned arithmetic /can&#8217;t/ overflow, because overflow is UB. But I&#8217;m not convinced anyone uses &#8220;overflow&#8221; in that sense who doesn&#8217;t read the C/C++ standards for fun. :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1332365">
				<div id="div-comment-1332365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hubert Lamontagne</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332365">
			April 6, 2018 at 3:43 pm</a>		</div>

		<p>I&#8217;ve definitely seen C++ code that overflows signed integers on purpose. In an emulator for the sound chip of the SNES, the calculations are done in 16-bit 2&#8217;s complement, and to get the original wraparound behavior (needed to get the wind sound in Chrono Trigger), you have to do essentially this:<br />
int32_t value = adpcm_decode();<br />
value = value &lt;&gt; 16;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1332435">
				<div id="div-comment-1332435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180403-00/?p=98425#comment-1332435">
			April 8, 2018 at 11:12 am</a>		</div>

		<p>No you don&#8217;t &#8220;have to do&#8221; any such things. Undefined behavior is exactly that: undefined. Writing the correct code is a negligible extra amount of work and means your code will actually work.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

