<html>
<head>
<title>Enumerating subsets with binomial coefficients</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Enumerating subsets with binomial coefficients</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 14, 2014 / year-entry #94</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140414-00/?p=1263</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Inspired by the Little Program which enumerates set partitions, I decided to do the binomial coefficients this week. In other words, today's Little Program generates all subsets of size k from a set of size n. As before, the key is to interpret a recurrence combinatorially. In general, when a recurrence is of the form...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Inspired by
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/03/24/10510315.aspx">
the Little Program which enumerates set partitions</a>,
I decided to do the binomial coefficients this week.
In other words, today's Little Program generates
all subsets of size <var>k</var> from a set of size <var>n</var>.
</p>
<p>
As before, the key is to interpret a recurrence combinatorially.
In general, when a recurrence is of the form
<var>A</var> + <var>B</var>,
it means that at the recursive step, you should do
<var>A</var>, followed by <var>B</var>.
In our case, the recurrence is
<var>C</var>(<var>n</var>, <var>k</var>) =
<var>C</var>(<var>n</var> &minus; 1, <var>k</var>)
+
<var>C</var>(<var>n</var> &minus; 1, <var>k</var> &minus; 1).
The combinatorial interpretation of the recurrence is to
look at how you can go from a set of size
<var>n</var>
to a set of size
<var>n</var> &minus; 1
by studying the effect of removing element <var>n</var>.
If element <var>n</var> is not part of the subset,
then what's left is a subset of size <var>k</var>.
If it is part of the subset,
then removing it leaves a subset of size <var>k</var> &minus; 1.
</p>
<p>
Therefore, our algorithm goes like this:
</p>
<ul>
<li>Handle base cases.
<li>Otherwise,
<ul>
<li>Recursively call
    <var>C</var>(<var>n</var> &minus; 1,
    <var>k</var>) and pass the results through.</p>
<li>Recursively call
    <var>C</var>(<var>n</var> &minus; 1,
    <var>k</var> &minus; 1) and add
    element <var>n</var> to each of the results.
</ul>
</ul>
<p>
As usual, once we spelled out what we're going to do,
actually doing it is pretty straightforward.
</p>
<pre>
function Subsets(n, k, f) {
 if (k == 0) { f([]); return; }
 if (n == 0) { return; }
 Subsets(n-1, k, f);
 Subsets(n-1, k-1, function(s) {
   f(s.concat(n));
 });
};
</pre>
<p>
The first test catches the vacuous base
case where you say,
"Please show me all the zero-sized subsets of a set of size <code>n</code>."
The answer is "There is exactly one zero-sized subset,
called the empty set."
</p>
<p>
The second test catches the other base cases
where you say,
"Please show me all the
<code>k</code>-sized subsets&sup1; of the empty set."
This can't be done if <code>k &gt; 0</code>, because the
only subset of the empty set is the empty set itself,
and its size is not <code>k</code>.
</p>
<p>
The meat of the recurrence is pretty much what we said.
First, we generate all the <code>k</code>-sized subsets
from a set of size <code>n-1</code> and pass them through.
Then we generate all the
<code>k-1</code>-sized subsets
from a set of size <code>n-1</code> and add the element <code>n</code>
to them.
</p>
<p>
We can test out the function by logging the
results to the console.
</p>
<pre>
Subsets(5, 3, <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/03/24/10510315.aspx">logToConsole</a>);
</pre>
<p>
For
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/11/13/10367904.aspx">
style points</a>, we can accumulate the results in helper
parameters.
This records the pending work in parameters instead of closures,
which makes the code easier to port to languages which don't support closures.
(And probably helps the efficiency a bit too.)
</p>
<pre>
function AccumulateSubsets(n, k, f, chosen) {
 if (k == 0) { f(chosen); return; }
 if (n == 0) { return; }
 AccumulateSubsets(n-1, k, f, chosen);
 AccumulateSubsets(n-1, k-1, f, [n].concat(chosen));
};

function Subsets(n, k, f) {
 AccumulateSubsets(n, k, f, []);
}
</pre>
<p>
(I prepend <code>n</code> to <code>chosen</code> for extra style points,
since it causes the results to be enumerated in a prettier order.)
</p>
<p>
As with Stirling numbers, we can use a destructive recursion to reduce
memory allocation, if we can count on the callback not modifying
the result.
I'll leave that as an exercise,
because I've got something even better up my sleeve:
Getting rid of the recursion entirely!
</p>
<p>
Let's consider the case of enumerating all the subsets of size <var>k</var>
for a fixed <var>k</var> known at compile-time.
Let's say <var>k</var> is 3.
You can structure this as a series of nested loops.
</p>
<pre>
function Subsets3(n, f) {
 for (var i = 1; i <= n - 2; i++) {
  for (var j = i + 1; j <= n - 1; j++) {
   for (var k = j + 1; k <= n; k++) {
    f([i, j, k]);
   }
  }
 }
}
</pre>
<p>
The outer loop chooses the first element,
the middle loop chooses the second element,
and the inner loop chooses the last element.
This clearly generalizes to bigger subsets;
you just need more loop variables.
</p>
<p>
With this interpretation, you can see how to get from
one subset to the next subset:
You increment the last element, and if that's not possible
without violating the loop constraint,
then you back out one level and
try incrementing the next-to-last element (and restarting
any inner loops),
and so on,
backing out until you finally find an index that can be incremented
(or give up).
</p>
<pre>
function NextSubsetSameSize(s, n) {
 var k = s.length;
 // look for an index that can be incremented
 for (i = k - 1; i >= 0; i--) {
  // can this index be incremented?
  if (s[i] < n - k + i + 1) {
   // increment it
   s[i]++;
   // reset all inner loops
   while (++i < k) s[i] = s[i-1] + 1;
   return true;
  }
 }
 return false;
}
</pre>
<p>
The loop on <code>i</code> looks for the highest index that can be
incremented.
The loop bounds depend on which index you are studying,
since lower indices need to leave enough room for higher indices,
but can you figure out the formula by looking at the pattern in
<code>Subset3</code>.
Once we find an index with room, we increment it and reset
all the subsequent indices to their initial values.
If we can't find an index to increment, then we report failure.
</p>
<pre>
// Enumerate all subsets of size 3 from a set of size 5
var s = [1, 2, 3]; // initial subset
do {
 console.log(JSON.stringify(s));
} while (NextSubsetSameSize(s, 5));
</pre>
<p><b>Note</b>
</p>
<p>
&sup1; In math circles, the phrase
<i>k-sized subsets</i> is typically abbreviated as
<i>k-subsets</i>,
but I chose to spell it out here because the shorthand
takes some getting used to.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1119703">
				<div id="div-comment-1119703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-00/?p=1263#comment-1119703">
			April 14, 2014 at 10:50 am</a>		</div>

		<p>&quot;The first test catches the vacuous base case where you say, &quot;Please show me all the zero-sized subsets of a set of size n.&quot; The answer is &quot;There is exactly one zero-sized subset, called the empty set.&quot;&quot;</p>
<p>Why are you being so nice to such vacuous callers? &nbsp;You should send back a *different* empty set each time.</p>
<p>(Yes, I know better.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

