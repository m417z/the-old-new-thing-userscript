<html>
<head>
<title>Why bother with RegisterWaitForSingleObject when you have MsgWaitForMultipleObjects?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why bother with RegisterWaitForSingleObject when you have MsgWaitForMultipleObjects?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 17, 2008 / year-entry #378</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20081117-00/?p=20183</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>2</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter kokorozashi wonders why you should bother with RegisterWaitForSingleObject when you have MsgWaitForMultipleObjects already. If you want to pump messages and wait for a kernel object, then you can change all calls to PeekMessage, GetMessage, and WaitMessage to replacement functions that use MsgWaitForMultipleObjects. Isn't that enough? Why waste an entire thread just to wait for...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter kokorozashi wonders <a href="http://blogs.msdn.com/oldnewthing/archive/2006/02/22/536920.aspx#536958"> why you should bother with <code>RegisterWaitForSingleObject</code> when you have <code>MsgWaitForMultipleObjects</code> already</a>. If you want to pump messages and wait for a kernel object, then you can change all calls to <code>PeekMessage</code>, <code>GetMessage</code>, and <code>WaitMessage</code> to replacement functions that use <code>MsgWaitForMultipleObjects</code>. Isn't that enough? Why waste an entire thread just to wait for that object?</p>
<p> If you're so clever that you can modify every call to <code>PeekMessage</code>, <code>GetMessage</code>, and <code>WaitMessage</code>, then more power to you. But in order to do this, you'll have to restrict the functions you call, because all sorts of functions contain their own message loops. Do you call <code>MessageBox</code>? Or <code>DialogBox</code>? Those functions contain a modal loop. (After all, they don't return until the user dismisses the dialog box; <i>somebody</i> has to be pumping messages because you're not.) Indeed, you can't even call <code>DefWindowProc</code> since that function goes into a modal loop if the user, say, grabs the caption bar and drags the window around: That drag loop happens inside <code>DefWindowProc</code>. </p>
<p> If your thread has any sort of visible UI, this sort of extreme control of all message loops is unreasonable. You have no practical choice but to have the wait happen on some other thread and either respond to the signalled object on that thread or post a notification back to the UI thread to do the work. </p>
<p> The advantage of <code>RegisterWaitForSingleObject</code> over creating your own thread for waiting is that the thread pool functions will combine multiple registered waits together on a single thread (by the power of <code>WaitForMultipleObjects</code>), so instead of costing a whole thread, it costs something closer to (but not exactly) 1/64 of a thread. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (2)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-684503">
				<div id="div-comment-684503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rob Shearman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081117-00/?p=20183#comment-684503">
			November 17, 2008 at 11:16 am</a>		</div>

		<p>In addition to the point Raymond makes some Win32 code may not even have a message loop, such as services or library code. In such a case, having an easy way to make a wait operation happen asynchronously is beneficial. Even in the case where you do have a message loop, the operation that you perform when the object is signalled may take a long time to complete and so you wouldn&#8217;t want to do it on a UI thread anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-684493">
				<div id="div-comment-684493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arlie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20081117-00/?p=20183#comment-684493">
			November 17, 2008 at 11:08 am</a>		</div>

		<p>There&#8217;s another set of good reasons to use RegisterWaitForSingleObject (or just plain WaitForSingleObject or WaitForMultipleObjects in your own worker thread).</p>
<p>Every time a thread calls any WaitFor* function, the kernel needs to translate handles to object pointers, and needs to link up the wait blocks for the current thread in the headers of the waitable objects (in the portion of the objects&#8217; header that is owned by the dispatcher). &nbsp;This is work, and it is work that is proportional to the number of handles, and the number of times you call any WaitFor* method.</p>
<p>GUI threads typically have a high rate of message processing, and the speed which those messages are processed has a strong effect on the quality of the user&#8217;s experience. &nbsp;If you are managing an array of wait handles, and you use MsgWaitForMultipleObjects in order to multiplex between wait handles and USER32/GUI messages, then you&#8217;re adding a fair amount of processing to every user/kernel transition.</p>
<p>If you are managing a large number of handles, and those handles become signalled relatively infrequently (for example, notifications from the Plug-and-Play manager, or a directory notification event for your configuration files, etc.), then you should use RegisterWaitForSingleObject. &nbsp;The thread (from the thread pool) which does the waiting will get to sleep for a long time, and so all of its private data will get pushed out of L1 and L2 cache, leaving you more room in L1 and L2 for your &quot;real&quot; work. &nbsp;Then, in your callback function, you can use PostMessage to your main thread to forward the message. &nbsp;This gives you the simplicity of single-threaded processing (you don&#8217;t have to worry about locks nearly as much), but also gives you decent performance, and also side-steps the problem Raymond described, with modal message pumps that are beyond your control.</p>
<p>If you have wait handles that are signaled at a very high rate, such as asynchronous I/O for networking or disk I/O, then you probably want to be doing this on a worker thread anyway, rather than your GUI thread. &nbsp;You should still use PostMessage to send messages to your GUI thread. &nbsp;(SendMessage is evil because it blocks, but sometimes that&#8217;s the least-evil choice.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

