<html>
<head>
<title>Why does a single integer assignment statement consume all of my CPU?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does a single integer assignment statement consume all of my CPU?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 16, 2015 / year-entry #12</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Here's a C++ class inspired by actual events. (Yes, the certificate on that Web site is broken.) It is somebody's attempt to create a generic value type, similar to VARIANT. class Value { public: Value(Type type) : m_type(V_UNDEFINED) { } Type GetType() const { return m_type; } void SetType(Type type) { m_type = type; }...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Here's a C++ class inspired by
<a HREF="https://database.cs.brown.edu/svn/hstore/tags/release-2011-03/src/ee/common/NValue.hpp">
actual events</a>.
(Yes, the certificate on that Web site is broken.)
It is somebody's attempt to create a generic value type,
similar to <code>VARIANT</code>.
</p>
<pre>
class Value
{
public:
 Value(Type type) : m_type(V_UNDEFINED) { }

 Type GetType() const { return m_type; }
 void SetType(Type type) { m_type = type; }

 int32_t GetInt32() const
 {
  assert(GetType() == V_INT32);
  return *reinterpret_cast&lt;const int32_t *&gt;(m_data);
 }

 void SetInt32(int32_t value)
 {
  assert(GetType() == V_INT32);
  *reinterpret_cast&lt;int32_t *&gt;(m_data) = value;
 }

 // GetChar, SetChar, GetInt64, SetInt64, etc.

private:
 char m_data[sizeof(int64_t)];
 char m_type;
};

...

Value CalculateTheValue()
{
 int32_t total;
 // ... a bunch of computation ...

 Value result;
 result.SetType(V_INT32);
 result.SetInt32(total);
 return result;
}
</pre>
<p>
Profiling showed that over 80% of the time spent by
<code>Calculate&shy;The&shy;Value</code> was inside the
<code>Set&shy;Int32</code> method call,
in particular on the line
</p>
<pre>
  *reinterpret_cast&lt;int32_t *&gt;(m_data) = value;
</pre>
<p>
Why does it take so much time to store an integer to memory,
dwarfing the actual computation to calculate that integer?
</p>
<p>
Alignment.
</p>
<p>
Observe that the underlying data for the <code>Value</code> class
is declared as a bunch of <code>char</code>s.
Since a <code>char</code> is just a byte,
it has no alignment restrictions.
On the other hand, data types like
<code>int32_t</code> typically do have alignment restrictions.
For example,
accessing a 32-bit value is usually more efficient if the value
is stored in memory starting at a multiple of&nbsp;4.
</p>
<p>
How much more efficient depends on the processor and the data type.
</p>
<p>
Of the processors that allow unaligned memory access,
the penalty can be
<a HREF="http://www.agner.org/optimize/blog/read.php?i=142&v=t">
zero</a>,
or only
<a HREF="http://lemire.me/blog/archives/2012/05/31/data-alignment-for-speed-myth-or-reality/">
10%</a>
or maybe
<a HREF="http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0290g/Chddeedh.html">
100%</a>.
</p>
<p>
Many processor architectures are less forgiving of misaligned data
access and raise an alignment exception if you break the rules.
When such an exception occurs, the operating system might choose
to terminate the application.
Or the operating system may choose to emulate the instruction
and fix up the misaligned access.
The program runs much slower, but at least it still runs.
(In Windows, the decision how to respond to the alignment exception
depends on whether the process asked for alignment faults to be
forgiven.
See
<code>SEM_<wbr>NO&shy;ALIGNMENT&shy;FAULT&shy;EXCEPT</code>.)
</p>
<p>
It appears that the original program is in the last case:
An alignment exception occurred,
and the operating system handled it by manually reading the
four bytes from <code>m_data[0]</code> through
<code>m_data[4]</code> and assembling them into a 32-bit value,
then resuming execution of the original program.
</p>
<p>
Dispatching the exception, parsing out the faulting instruction,
emulating it,
then resuming execution.
That is all very slow.
Probably several thousand instruction cycles.
This can easily dwarf the actual computation performed by
<code>Calculate&shy;The&shy;Value</code>.
</p>
<p>
Okay, but why is the <code>result</code> variable unaligned?
</p>
<p>
Since, as we noted a while back,
the way the <code>Value</code> class is defined requires only
byte alignment,
the compiler is not constrained to align it in any particular way.
If there were a <code>int16_t</code> local variable in the
<code>Calculate&shy;The&shy;Value</code> function,
the compiler might choose to arrange its stack frame like this:
</p>
<ul>
<li>Start at an aligned address <var>X</var>.
<li>Put <code>int32_t total</code> at <var>X</var>+0 through <var>X</var>+3.
<li>Put <code>int16_t whatever</code> at <var>X</var>+4 through <var>X</var>+5.
<li>Put <code>Value result</code> at <var>X</var>+6 through <var>X</var>+22.
</ul>
<p>
Since <var>X</var> is a multiple of 4,
<var>X</var>+6 is not a multiple of 4,
so the <code>m_data</code> member is misaligned
and incurs an alignment fault at every access.
</p>
<p>
What's more, since the <code>Value</code> class has an odd number
of total bytes,
if you create an array of <code>Value</code>s,
you are guaranteed that three quarters of the elements will be
misaligned.
</p>
<p>
The solution is to fix the declaration of the <code>Value</code> class
so that the alignment requirements are made visible to the compiler.
Instead of jamming all the data into a byte blob,
use a discriminated union.
That is, after all, what you are trying to emulate in the first place.
</p>
<pre>
class Value
{
public:
 Value(Type type) : m_type(V_UNDEFINED) { }

 Type GetType() const { return m_type; }
 void SetType(Type type) { m_type = type; }

 int32_t GetInt32() const
 {
  assert(GetType() == V_INT32);
  return m_data.m_int32;
 }

 void SetInt32(int32_t value)
 {
  assert(GetType() == V_INT32);
  m_data.m_int32 = value;
 }

 // GetChar, SetChar, GetInt64, SetInt64, etc.

private:
 union
 {
  char    m_char;
  int32_t m_int32;
  int64_t m_int64;
  // etc.
 } m_data;
 char m_type;
};
</pre>
<p>
<b>Exercise</b>:
One guess as to the cause of the problem is that
the assignment statement is incurring
paging.
Explain why this is almost certainly not the reason.
</p>
<p>
<b>Bonus chatter</b>:
I'm ignoring RVO here.
If you are smart enough to understand RVO,
you should also be smart enough to see that RVO does not affect
the underlying analysis.
It just shifts the address calculation to the caller.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1171443">
				<div id="div-comment-1171443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171443">
			January 16, 2015 at 7:10 am</a>		</div>

		<p>A page fault will not occur because The call to SetType() writes to a member variable. This pages in the object. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171453">
				<div id="div-comment-1171453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171453">
			January 16, 2015 at 7:24 am</a>		</div>

		<p>&gt; the four bytes from m_data[0] through m_data[4]</p>
<p>I make that five.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171463">
				<div id="div-comment-1171463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171463">
			January 16, 2015 at 7:55 am</a>		</div>

		<p>&quot;What&#39;s more, since the Value class has an odd number of total bytes, if you create an array of Values, you are guaranteed that three quarters of the elements will be misaligned.&quot;</p>
<p>Won&#39;t all Values be equally aligned? I thought struct/class values were padded/aligned to at least 4 byte boundaries? Doesn&#39;t that result in the following</p>
<p> &nbsp;struct s {</p>
<p> &nbsp; &nbsp;float f;</p>
<p> &nbsp; &nbsp;char c;</p>
<p> &nbsp;};</p>
<p> &nbsp;struct s a[4];</p>
<p>causing misaligned float access on a[1].f &#8211; a[3].f?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171473">
				<div id="div-comment-1171473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171473">
			January 16, 2015 at 8:05 am</a>		</div>

		<p>@Karellen: A struct has the alignment of the member with the highest alignment requirement. In your example, the float member pushes the alignment for the entire struct to a multiple of sizeof(float) == 4. If the struct contains a double, the struct will get sizeof(double) == 8 alignment, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171493">
				<div id="div-comment-1171493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andre</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171493">
			January 16, 2015 at 8:23 am</a>		</div>

		<p>Besides what Anonymous noted (SetType already pages in the Value):</p>
<p>For a page fault to occur, Value needs to be paged out. Assuming the system isn&#39;t trashing from external load (that would cause everything to suffer about uniformly, not just the SetInt32 call), that means some other part of CalculateTheValue causes a page fault that discards Value&#39;s page.</p>
<p>Thus, if I&#39;m not mistaken, at most 50% can be spend on a page fault for SetInt32.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-iboyd odd alt thread-odd thread-alt depth-1" id="comment-1171503">
				<div id="div-comment-1171503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/IanBoyd' rel='external nofollow' class='url'>IanBoyd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171503">
			January 16, 2015 at 8:33 am</a>		</div>

		<p>&gt; In Windows, the decision how to respond to the alignment exception depends on whether the process asked for alignment faults to be forgiven.</p>
<p>I wanted to see if my application was experiencing any alignment faults (in the same way i would use Application Verifier to check for other issues, i wanted to test disabling Window&#39;s built-in fixups when it catches the `EXCEPTION_DATATYPE_MISALIGNMENT` exception). So the question became how do i opt-out of Window&#39;s fixups of alignment faults. </p>
<p>I consulted the MSDN page &quot;Windows Data Alignment on IPF, x86, and x64&quot;.</p>
<p>It seems that there is no way to opt-out of Windows performing alignment fixups for 32-bit processes:</p>
<p>&gt; On the x86 architecture, the operating system does not make the alignment fault visible to the application. On these two platforms, you will also suffer performance degradation on the alignment fault, but it will be significantly less severe than on the Itanium, because the hardware will make the multiple accesses of memory to retrieve the unaligned data.</p>
<p>For 64-bit processes, alignment errors are fixed up by the hardware, but MSDN mentions a way to change it:</p>
<p>&gt; On the x64 architecture, the alignment exceptions are disabled by default, and the fix-ups are done by the hardware. The application can enable alignment exceptions by setting a couple of register bits, in which case the exceptions will be raised unless the user has the operating system mask the exceptions with SEM_NOALIGNMENTFAULTEXCEPT. (For details, see the AMD Architecture Programmer&#39;s Manual Volume 2: System Programming.)</p>
<p>Bit 18 of RFLAGS (Alignment Check) controls throwing of exceptions. Using PUSHFQ/POPFQ (the 64-bit RFLAGS version of PUSHFD/POPFD for EFLAGS) allows changing the bits, but it doesn&#39;t seem to have any effect.</p>
<p>The documentation of SetErrorMode and SEM_NOALIGNMENTFAULTEXCEPT say that the option is always on for x86/x64, and only has an effect for Itanium.</p>
<p>So I asked the question on Stackoverflow &quot;How to enable alignment exceptions for my process on x64?&quot; (<a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/26919269">stackoverflow.com/&#8230;/26919269</a>).</p>
<p>The general consensus is that there is no way for a user-mode x86 or x64 process to be able to experience EXCEPTION_DATATYPE_MISALIGNMENT exceptions. </p>
<p>Bonus Reading. Larry Osterman once said:</p>
<p>&gt; We actually built a version of NT with alignment exceptions turned on for x86 (you can do that as Skywing mentioned). We quickly turned it off, because of the number of apps that broke :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171523">
				<div id="div-comment-1171523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ChrisR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171523">
			January 16, 2015 at 9:01 am</a>		</div>

		<p>@IanBoyd: Fascinating, thanks for posting that! &nbsp;I suppose you already know this as well, but for anyone else who doesn&#39;t: You can at least view the total number of alignment faults the system is fixing up by viewing the SystemAlignment Fixups/sec performance counter in perfmon.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171533">
				<div id="div-comment-1171533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio &amp;#39;Grijan&amp;#39;</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171533">
			January 16, 2015 at 10:36 am</a>		</div>

		<p>@Anonymous: true. Furthermore, the stack has been just touched a few bytes away when setting the stack frame, and in the object itself when getting the vtable pointer. All three accesses are a few bytes away from each other, so they probably are in the same page. And it&#39;s extremely unlikely for a page with three recent accesses to be swapped out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171543">
				<div id="div-comment-1171543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171543">
			January 16, 2015 at 10:39 am</a>		</div>

		<p>Agreed &#8211; knowing when it was happening would be a very useful bit of information!!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171583">
				<div id="div-comment-1171583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171583">
			January 16, 2015 at 4:02 pm</a>		</div>

		<p>Damien: Then you are not counting like a C programmer (and certainly not like a C++ programmer).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171593">
				<div id="div-comment-1171593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171593">
			January 16, 2015 at 4:11 pm</a>		</div>

		<p>Damien: I suppose I ought to be helpful rather than just sarcastic, sorry. In case you&#39;re not aware, ranges in C and especially C++ are usually specified as a pointer to the first element and a pointer to one past the final element. This works out surprisingly better than pointers to the first and last elements for a number of reasons, especially in how confusing representing a zero-length range would be. For this reason, when you declare an array in C (and C++) the standard specifically guarantees that you&#39;re allowed to set a pointer to one past the last element (but not dereference it).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171603">
				<div id="div-comment-1171603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171603">
			January 16, 2015 at 4:30 pm</a>		</div>

		<p>@Someone: Ah, that makes sense. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171553">
				<div id="div-comment-1171553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171553">
			January 16, 2015 at 12:30 pm</a>		</div>

		<p>My first task after graduating from college was using C++ to write a compiler for a custom programming language. &nbsp;My code was completely littered with these types of casts (except I used C-Style instead of reinterpret_cast* with nary a care for alignment. &nbsp;Fortunately the target architecture was a MIPS platform that didn&#39;t like unaligned access, so I suspect in most cases I didn&#39;t have a major performance issue.</p>
<p>*After supporting that compiler for 10 years, I deeply regretted using C-Style casts due to several cases where I accidentally cast away a const and then trying to deal with &quot;impossible&quot; changes to variables </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171633">
				<div id="div-comment-1171633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171633">
			January 18, 2015 at 3:01 am</a>		</div>

		<p>@Antonio: There is no vtable. The class is not derived, and lack of a virtual d&#39;tor inhibits that it will (should) be derived from. The type is always known at compiletime, and no vtable indirection is required or generated by the compiler. However, as you note, since the stack has just been touched, and all objects used in the assignment are on the stack. This does make it extremely unlikely for this part of the stack to get paged out.</p>
<div class="post">[<em>Indeed, if there had been a vtable, then the alignment problem would not have existed, because the vtable itself must be aligned. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171643">
				<div id="div-comment-1171643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonas 'Sortie' Termansen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171643">
			January 18, 2015 at 1:30 pm</a>		</div>

		<p>Dereferencing the misaligned pointer the original code is undefined behavior.</p>
<div class="post">[<em>But why does this undefined behavior result in an assignment statement taking all of the CPU? -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171813">
				<div id="div-comment-1171813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Axel Rietschin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171813">
			January 19, 2015 at 5:12 am</a>		</div>

		<p>In addition to be super-costly, misaligned accesses also turn atomic fetch and store operations into non-atomic ones, in particular in the software-based workaround case. This may have serious implications regarding correctness, or at the very last add to the total cost (lock) and introduce a machine-wide bottleneck in a very insidious way&#8230; Additionally, I wonder how well InterlockedIncrement et al. would work when force-fed with an unaligned pointer?</p>
<div class="post">[<em>Check out the first Remark in <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683614%28v=vs.85%29.aspx">the documentation</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1171823">
				<div id="div-comment-1171823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Axel Rietschin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171823">
			January 19, 2015 at 5:15 am</a>		</div>

		<p>OK, the [4] indice is a small mistake than does not add or remove anything to the argument. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1171803">
				<div id="div-comment-1171803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1171803">
			January 18, 2015 at 10:23 pm</a>		</div>

		<p>@Jim, Damien: Actually, if you take the North American definition of &#39;through&#39; [up to and including (a particular point in an ordered sequence)], Raymond includes m_data[4], which means he has actually taken 5 bytes.</p>
<p>Note that Raymond is not *declaring* the array here, he is listing which elements he wants from it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172213">
				<div id="div-comment-1172213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Chiesa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1172213">
			January 20, 2015 at 8:22 am</a>		</div>

		<p>This is an excellent example of where old-school knowing-how-things-actually-work has important practical application to contemporary HLL programming. Time was when every programmer learned about alignment as part-and-parcel of learning to program or, at worstt, early in his first project. </p>
<p>On the other hand, I&#39;d expect any compiler worth its salt to default to aligned data, &nbsp;and unaligned to be the exception&#8211;not the other way around, simply because that&#39;s the right/sane thing to do, from the sensible-engineering point of view: it would make for fewer errors/crashes, with less programmer effort, overall. &nbsp;A basic principle of engineering is that buggy systems should &quot;fail safe,&quot; and if your description is correct these compilers are implemented backwards in that respect. </p>
<p>The fact that &quot;the compiler isn&#39;t constrained to [do this]&quot; is no excuse; AT BEST that&#39;s a bug in the specs/standards themselves, period. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172283">
				<div id="div-comment-1172283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1172283">
			January 20, 2015 at 10:40 am</a>		</div>

		<p>Chris Chiesa: I don&#39;t see a problem with the compiler. The user is using a char array which gets 1-byte aligned. Are you saying that the compiler should detect that the user is at some point reinterpreting the chars as ints and change the alignment of the struct? What alignment should the compiler choose? Or are you saying that all char arrays should have more coarse alignment?</p>
<p>I&#39;m curious how you think the specs/standards could be improved in this respect.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172423">
				<div id="div-comment-1172423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150116-00/?p=43133#comment-1172423">
			January 21, 2015 at 6:21 am</a>		</div>

		<p>@Chris Chiesa: I would agree with your observation, that this is an excellent example where under-the-hood knowledge is applicable to HLL programming. I do not agree with your conclusion, though: Compilers should not make up for programmer mistakes. The solution is given in the article: &quot;[&#8230;] Use a discriminated union. That is, after all, what you are trying to emulate in the first place.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

