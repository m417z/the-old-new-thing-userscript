<html>
<head>
<title>Adding a lookup control to the dictionary: Just getting it on the screen</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Adding a lookup control to the dictionary: Just getting it on the screen</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 11, 2005 / year-entry #222</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050811-08/?p=34613</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>0</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When we last left the dictionary project, we were able to display the dictionary entries but hadn't yet gotten around to searching it. Today, we'll place the lookup control, though we won't hook it up until next time. First, we give the edit control an ID and create some member variables to keep track of...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When we last left the dictionary project,
we were able to display the dictionary entries
but hadn't yet gotten around to searching it.
Today, we'll place the lookup control, though we won't
hook it up until next time.
</p>
<p>
First, we give the edit control an ID and create some member variables
to keep track of it.
</p>
<pre>
class RootWindow : public Window
{
 ...
 enum {
  IDC_LIST = 1,
  <font COLOR=blue>IDC_EDIT = 2,</font>
 };
 ...
private:
 HWND m_hwndLV;
 <font COLOR=blue>HWND m_hwndEdit;
 int  m_cyEdit;</font>
 COLORREF m_clrTextNormal;
 Dictionary m_dict;
};
</pre>
<p>
Of course, we need to create the edit control, too.
</p>
<pre>
LRESULT RootWindow::OnCreate()
{
 ...
 ListView_SetItemCount(m_hwndLV, m_dict.Length());

 <font COLOR=blue>m_hwndEdit = CreateWindow(TEXT("edit"), NULL,
                  WS_VISIBLE | WS_CHILD | WS_TABSTOP |
                  ES_LEFT | ES_AUTOHSCROLL,
                  0, 0, 0, 0,
                  m_hwnd,
                  (HMENU)IDC_EDIT,
                  g_hinst,
                  NULL);
 if (!m_hwndEdit) return -1;

 HFONT hfLV = GetWindowFont(m_hwndLV);
 SetWindowFont(m_hwndEdit, hfLV, FALSE);

 m_cyEdit = 0;
 HDC hdc = GetDC(m_hwndEdit);
 if (hdc) {
  HFONT hfPrev = SelectFont(hdc, hfLV);
  if (hfPrev) {
   SIZE siz = { 0, 0 };
   if (GetTextExtentPoint32(hdc, TEXT("0"), 1, &amp;siz)) {
     RECT rc = { 0, 0, siz.cx, siz.cy };
     AdjustWindowRectEx(&amp;rc, GetWindowStyle(m_hwndEdit), FALSE,
                             GetWindowExStyle(m_hwndEdit));
     m_cyEdit = rc.bottom - rc.top;
   }
   SelectFont(hdc, hfPrev);
  }
  ReleaseDC( m_hwndEdit, hdc);
 }
 if (!m_cyEdit) return -1;</font>

 return 0;
}
</pre>
<p>
After creating it, we give it the same font that the listview
is using, so that they match.
We then measure that font to figure out how big the edit control needs
to be in order to accomodate the text.
</p>
<p>
We use this size information to guide how we lay out our window.
</p>
<pre>
LRESULT RootWindow::HandleMessage(
                          UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 ...
  case WM_SIZE:
   <font COLOR=blue>if (m_hwndEdit) {
    SetWindowPos(m_hwndEdit, NULL, 0, 0,
                 GET_X_LPARAM(lParam), m_cyEdit,
                 SWP_NOZORDER | SWP_NOACTIVATE);
   }</font>
   if (m_hwndLV) {
    SetWindowPos(m_hwndLV, NULL, 0, <font COLOR=blue>m_cyEdit,
                 GET_X_LPARAM(lParam),
                 GET_Y_LPARAM(lParam) - m_cyEdit,</font>
                 SWP_NOZORDER | SWP_NOACTIVATE);
   }
   return 0;
 ...
}
</pre>
<p>
The edit control goes at the top of our client area, and the listview
goes directly below it.
</p>
<p>
Finally,
we add a call to
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/dialogboxes/dialogboxreference/dialogboxfunctions/isdialogmessage.asp">
the <code>IsDialogMessage</code> function</a>
to our message loop,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/10/21/55384.aspx">
making the dialog manager do the heavy lifting of
navigating around our window</a> via the Tab and Shift+Tab keys.</p>
<pre>
  RootWindow *prw = RootWindow::Create();
  if (prw) {
   ShowWindow(prw-&gt;GetHWND(), nShowCmd);
   MSG msg;
   while (GetMessage(&amp;msg, NULL, 0, 0)) {
    <font COLOR=blue>if (IsDialogMessage(prw-&gt;GetHWND(), &amp;msg)) {
     /* processed */
    } else {</font>
     TranslateMessage(&amp;msg);
     DispatchMessage(&amp;msg);
    <font COLOR=blue>}</font>
   }
  }
</pre>
<p>
When you run this program, observe that the edit control
and listview position themselves correctly as you resize the
window, and that you can Tab between them.
But there's still something wrong:
Focus always returns to the listview when you
switch away and back.
That's because I missed a spot.
</p>
<pre>
class RootWindow : public Window
{
private:
 HWND m_hwndLV;
 HWND m_hwndEdit;
 <font COLOR=blue>HWND m_hwndLastFocus;</font>
 int  m_cyEdit;
 ...
};

LRESULT RootWindow::OnCreate()
{
 ...
 if (!m_cyEdit) return -1;

 <font COLOR=blue>m_hwndLastFocus = m_hwndEdit;</font>

 return 0;
}

LRESULT RootWindow::HandleMessage(
                          UINT uMsg, WPARAM wParam, LPARAM lParam)
{
 ...
  case WM_SETFOCUS:
   if (<font COLOR=blue>m_hwndLastFocus</font>) {
    SetFocus(<font COLOR=blue>m_hwndLastFocus</font>);
   }
   return 0;

  <font COLOR=blue>case WM_ACTIVATE:
   if (wParam == WA_INACTIVE) {
    m_hwndLastFocus = GetFocus();
   }
   break;</font>
 ...
}
</pre>
<p>
The new member variable keeps track of which control had focus
last.  We update it when we lose activation and restore it
when we regain focus.
(Its initial value is set at creation so we know whom to give focus
to when the window is shown for the first time.)
</p>
<p>
Okay, that was an awful lot of typing without very much payoff.
Next time, we'll start searching the dictionary.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

