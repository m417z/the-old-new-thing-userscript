<html>
<head>
<title>Consequences of the scheduling algorithm: Sleeping doesn't always help</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Consequences of the scheduling algorithm: Sleeping doesn&#8217;t always help</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 4, 2005 / year-entry #290</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">More often I see the reverse of the "Low priority threads can run even when higher priority threads are running" problem. Namely, people who think that Sleep(0) is a clean way to yield CPU. For example, they might have run out of things to do and merely wish to wait for another thread to produce...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>More often I see the reverse of the "Low priority threads can run even when higher priority threads are running" problem. Namely, people who <a href="http://groups.google.com/group/comp.os.ms-windows.programmer.win32/browse_frm/thread/006ffcdccd0fdda3/269e9a1dc4e371d7#269e9a1dc4e371d7"> think that <code>Sleep(0)</code> is a clean way to yield CPU</a>. For example, they might have run out of things to do and merely wish to wait for another thread to produce some work.</p>
<p> Recall that the scheduler looks for the highest priority runnable thread, and if there is a tie, all the candidates share CPU roughly equally. A thread can call <code>Sleep(0)</code> to relinquish its quantum, thereby reducing its share of the CPU. Note, however, that this does not guarantee that other threads will run. </p>
<p> If there is a unique runnable thread with the highest priority, it can call <code>Sleep(0)</code> until the cows come home, and it will nevertheless not relinquish CPU. That's because sleeping for zero milliseconds release the quantum but leaves the thread runnable. And since it is the only runnable thread with the highest priority, it immediately gets the CPU back. Sleeping for zero milliseconds is like going to back of the line. If there's nobody else in line, you didn't actually yield to anyone! </p>
<p> Therefore, if you use <code>Sleep(0)</code> as an ineffective yield, you will never allow lower priority threads to run. This means that various background activities (such as indexing) never get anywhere since your program is hogging all the CPU. What's more, the fact that your program never actually releases the CPU means that the computer will never go into a low-power state. Laptops will drain their batteries faster and run hotter. Terminal Servers will spin their CPU endlessly. </p>
<p> The best thing to do is to wait on a proper synchronization object so that your thread goes to sleep until there is work to do. If you can't do that for some reason, at least sleep for a nonzero amount of time. That way, for that brief moment, your thread is not runnable and other threads&mdash;including lower-priority threads&mdash;get a chance to run. (This will also reduce power consumption somewhat, though not as much as waiting on a proper synchronization object.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-310673">
				<div id="div-comment-310673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.thespoke.net/blogs/travisowens/' rel='external nofollow' class='url'>Travis Owens</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310673">
			October 4, 2005 at 10:13 am</a>		</div>

		<p>Interesting fact to know, but I can&#8217;t imagine why anybody would ever think Sleep(0) was a good idea in the first place.</p>
<p>It seems common sense one would read this as a pointless roadblock that just eats cpu because we&#8217;re executing a step that doesn&#8217;t actually do anything, so no sleep&#8217;ing is going on.  A microscopic step, but still a step.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-310713">
				<div id="div-comment-310713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310713">
			October 4, 2005 at 11:06 am</a>		</div>

		<p>I know I&#8217;ve done this&#8230; as a pure yeild, in a reader-writer lock for a low contention scenarios (readers:writers ~ 1000000:1) so wanted the optimal reader entry (no writer) being no more than an interloced operation. But this meant there was some signigificant cost on a writer entry (spin on InterlockedCompareExchange/Sleep(0)).</p>
<p>TANSTAAFL, if used where there were a lot of writers, you would see the cost.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-310733">
				<div id="div-comment-310733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">denis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310733">
			October 4, 2005 at 11:25 am</a>		</div>

		<p>What about SwitchToThread(), is that any different (or better) than Sleep(0)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-310763">
				<div id="div-comment-310763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310763">
			October 4, 2005 at 12:06 pm</a>		</div>

		<p>Cool! I must confess to being one of those who has always believed that calling sleep(0) was a good way to tell the OS &quot;Well, I&#8217;m done &#8211; you can allocate my remaining CPU time to someone else&quot;.</p>
<p>sigh.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-310803">
				<div id="div-comment-310803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">X</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310803">
			October 4, 2005 at 1:13 pm</a>		</div>

		<p>Will Sleep(1) work?  Won&#8217;t that it give a whole quantom to a different thread?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-310813">
				<div id="div-comment-310813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310813">
			October 4, 2005 at 1:41 pm</a>		</div>

		<p>Invariably, I end up using sleep instead of a &quot;proper synchronization object&quot; when work with files.  For instance, a log file used by multiple processes.   I&#8217;ve always wanted some form of a &quot;file changed&quot; notification and &quot;file is no longer locked&quot; notification.</p>
<p>Is there a way to do this without polling?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-310823">
				<div id="div-comment-310823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joseph Bubba</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310823">
			October 4, 2005 at 1:41 pm</a>		</div>

		<p>A while back I had to modify a piece of code that started two threads (A and B).  The first thread (A) would do some initialization work and then lower it&#8217;s priority under tha assumption that the second thread (B) of normal priority would come in immediately thereafter and finish up the initialization.  In some cases though, it seemed like thread A kept running for a short while before thread B would come in and finish up the initialization.  It&#8217;s almost like the call to SetThreadPriority(THREAD_PRIORITY_BELOW_NORMAL) did not trigger the scheduler to reschedule the threads immediately.  Note that this scenario was exhibited on a single processor machine.</p>
<p>Do you have any insight on specifically when the scheduler reschedules threads?  Maybe this is where a Sleep(0) might have helped?</p>
<p>In the end, I added some specific synchronization code in to fix the problem and force the proper order of operations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-310843">
				<div id="div-comment-310843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310843">
			October 4, 2005 at 2:26 pm</a>		</div>

		<p>John,</p>
<p>You mean besides the filesystem change notification API&#8217;s?</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/obtaining_directory_change_notifications.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/obtaining_directory_change_notifications.asp</a><br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-310863">
				<div id="div-comment-310863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310863">
			October 4, 2005 at 3:09 pm</a>		</div>

		<p>The File Change Notification APIs don&#8217;t help here.  You pretty much have to just do back off.  That said, you would never &quot;back off&quot; using a CPU-bound spin, so Sleep(0) and the quantum-ending effects would not be noticable.</p>
<p>There&#8217;s no good solution for this one.  Asynchronous/cancellable file creation/opening might help but even at the NT layer I don&#8217;t think that there&#8217;s a way to block on waiting for handles with incompatible sharing flags to be closed.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-310883">
				<div id="div-comment-310883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310883">
			October 4, 2005 at 3:55 pm</a>		</div>

		<p>The File Change Notification APIs help a lot here &#8211; in fact, they&#8217;re exactly what is required. You ask for an object to be signalled when the file changes, and wait for the object to be signalled. This allows any other threads/processes to run and modify the file, and then as soon as your thread is eligable to run, it will stop waiting. There&#8217;s no screwing around with sleeping or &quot;backing off&quot; &#8211; you just wait without using up CPU time.</p>
<p>To quote from the docs referenecd just above: &quot;This function also returns a handle that can be waited on by using the wait functions&quot; &#8211; which includes our friend WaitForMultipleObjectsEx.</p>
<p>If you don&#8217;t know and love WaitForMultipleObjectsEx and its friends in detail you&#8217;re never going to be able to write high quality threaded applications on Windows, and you&#8217;ll have trouble writing software that isn&#8217;t a CPU hog causing problems for every other application on the system.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-310903">
				<div id="div-comment-310903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310903">
			October 4, 2005 at 4:46 pm</a>		</div>

		<p>I think Sleep(0) is a holdover from cooperative multi-tasking days (Windows 3.x), where the scheduler couldn&#8217;t pre-empt your thread, so you had to perform some specific yielding operation. Sleep(0) sure looks like one&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-310933">
				<div id="div-comment-310933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Nicholas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310933">
			October 4, 2005 at 10:21 pm</a>		</div>

		<p>When trying to do realtime stuff this is most annoying&#8230;   Sleep(0) will yield to higher or equal priority threads, Sleep(1) will go away for up to 15ms, which sucks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-310963">
				<div id="div-comment-310963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Moz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310963">
			October 5, 2005 at 1:34 am</a>		</div>

		<p>File Change Notification APIs only help if the other file user is guaranteed to change the file before releasing it. If it ever releases the file unchanged you&#8217;re back to polling. But hopefully on a sleep() longer than 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-310973">
				<div id="div-comment-310973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.articulatebabble.org' rel='external nofollow' class='url'>vince</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-310973">
			October 5, 2005 at 1:43 am</a>		</div>

		<p>&quot;When trying to do realtime stuff this is most annoying&#8230; Sleep(0) will yield to higher or equal priority threads, Sleep(1) will go away for up to 15ms, which sucks.&quot;</p>
<p>Agree 100%. This problem shows up in game development all the time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-311023">
				<div id="div-comment-311023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-311023">
			October 5, 2005 at 10:00 am</a>		</div>

		<p>&quot;It&#8217;s almost like the call to SetThreadPriority(THREAD_PRIORITY_BELOW_NORMAL) did not trigger the scheduler to reschedule the threads immediately.&quot;</p>
<p>That&#8217;s exactly what I found, too. A Sleep(0) after the SetThreadPriority call seemed to help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311093">
				<div id="div-comment-311093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ringrose.name' rel='external nofollow' class='url'>Ian Ringrose</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-311093">
			October 5, 2005 at 11:10 am</a>		</div>

		<p>I the past I have used sleep(0) to mean “This is a good time to switch threads”  E.g. by giving up some of my CPU time at the top of the loop I am less likely to be switched out while I have a lot of locks etc in the middle of the loop</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-311843">
				<div id="div-comment-311843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-311843">
			October 9, 2005 at 12:15 am</a>		</div>

		<p>And then there&#8217;s YieldProcessor(), which (I read in MSDN) you need when doing spin-locks on hyperthreaded systems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-343643">
				<div id="div-comment-343643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sigs.sqlpass.org/Blogs/AllBlogs/tabid/50/ctl/ArticleView/mid/368/articleId/163/KenHendersonSleepingvsYielding.aspx' rel='external nofollow' class='url'>Professional Association for SQL Server (PASS) SIG</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-343643">
			February 6, 2006 at 11:36 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-498863">
				<div id="div-comment-498863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.ugidotnet.org/puntorete/archive/2007/05/03/77244.aspx' rel='external nofollow' class='url'>PuntoRete</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-498863">
			May 3, 2007 at 10:46 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-729633">
				<div id="div-comment-729633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.ijw.co.nz/chris/index.php/2009/04/theres-a-third-hard-thing-about-concurrency/' rel='external nofollow' class='url'>Chris on Software &raquo; Blog Archive &raquo; There&rsquo;s a third &ldquo;hard thing&rdquo; about concurrency</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20051004-09/?p=33923#comment-729633">
			April 27, 2009 at 6:52 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blogs.ijw.co.nz/chris/index.php/2009/04/theres-a-third-hard-thing-about-concurrency/" rel="nofollow">http://blogs.ijw.co.nz/chris/index.php/2009/04/theres-a-third-hard-thing-about-concurrency/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

