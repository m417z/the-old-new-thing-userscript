<html>
<head>
<title>What are the rules for CoMarshalInterface and CoUnmarshalInterface?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What are the rules for CoMarshalInterface and CoUnmarshalInterface?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 22, 2015 / year-entry #222</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we looked at the rules for Co­Marshal­Inter­Thread­Interface­In­Stream and Co­Get­Interface­And­Release­Stream, the functions you use for sharing an object with another thread in the sample case where you there is only one other thread you want to share with, and you need to share it only once. Let's continue with the Q&A. What if I...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<!-- backref: What are the rules for CoMarshalInterThreadInterfaceInStream and CoGetInterfaceAndReleaseStream? -->
Last time,
we looked at the rules for
<code>Co&shy;Marshal&shy;Inter&shy;Thread&shy;Interface&shy;In&shy;Stream</code>
and
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>,
the functions you use for sharing an object with another thread
in the sample case where you there is only one other thread you want
to share with, and you need to share it only once.
Let's continue with the Q&amp;A.</p>
<p>
<b>What if I want to unmarshal more than once?</b>
</p>
<p>
In this case, you use the more general
<code>Co&shy;Marshal&shy;Interface</code>.
You can pass the
<code>MSHLFLAGS_<wbr>TABLE&shy;STRONG</wbr></code> flag
to indicate that you want to be able to unmarshal many times.
In that case, you need to tell COM when you are finished unmarshaling
so it knows when to clean up,
because it cannot assume that you are finished after the first unmarshal.
The pattern goes like this:
</p>
<ul>
<li>On the originating apartment, create an empty stream.
</li>
<li>On the originating apartment, call
<code>Co&shy;Marshal&shy;Interface</code> with the empty stream
and the
<code>MSHLFLAGS_<wbr>TABLE&shy;STRONG</wbr></code> flag.
</li>
<li>Transmit a <i>copy</i> of the stream
    to each of the threads you want to share the object with.
    (You need to use a copy so that the multiple threads don't
    all try to use the same stream and step on each other's
    stream position.
    Alternatively, you could be clever and use the same stream,
    but use a mutex or other synchronization object to make sure
    only one thread uses the stream at a time.)
</li>
<li>The receiving threads rewind the stream copy to the beginning.
</li>
<li>The receiving threads call
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
    to reconstitute the object from the stream and release the stream.&sup1;
</li>
<li>The receiving threads happily accesses the object.
</li>
<li>When the originating apartment decides that it doesn't want
    to share the object any more, it calls
    <code>Co&shy;Release&shy;Marshal&shy;Data</code> to tell
    COM to clean up all the bookkeeping.
</li>
<li>The originating apartment destroys the master stream.
</li>
</ul>
<p>
<b>What is the relationship between
<code>Co&shy;Marshal&shy;Inter&shy;Thread&shy;Interface&shy;In&shy;Stream</code>
and
<code>Co&shy;Marshal&shy;Interface</code>?</b>
</p>
<p>
The
<code>Co&shy;Marshal&shy;Inter&shy;Thread&shy;Interface&shy;In&shy;Stream</code>
function is a helper function that does the following:
</p>
<ul>
<li><code>Create&shy;Stream&shy;On&shy;HGlobal</code>.
</li>
<li><code>Co&shy;Marshal&shy;Interface</code> with
<code>MSHCTX_<wbr>INPROC</wbr></code> and
<code>MSHLFLAGS_<wbr>NORMAL</wbr></code>.
</li>
<li>Rewinds the stream to the beginning.
</li>
<li>Returns the stream.
</li>
</ul>
<p>
Similarly,
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
is a helper function that does
</p>
<ul>
<li><code>Co&shy;Unmarshal&shy;Interface</code>
</li>
<li><code>IStream::Release</code>
</li>
</ul>
<p>
Since a one-shot marshal to another thread within the same process
is by far the most common case,
the helper functions exist to let you get the job done with just
one function call on each side.
</p>
<p>
<b>What if I want to marshal only once, but to another process?</b>
</p>
<p>
Again, you need to use the more general
<code>Co&shy;Marshal&shy;Interface</code> function.
This time, you pass the
<code>MSHCTX_<wbr>LOCAL</wbr></code> flag if you intend to marshal
to another process on the same computer,
or the
<code>MSHCTX_<wbr>DIFFERENT&shy;MACHINE</wbr></code> flag if you intend to marshal
to another computer.
For the marshal flags, use
<code>MSHLFLAGS_<wbr>NORMAL</wbr></code> to indicate that you want a one-shot
marshal.
The recipient can unmarshal with
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>
as before.
</p>
<p>
<b>What if I want to marshal to another process and unmarshal more than
once?</b>
</p>
<p>
This is just combining the two axes.
On the marshaling side, you do the same as a one-shot cross-process
marshal, except you pass the
<code>MSHLFLAGS_<wbr>TABLE&shy;STRONG</wbr></code> flag
to indicate that you want to be able to unmarshal many times.
You then send copies of that stream to all your intended recipients,
and each of them calls
<code>Co&shy;Get&shy;Interface&shy;And&shy;Release&shy;Stream</code>,
just like before.
</p>
<p>
<b>Can you marshal a proxy? Does it get all Inception-like?</b>
</p>
<p>
Go ahead and marshal a proxy.
COM detects that you're marshaling a proxy and does the Right Thing.
For example, if you marshal a proxy back to the originating thread,
then when you unmarshal, you get a direct pointer again!
</p>
<p>
&sup1; If the thread wants to unmarshal from the stream than once,
it could call
<code>Co&shy;Unmarshal&shy;Interface</code> and not release the stream
immediately.
Then each time it wants to unmarshal from the stream, it calls
<code>Co&shy;Unmarshal&shy;Interface</code> again,
releasing the stream only when it has decided that it will not do
any more unmarshaling.
This seems silly because once you unmarshal the first time, you can
just <code>Add&shy;Ref</code> the pointer if you want to make
another copy.
I guess this is for the case where the thread wants to pass the stream
off to yet another thread?
Definitely a fringe case.
</p></p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1197291">
				<div id="div-comment-1197291" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301#comment-1197291">
			October 22, 2015 at 7:47 am</a>		</div>

		<p>Re: the footnote &#8211; could that also be used in combination with the parenthetical in bullet 3 &quot;(Alternatively, you could be clever and use the same stream, but use a mutex or other synchronization object to make sure only one thread uses the stream at a time)&quot;? As in:</p>
<p>The originating thread creates the stream, and passes the original stream, not a copy, to the other threads.</p>
<p>Guarded by a mutex, each of them rewinds the stream and unmarshals the object *without* the ReleaseStream helper.</p>
<p>When it&#39;s done sharing, the original thread is responsible for releasing the stream as well as letting COM know it&#39;s done.</p>
<p>Another thing I&#39;m curious about: Does the use of a stream imply that multiple objects can be marshaled into the same stream, or combined in it with other data? Could you create a single stream and marshal several objects consecutively into it, and then have some other thread consecutively unmarshal them all out? Could you do a poor-man&#39;s string-to-COM-object dictionary in a stream by consecutively writing string-object-string-object? (as long as your strings were written with a known delimiter or tagged with their length, of course)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1197281">
				<div id="div-comment-1197281" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301#comment-1197281">
			October 22, 2015 at 8:01 am</a>		</div>

		<p>@Stuart: To answer your question: It is possible, somewhere I have written code for drag+drop of COM enabled objects that does that via ::CreateStreamOnHGlobal + looping over all selected items and using ::CoMarshalInterface on each one. To unmarshal you rewind the stream once and then call ::CoUnmarshalInterface until it fails. (Or of course you could be fancy and prepend the count into the stream)</p>
<div class="post">[<em>Indeed, packing multiple chunks of marshaling info into one stream is how COM marshals a function call that takes multiple parameters. It doesn&#39;t create one stream for each parameter. Instead, it creates one massive stream and puts all the parameters inside it. That way, you have to transfer only one chunk of data rather than a bunch of little chunks. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-davebacher even thread-even depth-1" id="comment-1197241">
				<div id="div-comment-1197241" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301#comment-1197241">
			October 22, 2015 at 3:37 pm</a>		</div>

		<p>@Raymond:</p>
<p>&quot;&sup1; If the thread wants to unmarshal from the stream than once, it could call Co&shy;Unmarshal&shy;Interface and not release the stream immediately. Then each time it wants to unmarshal from the stream, it calls Co&shy;Unmarshal&shy;Interface again, releasing the stream only when it has decided that it will not do any more unmarshaling. This seems silly because once you unmarshal the first time, you can just Add&shy;Ref the pointer if you want to make another copy. I guess this is for the case where the thread wants to pass the stream off to yet another thread? Definitely a fringe case. &quot;</p>
<p>If I am IIS, this optimization probably doesn&#39;t look so silly.</p>
<p>If I have a series of Tasks accessing a COM object, running on a Thread Pool &#8212; theoretically this optimization becomes inner loop in an application measured by how many requests it can process a second.</p>
<div class="post">[<em>Your scenario is different. In your case, a potentially different thread unmarshals each time. My scenario was the same thread unmarshaling multiple times, which is silly; the thread should just AddRef the object it unmarshaled the first time. Much faster. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-msn odd alt thread-odd thread-alt depth-1" id="comment-1197111">
				<div id="div-comment-1197111" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151022-00/?p=91301#comment-1197111">
			October 24, 2015 at 3:13 am</a>		</div>

		<p>I was thinking that you might be even more clever and build an IStream on top of a queue/fifo and run CoMarshalInterface and CoUnmarshalInterface on each end simultanously. But then it wouldn&#39;t really be an IStream if it fails on Seek. The question is of course whether Co[Un]MarshalInterface really needs a seekable stream or if it&#39;s just a matter of ISequentialStream coming late to the game[0]</p>
<p>[0]: End of 97 as part of OLE DB it would seem. Dunno when it became the base interface of IStream. Or well it isn&#39;t really the base interface of IStream since QueryInterface need not respond to IID_ISequentialStream[1].</p>
<p>[1]: Obviously because it would break backwards compatibility. Microsoft Research really need to get working on that time machine[2].</p>
<p>[2]: Actually it doesn&#39;t matter how long it takes them.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

