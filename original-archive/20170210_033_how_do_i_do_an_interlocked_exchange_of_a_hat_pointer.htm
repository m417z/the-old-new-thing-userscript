<html>
<head>
<title>How do I do an interlocked exchange of a hat pointer?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I do an interlocked exchange of a hat pointer?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 10, 2017 / year-entry #34</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Perform a raw exchange of the underlying native pointer.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you work with C++/CX, then you spend a lot of time working with
<a HREF="https://blogs.msdn.microsoft.com/vcblog/2012/09/17/ccx-part-2-of-n-types-that-wear-hats/">
types that wear hats</a>.
These are basically super-smart pointers.
In addition to performing automatic <code>Add&shy;Ref</code>
and <code>Release</code>,
they also perform automatic <code>Query&shy;Interface</code>
if you call a method that belongs to an interface other than
the default one.
</p>
<p>
How do you perform an atomic exchange of these things?
</p>
<p>
The trick is realizing that a hat pointer is the same size as a
raw pointer because it's
physically represented as
a pointer to the default interface of the underlying type.
Therefore, you can perform the interlocked operation on the raw pointer,
provided of course that the thing you are exchanging in can legally
be placed in such a pointer.
</p>
<p>
Even if a hat pointer weren't the size of a raw pointer,
what's important are that (1)&nbsp;it's the size of something
that can be atomically exchanged, and
(2)&nbsp;it is self-contained, without dependencies on other memory.
</p>
<pre>
template&lt;typename T, typename U&gt;
T^ InterlockedExchangeRefPointer(T^* target, U value)
{
  static_assert(sizeof(T^) == sizeof(void*),
    "InterlockedExchangePointer is the wrong size");
  T^ exchange = value;
  void** rawExchange = reinterpret_cast&lt;void**&gt;(&amp;exchange);
  void** rawTarget = reinterpret_cast&lt;void**&gt;(target);
  *rawExchange = static_cast&lt;IInspectable*&gt;(
    InterlockedExchangePointer(rawTarget, *rawExchange));
  return exchange;
}
</pre>
<p>
Okay, what's going on here?
</p>
<p>
First, we verify our assumption: Namely, that a hat pointer
is the same size as a raw pointer,
because we're about to exchange the contents of the two things,
and we need to be sure that we're exchanging the correct number
of bytes.
</p>
<p>
Next, we convert the <code>value</code> to a compatible pointer.
This allows you to pass anything convertible to <code>T^</code>
as the second parameter, rather than having to pass something
that is exactly a <code>T^</code>.
If the function had bee prototyped as
</p>
<pre>
template&lt;typename T&gt;
T^ InterlockedExchangeRefPointer(T^* target, T^ value)
</pre>
<p>
then you would have gotten type inference errors if you pass
a second parameter that is not literally a <code>T^</code>,
but which can be converted to one
(for example, <code>nullptr</code>)
because the compiler can't figure out what <code>T</code> should be.
</p>
<p>
Once we've converted the <code>value</code> into a <code>T^</code>
we can proceed with the raw exchange of contents.
The <code>raw&shy;Exchange</code> variable points to the variable
<code>exchange</code>, but viewing it as a raw pointer rather than
a hat pointer.
Similarly, the
<code>raw&shy;Target</code> variable points to the target
as a raw pointer.
</p>
<p>
We then ask
<code>Interlocked&shy;Exchange&shy;Pointer</code> to do the dirty
work of exchanging the values.
We put the previous value of the target back into <code>exchange</code>
(via the alias known as <code>raw&shy;Exchange</code>).
</p>
<p>
Putting the answer back into <code>exchange</code> lets us return
the smart version of the variable back to our caller.
</p>
<p>
So that's it.
This is really just a fancy way of writing
</p>
<pre>
THING InterlockedExchangeThing(Thing* thing, Thing newThing)
{
 newThing = InterlockedExchangeSizeOfThing(thing, newThing);
 return newThing;
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1284045">
				<div id="div-comment-1284045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284045">
			February 10, 2017 at 7:47 am</a>		</div>

		<p>Is this how System::Threading::Interlocked::Exchange(T%, T) (from .Net 3.5 onwards) works?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf odd alt depth-2 parent" id="comment-1284055">
				<div id="div-comment-1284055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284055">
			February 10, 2017 at 7:49 am</a>		</div>

		<p>Whoops, I misread the first paragraph, my bad.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1284115">
				<div id="div-comment-1284115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284115">
			February 10, 2017 at 9:22 am</a>		</div>

		<p>But to answer your question, no, this approach is insufficient for .NET tracking handles.  In particular, the second parameter to InterlockedExchangePointer is passing a pointer *by-value*, and the garbage collector isn&#8217;t aware of this copy, because it&#8217;s a native type, exposing a race condition.  Should the garbage collector run between argument setup and the actual interlocked instruction, and moves the object, it won&#8217;t update the by-value copy of the pointer, and the result is a dangling tracking handle.<br />
I&#8217;m not sure how System::Threading solves this, it could either be by forcing inclusion of the intermediate copies in the metadata used by the garbage collector, by suspending garbage collection for the length of the function call, or pinning the objects which are targets of the tracking handles being exchanged.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fredericmagnyf odd alt depth-4" id="comment-1284225">
				<div id="div-comment-1284225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284225">
			February 11, 2017 at 4:16 am</a>		</div>

		<p>Thanks for this info.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1284065">
				<div id="div-comment-1284065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284065">
			February 10, 2017 at 7:59 am</a>		</div>

		<p>My main concern with the code is that it&#8217;s a template and it could be inlined. Once inlined, and given that the pointers are being reinterpret_cast, I&#8217;d be afraid of what conmpiler optimization could go wrong, given that the change of bits is hidden from teh compiler.</p>
<p>Imagine the following code:</p>
<p>XYZ^ ptr = &#8230;;</p>
<p>if (ptr) { &#8230; } // now compiler can assume to already know if ptr is null or not.</p>
<p>InterlockedExchange(&#8230;); // inlined, so compiler &#8220;knows&#8221; the implementation but some of it uses reinterpret_cast</p>
<p>if (ptr) { &#8230; } // Maybe compiler optimize this second null check?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1284195">
				<div id="div-comment-1284195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284195">
			February 10, 2017 at 3:50 pm</a>		</div>

		<p>In theory, but not in any scope you care about. The call chain eventually calls InterlockedExchange, which can&#8217;t be inlined and for which the compiler must assume can do anything to stuff at global scope. So all you have to do is make sure it isn&#8217;t a stack reference (or what&#8217;s the point of InterlockedExchange). Static doesn&#8217;t put you back to disaster because the compiler can&#8217;t know InterlockedExchange isn&#8217;t mutually recursive with you.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-3" id="comment-1284485">
				<div id="div-comment-1284485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284485">
			February 13, 2017 at 9:42 am</a>		</div>

		<p>InterlockedExchange is an intrinsic function, but the compiler knows not to optimize it any further.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1284175">
				<div id="div-comment-1284175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284175">
			February 10, 2017 at 1:39 pm</a>		</div>

		<p>Man those /CX posts have some fun comments.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1284285">
				<div id="div-comment-1284285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284285">
			February 12, 2017 at 3:11 am</a>		</div>

		<p>Microsoft, about year 2010:<br />
Manager: &#8220;OK guys, focus! what do we know about C++ developers?&#8221;<br />
Worker A:&#8221;They&#8217;re religious about their practices and they hate anything that even remotely resemble manged code&#8221;<br />
Manager: &#8220;OK great, what else? time is wasting guys!&#8221;<br />
Worker B: &#8220;They hate COM so bad they prefer roll their own implementation instead&#8221;<br />
Manager: &#8220;OK then, here&#8217;s an idea: will take good old COM, and extend C++ with ugly symbols to support COM, and it will look like F****** C#!&#8221;<br />
Workers: clamp heavily.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-3" id="comment-1284495">
				<div id="div-comment-1284495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284495">
			February 13, 2017 at 9:43 am</a>		</div>

		<p>Don&#8217;t you mean year 2001?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1284275">
				<div id="div-comment-1284275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284275">
			February 12, 2017 at 2:42 am</a>		</div>

		<p>Disabling template deduction for value would be another possibility. Or you could use std::enable_if and std::is_convertible if you&#8217;re worried about overload resolution.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-even depth-1" id="comment-1284315">
				<div id="div-comment-1284315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170210-00/?p=95405#comment-1284315">
			February 12, 2017 at 7:54 am</a>		</div>

		<p>I&#8217;ll admit that when I see the hat(^) thing, I originally thought that was an addition to managed C++ code.</p>
<p>You see, most of the variable declarations there are in form of &#8220;Message^ h_Message  = gcnew Message;&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

