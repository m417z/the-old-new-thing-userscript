<html>
<head>
<title>But then we ran into problems when we started posting 10,000 messages per second</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>But then we ran into problems when we started posting 10,000 messages per second</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 26, 2009 / year-entry #26</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090126-00/?p=19393</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Once upon a time, a long, long time ago, there was a research team inside Microsoft who was working on alternate models for handling input. I don't know what eventually came of that project, and I don't even remember the details of the meeting, but I do remember the punch line, so I'm just going...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Once upon a time, a long, long time ago, there was a research team inside Microsoft who was working on alternate models for handling input. I don't know what eventually came of that project, and I don't even remember the details of the meeting, but I do remember the punch line, so I'm just going to make up the rest.</p>
<p> The research project broke up the duties of their system into a few components. The two that are important to the story are a driver component which received information from various hardware devices and transmitted that information via the <code>PostMessage</code> function to another component whose job it was to study those input messages and route them to the appropriate application. (In 16-bit Windows, the <code>PostMessage</code> function was specifically written so it could be called from device drivers during hardware interrupts.) Each time the driver received information from a hardware device, it posted a message to its helper program. </p>
<p> Everything seemed to go reasonably smoothly. The device driver received a hardware event, it posted a message to the helper program, and the helper program retrieved the message and processed it. But once they cranked up the hardware devices to produce information at a higher rate (and therefore produced input with much finer resolution), the events started coming in faster and faster, and their design started to collapse under the pressure. </p>
<p> The research team asked to meet with the user interface team to help work out their problems under load. They outlined their design and explained that it worked well at low data rates, "but then we ran onto problems when we started posting 10,000 messages per second." </p>
<p> At that point, the heads of all the user interface people just sat there and boggled for a few seconds. </p>
<p> "That's like saying your Toyota Camry has stability problems once you get over 500 miles per hour." </p>
<p> If you're going to be pumping huge quantities of data through the message queue, creating a separate message for each one is crazy. Think about it: Suppose you're posting 10,000 messages per second. The thread whose job it is to process the messages gets pre-empted and doesn't run for 50 milliseconds. That's 500 messages behind schedule already. Now suppose it takes a dozen page faults (which take 8ms each, say). Now you're another 1000 messages behind. Windows&nbsp;NT sets <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#536864"> an arbitrary limit of 10,000 unprocessed messages in a message queue</a> so that a runaway program won't drain the desktop heap and roach everything. A few hiccups in your process will quickly send you over that limit. </p>
<p> For this usage pattern, you want to switch from <i>one event per message</i> to a <i>signal on the transition</i> (or <i>edge triggering</i>). </p>
<p> When the first event occurs, post a single message to the helper program saying <i>there is work to do</i> and set a flag saying <i>helper window has been notified</i>. Meanwhile, stash the information you would have included in the message into a privately-managed queue. If an event arrives when the <i>helper window has been notified</i> flag is set, then don't post a message; just append the work item to the queue. When the helper window receives the <i>there is work to do</i> message, it calls back into the driver to say <i>Okay, give me some work to do</i>. After it does the work, it calls into the driver to say <i>Okay, what else do you want me to do?</i> (Alternatively, you can have the helper window grab the entire work list at once.) When the helper window asks for work to do and comes back empty-handed, then clear the <i>helper window has been notified</i> flag so the next time an event occurs, a new message will be posted to kick-start the helper window. </p>
<p> Commenter Hayden proposed a number of other mechanisms. The <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#540516"> <i>send a list of work items rather than just one</i></a> technique works well if you know when the list of work items is complete and therefore is ready to send. The second technique is the one I described here; it works well if the producer doesn't really know when each chunk of incoming work is finished, or if the work that comes in is continuous. The third mechanism merely avoids the message queue altogether and uses a semaphore instead. </p>
<p> The point is not to try to drive your Camry at 500 miles per hour. Find a way to get your work done while keeping the Camry well within its design parameters, or look for a different vehicle. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-703693">
				<div id="div-comment-703693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Spike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090126-00/?p=19393#comment-703693">
			January 26, 2009 at 10:29 am</a>		</div>

		<p>Wow, deja vu here. &nbsp;I once had a problem with my Honda Del Sol that the engine would hesitate and stutter if I drove at over 130mph for more than two hours continuously.</p>
<p>The garage could never reproduce the problem and when I told them exactly how to reproduce it they said &quot;Don&#8217;t do that.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-703743">
				<div id="div-comment-703743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090126-00/?p=19393#comment-703743">
			January 26, 2009 at 10:01 pm</a>		</div>

		<p>So, what you are saying is NOT to use windows? :)</p>
<p>is Linux an appropriate new vehicle? :)</p>
<p>what do you suggest? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-703763">
				<div id="div-comment-703763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090126-00/?p=19393#comment-703763">
			January 27, 2009 at 1:44 am</a>		</div>

		<p>Wow, these are the days before SetEvent, I&#8217;m guessing.</p>
<p>Create a manually-reset event, and helper app WaitOnSingle/MultipleObject(s) on it. First thing it does after a normal wait is reset the event (arm it so it can receive a new one &#8211; this may mean it does a useless loop at the end), then process the queue. Once queue is empty, wait again.</p>
<p>The interrupt stashes data into the queue, then signals. (if it&#8217;s signalled already, SetEvent does nothing).</p>
<p>The reason for the immediate reset is to avoid a race where you finish processing, but before you reset the event, another event gets in (and is lost).</p>
<p>Then again, one realizes that auto-reset events work too, since the event does reset until one thread was released. (To release all threads then reset, PulseEvent is your friend).</p>
<p>Yeah, I guess I&#8217;d be lost on 16-bit Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-xepol odd alt thread-odd thread-alt depth-1" id="comment-703783">
				<div id="div-comment-703783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Xepol' rel='external nofollow' class='url'>Xepol</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090126-00/?p=19393#comment-703783">
			January 27, 2009 at 6:23 am</a>		</div>

		<p>Of course, in the 16 bit days, it was pretty easy to overwhelm a system with IO to the point that there was insufficent overhead to process the data.</p>
<p>One has to wonder how much processing those 10,000 samples a minute actually required and whether that would be the straw that broke the camel&#8217;s back no matter what hand off was attemtped.</p>
<p>To futher your analogy, you can drive slower and make fewer trips by carrying more per trip, but don&#8217;t try to move a 10 ton loads with that Camry no matter how slow you go.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

