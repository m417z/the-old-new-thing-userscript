<html>
<head>
<title>Can I be sure that turning on automatic generation of short file names will get me short file names?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Can I be sure that turning on automatic generation of short file names will get me short file names?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 4, 2018 / year-entry #225</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>44</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You can try hard, but it may not succeed.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to know if administrative permissions
were sufficient to enable generation of short file names (8 dot 3).
Their plan was to
<a HREF="https://support.microsoft.com/en-us/help/121007/how-to-disable-8-3-file-name-creation-on-ntfs-partitions">
set the registry key</a>,
call <code>Get&shy;Short&shy;File&shy;Name</code>
to get the short file names,
and then restore the registry key to the value it had.
</p>
<p>
They wanted to know if there were any group policies
that would override the registry key and thereby foil
their fiendish plan.
</p>
<p>
That registry key is the one controlled by group policy,
so you could in theory get unlucky and a group policy
refresh could occur just after you updated the value.
</p>
<p>
But wait, let's try to understand the customer's problem
before coming up with a solution.
</p>
<p>
First of all, the customer's explanation didn't make sense.
You don't have to change the policy in order to call
<code>Get&shy;Short&shy;File&shy;Name</code>.
The short file name exists (or doesn't) regardless of the
policy setting.
Short file names are generated automatically at the time
a file is created,
and it is at the point of file creation that the policy
is consulted to determine whether to auto-generate a short
file name.
Changing the policy for short file name generation does not
retroactively add or remove short file names for existing files.
</p>
<p>
The customer clarified that they did leave out a step in their
quick description:
</p>
<ul>
<li>Set the registry key.</li>
<li><b>Install their program.</b></li>
<li>Call <code>Get&shy;Short&shy;File&shy;Name</code>.</li>
<li>Restore the registry key.</li>
</ul>
<p>
They installed their program with short file names enabled
so that the
<code>Get&shy;Short&shy;File&shy;Name</code> would indeed
get a short name.
They use this short name to ensure that there aren't any
spaces-related command line parsing errors.
</p>
<p>
Okay, the correct way to fix spaces-related command line
parsing errors is not to make the spaces go away.
It's to fix your command line parser so you don't choke
on file names with spaces in their name!
</p>
<p>
The customer explained that their program is just fine
with files that have spaces in their name,
but their program is a utility program,
and it is used by other programs and scripts.
Those other programs and scripts have a Unix heritage,
and Unix file names rarely have spaces in their name.
Consequently,
those programs and scripts tend to have poor
support for files with spaces in their name.
</p>
<p>
The customer was hoping to force generation of
short file names during their program installation,
so that those external programs can be given
a spaces-free path to the program.
</p>
<p>
Okay, so the first note is that there is no way
to absolutely guarantee that there will be a
spaces-free short name for a file,
because support for short file names is gradually
fading away.
Short file names were originally created
to maintain backward compatiblity with 16-bit programs,
but the population of 16-bit programs has been dwindling
for quite some time,
especially since 64-bit Windows doesn't support them natively.
ReFS and exFAT don't support short file names.
Network shares from Unix systems rarely do.
In general,
any file system invented in the past 15 years or so
will most likely not support short file names.
</p>
<p>
Furthermore, since short names are auto-assigned
at the point of creation,
it means that if the user installs the program
into a pre-existing directory that lacks a short name,
then you're not going to have a short name for the full path.
Setting the registry key will not be sufficient by itself.
</p>
<p>
The customer thought about the situation for a while
and came up with a different solution:
If the user chooses to install the program into a path
that contains spaces,
then their installer also creates a symbolic link
in a path with no spaces&sup1;
that points to the installation directory.
</p>
<p>
&sup1;
They didn't say exactly where,
but I suspect they put in in
<code>C:\ProgramData</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (44)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1365585">
				<div id="div-comment-1365585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365585">
			October 4, 2018 at 7:22 am</a>		</div>

		<p>&gt; Those other programs and scripts have a Unix heritage, and Unix file names rarely have spaces in their name.<br />
Having word-splitting enabled by default during variable expansion was one of the sh&#8217;s worst design decisions. That&#8217;s why sooner or later people invariable switch from (ba)sh scripts to Perl or Python or whatever other language where strings don&#8217;t randomly explode in your face.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1365755">
				<div id="div-comment-1365755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365755">
			October 4, 2018 at 12:59 pm</a>		</div>

		<p>Unfortunately, it&#8217;s not that simple.  There are numerous ways that a simple find &#8230; | xargs &#8230; can blow up in your face, most having nothing to do with spaces (ASCII 0x20).  In particular, LF and CRLF are both legal in Unix file names, which confuses xargs (I&#8217;m ignoring the obvious problem of &#8220;what if my filename starts with a dash and gets interpreted as a flag&#8221; because that&#8217;s an easy fix).  Then you have display fun such as ls either breaking your terminal or unconditionally munging weird file names.  Not to mention lots of legal names are really hard to type, and you can even have raw byte sequences that aren&#8217;t legal under any character encoding.  GNU tools have nonstandard workarounds for some of these issues under some circumstances, but if you want it to work under POSIX, your best bet is to give up and stop writing shell scripts altogether.</p>
<p>Windows is not completely innocent either, seeing as you have to quote the arguments you pass to CreateProcess() (whereas Unix only uses quoting for the benefit of the shell &#8211; if you quote the arguments to exec*(), it will interpret the quotes literally and choke).  And I&#8217;m sure someone with more batch programming experience than me can come up with all kinds of fun misfeatures of cmd.exe (which I&#8217;m sure we will all stop using just in time for the heat death of the universe).</p>
<p>TL;DR: All systems are terrible, just in different ways.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1366015">
				<div id="div-comment-1366015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott H.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366015">
			October 5, 2018 at 6:54 am</a>		</div>

		<p>One of my favorite moments was when I somehow managed to get a file named * in a Linux directory. Needless to say I was very careful getting that deleted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-3 parent" id="comment-1366175">
				<div id="div-comment-1366175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366175">
			October 5, 2018 at 11:24 am</a>		</div>

		<p>Windows CreateProcess has pretty close quoting rules to posix system() call. If you supply NULL for the first argument which everybody does. What&#8217;s unusual in CreateProcess is that it&#8217;s trying to deduce is you forgot to quote the program name.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1366315">
				<div id="div-comment-1366315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366315">
			October 6, 2018 at 12:49 pm</a>		</div>

		<p>That&#8217;s true, but misleading, because system() is just a convenience function that invokes the shell (which then calls exec*()).  The standard syscall for executing a program is execve() &#8211; ~everything else is a frontend to it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1366455">
				<div id="div-comment-1366455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bulletmagnet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366455">
			October 8, 2018 at 6:54 am</a>		</div>

		<p>&gt; There are numerous ways that a simple find … | xargs … can blow up in your face, most having nothing to do with spaces (ASCII 0x20)<br />
If you have GNU utilities, you can do find &#8230; -print0 | xargs -0 &#8230;<br />
If you don&#8217;t have GNU utilities, too bad.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1366935">
				<div id="div-comment-1366935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366935">
			October 10, 2018 at 6:38 am</a>		</div>

		<p>Ah, GNU utilities, amazing things they are. For example, &#8220;diff -u&#8221; can compare two files with spaces in their names and produces a unified  diff file which &#8220;patch -u&#8221; can *not* apply! See <a href="https://www.gnu.org/software/diffutils/manual/html_node/Unusual-File-Names.html" rel="nofollow">https://www.gnu.org/software/diffutils/manual/html_node/Unusual-File-Names.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1365605">
				<div id="div-comment-1365605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365605">
			October 4, 2018 at 7:53 am</a>		</div>

		<p>Global solution, meet a local problem.  I seem to recall hearing about the inherent problems of this sort of &#8220;problem-solving&#8221;.  I wonder where&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1365615">
				<div id="div-comment-1365615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott H.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365615">
			October 4, 2018 at 7:55 am</a>		</div>

		<p>Not to mention, MS-DOS/8.3 supported spaces in filenames. So even if their plan succeeded and they got short names for everything, they couldn&#8217;t guarantee space-free names!</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-fjeldse odd alt depth-2" id="comment-1365655">
				<div id="div-comment-1365655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Erik+F' rel='external nofollow' class='url'>Erik F</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365655">
			October 4, 2018 at 9:43 am</a>		</div>

		<p>While it&#8217;s true that spaces were supported, most programs had big problems with them: many assumed that spaces weren&#8217;t allowed, so you&#8217;d receive a message saying that the filename wasn&#8217;t valid. Of the programs that I used, I think that WordPerfect (possibly GW-BASIC too?) was the only one that actually allowed you to use files that had spaces in their names.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even depth-2" id="comment-1365745">
				<div id="div-comment-1365745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365745">
			October 4, 2018 at 12:53 pm</a>		</div>

		<p>It was not common though, though the &#8220;EA DATA.SF &#8221; file used it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jernej-ms-live odd alt depth-2" id="comment-1366385">
				<div id="div-comment-1366385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ender9' rel='external nofollow' class='url'>ender9</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366385">
			October 8, 2018 at 2:09 am</a>		</div>

		<p>While DOS did indeed support spaces in filenames, the generated short names on Windows never contain them</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kirbyfcf2 even thread-odd thread-alt depth-1 parent" id="comment-1365665">
				<div id="div-comment-1365665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harold+H20' rel='external nofollow' class='url'>Harold H20</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365665">
			October 4, 2018 at 10:03 am</a>		</div>

		<p>&gt;&gt;&#8221;the correct way to fix spaces-related command line parsing errors is . . . . . . to fix your command line parser so you don&#8217;t choke on file names with spaces in their name!&#8221;</p>
<p>I am constantly amazed by this.  Spaces in filenames have been a thing for 23 years, and yet we still have problems with it.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1365725">
				<div id="div-comment-1365725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365725">
			October 4, 2018 at 11:44 am</a>		</div>

		<p>Many programmers, especially developers of corporate or governmental applications, fail to pay their taxes. Just install Windows to a drive different than C: or give your account&#8217;s user name two words separated by an space (which is perfectly legal) and you will find many programs which break.</p>
<p>Spanish Ministry of Treasury distributed for years a free application to prepare your Income Tax declaration. It had millions of downloads every year, but it didn&#8217;t handle correctly spaces in file paths, and it blocked the upload of the declaration if your user name had a space. The application installed itself under C:\AEAT\ (even if Windows was in other drive!), so the developers probably were aware of the parsing bug, but it generated the temporary file for the declaration in the user&#8217;s AppData folder.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-3 parent" id="comment-1366185">
				<div id="div-comment-1366185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366185">
			October 5, 2018 at 11:25 am</a>		</div>

		<p>Windows drive is always named C:, since I think Windows 7.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-jernej-ms-live odd alt depth-4" id="comment-1366395">
				<div id="div-comment-1366395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ender9' rel='external nofollow' class='url'>ender9</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366395">
			October 8, 2018 at 2:11 am</a>		</div>

		<p>Not when you do an upgrade (and until Windows 7 when you run the installer from existing Windows installation, even if you choose to do a clean install).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-4 parent" id="comment-1366505">
				<div id="div-comment-1366505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366505">
			October 8, 2018 at 8:56 am</a>		</div>

		<p>Where did you get the notion that the &#8220;windows drive&#8221; (do you mean the drive Windows is installed on?) is always C?  That&#8217;s not true at all.  Windows can be installed to the D drive, or to a drive that uses any letter you want.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-5" id="comment-1367065">
				<div id="div-comment-1367065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1367065">
			October 10, 2018 at 2:02 pm</a>		</div>

		<p>You can install Windows on any drive or partition, but when you boot it, it will get drive letter C</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1365775">
				<div id="div-comment-1365775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365775">
			October 4, 2018 at 1:15 pm</a>		</div>

		<p>Windows quoteing rules are obscure and some commands deliberately do it differently.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1365955">
				<div id="div-comment-1365955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365955">
			October 4, 2018 at 11:15 pm</a>		</div>

		<p>And if you do it the right way [0], not all programs will understand.</p>
<p>[0] <a href="https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/" rel="nofollow">https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1365855">
				<div id="div-comment-1365855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365855">
			October 4, 2018 at 2:08 pm</a>		</div>

		<p>Cmd Batch files have a lot of trouble too, even now. Partly because its string handling barely exists, but also for the same reason (ba)sh can have trouble.</p>
<p>Hence PowerShell, Python and Perl which are all considerably more wonderful but have the nasty downside of not existing on a lot of Windows installations.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1366075">
				<div id="div-comment-1366075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net/' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366075">
			October 5, 2018 at 8:37 am</a>		</div>

		<p>PowerShell has been installed by default in every version of Windows since Windows 7 and Windows Server 2008 R2. If you&#8217;re stuck using versions of Windows before then, I&#8217;m sorry, I hope you&#8217;re not stuck there for much longer.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1366465">
				<div id="div-comment-1366465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luaan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366465">
			October 8, 2018 at 7:33 am</a>		</div>

		<p>ASCII also should have died a long time ago, but even newly released applications often have trouble with non-US encodings, especially Unicode. As I found to my chagrin when I decided to create a Windows account linked to my Microsoft account in Windows 10, which created my Windows profile folder with my real name &#8211; which contains non-ASCII characters. My Users folder contains about ten different mis-encodings of my name (including having the offending characters <i>URL encoded</i>), each of the broken applications having its own way of mishandling paths. Some outright don&#8217;t work, so I had to create another account with an ASCII name and use &#8220;runas&#8221; to run those. In 2018.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1365695">
				<div id="div-comment-1365695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365695">
			October 4, 2018 at 10:44 am</a>		</div>

		<p>&#8220;In general, any file system invented in the past 15 years or so will most likely not support short file names.&#8221;</p>
<p>Yet the setup program of Windows 10 (really: the routines which handle DISM.exe /Apply-Image) turn generation of short filenames ON &#8211; even for the AMD64 processor architecture &#8211; and thus overrides both the documented registry setting as well as the volume-specific setting which can be set via FSUTIL.exe or FORMAT.exe /FS:NTFS /S:Disable</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-2 parent" id="comment-1366195">
				<div id="div-comment-1366195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366195">
			October 5, 2018 at 11:59 am</a>		</div>

		<p>Could it be for compatibility? Even new 64-bit systems probably work better if progra~1 exists and is the short name for Program Files. Some silly people have probably hard-coded &#8220;c:\progra~1&#8221; or &#8220;%windir%\..\progra~1&#8221; in some scripts/tools.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1366235">
				<div id="div-comment-1366235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366235">
			October 5, 2018 at 2:31 pm</a>		</div>

		<p>Search your registry for &#8220;PROGRA~1&#8221;, and you&#8217;re likely to find plenty of hits.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1367615">
				<div id="div-comment-1367615" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1367615">
			October 15, 2018 at 8:00 am</a>		</div>

		<p>Not a SINGLE PROGRA~1 (or any other short name) here since 22+ years!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1366345">
				<div id="div-comment-1366345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://eskamation.de' rel='external nofollow' class='url'>Stefan Kanthak</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366345">
			October 7, 2018 at 12:44 pm</a>		</div>

		<p>It might by anything a weird mind can come up with, but it&#8217;s useless to speculate, since M$FT did not document it.<br />
Before Windows 10, generation of short filenames was NOT forcibly turned on.</p>
<p>Please define &#8220;works better&#8221;!<br />
The 22+ year old &#8220;Designed for Windows Guidelines&#8221; (well: their update for 64-bit architectures) explicitly state that 64-bit applications MUST support long filenames.</p>
<p>JFTR: I routinely turn short filename creation off during setup since more that 20 years. There were some &#8220;silly&#8221; programs which used hard-coded short filenames in the past, but I haven&#8217;t seen one in the last ten years or so. Besides that, they would have failed anyway, since there is NO guarantee that the (automatically generated) short filename for &#8220;Program Files&#8221; will always be PROGRA~1</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1365765">
				<div id="div-comment-1365765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">morlamweb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365765">
			October 4, 2018 at 1:02 pm</a>		</div>

		<p>If the customer can control the installer to the point where they monkey around with the reg key as part of their install process, why can&#8217;t they simply enforce space-less paths in their installer?  It&#8217;s their program and their compatibility constraint; why force the file system to create short file names for all other programs just for their needs?  Also, consider what would happen if the installer crashed during the installation process: 8.3 file names would be left enabled unless someone or something comes along to disable it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1365815">
				<div id="div-comment-1365815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365815">
			October 4, 2018 at 1:39 pm</a>		</div>

		<p>&#8220;&#8230; then their installer also creates a symbolic link in a path with no spaces¹ that points to the installation directory.&#8221;</p>
<p>What if the target system doesn&#8217;t have any paths with no spaces?  The ProgramData path can get renamed.  Not easily, but it can&#8230;…  Maybe the installer will try to create a path with no spaces, in order to store the symbolic link?  If the installer is able to create a directory in the root of some drive, that is.</p>
<p>I have seen an example of this:  A program that HAS been updated recently, but which relies on some ancillary packages that have not been updated in 20 years or so.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1365835">
				<div id="div-comment-1365835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365835">
			October 4, 2018 at 1:48 pm</a>		</div>

		<p>My spinal reflex during reading was that the customer could use a hardlink to solve his problem, but a symlink seems better to preserve the hierarchy original vs. link.</p>
<p>Short file names allow accessing full paths with at least 32 nesting levels (or even more, if some of the individual components are shorter than 8 characters; the total length is MAX_PATH). So these are also the minimum prerequisites to test programs with &#8220;super long paths&#8221; beyond MAX_PATH, to make sure the short file names won&#8217;t come to the rescue, as they seem to be used automagically by Windows Explorer or the Win32 API, if necessary.</p>
<p>For this testing scenario, I can only come to think: really?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1365865">
				<div id="div-comment-1365865" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365865">
			October 4, 2018 at 2:31 pm</a>		</div>

		<p>This is another reminder that filenames are not just an arbitrary sequence of bytes. </p>
<p>They are part of the user interface. </p>
<p>That means they are subject to restrictions on names, and motivations for names, on that account. That&#8217;s why you can&#8217;t use \u0001 in a filename and also why you have to handle spaces. </p>
<p>If you need your filename to encode arbitrary data, hex encode it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1365875">
				<div id="div-comment-1365875" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365875">
			October 4, 2018 at 3:06 pm</a>		</div>

		<p>Your suspicion about them selecting ProgramData got me thinking &#8211; it&#8217;s not guaranteed to be a path with no spaces, is it? Can user relocate this directory without using symlinks? Is it guaranteed for all localized Windows versions to keep a space-free name? It only takes a single rogue translation to break this (somewhat sketchy) assumption.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-even depth-1 parent" id="comment-1365895">
				<div id="div-comment-1365895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365895">
			October 4, 2018 at 6:38 pm</a>		</div>

		<p>&gt; Those other programs and scripts have a Unix heritage, and Unix file names rarely have spaces in their name.</p>
<p>I have question on that. *nix program have been accepting space in file/directory name since forever. I remember that in school I&#8217;ve had a few time create file with &#8220;\ &#8221; in filename without a problem, and you don&#8217;t even need to surround it with double quote.</p>
<p>I&#8217;d suggest them to try run their program or script in Bash of Cygwin or even that come with Git instead.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1365985">
				<div id="div-comment-1365985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365985">
			October 5, 2018 at 2:16 am</a>		</div>

		<p>Oh, UNIX itself has no problem with spaces in filenames&#8230; they&#8217;re totally legal. But spaces in filenames do cause headaches in shells, with the result that people tend to avoid using spaces in any file that might be accessed from the shell, and since they therefore don&#8217;t encounter a lot of them, the scripts they write don&#8217;t tend to handle it well.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-matteo odd alt depth-3" id="comment-1366285">
				<div id="div-comment-1366285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366285">
			October 6, 2018 at 6:30 am</a>		</div>

		<p>Just try to write a Makefile with whitespace in file names&#8230; <a href="https://stackoverflow.com/q/9838384/214671" rel="nofollow">https://stackoverflow.com/q/9838384/214671</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even depth-3" id="comment-1366295">
				<div id="div-comment-1366295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366295">
			October 6, 2018 at 6:35 am</a>		</div>

		<p>BTW there <i>are</i> shells which handle filenames in a way more intelligent way&#8230; my personal favorite is fish, which, between other awesome features that work out of the box (the autocompletion is frigging magic, I suspect it has some direct connection with the brain) avoids all the mess with whitespace-splitting after expanding variables/globbing. All variables are actually lists, and when they are put on the command line the single elements are kept as they are, without re-splitting them on whitespace; same for the output of globbing.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bob-rao odd alt thread-odd thread-alt depth-1" id="comment-1365915">
				<div id="div-comment-1365915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/BobVul' rel='external nofollow' class='url'>BobVul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1365915">
			October 4, 2018 at 7:37 pm</a>		</div>

		<p>Hm. I wonder if avoiding spaces is the reason a certain &lt;bean-derived drink&gt; programming language&#8217;s most common runtime puts its (PATH-listed) launcher in ProgramData.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1366145">
				<div id="div-comment-1366145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">aitap</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366145">
			October 5, 2018 at 10:10 am</a>		</div>

		<p>&gt; Those other programs and scripts have a Unix heritage, and Unix file names rarely have spaces in their name.</p>
<p>I wouldn&#8217;t phrase it like that. The problem is that the system calls to launch a program in a Unix-like system expect an array of command-line arguments, while CreateProcess only takes one string. Mistakes arise when one expects the environment to take care of safely passing the command line arguments as opaque zero-terminated strings, while the rules say that the application being launched is responsible for how a single string passed to it is going to be parsed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1366205">
				<div id="div-comment-1366205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Baltasar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366205">
			October 5, 2018 at 12:32 pm</a>		</div>

		<p>&gt; Okay, the correct way to fix spaces-related command line parsing errors is not to make the spaces go away. It&#8217;s to fix your command line parser so you don&#8217;t choke on file names with spaces in their name! </p>
<p>I don&#8217;t even think windows supports spaces in file names correctly, provided it tries to find &#8220;c:\program&#8221;, &#8220;c:program and&#8221;&#8230; blindly. Spaces in file names was a bad addition poorly implemented.It would have been more sensible to design a codification involving &#8216;_&#8217;,, for example.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1366355">
				<div id="div-comment-1366355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366355">
			October 7, 2018 at 8:18 pm</a>		</div>

		<p>It doesn&#8217;t do it blindly. It does it only if the standard interpretation (stop at the first unquoted space) fails.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1366475">
				<div id="div-comment-1366475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1366475">
			October 8, 2018 at 8:08 am</a>		</div>

		<p>What I have a hard time figuring out are the results from calling (from a .NET language): Path.GetInvalidFileNameChars and Path.GetInvalidPathChars).  A couple of the differences between the two sets of &#8220;invalid characters&#8221; are that while both &#8220;?&#8221; and &#8220;*&#8221; are illegal in file names, they are legal in path names.  That surprised me.  I have no idea what would happened to most apps if you included an asterisk in a folder name.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1367855">
				<div id="div-comment-1367855" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eryk Sun</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1367855">
			October 16, 2018 at 11:30 am</a>		</div>

		<p>&gt;  while both “?” and “*” are illegal in file names</p>
<p>In practice I think it&#8217;s always true that wildcard characters are reserved in file and directory names. However, it does depend on the file-system driver and the extent to which it relies on the file-system runtime library for working with names (e.g. FsRtlIsNameInExpression). </p>
<p>The only character that&#8217;s reserved in a path up to and including the device name is backslash, which is reserved by the kernel&#8217;s object manager. This means you can use DefineDosDevice to assign unusual names to volume devices, including names that include slash (not backslash), wildcard characters, and control characters. From the Windows API and common shells, such unusual device names are only usable (if at all) within a fully-qualified, local-device path (i.e. prefixed with &#8220;\\\\?\\&#8221; or &#8220;\\\\.\\&#8221;). The native NT API can even support null (&#8216;\0&#8217;) in names, at least in principle, because the system uses counted strings. However, we can&#8217;t use the Windows API with such path components because it&#8217;s based on null-terminated strings.</p>
<p>Once parsing reaches the file-system device and attached filter devices that manage a volume device, the associated drivers have complete control over parsing the remaining path. For the sake of sanity, a file-system should reserve backslash, slash and null. Also, if it expects to play nice with how FindFirstFile[Ex] and NtQueryDirectoryFile[Ex]  (i.e. IRP_MJ_DIRECTORY_CONTROL: IRP_MN_QUERY_DIRECTORY) are used, it should reserve the five wildcard characters in file and directory names. This includes asterisk, question mark, less-than sign (DOS_STAR), greater-than sign (DOS_QM), and quotation mark (DOS_DOT). </p>
<p>NTFS additionally reserves colon as the file-stream delimiter (i.e. FileName:StreamName:StreamType), vertical bar (pipe), and control characters (ordinals 1-31). In stream names, NTFS disallows colon, backslash, slash, and null. The VBoxSharedFolderFS file system (installed in a VirtualBox guest system) reserves backslash, slash, null, and the 5 wildcard characters in filenames. In contrast to NTFS, it allows colon, vertical bar, and control characters in filenames, which facilitates working with a POSIX host system.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1367265">
				<div id="div-comment-1367265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Yates</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20181004-00/?p=99895#comment-1367265">
			October 12, 2018 at 6:21 am</a>		</div>

		<p>I was thinking symlink as a dodgy workaround.  They work wonders for so many things.</p>
<p>I had a customer with a medical device running Windows 7 on there.  Running out of space, and the app had hard-coded local path for its data.  Its data was separated into *many* subfolders.</p>
<p>So I just moved a bunch of those folders to a NAS.  Then enabled Windows to allow symlinks to point to network drives (other machines on the network would access this device and expect the data to be available via a share), and problem solved.  Saved the customer many $1000&#8217;s</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

