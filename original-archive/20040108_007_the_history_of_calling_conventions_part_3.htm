<html>
<head>
<title>The history of calling conventions, part 3</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The history of calling conventions, part 3</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 8, 2004 / year-entry #8</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>35</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Okay, here we go: The 32-bit x86 calling conventions. (By the way, in case people didn't get it: I'm only talking in the context of calling conventions you're likely to encounter when doing Windows programming or which are used by Microsoft compilers. I do not intend to cover calling conventions for other operating systems or...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Okay, here we go: The 32-bit x86 calling conventions.</p>
<p>(By the way, in case people didn't get it: I'm only talking in the context of calling conventions you're likely to encounter when doing Windows programming or which are used by Microsoft compilers. I do not intend to cover calling conventions for other operating systems or that are specific to a particular language or compiler vendor.) </p>
<p>Remember: If a calling convention is used for a C++ member function, then there is a hidden "this" parameter that is the implicit first parameter to the function. </p>
<dl>
<dt>All   </dt>
<dd>  The 32-bit x86 calling conventions all preserve the EDI, ESI, EBP, and EBX registers, using the EDX:EAX pair for return values. </p>
</dd>
<dt>C (<a href="http://msdn.microsoft.com/library/en-us/vccore98/html/_core___cdecl.asp">__cdecl</a>)   </dt>
<dd>
<p>The same constraints apply to the 32-bit world <a href="http://weblogs.asp.net/oldnewthing/archive/2004/01/02/47184.aspx">as in the 16-bit world</a>. The parameters are pushed from right to left (so that the first parameter is nearest to top-of-stack), and the caller cleans the parameters. Function names are decorated by a leading underscore. </p>
</dd>
<dt><a href="http://msdn.microsoft.com/library/en-us/vccore98/html/_core___stdcall.asp">__stdcall</a>   </dt>
<dd>
<p>This is the calling convention used for Win32, with exceptions for variadic functions (which necessarily use __cdecl) and a very few functions that use __fastcall. Parameters are pushed from right to left [<i>corrected 10:18am</i>] and the callee cleans the stack. Function names are decorated by a leading underscore and a trailing @-sign followed by the number of bytes of parameters taken by the function. </p>
</dd>
<dt><a href="http://msdn.microsoft.com/library/en-us/vccore98/html/_core___fastcall.asp">__fastcall</a>   </dt>
<dd>
<p>The first two parameters are passed in ECX and EDX, with the remainder passed on the stack as in __stdcall. Again, the callee cleans the stack. Function names are decorated by a leading @-sign and a trailing @-sign followed by the number of bytes of parameters taken by the function (including the register parameters). </p>
</dd>
<dt><a href="http://msdn.microsoft.com/library/en-us/vccore98/html/_core_thiscall.asp">thiscall</a>   </dt>
<dd>
<p>The first parameter (which is the "this" parameter) is passed in ECX, with the remainder passed on the stack as in __stdcall. Once again, the callee cleans the stack. Function names are decorated by the C++ compiler in an extraordinarily complicated mechanism that encodes the types of each of the parameters, among other things. This is necessary because C++ permits function overloading, so a complex decoration scheme must be used so that the various overloads have different decorated names. </p>
</dd>
</dl>
<p>There are some <a href="http://msdn.microsoft.com/library/en-us/vccore98/html/_core_results_of_calling_example.asp">nice diagrams on MSDN</a> illustrating some of these calling conventions. </p>
<p>Remember that a calling convention is a contract between the caller and the callee. For those of you crazy enough to write in assembly language, this means that your callback functions need to preserve the registers mandated by the calling convention because the caller (the operating system) is relying on it. If you corrupt, say, the EBX register across a call, don't be surprised when things fall apart on you. More on this in a future entry. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-120603">
				<div id="div-comment-120603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeneffect.com' rel='external nofollow' class='url'>Ian Hanschen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120603">
			January 8, 2004 at 7:20 am</a>		</div>

		<p>Raymond,<br />
<br />Great series.  Do you know the what &amp; when as far as the 0xDCBAABCD cardinal passed in when calling wndprocs?<br />
<br />-Ian</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-120613">
				<div id="div-comment-120613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120613">
			January 8, 2004 at 7:30 am</a>		</div>

		<p>&quot;More on this in a future entry.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-120633">
				<div id="div-comment-120633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeneffect.com' rel='external nofollow' class='url'>Ian Hanschen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120633">
			January 8, 2004 at 7:38 am</a>		</div>

		<p>Sorry :)<br />
<br />-Ian</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-120653">
				<div id="div-comment-120653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120653">
			January 8, 2004 at 8:09 am</a>		</div>

		<p>Honorable mention for Borland&#8217;s __fastcall convention, borrowed from Delphi, which passes the first three parameters in EAX, EDX, ECX and can be slightly more efficient.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-120783">
				<div id="div-comment-120783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120783">
			January 8, 2004 at 9:59 am</a>		</div>

		<p>Hmmm, you said that for __cdecl the parameters are pushed from right to left and for __stdcall they are pushed from left to right. But in the diagram on MSDN the stack looks identical for both calling conventions. I assume you are right and they are wrong?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-120813">
				<div id="div-comment-120813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120813">
			January 8, 2004 at 10:21 am</a>		</div>

		<p>D&#8217;oh, you&#8217;re right. __stdcall goes right to left, just like __cdecl.  I&#8217;ll fix the body text.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-120893">
				<div id="div-comment-120893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gene Hamilton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120893">
			January 8, 2004 at 12:42 pm</a>		</div>

		<p>I was stepping through some code with the debugger to take a look for myself these calling conventions in action.  (using VS.NET 2002 btw)  And I noticed something odd.  The &#8216;call&#8217; instruction jumpes to an address which contains a single jmp instruction, which in turn &#8216;jmp&#8217;s to the real function.  This is only in the &#8216;Debug&#8217; version, not &#8216;Release&#8217;</p>
<p>I also noticed after the call instruction the address it moves to, there are other jmp instructions in surrounding memory to other functions.</p>
<p>Here is an example.</p>
<p>&#8230;<br />
<br />call myfunc<br />
<br />&#8230;</p>
<p>myfunc:<br />
<br />jmp realmyfunc</p>
<p>realmyfunc:<br />
<br />&#8230;<br />
<br />&#8230;<br />
<br />ret</p>
<p>My Question: What is the purpose of this jmp instruction between call and the actual function?  I might be answering my own question here, but here it goes.</p>
<p>I know if you include __declspec(dllimport) to an imported function from a dll, the code looks something like this:</p>
<p>CALL DWORD PTR [0x00405030]</p>
<p>otherwise if you don&#8217;t it generates this:</p>
<p>CALL 0x0040100C<br />
<br />•••<br />
<br />0x0040100C:<br />
<br />JMP       DWORD PTR [0x00405030]</p>
<p>Similar to was I was seeing.  I know this happens because the compiler does not know if the function is static or in a dll.  So it generates code like this CALL XXXXXXXX and leaves the linker to fill in the rest.</p>
<p>Or is it done for another reason?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-120903">
				<div id="div-comment-120903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120903">
			January 8, 2004 at 12:52 pm</a>		</div>

		<p>You probably turned on incremental linking.</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/en-us/vccore98/HTML/_core_.2f.incremental.asp" rel="nofollow"></a><a href="http://msdn.microsoft.com/library/en-us/vccore98/HTML/" rel="nofollow">http://msdn.microsoft.com/library/en-us/vccore98/HTML/</a><em>core</em>.2f.incremental.asp</p>
<p>On of the consequences of incremental linking called out in the documentation is &quot;May contain jump thunks to handle relocation of functions to new addresses.&quot;</p>
<p>If you understand what incremental linking is trying to do, the need for this becomes more obvious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-120923">
				<div id="div-comment-120923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Terry Denham</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120923">
			January 8, 2004 at 1:25 pm</a>		</div>

		<p>This may be off topic but does the virtual function table behave similarly to these jump to address and then jump to final address like the incremental linking comment above.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-120973">
				<div id="div-comment-120973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mr. X</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120973">
			January 8, 2004 at 2:13 pm</a>		</div>

		<p>Calling conventions are stupid. Any good compilers (such as GCC) won&#8217;t have them, except for the mandatory &#8216;extern &quot;C&quot;&#8217; construct so that C++ programs can call C functions correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-120983">
				<div id="div-comment-120983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-120983">
			January 8, 2004 at 2:16 pm</a>		</div>

		<p>Clearly you need a calling convention or the caller and callee could never communicate with each other. Perhaps you mean &quot;multiple calling conventions are stupid&quot;.  The hard part then is choosing the &quot;one true&quot; calling convention that works great for everybody.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121013">
				<div id="div-comment-121013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121013">
			January 8, 2004 at 2:54 pm</a>		</div>

		<p>IIRC, the virtual function table is normally implemented simply as a table of addresses. The compiled code dereferences the vptr, which is the first member of the object, to locate the vtbl, then makes an indirect call through that.</p>
<p>On some processors (e.g. the Itanium) the table also includes a global pointer value (2MB of module-relative data can be accessed via this pointer).</p>
<p>I was about to ask why x86 has three calling conventions on 32-bit desktop Windows, but I assume it&#8217;s for much the same reasons as 16-bit code did (which you mentioned in part 1).</p>
<p>IIRC, Windows CE on x86 only ever uses __cdecl, unless you&#8217;re using one of the old (Pocket PC 2000 or earlier) emulators, in which case it uses __stdcall (probably a misconfiguration when compiled&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121103">
				<div id="div-comment-121103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121103">
			January 8, 2004 at 5:50 pm</a>		</div>

		<p>GCC has them, what are you talking about? <a target="_new" href="http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html#Function%20Attributes" rel="nofollow">http://gcc.gnu.org/onlinedocs/gcc/Function-Attributes.html#Function%20Attributes</a></p>
<p>Search for stdcall, cdecl, fastcall, etc.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121083">
				<div id="div-comment-121083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://samgentile.com/blog/archive/0001/01/01/11103.aspx' rel='external nofollow' class='url'>Sam Gentile's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121083">
			January 8, 2004 at 8:02 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121123">
				<div id="div-comment-121123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">project</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121123">
			January 8, 2004 at 9:09 pm</a>		</div>

		<p>In &quot;thiscall&quot; you write that function names are decorated with information about every parameter in order to allow overloading. I think this should be also true about __cdecl functions that are not extern &quot;C&quot;. Am I right?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121133">
				<div id="div-comment-121133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121133">
			January 8, 2004 at 9:20 pm</a>		</div>

		<p>You&#8217;re right, I confused calling convention with C++ decoration. Sorry, everybody.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121153">
				<div id="div-comment-121153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/01/09/49028.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121153">
			January 9, 2004 at 10:01 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121353">
				<div id="div-comment-121353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CW user</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121353">
			January 9, 2004 at 7:31 pm</a>		</div>

		<p>Anyone using CodeWarrior?</p>
<p>When I had code like this:<br />
<br />#define EXPORT __declspec(dllexport)<br />
<br />EXPORT BOOL CALLBACK EdrCenterText(&#8230;)<br />
<br />the function GetProcAddress would return NULL.</p>
<p>But call like this:<br />
<br />GetProcAddress (&#8230;, &quot;_EdrCenterText@16&quot;);<br />
<br />worked and I could use the DLL.</p>
<p>And then I changed the declaration to<br />
<br />EXPORT BOOL __cdecl EdrCenterText (&#8230;)<br />
<br />and<br />
<br />GetProcAddress (&#8230;, &quot;EdrCenterText&quot;)<br />
<br />worked as advertised.</p>
<p> I do not have VC to check this but it all seems odd to me!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121363">
				<div id="div-comment-121363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">project</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121363">
			January 9, 2004 at 8:57 pm</a>		</div>

		<p>To make the first GetProcAddress work, you should have a .def file like this:<br />
<br />EXPORTS<br />
<br />   EdrCenterText</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121383">
				<div id="div-comment-121383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121383">
			January 10, 2004 at 12:55 am</a>		</div>

		<p>CW: The GetProcAddress issue is the subject that I alluded to in the opening paragraph of Part 2 of the calling conventions series. I&#8217;ll expand on it in a future entry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-121433">
				<div id="div-comment-121433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">WC user</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121433">
			January 10, 2004 at 9:01 am</a>		</div>

		<p>I&#8217;ve looked back to Part 2 and now I apologise if I&#8217;ve had spoiled<br />
<br />something, Raymond.</p>
<p>It was just something that bothered me since last summer when<br />
<br />it was for the first time I looked for some DLL stuff in Petzold and<br />
<br />then spent whole night to force GetProcAddress() return<br />
<br />something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-121443">
				<div id="div-comment-121443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-121443">
			January 10, 2004 at 9:10 am</a>		</div>

		<p>No problem. You couldn&#8217;t have known. It&#8217;s amusing to me that somebody guessed what I was referring to there completely by accident.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-135593">
				<div id="div-comment-135593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://palmoswerks.com' rel='external nofollow' class='url'>Ben Combee</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-135593">
			January 12, 2004 at 11:40 am</a>		</div>

		<p>&lt;blockquote&gt;Anyone using CodeWarrior?</p>
<p>When I had code like this:<br />
<br />#define EXPORT __declspec(dllexport)<br />
<br />EXPORT BOOL CALLBACK EdrCenterText(&#8230;)<br />
<br />the function GetProcAddress would return NULL.&lt;/blockquote&gt;</p>
<p>The problem is that you&#8217;re not putting the &quot;__declspec(dllexport)&quot; on the function, but instead putting it on the type.</p>
<p>If you&#8217;d written</p>
<p>#define EXPORT __declspec(dllexport)<br />
<br />BOOL CALLBACK EXPORT EdrCenterText(&#8230;)</p>
<p>it would have been OK.  I know &#8212; I once was the x86 compiler engineer at Metrowerks, and I had my hand at implementing the declspec handling code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-135653">
				<div id="div-comment-135653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CW user</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-135653">
			January 12, 2004 at 3:10 pm</a>		</div>

		<p>Seems like I could have asked if there&#8217;s &quot;Anyone here who wrote<br />
<br />CodeWarrior?&quot;<br />
<br /> Just shows how relevant Raymond&#8217;s blog is.</p>
<p> And, no, reordering keywords didn&#8217;t help. Still worked only with _ and<br />
<br />@16 mangling.</p>
<p> And as an interresting note, all this time I was casting to CALLBACK function pointer:<br />
<br />EXPORT BOOL __cdecl EdrCenterText (&#8230;);<br />
<br />typedef BOOL (CALLBACK *EdrCenterTextProcType) (&#8230;);<br />
<br />and then later in code:<br />
<br />EdrCenterTextProcType plugProc;<br />
<br />plugProc = (EdrCenterTextProcType) GetProcAddress (&#8230;, &quot;EdrCenterText&quot;);</p>
<p> This code worked OK, even though I casted __cdecl proc to __stdcall<br />
<br />proc. I am not much of an expert for stack handling and calling<br />
<br />conventions, but I would like to know for sure if this is bad in any way.<br />
<br /> (Windows or my app never crashed, but maybe I did&#8217;t wait long<br />
<br />enough)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-135663">
				<div id="div-comment-135663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-135663">
			January 12, 2004 at 3:59 pm</a>		</div>

		<p>You people are too fast for me. I have an entry planned for Thursday to discuss this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-135893">
				<div id="div-comment-135893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-135893">
			January 13, 2004 at 10:31 am</a>		</div>

		<p>&quot;does the virtual function table behave similarly to these jump to address and then jump to final address like the incremental linking comment above&quot;</p>
<p>The jump-to-jump is an artifact of incremental linking and is not part of the vtable layout rules.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-140873">
				<div id="div-comment-140873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://baby.homeip.net/patrick/archives/000142.php' rel='external nofollow' class='url'>Simply Patrick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-140873">
			February 3, 2004 at 1:28 pm</a>		</div>

		<p>??????,??????????? ?????????? calling convention: The history of calling conventions, part 1 The history of calling conventions, part 2 The history of calling conventions, part 3 The history of calling conventions, part 4: ia64 Why do member functions need to be&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-177883">
				<div id="div-comment-177883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://elgeneralbenjamin@hotmail.com' rel='external nofollow' class='url'>Benjamin Munayco</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-177883">
			May 27, 2004 at 6:52 am</a>		</div>

		<p>Hi,</p>
<p>PVCAM is an ANSI C library of camera control and data acquisition functions.<br />
<br />I&#8217;m trying to use PVCAM functions on my computer running under Windows XP but I didn&#8217;t manage to.<br />
<br />The problem occures when I run the project in my CodeWarrior IDE which is the programming environment I choose in order to compile my<br />
<br />project.<br />
<br />The compiling process works well, but when I link the project that&#8217;s the message I&#8217;m given back:</p>
<p>&quot; Error   : Undefined symbol: &#8216;__stdcall(0) pl_pvcam_init<br />
<br />(_pl_pvcam_init@0)&#8217;<br />
<br />referenced from &#8216;_main&#8217; in Acquisition.c:15<br />
<br />Acquisition.c line 15 &quot;</p>
<p>(&quot;Acquistion.c&quot; is my C code source)</p>
<p>and I get the same error for each PVCAM functions (pl_pvcam_uninit, pl_seq_exp, etc.)<br />
<br />I am a beginner in programming on CW 8, and I don&#8217;t really know where to search the problem.<br />
<br />This could be due to the linker, the IDE, a confusion between libraries&#8230;<br />
<br />Could you help me with this topic?</p>
<p>Thanks.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-190883">
				<div id="div-comment-190883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/07/06/173934.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-190883">
			July 6, 2004 at 10:02 am</a>		</div>

		<p>Putting together some skills you&#8217;ve already learned.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-191923">
				<div id="div-comment-191923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cnblogs.com/flier/archive/2004/07/08/22346.aspx' rel='external nofollow' class='url'>Flier's Sky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-191923">
			July 7, 2004 at 11:03 pm</a>		</div>

		<p>The history of calling conventions</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-296483">
				<div id="div-comment-296483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jkeljo/archive/2005/08/11/450506.aspx' rel='external nofollow' class='url'>Jonathan Keljo's CLR Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-296483">
			August 11, 2005 at 3:20 pm</a>		</div>

		<p>Ever since v1, corprof.idl has contained the following ominous comment above the typedefs for FunctionEnter/Leave/Tailcall&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-296503">
				<div id="div-comment-296503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jkeljo/archive/2005/08/11/450506.aspx' rel='external nofollow' class='url'>Jonathan Keljo's CLR Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-296503">
			August 11, 2005 at 4:47 pm</a>		</div>

		<p>Ever since v1, corprof.idl has contained the following ominous comment above the typedefs for FunctionEnter/Leave/Tailcall&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-296763">
				<div id="div-comment-296763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jkeljo/archive/2005/08/11/450506.aspx' rel='external nofollow' class='url'>Jonathan Keljo's CLR Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-296763">
			August 15, 2005 at 2:55 pm</a>		</div>

		<p>Ever since v1, corprof.idl has contained the following ominous comment above the typedefs for FunctionEnter/Leave/Tailcall&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-305053">
				<div id="div-comment-305053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jkeljo/archive/2005/08/11/450506.aspx' rel='external nofollow' class='url'>Jonathan Keljo's CLR Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-305053">
			September 11, 2005 at 2:13 pm</a>		</div>

		<p>Ever since v1, corprof.idl has contained the following ominous comment above the typedefs for FunctionEnter/Leave/Tailcall&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-381523">
				<div id="div-comment-381523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.escoria.org/PermaLink,guid,a5ab12d7-a40d-4f47-b07d-f38ef05e903a.aspx' rel='external nofollow' class='url'>Anuncie Aqui!</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040108-00/?p=41163#comment-381523">
			May 17, 2006 at 8:44 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

