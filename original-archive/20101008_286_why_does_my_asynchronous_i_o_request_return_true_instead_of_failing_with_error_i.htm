<html>
<head>
<title>Why does my asynchronous I/O request return TRUE instead of failing with ERROR_IO_PENDING?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my asynchronous I/O request return TRUE instead of failing with ERROR_IO_PENDING?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 8, 2010 / year-entry #287</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that their program was not respecting the FILE_FLAG_OVERLAPPED flag consistently: My program opens a file handle in FILE_FLAG_OVERLAPPED mode, binds it to an I/O completion callback function with Bind­Io­Completion­Callback, and then issues a Write­File against it. I would expect that the Write­File returns FALSE and Get­Last­Error() returns ERROR_IO_PENDING, indicating that the I/O...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer reported that their program was not respecting the <code>FILE_<wbr>FLAG_<wbr>OVERLAPPED</wbr></wbr></code> flag consistently:</p>
<blockquote class="q"><p> My program opens a file handle in <code>FILE_<wbr>FLAG_<wbr>OVERLAPPED</wbr></wbr></code> mode, binds it to an I/O completion callback function with <code>Bind&shy;Io&shy;Completion&shy;Callback</code>, and then issues a <code>Write&shy;File</code> against it. I would expect that the <code>Write&shy;File</code> returns <code>FALSE</code> and <code>Get&shy;Last&shy;Error()</code> returns <code>ERROR_<wbr>IO_<wbr>PENDING</wbr></wbr></code>, indicating that the I/O operation is being performed asynchronously, and that the completion function will be called when the operation completes. However, I find that some percentage of the time, the call to <code>Write&shy;File</code> returns <code>TRUE</code>, indicating that the operation was performed synchronously. What am I doing wrong? I don't want my thread to block on I/O; that's why I'm issuing asynchronous I/O. </p>
</blockquote>
<p> When you specify <code>FILE_<wbr>FLAG_<wbr>OVERLAPPED</wbr></wbr></code>, you're promising that your program knows how to handle I/O which completes asynchronously, but it does not require the I/O stack to behave asynchronously. A driver can choose to perform your I/O synchronously anyway. For example, if the write operation can be performed by writing to cache without blocking, the driver will just copy the data to the cache and indicate synchronous completion. Don't worry, be happy: Your I/O completed even faster than you expected! </p>
<p> Even though the I/O completed synchronously, all the asynchronous completion notification machinery is still active. It's just that they all accomplished their job <i>before the <code>Write&shy;File</code> call returned</i>. This means that the event handle will still be signaled, the completion routine will still run (once you wait alertably), and if the handle is bound to an I/O completion port, the I/O completion port will receive a completion notification. </p>
<p> You can use the <code>Set&shy;File&shy;Completion&shy;Notification&shy;Modes</code> function to change some aspects of this behavior, giving some control of the behavior of the I/O subsystem when a potentially-asynchronous I/O request completes synchronously. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-866423">
				<div id="div-comment-866423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866423">
			October 8, 2010 at 8:21 am</a>		</div>

		<p>Heisenbug!</p>
<p>Seriously, when using async IO, read the documentation thoroughly. There may be edge cases you need to handle or things blow up in your face.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-866433">
				<div id="div-comment-866433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866433">
			October 8, 2010 at 10:45 am</a>		</div>

		<p>Along a similar vein, could you also have an asynchronous read that completes instantly due to the data already being in the cache? &nbsp;Is there a way to determine how big the cache is?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-866473">
				<div id="div-comment-866473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866473">
			October 8, 2010 at 3:53 pm</a>		</div>

		<p>SetÂ­FileÂ­CompletionÂ­NotificationÂ­Modes is broken on sockets</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-866443">
				<div id="div-comment-866443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866443">
			October 8, 2010 at 11:02 am</a>		</div>

		<p>@Joshua</p>
<p>I think documentation on async IO (completion port) could have been much better. </p>
<p>For example, it may clearly state, that IO can be completed synchronously *and* that event/completion port will be signaled. I am not sure, that the case of synchronous completion *and* signaling is clearly stated anywhere at all.</p>
<p>List of function, that supports completion port (see GetQueuedCompletionStatus) is incomplete, but it is not mentioned, that is incomplete. Also I read somewhere (now can&#39;t remember where) that some async requests may return FALSE with GetLastError() == 0 (no error). All of the above is pretty important and could have been mentioned in once place somewhere (like in this article <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/aa365198(VS.85).aspx" rel="nofollow">msdn.microsoft.com/&#8230;/aa365198(VS.85).aspx</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-866483">
				<div id="div-comment-866483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866483">
			October 8, 2010 at 7:10 pm</a>		</div>

		<p>That was always one aspect of async I/O I was never quite sure I got right&#8230; good to know there&#39;s nothing special I need to do if the operation returns TRUE instead of an error and ERROR_IO_PENDING.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-866503">
				<div id="div-comment-866503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866503">
			October 8, 2010 at 10:46 pm</a>		</div>

		<p>Yeah, that helped too &#8211; even though Windows CE doesn&#39;t support async I/O, it does for sockets. All the code I saw (almost no one uses async I/O as it&#39;s probably flaky, though I had to simulate the behavior because one program did) checked to see if it returned TRUE (no error) or FALSE with GetLastError looking for WSA_IO_PENDING.</p>
<p>Didn&#39;t help that the documentation implies both were valid return values that the I/O was pending. Of course, it makes sense now (just that the return call took longer than the notification &#8211; it is asynchronous) given today&#39;s post.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-866523">
				<div id="div-comment-866523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866523">
			October 9, 2010 at 11:37 am</a>		</div>

		<p>The most interesting question about async IO is &quot;why there&#39;s no async CreateFile?&quot; If you want a non-blocking GUI, you need worker threads to host CreateFile, so you can just skip all the async stuff anyway.</p>
<div class="post">[<i>How would an async CreateFile signal completion? The completion key is associated with the file handle, but until you have a handle you can&#39;t call CreateIoCompletionPort to create the association! (Okay, I guess it could return a &quot;placeholder handle&quot; that you could then use to create the association. Wait, now there&#39;s a race condition. Well, I guess you could do something about that too.) (Today, you can issue the synchronous CreateFile and use CancelSynchronousIo to cancel it.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-866533">
				<div id="div-comment-866533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866533">
			October 9, 2010 at 1:35 pm</a>		</div>

		<p>AFAIK, no, you can&#39;t. for CancelSynchronousIo to work, all drivers involved in a particular IO operation MUST support cancelable ARPs. Besides, this is a Windows 6 API, and all statistics I could find tells me that XP on the desktop and 2003 on the server have the major market share. After 3-5 years, maybe, but definitely not &quot;now&quot;. The whole point of existence of an OS is to make application developer life&#39;s easier. So I&#39;ll leave the race condition problem as an exercise to the kernel team. After all, they needed 20 years to create CancelSyncIo function, and I bet that before they do, there were many excuses like &quot;oh that would deadlock, we cannot do it&quot; </p>
<div class="post">[<i>Not sure what you&#39;re getting at. It sounds like you want Microsoft Research to finish work on their time machine. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-866543">
				<div id="div-comment-866543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866543">
			October 9, 2010 at 1:39 pm</a>		</div>

		<p>Doh. I obviously meant IRPs (like the stuff drivers jiggle all the time), and not ARP (like the Add/Remove Programs)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-866553">
				<div id="div-comment-866553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866553">
			October 9, 2010 at 7:42 pm</a>		</div>

		<p>Hmmm, Async. CreateFile.</p>
<p>Taking a page from the Linux kernel (the use there is hard umount of active filesystem), have CreateFile return a real file handle immediately, and if the async operation fails, the io completion port signals that and afterwords all operations on that handle fail with ENODEV or its moral equivalent until the handle is closed.</p>
<p>Oh well, I don&#39;t bother with async IO. It&#39;s a lot less painful to spawn threads and with a thread pool the runtime cost of creating new threads doesn&#39;t outweigh the developer cost of async io anymore.</p>
<div class="post">[<i>The catch is if the async operation fails before you get a chance to call <code>Create&shy;Io&shy;Completion&shy;Port</code>. Then the operation completes with a null Completion&shy;Key, which means you don&#39;t know why you&#39;re being notified. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-866563">
				<div id="div-comment-866563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866563">
			October 10, 2010 at 12:11 pm</a>		</div>

		<p>&quot;Besides, this is a Windows 6 API, and all statistics I could find tells me that XP on the desktop and 2003 on the server have the major market share.&quot;</p>
<p>And it is incorrectly documented to require _WIN32_WINNT &gt;= 0x0501:</p>
<p><a rel="nofollow" target="_new" href="http://connect.microsoft.com/VisualStudio/feedback/details/590790/setfilecompletionnotificationmodes-requires-win32-winnt-to-be-0x0600-not-0x0501" rel="nofollow">connect.microsoft.com/&#8230;/setfilecompletionnotificationmodes-requires-win32-winnt-to-be-0x0600-not-0x0501</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-866723">
				<div id="div-comment-866723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20101008-00/?p=12583#comment-866723">
			October 11, 2010 at 10:51 am</a>		</div>

		<p>@Adam Rosenfield: yes, it can, and (particularly) if the OS is doing read-ahead, it will. You can disable read-ahead with FILE_FLAG_NO_BUFFERING, of course, and FILE_FLAG_RANDOM_ACCESS will reduce it. If you specify FILE_FLAG_SEQUENTIAL_SCAN it makes large read-aheads and aggressively removes data that&#39;s already been read from the cache, while not specifying either flag causes it to heuristically determine how much to read-ahead and where.</p>
<p>@Worf: all the examples for serial I/O on Win32 use asynchronous operations, but CE doesn&#39;t support it! It made emulating the DOS behaviour of serial ports, while supporting abort, pretty painful. WaitCommEvent can only be aborted by calling SetCommMask, which is particularly unintuitive.</p>
<p>@yuhong2: doc bugs should be reported on the MSDN page itself, using the feedback section at the bottom, not on Connect. I&#39;ve added an annotation to the page.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

