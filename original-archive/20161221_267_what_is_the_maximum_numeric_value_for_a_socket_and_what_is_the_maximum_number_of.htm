<html>
<head>
<title>What is the maximum numeric value for a socket, and what is the maximum number of sockets a Windows program can create?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is the maximum numeric value for a socket, and what is the maximum number of sockets a Windows program can create?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 21, 2016 / year-entry #268</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You can create as many as you want, subject to the usual resource constraints.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer had a problem with their application that used
network sockets, and they wanted to know what the maximum
numeric value for a socket is.
"The program uses a signed integer to hold the socket descriptor,
and we found in our testing that the numeric value of
<code>INVALID_<wbr>SOCKET</code> is <code>0xFFFFFFFF</code>.
What is the maximum value?"
</p>
<p>
In addition to being a vague question, it's also a strange question,
so we asked for more information
about the problem they are having,
in the hopes that we could both understand how the problem led them
to asking the strange question,
and so we could try to solve the problem.
</p>
<p>
The customer explained that they have a multithreaded application
that uses thousands of network sockets.
After running for several days, the customer observed that
socket operations are failing with
<code>INVALID_<wbr>SOCKET</code>,
and
<code>WSA&shy;Get&shy;Last&shy;Error</code> returns error
10038: <code>WSA&shy;E&shy;NOT&shy;SOCK</code>.
Since the error is intermittent, the customer is under the impression
that the application may have created so many sockets that their
socket numbers have exceeded the maximum legal numeric value for a socket,
resulting in the <code>INVALID_<wbr>SOCKET</code> error.
</p>
<p>
The customer added,
"According to
<a HREF="https://msdn.microsoft.com/en-us/library/ms739169(v=vs.85).aspx">
this link</a>,
the  maximum number of sockets that a program can use is determined
at compile time by the manifest constant <code>FD_<wbr>SET&shy;SIZE</code>.
However, we cannot find where this constant is defined."
</p>
<p>
Okay, it's not clear where the customer is getting the impression 
that a single program cannot use more than
<code>FD_<wbr>SET&shy;SIZE</code> sockets.
Indeed, the documentation they referenced says quite the opposite:
</p>
<blockquote CLASS=q><p>
The maximum number of sockets that a
Windows Sockets application can use is
<strong>not</strong> affected by the manifest constant 
FD_SETSIZE.
</p>
</blockquote>
<p>
(Emphasis mine.)
</p>
<p>
The documentation continues:
</p>
<blockquote CLASS=q><p>
This value defined in the Winsock2.h header file
is used in constructing the
<a HREF="https://msdn.microsoft.com/en-us/library/ms737873(v=vs.85).aspx">
<b>FD_SET</b></a>
structures used with
<b>select</b>
function.
The default value in Winsock2.h is 64.
</p>
</blockquote>
<p>
Which conveniently answers the customer's third question.
</p>
<p>
What the <code>FD_<wbr>SET&shy;SIZE</code>
constant determines is the maximum number of sockets that
can be passed in a single call to the <code>select</code> function.
The total number of sockets available to a program is not
limited by
<code>FD_<wbr>SET&shy;SIZE</code>.
</p>
<p>
And as the documentation notes, you can make
<code>FD_<wbr>SET&shy;SIZE</code> bigger if you need to.
The point is that the <code>fd_set</code> structure is
a variable-sized structure,
but for compatibility with Unix programs,
it is formally defined as a fixed-size structure
so that programs can pass them around.
</p>
<p>
Okay, now back to the original question:
Is it possible that the <code>socket</code> function
is returning socket numbers that are not legal,
and that's why the program gets
<code>INVALID_<wbr>SOCKET</code> when it tries to perform
socket operations on those sockets?
</p>
<p>
This is another case of starting with the assumption that
you found
an operating system bug instead of starting with the assumption
that you have a bug in your program.
</p>
<p>
While it's possible that there is a bug in the operating
system code that does socket management that causes it to hand
out invalid socket handles,
a much more likely reason that your program is being told
that it is using invalid socket handles is, um,
because it is using invalid socket handles.
</p>
<p>
Verify that the handle being passed really is a valid socket.
Maybe it was closed prematurely elsewhere.
Maybe there is a bug in some other part of the code that is
double-closing a handle (and the second time it closes,
it accidentally closed your socket handle).
Or maybe there is a bug in some other part of the code that is
closing an uninitialized handle variable,
so it's basically rolling the dice,
and most of the time it gets
<code>ERROR_<wbr>INVALID_<wbr>HANDLE</code>, but once in a while,
the uninitialized handle variable happens to contain a value
that numerically matches one of your socket handles, and it ended
up accidentally closing your socket.
</p>
<p>
If you really believe that the <code>socket</code> function is
returning invalid sockets,
I guess you can add debugging code that takes the return value
of every call to <code>socket</code> and (if it is not
<code>INVALID_<wbr>SOCKET</code> indicating that the system could
not create a socket) call
<code>getsockopt</code> to read an arbitrary-selected socket option,
and see whether it fails with 
<code>WSA&shy;E&shy;NOT&shy;SOCK</code>.
</p>
<p>
I bet it won't.
The socket handle was probably good at the point the system gave
it to you.
You probably did something to make it go bad.
Application Verifier can help you find out what.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1277665">
				<div id="div-comment-1277665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Haim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277665">
			December 21, 2016 at 7:24 am</a>		</div>

		<p>Out of the description alone (after few days of usage, our program go crazy) you might suspect the opposite &#8211; they don&#8217;t close the socket properly having a handle leak. after few days the kernel is exhausted and returns INVALID_SOCKET is it can&#8217;t produce anymore sockets.<br />
I bet that one of this cases of &#8220;We write our application in C++, but we don&#8217;t think in RAII&#8221; .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude odd alt thread-odd thread-alt depth-1" id="comment-1277675">
				<div id="div-comment-1277675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277675">
			December 21, 2016 at 7:25 am</a>		</div>

		<p>I had always assumed that since <code>SOCKET</code> is a typedef of <code>UINT_PTR</code> that it was a <code>HANDLE</code> behind the scenes that was constrained to the safe casting range (e.g. the where sign extension does not occur) for an <code>int</code> for &#8220;compatibility&#8221; with code originally written for *nix systems. That said I also don&#8217;t believe in sharing sockets code across APIs. WINSOCK is not POSIX compatible because of type issues and vice versa. That said I really do hope the C++ standards committee gets around to finalizing the Networking TS, and it gets implemented by MSVC and GCC, so I can stop caring about such details.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1277676">
				<div id="div-comment-1277676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Craig</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277676">
			December 21, 2016 at 7:28 am</a>		</div>

		<p>I am a bit disappointed that the first question in the headline wasn&#8217;t answered &#8220;What is the maximum numeric value for a socket&#8221;.  I&#8217;ve seen plenty of code out there that uses an int on 64-bit Windows to hold a socket handle.  A socket handle is 64-bits though.  Maybe the loss of bits is fine, so long as the maximum numeric value is below INT_MAX.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2" id="comment-1277695">
				<div id="div-comment-1277695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277695">
			December 21, 2016 at 7:33 am</a>		</div>

		<p>Not just 64bits, but unsigned too. So there is an implicit conversion issue that invokes potentially implementation defined behavior. Personally I think this is something that POSIX and WINSOCK can fix by doing a <code>SOCKET_DEFINE</code> macro to let the developer know that they can use a <code>SOCKET</code> type that corresponds correctly to the platform.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even depth-2" id="comment-1277715">
				<div id="div-comment-1277715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277715">
			December 21, 2016 at 8:14 am</a>		</div>

		<p>“What is the maximum numeric value for a socket”<br />
This is one of those questions if you ask them, you&#8217;re doing things wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1277735">
				<div id="div-comment-1277735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277735">
			December 21, 2016 at 8:47 am</a>		</div>

		<p>The article entitled &#8220;Porting Socket Applications to Winsock&#8221; (&#8216;Socket Data Type&#8217; section) I believe gives you the answer: &#8220;Socket handles may take any value in the range 0 to INVALID_SOCKET–1.&#8221; [1] In addition, it notes that the SOCKET type is unsigned and lists the gotchas that can occur if you blithely cast away the differences.</p>
<p>Given the information (the SOCKET type is unsigned and not necessarily small, the range excludes a single value, and the size is not specified), I would interpret the SOCKET type as opaque and not assume anything else about it. (As an aside, I&#8217;ve seen older example Unix code that checks for values less than 1024 for socket validity: this can fail unexpectedly when the system&#8217;s FD ulimit is increased!)</p>
<p>[1] <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms740516(v=vs.85)" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/ms740516(v=vs.85)</a>.aspx</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1277685">
				<div id="div-comment-1277685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277685">
			December 21, 2016 at 7:33 am</a>		</div>

		<p>&#8220;This is another case of starting with the assumption that you found an operating system bug instead of starting with the assumption that you have a bug in your program.&#8221;</p>
<p>But&#8230; that&#8217;s such a convenient and ego-soothing assumption to make! After all, OS bugs do exist, and my code is always right! I mean, except for all those other times I got something wrong, obviously, but those were silly mistakes and don&#8217;t count. Besides, I&#8217;ve re-read the code this time, and even though I have missed many other bugs on previous multiple re-readings in the past, I&#8217;m *sure* I haven&#8217;t missed anything this time.</p>
<p>So it must be an OS bug. Or a compiler bug &#8211; those happen too, right?</p>
<p>(Besides, the universe has a dark sense of humour. Only after it&#8217;s spent the better part of a decade beating all the hubris out of your silly human brain, and you have finally learned that it&#8217;s *always* a bug in your own code, will it give you an OS bug to beat your head against. For some reason, I&#8217;m suddenly imagining an IT version of House, set in a dev shop where young idealistic developers being mentored by a misanthropic grey<strike>beard</strike>hair, whose catchphrases include &#8220;The Client Always Lies&#8221; and &#8220;It&#8217;s Never An OS Bug&#8221;.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-scott-brickey odd alt depth-2" id="comment-1277745">
				<div id="div-comment-1277745" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Scott+Brickey' rel='external nofollow' class='url'>Scott Brickey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277745">
			December 21, 2016 at 8:51 am</a>		</div>

		<p>Except for that ONE time that it WAS lupus&#8230; i mean, an OS bug</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1277775">
				<div id="div-comment-1277775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rutger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277775">
			December 21, 2016 at 11:25 am</a>		</div>

		<p>For some reason, I’m suddenly imagining an IT version of House, set in a dev shop where young idealistic developers being mentored by a misanthropic greybeardhair, whose catchphrases include “The Client Always Lies” and “It’s Never An OS Bug”.)</p>
<p>That sounds like our 3rd line department. Customers lie, the truth is in the logfiles. Compared to some of our consultants House is a naive and ignorant little puppy :)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1277836">
				<div id="div-comment-1277836" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark (The Other Mark)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277836">
			December 22, 2016 at 9:01 am</a>		</div>

		<p>Could be a CPU Bug. Did you check the latest CPU Errata? Or maybe it&#8217;s a new CPU bug. That could explain why Microsoft isn&#8217;t helping- They might have different CPUs. It&#8217;s probably best to start with Intel, because it&#8217;s not your code.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1277885">
				<div id="div-comment-1277885" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adamrosenfield.com' rel='external nofollow' class='url'>Adam Rosenfield</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277885">
			December 23, 2016 at 7:21 am</a>		</div>

		<p>The application developer says &#8220;it must be a bug in the library.&#8221;<br />
The library developer says &#8220;it must be a bug in the OS.&#8221;<br />
The OS developer says &#8220;it must be a bug in the hardware.&#8221;<br />
The hardware developer says &#8220;it must be a bug in physics.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1277795">
				<div id="div-comment-1277795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277795">
			December 21, 2016 at 1:08 pm</a>		</div>

		<p>I miss the part where Raymond&#8217;s psychic debugging is proved correct and the customer walks away shamed.  That&#8217;s part of why I come here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1277805">
				<div id="div-comment-1277805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277805">
			December 21, 2016 at 1:11 pm</a>		</div>

		<p>Wait a minute &#8230; You can wait for more than 64 sockets at once?!! Does this mean there&#8217;s some undocumented API that can wait for more than 64 handles at once or is ws2_32.dll doing something wild?</p>
<p>A documented solution for waiting for N handles at once (where N &gt;&gt; 64) would be really useful for quite a few applications.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1277815">
				<div id="div-comment-1277815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277815">
			December 21, 2016 at 1:49 pm</a>		</div>

		<p>Sockets aren&#8217;t kernel handles.</p>
<p>The event handle passed to WSAEventSelect doesn&#8217;t have to be unique.  You could create one event, link it to all the sockets using WSAEventSelect, then WaitForSingleObjectEx on that event.</p>
<p>Of course, when it returns you need to actually test all the sockets to see which should be reported as having activity, but you needed to do that anyway, since neither WaitForMultipleObjects(bWaitAll := false) nor WaitForMultipleObjects(bWaitAll := true) has the same semantics as select.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1277975">
				<div id="div-comment-1277975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1277975">
			December 25, 2016 at 10:12 am</a>		</div>

		<p>&#8220;And as the documentation notes, you can make FD_SET­SIZE bigger if you need to. The point is that the fd_set structure is a variable-sized structure, but for compatibility with Unix programs, it is formally defined as a fixed-size structure so that programs can pass them around. &#8221;</p>
<p>google for increasing FD_SETSIZE and you&#8217;ll find an example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003bffd836fd3f1 odd alt depth-2" id="comment-1278485">
				<div id="div-comment-1278485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/RichardCox' rel='external nofollow' class='url'>RichardCox</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161221-00/?p=94985#comment-1278485">
			December 30, 2016 at 2:50 am</a>		</div>

		<p>&gt; A documented solution for waiting for N handles at once (where N &gt;&gt; 64) would be really useful for quite a few applications.</p>
<p>Use I/O Completion Ports. There is no limited (other than overall system resources) to how many I/O operations can be associated to one IOCP. Of course you need a rather different structure to your program.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

