<html>
<head>
<title>How can I reserve a range of address space and create nonzero memory on demand when the program reads or writes a page in the range?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I reserve a range of address space and create nonzero memory on demand when the program reads or writes a page in the range?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 25, 2018 / year-entry #21</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Swizzle me this.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we looked at how you can
reserve a range of address space and
receive notifications
when the program first reads or writes a page in the range,
<!-- backref: How can I reserve a range of address space and receive notifications when the program first reads or writes a page in the range? -->
in the case where you merely want the notification,
or maybe just want to commit blank pages</a>.
But what if you want to create nonzero memory instead of
just committing blank pages?
</p>
<p>
For example, you might want to simulate a memory-mapped file,
except that instead of being backed by a file,
it's backed by some algorithmically generated data.
For example, you might be doing pointer swizzling,
wherein a large database is incrementally loaded into memory
as pages of it are faulted in.
As each page faults in, each pointer on the page is
updated (swizzled) to point to an as-yet unused page in the
reserved region.
When an access violation occurs in a reserved page,
the code looks up which database page that reserved page
corresponds to,
loads the page from the database,
and then updates each pointer on <i>that</i> page to point
to an as-yet unused page.
From the program's point of view, the database is being paged
in on demand.
</p>
<p>
Pointer swizzling is particularly handy when accessing a very
large database on a 32-bit system,
because you don't have to memory-map the entire database.
The memory usage is the number of pages actually faulted in,
and the address space usage is the number of pages referenced
by faulted-in pages.
</p>
<p>
You would handle an access violation on a reserved page
by allocating a page of data at the desired location,
reading the raw data from the database,
and swizzling the pointers.
You then mark the page read-only and restart the faulting instruction.
("Look again, and you might find a surprise!")
</p>
<p>
If you take a write protection violation, then you
mark the page as dirty in your data structures,
remove write protection from the page,
and restart the faulting instruction.
When the database file is closed,
you unswizzle all the pointers in the dirty pages and write them back
to the database.
</p>
<p>
As with
<!-- backref: How can I reserve a range of address space and receive notifications when the program first reads or writes a page in the range? -->
the case discussed last time</a>,
you can choose between a structured exception handler
(if you need this only for the duration of a function call)
or a vectored exception handler
(which remains active until explicitly removed).
In the case of a swizzled database,
you probably would install a vectored exception handler when the
database is opened and remove it when the database is closed.
</p>
<p>
And as with the case discussed last time,
you have to watch out for passing these buffers directly to kernel mode,
because kernel mode will reject them as invalid.
You'll have to turn them from pretend memory to real memory
before using them as the source or destination buffer
of a kernel mode function.
</p>
<p>
The nastier problem is multithreading.
If one thread chases a swizzled pointer to a reserved page,
your code will start filling the page with data.
During that time,
another thread can chase the same pointer,
or another swizzled pointer to the same page,
and start accessing the memory while the first
thread is still getting the memory ready.
</p>
<p>
We'll take up this topic
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180126-00/?p=97905">
next time</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180125-00/?p=97885#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='97885' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="4e7d6a81fd" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="194"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-ranta even thread-even depth-1" id="comment-1322335">
				<div id="div-comment-1322335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/ranta' rel='external nofollow' class='url'>ranta</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885#comment-1322335">
			January 25, 2018 at 9:01 am</a>		</div>

		<p>Jumping ahead, I imagine one can handle the multithreaded case by calling MapViewOfFile twice to map two views of the same section object to different virtual addresses. The program would access the data via the first view; the exception handler would change the page protection at the corresponding address in the second view, populate the data there, and change the protection in the first view. I suppose the exception handler would need to enter a critical section as well. That makes me worry about ill-behaved antivirus software possibly causing another exception within the vectored exception handler.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885&#038;replytocom=1322335#respond' onclick='return addComment.moveForm( "div-comment-1322335", "1322335", "respond", "97885" )' aria-label='Reply to ranta'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1322375">
				<div id="div-comment-1322375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885#comment-1322375">
			January 25, 2018 at 10:01 am</a>		</div>

		<p>Is there a good reason to &#8220;simulate&#8221; a memory-mapped file that passes the -100 points test?</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885&#038;replytocom=1322375#respond' onclick='return addComment.moveForm( "div-comment-1322375", "1322375", "respond", "97885" )' aria-label='Reply to Peter Doubleday'>Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1322556">
				<div id="div-comment-1322556" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885#comment-1322556">
			January 26, 2018 at 9:52 am</a>		</div>

		<p>Pointer swizzling is the example I gave.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885&#038;replytocom=1322556#respond' onclick='return addComment.moveForm( "div-comment-1322556", "1322556", "respond", "97885" )' aria-label='Reply to Raymond Chen - MSFT'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1322705">
				<div id="div-comment-1322705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885#comment-1322705">
			January 26, 2018 at 11:22 pm</a>		</div>

		<p>Anything that includes &#8220;the database file&#8221; has already passed +100 and beyond; when customers are willing to pay millions of dollars to avoid Oracle&#8217;s tens of millions of dollars for more assurance and a few performance optimizations, you dig into the nitty-gritty of user page faults to squeeze out every micro-optimization.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885&#038;replytocom=1322705#respond' onclick='return addComment.moveForm( "div-comment-1322705", "1322705", "respond", "97885" )' aria-label='Reply to Joshua Bowman'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1322626">
				<div id="div-comment-1322626" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Woah There</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885#comment-1322626">
			January 26, 2018 at 11:33 am</a>		</div>

		<p>Is there a way to do this technique in a way that handles COW smarter?</p>
<p>e.g. if a process reads from the database the page is mapped in and swizzled. This page of memory can be evicted by the OS at any time and not backed up by the OS&#8217;s swap file since it can be deterministically generated. If another process maps in the same and reads from the same page, this page is shared between processes.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180125-00/?p=97885&#038;replytocom=1322626#respond' onclick='return addComment.moveForm( "div-comment-1322626", "1322626", "respond", "97885" )' aria-label='Reply to Woah There'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

