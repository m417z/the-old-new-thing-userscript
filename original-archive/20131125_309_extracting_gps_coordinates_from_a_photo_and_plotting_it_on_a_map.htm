<html>
<head>
<title>Extracting GPS coordinates from a photo and plotting it on a map</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Extracting GPS coordinates from a photo and plotting it on a map</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 25, 2013 / year-entry #310</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program extracts GPS coordinates from a photo and plots it on a map. Remember, Little Programs do little to no error checking, because that's how they roll. #define STRICT #define UNICODE #define _UNICODE #include <windows.h> #include <shlobj.h> #include <shellapi.h> #include <propidl.h> #include <propkey.h> #include <propvarutil.h> #include <atlbase.h> #include <atlalloc.h> #include <strsafe.h> void OpenMap(double...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program extracts GPS coordinates from a photo and plots
it on a map.
Remember, Little Programs do little to no error checking,
because that's how they roll.
</p>
<pre>
#define STRICT
#define UNICODE
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;shellapi.h&gt;
#include &lt;propidl.h&gt;
#include &lt;propkey.h&gt;
#include &lt;propvarutil.h&gt;
#include &lt;atlbase.h&gt;
#include &lt;atlalloc.h&gt;
#include &lt;strsafe.h&gt;

void OpenMap(double dblLatitude, double dblLongitude)
{
 wchar_t szUrl[1024];
 StringCchPrintf(szUrl, ARRAYSIZE(szUrl),
  L"http://www.bing.com/maps/default.aspx?v=2&amp;q=%f,%f",
  dblLatitude, dblLongitude);
 ShellExecute(nullptr, nullptr, szUrl, nullptr, nullptr, SW_NORMAL);
}
</pre>
<p>
We start with a simple function that takes a latitude and longitude
and opens a Web page that highlights that coordinate.
In a real program, you probably would do something more interesting
with the coordinates, but I'm opening a Web page just to do
<i>something</i>.
</p>
<pre>
class CPropVariant : public PROPVARIANT {
public:
 CPropVariant() { PropVariantInit(this); }
 ~CPropVariant() { PropVariantClear(this); }
};
</pre>
<p>
The <code>CProp&shy;Variant</code> class
is an incredibly lame wrapper around
<code>PROP&shy;VARIANT</code> for RAII purposes.
</p>
<pre>
HRESULT GetGPSCoordinateAsDecimal(
    IShellItem2 *psi2,
    REFPROPERTYKEY pkey,
    REFPROPERTYKEY pkeyRef,
    double *pdbl)
{
 CPropVariant spvar;
 HRESULT hr = psi2-&gt;GetProperty(pkey, &amp;spvar);
 if (FAILED(hr)) return hr;

 double rgdbl[3];
 ULONG cElt;
 hr = PropVariantToDoubleVector(spvar, rgdbl, 3, &amp;cElt);
 if (FAILED(hr)) return hr;
 if (cElt != 3) return E_INVALIDARG;

 double coord = rgdbl[0] + rgdbl[1] / 60.0 + rgdbl[2] / 60.0 / 60.0;

 CComHeapPtr&lt;wchar_t&gt; spszDir;
 hr = psi2-&gt;GetString(pkeyRef, &amp;spszDir);
 if (FAILED(hr)) return hr;

 if (spszDir[0] == L'W' || spszDir[0] == L'S') coord = -coord;

 *pdbl = coord;
 return S_OK;
}
</pre>
<p>
The
<code>Get&shy;GPS&shy;Coordinate&shy;As&shy;Decimal</code>
function is where the real work happens.
GPS latitude and longitude are
encoded in the shell property system as
a bunch of related properties.
</p>
<table BORDER=1 STYLE="border-collapse: collapse" BORDERCOLOR=black
CELLPADDING=3>
<tr>
<th>Property</th>
<th>Type</th>
<th>Meaning</th>
</tr>
<tr>
<td>System.GPS.DestLatitudeNumerator</td>
<td>UINT[3]</td>
<td>numerators for degrees, minutes, and seconds of latitude</td>
</tr>
<tr>
<td>System.GPS.DestLatitudeDenominator</td>
<td>UINT[3]</td>
<td>denominators for degrees, minutes, and seconds of latitude</td>
</tr>
<tr>
<td>System.GPS.DestLatitude</td>
<td>double[3]</td>
<td>degrees, minutes, and seconds of latitude (numerator &divide; denominator)</td>
</tr>
<tr>
<td>System.GPS.DestLatitudeRef</td>
<td>string</td>
<td>"N" or "S"</td>
</tr>
<tr>
<td>System.GPS.DestLongitudeNumerator</td>
<td>UINT[3]</td>
<td>numerators for degrees, minutes, and seconds of longitude</td>
</tr>
<tr>
<td>System.GPS.DestLongitudeDenominator</td>
<td>UINT[3]</td>
<td>denominators for degrees, minutes, and seconds of longitude</td>
</tr>
<tr>
<td>System.GPS.DestLongitude</td>
<td>double[3]</td>
<td>degrees, minutes, and seconds of Longitude (numerator &divide; denominator)</td>
</tr>
<tr>
<td>System.GPS.DestLongitudeRef</td>
<td>string</td>
<td>"E" or "W"</td>
</tr>
</table>
<p>
Each of the coordinates is recorded in DMS form as pairs of unsigned
integers (numerator and denominator).
The direction is recorded as a string as a separate property.
Why this wacky format?
Probably because that's the way EXIF records it.
</p>
<p>
For convenience, there is a combo property which does the division for you
(but frustratingly, does not flip the sign for direction).
And if you want the coordinates in decimal form,
then you'll have to do the DMS-to-decimal conversion yourself.
</p>
<p>
We start by getting the DMS value as a <code>PROP&shy;VARIANT</code>
then converting it to an array of <code>double</code>s.
(There had better be three of them.)
We then use the power of mathematics to convert from DMS to decimal degrees.
</p>
<p>
Finally, we flip the sign if the direction from center is
West or South.
</p>
<p>
Now it's time to put these functions together.
</p>
<pre>
int __cdecl wmain(int argc, wchar_t **argv)
{
 if (argc &lt; 2) return 0;
 CCoInitialize init;

 CComPtr&lt;IShellItem2&gt; spsi2;
 if (FAILED(SHCreateItemFromParsingName(argv[1],
              nullptr, IID_PPV_ARGS(&amp;spsi2)))) return 0;

 double dblLong, dblLat;
 if (FAILED(GetGPSCoordinateAsDecimal(spsi2, PKEY_GPS_Longitude,
                    PKEY_GPS_LongitudeRef, &amp;dblLong))) return 0;
 if (FAILED(GetGPSCoordinateAsDecimal(spsi2, PKEY_GPS_Latitude,
                    PKEY_GPS_LatitudeRef, &amp;dblLat))) return 0;

 OpenMap(dblLong, dblLat);

 return 0;
}
</pre>
<p>
Find a photo with GPS information encoded inside it
and pass it on the command line as a fully-qualified path.
(Because I'm too lazy to call
<code>Get&shy;Full&shy;Path&shy;Name</code>.)
The program should open a Web page that shows where the
picture was taken.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1091283">
				<div id="div-comment-1091283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091283">
			November 25, 2013 at 9:55 am</a>		</div>

		<p>&quot;Find a photo with GPS information encoded inside it&#8230;&quot; &#8211; So next Little Program will get a photo as parameter and tell if the GPS information is encoded inside?</p>
<div class="post">[<em>Read the code. It already does what you request. My point is that if you pass it a photo without GPS information, then the program isn&#39;t very interesting. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091343">
				<div id="div-comment-1091343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091343">
			November 25, 2013 at 11:31 am</a>		</div>

		<p>Danny: Yes; it will replace the line &quot;OpenMap(dblLong, dblLat);&quot; with &quot;return 1;&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091353">
				<div id="div-comment-1091353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Motti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091353">
			November 25, 2013 at 1:21 pm</a>		</div>

		<p>Pet peeve: CPropVariant does not obay the Rule of Three.</p>
<p><a href="http://en.wikipedia.org/wiki/Rule_of_three_(C++_programming)" rel="nofollow" target="_new">en.wikipedia.org/&#8230;/Rule_of_three_(C++_programming)</a></p>
<div class="post">[<em>See: Little Program. &quot;Hey, let me write a method that nobody calls.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091373">
				<div id="div-comment-1091373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091373">
			November 25, 2013 at 1:31 pm</a>		</div>

		<p>In some ways it would be nice in C++ if the assignment operator and copy constructor were automatically =delete, with the ability to explicitly request them if you want them.</p>
<p>For the kind of programming I do, 90% of the time I don&#39;t want them. &nbsp;I just get in the habit of deriving from boost::noncopyable for most anything that I do.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091383">
				<div id="div-comment-1091383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091383">
			November 25, 2013 at 2:34 pm</a>		</div>

		<p>@SimonRev: If you provide a move ctor/assignment operator they are, which you probably should be (nothrow if possible). Certainly a mistake for C++98 to autodefine them for classes with dtors, but =deleting them only on that now would break literally all the code :).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091403">
				<div id="div-comment-1091403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091403">
			November 25, 2013 at 3:57 pm</a>		</div>

		<p>@Simon Buchan: I don&#39;t know there are many classes I don&#39;t want to be movable either &#8211; there are many cases where moving/copying instances around just hides some bug or mistake.</p>
<p>But yeah backcomp obviously &#8211; nothing we can do about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091433">
				<div id="div-comment-1091433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091433">
			November 25, 2013 at 8:59 pm</a>		</div>

		<p>@Motti Lanzkron:</p>
<p>It may be a pet peeve, but remember, sample programs are there to show how something is done, not best practices.</p>
<p>I&#39;d imagine in real world code the additional constructors/assignment operators would be defined as a matter of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091453">
				<div id="div-comment-1091453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Motti</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091453">
			November 26, 2013 at 12:44 am</a>		</div>

		<p>&gt; [See: Little Program. &quot;Hey, let me write a method that nobody calls.&quot; -Raymond]</p>
<p>I get that, I would not have written these methods, only prevent them from existing.</p>
<p>&nbsp; &nbsp;class CPropVariant : public PROPVARIANT, boost::noncopyable {</p>
<div class="post">[<em>&quot;Hey, let me create a dependency on an external library that doesn&#39;t come with the Platform SDK so it can implement a method that nobody calls. Also, so that people trying to port this to C# will have no clue what just happened.&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091463">
				<div id="div-comment-1091463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091463">
			November 26, 2013 at 1:50 am</a>		</div>

		<p>@voo: Excuse me, what&#39;s the purpose of an uncopyable AND unmovable thingie?</p>
<p>@Motti: Gosh, just declare this CPropVariant inside GetGPSCoordinateAsDecimal, and voila, you can&#39;t give it away to anyone, especially if you change it to </p>
<p> &nbsp;class CPropVariant {</p>
<p> &nbsp;public:</p>
<p> &nbsp; &nbsp;PROPVARIANT data;</p>
<p> &nbsp; &nbsp;CPropVariant() { PropVariantInit(m); }</p>
<p> &nbsp; &nbsp;~CPropVariant() { PropVariantClear(m); }</p>
<p> &nbsp;};</p>
<p>to prevent the implicit cast to PROPVARIANT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091593">
				<div id="div-comment-1091593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091593">
			November 26, 2013 at 9:10 am</a>		</div>

		<p>Since implicit declaration of copy ops is deprecated in C++11 if a destructor or one of the copy ops is defined, Raymond&#39;s clearly just programming for a 3011 world when the committee finally follows through with its deprecation.</p>
<p>@Joker_vD: Any type that should only be used with &quot;reference semantics&quot; where you&#39;d want to avoid implicit slicing. Also, any type whose object identity is critical to its correctness or the operations themselves wouldn&#39;t follow the contracts of those types. Such as std::atomic, std::mutex (and friends), SRWLOCK, CRITICAL_SECTION, and CONDITION_VARIABLE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091613">
				<div id="div-comment-1091613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091613">
			November 26, 2013 at 9:47 am</a>		</div>

		<p>&quot;Any type that should only be used with &quot;reference semantics&quot; where you&#39;d want to avoid implicit slicing.&quot;</p>
<p>Pass around a shared_ptr to it? Because I&#39;ve indeed seen uncopyable, unmovable singleton (via static field) thingies, and they were always passed around as &amp;, and there were a couple of methods with surprise &quot;delete this&quot; inside, and&#8230; oh goodness. What a joy it was to debug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1091483">
				<div id="div-comment-1091483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091483">
			November 26, 2013 at 7:14 am</a>		</div>

		<p>It&#39;s funny, because the linked Rule of Three article on Wikipedia, in it&#39;s very first sentence, links to the &quot;rule of thumb&quot; article, which, in *it&#39;s* very first sentence, says &quot;A rule of thumb is a principle with broad application that is not intended to be strictly accurate or reliable for every situation.&quot;</p>
<p>Like the pirate code, it&#39;s more of a guideline.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1091913">
				<div id="div-comment-1091913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131125-00/?p=2583#comment-1091913">
			November 27, 2013 at 9:29 pm</a>		</div>

		<p>I love these little programs, and this is a particulary fun one. Thanks Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

