<html>
<head>
<title>The geeky thrill of discovering that two things are really the same thing, just with different labels</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The geeky thrill of discovering that two things are really the same thing, just with different labels</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 14, 2014 / year-entry #95</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's post about binomial coefficients was intended to be a warm-up for Catalan numbers, but it turns out Eric Lippert already covered them, first in the context of binary trees, then in the context of arbitrary trees and forests, and then again in the context of matched parentheses. Another way of seeing the correspondence between...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's post about binomial coefficients
was intended to be a warm-up for Catalan numbers,
but it turns out Eric Lippert already covered them,
<a HREF="http://blogs.msdn.com/b/ericlippert/archive/2010/04/19/every-binary-tree-there-is.aspx">
first in the context of binary trees</a>,
<a HREF="http://blogs.msdn.com/b/ericlippert/archive/2010/04/22/every-tree-there-is.aspx">
then in the context of arbitrary trees and forests</a>,
and then again
<a HREF="http://blogs.msdn.com/b/ericlippert/archive/2010/04/22/every-tree-there-is.aspx">
in the context of matched parentheses</a>.
Another way of seeing the correspondence
between forests and matched parentheses is simply to consider
each <code>{</code> as an XML open-tag and each <code>}</code> as
an XML end-tag.
</p>
<p>
One thing to take away from the enumeration of objects controlled
by Catalan numbers is that when you see multiplication in a recurrence
relation, that typically corresponds to a nested loop.
(We saw this ourselves when we studied Stirling numbers of the second kind.)
</p>
<p>
The correspondence between binary trees and arbitrary forests
is done by simply renaming variables:
<code>left&shy;Child</code> and <code>right&shy;Child</code> 
turn into
<code>first&shy;Child</code> and <code>next&shy;Sibling</code>.
</p>
<p>
Renaming variables also
reveals an interesting equivalence
between the two algorithms for
reversing a linked list.
One technique is to do link rewriting:
</p>
<pre>
Node *Reverse(Node *head)
{
 Node *prev = nullptr;
 while (head) {
  // The node we are rewriting
  Node *current = head;

  // Advance to next node before
  // we overwrite the outbound pointer
  head = current->next;

  // Repoint to previous node
  current->next = prev;

  // Advance the trailing pointer
  prev = current;
 }
 return prev;
}
</pre>
<p>
Another technique is to pop nodes off one list while pushing
them onto another.
</p>
<pre>
Node *Reverse(Node *head)
{
 Node *result = nullptr;
 while (head) {
  // Pop
  Node *current = head;
  head = current->next;

  // Push
  current->next = result;
  result = current;
 }
 return result;
}
</pre>
<p>
But if you look more closely at the two versions,
you'll see that they are not really two algorithms.
They are the <i>same</i> algorithm, just with different
comments and variable names!
</p>
<p>
One of my colleagues used this as an interview question and guided
candidates through both algorithms, only to discover
later that they were actually the same algorithm,
merely viewed through different-colored glasses.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1119613">
				<div id="div-comment-1119613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raidri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119613">
			April 14, 2014 at 7:33 am</a>		</div>

		<p>The second link and the third link are the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1119623">
				<div id="div-comment-1119623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">j3anders</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119623">
			April 14, 2014 at 7:41 am</a>		</div>

		<p>I&#39;ve had Bresenham&#39;s line drawing algorithm pop up in all sorts of unexpected places. Most recently I think it was for discrete pulse-width modulation, and the same trick to make everything use integer math applied.</p>
<p>@Raidiri, did you get a geeky thrill from discovering that the two links were really the same thing, just with different labels? :-)</p>
<div class="post">[<em>Well-done. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1119633">
				<div id="div-comment-1119633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119633">
			April 14, 2014 at 8:23 am</a>		</div>

		<p>@Raymond, the second algorithm doesn&#39;t do what you specify (&quot;Another technique is to pop nodes off one list while pushing them onto another.&quot;), it reuses the nodes, so effectively there is no other list. By its description, I&#39;d expect the original list to remain intact.</p>
<div class="post">[<em>The other list is the one the items being pushed onto. But if you disagree with my terminology, then feel free to substitute your own. The point is, it&#39;s being viewed as operations on two lists. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1119653">
				<div id="div-comment-1119653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Topping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119653">
			April 14, 2014 at 9:31 am</a>		</div>

		<p>We use this as an interview question also: &quot;How do you represent an n-ary tree using a binary tree? Why would you want to do this?&quot; &nbsp;I am not sure I like using the term &quot;arbitrary trees&quot;. Sounds too much like &quot;random trees&quot;. Many candidates hear the word &quot;tree&quot; and think the question is about database searching. We stop them immediately and explain that it isn&#39;t. Some come up with an implementation in C++ that uses std::vector to hold pointers to child nodes without ever thinking about the likely implementation and performance characteristics of such an implementation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1119663">
				<div id="div-comment-1119663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119663">
			April 14, 2014 at 9:45 am</a>		</div>

		<p>@Paul Topping: Ask me such a question would yield &quot;What are you trying to do with an n-ary tree?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1119693">
				<div id="div-comment-1119693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119693">
			April 14, 2014 at 10:37 am</a>		</div>

		<p>@John Doe: &quot;the second algorithm doesn&#39;t do what you specify (&quot;Another technique is to pop nodes off one list while pushing them onto another.&quot;), it reuses the nodes, so effectively there is no other list. By its description, I&#39;d expect the original list to remain intact.&quot;</p>
<p>(1) The &quot;effectively there is no other list&quot; is kind of Raymond&#39;s point.</p>
<p>(2) What does &quot;pop nodes off one list&quot; mean to you? Certainly doesn&#39;t sound like it&#39;s leaving the list intact to me&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1119713">
				<div id="div-comment-1119713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Topping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119713">
			April 14, 2014 at 10:50 am</a>		</div>

		<p>@Joshua: My answer would be, &quot;Doesn&#39;t matter. N-ary trees occur in lots of models of the real world. While it is true that one might want to optimize the implementation for a specific use, the trade-offs involved in such a discussion are exactly the point of this interview question.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1119743">
				<div id="div-comment-1119743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119743">
			April 14, 2014 at 11:13 am</a>		</div>

		<p>Hmmm. Obviously not a search tree then. I&#39;m used to general purpose N-ary trees being implemented as first-child next-sibling trees (my local experience says the N doesn&#39;t hold constant for long). While the node-net does indeed look like a binary tree the logical operation set doesn&#39;t. (Enum all children of a node is a common operation but decend-left returning all nodes in a binary tree isn&#39;t.)</p>
<p>The std::vector is how I&#39;d end up storing a DAG.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1119763">
				<div id="div-comment-1119763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Topping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119763">
			April 14, 2014 at 1:03 pm</a>		</div>

		<p>The first-child next-sibling implementation choice is a good one because it avoids dynamic allocation of a child list within each node. That&#39;s what&#39;s implied by using vector to hold that list.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1119803">
				<div id="div-comment-1119803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Liquorice</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119803">
			April 14, 2014 at 7:16 pm</a>		</div>

		<p>@Paul Topping: std::vector provides many methods and saves your coding time. I think two implementations have their advantages and disadvantages. Which is better depends on the actual situation, and obviously in some situations dynamic allocation is not a problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1119823">
				<div id="div-comment-1119823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1119823">
			April 15, 2014 at 3:29 am</a>		</div>

		<p>@Joshua: My answer would be that you, via your browser, are using one now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1120073">
				<div id="div-comment-1120073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Topping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1120073">
			April 15, 2014 at 12:55 pm</a>		</div>

		<p>@Liquorice I disagree. While std::vector does provide many methods and saves your coding time, it is a poor choice for all uses of an n-ary tree. Perhaps for some throw-away code it would be acceptable but almost anything is acceptable in that situation. A vector will initially allocate space for some number of items and then re-allocate space if that count is exceeded. It wastes considerable memory space if the number of children of each tree node is much less than that allocation. If adding a node causes the list to be re-allocated, then it is relatively huge performance hit. The binary node implementation is far superior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1120453">
				<div id="div-comment-1120453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric Lippert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1120453">
			April 16, 2014 at 11:28 am</a>		</div>

		<p>Thanks as always for the shout-out.</p>
<p>When I first interviewed at Microsoft back in the 1990s one of the questions I was asked was &quot;reverse a linked list in the language of your choice&quot;, so I wrote &quot;newList = MakeEmptyLinkedList(); while (!list-&gt;Empty()) newList-&gt;Push(list-&gt;Pop()); list = newList;&quot; and this completely flummoxed the interviewer for some reason. He seemed to expect that there would be more pointers in there somewhere. That was a very strange day for me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1120413">
				<div id="div-comment-1120413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1120413">
			April 16, 2014 at 10:20 am</a>		</div>

		<p>@Paul: So in your estimation, throwing away locality and causing *every* addition to cause allocation is a performance improvement over sometimes needing to reallocate, but with amortized cost?</p>
<p>The vector version may waste space, but time performance is quite often better. &nbsp;Especially on reads. &nbsp;(Also note the difference between storing children as a vector of pointers vs a pointer to a vector of objects)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1120493">
				<div id="div-comment-1120493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Topping</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140414-01/?p=1253#comment-1120493">
			April 16, 2014 at 12:33 pm</a>		</div>

		<p>@Ben Voigt: I am confused by your comment. Modeling an n-ary tree using a binary tree does no allocation at all except for the node itself. There are no auxiliary data structures at all. </p>
<p>Note that the vector implementation under discussion (by me, at least) is where each tree node contains a single member whose type is vector &lt;*node&gt;. Although std::vector implementers are free to implement it how ever they want, the typical implementation will consist of a pointer to an array of elements (node * in this case).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

