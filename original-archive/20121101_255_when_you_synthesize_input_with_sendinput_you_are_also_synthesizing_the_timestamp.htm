<html>
<head>
<title>When you synthesize input with SendInput, you are also synthesizing the timestamp</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When you synthesize input with SendInput, you are also synthesizing the timestamp</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 1, 2012 / year-entry #256</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121101-00/?p=6193</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was reporting a problem when they used the Send­Input function to simulate a drag/drop operation for automated testing purposes. I see the mouse move from one location to another, and the starting and stopping locations are correct on the screen, but the mouse moves instantaneously rather than waiting 500ms between operations. Here's how...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was reporting a problem when they used the
<code>Send&shy;Input</code> function to simulate a drag/drop
operation for automated testing purposes.
</p>
<blockquote CLASS=q>
<p>
I see the mouse move from one location to another,
and the starting and stopping locations are correct on the screen,
but the mouse moves instantaneously rather than waiting 500ms between
operations.
Here's how I'm sending the input.
</p>
<pre>
INPUT input[3] = { 0 };

// Click
input[0].type = INPUT_MOUSE;
input[0].mi.dwFlags = MOUSEEVENTF_LEFTDOWN;
input[0].mi.time = 500;

// Drag
input[1].type = INPUT_MOUSE;
input[1].mi.dwFlags = MOUSEEVENTF_MOVE;
input[1].mi.dx = 100;
input[1].mi.dy = 100;
input[1].mi.time = 1000;

// Release
input[2].type = INPUT_MOUSE;
input[2].mi.dwFlags = MOUSEEVENTF_LEFTUP;
input[2].mi.time = 500;

SendInput(3, input, sizeof(INPUT));
</pre>
</blockquote>
<p>
Well, yeah, all the events occur immediately
because you submitted them all at once.
</p>
<p>
The <code>time</code> field in the
<code>MOUSE&shy;INPUT</code> structure is not for
introducing delays in playback.
Though I'm not sure what the customer thought
the <code>time</code> field was.
They say that they want a 500ms delay between operations.
At first, I thought that they may have misinterpreted
it as a delay relative to the time the
<code>Send&shy;Input</code> call is made,
since they set
<code>input[0].mi.time</code> to 500 and
<code>input[1].mi.time</code> to 1000.
But if thay were the case, then setting
<code>input[2].mi.time</code> to 500
would end up going backward in time.
But looking at the big picture,
it's probably not worth trying to figure out what they
were thinking,
since that code will have to be scrapped anyway.
</p>
<p>
The <code>time</code> field is for letting an input source
(typically a hardware device)
say,
"Hi,
um, the mouse left button went down at 9:30 this morning.
Yes, I know it's already 10am.
The PCI bus got a flat tire,
and then the spare was also flat,
and really there's no point going into the details.
Sorry this message arrived late."
The window manager (and anybody else who bothers to check
the <code>time</code> member of the <code>MSG</code> structure)
uses this information to do things like
detect double-clicks.
If the input source later reports,
"Hi, um, the mouse left button went up at 9:30:00.100 this morning,
sorry for the late report,"
the window manager says,
"Well, that was only 100 milliseconds after the button went down
<i>thirty minutes ago</i>,
so I guess that's a double-click after all.
<i>Could you try to be a bit more prompt with this information
in the future?</i>"
(Sarcasm added.)
</p>
<p>
In other words, the <code>time</code> member of the
<code>MOUSE&shy;INPUT</code> structure is for backdating input
events.
They still get delivered immediately,
but the timestamp allows the window manager
(and other code which looks at the timestamp)
to make decisions about how they should respond.
</p>
<p>
Note that post-dating the timestamp does not cause the
input delivery to be delayed,
and back-dating the timestamp does not cause the input to be
inserted into the input stream ahead of other input.
The input is merely delivered with a timestamp in the future
or in the past.
(And who knows what sort of havoc that will create
if a program checks the timestamps and notices that they
are either from the future or have traveled back in time.
Maybe you'll get
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/01/31/10122197.aspx">
a call from Microsoft Research asking for
more information about your time machine</a>.)
</p>
<p>
If you want three input events to take place with a 500ms
delay between them,
then you need to call
<code>Send&shy;Input</code> three times,
with a 500ms delay between the calls.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1018953">
				<div id="div-comment-1018953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">No One</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121101-00/?p=6193#comment-1018953">
			November 1, 2012 at 7:09 am</a>		</div>

		<p>&quot;Maybe you&#39;ll get a call from Microsoft Research asking for more information about your time machine.&quot;</p>
<p>AHA! &nbsp;Proof that Microsoft will have stolen everything! &nbsp;Raymond said it so it must be true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1018973">
				<div id="div-comment-1018973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121101-00/?p=6193#comment-1018973">
			November 1, 2012 at 8:13 am</a>		</div>

		<p>I have a large vertical rotating cylinder that can be used as a time machine, but not that effectively.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1018983">
				<div id="div-comment-1018983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121101-00/?p=6193#comment-1018983">
			November 1, 2012 at 8:15 am</a>		</div>

		<p>Aha, so that must be how the window manager correctly detects double clicks even when the computer is lagging so badly that it takes seconds before the action actually happens? &nbsp;I always assumed the mouse driver was running at real time priority and preempted everything else.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-odd thread-alt depth-1" id="comment-1018993">
				<div id="div-comment-1018993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121101-00/?p=6193#comment-1018993">
			November 1, 2012 at 9:32 am</a>		</div>

		<p>@Brian: &quot;You should almost never use REALTIME_PRIORITY_CLASS, because this interrupts system threads that manage mouse input, keyboard input, and background disk flushing.&quot; (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms685100%28VS.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms685100%28VS.85%29.aspx</a>), so the mouse driver runs at a lower priority. (also, IIRC Raymond talked about it once)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019003">
				<div id="div-comment-1019003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121101-00/?p=6193#comment-1019003">
			November 1, 2012 at 12:57 pm</a>		</div>

		<blockquote><p>
  The PCI bus got a flat tire
</p></blockquote>
<p>That had me in stitches. That&#39;s gold, Jerry! Gold!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019023">
				<div id="div-comment-1019023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121101-00/?p=6193#comment-1019023">
			November 1, 2012 at 2:52 pm</a>		</div>

		<p>While I understand why the SendInput superseded keybd_event and mouse_event I still like those for simulating mouse / keyboard events. Heck even the counterpart mi / ki of INPUT structure were taken from there. And while SendInput is more useful for doing tricky events most of the times you only need &quot;click here, click there, press ALT+TAB, etc etc&quot; which is easier to code with keybd_event / mouse_event.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

