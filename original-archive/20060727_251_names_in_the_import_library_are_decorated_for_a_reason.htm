<html>
<head>
<title>Names in the import library are decorated for a reason</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Names in the import library are decorated for a reason</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 27, 2006 / year-entry #252</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When I wrote that the symbolic name for the imported function table entry for a function is called __imp__FunctionName, the statement was "true enough" for the discussion at hand, but the reality is messier, and the reason for the messy reality is function name decoration. When a naive compiler generates a reference to a function,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>When I wrote that <a href="http://blogs.msdn.com/oldnewthing/archive/2006/07/20/672695.aspx"> the symbolic name for the imported function table entry for a function is called <code>__imp__FunctionName</code></a>, the statement was "true enough" for the discussion at hand, but the reality is messier, and the reason for the messy reality is function name decoration.</p>
<p> When a naive compiler generates a reference to a function, the reference is decorated in a manner consistent with its architecture, language, and calling convention. (Some time ago, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/08/48616.aspx"> I discussed some of the decorations you'll see on x86 systems</a>.) For example, a naive call to the <code>GetVersion</code> function results in the compiler generating code equivalent to <code>call _GetVersion@0</code> (on an x86 system; other architectures decorate differently). The import library therefore must have an entry for the symbol <code>_GetVersion@0</code> in order for the external reference to be resolved. </p>
<p> To correspond to the stub function whose real name is <code>_GetVersion@0</code> is the import table entry whose name is <code>__imp__GetVersion@0</code>. In general, the import table entry name is <code>__imp_</code> prefixed to the decorated function name. </p>
<p> The fact that names in import libraries are decorated means that it is doubly crucial that you use the official import library for the DLL you wish to use rather than trying to manufacture one with an import library generation tool. As we noted earlier, the tool won't know whether the ordinal assigned to a named function was by design or merely coincidental. But what's more, the tool won't know what decorations to apply to the function (if the name was exported under an undecorated name). Consequently, your attempts to call the function will fail to link since the decorations will most likely not match up. </p>
<p> In that parenthetical, I mentioned exporting under undecorated names. Doesn't that mean that you can also export with a decorated name? Yes you can, but as I described earlier, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/01/12/57833.aspx"> you probably shouldn't</a>. For as I noted there, if you export a decorated name, then that name cannot be located via <code>GetProcAddress</code> unless you also pass the decorated name to <code>GetProcAddress</code>. But the decoration schema changes from language to language, from architecture to architecture, and even from compiler vendor to compiler vendor, so even if you manage to pass a decorated name to the <code>GetProcAddress</code> function, you'll have to wrap it inside a huge number of <code>#ifdef</code>s so you pass the correct name for the x86 or ia64 or x64, accordingly, as well as changing the name depending on whether you're using the Microsoft C compiler, the Borland C compiler, the Watcom C compiler, or maybe you're using one of the C++ compilers. And woe unto you if you hope to call the function from Visual Basic or C# or some other language that provides interop facilities. </p>
<p> Just export those names undecorated. Your future customers will thank you. </p>
<p> (Exercise: Why is it okay for the C runtime DLLs to use decorated exports?) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-403913">
				<div id="div-comment-403913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-403913">
			July 27, 2006 at 10:29 am</a>		</div>

		<p>Because it most cases, the C Runtime (CRT) is specific to the compiler vendor. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403923">
				<div id="div-comment-403923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-403923">
			July 27, 2006 at 10:49 am</a>		</div>

		<p>Which is the same reason it was OK for the C runtime to use dllexport, in the &#8220;why can&#8217;t I GetProcAddress a function that I dllexported?&#8221; post, which was linked here under the &#8220;you probably shouldn&#8217;t&#8221; text. &nbsp;;-)</p>
<div CLASS=post>[<i>I often add exercises to keep the nitpickers quiet. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-andypennell even thread-even depth-1" id="comment-403963">
				<div id="div-comment-403963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Andy-Pennell' rel='external nofollow' class='url'>Andy-Pennell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-403963">
			July 27, 2006 at 12:34 pm</a>		</div>

		<p>The name decoration can also change between compiler versions from the same vendor: VC8 had changes compared to VC7.x for example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-403973">
				<div id="div-comment-403973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-403973">
			July 27, 2006 at 1:02 pm</a>		</div>

		<p>Well, for C it&#8217;s actually possible to safely link against code built with a different compiler. &nbsp;You don&#8217;t have to worry about vtable layout, pointer to member representation, rtti, exceptions, etc., let alone how the other guy decorates his function to include the signature for overloading. &nbsp;For C it&#8217;s just the 3 x86 calling conventions, which you basically need anyway to interact with Win32. </p>
<p>For C++, forget it. &nbsp;Exporting undecorated names only solves a part of the problem and will work some of the time but then crash when you least expect it. </p>
<p>Of course for platforms with a sensible ABI this is simpler.</p>
<div CLASS=post>[<i>Not sure what the ABI has to do with this. If apps want to use some custom calling convention privately (&#8220;Hey, I&#8217;m going to implement function calls by passing the parameters in reverse alphabetical order of parameter name, putting the return address in the EAX register, and jumping to the start of the desired function!&#8221;) what&#8217;s to stop them from doing it? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-403993">
				<div id="div-comment-403993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hirsch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-403993">
			July 27, 2006 at 1:36 pm</a>		</div>

		<p>&lt;i&gt;Why is it okay for the C runtime DLLs to use decorated exports?&lt;/i&gt;</p>
<p>For _cdecl functions, the decorated names and undecorated names are the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404013">
				<div id="div-comment-404013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">c++</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404013">
			July 27, 2006 at 1:56 pm</a>		</div>

		<p>How do I export fully undecorated names of c++ methods?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404023">
				<div id="div-comment-404023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Andersson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404023">
			July 27, 2006 at 2:03 pm</a>		</div>

		<p>Is it as prone to errors to call a dll function with dynamically binding as with manufacturing an own import library? In both cases the original import library isn&#8217;t used.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404143">
				<div id="div-comment-404143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cringe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404143">
			July 27, 2006 at 7:46 pm</a>		</div>

		<p>Because trees look nicer with decorations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404163">
				<div id="div-comment-404163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anony Moose</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404163">
			July 27, 2006 at 8:07 pm</a>		</div>

		<p>If you&#8217;re using LoadLibrary and GetProcAddress with decorated names, you&#8217;re in for a world of hurt when the next version of the library is compiled with a different release of the same compiler. If the names are undecorated (and you keep calling conventions, function signatures, etc the same), then you&#8217;re limited in certain C++ features you can use, but it will work fine.</p>
<p>The problem with manufacturing an import library isn&#8217;t just the name &#8211; it&#8217;s the mucking around with ordinals that&#8217;ll screw you over.</p>
<p>&gt; How do I export fully undecorated names of c++ methods? </p>
<p>With a great deal of pain and suffering. &nbsp; ;)</p>
<p>[Not sure what the ABI has to do with this. [&#8230;] &#8211; Raymond]</p>
<p>The fun with C++ is that a combination of different name mangling algorithms and no standard for the layout of vtables (etc), a class compiled with Visual C++ almost certainly can&#8217;t be used directly with code compiled with C++ Builder or GCC. With C, the ABI is specified reasonably well &#8211; mostly because it&#8217;s a lot simpler &#8211; so a DLL compiled with one compiler can generally be used with code compiled in many other compilers, provided this whole name decoration issue is handled correctly.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404183">
				<div id="div-comment-404183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">theorbtwo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404183">
			July 27, 2006 at 8:10 pm</a>		</div>

		<p>c++: You don&#8217;t. &nbsp;Insted, you go inside an extern &quot;C&quot; block, and write a function which calls your method, and call that from C.</p>
<p>John Andersson: You&#8217;ve got to have an agreement between the parties doing dynamic linking that covers the things an import library would tell you, I think.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404193">
				<div id="div-comment-404193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">c++</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404193">
			July 27, 2006 at 9:50 pm</a>		</div>

		<p>Why then is it possible at all to export c++ symbols? Can any compiler use them? Is it possible to tell any compiler to &#8220;look in this dll for the methods of this class&#8221;? </p>
<p>Why is extern C better than def file?</p>
<div CLASS=post>[<i>Why is it possible to export C++ symbols? For the same reason it&#8217;s possible to export any other symbol. The import/export mechanism doesn&#8217;t care what you call your symbol, as long as the importer and exporter agree. You can create a PE file that exports a symbol called !?#! if you really want to. If you want to write a compiler/linker that supports those symbols then more power to you. Your next two questions are tools issues unrelated to the import/export mechanism. And I don&#8217;t understand the last question. &#8220;Extern C&#8221; and DEF files are independent concepts. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404213">
				<div id="div-comment-404213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404213">
			July 27, 2006 at 11:09 pm</a>		</div>

		<p>Thursday, July 27, 2006 1:02 PM by josh<br />
<br />&gt; Well, for C it&#8217;s actually possible to safely<br />
<br />&gt; link against code built with a different<br />
<br />&gt; compiler.</p>
<p>Only if one of the compiler developers copied the calling convention(s) from the other (or if the two compiler developers cooperated with each other).</p>
<p>&gt; For C it&#8217;s just the 3 x86 calling<br />
<br />&gt; conventions, which you basically need anyway<br />
<br />&gt; to interact with Win32.</p>
<p>Mr. Chen already pointed out that applications can define additional calling conventions, and the fact is that compiler developers can too. &nbsp;If compiler developers target Win32 then they have to include Win32 calling conventions among the variations that they support.</p>
<p>The first time I saw &quot;Pascal&quot; as a calling convention in Windows I just figured, great, Windows calling conventions fluctuate according to which Pascal compiler you use this month. &nbsp;Some time later I discovered that Microsoft started calling this __stdcall instead, with the implication that Microsoft actually knew what calling convention they were using and there was some way for callers to find out what to conform to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404223">
				<div id="div-comment-404223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404223">
			July 28, 2006 at 2:16 am</a>		</div>

		<p>Ok, if you have to deal with malicious or insane compiler writers, you can&#8217;t safely link any code built with different compilers. &nbsp;They could implement integers with some sort of balanced ternary, and then you&#8217;d be totally screwed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404233">
				<div id="div-comment-404233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Miral</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404233">
			July 28, 2006 at 2:56 am</a>		</div>

		<p>So, to try to sum up a bit&#8230; Raymond, you&#8217;re basically recommending that everyone should always use __declspec(dllimport), and should use __declspec(dllexport) seldom (only on those routines that are compiler-specific anyway, or on extern &quot;C&quot; cdecl routines), replacing __declspec(dllexport) with .def files in most cases? &nbsp;Is that correct?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404243">
				<div id="div-comment-404243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404243">
			July 28, 2006 at 3:27 am</a>		</div>

		<p>Actually Miral, I didn&#8217;t see that recommendation at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-404253">
				<div id="div-comment-404253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404253">
			July 28, 2006 at 3:55 am</a>		</div>

		<blockquote><p>
  Why then is it possible at all to export c++ symbols?</p>
<p>You can export C++ symbols because sometimes you want to.</p>
<p>For example, if the DLL is actually shipped with your application and isn&#8217;t actually SHARED, then there&#8217;s no chance that some other compiler will try to link to it.</p>
<p>Why would you put your code in a separate DLL in that case? Well, perhaps you ship multiple executables that have to link to the same code. If you update everything in one go, you can just export your C++ symbols directly, and life if rather easy.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404383">
				<div id="div-comment-404383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404383">
			July 28, 2006 at 12:56 pm</a>		</div>

		<p>Crikey, this is all newbie stuff, and it hasn&#8217;t changed in the last 10 years.</p>
<p>If you make a DLL to be used by other products, yes, you export the symbol as extern &quot;C&quot; and you stay away from C++. &nbsp;Then if the API is properly designed, your DLL can work with all compilers for years to come! </p>
<p>Unless you make a third-party C++ library (ex: MFC, QT) in which case you dllexport the classes, and you will need to keep up with the compiler updates and have different versions of your DLL for different compiler vendors and versions.</p>
<p>If you write .def files instead of using the non-standard keyword __dllexport(), really you need to use the &#8216;extern &quot;C&quot; because otherwise guessing the decorated name you need to write in the .def file is a huge waste of your time, and it may break in future. &nbsp;In C++, no human should be writing .def files, so that means forget about .def file features like assigning ordinal numbers. &nbsp; You might need to make debug and release versions as well, because c++ could inline a method.</p>
<p>If you make a DLL for your own product&#8217;s internal use, none of this matters and you&#8217;d &nbsp;just dllexport everything. &nbsp;You&#8217;re always compiling/shipping a new version of your DLL with the App anyway. When you use extern &quot;C&quot; on function, you won&#8217;t be able to overload them, which can be a pain or a feature.</p>
<p>About &#8216;pascal&#8217;. &nbsp;Pascal was in fashion back in Windows 16-bit and that was the only agreed-upon calling convension. &nbsp;The MacOS API is also all pascal. &nbsp;Pascal was the big thing, not C.</p>
<p>When moving to win32, MS changed to &#8216;stdcall&#8217; as the agreed-upon calling convention (plus they had the leading compiler at this point). &nbsp;You&#8217;ll only see &#8216;pascal&#8217; in header file that date from the 16-bit days, __pascal has never been implemented, afaik, in a 32-bit C compiler.</p>
<p>Why is it OK for the C Run Time library to use decorated name. That&#8217;s obvious! &nbsp;The C Run Time Library is ALREADY compiler-dependant, and therefore doesn&#8217;t need to use compiler-independant undecorated names. &nbsp;A new C Run time always come with a new compiler version.</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404523">
				<div id="div-comment-404523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Csaba</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404523">
			July 28, 2006 at 4:47 pm</a>		</div>

		<blockquote><p>
  About &#8216;pascal&#8217;. &nbsp;Pascal was in fashion back in Windows 16-bit</p>
<p>The pascal calling convention in 16-bit Windows was chosen because of efficiencey, not fashion. The callee cleans up the stack, which means that the stack pointer needs to be adjusted with the size of the arguments. For a function with fixed arguments, this can be computed at compile-time. The Intel processors have hardware support for this (&quot;RET n&quot; instruction).
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-404573">
				<div id="div-comment-404573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404573">
			July 28, 2006 at 11:23 pm</a>		</div>

		<p>Actually, there are valid and good uses for both exported C++ (member) functions and exporting them <em>only</em> by ordinal.</p>
<p>I inherited a C++ library (compiler-specific, of course) that exported quite a lot of C++ member functions. In fact, it previously had used dllexport on the whole classes. I&#8217;m not exaggerating when I say that just the names accouted for over 30% of the DLL.</p>
<p>Applying a bit of carefully designed ordinal ranges, and using the .def file only exporting the symbols by ordinal, this DLL became even lean, and loaded quite a bit quicker.</p>
<p>All it takes is careful ordinal-range reservations, and knowing &quot;This is from now on carved in stone&quot;. Actually, as this was C++ it&#8217;d have to be considered carved in stone anyway, as one library+dll only fits a specific version from a specific vendor. It&#8217;s a bith that one needs to ship 10+ DLL&#8217;s, but that&#8217;s the way it is without a common C++ ABI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-404643">
				<div id="div-comment-404643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-404643">
			July 30, 2006 at 9:16 pm</a>		</div>

		<p>Friday, July 28, 2006 4:47 PM by Csaba <br />&gt; The pascal calling convention in 16-bit <br />&gt; Windows was chosen because of efficiencey, <br />&gt; not fashion. The callee cleans up the stack </p>
<p>And Ulric said &#8220;that was the only agreed-upon calling convension&#8221;. &nbsp;That was still miraculous&#8230; </p>
<p>&gt; The Intel processors have hardware support <br />&gt; for this (&#8220;RET n&#8221; instruction). </p>
<p>And the VAX had an instruction for the caller to get the number of arguments. &nbsp;Other architectures pretty much did not agree in this manner. &nbsp;Pascal was implemented on a lot of architectures (it was in fashion for a while, with good reason). </p>
<p>Some architectures had several implementations made by various parties. &nbsp;In some cases the hardware vendor was also the OS vendor so they specified the calling conventions and there was no question about agreements on those architectures. </p>
<p>The PC didn&#8217;t fit that case. &nbsp;If all implementors of Pascal for the PC agreed on a single calling convention, that was miraculous.</p>
<div CLASS=post>[<i>You&#8217;re ascribing far too much importance to the meaning of the word &#8220;pascal&#8221;. Perhaps it should have been called the &#8220;FRIBBY&#8221; calling convention. Then people wouldn&#8217;t be so confused. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-405273">
				<div id="div-comment-405273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel Salters</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-405273">
			August 1, 2006 at 11:25 am</a>		</div>

		<p>The real question is, why don&#8217;t we have a GetProcAddress yet which understands name mangling? If I want the C++ function named<br />
<br />int foo(int,int), I just want to call GetProcAddress&lt;int(*)(int,int)&gt;(&quot;foo&quot;) and have it mangle &quot;foo&quot;. Of course, that GetProcAddress would need to be a compiler intrinsic.<br />
<br />It&#8217;s just two steps:<br />
<br />1. Mangle the argument (any compiler can)<br />
<br />2. Call real GetProcAddress() (any compiler can)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-406143">
				<div id="div-comment-406143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew Barnert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-406143">
			August 4, 2006 at 9:37 pm</a>		</div>

		<p>Michiel: Why? Wouldn&#8217;t you rather have a directly-accessible function for mangling (and demangling), rather than burying it inside a GetProcAddress wrapper? (Writing your own wrapper based on the mangler would be trivial; vice-versa is obviously not.)</p>
<p>Also, I&#8217;m having a hard time envisioning what you want to use this for that wouldn&#8217;t<br />
<br />a. involve building/shipping the DLL and caller together, in which case do you really need GetProcAddress;<br />
<br />b. be better served by giving your overloads different names, probably through extern &quot;C&quot; wrappers, in the first place; or<br />
<br />c. require mangling at runtime.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-666983">
				<div id="div-comment-666983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://msmvps.com/blogs/vandooren/archive/2008/09/12/how-dll-exports-really-work.aspx' rel='external nofollow' class='url'>Cluebat-man to the rescue</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060727-00/?p=30343#comment-666983">
			September 12, 2008 at 6:51 am</a>		</div>

		<p>I found this list of article on Raymond&amp;#39;s blog . Raymond&amp;#39;s blog is one of the more interesting</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

