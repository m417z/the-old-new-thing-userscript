<html>
<head>
<title>Reinterpreting the bits of a 64-bit integer as if they were a double-precision floating point number (and vice versa)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Reinterpreting the bits of a 64-bit integer as if they were a double-precision floating point number (and vice versa)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 22, 2015 / year-entry #129</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>22</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program takes a 64-bit integer and reinterprets its physical representation as a double-precision floating point number. using System; class Program { static double ReinterpretAsDouble(long longValue) { return BitConverter.ToDouble(BitConverter.GetBytes(longValue), 0); } static long ReinterpretAsLong(double doubleValue) { return BitConverter.ToInt64(BitConverter.GetBytes(doubleValue), 0); } static void Main() { Console.WriteLine(ReinterpretAsDouble(0x4000000000000000)); Console.WriteLine("{0:X}", ReinterpretAsLong(2.0)); } } Our first attempt uses the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program takes a 64-bit integer and
reinterprets its physical representation as a double-precision
floating point number.
</p>
<pre>
using System;

class Program
{
 static double ReinterpretAsDouble(long longValue)
 {
  return BitConverter.ToDouble(BitConverter.GetBytes(longValue), 0);
 }

 static long ReinterpretAsLong(double doubleValue)
 {
  return BitConverter.ToInt64(BitConverter.GetBytes(doubleValue), 0);
 }

 static void Main()
 {
  Console.WriteLine(ReinterpretAsDouble(0x4000000000000000));
  Console.WriteLine("{0:X}", ReinterpretAsLong(2.0));
 }
}
</pre>
<p>
Our first attempt uses the
<code>Bit&shy;Converter</code> class
to convert the 64-bit integer to an array of bytes,
and then parses a double-precision floating point
number from that byte array.
</p>
<p>
Maybe you're not happy that this creates a
short-lived <code>byte[]</code> array that
will need to be GC'd.
So here's another version that is a little
sneakier.
</p>
<pre>
using System;
using System.Runtime.InteropServices;

class Program
{
 [StructLayout(LayoutKind.Explicit)]
 struct LongAndDouble
 {
  [FieldOffset(0)] public long longValue;
  [FieldOffset(0)] public double doubleValue;
 }

 static double ReinterpretAsDouble(long longValue)
 {
  LongAndDouble both;
  both.doubleValue = 0.0;
  both.longValue = longValue;
  return both.doubleValue;
 }

 static long ReinterpretAsLong(double doubleValue)
 {
  LongAndDouble both;
  both.longValue = 0;
  both.doubleValue = doubleValue;
  return both.longValue;
 }
 ...
}
</pre>
<p>
This version creates a structure with an unusual
layout:
The two members occupy the same physical storage.
The conversion is done by storing the 64-bit
integer into that storage location,
then reading the double-precision floating point
value out.
</p>
<p>
There's a third method that involves writing
the 64-bit integer to a memory stream via
<code>Binary&shy;Writer</code>
then reading it back with
<code>Binary&shy;Reader</code>,
but this is clearly inferior to the
<code>Bit&shy;Converter</code>
so I didn't bother writing it up.
</p>
<p>
<b>Update</b>: Damien points out that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/06/22/10623021.aspx#10623129">
this functionality already exists
in the BCL</a>:
<a HREF="https://msdn.microsoft.com/en-us/library/system.bitconverter.doubletoint64bits(v=vs.110).aspx">
<code>Bit&shy;Converter.<wbr>Double&shy;To&shy;Int64&shy;Bits</code></a>
and
<a HREF="https://msdn.microsoft.com/en-us/library/system.bitconverter.int64bitstodouble(v=vs.110).aspx">
<code>Bit&shy;Converter.<wbr>Int64&shy;Bits&shy;To&shy;Double</code></a>.
But there doesn't appear to be a
<code>Bit&shy;Converter.<wbr>Float&shy;To&shy;Int32&shy;Bits</code>
method, so the techniques discussed above are not completely useless.
</p>
<p><b>Exercise</b>:
Why did I have to initialize the 
<code>doubleValue</code> before writing to
<code>longValue</code>, and vice versa?
What are the implications of the answer to the
above question?
(Yes, I could have written
<code>LongAndDouble both = new LongAndDouble();</code>,
which automatically zero-initializes everything,
but then I wouldn't have had an interesting exercise!)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (22)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1240436">
				<div id="div-comment-1240436" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240436">
			June 22, 2015 at 7:04 am</a>		</div>

		<p>I may be being dense here but how are these different from BitConverter.DoubleToInt64Bits and BitConverter.Int64BitsToDouble?</p>
<div class="post">[<em>I&#39;m the one who&#39;s dense. I totally missed those methods. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240426">
				<div id="div-comment-1240426" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240426">
			June 22, 2015 at 7:05 am</a>		</div>

		<p>Couldn&#39;t you also just write &quot;unsafe&quot; code and use pointers to tell the JIT to reinterpret the long as double or double as long? The implementation of the BitConverter itself does this too, after all.</p>
<p><a rel="nofollow" target="_new" href="http://referencesource.microsoft.com/#mscorlib/system/bitconverter.cs">referencesource.microsoft.com</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1240406">
				<div id="div-comment-1240406" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240406">
			June 22, 2015 at 7:14 am</a>		</div>

		<p>Exercise: &nbsp;The C# compiler will generate errors when you try to read an uninitialized field. &nbsp;I highly doubt someone would have added code to see that it shared storage with an initialized field. &nbsp;I must admit I would never have thought to emulate a C union like that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240396">
				<div id="div-comment-1240396" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240396">
			June 22, 2015 at 7:34 am</a>		</div>

		<p>@SimonRev: But if the compiler couldn&#39;t reason about shared storage, wouldn&#39;t it just optimise either function to simply return 0?</p>
<p>My first guess was that you couldn&#39;t be sure that &quot;long&quot; and &quot;double&quot; both take up the same amounts of space, so initialising the other first ensures that you never actually read from uninitialised memory no matter the architecture.</p>
<p>&#8230;and then I remembered that .NET is a fixed (virtual) architecture, and (unlike C) C#&#39;s &quot;long&quot; and &quot;double&quot; will not vary across whatever underlying processor the code is run on. So that&#39;s not it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1240376">
				<div id="div-comment-1240376" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240376">
			June 22, 2015 at 8:02 am</a>		</div>

		<p>Exercise: the compiler performs a definite assignment check when returning a structure from a function. Like SimonRev said, there&#39;s no code in the compiler to look for the StructLayout attribute, so it would be uninitialized otherwise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1240366">
				<div id="div-comment-1240366" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">barrkel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240366">
			June 22, 2015 at 8:04 am</a>		</div>

		<p>FieldOffset alters metadata generated for the CLI (non-optional metadata, the metadata is not just a hint, see II.10.7 ECMA 335 2012). C#&#39;s definite assignment rules don&#39;t operate at the same abstraction level; the C# compiler just sees a value type allocated on the stack, and fields of value types allocated on the stack need to be initialized before use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1240356">
				<div id="div-comment-1240356" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240356">
			June 22, 2015 at 8:30 am</a>		</div>

		<p>@Damien: Those two functions compute the same result, but are much better (faster, and don&#39;t create short-lived arrays for the GC to clean up).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240346">
				<div id="div-comment-1240346" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240346">
			June 22, 2015 at 8:39 am</a>		</div>

		<p>If you change the IL to remove the initialization and recompile it seems to work fine. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1240336">
				<div id="div-comment-1240336" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240336">
			June 22, 2015 at 10:42 am</a>		</div>

		<p>@Zarat</p>
<p>You could, but then your assembly would require full trust. Using the core libraries or Raymond&#39;s method are preferable.</p>
<p>@Karellen</p>
<p>The CLR initializes all memory allocations to zero. It is C#&#39;s specification that requires a variable to be explicitly initialized before being accessed.</p>
<p>@Wear</p>
<p>Note that the initialization error comes from the C# compiler not the CLR. There are several things you can do in IL that individual languages which compile to IL may not support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240326">
				<div id="div-comment-1240326" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240326">
			June 22, 2015 at 11:52 am</a>		</div>

		<p>@Ken in NH It&#39;s not really a question of support. The C# compiler is doing what the C# compiler was designed to do which is try and stop people from falling down wells.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1240316">
				<div id="div-comment-1240316" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240316">
			June 22, 2015 at 11:57 am</a>		</div>

		<p>I was wondering whether the behavior of the field-aliased explicit struct layout was guaranteed to be the same as the BitConverter methods &#8211; whether the byte ordering within the explicit struct layout is guaranteed, for example. But of course, it shouldn&#39;t matter: assuming the double and long are both stored with the same endianness.</p>
<p>So I was surprised to find that BitConverter&#39;s behavior is defined, according to the MSDN docs, to be dependent on whether the system architecture is little- or big-endian: &quot;The order of bits in the integer returned by the DoubleToInt64Bits method depends on whether the computer architecture is little-endian or big-endian&quot;. That seems, now I think about it, slightly unlikely&#8230;</p>
<p>It&#39;s also not helpful that the MSDN docs for Int64BitsToDouble is vague, bordering on wrong: &quot;returns a double-precision floating point number whose value is equivalent to value&quot;. That rather suggests it returns the same thing as (double) value.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240306">
				<div id="div-comment-1240306" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240306">
			June 22, 2015 at 12:23 pm</a>		</div>

		<p>My response upon reading the title: &quot;Duh, use a union.&quot; &nbsp;My response on reading the code &quot;Oh, it&#39;s C#. &nbsp;Carry on then.&quot;</p>
<p>I once had to do a similar thing with explicit struct layouts. &nbsp;I needed to a set the TCP keep-alive parameters on a per-connection basis from a C# application. &nbsp;Ordinarily, one would do this with WSAIoctl(SIO_KEEPALIVE_VALS) <a rel="nofollow" target="_new" href="https://msdn.microsoft.com/en-us/library/windows/desktop/dd877220%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/dd877220%28v=vs.85%29.aspx</a> ; in C#, the equivalent is Socket.IOControl(), but C# doesn&#39;t ever define the required tcp_keepalive structure, and Socket.IOControl() takes a byte array for the IOCTL data.</p>
<p>I could have just frobulated a byte array out of thin air (or dropped into unsafe code), but I decided that the better solution was to declare a structure with LayoutKind.Explicit, put the three integer fields in the right place, and then use Marshal.StructureToPtr and friends to marshal it into a byte array. &nbsp;That way, I could create an instance of my structure, set its fields to the values I wanted, marshal it, and issue the IOCTL. &nbsp;No P/Invoke, no unsafe code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1240296">
				<div id="div-comment-1240296" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240296">
			June 22, 2015 at 2:44 pm</a>		</div>

		<p>I wish I had known this when I was writing my DLL loader for Windows RT. &nbsp;The exploit I found to load unsigned desktop-mode code on Windows RT only let me execute dynamically-compiled C# source code without the &quot;unsafe&quot; keyword, and I wanted to run an unsigned native ARM code DLL. &nbsp;Since ci.dll would reject NtCreateSection on the unsigned DLL, I had to write C# to manually map the DLL into memory using VirtualAlloc via P/Invoke.</p>
<p>I&#39;m inexperienced with C#, so my C# code to load the DLL into memory and execute it is a crazy mess of P/Invoke and marshaling. &nbsp;It probably would&#39;ve been so much easier if I&#39;d known about this trick to make &quot;unions&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240276">
				<div id="div-comment-1240276" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240276">
			June 23, 2015 at 1:26 am</a>		</div>

		<p>@Adam Rosenfield: Your reaction to the title was &quot;duh use undefined behavior&quot;? Because the union trick is exactly that.. undefined. Probably very well spotted undefined behavior by the major compilers (although with all those optimizations going on, I wouldn&#39;t count on it) but still undefined.</p>
<p>The right way is to use memcpy and let the compiler optimize the generated code (they do)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1240256">
				<div id="div-comment-1240256" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240256">
			June 23, 2015 at 6:07 am</a>		</div>

		<p>This sounds unsafe. Is there a Code Access Security requirement for using StructLayout(Explicit), or is such overlap limited to value types free of reference types?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240246">
				<div id="div-comment-1240246" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240246">
			June 23, 2015 at 7:05 am</a>		</div>

		<p>@Voo: The union trick is technically undefined; however, it is an extremely common idiom and is well-supported by all major compilers. As a practical matter, reading and writing to any member of a union, in any order, is acceptable practice.</p>
<p>(Source: <a rel="nofollow" target="_new" href="http://cellperformance.beyond3d.com/articles/2006/06/understanding-strict-aliasing.html">cellperformance.beyond3d.com/&#8230;/understanding-strict-aliasing.html</a> )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter even thread-even depth-1" id="comment-1240146">
				<div id="div-comment-1240146" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240146">
			June 23, 2015 at 2:15 pm</a>		</div>

		<p>@Medonic: Only value types are permitted to overlap.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240126">
				<div id="div-comment-1240126" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240126">
			June 23, 2015 at 3:37 pm</a>		</div>

		<p>@snarfy I just tried having a struct with two class fields overlapping and it seems perfectly fine with it.</p>
<p>Assign a value to one field and it shows up in the other. It seems to act as though the two objects where smashed on top of each other. One class has an int field that is set to 2, the other has a float field that should be set to 1. After setting the field in the struct to the one class and getting the value of the other it&#39;s float field reports a value of 2.802597E-45.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1240106">
				<div id="div-comment-1240106" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240106">
			June 23, 2015 at 8:51 pm</a>		</div>

		<p>It&#39;s interesting that when use &quot;LongAndDouble both = new LongAndDouble();&quot; in the methods will case the result will be &quot;0&quot;, but if you replace the content with (for ReinterpretAsLong()) &quot;return new LongAndDouble() { doubleValue = doubleValue }.longValue;&quot; the result is the corrent one.</p>
<p>The test is performed on .NET v3.5.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1240096">
				<div id="div-comment-1240096" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1240096">
			June 24, 2015 at 1:08 am</a>		</div>

		<p>@Wear: So, falling down wells is big problem for programmers where you live? ;-)</p>
<div class="post">[<em>That is actually one of the major goals of software design. See: &quot;The pit of success&quot;. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1221781">
				<div id="div-comment-1221781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1221781">
			June 24, 2015 at 12:28 pm</a>		</div>

		<p>@Voo: Visual C++ is actually the only compiler that I&#39;ve seen that *doesn&#39;t* recognize std::memcpy being used just to do type punning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-anonymouscommenter odd alt thread-odd thread-alt depth-1" id="comment-1239726">
				<div id="div-comment-1239726" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymouscommenter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150622-00/?p=45321#comment-1239726">
			June 26, 2015 at 4:14 am</a>		</div>

		<p>Be careful about getting too smart with the union trick.</p>
<p>I had a byte array equality function that was being called many, many times and became a candidate for optimization during profiling. The obvious solution was to use P/Invoke to call memcmp, but for some reason on that day it eluded me. The trick I came up was to union the byte array with a long array and by comparing the longs I would cut down the execution time (in theory) by a factor of 8.</p>
<p>&quot;If&quot; statements began to execute the wrong branch: <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/8941321/if-statement-true-block-executed-when-condition-is-false">stackoverflow.com/&#8230;/if-statement-true-block-executed-when-condition-is-false</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

