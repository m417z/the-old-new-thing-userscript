<html>
<head>
<title>Does the page table entry really have a sad-face for pages that are reserved?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Does the page table entry really have a sad-face for pages that are reserved?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 16, 2016 / year-entry #197</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160916-00/?p=94325</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Not exactly, but it's not as silly a question as it sounds.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter Mc asked
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160701-00/?p=93785#comment-1254746">
whether the memory manager really uses the Unicode sad face emoticon
to represent not-present pages</a>,
or whether it just uses some boring sentinel value like &minus;1.
</p>
<p>
This is actually an insightful question disguised as a joke.
</p>
<p>
Each page table entry is 8 bytes long.&sup1;
One of the bits in the page table entry represents whether the
page is present.
If the page is present,
then the P flag is set,
and other parts of the page table entry
describe various attributes of the memory,
such as whether it is read-only, and (perhaps most important)
where to find that memory.</p>
<p>
<p>
But if the page is not present, then the other 63 bits of the
page table entry are not used by the processor and are
explicitly documented as available for the operating system.
</p>
<p>
Pages can be not-present for a number of reasons.
The memory for the page may have been paged out,
or maybe it's a memory-mapped file,
or it's a demand-paged executable with
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301">
on-the-fly fixups</a>,
or it might be delay-zero-initialized memory.
Or maybe it's just plain invalid after all.
</p>
<p>
Historically, operating systems took advantage of the fact
that it had 63 free bits in the page table entry of non-present pages.
Those bits were used to help answer the question,
"So if the CPU tells me that somebody tried to access this page,
what should I do?"
Those bits might tell the memory manager,
"This is a reserved page. Just raise an access violation."
Or maybe
"This is a read-only page. Raise an access violation if the
operation was a write. Otherwise, try to page it in."
And if the conclusion was "Page it in," those other bits
helped the memory manager figure out what to page in.
</p>
<p>
Presumably this is why the Windows NT memory manager created
a page table full of sad faces. They weren't the same sad face
repeated 512 times; rather, it was 512 slightly different sad faces
that helped the memory manager figure out what each page was for.
(I'm basing my assumption on the fact that this is what the
Windows 95 memory manager did, and it seems like a reasonable thing
to do because, hey, free memory.)
</p>
<p>
What changed is that with the advent of 64-bit Windows,
it became not unreasonable to reserve quantities of memory
that in 32-bit Windows would have been considered absurd.
I mean, 32-bit Windows had only
4<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">GB</a>
of address space to begin
with,
so
reserving 100GB of address space is fundamentally impossible.
And you don't really worry too much about the most efficient
way to do something that is fundamentally impossible.
</p>
<p>
Not allocating a page table entry for every page in a large
reserved region saves memory because you don't need to allocate
page tables any more.
The cost is that in order to decide
what to do in response to a page fault,
you can't rely on the free information in the page table entry.
You have to go look it up yourself.
</p>
<p>
&sup1; In the original 80386, page table entries were only 4 bytes
long, but they grew to 8 bytes with the introduction of PAE.
For over a decade,
all versions of Windows enable PAE, even on machines that have
less than 4GB of physical memory,
because PAE is a prerequisite for NX.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1265115">
				<div id="div-comment-1265115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160916-00/?p=94325#comment-1265115">
			September 16, 2016 at 12:08 pm</a>		</div>

		<p>In my project, I reserve (not commit) 2 GB at startup in an x86-64 process.  I hope that this doesn&#8217;t burn too much kernel memory.  It sounds like it uses very little kernel memory at all to do this.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

