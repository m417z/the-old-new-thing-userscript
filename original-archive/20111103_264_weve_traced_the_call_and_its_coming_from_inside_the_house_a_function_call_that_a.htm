<html>
<head>
<title>We've traced the call and it's coming from inside the house: A function call that always fails</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>We&#8217;ve traced the call and it&#8217;s coming from inside the house: A function call that always fails</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 3, 2011 / year-entry #265</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>64</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that they had a problem with a particular function added in Windows 7. The tricky bit was that the function was used only on very high-end hardware, not the sort of thing your average developer has lying around. GROUP_AFFINITY GroupAffinity; ... code that initializes the GroupAffinity structure ... if (!SetThreadGroupAffinity(hThread, &GrouAffinity, NULL)); {...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that they had a problem with a particular function
added in Windows&nbsp;7.
The tricky bit was that the function was used only on very high-end
hardware,
not the sort of thing your average developer has lying around.
</p>
<pre>
GROUP_AFFINITY GroupAffinity;
... code that initializes the GroupAffinity structure ...
if (!SetThreadGroupAffinity(hThread, &amp;GrouAffinity, NULL));
{
 printf("SetThreadGroupAffinity failed: <a HREF="http://blogs.msdn.com/oldnewthing/archive/2010/01/27/9953807.aspx">%d</a>\n", GetLastError());
 return FALSE;
}
</pre>
<p>
The customer reported that the function always failed
with error 122 (<code>ERROR_<wbr>INSUFFICIENT_<wbr>BUFFER</code>)
even though the buffer seems perfectly valid.
</p>
<p>
Since most of us don't have machines with more than 64 processors,
we couldn't run the code on our own machines to see what happens.
People asked some clarifying questions,
like whether this code is compiled 32-bit or 64-bit
(thinking that maybe there is
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/05/19/10013611.aspx">
an issue with the emulation layer</a>),
until somebody noticed that there was a stray semicolon at the end
of the <code>if</code> statement.
</p>
<p>
The customer was naturally embarrassed, but was gracious enough to
admit that, yup, removing the semicolon fixed the problem.
</p>
<p>
This reminds me of an incident many years ago.
I was having a horrible time debugging a simple loop.
It looked like the compiler was on drugs and was simply
ignoring my loop conditions and always dropping out of the loop.
At wit's end, I asked a colleague to come to my office and
serve as a second set of eyes.
I talked him through the code as I single-stepped:
</p>
<p>
"Okay, so we set up the loop here..."
</p>
<pre>
NODE pn = GetActiveNode();
</pre>
<p>
"And we enter the loop, continuing while the node still needs processing."
</p>
<pre>
if (pn-&gt;NeedsProcessing())
{
</pre>
<p>
"Okay, we entered the loop.
Now we realign the skew rods on the node."
</p>
<pre>
 pn-&gt;RealignSkewRods();
</pre>
<p>
"If the treadle is splayed, we need to calibrate the node against it."
</p>
<pre>
 if (IsSplayed()) pn-&gt;Recalibrate(this);
</pre>
<p>
"And then we loop back to see if there is more work to be done
on this node."
</p>
<pre>
}
</pre>
<p>
"But look, even though the node needs processing
&laquo;view node members&raquo;, we don't loop back.
We just drop out of the loop.
What's going on?"
</p>
<p>
&mdash; <i>Um, that's an <code>if</code> statement up there,
not a <code>while</code> statement.</i></p>
<p>
A moment of silence while I process this piece of information.
</p>
<p>
"All right then, sorry to bother you, hey,
how about that sporting event last night, huh?"</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (64)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-944363">
				<div id="div-comment-944363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Lyon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944363">
			November 3, 2011 at 7:03 am</a>		</div>

		<p>If I had a nickel for each time I&#39;ve pointed out a problem like this in someone else&#39;s code, I&#39;d be rich.</p>
<p>Then again, if I had to pay nickel for each time I&#39;ve bothered others to look at problems like this, I&#39;d barely break even.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944373">
				<div id="div-comment-944373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944373">
			November 3, 2011 at 7:28 am</a>		</div>

		<p>I&#39;ll offer the requisite &quot;this is the language&#39;s fault&quot; angle, even though, of course, no language will ever make it the least bit hard to make silly mistakes, as Raymond&#39;s example points out.</p>
<p>I don&#39;t recall which CS scientist it was who argued vigorously for having a &quot;skip&quot; statement in your language, but whoever it was, he&#39;d be the first one to point out that you probably don&#39;t want to use the statement terminator to double as the skip statement.</p>
<p>C could have decided to use { } as the only legal skip statement. But that probably would have complicated the scanner, or some such argument that seemed reasonable 30 years ago.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944383">
				<div id="div-comment-944383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944383">
			November 3, 2011 at 7:28 am</a>		</div>

		<p>I once saw some code that was something like this:</p>
<p>for(i = 0; i &lt; N; i++) [lots and lots of spaces] ;</p>
<p>{</p>
<p>&nbsp;&#8230;</p>
<p>}</p>
<p>where there were enough spaces between the closing parenthesis and the semicolon that it scrolled off the screen in Visual Studio. &nbsp;That was pretty devilish. &nbsp;If I were to run into the same thing again, it&#39;d be obvious to me now, since my editor of choice wraps long lines instead of adding scroll bars.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944393">
				<div id="div-comment-944393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944393">
			November 3, 2011 at 7:37 am</a>		</div>

		<p>That&#39;s the great thing about having someone to show code to: often they will see things that are in your &#39;blind spot&#39;. I do that all the time when I&#39;m writing stuff as well.</p>
<p>Other scenarios where I find myself getting stuck are in stupidly-complicated nested statements. I think that compilers should issue warnings when you are hitting 6+ levels of nesting in a function (something like &quot;Procedure too complex: consider refactoring!&quot;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944403">
				<div id="div-comment-944403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe Fromm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944403">
			November 3, 2011 at 8:02 am</a>		</div>

		<p>This sort of error is exactly why Python has significant white space &#8211; indentation defines program intent, rather than being a hint to the developer that is ignored by the compiler. &nbsp;Many religious arguments have developed over that feature/misfeature, but situations like this are precisely what it is trying to solve.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944413">
				<div id="div-comment-944413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944413">
			November 3, 2011 at 8:14 am</a>		</div>

		<p>@ErikF: my compiler could go so far as to say &quot;that function doesn&#39;t fit on a single screen, so I&#39;m not compiling it&quot;. Variable screen sizes make this unenforceable in general, of course, but it really does save headaches.</p>
<p>If I can&#39;t tell what it does by looking at one screenful of code for one minute, it&#39;s probably wrong. If it isn&#39;t, it&#39;s still apparently more complicated than I can comfortably understand, so it needs refactoring or documentation or it needs to be left alone (whatever&#39;s most appropriate).</p>
<p>When looking at other people&#39;s code, it&#39;s too arrogant to say &quot;I can&#39;t immediately understand this, so it&#39;s probably wrong&quot;, but it&#39;s too often true. If the other programmer can&#39;t readily explain it to you, you can consider it confirmed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944423">
				<div id="div-comment-944423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erin Lazzaro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944423">
			November 3, 2011 at 8:28 am</a>		</div>

		<p>As an undergraduate I used to work at the university computer center helpdesk. &nbsp;One time an experienced user (not at all like the freshmen I usually dealt with) came in with a Pascal program that just wouldn&#39;t compile. &nbsp;He was extremely frustrated &#8212; he&#39;d been banging his head on it for hours, but could not find anything wrong with the code. &nbsp;I saw the problem immediately, but couldn&#39;t find a delicate enough way to say it:</p>
<p>&quot;You need to use the Pascal compiler for this. &nbsp;The BASIC compiler just can&#39;t handle it.&quot;</p>
<p>He didn&#39;t speak to me for the rest of the week.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944453">
				<div id="div-comment-944453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eber I</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944453">
			November 3, 2011 at 8:44 am</a>		</div>

		<p>so that kind of stuff happens to Raymond too</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944473">
				<div id="div-comment-944473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">blah</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944473">
			November 3, 2011 at 9:10 am</a>		</div>

		<p>The real WTF is ignoring/suppressing compiler warnings.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944493">
				<div id="div-comment-944493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kirill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944493">
			November 3, 2011 at 9:59 am</a>		</div>

		<p>Don&#39;t Microsoft use any advanced static code analizers?</p>
<div class="post">[<i>Yes, there are a lot of advanced static code analyzers nowadays. The really good ones <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/06/15/10024931.aspx" rel="nofollow">requires a PhD to configure</a>. Not sure what your point is. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944503">
				<div id="div-comment-944503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944503">
			November 3, 2011 at 10:12 am</a>		</div>

		<p>@Kirill: Um, that&#39;s not MS&#39;s code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944513">
				<div id="div-comment-944513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jdhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944513">
			November 3, 2011 at 10:16 am</a>		</div>

		<p>Of course, in Python you can replace &#39;class&#39; with &#39;def&#39; and still have a syntactically correct program, and then spend the entire afternoon trying to figure out why you can&#39;t create an instance of the class&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944523">
				<div id="div-comment-944523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944523">
			November 3, 2011 at 10:22 am</a>		</div>

		<p>I agree with Paul M. Parks here.</p>
<p>Disassembler is your friend in these cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944533">
				<div id="div-comment-944533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944533">
			November 3, 2011 at 10:28 am</a>		</div>

		<p>That&#39;s why we have compiler warnings for this sort of thing.</p>
<p>And rubber ducks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944543">
				<div id="div-comment-944543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944543">
			November 3, 2011 at 10:29 am</a>		</div>

		<p>Tend to agree with Blah. &nbsp;Assuming the customer is using Visual Studio it will warn on code like that. &nbsp;That should have been a pretty good clue that something was wrong.</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/8f1zx4y1%28VS.71%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/8f1zx4y1%28VS.71%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944553">
				<div id="div-comment-944553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/rhuijben_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>rhuijben@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944553">
			November 3, 2011 at 10:46 am</a>		</div>

		<p>I&#39;m surprised that nobody noticed the typo in the reference to GroupAffinity yet ;-)</p>
<div class="post">[<i>Y&#39;know, just for the irony, I&#39;m leaving it in! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944563">
				<div id="div-comment-944563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944563">
			November 3, 2011 at 10:47 am</a>		</div>

		<p>I got caught out with the Internet Explorer &quot;trailing comma of death&quot; when designing a website a couple of weeks ago.</p>
<p>It took me two days to fix.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944573">
				<div id="div-comment-944573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944573">
			November 3, 2011 at 10:50 am</a>		</div>

		<p>In the case of an if statement there is never a need for a null statement, so why allow one at all?</p>
<p>if(&#8230;); else; =&gt; Why is the test there at all?</p>
<p>if(&#8230;) &#8230; else; =&gt; Why is the else there? (If it&#39;s because of another else and a parent if: use braces.)</p>
<p>if(&#8230;); else &#8230;; =&gt; if(!&#8230;) &#8230;;</p>
<p>Maybe macros could nuance this view, but in many places where a single ; is legal, it doesn&#39;t ever make any sense. And I think that in the few places where it might be useful, I think it should be a statement, e.g. &quot;nop&quot;. I think the improved visibility would vastly</p>
<p>outweigh the extra keystrokes.</p>
<p>(Also, nitpick: GrouAffinity is not defined.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944593">
				<div id="div-comment-944593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ErikF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944593">
			November 3, 2011 at 11:38 am</a>		</div>

		<p>I agree that if we had a time machine, we should have persuaded DMR to have an explicit null statement. In fact, I seem to recall that &quot;The C Programming Language&quot; discussed that particular defect in its first edition! The good news is that most compilers have a warning that you can enable to search for these; the bad news is not all of them have it enabled by default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944613">
				<div id="div-comment-944613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944613">
			November 3, 2011 at 11:56 am</a>		</div>

		<p>@blah, @configurator: that&#39;s what I like about software houses where developers are encouraged to never check in code that has any warnings. Unfortunately, most of the places I&#39;ve worked, I have to look for bugs in code that has hundreds of warnings, so I don&#39;t look at any of them until I&#39;m desperate.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944623">
				<div id="div-comment-944623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CGomez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944623">
			November 3, 2011 at 12:15 pm</a>		</div>

		<p>&quot;All right then, sorry to bother you, hey, how about that sporting event last night, huh?&quot;</p>
<p>Classic ending.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944633">
				<div id="div-comment-944633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MikeCaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944633">
			November 3, 2011 at 12:17 pm</a>		</div>

		<p>if(someTestWithSideEffects()) {</p>
<p>&nbsp; &nbsp;//TODO: implement logic for when this returns true</p>
<p>}</p>
<p>&quot;What do you mean, empty block!? It&#39;s not empty at all!&quot;</p>
<p>Alternately, you mighty have this:</p>
<p>//TODO: implement logic for when this returns true</p>
<p>if(someTestWithSideEffects()) {</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944643">
				<div id="div-comment-944643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944643">
			November 3, 2011 at 12:30 pm</a>		</div>

		<p>@Evan: obviously screens get bigger all the time while programmer capacities don&#39;t, so if you take my comment literally it makes no sense anyway. Besides, that you can always find exceptions to any coding guideline almost goes without saying. My point is just that stopping to think if maybe your function is too long is never a waste of time. Going the opposite extreme is no good either (I don&#39;t know if I prefer 1,000 three-line functions to one 3,000 line function, but whichever I encounter my day is probably ruined) but one screenful seems to work well as a rule of thumb in most cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944653">
				<div id="div-comment-944653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RichardDeeming</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944653">
			November 3, 2011 at 1:00 pm</a>		</div>

		<p>I&#39;m amazed that, despite several people mentioning Python in the comments, nobody&#39;s picked up the obvious reference: &quot;One on&#39;t cross beams gone owt askew on treadle.&quot; :o)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944673">
				<div id="div-comment-944673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944673">
			November 3, 2011 at 1:30 pm</a>		</div>

		<p>[Y&#39;know, just for the irony, I&#39;m leaving it in! -Raymond]</p>
<p>But Raymond, now when someone copy/pastes your best practices code example it won&#39;t compile for them!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944683">
				<div id="div-comment-944683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian T. Johns</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944683">
			November 3, 2011 at 2:04 pm</a>		</div>

		<p>This reminds me of some devilish C tricks to screw with your team/friends/enemies:</p>
<p>#define &nbsp;while(x) &nbsp;if(x)</p>
<p>#define &nbsp;if(x) &nbsp; &nbsp; if(((x) != 0) ^ ((<strong>LINE</strong> % SOME_VAL == 0))</p>
<p>The while() redefinition might not be immedaitely obvious but the if() definition would seem to randomly &quot;optimize&quot; out certain if statements (but only from certain lines) and would always evaluate the if conditional as FALSE. This problem would NOT be immediately obvious to the developer OR the compiler tech support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944693">
				<div id="div-comment-944693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian T. Johns</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944693">
			November 3, 2011 at 2:05 pm</a>		</div>

		<p>Above discussed on <a rel="nofollow" target="_new" href="http://blog.regehr.org/archives/574" rel="nofollow">blog.regehr.org/&#8230;/574</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944433">
				<div id="div-comment-944433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944433">
			November 3, 2011 at 8:36 am</a>		</div>

		<p>It amazes me that the most common languages in use today will still admit that first example as valid code. As a PL researcher (okay it&#39;s really more like automatic program analysis techniques), it is also very discouraging. I don&#39;t think Python has it right &#8212; I find editing it too annoying because of the lack of ending delimiters &#8212; but C certainly doesn&#39;t either. I&#39;d prefer some hybrid, where you need C-style delimiters but the indentation *must* match or it&#39;s a syntax error.</p>
<p>I&#39;m not saying you never need to write something like that&#8230; but which is better: having the language require that empty bodies be specified as {} (or perhaps even all bodies, but that&#39;s another issue) and in the very rare instance when that&#39;s useful, it gives you a compiler error and you put {}, or having the compiler silently do the &quot;wrong&quot; thing and then you spend hours of programmer time debugging it?</p>
<p>@JM: &quot;my compiler could go so far as to say &quot;that function doesn&#39;t fit on a single screen, so I&#39;m not compiling it&quot;. Variable screen sizes make this unenforceable in general, of course, but it really does save headaches.&quot;</p>
<p>IMO there are too many times where long lines are really invaluable. I have had a number of occurrences where I&#39;m declaring what is basically a table in the form of nested arrays, and *by far* the most readable way of doing it is to use lines that go well off the screen.</p>
<p>The other thing I&#39;d worry about is what exactly what the limit is. I don&#39;t mind some coding standards that sets the limit at like 120 characters or 100 or something like that &#8212; but I loathe 80 character limits with a passion. In the wonderful wide world of C++ templates it&#39;s not terribly uncommon for the name of a type to take up a substantial portion of that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944443">
				<div id="div-comment-944443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944443">
			November 3, 2011 at 8:44 am</a>		</div>

		<p>Oh, by the way, it&#39;s probably worth pointing out that Python-style significant whitespace would not, in-and-of-itself, help with this particular example. The code is still indented correctly, so a more Python-like C compiler would still accept it.</p>
<p>The significant differences are twofold. First, Python does not have such a thing as an empty statement; you need to explicitly say &#39;pass&#39;, which is a lot more obvious than just a stray semicolon. Compare the above vs</p>
<p> &nbsp; &nbsp;if (!SetThreadGroupAffinity(hThread, &amp;GrouAffinity, NULL)) pass;</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;printf(&quot;SetThreadGroupAffinity failed: %dn&quot;, GetLastError());</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;return FALSE;</p>
<p> &nbsp; &nbsp;}</p>
<p>Still might have to look for a moment, but it&#39;s at least a lot *more* clear.</p>
<p>The second is that Python has no need for an arbitrary block of statements. But this is not true of C. Allowing a block anywhere (not just in the branch of a conditional or in a loop) in C restricts the scope of any variables declared within (something that Python wouldn&#39;t do because of it&#39;s weird scoping rules) and in C++ will constrain when destructors run (which also doesn&#39;t really have a Python equivalent). So you &quot;can&#39;t&quot; get rid of allowing arbitrary blocks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944483">
				<div id="div-comment-944483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944483">
			November 3, 2011 at 9:48 am</a>		</div>

		<p>Dropping into disassembly view has helped me find a few boneheaded mistakes like that. Since finally getting around to learning assembly a few years ago (I was *very* late to that party), I&#39;ve wondered how in the world I was able to impersonate a professional C/C++ developer for nigh on 15 years. Assembly rarely lies. (Rarely&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944703">
				<div id="div-comment-944703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave (PhD)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944703">
			November 3, 2011 at 5:08 pm</a>		</div>

		<blockquote><p>
  Yes, there are a lot of advanced static code analyzers nowadays. The</p>
<p>  really good ones requires a PhD to configure. Not sure what your point</p>
<p>  is.
</p></blockquote>
<p>Well I didn&#39;t find it that hard :-).</p>
<p>(PREfast requires an awful lot of work, not necessarily a PhD, and unfortunately isn&#39;t really that powerful. My favorite tool is Coverity, but then you&#39;re paying an arm and a leg for it too).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944713">
				<div id="div-comment-944713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944713">
			November 3, 2011 at 5:09 pm</a>		</div>

		<p>#Richard Deeming:</p>
<blockquote><p>
  I&#39;m amazed that, despite several people mentioning Python in the</p>
<p>  comments, nobody&#39;s picked up the obvious reference: &quot;One on&#39;t cross</p>
<p>  beams gone owt askew on treadle.&quot; :o)
</p></blockquote>
<p>Well, as you know, there&#39;s nowt wrong with owt what mitherin clutterbucks don&#39;t barley grummit!</p>
<p>(Oooohhh&#8230; &#39;ee were grand!).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944583">
				<div id="div-comment-944583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944583">
			November 3, 2011 at 11:27 am</a>		</div>

		<p>@Anonymous Coward: There are plenty of valid uses. &nbsp;Two examples off the top off my head are when the entire loop logic is in the loop test (like the string copy &quot;while(*src++ = *dst++);&quot;) and when busy-waiting on a volatile memory location.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944723">
				<div id="div-comment-944723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DRX</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944723">
			November 3, 2011 at 6:38 pm</a>		</div>

		<p>ç¿ãæ¨ããè½ã¡ã</p>
<p>Even monkeys fall from trees.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944733">
				<div id="div-comment-944733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944733">
			November 3, 2011 at 6:40 pm</a>		</div>

		<p>@Lee: Even if you ignore the warning, when something goes wrong and the misbehaving line of code has a squiggly, that is a pretty good indication of what the problem is.</p>
<p>Where I work, we&#39;re not always encouraged to not commit code with warning &#8211; it really depends on the project. We try our best, but in some languages (Java comes to mind) it&#39;s almost impossible, and in some projects we have existing warning-ridden code bases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944603">
				<div id="div-comment-944603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944603">
			November 3, 2011 at 11:41 am</a>		</div>

		<p>@Adam Rosenfield: The AC explicitly said there&#39;s never a need of an empty block in an *if* statement. It can make sense in a loop, though I still think it should be disallowed as-is. (You can say &#39;while(&#8230;) {}&#39; or &#39;while(&#8230;) pass;&#39;. Those extra couple key presses won&#39;t hurt, I promise.)</p>
<p>(Of course that&#39;s ignoring that an expression like &#39;*src++ = *dst++&#39; is an affront to good programming taste to begin with; the fact that particular loop is so idiomatic is the only reason that it&#39;s not strangle-worthy.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944663">
				<div id="div-comment-944663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944663">
			November 3, 2011 at 1:25 pm</a>		</div>

		<p>Actually that&#39;s a pretty good argument against using some indent style that puts the bracket on the next line &#8211; with K&amp;R/1TBS you&#39;d notice it right away imo ;)</p>
<p>But while indent style is arguable, there&#39;s really NO good reason to use &quot;while(*src++ = *dst++);&quot; instead of &quot;while(*src++ = *dst++) continue;&quot; (I prefer that compared to {} because it&#39;s less likely to be overlooked, but that&#39;d be fine for me too). That&#39;s just asking for problems.</p>
<p>@JM I&#39;d prefer the 1.000 three-line functions. Why? First of all I don&#39;t have to look at all the code I&#39;m not interested in and second if the naming is reasonable I get some nice additional information for free. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944743">
				<div id="div-comment-944743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944743">
			November 3, 2011 at 8:37 pm</a>		</div>

		<p>@configurator Huh? What compiler warnings do you ignore in Java? The only thing I can think of is having an old code base without Generics that&#39;s compiled with a modern JDK &#8211; but then one should go through that and fix it anyhow.. should be rather mechanic assuming nobody made a mess out of the code.</p>
<p>Really can&#39;t think why java would be especially hard to get warning free &#8211; I find it much easier than in other languages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-944753">
				<div id="div-comment-944753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944753">
			November 3, 2011 at 9:30 pm</a>		</div>

		<p>@Evan: I&#39;d think forcing writng empty loop with empty block will work.</p>
<p>while (!someFunc()) {};</p>
<p>And actually I&#39;m enforcing this practice like 5+ years now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944763">
				<div id="div-comment-944763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hereafter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944763">
			November 3, 2011 at 9:59 pm</a>		</div>

		<p>These are something i did before,</p>
<p>both cases</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944773">
				<div id="div-comment-944773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944773">
			November 3, 2011 at 10:21 pm</a>		</div>

		<p>Similar to quoted story: I remember 40+ years ago, a group of people standing around a FORTRAN listing. They were focussed on 6 lines of code, trying to isolate a bug. Eventually someone looked at the corresponding object code on the system disk. Huh? Line blah hadn&#39;t compiled! It was a very old listing. Eventually someone noticed the dirty fingerprint at the start of that line. Under that fingerprint was just visile: a &quot;C&quot; in column 1! (the FORTRAN comment designator)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944783">
				<div id="div-comment-944783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944783">
			November 4, 2011 at 1:38 am</a>		</div>

		<p>You don&#39;t need a complex static analyzer : &quot;gcc -Wall Wextra -Werror&quot; will catch the mistake (and suggest a clearer alternative if its not a mistake)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944813">
				<div id="div-comment-944813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944813">
			November 4, 2011 at 5:06 am</a>		</div>

		<blockquote><p>
  while (!someFunc()) {}
</p></blockquote>
<p>while(true){</p>
<p>&nbsp;if(someFunc()) break;</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944853">
				<div id="div-comment-944853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944853">
			November 4, 2011 at 6:48 am</a>		</div>

		<p>re: I like C</p>
<p>A loop with an exit from the middle of the controller range for no good reason?</p>
<p>That would fail my code inspection. Rewrite with top or bottom loop condition [ while (C) do S; -or- do S; while (C); ]</p>
<p>See any text on structured programming.</p>
<p>Apart from that, one should write C using the idioms that are known to C programmers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944863">
				<div id="div-comment-944863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I like C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944863">
			November 4, 2011 at 8:01 am</a>		</div>

		<blockquote><p>
  That would fail my code inspection
</p></blockquote>
<p>I would argue that this criterion is wrong, really. If you can rewrite the loop to have the condition at the top or at the bottom without introducing more conditions or more variables, then it should be done, of course. But it is much better to break out off a loop or a function (especially in case of errors) than to make the code more complicated, or to introduce additional variables.</p>
<p>I like to see who you would rewrite my loop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944883">
				<div id="div-comment-944883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesNT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944883">
			November 4, 2011 at 8:03 am</a>		</div>

		<p>Mr. Chen,</p>
<p>Despite this heroic attempt at trying to look human (&quot;Hey, I make the same mistakes you guys make!&quot;), you are still my programming GOD.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-944943">
				<div id="div-comment-944943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944943">
			November 4, 2011 at 8:37 am</a>		</div>

		<p>And the moral of the story is the same as before ( <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2007/01/23/1514567.aspx" rel="nofollow">blogs.msdn.com/&#8230;/1514567.aspx</a> ) : Have someone else proofread you.</p>
<p>But for the same reason, we never think of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944793">
				<div id="div-comment-944793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">grumpy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944793">
			November 4, 2011 at 3:00 am</a>		</div>

		<p>Which is why it&#39;s good to remain humble about our code. I know, it&#39;s hard, we&#39;re all coding gods and produce *amazing* code all the time, but sometimes, y&#39;know, small tpying erors may sneak in. Not mistakes or bugs as such, just&#8230; cruft. Maintaining humility is the best way to avoid foot-in-mouth disease. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944803">
				<div id="div-comment-944803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I like C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944803">
			November 4, 2011 at 3:26 am</a>		</div>

		<p>&gt; there&#39;s really NO good reason to use &quot;while(*src++ = *dst++);&quot;</p>
<p>&gt; instead of &quot;while(*src++ = *dst++) continue;&quot;</p>
<p>There is really NO good reason to use &quot;while(*src++ = *dst++);&quot; instead of</p>
<p>for () {</p>
<p> &nbsp;*dst = *src;</p>
<p> &nbsp;if (*dst == &#39; &#39;) break;</p>
<p> &nbsp;src++;</p>
<p> &nbsp;dst++;</p>
<p>}</p>
<p>So much clearer (and with the right semantic for &quot;src&quot; and &quot;dst :)).</p>
<p>[I&#39;m aware that src and dst will not have the same values after the loop as by &quot;while(*dst++ = *src++);&quot;, but this may be more useful for string concatenation.]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944983">
				<div id="div-comment-944983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944983">
			November 4, 2011 at 11:24 am</a>		</div>

		<p>@Evan Imo that&#39;s not just a &quot;fix it for the sole purpose of silencing the warning&quot;. Having a completely heterogenous Collection is usually a code smell and at least bad design (and what more can you expect a compiler warning to do than warn of these things? Sure it may not get fixed, because it&#39;s old working code, but in new code there&#39;s no excuse to get such a warning)</p>
<p>I don&#39;t see &quot;the editor doesn&#39;t know where to jump&quot; as much of a problem. If I want to get out of a block I press backspace once in Python. To do the same in C I press } once &#8211; same effort, but the Python results looks much clearer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-945003">
				<div id="div-comment-945003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mrk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-945003">
			November 4, 2011 at 11:37 am</a>		</div>

		<p>@Lee Even better, where policy requires Warnings as Errors setting</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944823">
				<div id="div-comment-944823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Buchan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944823">
			November 4, 2011 at 5:28 am</a>		</div>

		<p>Funny, I&#39;ve only very rarely written these bugs, and it never took me long to find them when I did. I have plenty of *other* stupid bugs, so it&#39;s not like I think I&#39;m some super coder or anything.</p>
<p>@I like C: That is *waaaay* to hard a line to take. In fact, that code is so non-idiomatic C that it&#39;s *harder* for me to understand.</p>
<p>I&#39;m a big fan of the way python solves this, though, and every DSL I&#39;ve created since has used layout. It&#39;s just better in every way: it&#39;s shorter (more meaning per line), prettier (less stylistic variance), and easier (less ways to screw up), all of which drive down the bug rate. I just wish it *either* only accepted indented blocks on the next line *or* accepted any aligned multiline blocks by counting characters, like:</p>
<p>if foo: bar</p>
<p>&#8230;&#8230;..baz</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944833">
				<div id="div-comment-944833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I like C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944833">
			November 4, 2011 at 5:52 am</a>		</div>

		<p>@Simon Buchan: &gt; that it&#39;s *harder* for me to understand</p>
<p>Why? To understand (debug!) a construct like &quot;while(*dst++ = *src++);&quot; you always need to decompose the steps and their correct timing in your brain. Thats unnecessary hard, especially when the loop also do some other things or calls functions with side-effects somewhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944843">
				<div id="div-comment-944843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I like C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944843">
			November 4, 2011 at 6:05 am</a>		</div>

		<p>In a discussion like this, there is always one link to mention: <a rel="nofollow" target="_new" href="http://www.de.ioccc.org/years.html" rel="nofollow">http://www.de.ioccc.org/years.html</a></p>
<p>For example, from 1994, weisberg:</p>
<p>main(){</p>
<p>	int x=3,n,m=2,*t,*a,*b=0;</p>
<p>	while(b?o:((*(t=b=(int*)malloc(o))=2),a=t+1,o))n=*b,n&gt;=m?c:x%n?(int)b++:N);</p>
<p>}</p>
<p>???</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-944923">
				<div id="div-comment-944923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I like C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944923">
			November 4, 2011 at 8:15 am</a>		</div>

		<p>@Dave:</p>
<p>&gt; See any text on structured programming.</p>
<p>&gt; Apart from that, one should write C using the idioms that are known to C programmers.</p>
<p>That both statements together in this context make no well-grounded argument to me. &quot;idioms that are known to C programmers&quot; are in many cases no good examples for structured programming. The classic example here &quot;while(*dst++ = *src++);&quot; is more on the &quot;spaghetti code&quot; side than on the structured programming side.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944933">
				<div id="div-comment-944933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944933">
			November 4, 2011 at 8:18 am</a>		</div>

		<p>@dave:</p>
<p>Here is a loop for looking for a character in a string</p>
<p>(yeah&#8230; I know of strchr(), but just to prove a point):</p>
<p>char* s = &quot;CRAZY STRING!!&quot;; // &lt;&#8211; looking for &#39;G&#39;</p>
<p>char* t = s;</p>
<p>char c;</p>
<p>int found = 0;</p>
<p>while (((c = *t++) != 0) &amp;&amp; !found)</p>
<p>{</p>
<p>if (c == &#39;G&#39;) ++found;</p>
<p>}</p>
<p>So, how many times the condition code will check &#39;found&#39; variable?</p>
<p>A loop (written by non-dogmatic coder) with a break in a middle is more performant in the cases like this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-945053">
				<div id="div-comment-945053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bruce</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-945053">
			November 4, 2011 at 3:24 pm</a>		</div>

		<p>&quot;Since most of us don&#39;t have machines with more than 64 processors, we couldn&#39;t run the code on our own machines to see what happens.&quot;</p>
<p>I know this is tangential to the story, but fortunately you can tell Windows to create groups of less than 64 processors per group for testing: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/hardware/ff542298%28v=vs.85%29.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ff542298%28v=vs.85%29.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-944963">
				<div id="div-comment-944963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-944963">
			November 4, 2011 at 10:02 am</a>		</div>

		<p>Oh wow this thread got long. And it&#39;s just the sort of thing I like to tal^H^H^Hcomplain about.</p>
<p>@Lee: &quot;@blah, @configurator: that&#39;s what I like about software houses where developers are encouraged to never check in code that has any warnings&quot;</p>
<p>I did an internship at a place that turns on pretty much every warning they can get their paws on (at least that won&#39;t fail in system headers) and then builds with -Werror. Even *I* think that they may be excessive, but I still approve heavily.</p>
<p>@JM: &quot;My point is just that stopping to think if maybe your function is too long is never a waste of time.&quot;</p>
<p>Oh, I totally agree; I just don&#39;t think there&#39;s anything close to a practical way to enforce it with tooling. (Well, tooling can help, but I think the most it can do is alert reasonable people to go use the cluebat a bit.)</p>
<p>@configurator: &quot;and in some projects we have existing warning-ridden code bases.&quot;</p>
<p>Ugh, this is the worst. I once spent about 3 days taking a project that compiled with I think close to 10,000 warnings on default GCC settings and got it down to 0. (Most were like one warning repeated a bajillion times, but still.) I was so happy&#8230; of course turning on -Wall is still, uh, &quot;interesting.&quot;</p>
<p>@voo: &quot;The only thing I can think of is having an old code base without Generics that&#39;s compiled with a modern JDK&quot;</p>
<p>I&#39;m working on some code now that does that, and it&#39;s places where I can&#39;t put specific types because it&#39;s code that really can use anything. (There may be some fancy way to genericize the whole thing but I don&#39;t know how.) I mean, I could go in and put List&lt;Object&gt; instead of List, but it seems barely worth it. That would be one of those &quot;fix it for the sole purpose of silencing the warning&quot; thing. It&#39;s pretty low on the priority list.</p>
<p>@cheuong00: &quot;I&#39;d think forcing writng empty loop with empty block will work.&quot;</p>
<p>Oh, it totally does. My point is just that it should be absolutely enforced by the compiler.</p>
<p>@Simon Burchan: &quot;I&#39;m a big fan of the way python solves this, though, and every DSL I&#39;ve created since has used layout. It&#39;s just better in every way&quot;</p>
<p>I love *reading* Python; I hate writing it. The lack of block delimiters means your editor has fewer clues of where to indent to, which means it often gets it wrong. I stand by what I said before: the ideal in this area is to take the C approach and use delimiters, but then require that the indentation match.</p>
<p>I think I&#39;ll stay out of the &#39;while(*dst++ = *src++)&#39; discussion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-945023">
				<div id="div-comment-945023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-945023">
			November 4, 2011 at 2:53 pm</a>		</div>

		<p>@Raymond: [Yes, there are a lot of advanced static code analyzers nowadays. The really good ones requires a PhD to configure. Not sure what your point is. -Raymond]</p>
<p>1. MS has employees with PhDs.</p>
<p>2. Good != cumbersome.</p>
<p>3. VS 2010 code analyzer is not cumbersome to use.</p>
<p>4. If one of the smartest employees of ms thinks THEIR OWN static code analysis tools are to cumbersome to use. Who are supposed to use them?</p>
<p>@Evan: @Kirill: Um, that&#39;s not MS&#39;s code.</p>
<p>On the contrary, MS own 100% of the code for prefix, prefast &amp; visual studio code analyzer. MS have the developers as employees. There&#39;s NO excuse.</p>
<p>@voo: I love *reading* Python; I hate writing it.</p>
<p>Who cares? Remember, code is read more often that it is written. Usually a magnitude more often. Optimize for readability!</p>
<p>Furthermore, I think this blog software stinks.</p>
<div class="post">[<i>I still don&#39;t see what your point is. The stray semicolon was in a customer&#39;s code. Or are you saying that Microsoft&#39;s support policy should be &quot;Customers may not ask questions until they&#39;ve run the VS 2010 code analyzer over all their code&quot;? (The VS 2010 code analyzer is not <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/06/15/10024931.aspx" rel="nofollow">the one that requires a PhD to configure</a>.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-945063">
				<div id="div-comment-945063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-945063">
			November 5, 2011 at 4:00 am</a>		</div>

		<p>This reminds me of the old Fortran story:</p>
<p>DO5I=1.10</p>
<p>instead of</p>
<p>DO5I=1,10</p>
<p>The nearest I could come up with in C is</p>
<p>while (f()); while (g());</p>
<p>as compared to</p>
<p>do while (f()); while (g());</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-945073">
				<div id="div-comment-945073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-945073">
			November 6, 2011 at 4:28 am</a>		</div>

		<p>@I like C: The IOCCC example makes no sense at all without the Makefile, because that&#39;s where the rest of the code is hidden.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-945083">
				<div id="div-comment-945083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">I like C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-945083">
			November 6, 2011 at 5:39 am</a>		</div>

		<p>@Marcel: Ok. But my point was that C allows you to write very cruel code (like the body of the main function of this example), very few &quot;compact&quot; lines with incredible complex semantics. The IOCCC website is of course for entertainment, but it also highlights this weakness of C very well.</p>
<p>Ideally, C should redefine all kind of assignments to be statements, not expressions. Also, it should introduce boolean expressions at least by a requirement, that expressions in conditions must evaluate to boolean, and logical operators (&amp;&amp; and friends) can only operate with booleans. This both would greatly reduce the possibility to write unreadable one-liners, and the use of empty bodies in loops.</p>
<div class="post">[<i>You are more than welcome to write up your proposal and submit it to the C standardization committee for consideration. Not sure why you need to tell us about it, though. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-945093">
				<div id="div-comment-945093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-945093">
			November 7, 2011 at 2:00 am</a>		</div>

		<p>Customers should make sure their code is in perfect condition if they expect a good answer. What if the code doesn&#39;t compile?</p>
<p>But of course, anyway, the first thing customer support should do is to run code analysis themselves. This could be done automatically.</p>
<p>My point was that a *good* program, code analyzer or not, should not require a PhD. If any program require a PhD to use, it&#39;s not a good program.</p>
<div class="post">[<i>The super-fancy static code analysis tool is a research project, not a commercial product. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-945783">
				<div id="div-comment-945783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111103-00/?p=9203#comment-945783">
			November 8, 2011 at 9:04 pm</a>		</div>

		<p>@voo: &quot;Imo that&#39;s not just a &quot;fix it for the sole purpose of silencing the warning&quot;.&quot;</p>
<p>Hmm, looking at it again I might be able to put generics in to get rid of it, and it might not be too bad. Will require fairly extensive changes to the code in question though.</p>
<p>@voo: &quot;I don&#39;t see &quot;the editor doesn&#39;t know where to jump&quot; as much of a problem. If I want to get out of a block I press backspace once in Python. To do the same in C I press } once &#8211; same effort, but the Python results looks much clearer.&quot;</p>
<p>The problem I have is that in C, the editor &#39;gets it wrong&#39; (i.e. doesn&#39;t know that I want to insert a }) only once. Then I press } and it&#39;s right thereafter. However, in Python, the editors I&#39;ve used (mostly Emacs) sometimes gets it wrong multiple times per end-of-block. I&#39;ll go through and hit backspace and continue. But then I&#39;ll go back and say &quot;this if statement needs another elif&quot;, or &quot;let&#39;s put another function between these two existing ones&quot;, and it&#39;ll get it wrong again. And then again. It&#39;s not *terribly* frequent, but it does happen.</p>
<p>Like I said, I like the idea of making the compiler sensitive to whitespace to prevent this class of problems, and I went into Python with a very open mind on that matter. So I really do feel like I&#39;m not just complaining because things aren&#39;t like how I&#39;m used to. YMMV, but I really do find it more obnoxious to edit. I also don&#39;t find the {}s in C-like languages obnoxious.</p>
<p>(And of course there are other problems with the Python approach, such as some forum software destroying indentation and thus the meaning of a Python program.)</p>
<p>P.S. I totally had to use Wireshark to capture this post after the forum software dropped it. Whee for good software.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

