<html>
<head>
<title>Helper functions to make shell bind contexts slightly more manageable</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Helper functions to make shell bind contexts slightly more manageable</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 23, 2015 / year-entry #17</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we learned about the wonderful world of shell bind context strings, and I promised some helper functions to make this slightly more manageable. Here are some helper functions which supplement the Create­Bind­Ctx­With­Opts function we created some time ago. #include <propsys.h> HRESULT EnsureBindCtxPropertyBag( IBindCtx *pbc, REFIID riid, void **ppv) { *ppv = nullptr; CComPtr<IUnknown>...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time,
we learned about
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2015/01/22/10587918.aspx">
the wonderful world of shell bind context strings</a>,
and I promised some helper functions to make this slightly more
manageable.
</p>
<p>
Here are some helper functions which supplement the
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/03/10415778.aspx">
<code>Create&shy;Bind&shy;Ctx&shy;With&shy;Opts</code> function</a>
we created some time ago.
</p>
<pre>
#include &lt;propsys.h&gt;

HRESULT EnsureBindCtxPropertyBag(
    IBindCtx *pbc, REFIID riid, void **ppv)
{
 *ppv = nullptr;
 CComPtr&lt;IUnknown&gt; spunk;
 HRESULT hr = pbc-&gt;GetObjectParam(STR_PROPERTYBAG_PARAM, &amp;spunk);
 if (FAILED(hr)) {
  hr = PSCreateMemoryPropertyStore(IID_PPV_ARGS(&amp;spunk));
  if (SUCCEEDED(hr)) {
   hr = pbc-&gt;RegisterObjectParam(STR_PROPERTYBAG_PARAM, spunk);
  }
 }
 if (SUCCEEDED(hr)) {
  hr = spunk-&gt;QueryInterface(riid, ppv);
 }
  return hr;
}

HRESULT AddBindCtxDWORD(
    IBindCtx *pbc, LPCWSTR pszName, DWORD dwValue)
{
 CComPtr&lt;IPropertyBag&gt; sppb;
 HRESULT hr = EnsureBindCtxPropertyBag(pbc, IID_PPV_ARGS(&amp;sppb));
 if (SUCCEEDED(hr)) {
  hr = PSPropertyBag_WriteDWORD(sppb, pszName, dwValue);
 }
 return hr;
}

HRESULT AddBindCtxString(
    IBindCtx *pbc, LPCWSTR pszName, LPCWSTR pszValue)
{
 CComPtr&lt;IPropertyBag&gt; sppb;
 HRESULT hr = EnsureBindCtxPropertyBag(pbc, IID_PPV_ARGS(&amp;sppb));
 if (SUCCEEDED(hr)) {
  hr = PSPropertyBag_WriteStr(sppb, pszName, pszValue);
 }
 return hr;
}

HRESULT CreateDwordBindCtx(
    LPCWSTR pszName, DWORD dwValue, IBindCtx **ppbc)
{
 CComPtr&lt;IBindCtx&gt; spbc;
 HRESULT hr = CreateBindCtx(0, &amp;spbc);
 if (SUCCEEDED(hr)) {
  hr = AddBindCtxDWORD(spbc, pszName, dwValue);
 }
 *ppbc = SUCCEEDED(hr) ? spbc.Detach() : nullptr;
 return hr;
}

HRESULT CreateStringBindCtx(
    LPCWSTR pszName, LPCWSTR pszValue, IBindCtx **ppbc)
{
 CComPtr&lt;IBindCtx&gt; spbc;
 HRESULT hr = CreateBindCtx(0, &amp;spbc);
 if (SUCCEEDED(hr)) {
  hr = AddBindCtxString(spbc, pszName, pszValue);
 }
 *ppbc = SUCCEEDED(hr) ? spbc.Detach() : nullptr;
 return hr;
}
</pre>
<p>
The
<code>Ensure&shy;Bind&shy;Ctx&shy;Property&shy;Bag</code>
function
puts a property bag in the bind context if there isn't
one already.
</p>
<p>
The
<code>Add&shy;Bind&shy;Ctx&shy;DWORD</code>
function
adds a <code>DWORD</code> to that associated property bag.
If you wanted to add multiple
<code>DWORD</code>s
to a bind context, you would call this function multiple times.
You can also use
the
<code>Add&shy;Bind&shy;Ctx&shy;String</code>
if the thing you want to add is a string.
</p>
<p>
The
<code>Create&shy;Dword&shy;Bind&shy;Ctx</code>
function
handles the simple case where you want to create a bind context
that contains
a single <code>DWORD</code>.
Similarly,
<code>Create&shy;String&shy;Bind&shy;Ctx</code>.
</p>
<p>
But now things are starting to get kind of unwieldy.
What if you want a bind context with a string and a <code>DWORD</code>?
Let's go for something a bit more fluent.
</p>
<p>
But first, some scaffolding.
</p>
<pre>
class CStaticUnknown : public IUnknown
{
public:
 // *** IUnknown ***
 IFACEMETHODIMP QueryInterface(
  _In_ REFIID riid, _Outptr_ void **ppv)
 {
  *ppv = nullptr;
  HRESULT hr = E_NOINTERFACE;
  if (riid == IID_IUnknown) {
   *ppv = static_cast&lt;IUnknown *&gt;(this);
   AddRef();
   hr = S_OK;
  }
  return hr;
 }

 IFACEMETHODIMP_(ULONG) AddRef()
 {
  return 2;
 }

 IFACEMETHODIMP_(ULONG) Release()
 {
  return 1;
 }

};

CStaticUnknown s_unkStatic;
</pre>
<p>
This static implementation of <code>IUnknown</code> is one
we'll use for the bind context strings whose mere presence
indicates that a flag is set.
</p>
<pre>
class CBindCtxBuilder
{
public:
 CBindCtxBuilder()
 {
  m_hrCumulative = CreateBindCtx(0, &amp;m_spbc);
 }

 CBindCtxBuilder&amp; SetMode(DWORD grfMode);
 CBindCtxBuilder&amp; SetFindData(const WIN32_FIND_DATA *pfd);
 CBindCtxBuilder&amp; SetFlag(PCWSTR pszName);
 CBindCtxBuilder&amp; SetVariantDword(PCWSTR pszName, DWORD dwValue);
 CBindCtxBuilder&amp; SetVariantString(PCWSTR pszName, PCWSTR pszValue);

 HRESULT Result() const { return m_hrCumulative; }

 IBindCtx *GetBindCtx() const
 { return SUCCEEDED(m_hrCumulative) ? m_spbc : nullptr; }
private:
 HRESULT EnsurePropertyBag();

private:
 CComPtr&lt;IBindCtx&gt; m_spbc;
 CComPtr&lt;IPropertyBag&gt; m_sppb;
 HRESULT m_hrCumulative;
};
</pre>
<p>
The bind context builder class is a helper class that creates
a bind context, and then fills it with stuff.
For now, we let you set the following:
</p>
<ul>
<li>The mode to use for opening the target of the bind.
    <a HREF="http://msdn.microsoft.com/en-us/library/windows/desktop/ms686636(v=vs.85).aspx">
    The default is <code>STGM_<wbr>READ&shy;WRITE</code></a>.</p>
<li>The find data to use, if
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/03/10415778.aspx">
    creating a simple pidl</a>.</p>
<li>An arbitrary flag, associated with a dummy <code>IUnknown</code>.
<li>A <code>DWORD</code> in the property bag.
<li>A string in the property bag.
</ul>
<p>
After you build up the bind context, you can check the
<code>Result()</code> to see if it was built successfully,
and use
<code>Get&shy;Bind&shy;Ctx</code> to extract the result.
</p>
<p>
Here's the implementation.
It's really not that exciting.
We accumulate any error
in <code>m_hrCumulative</code>,
and once an error occurs, all future methods do nothing
aside from preserving the error.
To make the object fluent, the methods return a reference to themselves.
</p>
<p>
There is a special bind context method for setting the mode:
</p>
<pre>
CBindCtxBuilder&amp;
CBindCtxBuilder::SetMode(DWORD grfMode)
{
 if (SUCCEEDED(m_hrCumulative)) {
  BIND_OPTS bo = { sizeof(bo), 0, grfMode, 0 };
  m_hrCumulative = m_spbc-&gt;SetBindOptions(&amp;bo);
 }
 return *this;
}
</pre>
<p>
Find data is set as a direct object on the bind context,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/03/10415778.aspx">
as we saw some time ago</a>:</p>
<pre>
CBindCtxBuilder&amp;
CBindCtxBuilder::SetFindData(const WIN32_FIND_DATA *pfd)
{
 if (SUCCEEDED(m_hrCumulative)) {
  m_hrCumulative = <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/05/03/10415778.aspx">AddFileSysBindCtx</a>(m_spbc, pfd);
 }
 return *this;
}
</pre>
<p>
Flags are set by there mere presence, so we associate them
with a dummy <code>IUnknown</code> that does nothing:
</p>
<pre>
CBindCtxBuilder&amp;
CBindCtxBuilder::SetFlag(PCWSTR pszName)
{
 if (SUCCEEDED(m_hrCumulative)) {
  m_hrCumulative = m_spbc-&gt;RegisterObjectParam(
    const_cast&lt;PWSTR&gt;(pszName), &amp;s_unkStatic);
 }
 return *this;
}
</pre>
<p>
If a property is set in the property bag, we need to proceed
in two steps.
First, we create the property bag if we don't have one already.
Second, we put the value into the property bag:
</p>
<pre>
CBindCtxBuilder&amp;
CBindCtxBuilder::SetVariantDword(
    PCWSTR pszName, DWORD dwValue)
{
 if (SUCCEEDED(m_hrCumulative)) {
  m_hrCumulative = EnsurePropertyBag();
 }
 if (SUCCEEDED(m_hrCumulative)) {
  m_hrCumulative =  PSPropertyBag_WriteDWORD(
    m_sppb, pszName, dwValue);
 }
 return *this;
}

CBindCtxBuilder&amp;
CBindCtxBuilder::SetVariantString(
    PCWSTR pszName, PCWSTR pszValue)
{
 if (SUCCEEDED(m_hrCumulative)) {
  m_hrCumulative = EnsurePropertyBag();
 }
 if (SUCCEEDED(m_hrCumulative)) {
  m_hrCumulative =  PSPropertyBag_WriteStr(
    m_sppb, pszName, pszValue);
 }
 return *this;
}
</pre>
<p>
And finally, the helper function that creates
a property bag if we don't have one already.
</p>
<pre>
HRESULT CBindCtxBuilder::EnsurePropertyBag()
{
 HRESULT hr = S_OK;
 if (!m_sppb) {
  hr = PSCreateMemoryPropertyStore(
    IID_PPV_ARGS(&amp;m_sppb));
  if (SUCCEEDED(hr)) {
   hr = m_spbc-&gt;RegisterObjectParam(
    STR_PROPERTYBAG_PARAM, m_sppb);
  }
 }
 return hr;
}
</pre>
<p>
The idea here is that the class is used like this:
</p>
<pre>
CBindCtxBuilder builder;
builder.SetMode(STGM_CREATE)
       .SetFindData(&amp;wfd)
       .SetFlag(STR_FILE_SYS_BIND_DATA_WIN7_FORMAT)
       .SetFlag(STR_BIND_FOLDERS_READ_ONLY);
hr = builder.Result();
if (SUCCEEDED(hr)) {
 hr = psf-&gt;ParseDisplayName(hwnd, builder.GetBindCtx(),
   pszName, &amp;cchEaten, &amp;pidl, &amp;dwAttributes);
}
</pre>
<p>
You create the bind context builder,
then use the various <code>Set&shy;Xxx</code> methods to
fill the bind context with goodies,
and then you check if it all worked okay.
If so, then you use
<code>Get&shy;Bind&shy;Ctx</code> to get the resulting
bind context and proceed on your way.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1172723">
				<div id="div-comment-1172723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1172723">
			January 23, 2015 at 7:09 am</a>		</div>

		<p>Well, I never thought I&#39;d see AddRef like that!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172733">
				<div id="div-comment-1172733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1172733">
			January 23, 2015 at 7:12 am</a>		</div>

		<p>It&#39;s not the first time Raymond&#39;s done that (I don&#39;t think) and I believe I&#39;ve seen it elsewhere once or maybe twice. &nbsp;You can use that when you can be sure you control the lifetime of the object, IIRC.</p>
<div class="post">[<em>It&#39;s been done <a href="http://www.bing.com/search?q=addref+%22return+2%22">many times</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172743">
				<div id="div-comment-1172743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1172743">
			January 23, 2015 at 7:19 am</a>		</div>

		<p>&gt; Well, I never thought I&#39;d see AddRef like that!</p>
<p>I reckon it&#39;s called confidence.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1172753">
				<div id="div-comment-1172753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1172753">
			January 23, 2015 at 7:38 am</a>		</div>

		<p>I believe the static IUnknown trick is only safe in exe files and dlls without a DllCanUnloadNow export. The object/function you pass your interface to is allowed to hang on to it as long as they want which means your dll might be unloaded by the time they call Release. I see no reason why IShellFolder would cache the IBindCtx but that does not make it right. The same goes for CBindCtxBuilder on the stack.</p>
<div class="post">[<em>The CBindCtxBuilder is not passed to ParseDisplayName. The bind context created by CreateBindCtx is passed, and that has its own reference count. as for the static object: It&#39;s no less safe than having a reference-counted dummy object, because the code for the dummy object&#8230; is in your DLL! -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1172763">
				<div id="div-comment-1172763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1172763">
			January 23, 2015 at 7:56 am</a>		</div>

		<p>@Raymond. A reference-counted dummy object would Increment/Decrement the counter used by DllCanUnloadNow in its constructor/destructor so the your dll would not be unloaded if somebody decided to cache your dummy object&#8230;</p>
<div class="post">[<em>Good point. The static object (if in an unloadable DLL) would still need a reference count. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1172773">
				<div id="div-comment-1172773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1172773">
			January 23, 2015 at 8:03 am</a>		</div>

		<p>I see you are using STR_FILE_SYS_BIND_DATA_WIN7_FORMAT so let me dare to ask, what is the difference between a XP, 7 and 8.1 STR_FILE_SYS_FIND_DATA? Is it only a difference in the internal pidl format?</p>
<div class="post">[<em>I don&#39;t know. I just picked that because it illustrated one of the scenarios. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172783">
				<div id="div-comment-1172783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1172783">
			January 24, 2015 at 3:00 am</a>		</div>

		<p>The static object could increment/decrement the counter used by DllCanUnloadNow in its Addref/Release methods.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ietest odd alt thread-odd thread-alt depth-1" id="comment-1173023">
				<div id="div-comment-1173023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/crack+tracker' rel='external nofollow' class='url'>crack tracker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1173023">
			January 28, 2015 at 3:58 am</a>		</div>

		<p>instead of the dummy unknown, for these plain 0-1 option strings I found that passing the bind context ITSELF in RegisterObjectParam does the trick. No need for separate dodgy objects, you can do dodgy IUnknown with IBindCtx itself :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ietest even thread-even depth-1" id="comment-1173033">
				<div id="div-comment-1173033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/crack+tracker' rel='external nofollow' class='url'>crack tracker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1173033">
			January 28, 2015 at 4:47 am</a>		</div>

		<p>PS. not such a good idea after all, that would create circular references to our IBindCtx. It is possible to &quot;undo&quot; these by calling RevokeObjectParam after use but the simplicity of the idea is gone&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1173263">
				<div id="div-comment-1173263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anti pattern deluxe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1173263">
			January 28, 2015 at 10:26 pm</a>		</div>

		<p>Is COM ugly or what? Be gone with it!</p>
<div class="post">[<em>You seem to be confusing my showing how to do something with an endorsement of it. This happens a lot when I share a tip on batch file programming. (And of course I have yet to see anybody propose an alternative that is language-independent.) -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1173583">
				<div id="div-comment-1173583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150123-00/?p=44843#comment-1173583">
			January 29, 2015 at 3:59 pm</a>		</div>

		<p>@Anti pattern deluxe</p>
<p>Don&#39;t confuse &quot;COM is ugly&quot; with &quot;Some COM objects are ugly&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

