<html>
<head>
<title>Don't save anything you can recalculate</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Don&#8217;t save anything you can recalculate</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 20, 2004 / year-entry #429</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Nowadays, a major barrier to performance for many classes of programs is paging. We saw earlier this year that paging can kill a server. Today, another example of how performance became tied to paging. The principle is "Don't save anything you can recalculate." This of course, seems counterintuitive: Shouldn't you save the answer so you...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Nowadays, a major barrier to performance for many classes of programs is paging. We saw earlier this year that <a href="http://weblogs.asp.net/oldnewthing/archive/2004/03/17/91178.aspx"> paging can kill a server</a>. Today, another example of how performance became tied to paging.</p>
<p> The principle is "Don't save anything you can recalculate." This of course, <a href="http://weblogs.asp.net/oldnewthing/archive/2004/12/16/317157.aspx"> seems counterintuitive</a>: Shouldn't you save the answer so you don't have to recalculate it? </p>
<p> The answer is, "It depends." </p>
<p> If recalculating the answer isn't very expensive and has good data locality, then you may be better off recalculating it than saving it, especially if saving it <strong>reduces</strong> locality. For example, if the result is stored in a separate object, you now have to touch a second object&mdash;risking a page fault&mdash;to get the saved answer. </p>
<p> Last time, <a href="http://weblogs.asp.net/oldnewthing/archive/2004/12/17/323556.aspx"> we saw how Windows&nbsp;95 applied this principle</a> so that rebasing a DLL didn't thrash your machine. I'm told that the <a href="http://office.microsoft.com/en-us/FX010857911033.aspx"> Access</a> team used this principle to reap significant performance gains. Instead of caching results, they just threw them away and recalculated them the next time they were needed. </p>
<p> Whether this technique works for you is hard to predict. If your program is processor-bound, then caching computations is probably a good idea. But if your program is memory-bound, then you may be better off getting rid of the cache, since the cache is just creating more memory pressure. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-235863">
				<div id="div-comment-235863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235863">
			December 20, 2004 at 9:24 am</a>		</div>

		<p>I&#8217;ll second this. Whenever optimizing, most of the time I&#8217;ll prefer saving space over saving time so I rarely ever cache things unless it significantly makes it faster. A lot of the algorithms I use will be (theoretically) orders of magnitude slower but I wont need additonal storage for it. It&#8217;s also a win in general because whenever you cache things, there are more &quot;out of resource&quot; conditions you will have to handle and there are more dependencies between variables that gets to be a bigger PITA as more code is introduced over time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235883">
				<div id="div-comment-235883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frank</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235883">
			December 20, 2004 at 9:41 am</a>		</div>

		<p>But not always. Don&#8217;t forget instruction cache. If re-calculating involves many instructions, it may mean more code page swapping. And also if large look-up tables are involved.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235893">
				<div id="div-comment-235893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/ptorr/archive/2004/06/14/Referral.aspx' rel='external nofollow' class='url'>Peter Torr</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235893">
			December 20, 2004 at 9:58 am</a>		</div>

		<p>Another thing to consider is&#8230; security!</p>
<p>Recalculating things is A Bad Thing if there is a chance that the answer has changed inbetween the two calculations. For example (obviously silly code):</p>
<p>buff = malloc(ComputeTheSize())<br />
<br />// do stuff<br />
<br />memcpy(buff, stuff, ComputeTheSize())</p>
<p>What if another thread did something that makes ComputeTheSize return a different (larger) value between these two lines of code?You have a buffer overrun!</p>
<p>Even using the more secure memcpy_s function won&#8217;t help you here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235903">
				<div id="div-comment-235903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235903">
			December 20, 2004 at 11:07 am</a>		</div>

		<p>I think it&#8217;s safe to say that saving stuff on the stack (i.e. local variables) is reasonably cost-free unless done to great excess.</p>
<p>This advise applies much more realistically to things like cache tables that are stored on the heap. </p>
<p>So the &quot;security&quot; consideration is more limited. And it has to be traded off against the security problems of storing the computed information, which can be considerable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235923">
				<div id="div-comment-235923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ryan Phelps</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235923">
			December 20, 2004 at 3:50 pm</a>		</div>

		<p>How do you profile your code to find chunks of it that page fault a lot?  What software profilers do that kind of stuff for you?  How do you keep typical applications, web browsers as an example, from page faulting their code and/or data a lot?  Why does McAfee virus scan have 2.5 million page faults after using 13 minutes of CPU time?  Maybe you can&#8217;t answer the last one, but I swear that damn program sucks my computer into 1992.  I hate it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235943">
				<div id="div-comment-235943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235943">
			December 20, 2004 at 5:24 pm</a>		</div>

		<p>12/20/2004 9:58 AM Peter Torr </p>
<p>&gt; Recalculating things is A Bad Thing if there<br />
<br />&gt; is a chance that the answer has changed<br />
<br />&gt; inbetween the two calculations.<br />
<br />&gt; buff = malloc(ComputeTheSize())<br />
<br />&gt; memcpy(buff, stuff, ComputeTheSize())<br />
<br />&gt; What if another thread did something that<br />
<br />&gt; makes ComputeTheSize return a different<br />
<br />&gt; (larger) value</p>
<p>Good point.  But yes indeed, what if another thread did something like that?  If you cache the size, and if the new correct size is smaller because the other thread has realloc&#8217;ed the thing with a smaller size, then don&#8217;t you still encounter the exact same bug?</p>
<p>&gt; Even using the more secure memcpy_s function<br />
<br />&gt; won&#8217;t help you here.</p>
<p>Sorry I haven&#8217;t read it.  Is memcpy_s aware of the actual size of the malloc&#8217;ed memory?  If so, is there a reason why it would protect against moving too much after another thread shrank the allocated memory, while not protecting against moving too much because the program tried to move an increased size when the actual size didn&#8217;t increase?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235963">
				<div id="div-comment-235963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dare</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235963">
			December 20, 2004 at 5:50 pm</a>		</div>

		<p>Ryan Phelps: I don&#8217;t know the answer but I could offer a guess.</p>
<p>They might map the file into the process&#8217;s address space instead of reading it.  They&#8217;d have to fault in the all the pages of the file they touch.</p>
<p>Even if they do read it, they probably bring the whole thing into memory at once as a contiguous block.  If, for example, they did an alloc / free for each file they read, it could lead to a bunch of paging.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-235973">
				<div id="div-comment-235973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/mpll' rel='external nofollow' class='url'>Pavel Lebedinsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235973">
			December 20, 2004 at 7:48 pm</a>		</div>

		<blockquote><p>
  How do you profile your code to find chunks of it that page fault a lot?</p>
<p>You can use pfmon.exe from Platform SDK. It doesn&#8217;t show call stacks, only eip and referenced addresses, but it still can be useful.</p>
<p>&gt; Why does McAfee virus scan have 2.5 million page faults after using 13 minutes of CPU time? </p>
<p>Note that page faults don&#8217;t necessarily mean paging (reading stuff from disk). In this case I suspect that most of the page faults are soft (resolved from memory).
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-235983">
				<div id="div-comment-235983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Torr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-235983">
			December 21, 2004 at 3:06 am</a>		</div>

		<p>memcpy_s is new for VS 2005 and it requires you to pass a size for both the source and destination buffers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-236313">
				<div id="div-comment-236313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George Bailey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-236313">
			December 21, 2004 at 4:37 pm</a>		</div>

		<p>In keeping with the spirit, I am actually retyping this message each time someone loads this page.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-236323">
				<div id="div-comment-236323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexey Kats</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-236323">
			December 21, 2004 at 5:03 pm</a>		</div>

		<p>Well, you must have had very quick fingers and very short memory in order to make it efficient (as opposed to not doing it). Just kidding&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-236673">
				<div id="div-comment-236673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Candy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-236673">
			December 22, 2004 at 2:53 pm</a>		</div>

		<p>Some of us are trained to not use global variables. That&#8217;s THE reason not to store it. Paging is irrelevent. I have no objection to storing it in a local variable, which then makes it a decision between </p>
<p>a=something()<br />
<br />DoSomething(A).<br />
<br />DoSomethingElse(A)</p>
<p>or</p>
<p>DoSomething(Something())<br />
<br />DoSomethingElse(Something())</p>
<p>Which I prefer the first (for debugging purposes) but tend to do the second from lazyness. Then of course if there is a problem I then need to rewrite it out as #1.</p>
<p>Thankfully there is a registry so one can avoid global variables while still having them.</p>
<p>If speed becomes an issue I revert to global variables. Normally I pass variables as parameters.</p>
<p>What is interesting is how Windows stores it&#8217;s settings. Most are kept in memory but there are a few that are constantly reread fron the registry (many times a second).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-236793">
				<div id="div-comment-236793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexey Logachyov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-236793">
			December 23, 2004 at 2:25 am</a>		</div>

		<p>David Candy and Peter Torr, I think your examples are not in place. They are good for article on synchronization but not for this one. In multithreaded environment you might want to use synchronization primitives to access resources shared between threads. Peter, memcpy_s is an ill solution, because the root cause of your security hole is the lack of synchronization.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-374633">
				<div id="div-comment-374633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/04/28/586018.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-374633">
			April 28, 2006 at 10:32 am</a>		</div>

		<p>It saves the bits covered by a window. The real question is why.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-457083">
				<div id="div-comment-457083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.nynaeve.net/?p=104' rel='external nofollow' class='url'>Nynaeve &raquo; Blog Archive &raquo; Think before you optimize</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041220-00/?p=36943#comment-457083">
			December 29, 2006 at 12:45 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.nynaeve.net/?p=104" rel="nofollow">http://www.nynaeve.net/?p=104</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

