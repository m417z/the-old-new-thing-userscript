<html>
<head>
<title>What does the COINIT_SPEED_OVER_MEMORY flag to CoInitializeEx do?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What does the COINIT_SPEED_OVER_MEMORY flag to CoInitializeEx do?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 8, 2012 / year-entry #261</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the flags you can pass to Co­Initialize­Ex is COINIT_SPEED_OVER_MEMORY, which is documented as COINIT_SPEED_OVER_MEMORY: Trade memory for speed. This documentation is already vague since it doesn't say which direction the trade is being made. Are you reducing memory to increase speed, or increasing memory by reducing speed? Actually it's neither: If you pass...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>One of the flags you can pass to <code>Co&shy;Initialize&shy;Ex</code> is <code>COINIT_<wbr>SPEED_<wbr>OVER_<wbr>MEMORY</wbr></wbr></wbr></code>, which is <a href="http://msdn.microsoft.com/en-us/library/ms678505(v=VS.85).aspx"> documented as</a></p>
<blockquote class="q"><p> <code>COINIT_<wbr>SPEED_<wbr>OVER_<wbr>MEMORY</wbr></wbr></wbr></code>: Trade memory for speed. </p>
</blockquote>
<p> This documentation is already vague since it doesn't say which direction the trade is being made. Are you reducing memory to increase speed, or increasing memory by reducing speed? Actually it's neither: If you pass this flag, then you are instructing COM to <i>consume more memory in an attempt to reduce CPU usage</i>, under the assumption that you run faster by executing fewer cycles.&sup1; </p>
<p> The request is a per-process one-way transition. Once anybody anywhere in the process puts COM into speed-over-memory mode, the flag stays set and remains set until the process exits. </p>
<p> When should you enable this mode? <i>It doesn't matter</i>, because as far as I can tell, there is no code anywhere in COM that changes its behavior based on whether the process has been placed into this mode! It looks like the flag was added when DCOM was introduced, but it never got hooked up to anything. (Or whatever code that had been hooked up to it never shipped.) </p>
<p> &sup1; <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/20/327369.aspx"> As you know</a>, consuming more memory is not a guarantee that you will actually run faster, because higher memory usage increases the chances that what you need will take an L1 cache miss or a page fault, which will cost you dearly in wait time (though not in CPU usage). </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1019703">
				<div id="div-comment-1019703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019703">
			November 8, 2012 at 7:39 am</a>		</div>

		<p>Maybe it&#39;s a placebo.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes odd alt thread-odd thread-alt depth-1" id="comment-1019723">
				<div id="div-comment-1019723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019723">
			November 8, 2012 at 8:22 am</a>		</div>

		<p>I agree that &quot;Trade memory for speed&quot; is hardly descriptive. With SPEED_OVER_MEMORY within the flag, it seems pretty clear that speed is being favored. Unfortunately, it&#39;s much ado about nothing considering that the flag has no effects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019733">
				<div id="div-comment-1019733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019733">
			November 8, 2012 at 8:43 am</a>		</div>

		<p>Doesn&#39;t it mean &quot;if you don&#39;t remember what this option means, it&#39;ll take you a little longer to write the code for the call&quot; ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019743">
				<div id="div-comment-1019743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jas71_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jas71@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019743">
			November 8, 2012 at 9:20 am</a>		</div>

		<p>An L1 cache miss won&#39;t end your thread&#39;s timeslice &#8211; either the pipeline will stall for a few cycles while it waits for L2 cache or main memory to deliver the result, or it&#39;ll process a few instructions from the other thread if it&#39;s hyperthreaded. (Having L1 cache misses trigger scheduler activations would lead to all kinds of pain &#8211; particularly once the scheduler code itself, or the run queue, falls out of L1 cache.) Whether the wasted/lost core clock cycles count against your CPU usage depends how that&#39;s being tracked: the CPU timestamp counter&#39;s behaviour varies between revisions; the number of periodic timer interrupts firing during your timeslice will be increased by L1 cache misses, since from a kernel perspective you&#39;re still scheduled on that core during the memory fetch.</p>
<p>If it cached, say, the results of a registry lookup, they may have discovered the &quot;cached&quot; results weren&#39;t usefully faster than just fetching from the Registry in the first place. There are more than a few &quot;optimisations&quot; out there which really slow things down in reality&#8230;</p>
<p>Could anything you access via COM read whether this flag is set? I could imagine their use case involving other code rather than COM itself taking account of the setting &#8211; or data transfer: using a megabyte buffer instead of transferring a page at a time, for example &#8211; and with bigger memory sizes these days, the context-switching cost may have dwarfed the benefits of saving a megabyte of RAM, so the latter option could then have been dropped.</p>
<p>Reading the older article reminded me of some profiling on web servers; under heavy load, generating the timestamp string sent in the reply was accounting for non-trivial time in itself, so that server was changed to update a shared date string no more than once per second. With thousands of requests per second, caching that 28 character string (and the associated system call to retrieve the current time) made a difference in itself.</p>
<div class="post">[<em>The remark about CPU usage had to do with the page fault case. When a thread takes a page fault, the thread is unscheduled while waiting for the page to come off the disk. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1019753">
				<div id="div-comment-1019753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019753">
			November 8, 2012 at 9:26 am</a>		</div>

		<p>@dave:</p>
<p>Raymond owes you a star.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019763">
				<div id="div-comment-1019763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019763">
			November 8, 2012 at 9:28 am</a>		</div>

		<p>Please excuse my ignorance about comment formatting.</p>
<p>I intended to say that this flag is ignored, according to this archived message:</p>
<p><a rel="nofollow" target="_new" href="http://archives.neohapsis.com/archives/microsoft/various/dcom/2001-q1/0160.html" rel="nofollow">archives.neohapsis.com/&#8230;/0160.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1019773">
				<div id="div-comment-1019773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019773">
			November 8, 2012 at 9:56 am</a>		</div>

		<p>I read &quot;speed over memory&quot; as follows:</p>
<p>There are two ground rules for programming.</p>
<ol>
<li>Code that runs faster is better than code that runs slower.</li>
<li>
<p>Code that consumes less memory is better than code that consumes more memory.</p>
</li>
</ol>
<p>&quot;Speed over memory&quot; implies that rule 1) is more important than rule 2).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019783">
				<div id="div-comment-1019783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019783">
			November 8, 2012 at 1:55 pm</a>		</div>

		<p>@Maurits:</p>
<p>There&#39;s an additional rule:</p>
<ol>
<li>Code that is smaller is better.</li>
</ol>
<p>As far as I can see, all three rules help and hinder each other, interacting often quite surprisingly and counter-intuitive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019793">
				<div id="div-comment-1019793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JustSomeGuy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019793">
			November 8, 2012 at 2:55 pm</a>		</div>

		<p>0) Code that runs correctly is better than code that runs fast &#8211; there&#39;s nothing more un-optimised than &#39;wrong&#39; :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019803">
				<div id="div-comment-1019803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JustSomeGuy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019803">
			November 8, 2012 at 2:57 pm</a>		</div>

		<p>See also <a rel="nofollow" target="_new" href="http://stackoverflow.com/questions/80160/what-does-coinit-speed-over-memory-do/80189#80189" rel="nofollow">stackoverflow.com/&#8230;/80189</a> for a (now updated) answer to this question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019713">
				<div id="div-comment-1019713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019713">
			November 8, 2012 at 8:15 am</a>		</div>

		<p>It&#39;s <a href=http://archives.neohapsis.com/archives/microsoft/various/dcom/2001-q1/0160.html rel="nofollow">http://archives.neohapsis.com/archives/microsoft/various/dcom/2001-q1/0160.html</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1019813">
				<div id="div-comment-1019813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019813">
			November 8, 2012 at 6:59 pm</a>		</div>

		<p>@JustSomeGuy: If you count that in, I think you&#39;ve omitted a more important rule.</p>
<p>-1) Code that never runs is fastest. &#8211; Stop inserting garbage in your code.</p>
<p>Unintentional violation of this rule often occurs in multithread programming, where someone use locking struct in code block that would never introduce race condition, and use a value type variable to lock instead of reference type.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019823">
				<div id="div-comment-1019823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">caf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019823">
			November 8, 2012 at 7:44 pm</a>		</div>

		<p>So COINT_SPEED_OVER_MEMORY works exactly like the &quot;Door Close&quot; button in an elevator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019833">
				<div id="div-comment-1019833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pinwing</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019833">
			November 9, 2012 at 6:41 am</a>		</div>

		<p>The MSDN page must have been updated, because currently it documents COINIT_SPEED_OVER_MEMORY as follows: &quot;Increase memory usage in an attempt to increase performance.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019853">
				<div id="div-comment-1019853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019853">
			November 9, 2012 at 7:09 am</a>		</div>

		<p>@caf: I&#39;ve actually been in a few elevators where the &quot;Door Close&quot; button actually makes the doors close. Sure, in most, the button does nothing. But in these few, the button reduces the door-open-delay from several seconds to one or two or immediately starts closing the doors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019883">
				<div id="div-comment-1019883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019883">
			November 9, 2012 at 10:27 am</a>		</div>

		<p>As far as I can tell, one possible use for this flag could be to keep factories referenced/locked between COM calls, possibly releasing after some time without usage (and at the next COM call). This could be particularly useful to let the programmer not have to grab a factory for himself to guarantee faster batch object creation.</p>
<p>However, this could have implications in the current application, in other applications and even in other computers, depending on where, how (e.g. CLSCTX) and which kind of COM objects you&#39;re creating/binding/loading/etc. That is, it would imply to try to be faster at the expense of the memory where the actual factory is instanced and all proxies between.</p>
<p>Generally, it could mean a set of caches for everything that needs to be looked up, but that may be assumed to be constant for a brief period (exercise: define brief).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019983">
				<div id="div-comment-1019983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jolyon.smith_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>jolyon.smith@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1019983">
			November 11, 2012 at 3:57 pm</a>		</div>

		<p>@pinwing&#8230; if that quote is accurate then it is hilariously inaccurate documentation. &nbsp;If it were accurate then simply adding a few arbitrary calls to AllocMem() would improve the performance of my code. &nbsp;;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1020003">
				<div id="div-comment-1020003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JustSomeGuy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1020003">
			November 11, 2012 at 11:34 pm</a>		</div>

		<p>You&#39;ll find those door close buttons start doing something real when the building alarms (eg, fire) have been activated. It&#39;s a building code violation in many jurisdictions for them to do nothing at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1020463">
				<div id="div-comment-1020463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1020463">
			November 13, 2012 at 8:07 am</a>		</div>

		<p>@Jolyon Smith: A call to AllocMem may in fact increase your performance because other cpu-competing processes may die in an out-of-memory crash.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1020473">
				<div id="div-comment-1020473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121108-00/?p=6143#comment-1020473">
			November 13, 2012 at 8:10 am</a>		</div>

		<p>@JustSomeGuy: The door close button usually reboots the micro processor which controls the door. That&#39;s why there&#39;s no immediate noticeable action. It&#39;s a RESET BUTTON.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

