<html>
<head>
<title>Applying a permutation to a vector, part 6</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Applying a permutation to a vector, part 6</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 11, 2017 / year-entry #8</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170111-00/?p=95165</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>1</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Completing an earlier exercise: The reverse permutation.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I left an exercise to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170104-00/?p=95115">
write a function <code>apply_reverse_permutation</code></a>
in which each element in the <code>indices</code> represents where the
element should move <i>to</i> rather than where it comes <i>from</i>.
</p>
<p>
This exercise is easier than the forward permutation case&sup1;
because we can maintain a very simple invariant:
At all times, the state of the input variables
describe the same result.
All we do is take a step closer to that result
at each swap.
</p>
<pre>
template&lt;typename Iter1, typename Iter2&gt;
void
apply_reverse_permutation(
    Iter1 first,
    Iter1 last,
    Iter2 indices)
{
 using std::swap;
 using T = typename std::iterator_traits&lt;Iter1&gt;::value_type;
 using Diff = typename std::iterator_traits&lt;Iter2&gt;::value_type;
 Diff length = std::distance(first, last);
 for (Diff i = 0; i &lt; length; i++) {
  while (i != indices[i]) {
   Diff next = indices[i];
   swap(first[i], first[next]);
   swap(indices[i], indices[next]);
  }
 }
}
</pre>
<p>
The idea here is that we have a "working position" that starts
at the beginning of the collection.
We study the element in the working position and move it
to its final destination by swapping it with whatever happens
to there right now.
We also swap the bookkeeping so that we also remember where
that swapped element needs to go eventually.
As a result of the swap, you now have a new element in the
working position.
Repeat as long as element in the working position
is not in the correct position.
If you have a proper permutation, then eventually you will
reach the end of the cycle and the element in the working
position is one that wants to be there.
You can now move the working position to the next position
until you have moved through the entire collection.
</p>
<p>
The complexity of this algorithm is <var>O</var>(<var>N</var>)
because each swap operation moves one element to its final
destination,
and no element appears on the left hand side of a swap operation
more than once.
(An element may end up swapping at most twice.
Once when it swaps out of its old position into the working position,
and again when it swaps out of the working position to its final
position.)
</p>
<p>
Fans of tail recursion can rewrite this function tail-recursively,
which might be instructive.
(Or it might not. At least it'll be fun, if rewriting functions
to be tail-recursive is your idea of fun.)
</p>
<p>
As before, we can add error checking while preserving the same
useful exit conditions:
If an error occurs, the original collection and the indices are
permuted in an unspecified way.
</p>
<p>
As before,
there are two error cases.
One is that an index is out of range.
That's easy to check.
The other is that an index appears more than once.
This could be detected in a number of ways.
One way is to detect that we have swapped more than
<code>length</code> items through the working position,
because the length of a cycle in a permutation
cannot exceed the number
of elements.
But I'm going to use the same technique we used for the
forward permutation:
When we realize that we are about to swap an element that
has already been swapped into position.
In other words, if the element at the destination already
thinks that it's at the correct destination,
then we have an error because
two elements both want to go to the same
destination.</p>
<pre>
template&lt;typename Iter1, typename Iter2&gt;
void
apply_reverse_permutation(
    Iter1 first,
    Iter1 last,
    Iter2 indices)
{
 using T = typename std::iterator_traits&lt;Iter1&gt;::value_type;
 using Diff = typename std::iterator_traits&lt;Iter2&gt;::value_type;
 Diff length = std::distance(first, last);
 for (Diff i = 0; i &lt; length; i++) {
  while (i != indices[i]) {
   Diff next = indices[i];
   <font COLOR="blue">if (next &lt; 0 || next &gt;= length) {
    throw std::range_error("Invalid index in permutation");
   }
   if (next == indices[next]) {
    throw std::range_error("Not a permutation");
   }</font>
   swap(first[i], first[next]);
   swap(indices[i], indices[next]);
  }
 }
}
</pre>
<p>
&sup1;
This is different from the forward permutation, where
the work of rotating the elements through a cycle leaves
the inputs in a temporarily unstable state.
We saw last time that before we could report an error,
we had to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170110-00/?p=95155">
restore some state before reporting an error</a>,
and that state that we restored didn't even correspond
meaningfully to the intermediate state.
It merely corresponded to the original state in a very weakly-specified way.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (1)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1279656">
				<div id="div-comment-1279656" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170111-00/?p=95165#comment-1279656">
			January 12, 2017 at 2:38 am</a>		</div>

		<p>As I recall, if you apply the reverse permutation to the null permutation then you get the same result as if you grade up the original permutation. (Grade up works on things other than permutations of course.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

