<html>
<head>
<title>How do I get the user-customed name of My Computer or Recycle Bin?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I get the user-customed name of My Computer or Recycle Bin?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 12, 2015 / year-entry #214</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program displays the user-customized name of This PC (the folder formerly known as My Computer) or Recycle Bin. The basic principle here is that if you want to display something the same way that Explorer does, then ask the same data source that Explorer asks: The shell namespace. Today's smart pointer library is...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program displays the user-customized name of
This PC (the folder formerly known as My Computer)
or Recycle Bin.
The basic principle here is that if you want to display something
the same way that Explorer does, then ask the same data source
that Explorer asks: The shell namespace.
</p>
<p>
Today's smart pointer library is (rolls dice) <i>nothing</i>.
We're going to use raw pointers.
</p>
<p>
Remember, Little Programs do little to no error checking.
</p>
<pre>
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/24/10387757.aspx">STRICT_TYPED_ITEMIDS</a>
#define UNICODE
#define _UNICODE
#include &lt;windows.h&gt;
#include &lt;ole2.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;stdio.h&gt;

void PrintDisplayName(IShellItem* item, SIGDN sigdn, PCWSTR label)
{
  PWSTR name;
  item-&gt;GetDisplayName(sigdn, &amp;name);
  printf("%ls = %ls\n", label, name);
  CoTaskMemFree(name);
}

void PrintKnownFolderDisplayName(
    REFKNOWNFOLDERID rfid, SIGDN sigdn, PCWSTR label)
{
  IShellItem* item;
  SHGetKnownFolderItem(rfid, KF_FLAG_DONT_VERIFY,
                       nullptr, IID_PPV_ARGS(&amp;item));
  PrintDisplayName(item, sigdn, label);
  item-&gt;Release();
}

int __cdecl wmain(int argc, wchar_t **argv)
{
  CoInitialize(0);
  PrintKnownFolderDisplayName(FOLDERID_ComputerFolder,
    SIGDN_NORMALDISPLAY, L"name");
  PrintKnownFolderDisplayName(FOLDERID_RecycleBinFolder,
    SIGDN_NORMALDISPLAY, L"name");
  CoUninitialize();
  return 0;
}
</pre>
<p>
The <code>Print&shy;Display&shy;Name</code> function
obtains the display name of a shell item and prints it.
The <code>Print&shy;Known&shy;Folder&shy;Display&shy;Name</code> function
gets the item for a known folder and prints its display name.
And our main program grabs the This PC and Recycle Bin folders
and prints their display names.
</p>
<p>
Really not that complicated.
</p>
<p>
If you are old-school and prefer to work with shell folders and
item ID lists, you can do it the old school way:
</p>
<pre>
#define <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/24/10387757.aspx">STRICT_TYPED_ITEMIDS</a>
#define UNICODE
#define _UNICODE
#include &lt;windows.h&gt;
#include &lt;ole2.h&gt;
#include &lt;oleauto.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;shlwapi.h&gt;
#include &lt;stdio.h&gt;
#include &lt;tchar.h&gt;

void PrintDisplayName(PCIDLIST_ABSOLUTE absolute, SHGDNF shgdn, PCWSTR label)
{
  IShellFolder* parentFolder;
  PCUITEMID_CHILD child;
  SHBindToParent(absolute, IID_PPV_ARGS(&amp;parentFolder), &amp;child);
  <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/08/30/10202076.aspx">PrintDisplayName</a>(parentFolder, child, shgdn, label);
  parentFolder->Release();
}

void PrintCsidlDisplayName(int csidl, SHGDNF shgdn, PCWSTR label)
{
  PIDLIST_ABSOLUTE absolute;
  SHGetFolderLocation(nullptr, csidl, nullptr, 0, &amp;absolute);
  PrintDisplayName(absolute, shgdn, label);
  CoTaskMemFree(absolute);
}

int __cdecl wmain(int argc, wchar_t **argv)
{
  CoInitialize(0);
  PrintCsidlDisplayName(CSIDL_DRIVES, SHGDN_NORMAL, L"name");
  PrintCsidlDisplayName(CSIDL_BITBUCKET, SHGDN_NORMAL, L"name");
  CoUninitialize();
  return 0;
}
</pre>
<p>
The idea is the same:
We bind to the special folder and print its name.
Getting the name of an object is done by asking the parent
for the name of the child.
</p>
<p>
Okay, this isn't all that exciting,
but it still shows that the way to get the name of something
the way Explorer shows it
is to get the name the way Explorer gets it.
</p>
<p>
I'll play with this a little more next week.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1198831">
				<div id="div-comment-1198831" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381#comment-1198831">
			October 12, 2015 at 7:10 am</a>		</div>

		<p>I&#39;m curious to know how many sides your smart pointer dice have and what all of the sides are.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198821">
				<div id="div-comment-1198821" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381#comment-1198821">
			October 12, 2015 at 7:10 am</a>		</div>

		<p>I wanna know where Raymond bought his d50.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1198811">
				<div id="div-comment-1198811" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381#comment-1198811">
			October 12, 2015 at 7:22 am</a>		</div>

		<p>Yay, more shell stuff, can&#39;t wait!</p>
<p>Slightly off topic but could you maybe encourage the MSDN folks to document what SIGDN_PARENTRELATIVEFORUI does and when it should be used&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198791">
				<div id="div-comment-1198791" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381#comment-1198791">
			October 12, 2015 at 7:57 pm</a>		</div>

		<p>I have a hunch that he&#39;s not actually using dice, he&#39;s just doing what he feels like and blaming it on the dice to emphasize that it&#39;s utterly beside the point he&#39;s trying to make. &nbsp;But I&#39;d be curious to find out there are real dice involved!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1198781">
				<div id="div-comment-1198781" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381#comment-1198781">
			October 12, 2015 at 8:40 pm</a>		</div>

		<p>@Joshua: I thought for pointer types, D20 is enough. D50 is going to have difficult moments to decide which side is &quot;up&quot; on uneven surface. (Or maybe that&#39;s how we get &quot;nothing&quot; as result?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198771">
				<div id="div-comment-1198771" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381#comment-1198771">
			October 12, 2015 at 9:33 pm</a>		</div>

		<p>From various searches I found:</p>
<p>* nothing</p>
<p>* _com_ptr_t</p>
<p>* CComPtr</p>
<p>* WRL</p>
<p>I thought I&#39;d also once seen auto_ptr come up in a dice roll, but I couldn&#39;t find any such article, so perhaps not.</p>
<p>I also found this comment on an earlier article:</p>
<p>&#8212;-</p>
<p>Nick </p>
<p>&gt; (rolls dice)</p>
<p>I really hope you keep a die on your desk that you actually roll for these.</p>
<p>[(Looks around nervously.) (whisper) The dice are loaded. -Raymond]</p>
<p>&#8212;-</p>
<p>I did notice _com_ptr_t coming up an awful lot in my searches :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1198751">
				<div id="div-comment-1198751" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381#comment-1198751">
			October 13, 2015 at 2:59 am</a>		</div>

		<p>@Scarlet: auto_ptr is deprecated, but perhaps std::unique_ptr or std::shared_ptr next?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1198671">
				<div id="div-comment-1198671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Kostromitinov</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151012-00/?p=91381#comment-1198671">
			October 13, 2015 at 8:58 am</a>		</div>

		<p>Raymond, thank you for all these how-to posts!</p>
<p>I have one small comment, though&#8230;</p>
<p>For any half-decent developer (and i count myself among those) a single word or two would be enough to provide an answer (IShellItem::GetDisplayName in this case).</p>
<p>Maybe you could highlight them, or even put them at the beginning?</p>
<p>It would make the much-needed answer seen immediately in Google search results, for example&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

