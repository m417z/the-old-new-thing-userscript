<html>
<head>
<title>Instead of trying to create a filter that includes everything, try just omitting the filter</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Instead of trying to create a filter that includes everything, try just omitting the filter</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 7, 2012 / year-entry #260</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The question was sent to a peer-to-peer discussion group for an internal program, let's call it Program Q. I'll add additional context so you can follow along. Hi, I'm trying to build a query that finds all issues owned by a particular user, regardless of which product the issue belongs to. I know that I...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The question was sent to a peer-to-peer discussion group for
an internal program,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/04/16/9551818.aspx">
let's call it Program Q</a>.
I'll add additional context so you can follow along.
</p>
<blockquote CLASS=q>
<p>
Hi, I'm trying to build a query that finds all issues owned by
a particular user, regardless of which product the issue belongs to.
I know that I can query for specific products by saying
</p>
<pre>
q select -owner bob -product LitWare
q select -owner bob -product Contoso
</pre>
<p>
Is there a better way to do this than just running the query
for every product in the database?
It would be great to find all the issues at one shot
instead of having to issue dozens of commands and combine the results.
</p>
</blockquote>
<p>
The person who submitted this question got so distracted by the
<code>-product</code> filter, that they forgot that they could
just omit the filter.
</p>
<pre>
q select -owner bob
</pre>
<p>
If you don't filter by product, then it finds everything
regardless of the product.
</p>
<p>
Enumerating all the products, then repeating the query for
each product is some sort of anti-pattern.
I don't know if it has a name, so I'll make one up.
The <i>long division</i> anti-pattern
performs an operation on a collection by arbitrarily breaking
the collection into groups,
then performing the operation on each member of each group,
all this even though the grouping is unrelated to the operation.
</p>
<p>
In C#, it would be phrased something like this:
</p>
<pre>
public void MakeUnavailable(string productId)
{
    var stores = Inventory.Select(p =&gt; p.Store).Distinct();

    foreach (var store in stores) {
        foreach (var product in
                 from p in Inventory
                 where p.Store == store &amp;&amp;
                       p.ProductId == productId) {
            product.Available = false;
        }
    }
}
</pre>
<p>
In words, we first dig through the inventory and collect
all the unique stores.
For each store, we go through the inventory again,
looking for products from that store,
and if the product is the one we want to make unavailable,
set the <code>Available</code> property to <code>false</code>.
(To avoid playing favorites,
I used both fluent and query expression syntax.)
</p>
<p>
Assuming the order in which the product is made unavailable
is not important
(and it doesn't appear to be, since we didn't sort the stores),
the grouping by store is superfluous.
You can just iterate across the entire inventory without regard
for store:
</p>
<pre>
public void MakeUnavailable(string productId)
{
    foreach (var product in
             from p in Inventory
             where p.ProductId == productId
             select p) {
        product.Available = false;
    }
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1019573">
				<div id="div-comment-1019573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Trevel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019573">
			November 7, 2012 at 7:53 am</a>		</div>

		<p>I have to admit that there are occasions where I&#39;ve done something like that &#8212; but only because the algorithm that I was told to run on the data was so poorly optimized (O(n^3) or so) that breaking it into related chunks was much faster than trying to do it all in one go. (Thank goodness I&#39;m no longer working there.)</p>
<p>I suspect the person in the first problem was attempting Copy and Paste Coding while not having a clue what the code actually did. I&#39;m sure it&#39;s the first time you&#39;ve ever seen anyone try that before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019593">
				<div id="div-comment-1019593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019593">
			November 7, 2012 at 8:16 am</a>		</div>

		<p>Not to be pedantic, but the two solutions aren&#39;t the same &#8212; the second one will mark products available in which &quot;Store&quot; is null, the first won&#39;t.</p>
<p>Just sayin&#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019603">
				<div id="div-comment-1019603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019603">
			November 7, 2012 at 8:17 am</a>		</div>

		<p>Okay, to be pedantic on myself, I meant &quot;mark products unavailable&quot;. Whoops :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019613">
				<div id="div-comment-1019613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019613">
			November 7, 2012 at 9:27 am</a>		</div>

		<p>The number one legitimate reason to do this is, as Trevel indicated, to have a natural splitting function for operations that take too much continuous time if performed in one go. You wouldn&#39;t expect to see this if no I/O is involved unless the algorithm is poor, but if I/O is involved (and especially if transaction logging a la SQL is involved) working in batches can be a better approach than doing everything at once.</p>
<p>Even then this is obviously a poor man&#39;s batching since you don&#39;t know how big the batches will be (what if there are 100,000 LitWare products and only 10 Contoso products?) but it can be simpler than implementing a generic mechanism that splits things in constant-sized batches.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019623">
				<div id="div-comment-1019623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Samir Talwar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019623">
			November 7, 2012 at 9:33 am</a>		</div>

		<p>This seems like a hand-rolled implementation of the &quot;n + 1&quot; problem. Which is impressive. Usually those just show up when using an ORM or similar.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019633">
				<div id="div-comment-1019633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Gardner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019633">
			November 7, 2012 at 10:11 am</a>		</div>

		<p>There&#39;s a similar version of this I&#39;ve seen many times, where given a Map / Dictionary, the person iterates over every entry, checking for equality to find a value given a key, instead of just using dictionary[key] or TryGetValue(key), or .get(x) or whatever that language has.</p>
<p>something like:</p>
<p>object value = null;</p>
<p>foreach( var entry in dictionary.Entries )</p>
<p>{</p>
<p>&nbsp; &nbsp;if (entry.Key == thing)</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; value = entry.value;</p>
<p>&nbsp; &nbsp; &nbsp; break;</p>
<p>&nbsp; &nbsp;}</p>
<p>}</p>
<div class="post">[<em>Ah, the <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/27/10251210.aspx" rel="nofollow">for/if anti-pattern</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019643">
				<div id="div-comment-1019643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019643">
			November 7, 2012 at 3:16 pm</a>		</div>

		<p>It&#39;s like the For/Case anti-pattern where all the cases do the same thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019653">
				<div id="div-comment-1019653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019653">
			November 7, 2012 at 4:25 pm</a>		</div>

		<p>[Ah, the for/if anti-pattern. -Raymond]</p>
<p>Way too easy to do in Linq. The obvious way of writing an if (.TryGetValue()) in Linq compiles to something like this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019663">
				<div id="div-comment-1019663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Luke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019663">
			November 7, 2012 at 9:35 pm</a>		</div>

		<p>As someone else said, this is the &quot;n + 1&quot; problem. Can be caused by people ignorant of how ORM&#39;s work, frequently caused by the repository pattern as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019673">
				<div id="div-comment-1019673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019673">
			November 8, 2012 at 2:25 am</a>		</div>

		<p>Not totally unrelated, but I once had a SQL statement that ran very slowly when the filter used a GROUP BY.</p>
<p>So I ended up querying the filter to give me a static list of containers to use in the original query.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1019683">
				<div id="div-comment-1019683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019683">
			November 8, 2012 at 5:17 am</a>		</div>

		<p>To play the Devil&#39;s advocate I&#39;ll say that usually a query on itself is pretty damn useless, most of the times is followed by a report. And if the report wants also the store as one of the columns you&#39;ll have to do it that way (or &quot;group by&quot; the store).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1019693">
				<div id="div-comment-1019693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave B</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20121107-00/?p=6153#comment-1019693">
			November 8, 2012 at 6:31 am</a>		</div>

		<p>Long division by 1: 57216 ÷ 1: 5 divided by 1 is 5, 5 &#8211; 5 leaves zero, bring down the 7, 7 divided by 1 is 7, remainder zero, bring down the 2&#8230; (much later) &#8230; 6 &#8211; 6 = 0, 57216 remainder zero!</p>
<p>&nbsp;57216 r0</p>
<p>&nbsp;_____</p>
<p>1)57216</p>
<p>-5</p>
<p>&#8212;</p>
<p>&nbsp; 7</p>
<p>&nbsp;-7</p>
<p>&nbsp;&#8212;</p>
<p>&nbsp; &nbsp;2</p>
<p>&nbsp; -2</p>
<p>&nbsp; &#8212;</p>
<p>&nbsp; &nbsp; 1</p>
<p>&nbsp; &nbsp;-1</p>
<p>&nbsp; &nbsp;&#8212;</p>
<p>&nbsp; &nbsp; &nbsp;6</p>
<p>&nbsp; &nbsp; -6</p>
<p>&nbsp; &nbsp; ==</p>
<p>Actually caught my daughter doing just that to divide a polynomial by x.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

