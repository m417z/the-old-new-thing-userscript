<html>
<head>
<title>How to host an IContextMenu, part 6 - Displaying menu help</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to host an IContextMenu, part 6 &#8211; Displaying menu help</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 28, 2004 / year-entry #351</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the subtleties of context menus is showing help in the status bar. Now, the program we've been developing doesn't have a status bar, so we'll fake it by putting the help text in the title bar. The key method for this task is IContextMenu::GetCommandString, which allows communication with a context menu handler about...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of the subtleties of context menus is showing help in the
status bar.  Now, the program we've been developing doesn't
have a status bar, so we'll fake it by putting the help text
in the title bar.
</p>
<p>
The key method for this task is
<a HREF="http://msdn.microsoft.com/library/en-us/shellcc/platform/shell/reference/ifaces/icontextmenu/getcommandstring.asp">
IContextMenu::GetCommandString</a>, which
allows communication with a context menu handler about the
verbs in the menu.
We'll have to stash yet another interface in our "instance variables
disguised as globals".
</p>
<pre>
<font COLOR=blue>IContextMenu *g_pcm;</font>
</pre>
<p>
(Remember, in a "real program", these would be per-window instance
variables, not globals.)
</p>
<p>
We also need to update that variable during menu tracking.
</p>
<pre>
      <font COLOR=blue>g_pcm = pcm;</font>
      int iCmd = TrackPopupMenuEx(hmenu, TPM_RETURNCMD, pt.x, pt.y, hwnd, NULL);
      <font COLOR=blue>g_pcm = NULL;</font>
</pre>
<p>
With that out of the way, we can now provide feedback as the
user browses the popup menu.
</p>
<p>
[Introduction of <code>g_pcm</code> variable added 29 September.]
</p>
<pre>
// This code is buggy - see below.
<font COLOR=blue>void OnMenuSelect(HWND hwnd, HMENU hmenu,
                  int item, HMENU hmenuPopup, UINT flags)
{
  if (g_pcm &amp;&amp; item &gt;= SCRATCH_QCM_FIRST &amp;&amp;
      item &lt;= SCRATCH_QCM_LAST) {
    TCHAR szBuf[MAX_PATH];
    if (FAILED(g_pcm-&gt;GetCommandString(item - SCRATCH_QCM_FIRST,
                                       GCS_HELPTEXT, NULL,
                                       (LPSTR)szBuf, MAX_PATH))) {
      lstrcpyn(szBuf, TEXT("No help available."), MAX_PATH);
    }
    SetWindowText(hwnd, szBuf);
  }
}</font>
</pre>
<p>
This function checks whether the menu selection is in
the range of items that we allowed the context menu to own.
If so, we ask for the help string (or use fallback text if
the context menu handler didn't provide a help string) and
display it as our window title.
</p>
<p>
Finally, we insert this function into our window procedure.
We want to update the menu selection status even if the
context menu handlers do something with it, so we need to
call OnMenuSelect before dispatching to the context menu handlers.
</p>
<pre>
LRESULT CALLBACK
WndProc(HWND hwnd, UINT uiMsg, WPARAM wParam, LPARAM lParam)
{
    <font COLOR=blue>if (uiMsg == WM_MENUSELECT) {
        HANDLE_WM_MENUSELECT(hwnd, wParam, lParam, OnMenuSelect);
    }</font>
    if (g_pcm3) {
...
</pre>
<p>
Wait a second, there was a comment up there that said that
the OnMenuSelect function is buggy.  Where's the bug?
</p>
<p>
Well, technically there is no bug, but if you run this program as-is
(and I suggest that you do),
you'll find that what you get is rather erratic.
</p>
<p>
That's because there are a lot of buggy context menu handlers
out there.
</p>
<p>
Some context menu handlers don't support Unicode; others don't
support Ansi.  What's really fun is that instead of returning
E_NOTIMPL, they return S_OK but don't actually do anything.
Other context menus have buffer overflow problems and write
to the buffer beyond the actual size you specified.
</p>
<p>
Welcome to the world of application compatibility.
</p>
<p>
Let's write a helper function that tries to hide all of these
weirdnesses.
</p>
<pre>
<font COLOR=blue>HRESULT IContextMenu_GetCommandString(
    IContextMenu *pcm, UINT_PTR idCmd, UINT uFlags,
    UINT *pwReserved, LPWSTR pszName, UINT cchMax)
{
  // Callers are expected to be using Unicode.
  if (!(uFlags &amp; GCS_UNICODE)) return E_INVALIDARG;

  // Some context menu handlers have off-by-one bugs and will
  // overflow the output buffer. Let's artificially reduce the
  // buffer size so a one-character overflow won't corrupt memory.
  if (cchMax &lt;= 1) return E_FAIL;
  cchMax--;

  // First try the Unicode message.  Preset the output buffer
  // with a known value because some handlers return S_OK without
  // doing anything.
  pszName[0] = L'\0';

  HRESULT hr = pcm-&gt;GetCommandString(idCmd, uFlags, pwReserved,
                                     (LPSTR)pszName, cchMax);
  if (SUCCEEDED(hr) &amp;&amp; pszName[0] == L'\0') {
    // Rats, a buggy IContextMenu handler that returned success
    // even though it failed.
    hr = E_NOTIMPL;
  }

  if (FAILED(hr)) {
    // try again with ANSI - pad the buffer with one extra character
    // to compensate for context menu handlers that overflow by
    // one character.
    LPSTR pszAnsi = (LPSTR)LocalAlloc(LMEM_FIXED,
                                      (cchMax + 1) * sizeof(CHAR));
    if (pszAnsi) {
      pszAnsi[0] = '\0';
      hr = pcm-&gt;GetCommandString(idCmd, uFlags &amp; ~GCS_UNICODE,
                                  pwReserved, pszAnsi, cchMax);
      if (SUCCEEDED(hr) &amp;&amp; pszAnsi[0] == '\0') {
        // Rats, a buggy IContextMenu handler that returned success
        // even though it failed.
        hr = E_NOTIMPL;
      }
      if (SUCCEEDED(hr)) {
        if (MultiByteToWideChar(CP_ACP, 0, pszAnsi, -1,
                                pszName, cchMax) == 0) {
          hr = E_FAIL;
        }
      }
      LocalFree(pszAnsi);

    } else {
      hr = E_OUTOFMEMORY;
    }
  }
  return hr;
}</font>
</pre>
<p>
The shell has lots of strange functions like this.
</p>
<p>
[<code>pszAnsi</code> comparison fixed, 29 September.]
</p>
<p>
With this helper function, we can fix our help text function.
</p>
<pre>
void OnMenuSelect(HWND hwnd, HMENU hmenu,
                  int item, HMENU hmenuPopup, UINT flags)
{
  if (g_pcm &amp;&amp; item &gt;= SCRATCH_QCM_FIRST &amp;&amp;
      item &lt;= SCRATCH_QCM_LAST) {
    <font COLOR=blue>WCHAR</font> szBuf[MAX_PATH];
    if (FAILED(<font COLOR=blue>IContextMenu_GetCommandString(g_pcm,</font>
                                       item - SCRATCH_QCM_FIRST,
                                       <font COLOR=blue>GCS_HELPTEXTW</font>, NULL,
                                       <font COLOR=blue>szBuf</font>, MAX_PATH))) {
      <font COLOR=blue>lstrcpynW</font>(szBuf, <font COLOR=blue>L</font>"No help available.", MAX_PATH);
    }
    <font COLOR=blue>SetWindowTextW</font>(hwnd, szBuf);
  }
}</font>
</pre>
<p>
This new version displays help texts for all the context menu
handlers that support it, in spite of the attempts of many
of those context menu handlers to get it wrong or even
create a buffer overflow security vulnerability.
</p>
<p>
Okay, that was quite a long digression from
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/09/20/231739.aspx">
part 1 of this series</a>.
Let's return to the subject of invoking the default verb
<a href="http://blogs.msdn.com/oldnewthing/archive/2004/09/30/236133.aspx">
next time</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-214303">
				<div id="div-comment-214303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maxime LABELLE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214303">
			September 28, 2004 at 8:36 am</a>		</div>

		<p>Raymond,</p>
<p>Your series is absolutely fabulous and very informative. Your writing skills make it look like all you&#8217;re describing is easy, as in fact we  know it&#8217;s not that simple.</p>
<p>The thing is, this article is probably the first one that practically illustrates what can be thought of as your trademark ; namely the use of helper functions to circumvent bugs in other products.</p>
<p>Very informative, indeed.<br />
<br />Cheers.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-214313">
				<div id="div-comment-214313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerry Pisk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214313">
			September 28, 2004 at 9:06 am</a>		</div>

		<p>I&#8217;m just wondering &#8211; if you go to such lengths supporting third party applications that ignore the API rules, how do you expect your developers to actually follow them? It&#8217;s like teaching kids &#8211; if you keep excusing every time they screw up they won&#8217;t learn anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-214323">
				<div id="div-comment-214323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214323">
			September 28, 2004 at 9:10 am</a>		</div>

		<p>Would you rather have a buffer overflow inside Explorer that an attacker can exploit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-214333">
				<div id="div-comment-214333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214333">
			September 28, 2004 at 9:19 am</a>		</div>

		<p>&quot;The shell has lots of strange functions like this. &quot;</p>
<p>This may sound odd, but is there a way to turn off all of the application compatibility special case code during development? I&#8217;d rather not inadvertantly be depending on something that was put in for backwards compatibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-214343">
				<div id="div-comment-214343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox [MS]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214343">
			September 28, 2004 at 10:18 am</a>		</div>

		<p>You can use the AppVerifier (<a target="_new" href="http://www.microsoft.com/technet/prodtechnol/winxppro/deploy/appvrfr.mspx" rel="nofollow">http://www.microsoft.com/technet/prodtechnol/winxppro/deploy/appvrfr.mspx</a>) to help you identify some problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-214373">
				<div id="div-comment-214373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214373">
			September 28, 2004 at 10:48 am</a>		</div>

		<p>Jerry &#8211; Raymond is implying that there are a lot of legacy context menu handlers that overflow by one character.  If an attacker can get explorer to load his context menu handler, he is not going to try to overrun the buffer.  He has code running on the box, and your machine is suddenly sending spam and your documents are being uploaded to an FTP server in the other hemisphere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-214363">
				<div id="div-comment-214363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jerry Pisk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214363">
			September 28, 2004 at 10:51 am</a>		</div>

		<p>I still have a buffer overflow in Explorer that an attacker can exploit, all he/she needs to is overflow by more than one character. By implementing this &quot;fix&quot; you&#8217;ve just hidden the problem from all developers, including those that would fix their code if they knew it wasn&#8217;t working.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-214383">
				<div id="div-comment-214383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.milbertus.com' rel='external nofollow' class='url'>Andy</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214383">
			September 28, 2004 at 2:20 pm</a>		</div>

		<p>I&#8217;ve been &quot;playing along at home&quot;, and modifying the scratch program with the code that you post each day. I think there might be a problem with today&#8217;s code, though &#8211; where is g_pcm defined? I assume that&#8217;s defined similar to how g_pcm2 and g_pcm3 were defined yesterday, and modified OnContextMenu() to use the global instead of the local. That seems to work &#8211; is that what you intended?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-214393">
				<div id="div-comment-214393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214393">
			September 28, 2004 at 3:45 pm</a>		</div>

		<p>Using security as the example was a bad idea, but separately it seems to me that there are only three options:<br />
<br />1) Pass in an exact-length buffer and never do otherwise&#8230; after all, programmers should write bug-free software! Break ImportantBusinessApp v0.9 in the next upgrade.<br />
<br />2) Pass in an exact-length buffer and then test and fix it in the next release, when suddenly it matters due to other changes in the caller.<br />
<br />3) Pass in a larger buffer to start with. Sometimes, life&#8217;s a bore.</p>
<p>I guess there&#8217;s also option four: pass in a larger buffer to start with, attempt to check for the mistake, and do something obvious to coax the programmer into fixing his code. I&#8217;m not sure how well this works when the shell is acting as a client to a COM component, and control has left the COM component before the problem can be detected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-214403">
				<div id="div-comment-214403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214403">
			September 28, 2004 at 4:10 pm</a>		</div>

		<p>Raymond, did you mean to compare the pszAnsi using L?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-214423">
				<div id="div-comment-214423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-214423">
			September 29, 2004 at 3:49 am</a>		</div>

		<p>SQL Server has a bunch of bugs in its ODBC driver where it interprets a length that the ODBC documentation says is a number of bytes as a number of characters. This doesn&#8217;t work very well when you call the Unicode versions of the affected functions &#8211; it results in spectacular buffer overflows. So instead of allocating a double-length buffer in Unicode builds I have to allocate a quadruple-length buffer and say it&#8217;s only double-length. I can pass on the details if it&#8217;ll help.</p>
<p>Also MLang&#8217;s Conversion class has some small buffer overflow bugs.</p>
<p>I can pass details to anyone at Microsoft who can actually do something about these rather than telling me the workarounds I already figured out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-216493">
				<div id="div-comment-216493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://notgartner.com/posts/744.aspx' rel='external nofollow' class='url'>notgartner.com: Mitch Denny's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-216493">
			October 13, 2004 at 9:29 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-357803">
				<div id="div-comment-357803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.ailight.jp/blog/sha256/archive/2006/03/23/11241.aspx' rel='external nofollow' class='url'>社本＠ワック Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-357803">
			March 22, 2006 at 1:33 pm</a>		</div>

		<p>IContextMenu のホスト方法 &#8211; Shell</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-389153">
				<div id="div-comment-389153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/06/08/622194.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040928-00/?p=37723#comment-389153">
			June 8, 2006 at 10:00 am</a>		</div>

		<p>It doesn&#8217;t really help much.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

