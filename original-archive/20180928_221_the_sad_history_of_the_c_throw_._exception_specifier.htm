<html>
<head>
<title>The sad history of the C++ throw(...) exception specifier</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The sad history of the C++ <CODE>throw(&#8230;)</CODE> exception specifier</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 28, 2018 / year-entry #221</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I promise not to throw, but who's going to check?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
When exceptions were introduced into the C++ language,
a corresponding <code>throw(...)</code> dynamic exception
specifier was introduced which annotated which exceptions
could be throw by a function.
</p>
<pre>
// this function might throw an integer or a pointer to char,
// but nothing else.
void foo() throw(int, char*);
</pre>
<p>
This has made a lot of people very angry
and
<a HREF="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/p0003r0.html#2.0">
has been widely regarded as a bad move</a>.
</p>
<p>
According to the C++98 standard,
if a function throws an exception not listed among
the types specified in its dynamic exception specifier,
the system called the <code>std::unexpected()</code> function,
and the default behavior of <code>std::unexpected()</code> is
to terminate the program by calling <code>std::terminate()</code>.
As a special case, <code>throw()</code> means that the
function shouldn't throw any exceptions at all.
</p>
<p>
By C++11, the <code>throw(...)</code> dynamic exception
specifier was deprecated,
and in C++17, all support for dynamic exception specifiers
was removed save for the
special case of <code>throw()</code>.
At the same time, they changed the penalty for throwing an exception
when you said you wouldn't:
the runtime calls <code>std::terminate()</code>
directly, rather than passing through
<code>std::unexpected()</code>.
</p>
<p>
But of course the Microsoft C++ compiler
<a HREF="https://docs.microsoft.com/en-us/cpp/cpp/exception-specifications-throw-cpp">
has to do things
a little bit differently</a>.
</p>
<table BORDER=1 CLASS="cp3" CELLPADDING=3 CELLSPACING=0
    STYLE="border-collapse: collapse">
<tr>
<th COLSPAN=2 ROWSPAN=2>Specifier<br>
                  C++14 and earlier</th>
<th COLSPAN=3>Disallowed exception thrown</th>
</tr>
<tr>
<th>Standard behavior</th>
<th>Microsoft behavior</th>
</tr>
<tr>
<td ROWSPAN=2 STYLE="vertical-align: middle">
        <span STYLE="writing-mode: vertical-lr; -ms-writing-mode: tb-rl; transform: rotate(180deg);">Nonthrowing</span></td>
<td><code>noexcept</code><br>
        <code>noexcept(true)</code></td>
<td><code>std::</code><code>unexpected</code></td>
<td><code>std::</code><code>unexpected</code></td>
</tr>
<tr>
<td><code>throw()</code><br></td>
<td><code>std::</code><code>unexpected</code></td>
<td>undefined behavior&nbsp;<span STYLE="color: red">&lArr;</span></td>
</tr>
<tr>
<td ROWSPAN=2 STYLE="vertical-align: middle">
        <span STYLE="writing-mode: vertical-lr; -ms-writing-mode: tb-rl; transform: rotate(180deg);">Throwing</span></td>
<td><code>noexcept(false)</code></td>
<td>exception propagates</td>
<td>exception propagates</td>
</tr>
<tr>
<td><code>throw(something)</code></td>
<td><code>std::</code><code>unexpected</code></td>
<td>exception propagates&nbsp;<span STYLE="color: red">&lArr;</span></td>
</tr>
</table>
<p>
The Microsoft C++ compiler treats the
<code>throw(...)</code> exception specifier
as a promise on the part of the programmer,
but there is no enforcement.
It trusts you to adhere to your self-imposed contract.
If an exception is thrown when the function promised that no
exceptions would be thrown,
the behavior is undefined.
If the function said that some exceptions could be thrown,
the compiler doesn't validate that the actual thrown exception
is allowed; it just propagates the exception.
</p>
<p>
In practice, what happened is that the compiler performed optimizations
on the assumption that no disallowed exception would be thrown.
The most common such optimization is
that the compiler won't bother registering unwind codes
for things that it "knows" will never require unwinding
because there are no points where an exception could be thrown
prior to the object's destruction.
</p>
<pre>
void Example()
{
   ObjectWithDestructor obj;
   obj.stuff_that_does_not_throw();
   // destructor runs here
}
</pre>
<p>
If <code>stuff_</code><code>that_</code><code>does_</code><code>not_</code><code>throw</code>
is marked as non-throwing, then the compiler
can avoid having to register <code>obj</code> for unwinding
during exception propagation,
since you promised that
no exception could escape.
</p>
<p>
And then you throw an exception and invalidate all those
optimizations.
The most common visible effect of this is that
an exception propagated out of a function that should
never have let an exception escape,
and some object destructors failed to run.
</p>
<p>
But wait, all is not lost.
</p>
<p>
If you enable <code>/std:c++17</code>,
then the Microsoft C++ compiler will implement
the standard behavior for <code>throw(...)</code>.
</p>
<table BORDER=1 CLASS="cp3" CELLPADDING=3 CELLSPACING=0
    STYLE="border-collapse: collapse">
<tr>
<th COLSPAN=2 ROWSPAN=2>Specifier<br>
                  C++17</th>
<th COLSPAN=2>Disallowed exception thrown</th>
</tr>
<tr>
<th>Standard behavior</th>
<th>Microsoft behavior<br>with <code>/std:c++17</code></th>
</tr>
<tr>
<td ROWSPAN=2 STYLE="vertical-align: middle">
        <span STYLE="writing-mode: vertical-lr; -ms-writing-mode: tb-rl; transform: rotate(180deg);">Nonthrowing</span></td>
<td><code>noexcept</code><br>
        <code>noexcept(true)</code></td>
<td><code>std::</code><code>terminate</code></td>
<td><code>std::</code><code>terminate</code></td>
</tr>
<tr>
<td><code>throw()</code><br></td>
<td><code>std::</code><code>terminate</code></td>
<td><code>std::</code><code>terminate</code></td>
</tr>
<tr>
<td ROWSPAN=2 STYLE="vertical-align: middle">
        <span STYLE="writing-mode: vertical-lr; -ms-writing-mode: tb-rl; transform: rotate(180deg);">Throwing</span></td>
<td><code>noexcept(false)</code></td>
<td>exception propagates</td>
<td>exception propagates</td>
</tr>
<tr>
<td><code>throw(something)</code></td>
<td>not supported</td>
<td>not supported</td>
</tr>
</table>
<p>
Yes, it took a long time to get there,
but better late than never.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1363905">
				<div id="div-comment-1363905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MarcK4096</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1363905">
			September 28, 2018 at 7:34 am</a>		</div>

		<p>I love exceptions in C#.  But, I never really got into them in C++ since most of my code was dealing with legacy C APIs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1363935">
				<div id="div-comment-1363935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1363935">
			September 28, 2018 at 8:32 am</a>		</div>

		<p>The &#8220;I can omit unwind code&#8221; optimization is the only reason that I care about &#8220;throw()&#8221; at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1363945">
				<div id="div-comment-1363945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Guteniev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1363945">
			September 28, 2018 at 9:02 am</a>		</div>

		<p>Standard behavior was there all along, even before C++11.<br />
But it was available only by using undocumented compiler switch  /d1Esrt</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1363955">
				<div id="div-comment-1363955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mantas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1363955">
			September 28, 2018 at 9:02 am</a>		</div>

		<p>You could say the MS compiler&#8217;s behavior is std::unexpected.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-acidhelm even thread-even depth-1 parent" id="comment-1363965">
				<div id="div-comment-1363965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Michael+Dunn_' rel='external nofollow' class='url'>Michael Dunn_</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1363965">
			September 28, 2018 at 9:12 am</a>		</div>

		<p>I see that Hitchhiker&#8217;s reference. :)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1363985">
				<div id="div-comment-1363985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://timothybyrd.com' rel='external nofollow' class='url'>Timothy Byrd</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1363985">
			September 28, 2018 at 10:22 am</a>		</div>

		<p>Raymond knows where his towel is.</p>
<p>In the linked document, it says: &#8220;It should also be noted that at least one widely distributed compiler has still not implemented this feature in 2015, and at least one vendor has expressed a desire to never implement the deprecated feature (while that vendor has implemented the noexcept form of exception specification). Code on that platform would not be adversely impacted by the proposed removal, and portable code must always have allowed for the idiosynracies of this platform.&#8221;</p>
<p>In hindsight, that doesn&#8217;t seems like such a bad move.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-odd thread-alt depth-1" id="comment-1363975">
				<div id="div-comment-1363975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1363975">
			September 28, 2018 at 10:07 am</a>		</div>

		<p>This is why (among many many reasons) I&#8217;ve been moving all my code on windows to /std:latest and /permissive-</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1363995">
				<div id="div-comment-1363995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith P.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1363995">
			September 28, 2018 at 10:39 am</a>		</div>

		<p>This used to be a big deal on a C++ project I worked on in the 2001 timeframe.  We compiled it to Windows, Unix (Solaris, I think), and HP-UX&#8230;.and we used throw specs religiously.  But, bad throw specs caused different problems on the different platforms.  I seem to recall Windows not crashing at all, but the Unixes would core dump silently and was a royal pain to debug.  I started to attempt to write a stack walker for fixing missing throw specs, but it was a bit out of my league at that time and in that language.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1364115">
				<div id="div-comment-1364115" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1364115">
			September 29, 2018 at 12:35 am</a>		</div>

		<p>The throw should have been working like in java&#8230; the compiler wouldn&#8217;t let you compile such a function rather making std terminate if you try to throw or some function saids to throw something that your function isn&#8217;t specifying&#8230; now the result is that people never knows what is going out.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1364235">
				<div id="div-comment-1364235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1364235">
			September 30, 2018 at 7:35 am</a>		</div>

		<p>It doesn&#8217;t work correctly in Java, and it won&#8217;t work correctly in C++ either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even depth-2 parent" id="comment-1364255">
				<div id="div-comment-1364255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1364255">
			September 30, 2018 at 10:49 am</a>		</div>

		<p>Checked exceptions in Java are another thing &#8220;has made a lot of people very angry and has been widely regarded as a bad move&#8221;, up to making people invent bizarre workarounds (SneakyThrows, anyone?) to fool them.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1364465">
				<div id="div-comment-1364465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Patrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1364465">
			October 1, 2018 at 8:02 am</a>		</div>

		<p>I recall that whole debate on Brad Abrams(?) blog back when .Net was still very young.  I was in the camp of liking enforced throw specs (but I also liked C++ pervasive &#8216;const&#8217; modifier, as annoying as it could be)&#8230;it&#8217;s not nearly as noisy as, say, Code Contracts.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1364805">
				<div id="div-comment-1364805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1364805">
			October 2, 2018 at 10:04 am</a>		</div>

		<p>Relevant article on why C# does not have checked exceptions: <a href="https://www.artima.com/intv/handcuffs.html" rel="nofollow">https://www.artima.com/intv/handcuffs.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1364925">
				<div id="div-comment-1364925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.honestillusion.com' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180928-00/?p=99855#comment-1364925">
			October 2, 2018 at 1:05 pm</a>		</div>

		<p>&gt; &gt; Martin <i> the compiler wouldn’t let you compile such a function </i></p>
<p>The reason that wouldn&#8217;t work (and the main reason the throw() spec exist at all), is the C run-time library.  1000s of function, all legally callable from C++, which <i>should</i> not be able to throw an exception.  Further, C function would know nothing about throw specifications, so there&#8217;s nothing in its signature/linkage about the throw spec.  The throw spec could only appear in a header file to be used only in C++ programs.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

