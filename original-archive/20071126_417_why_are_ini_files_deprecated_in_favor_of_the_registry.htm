<html>
<head>
<title>Why are INI files deprecated in favor of the registry?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why are INI files deprecated in favor of the registry?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 26, 2007 / year-entry #418</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>139</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Welcome, Slashdot readers. Remember, this Web site is for entertainment purposes only. Why are INI files deprecated in favor of the registry? There were many problems with INI files. INI files don't support Unicode. Even though there are Unicode functions of the private profile functions, they end up just writing ANSI text to the INI...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><i>Welcome, Slashdot readers. Remember,  this Web site is <a href="http://blogs.msdn.com/oldnewthing/archive/2007/08/10/4315707.aspx"> for entertainment purposes only</a>.</i></p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2006/02/22/536920.aspx#536935"> Why are INI files deprecated in favor of the registry</a>? There were many problems with INI files. </p>
<ul>
<li>INI files don't support Unicode.     Even though there are Unicode functions of the private profile     functions, they end up just writing ANSI text to the INI file.     (<a href="http://blogs.msdn.com/michkap/archive/2006/09/15/754992.aspx">There is a wacked out way you can create a Unicode INI file,     but you have to step outside the API in order to do it</a>.)     This wasn't an issue in 16-bit Windows since 16-bit Windows     didn't support Unicode either! </li>
<li>INI file security is not granular enough.     Since it's just a file, any permissions you set are at the file     level, not the key level.     You can't say, "Anybody can modify this section, but that     section can be modified only by administrators."     This wasn't an issue in 16-bit Windows since 16-bit Windows     didn't do security. </li>
<li>Multiple writers to an INI file can result in data loss.     Consider two threads that are trying to update an INI file.     If they are running simultaneously, you can get this: 
<table style="border: solid .75pt black">
<tr>
<th>Thread 1</th>
<th>Thread 2</th>
</tr>
<tr>
<td>Read INI file</td>
</tr>
<tr>
<td></td>
<td>Read INI file</td>
</tr>
<tr>
<td>Write INI file + X</td>
</tr>
<tr>
<td></td>
<td>Write INI file + Y</td>
</tr>
</table>
<p>     Notice that thread&nbsp;2's update to the INI file     accidentally deleted the change made by thread&nbsp;1.     This wasn't a problem in 16-bit Windows since 16-bit Windows     was co-operatively multi-tasked.     As long as you didn't yield the CPU between the read and the write,     you were safe because nobody else could run until you yielded. </li>
<li>INI files can suffer a denial of service.     A program can open an INI file in exclusive mode and lock     out everybody else.     This is bad if the INI file was being used to hold security information,     since it prevents anybody from seeing what those security settings are.     This was also a problem in 16-bit Windows,     but since there was no security in 16-bit Windows,     a program that wanted to launch a denial of service attack     on an INI file could just delete it! </li>
<li>INI files contain only strings.     If you wanted to store binary data, you had to encode it somehow     as a string. </li>
<li>Parsing an INI file is comparatively slow.     Each time you read or write a value in an INI file,     the file has to be loaded into memory and parsed.     If you write three strings to an INI file, that INI file     got loaded and parsed three times and got written out to disk     three times.     In 16-bit Windows, three consecutive INI file operations would     result in only one parse and one write, because the operating system     was co-operatively multi-tasked.     When you accessed an INI file, it was parsed into memory and cached.     The cache was flushed when you finally yielded CPU to another process. </li>
<li>Many programs open INI files and read them directly.     This means that the INI file format is locked and cannot     be extended.     Even if you wanted to add security to INI files, you can't.     What's more, many programs that parsed INI files were buggy,     so in practice you couldn't store a string longer than about     70 characters in an INI file or you'd cause some other program     to crash. </li>
<li>INI files are limited to 32KB in size. </li>
<li>The default location for INI files was the Windows directory!     This definitely was bad for Windows&nbsp;NT since only administrators     have write permission there. </li>
<li>INI files contain only two levels of structure.     An INI file consists of sections, and each section consists of     strings.     You can't put sections inside other sections. </li>
<li>[Added 9am] Central administration of INI files is difficult.     Since they can be anywhere in the system, a network administrator     can't write a script that asks, "Is everybody using the latest     version of Firefox?"     They also can't deploy scripts that say "Set everybody's Firefox     settings to XYZ and deny write access so they can't change them." </li>
</ul>
<p> The registry tried to address these concerns. You might argue whether these were valid concerns to begin with, but the Windows&nbsp;NT folks sure thought they were. </p>
<p> Commenter TC notes that <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#441276"> the pendulum has swung back to text configuration files, but this time, they're XML</a>. This reopens many of the problems that INI files had, but you have the major advantage that nobody <i>writes</i> to XML configuration files; they only read from them. XML configuration files are not used to store user settings; they just contain information about the program itself. Let's look at those issues again. </p>
<ul>
<li>XML files support Unicode. </li>
<li>XML file security is not granular enough.     But since the XML configuration file is read-only,     the primary objection is sidestepped.     (But if you want only administrators to have permission to read     specific parts of the XML, then you're in trouble.) </li>
<li>Since XML configuration files are read-only,     you don't have to worry about multiple writers. </li>
<li>XML configuration files files can suffer a denial of service.     You can still open them exclusively and lock out other processes. </li>
<li>XML files contain only strings.     If you want to store binary data, you have to encode it somehow. </li>
<li>Parsing an XML file is comparatively slow.     But since they're read-only, you can safely cache the parsed result,     so you only need to parse once. </li>
<li>Programs parse XML files manually, but the XML format is already     locked, so you couldn't extend it anyway even if you wanted to.     Hopefully, those programs use a standard-conforming XML parser     instead of rolling their own,     but I wouldn't be surprised if people wrote their own custom     XML parser that chokes on, say,     processing instructions or strings longer than 70 characters. </li>
<li>XML files do not have a size limit. </li>
<li>XML files do not have a default location. </li>
<li>XML files have complex structure.     Elements can contain other elements. </li>
</ul>
<p> XML manages to sidestep many of the problems that INI files have, but only if you promise only to read from them (and only if everybody agrees to use a standard-conforming parser), and if you don't require security granularity beyond the file level. Once you write to them, then a lot of the INI file problems return. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (139)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-570093">
				<div id="div-comment-570093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570093">
			November 26, 2007 at 10:42 am</a>		</div>

		<p>The granularity &quot;issue&quot; is sidestepped in a lot of cases by allowing XML files to refer to (or include) other files. &nbsp;XInclude is a decent way to do this, but there are other ways as well (e.g. .net&#8217;s .config files let you include other files using custom attributes on several elements). &nbsp;If you refer to a different file, that different file can have a different ACL on it.</p>
<p>Now, this is obviously bad if you want fourteen layers of XML elements with different ACLs at each layer. &nbsp;But that seems to be rare, at least; the most common usages seem to be where you have to store database connection strings and the like.</p>
<p>(Another solution is to encrypt sections of the file, e.g. with some of the XML security extensions. &nbsp;Make sure you&#8217;ll be able to decrypt them, though, and make sure you don&#8217;t use a hardcoded key. &nbsp;Using the current user&#8217;s (preferred) or the machine&#8217;s (less preferred, but the only option if you run as localsystem) crypto key is usually a much better idea.)</p>
<p>On a different point: Even if you did have to worry about multiple writers, can&#8217;t you just lock the file while doing the read-modify-write cycle? &nbsp;Yes, it&#8217;s worse for efficiency, but the registry has to do something similar anyway, I think, since hives are stored in files. &nbsp;Plus the registry code is in advapi32, which gets loaded into each process independently, so you don&#8217;t have a central service (or whatever) to arbitrate access.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570103">
				<div id="div-comment-570103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Psa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570103">
			November 26, 2007 at 10:52 am</a>		</div>

		<p>@BryanK: there is a central registry &quot;service&quot;; advapi32 is just an interface to the kernel registry functions. &nbsp;How would the security work otherwise?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570113">
				<div id="div-comment-570113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">egh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570113">
			November 26, 2007 at 10:58 am</a>		</div>

		<p>Isn&#8217;t another advantage of the registry is the ability to track changes and roll them back?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570123">
				<div id="div-comment-570123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570123">
			November 26, 2007 at 11:00 am</a>		</div>

		<p>I still really hate the registry and for two main reasons &#8211; abuse and cleanup. &nbsp;Applications fill it with too much data and applications leave too much behind when uninstalled.</p>
<p>I haven&#8217;t considered upgrading from XP and I likely won&#8217;t for years (if ever) because I don&#8217;t like ANY of the changes in Vista. &nbsp;Suppose however, Microsoft would announce an upgrade to Vista that tracks which applications touched what registry entries and could strip unneeded ones on an app uninstall (or at least make it convenient for me to do so)&#8230;</p>
<p>I&#8217;d ditch XP and upgrade to Vista for that reason alone &#8211; damn any other complaints I might have. &nbsp; The registry has been that big of a bug crawling around in my shorts since its inception.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570133">
				<div id="div-comment-570133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570133">
			November 26, 2007 at 11:17 am</a>		</div>

		<p>Bob,</p>
<p>Programs leave registry data behind for the same reason they left behind .ini files back in the Windows 3.1 days: so that if you re-install the application, your preferences from before are remembered.</p>
<p>Some uninstallers are nice and actually ask you if you want to delete settings along with the rest of the app, but I&#8217;d be angry if they assumed you always wanted to delete settings. Especially with flakey apps like Apple&#8217;s iTunes (on Windows; it&#8217;s fine on OS X) that need to be reinstalled often.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570143">
				<div id="div-comment-570143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tungware.com' rel='external nofollow' class='url'>Henry Skoglund</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570143">
			November 26, 2007 at 11:25 am</a>		</div>

		<p>The registry is a superior solution compared to text or XML files, agreed. And it is the best solution for storing information in a central, well formed manner, like for the COM classes and the Plug and play hardware enumeration stuff.</p>
<p>But I&#8217;ll trade all the disadvantages with text/XML files (as compared to the registry) for one important thing: the possibility to migrate 100% of an application and all of its settings (e.g. registration) intact, from one Windows PC to another Windows PC.</p>
<p>Because once an application has written its particular set of data in the registry, it is not always clear how to retrieve all of it. Unless you happen to be the application developer, the registry will seem like a giant bit bucket in this case.</p>
<p>If the NT designers had designed writing to registry so, that the information given by GetModuleFileName() were written along with the data keys, then the Export function in Regedit could have been so much more powerful. I.e. if I could specify a file path, like C:Program FilesMy CompanyMy app, and tell Regedit to export all of the data tagged with this path, then it would be possible to copy 100% of an app to another PC as easily as this is done today with text/XML config files.</p>
<p>Rgrds /Henry</p>
<div class="post">[<i>Your proposal falls apart once once program A modifies program B&#8217;s settings. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570153">
				<div id="div-comment-570153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570153">
			November 26, 2007 at 11:32 am</a>		</div>

		<p>James,</p>
<p>There&#8217;s a reason I uninstall most applications &#8211; they are garbage. &nbsp;I don&#8217;t want my preferences remembered when I&#8217;m chucking the software. &nbsp;I would say those programs think too highly of themselves, but I doubt seriously that the programs are leaving the registry data behind for me and re-installs. &nbsp;I bet 99% do it only because of the time, money, effort involved in coding the total removal.</p>
<p>Also I&#8217;ll note that most of the applications with nice uninstallers tend to forget anywhere from a few to a lot of keys. &nbsp;They usually get all the ones placed in the registry on program install but miss most if not all keys created during the program&#8217;s operation.</p>
<p>Of course the entries that that peeve me most are all the objects, clsids, and the like &#8211; things that can&#8217;t be trimmed by removing one big program branch. &nbsp;Unfortunately these are the very kinds of entries that continue to wreak havoc on computer operation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570163">
				<div id="div-comment-570163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">fini</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570163">
			November 26, 2007 at 11:36 am</a>		</div>

		<p>@Henry: I don&#8217;t think that that&#8217;s such a good idea. Unless NT would make sure that files aren&#8217;t really stored in directories and can be &quot;tracked&quot; properly. IMHO Windows should make it easier to move programs around, just like on a Mac where it doesn&#8217;t matter where you put an app and if you rearrange them, they&#8217;ll still work.</p>
<p>Programs written for POSIX systems are in this regard an even bigger &quot;mess&quot;, since they use a /bin, /etc, /lib, etc. This is all fine in any *nix OS and I&#8217;m glad they work the way they do, but in a desktop system this doesn&#8217;t help much, and could be done better.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570173">
				<div id="div-comment-570173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570173">
			November 26, 2007 at 11:42 am</a>		</div>

		<p>Bob: &nbsp;Abuse and cleanup are each program&#8217;s fault, not the structure&#8217;s fault or Microsoft&#8217;s fault. &nbsp;</p>
<p>To people who want to get rid of the registry completely: &nbsp;What would you replace it with? &nbsp;INI files?</p>
<p>Henry: &nbsp;In the old, old days, you could usually migrate an application by copying the (one) EXE file and its INI file (assuming you were properly licensed, which some people ignored). &nbsp;</p>
<p>Today, you need to reinstall the application anyway, since most applications of any complexity will register DLLs and so on, so you need to use the installer. &nbsp;Copying the application&#8217;s program files folder isn&#8217;t enough. &nbsp;A well-behaved application will let you export and import its settings. &nbsp;If the applicaiton doesn&#8217;t provide this, it&#8217;s not the fault of the designers of the registry.</p>
<p>When you say that you want to migrate an application&#8217;s &quot;registration&quot;, what do you mean? &nbsp;Registration generally means licensing and so on, and you SHOULD have to go through registration again on a new computer.</p>
<p>Otherwise, you have created the ability to buy one copy of a program and install it on 1000 computers. &nbsp;It&#8217;s possible to violate a license agreement, but it shouldn&#8217;t be made trivial to do.</p>
<p>Being able to copy 100% of an app to another PC is not something that needs to be optimized.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570183">
				<div id="div-comment-570183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bjorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570183">
			November 26, 2007 at 11:48 am</a>		</div>

		<p>David: I think &quot;registration&quot; was referring to things like COM registrations. Licensing is tangential. I agree, though, that app migration is nightmarish under the current Windows development model. COM probably thwarted more would-be pirates than WGA ever did.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570193">
				<div id="div-comment-570193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://luke.breuer.com' rel='external nofollow' class='url'>Luke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570193">
			November 26, 2007 at 11:54 am</a>		</div>

		<p>What&#8217;s really needed is the ability to audit registry changes based on program, which I suspect is not possible with built-in Windows functionality. &nbsp;On the surface, this might seem reasonable; however, things would get tricky if audited-program-A asks trusted, non-audited-program-B to make a change to the registry. &nbsp;I&#8217;m not sure if this actually happens, or if programs directly always directly access the registry. &nbsp;I am fairly sure that one would have to be fairly restrictive in what is audited, to avoid performance and log size issues.</p>
<p>Note that one can monitor registry access with SysInternals&#8217; Process Monitor: <a href="http://www.microsoft.com/technet/sysinternals/utilities/processmonitor.mspx" target="_new" rel="nofollow">http://www.microsoft.com/technet/sysinternals/utilities/processmonitor.mspx</a> . &nbsp;I once saw a quasi-auditing-program that somehow monitored software installs in order to track all changes to the system. &nbsp;I don&#8217;t know whether said program stayed active and monitored all of the [registry] operations performed by the installed software or not. &nbsp;I also don&#8217;t know what kind of performance penalty said auditing program incurred.</p>
<div class="post">[<i>Um, security audits already record the program name. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570223">
				<div id="div-comment-570223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Eilert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570223">
			November 26, 2007 at 12:14 pm</a>		</div>

		<p>@fini: While it is true that POSIX system tend to clutter the system in multiple locations, the Unix world developed a way to deal with that problem, namely packages. You have a standard way of installing and uninstalling applications that you don&#8217;t have to explicitely code for. As opposed to, say, .MSI installers, where you have to explicitely write the cleanup code, specially when the Registry is involved(or, god forbid, COM objects). Plus, you know where the configuration files are: either in /etc (usually for daemons and other system-wide applications) or in the user&#8217;s home directory (or, in some cases, both, with the /etc being general system configuration or a configuration template). But you do know where to look for the data, and what to back up.</p>
<p>The issues raised here are interesting. I suppose applications can run in some or even all of those issues when dealing with configuration files. System configuration information is more likely to run into the mentioned issues. It is a matter of courtesy that Microsoft allowed, or even recommended, that applications can use the Registry machinery to store their configurations, alongside vital OS data.</p>
<p>The registry would be better if it had a clearer separation between &quot;System&quot; data and &quot;Application&quot; data. Anything added to the Registry should be recorded by application name and also be removed by application. Any changes to system configurations should also be recorded by application, and able to be rolled back by application.</p>
<p>There is absolutely no need for an application such as &quot;SimCity 2000&quot; to record the &quot;Mayor Name&quot; in the registry. Even if there were, this and all related information should be easily migrated to another PC, or removed entirely if required.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570233">
				<div id="div-comment-570233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570233">
			November 26, 2007 at 12:15 pm</a>		</div>

		<p>Hope this doesn&#8217;t sound like a &quot;GOTCHA!&quot; response here, but since .Net 2.0, you can load AND save the XML application settings.</p>
<p>&lt;projectname&gt;.Properties.Settings.Default.Save();</p>
<p>This is for my Winforms app &#8212; I honestly did feel hobbled in .Net 1.1 where I could load config files, but not save them. &nbsp; It&#8217;s like&#8230; &quot;errr&#8230; so why don&#8217;t I just go use the registry then?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570263">
				<div id="div-comment-570263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sherriman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570263">
			November 26, 2007 at 12:20 pm</a>		</div>

		<p>I have found the registry to be unreliable due to corruption. &nbsp;Users with older machines often have a good portion of the registry corrupted. &nbsp;This issue was particularly prevelant on WinME. &nbsp;So much so that it forced us back to using a file that we could create a primary and backup of.</p>
<p>At the time I found that reading and writing from the Registry repeatedly would eventually fail.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570273">
				<div id="div-comment-570273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570273">
			November 26, 2007 at 12:21 pm</a>		</div>

		<p>One thing that is harder to do with .INI files is to allow sharing of configuration informations between a number of applications. And I think this should be the goal of the registry. I usualy put everything that has not to be shared in config files and the rest in Registry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570283">
				<div id="div-comment-570283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570283">
			November 26, 2007 at 12:42 pm</a>		</div>

		<p>@Steven</p>
<p>Although you are correct that .Net 2.0 does have a Save statement. It will not overwrite your XML config file. All of your changes are stored as essentially a diff file in the users local app settings directory. So in essence the application config file is still never written to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570293">
				<div id="div-comment-570293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://luke.breuer.com' rel='external nofollow' class='url'>Luke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570293">
			November 26, 2007 at 12:53 pm</a>		</div>

		<p>@Raymond: When I said &#8220;audit registry changes based on program&#8221;, I meant use the program as a criterion for whether auditing happens. &nbsp;I thought this would be clear by the sentence &#8220;I am fairly sure that one would have to be fairly restrictive in what is audited, to avoid performance and log size issues.&#8221; &nbsp;What I left out is that I&#8217;m not sure one could accomplish this &#8220;restrictiveness&#8221; by just choosing certain keys, unless by default, a program can only touch a small range of keys. &nbsp;Does this make sense?</p>
<div class=post>[<i>Mind you, you have the same problem with INI files, so it&#8217;s a wash. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570313">
				<div id="div-comment-570313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.1060.org/blogxter/publish/5' rel='external nofollow' class='url'>Steve Loughran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570313">
			November 26, 2007 at 1:09 pm</a>		</div>

		<p>As someone who works full time in the area of Configuration Management, how you configure things matters dearly to me.</p>
<p>-ini files can&#8217;t/didnt handle complex dependency trees or cross references.</p>
<p>-the registry can handle complex trees, but not xrefs</p>
<p>-random XML file formats do often work, but it depends on the parser, especially with corner cases like xml namespaces, illegal ascii chars, duplicate child elements, etc.</p>
<p>In unix, every app has its own config syntax. Xorg.conf has cross refs hacked in in one way, samba.conf does it another. Neither format can be easily &#8216;evaluated&#8217; outside the context of the specific resolution engine built into each tool.</p>
<p>In windows, the registry added some things (central COM objects, admin+domain control) and took away others (ease of configure-by-file copy). To make matters worse, although most .msi installers could hand off registry config to the OS, declaring what they did, the standard installation tools tend to do their own work procedurally. this makes uninstalling harder, as the OS doesn&#8217;t really know happened. This is why SystemRestore and app uninstalls are so unpredictable: nothing really knows what state change operations on the registry where intentional, which werent.</p>
<p>So: all formats are flawed, each differently. Once we&#8217;ve all got tired of XML formats with home rolled include/xref mechanisms, maybe we can move to using RDF triples and have argumentes about vocabularies and ontologies instead&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570323">
				<div id="div-comment-570323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Good Point</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570323">
			November 26, 2007 at 1:16 pm</a>		</div>

		<p>egh: In a word: No.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570333">
				<div id="div-comment-570333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570333">
			November 26, 2007 at 1:57 pm</a>		</div>

		<p>There&#8217;s nothing really stopping you from writing your app however you want &#8212; you don&#8217;t have to use registry keys (if you want it to run from a USB key or something). &nbsp;Registry entries are just the newest and most supported way of doing things. &nbsp;INI files are a mess and you shouldn&#8217;t use them, but don&#8217;t think that you can&#8217;t use them anymore. &nbsp;I don&#8217;t understand how people get their hackles up over the registry when the alternatives still exist (but are much, much worse).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570343">
				<div id="div-comment-570343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew Sayler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570343">
			November 26, 2007 at 2:28 pm</a>		</div>

		<p>My problem is not with the idea of a configuration database like the registry (per se), but rather the following (most of which are implementation details):</p>
<p>. Added transactional operations, but removed the opportunity to interact with the objects in any other way. &nbsp;This ends up manifesting itself most notably as the &quot;no easy way to migrate an application&#8217;s settings between machines&quot; problem.</p>
<p>. No sane user-visible tool for manipulating registry entries (unless Vista has come up with one). &nbsp;That is &#8212; manipulating the registry is foremost a programming interface. &nbsp;Regedit is not even 1/10 of what is needed for even a knowledgeable person to make edits easily (ie I know what I want to change, let me do so without feeling like I&#8217;m using Win3.x)</p>
<p>. The registry is not self-documenting. &nbsp;While .ini files are all kinds of nasty, at least one could add comments in place to document what was going on. &nbsp;Note that I&#8217;m not asking for every item to have help text, just an easy way to accomplish something similar to</p>
<p>[section]</p>
<p>; If foo is 1 it means thus</p>
<p>; If foo is 2 it means the other thing..</p>
<p>foo=1</p>
<p>(Maybe this would not have been appropriate in the early days, but certainly size and access speed are not the primary problems with the registry today)</p>
<p>Note all of these are my impressions as an end-user, sysadmin, and software QA guy. &nbsp;It&#8217;s possible that I&#8217;m missing some of the finer point of the registry. &nbsp;I will say that in general, registry issues are some of the most annoying in my experience with Microsoft operating systems and applications..</p>
<p>Note also that I&#8217;m not suggesting that .ini files are a good solution either &#8212; but there are systems that have solutions that are better (if not themselves perfect). &nbsp;(I&#8217;m thinking of OS X on the desktop and Debian on the server).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570353">
				<div id="div-comment-570353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570353">
			November 26, 2007 at 2:34 pm</a>		</div>

		<p>Oh come on people.</p>
<p>You write a buggy app that maybe remembers its window position and the last couple of files that were open.</p>
<p>Put it in the registry.</p>
<p>To the guy who mentioned using INI files in a nested directory structure&#8230; yeah let&#8217;s clog the filesystem like there&#8217;s no tomorrow! &nbsp;What&#8217;s a little extra thrashing to fetch that window position?</p>
<p>I like the registry, primarily because of its efficiency both in disk usage and speed. &nbsp;The problem, I think, is that there is a lot of interdependent stuff that can get buggy. &nbsp;I don&#8217;t see that as a registry problem though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570363">
				<div id="div-comment-570363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew Sayler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570363">
			November 26, 2007 at 2:35 pm</a>		</div>

		<p>(addendum to the third point in the comment I wrote above, regarding &#8220;self documenting&#8221;):</p>
<p>I&#8217;m not suggesting that all configuration files should be, in any way, self-documenting &#8212; just that it&#8217;s natural and nice to be able to do so. &nbsp;Even if machines are the primary consumers of the data, it doesn&#8217;t mean that system and application designers can&#8217;t make it easier for humans to interact with as well. &nbsp;(Especially given that so many fixes and tuning parameters seem to involve changing the registry).</p>
<div class=post>[<i>Isn&#8217;t that what documentation is for? A single-line comment sounds like you&#8217;re just giving the users enough rope to hang themselves. At least the users who can read English. If you want to put documentation in the registry, then go ahead and add a ValueName_Description:REG_SZ:&#8221;0 means use method X, 1 means use method Y&#8221; to all your registry values. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570373">
				<div id="div-comment-570373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jess Sightler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570373">
			November 26, 2007 at 2:36 pm</a>		</div>

		<p>Since when were the xml files read only? &nbsp;It seems like .net can leave your ~/Local Settings/Application Data/{appname}/ folders riddled with xml .config files that are written and rewritten by the app.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570383">
				<div id="div-comment-570383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew Sayler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570383">
			November 26, 2007 at 2:40 pm</a>		</div>

		<p>Re: Raymond&#8217;s comments &#8220;Yes, there&#8217;s a denial of service attack, tough. You didn&#8217;t care about central administration anyway.&#8221; -Raymond]&#8221;</p>
<p>Does the registry allow you to do transactions on a series of updates? &nbsp;That is, can I say:</p>
<p>read key K -&gt; i</p>
<p>i++;</p>
<p>write i -&gt; K</p>
<p>And have this work reliably? &nbsp;(And of course for larger sequences of reads and writes).</p>
<div class=post>[<i>Don&#8217;t be helpless. Use a search engine. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570403">
				<div id="div-comment-570403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570403">
			November 26, 2007 at 2:54 pm</a>		</div>

		<p>&#8220;XML file security is not granular enough.&#8221;</p>
<p>Why do you insist on keeping user and system-wide settings in the same configuration file. The user-config lives in an XML file in the users home directory, and the admin setting live in the system-wide configuration directory (/etc on unix).</p>
<div class=post>[<i>Even if you split them that way &#8211; How would an administrator lock a user setting? -Raymond</i>]</div>
<p>&#8220;But since the XML configuration file is read-only, the primary objection is sidestepped.&#8221;</p>
<p>I see no reason why it should be read-only, it&#8217;s quite easy to read an XML file, modify it and write it back.</p>
<div class=post>[<i>And then you reintroduce the race condition. -Raymond</i>]</div>
<p>&#8221; (But if you want only administrators to have permission to read specific parts of the XML, then you&#8217;re in trouble.)&#8221;</p>
<p>Split it in 2 files, they shouldn&#8217;t be combined anyway. What if the user is roaming around the network, in the Unix-style system this is no problem, user specific settings are in the users home directory, if this is on a shared filesystem/fileserver then the user has his personal settings and preferences everywhere he logs in on the network. His home directory contains only his personal settings, system-wide settings e.g. configuration of the network or hardware, live in the local system configuration and is not shared. </p>
<p>How would you do this when the configuration file shares both kinds of information ?</p>
<p>&#8220;Since XML configuration files are read-only, you don&#8217;t have to worry about multiple writers.&#8221;</p>
<p>Again, why should they be read-only ?</p>
<p>&#8220;XML configuration files files can suffer a denial of service. You can still open them exclusively and lock out other processes.&#8221;</p>
<p>Not if they live in a protected directory. &nbsp;The users config is only accessible by that user (and why would he DoS himself) and the system&#8217;s config is only accessible by the system (and why would the admin DoS his own system).</p>
<div class=post>[<i>A normal user can open the file for deny-write and prevent the administrator from changing settings. -Raymond</i>]</div>
<p>&#8220;XML files contain only strings. If you want to store binary data, you have to encode it somehow.&#8221;</p>
<p>Just include the path to the binary data file in the XML. Why does everything have to live in 1 file ? That&#8217;s why we have a filesystem in the first place. If you wanted one big file, you could just treat the whole drive as 1 file.</p>
<p>&#8220;Parsing an XML file is comparatively slow. But since they&#8217;re read-only, you can safely cache the parsed result, so you only need to parse once.&#8221;</p>
<p>The operative word being &#8216;relatively&#8217; .</p>
<p>&#8220;Programs parse XML files manually, but the XML format is already locked, so you couldn&#8217;t extend it anyway even if you wanted to. &#8220;</p>
<p>Of course you could, and why shouldn&#8217;t you ? And most programs use an off-the-shelf XML parser library that can parse the file for you. Why invent the wheel twice ? </p>
<p>Your entire article misses the point completely. The only difference between XML (or INI files) and the registry is the on-disk storage. The big advantage of XML is that it is human-readable, which can be a real lifesaver in case of say a fatal system error. </p>
<p>The problem with multiple processes accessing an XML or INI file is not caused by the on-disk format, that could just af well happen with a binary file. In both cases the problem is solved by controlling the point of access to that file. The registry API functions as a single point of access to the actual binary blob on disk that is the registry. If you&#8217;d change the registry to one or more XML files on disk that were human readable, you would be able to do so without breaking a single program, the registry API hides the actual on-disk format from the applications. You&#8217;d have the same advantages as the current registry, and the advantages of a human-readable format. </p>
<p>The big advantage of the registry is that is provides a single point of access to the settings, but this does not depend on the on-disk format.</p>
<div class=post>[<i>If it&#8217;s a text file programs can open directly, then you have created multiple points of access again. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570413">
				<div id="div-comment-570413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570413">
			November 26, 2007 at 3:00 pm</a>		</div>

		<p>&quot;To the guy who mentioned using INI files in a nested directory structure&#8230; yeah let&#8217;s clog the filesystem like there&#8217;s no tomorrow!&quot;</p>
<p>That is what the filesystem is for. Open regedit, doesn&#8217;t it kinda look like .. a directory structure ? With keys (file) which contain values (data). Yeah, let&#8217;s put a different kind of filesystem inside a file in another filesystem!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570423">
				<div id="div-comment-570423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570423">
			November 26, 2007 at 3:06 pm</a>		</div>

		<p>&quot;If you&#8217;d change the registry to one or more XML files on disk that were human readable, you would be able to do so without breaking a single program, the registry API hides the actual on-disk format from the applications.&quot;</p>
<p>You then introduce the possibility of people (or programs) introducing things into the xml file that the OS parser doesn&#8217;t understand.</p>
<p>I find some of WinNT&#8217;s system registry keys very readable. &nbsp;The main problem I see is at the UI config level (e.g. the complexity of the CLSID keys), something which is independent of format, I think.</p>
<p>I am not against text configuration files, but I just think that a lot of apps don&#8217;t really store important information to merit it, and therefore it should go into the registry. &nbsp;Even according to MS, if you have more than 2kb of data to store, it should be put elsewhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570443">
				<div id="div-comment-570443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570443">
			November 26, 2007 at 3:16 pm</a>		</div>

		<p>Aaargh!:</p>
<p>You should try hacking registry files to see what their structure is. &nbsp;Just because it looks like a filesystem in regedit doesn&#8217;t make it as complex as, say NTFS. &nbsp;The registry doesn&#8217;t have to worry about complex cluster management. &nbsp;The registry allows simpler and more efficient caching. &nbsp;Do you really want the Windows file cache using a 4KB page for each INI file?</p>
<p>Why do you think the Send To menu isn&#8217;t as responsive as the main context menu for a file?</p>
<p>There is a reason why databases exist in this world instead of little files scattered in a directory structure.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570463">
				<div id="div-comment-570463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570463">
			November 26, 2007 at 3:45 pm</a>		</div>

		<p>&#8220;[Even if you split them that way &#8211; How would an administrator lock a user setting? -Raymond]&#8221;</p>
<p>He could make the file containing that setting read only for the user, but that would also mean the user can&#8217;t edit other settings in the same file. </p>
<p>But really, he shouldn&#8217;t, it&#8217;s a user setting and the administrator has no business meddling with users settings.</p>
<div class=post>[<i>System administrators feel otherwise. -Raymond</i>]</div>
<p>&#8220;[And then you reintroduce the race condition. -Raymond]&#8221;</p>
<p>Not if there is a single point of access, say a configuration daemon. </p>
<div class=post>[<i>In that case, who cares what the file format is? -Raymond</i>]</div>
<p>&#8220;[A normal user can open the file for deny-write and prevent the administrator from changing settings. -Raymond]&#8221;</p>
<p>Only on windows, and only by design. flock() on Unix is advisory only. &nbsp;If you&#8217;re only reading a file and nobody is supposed to have a lock on it anyway (as with most configuration files), there is no reason to do an flock and block on that. </p>
<div class=post>[<i>Oh, I&#8217;m sorry. I thought we were discussing Windows, not Unix. -Raymond</i>]</div>
<p>&#8220;[If it&#8217;s a text file programs can open directly, then you have created multiple points of access again. -Raymond]&#8221;</p>
<p>There is always access rights, but really, why is the format of the file important ? Any file could potentially be edited directly by programs.</p>
<div class=post>[<i>Exactly. It&#8217;s all about the access point. The registry is an access point; you can&#8217;t open the .DAT file directly. So I guess we agree. -Raymond</i>]</div>
<p>&#8220;You then introduce the possibility of people (or programs) introducing things into the xml file that the OS parser doesn&#8217;t understand.&#8221;</p>
<p>The same thing can be said for editing the registry with a hex editor. &nbsp;You use a proper XML parser/DOM to edit the XML. </p>
<p>&#8220;Just because it looks like a filesystem in regedit doesn&#8217;t make it as complex as, say NTFS.&#8221;</p>
<p>Let&#8217;s all switch back to FAT16, it was so nice and simple.</p>
<p>&#8220;The registry doesn&#8217;t have to worry about complex cluster management.&#8221;</p>
<p>No, it let&#8217;s the filesystem do that for it. Just like when you store it directly in a file</p>
<p>&#8220;The registry allows simpler and more efficient caching. &nbsp;Do you really want the Windows file cache using a 4KB page for each INI file?&#8221;</p>
<p>So the registry exists because the Windows file cache is inefficient ? Maybe they should have put all that effort in fixing the windows file cache then.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570473">
				<div id="div-comment-570473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570473">
			November 26, 2007 at 3:50 pm</a>		</div>

		<p>&quot;Boot Windows off a CD (use WinPE) and then run regedit from the CD. -Raymond&quot;</p>
<p>Does that contain a tool to fix any structural damage to the registry ? Like fsck or scandisk for filesystems ? Damaged .conf files can be repaired easily, worst case you could rewrite the whole file from scratch with the help of a man page. How do you fix a mutilated registry file ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570483">
				<div id="div-comment-570483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570483">
			November 26, 2007 at 4:03 pm</a>		</div>

		<p>[Said clue was caught years ago. Boot Windows off a CD (use WinPE) and then run regedit from the CD. -Raymond]</p>
<p>I&#8217;m sure that&#8217;s just ducky if you&#8217;re in a corporate environment and have access to a Volume License that includes WinPE. &nbsp;So what do you have to tell those of us who are asked to repair aunt Sally&#8217;s desktop PC while we&#8217;re visiting her on vacation, and the only resource we have is our working laptop and her Windows XP installation CD? &nbsp;(Or cousin Joe. &nbsp;Or grandma Mabel. &nbsp;Or the neighbors down the street. &nbsp;Or that guy your father golfs with every other Tuesday. &nbsp;Or&#8230;)</p>
<p>Actually, okay, WinPE 2.0 is available to the public now (though MSFT seems loathe to admit it&#8217;s available), but prior to THIS YEAR, you really did have to have a corporate Volume License to get anywhere near it: &nbsp;Hence the lingering existence of a number of third-party solutions, each more hacky than the next. &nbsp;I wouldn&#8217;t exactly call that a viable solution &quot;years ago.&quot;</p>
<p>Would it really have killed you guys to include even a marginally-functional RegEdit on the Windows XP Install CD?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570493">
				<div id="div-comment-570493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">meh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570493">
			November 26, 2007 at 4:20 pm</a>		</div>

		<p>&quot;the administrator has no business meddling with users settings&quot;</p>
<p>Come again?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570503">
				<div id="div-comment-570503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570503">
			November 26, 2007 at 4:22 pm</a>		</div>

		<p>@BrianK:</p>
<p>&quot;Of course the registry API has the same problem&#8230;&quot;</p>
<p>No it doesn&#8217;t. Read the article again, threads are changing different settings.</p>
<p>All in all I have to say this topic seems very sensitive for many users&#8230; it certainly indicates that there is much frustration with the current system (registry)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570513">
				<div id="div-comment-570513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570513">
			November 26, 2007 at 4:25 pm</a>		</div>

		<p>Aaargh!:</p>
<p>&quot;Let&#8217;s all switch back to FAT16, it was so nice and simple.&quot;</p>
<p>I prefer punch cards. &nbsp;The data is in a form I can visually inspect. ;-)</p>
<p>&quot;No, it let&#8217;s the filesystem do that for it. Just like when you store it directly in a file&quot;</p>
<p>You miss the point. &nbsp;The filesystem only has to worry about cluster management for a few reg hives, e.g. USER.DAT. &nbsp;When you delete and create keys and data, it quite likely that the .DAT file doesn&#8217;t have to change much in size, so the file system drive doesn&#8217;t need to do much work. &nbsp;If you start having lots of INI files, then the file system needs to manage every one of them.</p>
<p>&quot;So the registry exists because the Windows file cache is inefficient ? Maybe they should have put all that effort in fixing the windows file cache then.&quot;</p>
<p>There is nothing wrong with the Windows cache. &nbsp; &nbsp;The registry hives are just memory-mapped. &nbsp;Need a particular integer? &nbsp;Just get it. &nbsp;Nothing to parse.</p>
<p>The point I&#8217;m trying to make is that e.g. the Start Menu and the Send To menu are not as responsive as registry-backed UI elements; for commonly used data by the system, it should be in the most efficient format, both speed wise and disk usage wise.</p>
<p>It is simply a waste of resources storing data in a human readable format that is primarily used by a computer program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570523">
				<div id="div-comment-570523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff Tyrrill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570523">
			November 26, 2007 at 4:30 pm</a>		</div>

		<p>In reply to Bob: &quot;There&#8217;s a reason I uninstall most applications &#8211; they are garbage. &nbsp;I don&#8217;t want my preferences remembered when I&#8217;m chucking the software. &nbsp;I would say those programs think too highly of themselves, but I doubt seriously that the programs are leaving the registry data behind for me and re-installs. &nbsp;I bet 99% do it only because of the time, money, effort involved in coding the total removal.&quot;</p>
<p>Programs cannot and should not delete user settings when uninstalled. Per-user and per-computer data are isolated. The program only has (proper) access to the data in the account it is being uninstalled under, and the latest copy of the profile of the primary user of the application may not even be located on that machine, if it is a roaming profile.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570533">
				<div id="div-comment-570533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570533">
			November 26, 2007 at 4:49 pm</a>		</div>

		<p>&#8220;If you start having lots of INI files, then the file system needs to manage every one of them.&#8221;</p>
<p>Yes, I realize that, it&#8217;s kind of the function of the filesystem to do that, it&#8217;s supposed to be good at it. So if the filesystem can&#8217;t handle it, maybe you should improve the filesystem, that doesn&#8217;t only benefit the &#8216;registry&#8217;, but also all other operations with lots of small files. </p>
<p>&#8220;It is simply a waste of resources storing data in a human readable format that is primarily used by a computer program.&#8221;</p>
<p>Apple has an elegant solution, .plist files are basically XML files but can also be in a binary format, there is a command-line utility called &#8216;plutil&#8217; that can convert them from binary to human readable and vice versa (there is also a GUI editor). Applications using these plist files (through the appropriate API&#8217;s) can use both types transparently. If you want to tweak something, just convert it to human readable, and when done tweaking return it to binary if you prefer. </p>
<p>&#8220;Come again?&#8221;</p>
<p>the administrator has no business meddling with users settings, that&#8217;s why they are called user settings. </p>
<div class=post>[<i>The administrator can control what the employees run on the computer. That&#8217;s why it&#8217;s called the administrator. I think that&#8217;s the fundamental disagreement. This INI vs registry thing is just a cover. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570553">
				<div id="div-comment-570553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570553">
			November 26, 2007 at 4:51 pm</a>		</div>

		<p>While we are all sharing the love with respect to the registry and INI files, one thing I find funny in regedit is that it as a &quot;Favorites&quot; menu. &nbsp;Now, it makes sense to me to call it that, since &quot;Favorites&quot; has become a standard word for MS, but I just find it funny to call oft-used bookmarks to system configuration data &quot;Favorites&quot;. &nbsp;Like as if going to HKLMSOFTWAREMicrosoftWindowsCurrentVersion or something gives me a warm fuzzy feeling or going to HKLMSYSTEMCurrentControlSet feels like a big warm hug.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570563">
				<div id="div-comment-570563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gazpacho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570563">
			November 26, 2007 at 4:55 pm</a>		</div>

		<p>Around the Win95 release, Dr. Dobbs or some other magazine published an article &quot;Why I hate the registry.&quot; I think three of the reasons listed were &quot;It&#8217;s one file.&quot; I shudder at the implication that somewhere in the world an application is accessing the registry through direct file I/O.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570573">
				<div id="div-comment-570573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570573">
			November 26, 2007 at 4:57 pm</a>		</div>

		<p>Hi,</p>
<p>I&#8217;d like to warn you that XML files are NOT read-only. Many applications store their configuration settings in XML files and allow their UI to modify them.</p>
<p>As examples, the FileZilla FTP client, the matching FTP server&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570583">
				<div id="div-comment-570583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570583">
			November 26, 2007 at 5:00 pm</a>		</div>

		<p>[Not if there is a single point of access, say a configuration daemon.]</p>
<p>Great idea! We could even store all the config files in one place. Each program could have a it&#8217;s own config file that the daemon allows you to read from and write to. &nbsp;Hmm, sounds kind of familiar. Oh, that&#8217;s right, it sounds like the registry.</p>
<p>[So the registry exists because the Windows file cache is inefficient? Maybe they should have put all that effort in fixing the windows file cache then.]</p>
<p>You&#8217;re right. Software like MSSQL and MySQL are obviously just making up for crappy filesystems. Database software is a waste of time, we should just optimize filesystems and use flat files.</p>
<p>[I&#8217;m sure that&#8217;s just ducky if you&#8217;re in a corporate environment and have access to a Volume License that includes WinPE.]</p>
<p>BartPE.</p>
<p>[If you want to put documentation in the registry, then go ahead and add a ValueName_Description:REG_SZ:&quot;0 means use method X, 1 means use method Y&quot; to all your registry values.]</p>
<p>Good idea! Now just to update MSDN: &quot;KB6523907 Storing Documentation About Values in the Registry&quot; ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570593">
				<div id="div-comment-570593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.crazyontap.com' rel='external nofollow' class='url'>AlmostAlive</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570593">
			November 26, 2007 at 5:03 pm</a>		</div>

		<p>&#8220;Programs cannot and should not delete user settings when uninstalled. Per-user and per-computer data are isolated.&#8221;</p>
<p>The problem with Windows application installation is (and always has been) a lack of API. &nbsp;Everything is done by convention: copy files here, add registry keys there, overwrite this system DLL but not this one, etc.</p>
<p>The problem with doing things by convention is you&#8217;re stuck with it. &nbsp;</p>
<p>What should have happened is that the Program Files directory and all the system directories should not be writable directly. &nbsp;Installers should be forced through an API and then everything they do can be tracked, undone, repeated, and even remapped entirely if security rules change or Microsoft wants to rename all the directories again. &nbsp;The same is true for the registry. &nbsp;And when you uninstall, the operating system takes care of cleaning up the mess. &nbsp;</p>
<p>There&#8217;s nothing wrong with registry except that it&#8217;s basically just another big dumb file system. &nbsp;</p>
<div class=post>[<i>Where were you in 1983 when Windows was being designed? You could&#8217;ve helped us add ACLs to MS-DOS 2.0. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570603">
				<div id="div-comment-570603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Sayler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570603">
			November 26, 2007 at 5:13 pm</a>		</div>

		<p>To answer my question regarding registry transactions, it seems the answer is:</p>
<p>&#8220;yes, in Vista&#8221;</p>
<p>(would it have been so hard to write those three words? &nbsp;Granted, you&#8217;re allowed to be snarky in your own blog. ;-)</p>
<div class=post>[<i>Teach a man to fish&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570613">
				<div id="div-comment-570613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dataland.wordpress.com/' rel='external nofollow' class='url'>Dataland</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570613">
			November 26, 2007 at 5:16 pm</a>		</div>

		<p>Whatever happened to Registry cleaning tools? &nbsp;Microsoft formerly made available one, but&#8230; a few years back this appeared to have been revoked (i.e no longer publicly available). &nbsp;I understand that Microsoft shipping a registry cleaning/repairing tool opens new can(s) of worms, but many third party tools do this. &nbsp;So, my question: Why can&#8217;t Microsoft make available (i.e. include) an improved regclean tool? &nbsp;This tool could be used to clean up after piggy/bad programs &nbsp;I wouldn&#8217;t expect this tool to be perfect, but it would be nice to not install third party tools to clean up after other third party tools (and the circle continues).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570623">
				<div id="div-comment-570623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570623">
			November 26, 2007 at 5:16 pm</a>		</div>

		<p>Aaargh!:</p>
<p>&#8220;&#8230;that doesn&#8217;t only benefit the &#8216;registry&#8217;, but also all other operations with lots of small files.&#8221;</p>
<p>Let me put it to you this way. &nbsp;Does your federal government organise garbage collection in your city, or the local council?</p>
<p>I don&#8217;t believe in run-time optimisation. &nbsp;If you know you have lots of small chucks of data, put them together and use a more efficient system to access them. &nbsp;Something that is good for working with small files probably won&#8217;t be good with large files.</p>
<p>The binary plist thing you mentioned seems like an interesting idea. &nbsp;I personally thought once it would be good if there was a standard binary format that can be edited by anything.</p>
<p>I still don&#8217;t have a problem with the registry (and I prefer it for most things), but pfiles seem okay (particularly for applications, if there is just one pfile per app). &nbsp;For something like file association data and system configuration, I still prefer one big binary file.</p>
<div class=post>[<i>As long as there&#8217;s a way to find all those small chunks of data and centrally administer them. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570633">
				<div id="div-comment-570633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Sayler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570633">
			November 26, 2007 at 5:21 pm</a>		</div>

		<p>Paul said: &#8220;The Registry, like COM and .doc files, is a really, really bad solution to a problem that never actually existed. It&#8217;s telling that no other OS has it.&#8221;</p>
<p>OS X has the similar idea of &#8220;defaults&#8221; that are stored in some random opaque location. &nbsp;X11 has properties (which are stored in something vaguely like the registry in-memory).</p>
<p>I don&#8217;t think the basic idea is bad: providing a well-defined (and now transactional), access-controlled mechanism for coordinated system configuration. &nbsp;I still think that the Windows registry has a lot of cruft built in and pisses a lot of people off for reasons that could be fixed. (how hard would it be to provide a friendly registry editor? &nbsp;Saying &#8220;a complete solution is impossible&#8221; isn&#8217;t an excuse. &nbsp;I just want something that doesn&#8217;t feel like it was coded in 15 minutes as a sample program.) </p>
<div class=post>[<i>Okay, next time somebody complains that Windows does an incomplete job, I can tell them that you said it was okay.&nbsp;(Besides, end users shouldn&#8217;t be mucking about in the registry&nbsp;any more than they should be using hex editors to edit binary files.)&nbsp;-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570643">
				<div id="div-comment-570643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570643">
			November 26, 2007 at 5:22 pm</a>		</div>

		<p>Nick: &quot;Database software is a waste of time, we should just optimize filesystems and use flat files.&quot;</p>
<p>It is a waste of time. &nbsp;MS should just follow the popular trend and store system data in an Excel spreadsheet. ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570653">
				<div id="div-comment-570653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.crazyontap.com' rel='external nofollow' class='url'>AlmostAlive</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570653">
			November 26, 2007 at 5:22 pm</a>		</div>

		<p>&#8220;Where were you in 1983 when Windows was being designed?&#8221;</p>
<p>The Program Files directory was added in NT correct? &nbsp;Windows 3.1 programs didn&#8217;t go there. &nbsp;Seems like a perfect time and place to restrict it. &nbsp;Same with keeping stuff out of the Windows directory&#8230; &nbsp;leave a place for old programs to mess with much but constrain new programs.</p>
<p>I didn&#8217;t have to be there in 1983.. &nbsp;perhaps 1993.</p>
<p>I still don&#8217;t really understand why programs (with the right permissions) can walk all over any critical file in the system. &nbsp;Yes, sometimes you have to install a new system DLL &#8212; but why isn&#8217;t there gated access? &nbsp;You can&#8217;t rely on installers to not overwrite previous versions but an API could make those sort of determinations.</p>
<div class=post>[<i>If you waited until then, you would&#8217;ve been to late. All the old Windows programs that installed into, say, C:MYPROG, would have stopped working. Or if you want to have two sets of rules, then everybody will say, &#8220;Well screw the new rules. I&#8217;ll just use the old rules. They didn&#8217;t try to stop me from replacing file XYZ.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570663">
				<div id="div-comment-570663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gazpacho</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570663">
			November 26, 2007 at 5:25 pm</a>		</div>

		<p>AlmostAlive, what do you think the Windows Installer API is?</p>
<p>As of Windows XP, the standard method of installing a global library does require you to go through the Windows Installer API. But the old methods still have to be supported for a while, for compatibility.</p>
<p>You also seem to be complaining that nothing in Windows saves you from having to specify what needs to be installed. Well, it&#8217;s an operating system, not magic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570673">
				<div id="div-comment-570673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Sayler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570673">
			November 26, 2007 at 5:46 pm</a>		</div>

		<p>[Okay, next time somebody complains that Windows does an incomplete job, I can tell them that you said it was okay. [&#8230;]</p>
<p>Hurray! &nbsp;Do I get stock options for this contribution??</p>
<p>[(Besides, end users shouldn&#8217;t be mucking about in the registry any more than they should be using hex editors to edit binary files.) -Raymond]</p>
<p>I hope (really, really hope) that there is a hidden smiley-face in there somewhere. &nbsp;</p>
<p>Given the number of registry edits I&#8217;ve had to apply to systems (as directed by MSDN articles, product manuals, or Microsoft technical support representatives), either</p>
<p>1) I&#8217;m not an end user or</p>
<p>2) there are a whole lot people who don&#8217;t agree with you who work for Microsoft.</p>
<p>PS, I&#8217;m trying really hard to stay on-topic here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570683">
				<div id="div-comment-570683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.universityupdate.com/Technology/Firefox/5648125.aspx' rel='external nofollow' class='url'>University Update - Firefox - Why are INI files deprecated in favor of the registry?</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570683">
			November 26, 2007 at 5:46 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.universityupdate.com/Technology/Firefox/5648125.aspx" rel="nofollow">http://www.universityupdate.com/Technology/Firefox/5648125.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570693">
				<div id="div-comment-570693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570693">
			November 26, 2007 at 5:51 pm</a>		</div>

		<p>Paul: &quot;The Registry, like COM and .doc files, is a really, really bad solution to a problem that never actually existed. It&#8217;s telling that no other OS has it.&quot;</p>
<p>I LOL&#8217;d at that. &nbsp;Lumping the registry, COM and .doc files together like that. &nbsp;Particularly the mention of .doc files. &nbsp;So what problem did .doc files try to solve that never actually existed? &nbsp;And the &quot;no other OS has it.&quot; &nbsp;LOL! &nbsp;</p>
<p>That&#8217;s all I&#8217;m saying about that. &nbsp;You owe me a &nbsp;new keyboard.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570703">
				<div id="div-comment-570703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.crazyontap.com' rel='external nofollow' class='url'>AlmostAlive</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570703">
			November 26, 2007 at 5:53 pm</a>		</div>

		<p>&#8220;All the old Windows programs that installed into, say, C:MYPROG, would have stopped working.&#8221;</p>
<p>Huh? &nbsp;Why would that have stopped working? &nbsp;You&#8217;ve got a whole Windows 3.1 API stuffed into XP. &nbsp;Lets 16bit applications screw with 16bit DLL&#8217;s just like they always had and make 32bit applications play by a better set of rules. &nbsp;Eventually, you phase out compatibility with the old applications (like you have with 64bit Windows).</p>
<p>&#8220;Or if you want to have two sets of rules&#8221;</p>
<p>You already have two sets of rules, Win16 and Win32. &nbsp;I don&#8217;t get the argument that you have to play by the same rules as 1983 when you&#8217;ve had lots of opportunities to change them. &nbsp;</p>
<p>&#8220;AlmostAlive, what do you think the Windows Installer API is?&#8221;</p>
<p>Gazpacho: Actually, I was going to bring up MSI. &nbsp;And yes, it does about half of what I mentioned well but you still can uninstall all the setting from all the users when you remove an application. &nbsp;It doesn&#8217;t dig deep enough. &nbsp;And it still allows apps to trample all over the file system and the registry. &nbsp;And Raymond has a point, now that the gates are open you can&#8217;t have two sets of rules. &nbsp;It&#8217;s too late for MSI to be truly effective.</p>
<p>&#8220;You also seem to be complaining that nothing in Windows saves you from having to specify what needs to be installed.&#8221;</p>
<p>Actually, what I&#8217;m saying is nothing in Windows forced you to specify what is being installed. &nbsp;It&#8217;s just a random bunch of files and registry keys. &nbsp;An API would have allowed Windows to understand what is being done to alter it, undo it, maybe even replicate it.</p>
<div class=post>[<i>Okay, if you are change the rules for Win32, then you have to go back to Windows NT 3.1, which predated the &#8220;Program Files&#8221; directory. Oh, and Windows NT 3.1 supported a FAT root partition, so file system security is going to be kind of tricky. Have fun writing a virtualization layer in 8MB of memory. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570713">
				<div id="div-comment-570713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Niels</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570713">
			November 26, 2007 at 5:55 pm</a>		</div>

		<p>I have a kind of love-hate relationship to the registry. In some ways it works quite well, mostly at the presenting a uniform and safe interface to configuration data, but my main problem is still the identifying and perhaps migrating data for a specific application.</p>
<p>One possible solution (which might even be possible to implement without breaking the existing API) would be to support a kind of overlays stored in separate files. For example, an application calls an API to get a token for its overlay. The overlay data are visible to all applications, and changing any data in the overlaid data changes it in the specific file that stores the overlay, but newly created keys would belong to a specific overlay, or the regular (current) registry.</p>
<p>One way the overlay tokens could perhaps be implemented was through a new API for creating HKEY tokens.</p>
<p>An overlay could then (somehow) be unloaded from the system and perhaps be moved somewhere else.</p>
<p>An overlay would then be either machine specific or user specific. (Machine specific ones would probably go in the All Users homedir.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-570723">
				<div id="div-comment-570723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570723">
			November 26, 2007 at 6:00 pm</a>		</div>

		<p>&quot;The administrator has no business meddling with users settings&quot;</p>
<p>Maybe if we say it often enough, it&#8217;ll become true&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-570733">
				<div id="div-comment-570733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570733">
			November 26, 2007 at 6:03 pm</a>		</div>

		<p>&quot;You&#8217;ve got a whole Windows 3.1 API stuffed into XP. &nbsp;Lets 16bit applications screw with 16bit DLL&#8217;s just like they always had and make 32bit applications play by a better set of rules. &nbsp;Eventually, you phase out compatibility with the old applications&quot;</p>
<p>If you did that, nobody would have written 32-bit programs and then you wouldn&#8217;t be ABLE to phase anything out&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570743">
				<div id="div-comment-570743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.crazyontap.com' rel='external nofollow' class='url'>AlmostAlive</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570743">
			November 26, 2007 at 6:22 pm</a>		</div>

		<p>Dean you&#8217;re saying that nobody would haved developed for a new API? &nbsp;I guess Microsoft should never have created .NET &#8212; doomed to failure. &nbsp;</p>
<p>Developers like well designed and useful APIs and languages and they&#8217;ll go out of there way to use them &#8212; sometimes when it isn&#8217;t even practical.</p>
<div class=post>[<i>It&#8217;s all about the value proposition. &#8220;Hey, here&#8217;s a new API. The new one is more restrictive. You can&#8217;t do as much with the new API as the old one.&#8221; That&#8217;s not going to win over many people. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570753">
				<div id="div-comment-570753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jolyon Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570753">
			November 26, 2007 at 6:28 pm</a>		</div>

		<p>As has been opined by many in these comments, every storage implementation has it&#8217;s pros and cons.</p>
<p>The problem was that INI&#8217;s were declared persona non grata and The Registry feted as the solution to all the problems associated with INI files.</p>
<p>Which was fine as far as that went&#8230;. &nbsp;and as long as you are happy to embrace the problems that THE REGISTRY brought to the party.</p>
<p>If The Registry had been presented as just one new option IN ADDITION to INI files then developers could have chosen the mechanism most appropriate to their needs (often perhaps varying even within a single application) and even if not everyone was happy, I guess a lot more people would have been.</p>
<p>Of course, nobody was ever FORCED to stop using INI files, but their official deprecation was effectively a public tar and feathering for any application so outmoded as tobe seen to continue using them.</p>
<p>XML files took the stigma off of INI files by giving them a sexy NEW name and a &quot;modern&quot; look and feel. (i.e. bloated, cluttered, verbose and with just a bit of a whiff of HTML &#8211; that sexy new web tech so it must be &quot;cool&quot;)</p>
<p>It was possible, with very little effort, to get just as much structure in an INI file as is present in many XML files and often with far more clarity.</p>
<p>Had the INI API been maintained and extended, who knows what we might have today.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570763">
				<div id="div-comment-570763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570763">
			November 26, 2007 at 6:29 pm</a>		</div>

		<p>I have to admit that I prefer INI to registry most of the time. Many of the apps I work on don&#8217;t need to share config data, or special security measures, or concurrency checks &#8211; in other words they just need a SimpleConfiguration API. Yes, I know this sounds very much like INI files API. I like the ease of migration (xcopy) that comes w/ some .net apps but unfortunately it&#8217;s easy to ref an assembly or DLL that requires COM and now the Simple API can&#8217;t be used. In the end this just means more job security so I guess I can&#8217;t complain too much&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570773">
				<div id="div-comment-570773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.crazyontap.com' rel='external nofollow' class='url'>AlmostAlive</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570773">
			November 26, 2007 at 6:41 pm</a>		</div>

		<p>&#8220;It&#8217;s all about the value proposition. &#8216;Hey, here&#8217;s a new API. The new one is more restrictive. You can&#8217;t do as much with the new API as the old one.&#8217; That&#8217;s not going to win over many people.&#8221;</p>
<p>I disagree. &nbsp;The old way is not really to have an API at all. &nbsp;Just copy files around and add registry keys. &nbsp;An API would be easier to use and safer. &nbsp;That&#8217;s the value proposition.</p>
<p>And I suspect many developers would choose a slightly more restrictive API over DLL hell and registry bloat.</p>
<div class=post>[<i>I guess that explains why nobody uses custom installers any more and everybody deploys MSI packages. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570783">
				<div id="div-comment-570783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570783">
			November 26, 2007 at 6:47 pm</a>		</div>

		<p>The registry doesn&#8217;t have enough segregation. Any program can party on (most) any part of it, including other programs settings. So when you want to do something to ONE program and ONE alone, it becomes a wild goose hunt to find all of that programs settings. That is my opinion, and judging from the comments it seems many people share it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570793">
				<div id="div-comment-570793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570793">
			November 26, 2007 at 6:49 pm</a>		</div>

		<p>[XML files took the stigma off of INI files by giving them a sexy NEW name and a &quot;modern&quot; look and feel. (i.e. bloated, cluttered, verbose and with just a bit of a whiff of HTML &#8211; that sexy new web tech so it must be &quot;cool&quot;)]</p>
<p>So what you&#8217;re saying that XML files are &quot;INI 2.0&quot;. &nbsp;Brillant! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570813">
				<div id="div-comment-570813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570813">
			November 26, 2007 at 7:34 pm</a>		</div>

		<p>[I disagree. &nbsp;The old way is not really to have an API at all. &nbsp;Just copy files around and add registry keys. &nbsp;An API would be easier to use and safer. &nbsp;That&#8217;s the value proposition.</p>
<p>And I suspect many developers would choose a slightly more restrictive API over DLL hell and registry bloat.]</p>
<p>Ah! So you live in a parallel universe where applications like &lt;non-Microsoft web media player developed in Seattle&gt; didn&#8217;t stomp all over every user setting you can think of and violate every rule of &quot;good software&quot; there is? I wish I lived in the same universe you do.</p>
<p>Unfortunately, Microsoft learned long ago that you can&#8217;t trust developers to do the right thing. Guess how long it took &lt;IBM-owned email client that competes with Outlook&gt; to properly support multiple users? I&#8217;ll give you a hint: It wasn&#8217;t NT4, and it wasn&#8217;t Windows 2000, and it was at least a decade later than it should have been.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570823">
				<div id="div-comment-570823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.asvguy.com' rel='external nofollow' class='url'>Burak KALAYCI</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570823">
			November 26, 2007 at 7:42 pm</a>		</div>

		<p>I love the fact that there&#8217;s the Registry and it&#8217;s somewhat popular, though I never use it.</p>
<p>Because it&#8217;s one more feature I can list for my applications: &quot;Does not use Windows registry&quot;&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570203">
				<div id="div-comment-570203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570203">
			November 26, 2007 at 11:57 am</a>		</div>

		<p>Sure, XML files are *supposed* to be read only, but we know developers always follow the rules. &nbsp;Right?</p>
<p>&#8230;and then there are the people that just can&#8217;t let go:</p>
<p><a rel="nofollow" target="_new" href="http://msmvps.com/blogs/martinzugec/archive/2006/03/01/85113.aspx" rel="nofollow">http://msmvps.com/blogs/martinzugec/archive/2006/03/01/85113.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570213">
				<div id="div-comment-570213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Felix Koehler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570213">
			November 26, 2007 at 11:58 am</a>		</div>

		<p>Well, ini files (meaning .ini, .xml, etc.) obviously have disadvantages. But they also have advantages.</p>
<p>You can easily fit all program + configuration into a single directory, which allows </p>
<p>&#8211; &#8220;an application on a memory stick&#8221;,</p>
<p>&#8211; &#8220;an application without installer&#8221;,</p>
<p>&#8211; &#8220;an application with very limited rights&#8221; (write and write only one directory, no registry access allowed),</p>
<p>&#8211; &nbsp;multiple versions to exist peacefully without any clever thoughts along the lines: &#8220;gee, what else did I forget that gets silently overwritten by the installer.&#8221;,</p>
<p>&#8211; modify a config file by hand, quick and dirty style.</p>
<p>&#8211; config files can be defragmented on disk easily :o</p>
<p>As for the disadvantages &#8211; these are curable with some effort (well: effort is a disadvantage in itself ;-)):</p>
<p>&#8211; read / write race conditions can be handled in a variety of ways:</p>
<p> &nbsp;+ lock the file</p>
<p> &nbsp;+ use Mutexes</p>
<p> &nbsp;+ allow only one instance at a time</p>
<p> &nbsp;+ work on a temp. copy.</p>
<p>&#8211; denial of service:</p>
<p> &nbsp;+ Kind of an &#8220;other side of an airtight hatch&#8221; problem. Basically any program that can lock an arbitrary file will be able to do a DOS-attack.</p>
<p>&#8211; security granularity:</p>
<p>partitioning of the &#8220;one big inifiles&#8221; into several small ones with different ACLs allows to circumvent this.</p>
<p>&#8211; parsing is slow:</p>
<p>There&#8217;s no cure against access being O(N), other than making sure N is small. So split them up. smaller files -&gt; faster parsing. </p>
<p>&#8211; INI files contain only two levels of structure. </p>
<p>again, split them up into several files, if necessary use a directory hierarchy</p>
<p>&#8211; .ini files are 32kB max:</p>
<p>call them .conf files and use your own parser</p>
<p>&#8211; The default location for INI files was the Windows directory!</p>
<p>And 640 kB used to be enough for everybody (This is no sarcasm. Back then it *really* was). But that&#8217;s a sin from the past, ini-files went through rehab and don&#8217;t do this anymore (well &#8230; it&#8217;s hard to stay clean for some ;-)</p>
<p>&#8211; ini files contain only strings:</p>
<p>ini-files are definitely not meant to contain large quantities of binary data. ASCII-encoding is good enough for small quantities though.</p>
<p>&#8211; no UNICODE support:</p>
<p>unless you insist on using the windows API for handling inilike-files, I don&#8217;t see the problem?</p>
<p>&#8211; handwritten parsers are flaky:</p>
<p>Yes. On the other hand, the ini-file format is simple enough to write your own little API and test it adequately. And using std::getline and std::string, I haven&#8217;t yet seen any buffer overruns.</p>
<p>So IMVHO the only real disadvantage of ini-files &amp; co. is that it&#8217;s more effort to implement compared to using the registry.</p>
<p>Oh, and it&#8217;s much harder to hide information from the user (Time limited test versions anyone?). Though, XML files can be at least as good at obfuscation as is the registry ;-)</p>
<p>As a user, I *like* config/ini &#8211; files.</p>
<p>Felix</p>
<div class="post">[<i>I like argument through assertion. &#8220;You won&#8217;t have any buggy INI file parsers if you don&#8217;t write buggy INI file parsers.&#8221; And argument through blame-shifting: &#8220;You can avoid the race conditions by introducing a denial of service attack.&#8221; And then argument through discount: &#8220;Yes, there&#8217;s a denial of service attack, tough. You didn&#8217;t care about central administration anyway.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570833">
				<div id="div-comment-570833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roger Dworkin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570833">
			November 26, 2007 at 8:02 pm</a>		</div>

		<p>The main reason I like INI files is they are portable. &nbsp;For instance, if I want to move my installation of Forte Agent to another machine, all I need do is move the program folder containing the INI file. &nbsp;No messy reinstalling or configuring.</p>
<p>If programs that use the registry would be consistent in where they store settings, one could just export that bit from the registry. &nbsp;But they aren&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-larryosterman odd alt thread-odd thread-alt depth-1" id="comment-570843">
				<div id="div-comment-570843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Larry+Osterman+%5BMSFT%5D' rel='external nofollow' class='url'>Larry Osterman [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570843">
			November 26, 2007 at 8:10 pm</a>		</div>

		<p>&quot;The Registry, like COM and .doc files, is a really, really bad solution to a problem that never actually existed. It&#8217;s telling that no other OS has it.&quot;</p>
<p>And OSX has COM (or a set of constructs that are sufficiently close to COM that Apple refers to COM in their documentation). &nbsp;And Firefox has a plugin model that is essentially identical to COM.</p>
<p>So there are many examples of places where OS and application vendors have implemented mechanisms that are very similar to COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570853">
				<div id="div-comment-570853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570853">
			November 26, 2007 at 8:16 pm</a>		</div>

		<p>[Teach a man to fish&#8230; -Raymond]</p>
<p>Light a fire for a man, and he&#8217;s warm for a day. &nbsp;Light a man on fire, and he&#8217;s warm for the rest of his life.</p>
<p>&quot;Because it&#8217;s one more feature I can list for my applications: &quot;Does not use Windows registry&quot;&#8230;&quot;</p>
<p>I&#8217;m sure Grandma will read that on your product marketing and care so much. &nbsp;Of course, all my non-Windows apps I&#8217;ve written can say this, but that is just semantics.</p>
<p>&quot;Any program can party on (most) any part of it, including other programs settings.&quot;</p>
<p>This isn&#8217;t necessarily a problem. &nbsp;If I have a suite of programs, like Office, one application ought to be able to manage the others (or a server config app separate from the server, whatever). &nbsp;Don&#8217;t forget, the application is running with the exact same privs as the user himself. &nbsp;Even if you tried to do some sort of OS enforced rule here, there are going to be all sorts of holes you can poke into it.</p>
<p>Again, a lot of people are missing that if you&#8217;re a smart programmer you can write the application to run regardless of the registry. &nbsp;Sysinternals tools come to mind &#8212; they don&#8217;t require any setup and typically just run (even without a INI file). &nbsp;Sure, they write some things out but you can always copy the executible to a new machine and it will still work. &nbsp;(heck, the things are pretty genius in how they work as it is)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570863">
				<div id="div-comment-570863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">harmony7</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570863">
			November 26, 2007 at 8:47 pm</a>		</div>

		<blockquote><p>
  The registry doesn&#8217;t have enough segregation. Any program can party on (most) any part of it, including other programs settings.
</p></blockquote>
<p>What stops programs from partying on other programs&#8217; INI files?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570303">
				<div id="div-comment-570303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://http://www.winamp.com' rel='external nofollow' class='url'>benski</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570303">
			November 26, 2007 at 12:57 pm</a>		</div>

		<p>* You can get around the Unicode issue by reading/writing UTF-8 data into the INI file.</p>
<p>* Get/WritePrivateProfileString locks the file between access requests. &nbsp;Take a look in filemon to see what I mean. &nbsp;There is an Lock, Open, Read (or Write), Unlock around every call. &nbsp;There should be no multithreading issues, although obviously this is a bit slow.</p>
<p>* Your application can (and should) cache the contents at startup time. &nbsp;Just the same as you wouldn&#8217;t re-parse an XML file or re-read from the registry every time you need to check whether or not some option is enabled.</p>
<p>* GetPrivateProfileSection is an effective way to speed up reading of an entire INI file at once, assuming you don&#8217;t have a lot of &#8216;dead&#8217; keys.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570883">
				<div id="div-comment-570883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">harmony7</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570883">
			November 26, 2007 at 9:17 pm</a>		</div>

		<blockquote><p>
  That in itself might not be a problem.</p>
<p>  Having programs able to party all over the registry isn&#8217;t the same as having programs configure each other.
</p></blockquote>
<p>How is this any different?</p>
<p>&quot;Configuring&quot; and &quot;trampling&quot; are both &quot;modifying&quot;. &nbsp;It&#8217;s like &quot;fermentation&quot; and &quot;rotting&quot;. &nbsp;They&#8217;re both a form of &quot;biodegration&quot;, just the difference between whether something is constructive or destructive. &nbsp;You can&#8217;t expect the computer to know the difference (and wouldn&#8217;t want it to, anyway). &nbsp;All you can expect is for the computer to either allow or disallow, based on permissions, which the registry gives finer control over (at the key level, rather than grouped by file).</p>
<blockquote><p>
  that&#8217;s just the way Windows works.</p>
<p>  there are certainly OS&#8217;s out there where programs are not run at the privilege of the user.
</p></blockquote>
<p>Isn&#8217;t this done by creating a user just for running said program? &nbsp;Then you can &quot;give the program&quot; any set of privileges as you want. &nbsp;That way that program won&#8217;t be able to mess with any program or settings it doesn&#8217;t have permission to mess with.</p>
<p>This holds true regardless of whether settings are held in INI files, text config files, or the registry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570893">
				<div id="div-comment-570893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570893">
			November 26, 2007 at 9:31 pm</a>		</div>

		<blockquote><p>
  &quot;Configuring&quot; and &quot;trampling&quot; are both &quot;modifying&quot;. &nbsp;It&#8217;s like &quot;fermentation&quot; and &quot;rotting&quot;. &nbsp;They&#8217;re both a form of &quot;biodegration&quot;, just the difference between whether something is constructive or destructive.
</p></blockquote>
<p>It&#8217;s not the configuring part. It&#8217;s the all over the registry part. The program could put its settings in any part of the registry, or create a hundred keys and stick them all under there. When you want to move or delete the program, finding all its settings (Including extension handlers, COM objects, CLSIDs, and all the other registry databases) becomes next to impossible.</p>
<blockquote><p>
  Isn&#8217;t this done by creating a user just for running said program? &nbsp;Then you can &quot;give the program&quot; any set of privileges as you want.
</p></blockquote>
<p>You&#8217;re thinking of UNIX. That&#8217;s not what I meant. But since it&#8217;s offtopic and I have a tendancy to go overboard on that particular subject I&#8217;m not saying any more about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570903">
				<div id="div-comment-570903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stephen Jones</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570903">
			November 26, 2007 at 9:31 pm</a>		</div>

		<p>Off-topic but why am I getting something like 10,000 registry reads a minute when the only program running is regmon?</p>
<p>How many drowned Bangladeshis are there going to be as a result of the global warming caused by all these extra cycle?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570923">
				<div id="div-comment-570923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570923">
			November 26, 2007 at 9:34 pm</a>		</div>

		<p>&gt;INI files don&#8217;t support Unicode.</p>
<p>You could have encoded Unicode characters in hex and keep ANSI characters as straight text.</p>
<p>&gt;INI file security is not granular enough.</p>
<p>True but you can have two or more INI files, one for keeping the admin settings and others for keeping per user settings.</p>
<div class=post>[<i>And what if you want to secure one of the per-user settings but not another? Or will we have a separate INI file for each setting? -Raymond</i>]</div>
<p>&gt;Multiple writers to an INI file can result in data loss.</p>
<p>Per user settings should not be a problem here, since each user could have its own INI file. Only the admin INI part could be a problem if you have two admins which is a bad idea to begin with.</p>
<div class=post>[<i>Are you saying that one should never run two copies of the same program at the same time? -Raymond</i>]</div>
<p>&gt;INI files can suffer a denial of service.</p>
<p>Registry can too. With administrator privilege you can just write directly to physical disk sector and kill the whole OS by zeroing out the registry.</p>
<div class=post>[<i>Now you&#8217;re being disingenuous. -Raymond</i>]</div>
<p>&gt;INI files contain only strings.</p>
<p>I don&#8217;t see this as such a big problem. If you needed to store blobs you could always store those in separate files and reference them in INI file.</p>
<p>&gt;Parsing an INI file is comparatively slow.</p>
<p>This is actually the most problematic part with any text file including XML. Solution to speed up string processing is to use counted strings instead of zero terminated strings.</p>
<p>&gt;Many programs open INI files and read them directly.</p>
<p>This could have been prevented if you stored them in a dedicated location and prevented direct access. Yes, I know that sounds too similar to the registry.</p>
<p>&gt;INI files are limited to 32KB in size.</p>
<p>That limit was arbitrary and even the registry has one.</p>
<p>&gt;INI files contain only two levels of structure.</p>
<p>Should not be a problem. Deep nesting should be avoided anyway, it just creates confusion.</p>
<p>&gt;Central administration of INI files is difficult.</p>
<p>If they were standardized it wouldn&#8217;t be any more difficult than the current solution.</p>
<div class=post>[<i>I like how in one branch of the comments, people are saying &#8220;You should enforce restrictions on how programs should install; don&#8217;t give them a choice&#8221; and on another branch people are saying &#8220;You should let programs do it however they like and leave it up to them to follow standards voluntarily.&#8221; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570933">
				<div id="div-comment-570933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570933">
			November 26, 2007 at 9:48 pm</a>		</div>

		<p>&quot;Only the admin INI part could be a problem if you have two admins which is a bad idea to begin with.&quot;</p>
<p>I think you&#8217;re coming from a standalone PC mindset here. &nbsp;A lot of Windows PCs do operate in environments where there is more than one Administrator.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-570953">
				<div id="div-comment-570953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570953">
			November 26, 2007 at 9:53 pm</a>		</div>

		<p>&quot;The program could put its settings in any part of the registry&quot;</p>
<p>I don&#8217;t understand how INI files solve that problem, though. Programs can put their settings in any part of the filesystem, too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570393">
				<div id="div-comment-570393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570393">
			November 26, 2007 at 2:42 pm</a>		</div>

		<p>benski: Yes, the Get/WritePrivateProfileString functions lock *while they run*. &nbsp;But that still leaves the race condition that Raymond described: one thread calls Get&#8230;, the second calls Get&#8230;, then both threads modify their local string and call WritePrivateProfileString back. &nbsp;Now one thread&#8217;s change was lost. &nbsp;You need locking around the entire read-modify-write, not just each individual read and write.</p>
<p>Of course the registry API has the same problem&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570963">
				<div id="div-comment-570963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570963">
			November 26, 2007 at 11:00 pm</a>		</div>

		<p>UNIX uses a file for configuration and not the registry. This makes software maintenance much easier and system upgrades become seamless. Migrating a user&#8217;s preferences is as simple as copying his or her home directory to the new system. </p>
<p>The Registry has security, but if the default user has admin privileges, then what&#8217;s the point? </p>
<div class="post">[<i>What if a program modifies your .emacsrc (to add a handler for its private file type) and your fvwm2rc (to add a context menu for the file type) and your .cshrc (to add itself to your path)? Now its settings are stored in eight lines in three separate files. Good luck migrating that. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570973">
				<div id="div-comment-570973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JamesNT</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570973">
			November 26, 2007 at 11:17 pm</a>		</div>

		<p>Lord Chen,</p>
<p>[I like how in one branch of the comments, people are saying &quot;You should enforce restrictions on how programs should install; don&#8217;t give them a choice&quot; and on another branch people are saying &quot;You should let programs do it however they like and leave it up to them to follow standards voluntarily.&quot; -Raymond]</p>
<p>That&#8217;s because the majority of people you are dealing with here are n00bs. &nbsp;The information they are going from regarding the Windows registry is grossly out of date or just plain inaccurate. &nbsp;</p>
<p>The Windows Registry has only had two real problems:</p>
<ol>
<li>&nbsp;In the Win9x and NT days it was placed on a FAT partition. &nbsp;This is where the majority of corruption of a system registry came from. &nbsp;My registry corruption days ENDED when Windows 2000 came out (and even then I have only had three systems die on me because of the registry).</li>
<li>
<p>&nbsp;Bad uninstallers that didn&#8217;t clean up after themselves and left their settings behind. &nbsp;This problem really started going away again with Windows 2000 and MSI came out.</p>
</li>
</ol>
<p>I am over-simplifying a bit, but the point is clear enough.</p>
<p>For those of you making pot shots because you dug yourselves out of the lowest intestines of slashdot just to bitch about Windows again, despite how off your information is, you can imagine what someone like me who is only concerned about really learning this stuff and really makes a living thanks to MS thinks about you right about now.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570983">
				<div id="div-comment-570983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570983">
			November 26, 2007 at 11:18 pm</a>		</div>

		<p>[UNIX uses a file for configuration and not the registry. This makes software maintenance much easier and system upgrades become seamless.]</p>
<p>And the use of files versus the registry makes a difference how? &nbsp;When you update software on Windows (or Windows itself) it can read from the registry as easily as from files. &nbsp;</p>
<p>[Migrating a user&#8217;s preferences is as simple as copying his or her home directory to the new system.]</p>
<p>Sometimes, and calling it &quot;easy&quot; is being awful generous. An active user&#8217;s home directory will quickly accumulate a LOT of hidden configuration directories for nearly every application installed. &nbsp;Figuring out what to copy and what not is no simpler than figuring our which registry keys to export. Sure, you can just copy everything, but you can also just copy the entire user hive too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570453">
				<div id="div-comment-570453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.werkema.com' rel='external nofollow' class='url'>Sean W.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570453">
			November 26, 2007 at 3:20 pm</a>		</div>

		<p>I&#8217;ve often been frustrated with the Windows Registry, but it&#8217;s for a different reason than most of those listed above: &nbsp;The Registry is, for all its other benefits, a proprietary solution &#8212; a very large, well-known, and well-publicized solution, but a proprietary solution nonetheless. &nbsp;And by that, I mean that there&#8217;s a fairly short, finite list of tools that can work with it, and pretty much all of them depend on the Windows kernel.</p>
<p>Why is this bad? &nbsp;Maybe if you&#8217;ve never had to fix a broken Windows box, you wouldn&#8217;t know. &nbsp;When you have a Windows box that is currently unbootable because some random program ate the Registry, your main option, in most cases, is to reformat the machine and start over, not because of the lack of logs, not because of the lack of audits, but because there&#8217;s no way to get into the system, manually fix the damage in the Registry, and continue life normally.</p>
<p>Contrast this with Un*x&#8217;s .conf files, where you can boot off a CD or even via a network and use any of ten thousand different text editors to edit the .conf files until the system is functional again.</p>
<p>I&#8217;ve used both solutions, and I can say hands-down that I&#8217;d rather repair a broken Un*x configuration than a broken Windows configuration any day of the week. &nbsp;Or, more accurately, with Un*x, I at least *can* fix things &#8212; sometimes with Windows, you really don&#8217;t have any choice but to reformat, and a lot of the blame there can be put on the inaccessibility of the piles of data in the Registry.</p>
<p>That said, I haven&#8217;t used Vista&#8217;s repair console yet &#8212; so did anyone at Microsoft catch a clue and include a RegEdit equivalent that works off a boot CD, or is there still only an automatic repair system that rarely repairs anything and a command line that knows almost no useful commands?</p>
<div class=post>[<i>Said clue was caught years ago. Boot Windows off a CD (use WinPE) and then run regedit from the CD. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570993">
				<div id="div-comment-570993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570993">
			November 26, 2007 at 11:38 pm</a>		</div>

		<p>I still have one question:</p>
<p>I think the INI files for storing user settings goes to %APPDATA% folder like what Fxxbar does (the .cfg file is not an INI file, but they&#8217;re similar). So unless you have the same user login more than once concurrently, there&#8217;s little chance of race condition.</p>
<p>But if you have more than 1 user login at the same time, is it fair to say you&#8217;ll face race condition one time or another? (Say the first user reads stringA and modify it, not aware that the second user also attempts to read and modify the same string value, it seems no matter it&#8217;s from INI file or regsitry, you&#8217;d still have problem.)</p>
<p>While some may argue that registry is better because it protects your from case that modification is on different line, may I suggest that most of the program I seen write &#8220;user settings&#8221; to registry at once &#8211; touches every keys/values regardless of whether it&#8217;s value has been changed or not. In that case if there&#8217;s sufficient gap between &#8220;read&#8221; and &#8220;write&#8221; (this especially true when program reads settings only when the program is launching, then writes the &#8220;modified values&#8221; directly from memory without reloading / comparing values first), the scenario is not that different.</p>
<div class="post">[<i>Yes, you still have race conditions, but at least the race won&#8217;t result in the configuration file being corrupted because two programs are writing to it simultaneously. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570543">
				<div id="div-comment-570543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570543">
			November 26, 2007 at 4:50 pm</a>		</div>

		<p>The Registry, like COM and .doc files, is a really, really bad solution to a problem that never actually existed. It&#8217;s telling that no other OS has it.</p>
<p>Most of the objections read like &quot;Rain is bad, because you catch cold if you stand around in it all day.&quot; Admittedly, built in INI support isn&#8217;t great, but a lot can still be done with it and writing one&#8217;s own (we have Unicode, nested objects, fast and easy read/write, and encryption/digital signing for security) is more fun than wrestling with the real thing or recovering an unbootable system (especially a customer&#8217;s) when *anything* goes wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571003">
				<div id="div-comment-571003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571003">
			November 27, 2007 at 1:47 am</a>		</div>

		<blockquote><p>
  nobody writes to XML configuration files
</p></blockquote>
<p>8,000 code monkeys all over the world are currently hard at work to remedy this. &nbsp;Stand by&#8230;</p>
<p>(I was going to create a joke suggestion-box item &quot;Hey Raymond, how do I write to an XML config file? &nbsp;My project manager has told me we need to do this for our product and I can&#8217;t find the API to do this&quot; to point this out, but I thought I&#8217;d make it explicit here :-).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571023">
				<div id="div-comment-571023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571023">
			November 27, 2007 at 2:48 am</a>		</div>

		<p>&quot;I guess that explains why nobody uses custom installers any more and everybody deploys MSI packages.&quot;</p>
<p>More like MSI (or the version you&#8217;re using) may not be deployed on every OS that the program is targeting, or that MSI has (at least early versions) produced hair-pulling situations for end users or that an MSI install loves to sit around &quot;Gathering Required Information&quot; for ages while a custom installer would have completed already.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571033">
				<div id="div-comment-571033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571033">
			November 27, 2007 at 3:02 am</a>		</div>

		<p>While I did not create the registry, I was instrumental in causing its existence. There is some talk about this in my Behind the Code talk, which can be found at <a rel="nofollow" target="_new" href="http://channel9.msdn.com/ShowPost.aspx?PostID=224935" rel="nofollow">http://channel9.msdn.com/ShowPost.aspx?PostID=224935</a> at around 39:15.</p>
<p>Humorous anecdote: the initial (win16) registry implementation (before shipment) atomized both key names and values strings into a single atom table. When keys were made case-insensitive, the effect was that any initial value inserted would map subsequent inserted values to the case of the initial value (Open -&gt;OPEN etc.). Since values showed up in menus and dialogs, this mattered. &nbsp;There ensued a lengthy email exchange of views about whether to fix this &quot;bug&quot;.</p>
<p>Finally my manager (a long time senior employee) sent an email saying &quot;if you think it will take an act of God to change this, I will speak to him&quot;. I was persona non grata with the Windows team for some time after that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570803">
				<div id="div-comment-570803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570803">
			November 26, 2007 at 7:28 pm</a>		</div>

		<p>&quot;The registry is not self-documenting. &nbsp;While .ini files are all kinds of nasty, at least one could add comments in place to document what was going on.&quot;</p>
<p>That&#8217;s a good thing. &nbsp;It forces documentation (if it exists at all, which is by no means guaranteed either way) to exist elsewhere &#8212; such as on a website that can be updated if it turns out there&#8217;s a mistake or misleading wording.</p>
<p>&quot;A normal user can open the file for deny-write and prevent the administrator from changing settings. -Raymond&quot;</p>
<p>But administrators can break the lock and modify the file anyway, if they really want to. &nbsp;Admittedly I don&#8217;t think Windows provides an easy mechanism out of the box to do this, but I&#8217;m sure it&#8217;s possible.</p>
<p>&quot;Actually, okay, WinPE 2.0 is available to the public now&quot;</p>
<p>It is? &nbsp;Hey, it is! &nbsp;Cool, I&#8217;ve been wanting to get my hands on that for a while now. &nbsp;Even if it is only for Vista.</p>
<p>&quot;It&#8217;s all about the value proposition. &quot;Hey, here&#8217;s a new API. The new one is more restrictive. You can&#8217;t do as much with the new API as the old one.&quot; That&#8217;s not going to win over many people. -Raymond&quot;</p>
<p>I&#8217;ve seen this exact effect with some of Vista&#8217;s changes, actually (mostly UAC, with apps running LUA by default). &nbsp;I hang around in a forum for software installers, and it seems like every few days someone starts a thread along the lines of &quot;how do I detect Vista so I can make it install into My Documents (or similar) instead of Program Files, since that doesn&#8217;t work&quot;. &nbsp;Then it takes several days of explaining that they shouldn&#8217;t be doing that, and in the end it&#8217;s hard to tell whether they finally got the right idea or whether they&#8217;re just stumbling ahead anyway. &nbsp;Sigh.</p>
<p>I&#8217;m not entirely sure how I feel about the Registry one way or the other, and I tend to use both registry settings and XML config files (which *are* writable by the app!). &nbsp;The files are more useful when targetting an app-on-USB-drive scenario, and they&#8217;re more accessible for user tweaking (although only slightly, since if they&#8217;re not actually on the USB drive then they&#8217;re off in a hidden folder in the user profile, which isn&#8217;t as useful). &nbsp;And I&#8217;ve never been comfortable with having all the settings in one place where it can get munched by a rogue program or bad sector. &nbsp;But it does provide a nice and fairly uniform way to find things (such as locating where an app is installed in the first place), and as Raymond said it&#8217;s better with multi-app crosstalk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571053">
				<div id="div-comment-571053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">foxyshadis</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571053">
			November 27, 2007 at 4:05 am</a>		</div>

		<p>&quot;But administrators can break the lock and modify the file anyway, if they really want to. &nbsp;Admittedly I don&#8217;t think Windows provides an easy mechanism out of the box to do this, but I&#8217;m sure it&#8217;s possible.&quot;</p>
<p>A superuser can close any file handle, or a user can close their own; I have no idea if it&#8217;s possible to change a handle&#8217;s flags, but I&#8217;m sure there&#8217;s an evil undocumented way out there. ;) The best way to close manually is probably Unlocker or system explorer.</p>
<p>&quot;The Windows Registry has only had two real problems:&quot;</p>
<p>Three, the registry structure is pretty badly designed. If you stick to HKLMSoftware and HKCUSoftware it&#8217;s fine, but HKCR and the CU/LM keys that map to it is an unholy mess. I can understand how it got that way (strict limitations on the first implementation, not a terribly high priority then, can&#8217;t do anything about it now) but it&#8217;s still difficult to work with programmatically, let alone manually, and more prone to things breaking when bad software hijacks it than other areas.</p>
<p>I still prefer it to configuration files in random places with random formats; but real APIs are best of all where I can get them. =p</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571063">
				<div id="div-comment-571063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Madman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571063">
			November 27, 2007 at 4:29 am</a>		</div>

		<p>I think the problem with registry is that its widely used by everyone.</p>
<p>No way in hell 99% of applications needs to write data to registry, and no way in hell they need to use msi installers and bloat like that.</p>
<p>XCOPY + INI solves 99% of the problems.</p>
<p>1)Application failure -&gt; XCOPY (whole app or ini only)</p>
<p>2)Uninstall -&gt; DELETE</p>
<p>3)Backup -&gt; COPY *.ini d:myappbackup, zip it if needed.</p>
<p>Instead we have registry, MSI, COM and other nuclear devices to kill flies.</p>
<p>I so miss the good old dos days where things were simple and most applications weren&#8217;t messing your OS structures and configuration.</p>
<p>What you get now, is that every dev thinks that it&#8217;s cool to write &#8216;gold&#8217; to registry on every users machine and leave that &#8216;gold&#8217; behind. Every dev tries to use COM&#8217;s to kill flies. And don&#8217;t let me start on MSI. I think the fact that VS2005SP1 ~300MB (by Microsoft) cannot be installed with 5GB of free space on HDD and ruins the whole system when out of space tells everything. I really do have &#8216;warm&#8217; feeling for this technology.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570873">
				<div id="div-comment-570873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Triangle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570873">
			November 26, 2007 at 8:48 pm</a>		</div>

		<p>&gt; This isn&#8217;t necessarily a problem. &nbsp;If I have a suite of programs, like Office, one application ought to be able to manage the others (or a server config app separate from the server, whatever).</p>
<p>That in itself might not be a problem. Having programs able to party all over the registry isn&#8217;t the same as having programs configure eachother.</p>
<p>&gt; Don&#8217;t forget, the application is running with the exact same privs as the user himself. &nbsp;Even if you tried to do some sort of OS enforced rule here, there are going to be all sorts of holes you can poke into it.</p>
<p>Well, that&#8217;s just the way Windows works. Granted, it&#8217;ll probably never change because of backwards compatibility, but there are certainly OS&#8217;s out there where programs are not run at the privilege of the user.</p>
<p>&gt; Sure, they write some things out but you can always copy the executible to a new machine and it will still work. &nbsp;(heck, the things are pretty genius in how they work as it is)</p>
<p>Now *that* sounds like an idea: Have all the settings embedded into the binary itself :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-570913">
				<div id="div-comment-570913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570913">
			November 26, 2007 at 9:32 pm</a>		</div>

		<p>System administrators like to be able to modify user settings for a number of reasons. &nbsp;To prevent a certain class of user from messing with their machine, breaking things, and wasting everybody&#8217;s time in fixing it is one. &nbsp;To prevent certain applications from being installed is another. &nbsp;To comply with company policy and legal requirements is a third. &nbsp;And that&#8217;s only scratching the surface. &nbsp;Anyone who questions this has obviously never been an admin and seriously shouldn&#8217;t be making statements on it.</p>
<p>If you&#8217;re on a corporate network, your PC and the network resources you access are *NOT* your own private playground. &nbsp;Corporate networks are all about *SHARED* services. &nbsp;That&#8217;s why there are admins.</p>
<p>Now, the Registry. &nbsp;It&#8217;s a good thing because it&#8217;s a single central place where *ALL* user settings can be stored. &nbsp;Far better than having to hunt through the filesystem to locate an INI file (especially when doing it remotely), and far easier for roaming profiles as there&#8217;s only a single file that needs to be mirrored.</p>
<p>Surely it&#8217;s a no-brainer?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-570943">
				<div id="div-comment-570943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">harmony7</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-570943">
			November 26, 2007 at 9:50 pm</a>		</div>

		<p>&gt; It&#8217;s not the configuring part. It&#8217;s the all over the registry part. The program could put its settings in any part of the registry, or create a hundred keys and stick them all under there. </p>
<p>Not to pick on you personally or anything, just wanted to make sure we understand each other.</p>
<p>The convention is to install programs under C:Program Files (or wherever &quot;programs&quot; is configured on the particular system), and to put settings in C:Documents and Settings (or wherever that&#8217;s configured). &nbsp;Under there, you can put user settings in the profile directory, and per-machine settings in &quot;All Users&quot; or whatever.</p>
<p>However, a program can write settings (or anything) anywhere in the file system that it has permission to write to. &nbsp;I&#8217;m sure you&#8217;ve seen badly-designed programs that install in a directory off the drive root, or store their config settings in their own directory, the root directory, or even places like C:WINDOWSSYSTEM32.</p>
<p>Just the same, the convention is to write user-settings under HKCUSoftwareCompany NameApplication Name, and per-machine settings under HKLMSoftwareCompany NameApplication Name.</p>
<p>Programs that do otherwise are just not following the guidelines. &nbsp;This is a design flaw of *that program*, and not Windows or the registry. &nbsp;Things can get equally out of hand using INI files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571093">
				<div id="div-comment-571093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">*</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571093">
			November 27, 2007 at 6:13 am</a>		</div>

		<blockquote><p>
  [Teach a man to fish&#8230; -Raymond]
</p></blockquote>
<p>&#8230;and he will spend all day drunk by the local river.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571113">
				<div id="div-comment-571113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.nikvoronin.com/2007/11/27/pochemu-ini-fajly-ustareli-a-reestr-net/' rel='external nofollow' class='url'>Klatu! Veratu! Ni&#8230;khm-khm! &raquo; Blog Archive &raquo; ???????????? INI-?????????? ????????????????, ?? ???????????? ???????</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571113">
			November 27, 2007 at 7:25 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.nikvoronin.com/2007/11/27/pochemu-ini-fajly-ustareli-a-reestr-net/" rel="nofollow">http://www.nikvoronin.com/2007/11/27/pochemu-ini-fajly-ustareli-a-reestr-net/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571143">
				<div id="div-comment-571143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Totally Agreeing</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571143">
			November 27, 2007 at 8:24 am</a>		</div>

		<p>I just don&#8217;t like how the registry is organized&#8230;.</p>
<p>A better Idea would have been not to have HKLM, HKLU, &#8230;etc.</p>
<p>Maybe something like having a registry that contains something like this:</p>
<p>AdobePhotoshopWindowsFiletypes.psdDefaultAction</p>
<p>AdobePhotoshopWindowsFiletypes.psdIcon</p>
<p>AdobePhotoshopWindowsApplicationPath</p>
<p>AdobePhotoshopUsersAllUsers..</p>
<p>AdobePhotoshopUsersDefaultUser..</p>
<p>AdobePhotoshopUsersUser1..</p>
<p>AdobePhotoshopUsersUser2..</p>
<p>To backup and move Photoshop, move the c:program filesadobephotoshop, as well as the registry starting from AdobePhotoshop&#8230;</p>
<p>To Delete all Photoshop settings, you can delete the tree from there&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571153">
				<div id="div-comment-571153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://cgi.zdnet.de/vista/?p=156' rel='external nofollow' class='url'>Windows Vista Blog | ZDNet.de Test &amp; Tech &raquo; Blog Archiv &raquo; Warum Microsoft die Registry eingef?hrt hat</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571153">
			November 27, 2007 at 8:51 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://cgi.zdnet.de/vista/?p=156" rel="nofollow">http://cgi.zdnet.de/vista/?p=156</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571163">
				<div id="div-comment-571163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571163">
			November 27, 2007 at 8:55 am</a>		</div>

		<p>It seems to me that you can deal with the problem of administrator overrides with multiple sets of settings:</p>
<p>1. Default settings </p>
<p>2. User settings</p>
<p>3. Locked settings</p>
<p>Thus if a setting is present as a locked setting then that value is used, otherwise if it is present as a user setting then that value is used. (How default values work is up to the programmer &#8211; some applications provide overridable administrative defaults, and fail-safe values in case the administrator gets things wrong.)</p>
<p>Applications are already capable of implementing this scheme, but apparently only as a separate layer over the registry or some other API. Ironically a native multi-INI API appears to be easier to implement.</p>
<div class="post">[<i>And yet no program uses this scheme. (And does the user have access to his own locked settings? Sometimes I lock my own settings to prevent other programs from modifying them.) And how is the administrator&#8217;s script supposed to find these INI files anyway? They could be anywhere! -Raymond</i>]</div>
<p>[In 16-bit Windows, three consecutive INI file operations would result in only one parse and one write, because the operating system was co-operatively multi-tasked. When you accessed an INI file, it was parsed into memory and cached. The cache was flushed when you finally yielded CPU to another process.]</p>
<p>According to Undocumented Windows, INT 21 called Dos3Call which called WriteOutProfiles which called NoHookDosCall. (All those functions are exported by KRNL386.EXE but other than that I&#8217;m not claiming any particular accuracy for that statement.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571173">
				<div id="div-comment-571173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://arai.wordpress.com/' rel='external nofollow' class='url'>Amarjeet Singh Rai</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571173">
			November 27, 2007 at 9:10 am</a>		</div>

		<p>Well you see I use CCleaner, and I have enabled the option to store all the setting to an INI file rather than the registry. Because I don&#8217;t want things like in there, since some programs don&#8217;t remove them when they are unistalled.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571183">
				<div id="div-comment-571183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rune Moberg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571183">
			November 27, 2007 at 9:33 am</a>		</div>

		<p>sherriman wrote: &quot;Users with older machines often have a good portion of the registry corrupted. &nbsp;This issue was particularly prevelant on WinME.&quot;</p>
<p>Uhm&#8230; What is your point? Those users probably had a good portion of their filesystem in complete tatters.</p>
<p>NT users who used FAT also experienced &quot;interesting&quot; issues. (albeit not nearly as often as Win9x/ME users)</p>
<p>Let us refer to them as &#8216;idiots&#8217;. NTFS arrived in 1993, lets just all use it, OK?</p>
<p>&lt;sigh&gt;</p>
<p>I can&#8217;t recall ever having had a corrupted registry with Windows NT (been a user since 3.1 launched). Except one time (seven years ago) when a faulty Epox motherboard corrupted a lot of memory accesses so much of the information stored on disk was garbled. I can&#8217;t really blame the design of the registry for that though.</p>
<p>&#8212;</p>
<p>Rune</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571193">
				<div id="div-comment-571193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stephensite.net/WordPressSS/?p=447' rel='external nofollow' class='url'>Stephen&#8217;s Personal Blog &raquo; Blog Archive &raquo; Why are INI files deprecated in favor of the registry?</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571193">
			November 27, 2007 at 9:36 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://stephensite.net/WordPressSS/?p=447" rel="nofollow">http://stephensite.net/WordPressSS/?p=447</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571203">
				<div id="div-comment-571203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571203">
			November 27, 2007 at 9:40 am</a>		</div>

		<p>Well, I think the registry is certainly one of the best ways to store user settings.</p>
<p>Granted, it is not perfect, but a lot of its cons are, as many other times, due to the abuse of some programmers who don&#8217;t read documentation or simply don&#8217;t care.</p>
<p>Regarding the settings migration, I think it is common knowledge that user settings should end up in HKCU and machine/global settings that &nbsp;are only to be set up and changed in HKLM.</p>
<p>Unfortunately, a lot of software writers do not follow this rule and do as they please.</p>
<p>I regularly work on software deployements and one of the funny aspects of it is to find where the corporate registration key is stored to include it in the unattended software package that we will push to workstations (we don&#8217;t want the users to put it by themselves and many times, it doesn&#8217;t get asked by the installer or can&#8217;t be integrated in the answer file).</p>
<p>Several softwares try to hide them from the spots were logic people would look for them at first (probably in a naive hope to prevent easy piracy) : I found one rather popular software storing its registration data to HKEY_CLASSES_ROOT under the name LastGoodKnown, specifically chosen to fool the admin into mistaking it was something used by the &quot;Last Good Known Configuration&quot; boot option of the OS.</p>
<p>I guess these people were those who would have written their important settings to a MORICONSS.DLL file in the Windows directory back in the Win16 days : the registry is just a container and it is up to people to not put trash in it. They would put trash no matter what the container was anyway.</p>
<p>Setting migrations if the rules are followed can be nice and easy.</p>
<p>MS provides export and import function (these .REG files really are great, even though they don&#8217;t migrate the ACL along due to them being plain text files) and they can be fully scriptable through command-line tools like the REG.EXE tool.</p>
<p>That said, many people want/need to have portable version of their software (I would have prefered the term &quot;mobile&quot; as portable doesn&#8217;t really mean this to me, but I wasn&#8217;t really asked).</p>
<p>Writing the settings into registry, exporting them and then deleting them when the application is closed is kind of dirty&#8230; and for those, the cleaner way is probably to use local files.</p>
<p>I assume it is why people started to use XML, a format that I don&#8217;t really like much when it comes to storing user settings because it isn&#8217;t scriptable with any standard tool, the file architecture (I don&#8217;t mean the format, I mean the hiearchy of the file) is always different from one application to the other, so when you want to change just one setting inside the file properly and securely, you have to write your own program using a XML parser, which understands that particular XML file logic !</p>
<p>Changing a single setting on the registry is much easier and can be done in a lot of easy ways : Functions from the API, WSH, command-line tools, reg files, etc&#8230;</p>
<p>I think the only real &quot;issue&quot; with the registry is that it doesn&#8217;t provide a solution for those &quot;portable software&quot; that many people, including me, like using from time to time.</p>
<p>I would like if there could be a way to tell them to use a locally stored .REG file rather than the real registry , although I understand it would make all the INI issues come back but at least, the format would be the same and be importable inside the registry again at anytime and the other way around. At least, the logical structure of the data wouldn&#8217;t change. Only the format would (reg file or local registry) and they could be easy interchangeable.</p>
<p>On another matter, Raymond, you answered this to commenter AlmostAlive several posts earlier &nbsp;:</p>
<p>&quot;Or if you want to have two sets of rules, then everybody will say, &quot;Well screw the new rules. I&#8217;ll just use the old rules. They didn&#8217;t try to stop me from replacing file XYZ.&quot; -Raymond&quot;</p>
<p>And it made me wonder of something : in your opinion, what made programmers start using the registry vs the old INI files, especially after the launch of Win95 ?</p>
<p>I mean, due to backwards compatibility, it wasn&#8217;t like they couldn&#8217;t have kept using INI files as they used to do so far and most programs didn&#8217;t really need increased security to store their user settings, especially back then.</p>
<p>However, the Registry very quickly became popular (at least, from my perspective), from the small freeware writer up to the big companies. Considering how changing minds can be time consuming (like having users not requiring admin-rights to run some apps), I would be interested to hear your opinion on what made the registry adoption so successful, especially since the previous solution (INI files) was still available for backwards compatibility reasons.</p>
<p>Thanks,</p>
<p>JC.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571213">
				<div id="div-comment-571213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571213">
			November 27, 2007 at 9:59 am</a>		</div>

		<p>Madman: &nbsp;I think your perspective on Installers demonstrates a fundamental lack of understanding you believe things should work versus how they do actually work.</p>
<p>If you took a few minutes to familiarize yourself with Windows Installer, I think you&#8217;d find that it can do pretty much whatever you want to do with it. &nbsp;Windows Installer supports rollbacks in the case of failed installs. &nbsp;I shouldn&#8217;t need to remind you how &quot;wonderful&quot; it is when you&#8217;re installing something and it fails halfway through and now you have a broken app. &nbsp;It doesn&#8217;t matter whether it used INI files or Registery or what, that app is pooched. &nbsp;Happens on *nix machines and Windows machines too.</p>
<p>Also, back in the &quot;good old dos days&quot; many applications wantonly messed with your system, OS configuration, memeory layout, and even directly stepped on and took over OS functionality to suit their own desires.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571273">
				<div id="div-comment-571273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bjorn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571273">
			November 27, 2007 at 11:07 am</a>		</div>

		<p>OK, which Slashdot article actually links to this page? I was actually reading /. yesterday and the closest thing I saw was &#8220;Microsoft building data center in Siberia.&#8221;</p>
<div class="post">[<i>It was pre-emptive. (And it worked. The article didn&#8217;t show up on Slashdot.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571343">
				<div id="div-comment-571343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571343">
			November 27, 2007 at 12:29 pm</a>		</div>

		<p>&quot;I&#8217;m sure you&#8217;ve seen badly-designed programs that install in a directory off the drive root, or store their config settings in their own directory, &quot;</p>
<p>&#8230;or badly-designed users that have been using the program since it was a DOS program and insist on this behavior, and complain loudly and persistently when we try to follow Windows norms such as installing in Program Files and putting data files in My Documents or Application Data&#8230; welcome to my world.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571383">
				<div id="div-comment-571383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anarchist</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571383">
			November 27, 2007 at 12:49 pm</a>		</div>

		<p>[The administrator can control what the employees run on the computer. That&#8217;s why it&#8217;s called the administrator. I think that&#8217;s the fundamental disagreement. This INI vs registry thing is just a cover. -Raymond]</p>
<p>Exactly: The function of the registry is to exchange the roles of User and Tool.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571073">
				<div id="div-comment-571073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">sandman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571073">
			November 27, 2007 at 5:19 am</a>		</div>

		<p>The big thing as a administrator of both Un*x and windows systems that I miss wiht the registry is being able</p>
<p>to add comments to a config file referring to the change a, who made it and the helpdesk ticket which made the change required.</p>
<p>I can add these as a comment to the files themselves on Un*x or even add the files as a whole to a SCM system so all the chanegs are dynamically tracked.</p>
<p>AT the system level the is really powerful &#8211; most unix apps don&#8217;t write back to their system config (in /etc) they do have write back to the system state (in /var) so the locking issue which Raymond rightly points out is moot here. And the trackability and undoability which you just cant easily get with he registry (How many system restore points would you need? And how do you comment them) is invaluble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571403">
				<div id="div-comment-571403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Greg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571403">
			November 27, 2007 at 1:22 pm</a>		</div>

		<p>&#8220;XML configuration files are read-only&#8221;</p>
<p>Strange statement. I suppose this is true if you use only provided framework code. After all, if Microsoft didn&#8217;t write it and include it in the framework, it can&#8217;t possibly be done.</p>
<p>I&#8217;m so tired of that attitude from all the new plug the pieces together programmers.</p>
<div class=post>[<i>You need to read that quoted sentence in context.&nbsp;I may have to bring back the nitpicker&#8217;s corner; people are getting nitpicky again.&nbsp;-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571083">
				<div id="div-comment-571083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571083">
			November 27, 2007 at 5:39 am</a>		</div>

		<p>@JamesNT: &#8220;The Windows Registry has only had two real problems&#8221;</p>
<p>I *do* think the migration problems are real. If I want to back up my program settings and reinstall, I know how to do that on Unix for the most part. Backing up /home/evan does most of the trick, and backing up /etc does pretty much all of the rest.</p>
<p>After reinstallation, or migration to a different system, restoring is comparatively easy. Restoring user-specific settings is just a matter of restoring /home/evan. Restoring /etc settings is a bit more problematic, because you may have to merge changes, but this too can be done.</p>
<p>Contrast this against the registry. What do I need to back up? HKCU/Software and HKLM/Software? Will that get too much? Not enough? Is it safe? If something breaks after I do that, what do I need to change to fix it? On Unix, I could just delete my old config files for the program that doesn&#8217;t work. Sure I lose the settings, but everything else works.</p>
<p>As a desktop user, this is the major issue I have with the registry. Many of the benefits of the registry (e.g. fine-grained permission controls) more or less vanish in this environment, so I&#8217;m not a big fan.</p>
<div class="post">[<i>HKCU backs up your user, HKLM backs up your system. Restoring it is a big more problematic, because you have to merge changes, but this too can be done. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571433">
				<div id="div-comment-571433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jorge Diaz tambley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571433">
			November 27, 2007 at 1:57 pm</a>		</div>

		<p>I thought there was a big agreement in this issue. Now I see I was wrong.</p>
<p>My big reason comes from the slogan of a company i worked for: &#8216;don&#8217;t put all the eggs in the same basket&#8217;</p>
<p>Anytime I read an article to change some settings in the registry I see a legend saying &#8216;do it at your own risk&#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571453">
				<div id="div-comment-571453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571453">
			November 27, 2007 at 2:06 pm</a>		</div>

		<p>[And yet no program uses this scheme. (And does the user have access to his own locked settings? Sometimes I lock my own settings to prevent other programs from modifying them.) And how is the administrator&#8217;s script supposed to find these INI files anyway? They could be anywhere! -Raymond]</p>
<p>Opera on Linux (and possibly other *nixes) does this. It has 2 configuration files in /etc, one is the default (which can be overriden by user), and one that overrides user&#8217;s settings.</p>
<div class=post>[<i>That&#8217;s two out of three (or four, if you also want to count user-locked settings, or more if you want to admit multiple administrators, like say a group administrator and a network administrator). -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571493">
				<div id="div-comment-571493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.1060.org/blogxter/publish/5' rel='external nofollow' class='url'>Steve Loughran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571493">
			November 27, 2007 at 2:43 pm</a>		</div>

		<p>I do find it funny that Linux configuration managemenet is held up as an example of goodness, because its pretty hard to work with.</p>
<p>one problem linux has is that the main installer frameworks: RPM and DEB only act (declaratively)on the granularity of a file. So the RPM DB remembers the MD5 sum of every file, and who it belongs to, which is great for files that are never changed (you mark them as conf files in the .spec). When you uninstall files,. changed conf files are retained. When you upgrade RPMs, the manager compares MD5 checksums and if they havent changed (or if they have changed to that of the upgraded file) , it does the upgrade (which may change permissions)</p>
<p>Where this all falls down is if a file needs to be changed. Want to add a new device to /etc/X11/xorg.conf? Manually insert it then patch the RPM database afterwards to pretend its always been that way. Want to add a new user? Try using the commands built in to some distros, fall back to patching /etc/password and the shadow accounts if not.</p>
<p>No, linux should not be held up as an ideal, merely a best in class. Where linux works is that you can always bring up the system in text mode and edit xorg.conf with vi until it works -indeed vi has a special xorg.conf mode, that is such a common use case.</p>
<p>Modern thinking is tools like puppet and SmartFrog that don&#8217;t just change a file, they change the state of machine and keep checking to make sure that change is there. So you don&#8217;t apply a one off operation to a file, you declare what changes you want to be made to the system, the runtime remembers it (possibly in its own db) and then pushes the system into that state. Where these tools work is they can keep thousands of boxes in the required state -you just have a runtime on each one.</p>
<p>That is the future. things like transacted filesystems and declarative formats for installation files help. RPM and DEB are half way houses.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571693">
				<div id="div-comment-571693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571693">
			November 27, 2007 at 8:11 pm</a>		</div>

		<p>&gt;And what if you want to secure one of the per-user settings but not another?</p>
<p>Do you mean a password? If each user had its own INI file in his folder hierarchy which can&#8217;t be accessed by other users save administrator all of his per-user settings would be secured which surely wouldn&#8217;t hurt, or would it?</p>
<div class=post>[<i>I mean I want to lock some per-user settings so other programs (which run as me) can&#8217;t modify them. -Raymond</i>]</div>
<p>&gt;Are you saying that one should never run two copies of the same program at the same time?</p>
<p>Yes if they can have MDI interface.</p>
<p>No if they are Calc.exe &#8212; in that case &#8220;Settings cannot be changed while you have multiple instances of Calc.exe open&#8221; dialog box would suffice.</p>
<div class=post>[<i>I can&#8217;t tell if you&#8217;re being serious or not. -Raymond</i>]</div>
<p>&gt;Now you&#8217;re being disingenuous</p>
<p>No, I am just applying your own security reasoning to the problem at hand.</p>
<p>&gt;I like how in one branch of the comments&#8230;</p>
<p>I know. But if something is <em>standardized</em> it automatically means it is <em>not</em> voluntarily. That is what standards are for &#8212; to make people comply to them. I never heard anyone complain about standardizing food labeling for example. If you don&#8217;t want to deal with substandard products when it comes to food, I don&#8217;t see why you would want to tolerate substandard software?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-571723">
				<div id="div-comment-571723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571723">
			November 27, 2007 at 10:02 pm</a>		</div>

		<p>&quot;I don&#8217;t see why you would want to tolerate substandard software?&quot;</p>
<p>You&#8217;ve obviously never bought Windows from an OEM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571743">
				<div id="div-comment-571743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571743">
			November 27, 2007 at 10:36 pm</a>		</div>

		<p>[I know. But if something is _standardized_ it automatically means it is _not_ voluntarily. That is what standards are for &#8212; to make people comply to them. I never heard anyone complain about standardizing food labeling for example. If you don&#8217;t want to deal with substandard products when it comes to food, I don&#8217;t see why you would want to tolerate substandard software?]</p>
<p>Oh, come on, now you&#8217;re being ridiculous.</p>
<p>The ONLY reason companies adhere to standards like food labels is because it is a MANDATORY standard, not a RECOMENDED one. If a company refuses the governmental agency that issued the standard (the FDA for example) will impose fines, restrictions, and whatever other pain and suffering it can come up with to force the rouge company into line.</p>
<p>When Moron Software Inc decides to update SuperFoobar, and in doing so violates all sorts of Windows standards, what is Microsoft going to do? &nbsp;Call them? Send them an email? Send in a hit squad? &nbsp;I&#8217;ll give you a hint: they will do nothing because Microsoft has no *authority*. &nbsp;Any standards put forth by Microsoft for Windows development are nothing more than SUGGESTIONS and best practice RECOMMENDATIONS. They carry no weight.</p>
<p>Given your other comments I don&#8217;t think there&#8217;s any way you&#8217;re serious so I&#8217;ll stop now. Shoo troll.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-571863">
				<div id="div-comment-571863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571863">
			November 28, 2007 at 7:34 am</a>		</div>

		<p>[And yet no program uses this scheme.]</p>
<p>Well, Netscape 7.2 (for instance) stores preferences in multiple locations; if an optional administrative preference file exists any values it contains take precedence otherwise any values in user.js take precedence at startup otherwise any values in prefs.js are used otherwise any values in the default preference files are used otherwise the preference system returns an error which the calling code often deals with by using a hardcoded default value.</p>
<p>[And how is the administrator&#8217;s script supposed to find these INI files anyway?]</p>
<p>I&#8217;m assuming that the application looks for the administrator&#8217;s optional overrides in a well-known location such as Group Policy.</p>
<p>[I mean I want to lock some per-user settings so other programs (which run as me) can&#8217;t modify them. -Raymond]</p>
<p>I&#8217;m sure it was you who pointed out in an earlier entry that programs which run as you can unlock and modify any settings that you (as you) can lock.</p>
<div class="post">[<i>They can, but in my experience, programs respect the lock, so the trick is effective. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-571913">
				<div id="div-comment-571913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">e.thermal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-571913">
			November 28, 2007 at 9:38 am</a>		</div>

		<p>Raymond you mentioned that self documenting config files is enough rope to hang yourself. &nbsp;And you are correct when are referring to the why. For example &quot;Why would I change this value from x to y&quot; should be given enough info and detail and this should be in documentation. &nbsp;But where the benefit comes from having the documentation in the config file is when there is finite values for a config option. It&#8217;s good to have the enumerated values listed there. &nbsp;For example in the ASP.NET web.config files sessionstate values. &nbsp;It&#8217;s good if you know I want it to be stored on the SQL server but you can&#8217;t remember what the exact synatx needs to be. &nbsp;Also good to know min and max values and so on. &nbsp;But you&#8217;re right documentation should be in the documentation, but having some help handy is really nice. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-572033">
				<div id="div-comment-572033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572033">
			November 28, 2007 at 3:14 pm</a>		</div>

		<p>One other problem with INI files (or config files in general) is that they don&#8217;t play nice with Group Policy. &nbsp;You could always write a login script to dump loads of text files on a PC, but that inelegant and it doesn&#8217;t work with periodic background GP refresh.</p>
<p>I&#8217;m of the opinion that if a company is serious about having their software used on a corporate network, then they should (a) provide an MSI for installation, (b) provide a customisation tool for that MSI so that an admin can select which components users get, and (c) provide an ADM file so that settings can be centrally set.</p>
<p>But that&#8217;s wandering a bit off topic. &nbsp;The ADM file is the relevant part here. &nbsp;Group Policy will use that to write app settings to the registry, and hence save the poor beleaguered admin from having to go around thousands (or tens of thousands) of PCs every time a trivial setting change is required.</p>
<p>And you don&#8217;t get that with config files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-572123">
				<div id="div-comment-572123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://greasemonkey.nonlogic.org' rel='external nofollow' class='url'>GreaseMonkey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572123">
			November 28, 2007 at 5:06 pm</a>		</div>

		<p>I think people are just being harsh about it because they don&#8217;t like the concept of a binary file. However, binary files are indeed faster. Although I think I may have to defrag the registry every now and then.</p>
<p>It sucks when people spam the registry, agreed. And it can be hell to manually install a program (which I have had to do in the past). But one of the only alternatives to match it would be to use the file system and folders (which would be slower; I&#8217;ve programmed a(n incomplete) FAT driver before)</p>
<p>Right now, I&#8217;m having a look into the (Windows 95) registry to see what&#8217;s there. Although I opened it up in EDIT.COM as a binary file and found this&#8230;</p>
<p>(garbage)*The Microsoft Windows 95 Product Team!.{869DADA0-42A0-1069-A2E7-08002B30309D}*THEMIC~1.{86*(garbage)</p>
<p>(* = null character)</p>
<p>Yes, I activated that easter-egg. But I think that&#8217;s a bit off-topic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-572223">
				<div id="div-comment-572223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Fitzpatrick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572223">
			November 29, 2007 at 1:51 am</a>		</div>

		<p>An app&#8217;s registry settings are not easily portable and are hard to edit. XML is hard to edit too. For this reason I will use INI files in nearly all of my apps, along with XML and reg settings.</p>
<p>I use INI files for config settings read-in when the app starts. A user can easily change &nbsp;an INI file in notepad to reset a default path, a scale factor, or something trivial. If there wasn&#8217;t GetPrivateProfileString() I&#8217;d write it myself (and I have).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-572243">
				<div id="div-comment-572243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572243">
			November 29, 2007 at 2:44 am</a>		</div>

		<p>&#8220;What if a program modifies your .emacsrc (to add a handler for its private file type) and your fvwm2rc (to add a context menu for the file type) and your .cshrc (to add itself to your path)? Now its settings are stored in eight lines in three separate files. Good luck migrating that. -Raymond&#8221;</p>
<p>Let me stay a bit off topic to explain it.</p>
<p>1) While installing a program should not write anything to user home directory. (Note. while installing, the program has no clue where the user home directory is)</p>
<p>Instead it should add something to the system-wide settings stored in /etc. Then user will have them automatically (application settings I mean, not the aliases in .*rc files).</p>
<p>1a) After the first launch by the user the program should ask if it should modify his settings (namely .emacsrc and .fvwm2rc). Also it may create directory for keeping the override of the global settings (say ~/.program_name).</p>
<p>2) Instead of writing the path it should place its binary in say /usr/local/bin</p>
<p>3) lets suppose that happens and some ugly designed program did that. Now how would I migrate the user to other system? Exactly the same way I would do it in any other case:</p>
<p>cp -r /home/user /mnt/other_system/home/</p>
<p>That&#8217;s it, now I have the same settings at the other system.</p>
<p>Nitpicker&#8217;s corner: no I was not speaking about the corporate install with some locked settings. </p>
<div class="post">[<i>Copying the user profile also copies the registry, so it&#8217;s all a wash. (I find it interesting that the unix way is to install all programs into the same directory. Imagine if Windows did that&#8230;) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-572283">
				<div id="div-comment-572283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">global assembly cache</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572283">
			November 29, 2007 at 5:42 am</a>		</div>

		<p>GAC = Registry2</p>
<p>gac is currently not a generic storage area (which registry has become), but gac is atleast equivalent to the classes_root part of registry, which was the original intent of registry and the only part that existed i 16-bit windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-572293">
				<div id="div-comment-572293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572293">
			November 29, 2007 at 7:01 am</a>		</div>

		<p>[Copying the user profile also copies the registry, so it&#8217;s all a wash. (I find it interesting that the unix way is to install all programs into the same directory. Imagine if Windows did that&#8230;) -Raymond]</p>
<p>That would indeed be a dumb way to do it for most programs on Windows. (I don&#8217;t like it on Unix either; more on that in a sec.) But the DOS/Windows way completely falls down in Unix, because it&#8217;s way more heavily command-line based.</p>
<p>Imagine if %PATH% variable had 200 directories in it because it needed to say C:Program FilesGrep;C:Program FilesFind;C:Program FilesLess;C:Program FilesLs;C:Program FilesRm;C:Program FilesMv etc.</p>
<p>(I&#8217;m exaggerating there, because probably all of the above would be more like c:Program Filescoreutils or something, but my point stands. Since way more stuff is CLI-based, you would need to have way more stuff in your path.)</p>
<p>Personally, I think the best approach is somewhat of a hybrid. Programs should install into an isolated directory, as they do in Windows, but then put a symbolic link in a common location (/usr/bin on Linux), or otherwise &quot;register&quot; themselves so they are available on the command line.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-572303">
				<div id="div-comment-572303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572303">
			November 29, 2007 at 7:11 am</a>		</div>

		<p>Are you are proposing a registry for unix? ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-572323">
				<div id="div-comment-572323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Madman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572323">
			November 29, 2007 at 8:03 am</a>		</div>

		<p>Bryan:[Madman: &nbsp;I think your perspective on Installers demonstrates a fundamental lack of understanding you believe things should work versus how they do actually work.</p>
<p>If you took a few minutes to familiarize yourself with Windows Installer, I think you&#8217;d find that it can do pretty much whatever you want to do with it. &nbsp;Windows Installer supports rollbacks in the case of failed installs. &nbsp;I shouldn&#8217;t need to remind you how &#8220;wonderful&#8221; it is when you&#8217;re installing something and it fails halfway through and now you have a broken app. &nbsp;It doesn&#8217;t matter whether it used INI files or Registery or what, that app is pooched. &nbsp;Happens on *nix machines and Windows machines too.</p>
<p>Also, back in the &#8220;good old dos days&#8221; many applications wantonly messed with your system, OS configuration, memeory layout, and even directly stepped on and took over OS functionality to suit their own desires.]</p>
<p>Last time I did VS update, windows installer ruined the whole system, yea, not VS, but system. Including frameworks, redists and who knows what else. Rollback just got stuck for 5 hours, and progress bar didn&#8217;t even moved.</p>
<p>In xcopy world, you can just copy the darn thing over if something fails. And that takes 2 minutes for 4GB or so. Try and beat that!</p>
<div class="post">[<i>Xcopy is a great world if your program fits the model. Not all programs can. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-572373">
				<div id="div-comment-572373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Madman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572373">
			November 29, 2007 at 11:37 am</a>		</div>

		<p>[Xcopy is a great world if your program fits the model. Not all programs can. -Raymond]</p>
<p>That&#8217;s true, unfortunately trend to make thing simple seems to diminish, or so it seems.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-572383">
				<div id="div-comment-572383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572383">
			November 29, 2007 at 11:50 am</a>		</div>

		<p>Madman: &nbsp;Again, you fail to have any conception of how complicated that VS installation is.</p>
<p>Don&#8217;t you think if they could have a self-extracting zip file that installed everything to the folder you wanted, they would? &nbsp;The XCopy world left us a long time ago. &nbsp;That&#8217;s why there&#8217;s a blog called &quot;When Setup Isn&#8217;t just XCopy&quot;.</p>
<p>Not even Linux runs on an XCopy world anymore. &nbsp;That&#8217;s why the top distros all have centralized or distributed package management systems as their focal feature.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-572393">
				<div id="div-comment-572393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor Levicki</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572393">
			November 29, 2007 at 11:58 am</a>		</div>

		<p>&gt;I mean I want to lock some per-user settings so other programs (which run as me) can&#8217;t modify them.</p>
<p>Ah you meant global settings, right?</p>
<p>Because the way I see it Word should not change Excel&#8217;s INI files.</p>
<p>You actually meant say Explorer or Windows INI settings which various &#8220;tweak&#8221; and &#8220;optimization&#8221; utilities like to fiddle with without asking the user?</p>
<p>There must be a solution for that. Let me think&#8230;</p>
<p>Aha, you could do something like this:</p>
<p>sometype AppLockKey = CreateAppSpecificGlobalSettingsLockKey(); // this creates a key specific for your app</p>
<p>SetPrivateProfileInt(&#8220;DontCacheThumbnails&#8221;, 0);</p>
<p>LockPrivateProfileInt(&#8220;DontCacheThumbnails&#8221;, AppLockKey);</p>
<p>Now only the program which passes correct key (the one who locked it) can change DontCacheThumbnails entry.</p>
<p>To unlock:</p>
<p>sometype AppLockKey = GetAppSpecificGlobalSettingsLockKey(); // this retrieves your app key created above</p>
<p>UnLockPrivateProfileInt(&#8220;DontCacheThumbnails&#8221;, AppLockKey);</p>
<p>SetPrivateProfileInt(&#8220;DontCacheThumbnails&#8221;, 1);</p>
<p>Easy, right?</p>
<div class="post">[<i>Woo-hoo, you&#8217;re reinventing the registry just with a different backing store. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-572403">
				<div id="div-comment-572403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CmraLvr2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572403">
			November 29, 2007 at 12:22 pm</a>		</div>

		<p>Amusing. &nbsp;I particularly liked the &quot;If MS had done X like they should have, then Y wouldn&#8217;t be a problem&quot; stance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-572443">
				<div id="div-comment-572443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572443">
			November 29, 2007 at 2:20 pm</a>		</div>

		<p>Mike Fitzpatrick wrote:</p>
<p>&quot;An app&#8217;s registry settings are not easily portable and are hard to edit. XML is hard to edit too. For this reason I will use INI files in nearly all of my apps, along with XML and reg settings.</p>
<p>I use INI files for config settings read-in when the app starts. A user can easily change &nbsp;an INI file in notepad to reset a default path, a scale factor, or something trivial. If there wasn&#8217;t GetPrivateProfileString() I&#8217;d write it myself (and I have).&quot;</p>
<p>Thats for the heads-up. &nbsp;Must make a mental note to never buy any of your apps for my network.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-572563">
				<div id="div-comment-572563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-572563">
			November 29, 2007 at 6:54 pm</a>		</div>

		<blockquote><p>
  Personally, I think the best approach is somewhat of a hybrid. Programs should install into an isolated directory, as they do in Windows, but then put a symbolic link in a common location (/usr/bin on Linux), or otherwise &quot;register&quot; themselves so they are available on the command line.
</p></blockquote>
<p>This is what some distros do with binary-only programs &#8211; they each get installed to /opt/program_name, then the symlinks (and in a few cases startup scripts) are placed in /opt/bin.</p>
<p>Speaking of Windows Installer, fixing the problems it causes brings in a nice chunk of my income. It&#8217;s not just the VS installer, I&#8217;ve seen a ton of other problems, and most of the errors it gives out are pretty criptic (or it doesn&#8217;t show an error at all, but just rolls back). The idea is nice, but the implementation is severely lacking.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-573113">
				<div id="div-comment-573113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.georg-rottensteiner.de' rel='external nofollow' class='url'>Georg Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-573113">
			December 1, 2007 at 1:02 am</a>		</div>

		<p>After the first few nostalgic &quot;i like inis better&quot; i came to prefer the registry.</p>
<p>I think a lot of problems stem from the fact that programmers need to manually access the registry to install extension types and similar.</p>
<p>There should be an API which will hide the registry accesses. I&#8217;m talking about things like registering a file extension. The developer has to look up the how-to in the MSDN (or worse, discover by trial and error). If there was a nice function like RegisterFileType which does all the dirty work a lot of registry errors might be prevented.</p>
<p>It still does not force developers to use it though&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-573313">
				<div id="div-comment-573313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">setsquare</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-573313">
			December 2, 2007 at 7:31 pm</a>		</div>

		<p>Surely all the problems you list for ini files are there because it got deprecated, and no-one at MS was allowed to fix any bugs are add features to it since Windows 3.1. I mean the 32K size limit would probably get fixed just by recompiling the library with a 32-bit C compiler rather than a 16-bit C compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-573333">
				<div id="div-comment-573333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://architekturaforum.hu/blogs/gerleim/archive/2007/12/03/config-233-s-ini-233-s-registry.aspx' rel='external nofollow' class='url'>Gerlei Márton blogja az Architektúra Fórumon</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-573333">
			December 3, 2007 at 2:40 am</a>		</div>

		<p>M&#250;ltkor &#237;rtam a registry matat&#225;sr&#243;l , most ugyanonnan v&#233;ve &#8211; t&#246;bb mint &#8211; ihletet, feltenn&#233;m a k&#233;rd&#233;st</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-573863">
				<div id="div-comment-573863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://architekturaforum.hu/blogs/gerleim/archive/2007/12/04/config-es-ini-es-registry.aspx' rel='external nofollow' class='url'>Gerlei Márton blogja az Architektúra Fórumon</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-573863">
			December 3, 2007 at 11:06 pm</a>		</div>

		<p>M&#250;ltkor &#237;rtam a registry matat&#225;sr&#243;l , most ugyanonnan v&#233;ve &#8211; t&#246;bb mint &#8211; ihletet, feltenn&#233;m a k&#233;rd&#233;st</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-575983">
				<div id="div-comment-575983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tomstechblog.com/post/2007/11/Quickie-Why-did-Windows-ditch-ini-files-for-the-Registry.aspx' rel='external nofollow' class='url'>TomsTechBlog.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-575983">
			December 8, 2007 at 3:31 pm</a>		</div>

		<p>Quickie: Why did Windows ditch .ini files for the Registry</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-588963">
				<div id="div-comment-588963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnet.org.za/trumpi/archive/2008/01/12/our-daily-link-2008-01-12.aspx' rel='external nofollow' class='url'>Trumpi's blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-588963">
			January 12, 2008 at 4:15 pm</a>		</div>

		<p>I&amp;#39;m back from holiday with over 1000 feeds to read. I also got my new gigabit router today. Heard</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-591793">
				<div id="div-comment-591793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://invista.wordpress.com/2008/01/21/registry/' rel='external nofollow' class='url'>Registry &laquo; In Vista</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-591793">
			January 21, 2008 at 4:45 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://invista.wordpress.com/2008/01/21/registry/" rel="nofollow">http://invista.wordpress.com/2008/01/21/registry/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-604433">
				<div id="div-comment-604433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.techmount.com/index.php/20080226/daily-friction-308/' rel='external nofollow' class='url'>TechMount &raquo; Archive &raquo; Daily Friction #308</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20071126-00/?p=24383#comment-604433">
			February 26, 2008 at 11:16 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.techmount.com/index.php/20080226/daily-friction-308/" rel="nofollow">http://www.techmount.com/index.php/20080226/daily-friction-308/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

