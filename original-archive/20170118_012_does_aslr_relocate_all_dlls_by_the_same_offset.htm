<html>
<head>
<title>Does ASLR relocate all DLLs by the same offset?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Does ASLR relocate all DLLs by the same offset?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 18, 2017 / year-entry #13</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">No.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I've seen multiple claims that
the Windows implementation of
<a HREF="http://en.wikipedia.org/wiki/Address_space_layout_randomization">
ASLR</a>
chooses a single random
offset and applies that same offset to all DLL base addresses.
</p>
<blockquote CLASS="q"><p>
When the operating system loads,
it applies
<a HREF="http://stackoverflow.com/a/34807175/902497">
a fixed random value to the DLL base</a>.
&hellip;
The ASLR doesn't move DLL randomly.
Without ASLR, if you get collisions, then you will get them with ASLR. 
</p>
</blockquote>
<blockquote CLASS="q"><p>
If two DLLs have base addresses to designed to place them consecutively,
<a HREF="http://stackoverflow.com/a/10114585/902497">
they'll still be consecutive even with ASLR</a>.
</p>
</blockquote>
<p>In other words, the claim is that if you have two DLLs,
call them DLL1 with base address <var>base1</var> and
DLL2 with base address <var>base2</var>,
then,
assuming there are no base address collisions with already-loaded
DLLs,
ASLR will load the two DLLs at
<var>base1</var> + <var>N</var> and <var>base2</var> + <var>N</var> for
some value of <var>N</var> (possibly negative).
In particular, this means that if <var>base1</var>
and <var>base2</var> are adjacent, then the two DLLs
will remain adjacent after ASLR,
and if the two DLLs have colliding base addresses,
then they will also have colliding base addresses
after ASLR.
</p>
<p>
But it's not true,
and as far as I can tell, it has never been true.
</p>
<p>
ASLR chooses the base address pseudo-randomly,
though it does take some of the original base addresses
into account.
For example, if the original base address was below
the
4<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">GB</a>
boundary, then the new pseudo-random base
address will also be below the 4GB boundary.
</p>
<p>
But it doesn't try to preserve relative base addresses.
Each DLL is assigned a new pseudo-random base address independently.
There is no correlation, or at least there is no conscious
effort to correlate them.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1280355">
				<div id="div-comment-1280355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280355">
			January 18, 2017 at 7:45 am</a>		</div>

		<p>Wouldn&#8217;t a constant offset weaken ASLR to the point of near-irrelevance?  Code that an exploit wishes to run would simply be at a constant offset from the current code, so instead of jumping directly to 0xSomeAddress, it could just jump to EIP + offset</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1280365">
				<div id="div-comment-1280365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Caron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280365">
			January 18, 2017 at 7:48 am</a>		</div>

		<p>This is a crazy idea that all DLLs would be moved together&#8230; That rather defeats the point of ASLR!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1280375">
				<div id="div-comment-1280375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280375">
			January 18, 2017 at 8:19 am</a>		</div>

		<p>The only ALSR related nonsense I&#8217;ve ever paid any sort of attention to, and even then only in &#8220;eh, probably&#8221; sense was that the loader maps the DLL once for the entire system for the duration of the module&#8217;s lifetime in memory insofar as the module is ALSR compatible. I&#8217;ve taken this to mean that the system likes sharing the PTEs for the modules for as long as it can even though there is no requirement to do so; and I wouldn&#8217;t be surprised if this was turned off in some cases. To me it also read as: The system may change the mapped address at whim if the module is unloaded and reloaded into physical ram (e.g. all processes had stopped using the module and then one loaded it again).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-msn odd alt depth-2" id="comment-1280826">
				<div id="div-comment-1280826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/poizan42' rel='external nofollow' class='url'>poizan42</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280826">
			January 21, 2017 at 12:51 pm</a>		</div>

		<p>Yes, it&#8217;s basically a trade-off between performance and security. x64 code can be position independent without requiring relocations, x86 PIC code comes with a performance penalty. But even if all the code is PIC so the pages can be shared no matter where they are loaded, there is still some performance penalty on context switches by the larger number of PTEs that must be changed.</p>
<p>If you truly want security before all else you should probably use OpenBSD instead, which has even gone as far as having per-section ASLR (combine that with compiling with -ffunction-sections and -fdata-sections and you get per function and per data item ASLR)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1280376">
				<div id="div-comment-1280376" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280376">
			January 18, 2017 at 9:37 am</a>		</div>

		<p>By the way, (in the absence of ASLR), what is the best way to assign &#8220;preferred base addresses&#8221; to a solution&#8217;s DLLs? Simply run the program that loads them all and write down the addresses at which they were loaded?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude odd alt depth-2" id="comment-1280395">
				<div id="div-comment-1280395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280395">
			January 18, 2017 at 9:53 am</a>		</div>

		<p>Don&#8217;t, just set the no fixed base address and the ALSR flags. The loader will figure it out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1280585">
				<div id="div-comment-1280585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars Viklund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280585">
			January 19, 2017 at 8:56 am</a>		</div>

		<p>Recording the bases that the modules happen to load at seems a bit brittle in the face of changes, but sure, it&#8217;s one way. I&#8217;d recommend a notebook and a list of module sizes.</p>
<p>What&#8217;s the thing you hope to achieve with this? A less fragmented address space in 32-bit? Some cache effects? Somewhat less slow load times? Warm fuzzy feeling?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1280385">
				<div id="div-comment-1280385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280385">
			January 18, 2017 at 9:47 am</a>		</div>

		<p>If you&#8217;ve written any kind of software where this would be a desirable or necessary property, you need to rethink your life choices.</p>
<p>In fact, outside of malware writers, the need to rely on any kind of base address for any DLL whatsoever should be considered suspect in the post 16-bit era where such things are no longer possibly worthwhile for a micro-optimization, even before we take ASLR into account.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1280405">
				<div id="div-comment-1280405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280405">
			January 18, 2017 at 11:11 am</a>		</div>

		<p>Having a fixed base address lets you strip relocations. Loading a DLL at its base address was much faster than any other address prior to Windows 8. It may be obsolete *now* but it&#8217;s no relic of 16 bit land.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1280415">
				<div id="div-comment-1280415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280415">
			January 18, 2017 at 11:41 am</a>		</div>

		<p>Right, setting a particular base address to prevent fixups may be an optimization, but your code certainly shouldn&#8217;t depend on being at a particular address &#8212; your code shouldn&#8217;t know about it and it shouldn&#8217;t affect the correctness of your program.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even depth-3 parent" id="comment-1280475">
				<div id="div-comment-1280475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280475">
			January 18, 2017 at 5:02 pm</a>		</div>

		<p>I&#8217;d think even with such benefit it&#8217;d only make sense for in-house software to &#8220;abuse&#8221; it, because it leads to &#8220;what if two DLLs requests the same base address&#8221; problem. In that case one of it would need to be moved anyway.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1280485">
				<div id="div-comment-1280485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280485">
			January 18, 2017 at 5:52 pm</a>		</div>

		<p>Thankfully with relocs stripped this yields a link time error. If a system DLL got moved on top of one (MS goofed up an XP update that way once) it becomes a load time error.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even depth-3" id="comment-1280515">
				<div id="div-comment-1280515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280515">
			January 18, 2017 at 9:47 pm</a>		</div>

		<p>The biggest point of note about this though is how much time does the DLL relocation actually take in the context of a non trivial process startup/initialisation? If you are going to have to wait for seconds for the process to become usable, is shaving of a few milliseconds really worth it?<br />
The oldest computer I know has no issues running notepad fast enough so that the window has been shown by the time you have finished the click on the icon in start (a core 2 duo). So unless you somehow have a cascade effect where you have hundreds of DLLs relocating, then I really don&#8217;t see how this is something anyone would do.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1280535">
				<div id="div-comment-1280535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280535">
			January 19, 2017 at 3:40 am</a>		</div>

		<p>For 32bit processes, customizing the base addresses to make them sequential lets you maximize the largest allocatable block in the address space</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1280435">
				<div id="div-comment-1280435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280435">
			January 18, 2017 at 2:28 pm</a>		</div>

		<p>This seems like simple misinterpretation of the adjective &#8220;fixed&#8221;.  The value is consistent across processes (unless collisions occur, and collisions for some system DLLs are impossible) on a single machine until the next reboot.  Not consistent between different DLLs.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1280445">
				<div id="div-comment-1280445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt (Visual Studio and Development Technologies MVP with C++ focus)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280445">
			January 18, 2017 at 2:30 pm</a>		</div>

		<p>FWIW, the negatively voted answer Raymond quoted out of context got it right.  It&#8217;s the comments preceding the link to Old New Thing (presumably explaining the downvotes) that are wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1280505">
				<div id="div-comment-1280505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280505">
			January 18, 2017 at 9:31 pm</a>		</div>

		<p>How does ASLR affect code segment sharing between processes ? If the dll is relocated differently in every process then those pages can not be shared (where any fixups have been done). When some dlls are in use within many processes what is preferred way to keep their addresses same ? We rebase our dlls to save memory ( and also speed up loadup time). Should we just disable ASLR ?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1280525">
				<div id="div-comment-1280525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280525">
			January 19, 2017 at 1:10 am</a>		</div>

		<p>Raymond already answered this one: <a href="https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301" rel="nofollow">https://blogs.msdn.microsoft.com/oldnewthing/20160413-00/?p=93301</a></p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1280655">
				<div id="div-comment-1280655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280655">
			January 19, 2017 at 9:41 pm</a>		</div>

		<p>Thanks pointing that out, I&#8217;ve totally missed out that time period ( I was busy arranging fathers  funeral ).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1280895">
				<div id="div-comment-1280895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170118-00/?p=95205#comment-1280895">
			January 23, 2017 at 4:24 am</a>		</div>

		<p>&#8220;For example, if the original base address was below the 4GB boundary, then the new pseudo-random base address will also be below the 4GB boundary.&#8221;</p>
<p>Does that mean you should put your dll&#8217;s above 4gb in case the first 4gb is full?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

