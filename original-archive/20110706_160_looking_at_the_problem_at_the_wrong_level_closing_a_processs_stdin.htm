<html>
<head>
<title>Looking at the problem at the wrong level: Closing a process's stdin</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Looking at the problem at the wrong level: Closing a process&#8217;s stdin</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 6, 2011 / year-entry #161</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was having trouble manipulating the stdin stream that was given to a process. How do you simulate sending Ctrl+Z to a hidden console process programmatically? I am using Redirect­Standard­Input and want to send the console a Ctrl+Z. I've tried sending ASCII code 26, but that doesn't work. Generate­Console­Ctrl­Event supports Ctrl+C and Ctrl+Break but...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was having trouble manipulating the stdin stream
that was given to a process.
</p>
<blockquote CLASS=q>
<p>
How do you simulate sending Ctrl+Z to a hidden console process
programmatically?
</p>
<p>
I am using <code>Redirect&shy;Standard&shy;Input</code>
and want to send the console a Ctrl+Z.
I've tried sending ASCII code 26, but that doesn't work.
<code>Generate&shy;Console&shy;Ctrl&shy;Event</code> supports Ctrl+C
and
Ctrl+Break but not Ctrl+Z.
</p>
<p>
Here's what I'm doing, but it doesn't work:
</p>
<pre>
ProcessStartInfo info = new ProcessStartInfo(@"...");
info.CreateNoWindow = true;
info.RedirectStandardError = true;
info.RedirectStandardOutput = true;
info.RedirectStandardInput = true;
info.UseShellExecute = false;
Process p = Process.Start(info);
// 0x1A is ASCII code of Ctrl+Z but it does not work
p.StandardInput.WriteLine("\x1A");
</pre>
</blockquote>
<p>
The customer was kind enough to do more than simply ask the
question.
The customer set up the scenario and even provided a code fragment
that illustrates the problem.
Which is good, because the original question <i>was the wrong question</i>.
</p>
<p>
The customer asked about simulating typing Ctrl+Z to a console,
but what they actually doing was sending a character to stdin;
they weren't sending it to a console.
In fact, the way they created the process,
<i>there is no console at all</i>.
</p>
<p>
The customer confused stdin with consoles.
It's true that Ctrl+Z is the convention used by console windows
to indicate that stdin should be closed.
But that is hardly any consolation when you took control of stdin yourself
and are not using a console window to manage it.
</p>
<p>
It's like saying,
"Normally, when I want somebody to take my order,
I pull into a parking space and
<a HREf="http://www.seattlepi.com/default/article/Cheap-Eats-Burgermaster-1163526.php">
turn on my headlights</a>,
and somebody will come out.
But I can't get it to work."
</p>
<p>
&mdash; <i>Um, that's because you pulled into your own driveway.</i>
</p>
<p>
Ctrl+Z is a convention used by console windows to indicate that
stdin should be closed, but if you said "I am going to manage stdin myself,"
then you aren't using a console window,
and that convention carries no weight.
If you write a Ctrl+Z to the process's stdin, it will simply read a Ctrl+Z.
But since you are managing stdin yourself,
you can do it yourself:
Just take the stream you set as the process's stdin and
<a HREF="http://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.redirectstandardinput.aspx">
close it</a>.
</p>
<p>
<b>Exercise</b>:
Perhaps you can answer this related question from a different customer:
</p>
<blockquote CLASS=q>
<p>
I am trying to send a Ctrl+C (SIGINT) to a process.
</p>
<pre>
CurrentProcess = new Process();
CurrentProcess.StartInfo.FileName = "foo.exe";
CurrentProcess.StartInfo.UseShellExecute = false;
CurrentProcess.StartInfo.RedirectStandardInput = true;
StandardInputWriter = CurrentProcess.StandardInput;
char c = '\u0003';
StandardInputWriter.Write(c);
StandardInputWriter.Flush();
StandardInputWriter.Close();
</pre>
<p>
If I launch the process from a command prompt and type
Ctrl+C, it flushes its output and terminates,
but when I start it from within my application and send
it a Ctrl+C via the code above,
the process is still running.
How do I send a Ctrl+C to a process?
</p>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-922573">
				<div id="div-comment-922573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GWO</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922573">
			July 6, 2011 at 7:11 am</a>		</div>

		<p>kill(pid,SIGINT);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-922593">
				<div id="div-comment-922593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922593">
			July 6, 2011 at 7:34 am</a>		</div>

		<p>Could you not use GenerateConsoleCtrlEvent? But in any case, assuming the you have the source code to foo.exe, you should rewrite it so that it exits after it hits EOF in its input stream.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-922603">
				<div id="div-comment-922603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922603">
			July 6, 2011 at 7:42 am</a>		</div>

		<p>Then why does Ctrl+C and Ctrl+Break work (&quot;in your own driveway&quot;).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-922613">
				<div id="div-comment-922613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922613">
			July 6, 2011 at 7:46 am</a>		</div>

		<p>@GWO Won&#39;t work on Windows. &nbsp;Best you can do is a process kill, which may not cause the program to flush output, especially if it manages it&#39;s own output buffers that the OS doesn&#39;t know about</p>
<p>@Adam Somehow I doubt that&#39;s the solution Raymond is looking for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-922643">
				<div id="div-comment-922643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922643">
			July 6, 2011 at 8:00 am</a>		</div>

		<p>I think GenerateConsoleCtrlEvent() is the correct answer &#8211; although of course the sender has to be in the same console as the receiving process. If that isn&#39;t possible then you will have to work out some kind of IPC mechanism to signal to the receiving process that it should exit. I think Visual Studio does it by a proxy process that starts the console, starts the other process in the same console, and while that is running listens for a command (via some kind of IPC) that it should call GenerateConsoleCtrlEvent().</p>
<p>Both problems share the similarity that whilst the customer is accustomed to sending Ctrl+C and Ctrl+Z via the keyboard, this isn&#39;t the same as writing Ctrl+C or Ctrl+Z to the console process&#39;s stdin. These inputs are dealt with at a different level &#8211; see the title.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-922653">
				<div id="div-comment-922653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JS Bangs</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922653">
			July 6, 2011 at 8:08 am</a>		</div>

		<p>Calling GenerateConsoleCtrlEvent() won&#39;t work if the calling process is a GUI app or a service, because in that case there is no console.</p>
<p>In any case, that&#39;s missing the point. As with the original post, once you&#39;ve used the Process class, you have control, and it&#39;s up to you to do or simulate whatever the console would normally do on a Ctrl+C. Something like.</p>
<p>proc.StandardInput.Flush();</p>
<p>proc.StandardError.ReadToEnd();</p>
<p>proc.StandardInput.ReadToEnd();</p>
<p>proc.Kill();</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-922863">
				<div id="div-comment-922863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jtasler</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922863">
			July 6, 2011 at 11:27 am</a>		</div>

		<p>The Burger Master reference gave me a craving for one of their chocolate malts! ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-922963">
				<div id="div-comment-922963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/pablo89_5F00_98_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>pablo89_98@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922963">
			July 6, 2011 at 7:00 pm</a>		</div>

		<p>You know, I always wondered how Burgermaster copes with all the cars that have daytime running lights (aka permanent-on headlights)&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-922993">
				<div id="div-comment-922993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-922993">
			July 6, 2011 at 10:50 pm</a>		</div>

		<p>@robinjm</p>
<p>I assume those cars use their high beams to indicate they want to order something.</p>
<p>(is high beams the right word here?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-923023">
				<div id="div-comment-923023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-923023">
			July 7, 2011 at 12:13 am</a>		</div>

		<p>@JS Bangs</p>
<p>I believe your call to proc.StandardError.ReadToEnd() would block until the process itself closes the stderr. So would proc.StandardInput.ReadToEnd().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-923353">
				<div id="div-comment-923353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scott</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110706-00/?p=10243#comment-923353">
			July 7, 2011 at 1:54 pm</a>		</div>

		<p>@robinjm</p>
<p>At least in my car with daytime running lights, engaging the parking brake (even a small enough amount that the brake itself doesn&#39;t actually engage) is enough to turn off the daytime running lights. &nbsp;Useful both at Burgermaster and on the ferry to avoid being yelled at.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

