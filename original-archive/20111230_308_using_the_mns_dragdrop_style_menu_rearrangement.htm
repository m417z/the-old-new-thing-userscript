<html>
<head>
<title>Using the MNS_DRAGDROP style: Menu rearrangement</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using the MNS_DRAGDROP style: Menu rearrangement</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 30, 2011 / year-entry #309</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20111230-00/?p=8763</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In order to do drag-drop rearrangement of menus, you need four things, most of which we already know how to do. Dragging an item out of a menu. Check. Dropping an item into a menu. Check. Connecting the drag with the drop. Rearranging menu items in response to the operation. Let's do step 4 first, just...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In order to do drag-drop rearrangement of menus,
you need four things, most of which we already know how to do.
</p>
<ol>
<li>Dragging an item out of a menu.
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/28/10251521.aspx">
    Check</a>.</p>
<li>Dropping an item into a menu.
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/29/10251523.aspx">
    Check</a>.</p>
<li>Connecting the drag with the drop.
<li>Rearranging menu items in response to the operation.
</ol>
<p>
Let's do step&nbsp;4 first, just to mix things up.
And since this is just a demonstration rather than production code,
I'm only going to support string menu items of up to 255 characters
in length.
</p>
<pre>
BOOL MoveMenuItem(HMENU hmenu, UINT uPosFrom, UINT uPosInsertAfter)
{
 BOOL fRc = FALSE;
 TCHAR sz[256];
 if (GetMenuString(hmenu, uPosFrom, sz, 256, MF_BYPOSITION) &amp;&amp;
     InsertMenu(hmenu, uPosInsertAfter, MF_BYPOSITION,
                GetMenuItemID(hmenu, uPosFrom), sz)) {
  if (uPosFrom &gt; uPosInsertAfter) uPosFrom++;
  fRc = DeleteMenu(hmenu, uPosFrom, MF_BYPOSITION);
 }
 return fRc;
}
</pre>
<p>
One thing you might not have noticed is that I inserted the
copy before deleting the original.
That way, we don't get stuck in the situation where we deleted
the original, then the reinsertion fails, and now we've lost the
menu item.
(We can still get stuck if the deletion of the original fails,
but the hope is that that is much more unlikely than the failure
of an insertion.)
</p>
<p>
Okay, the next part is connecting the drag with the drop.
To do that, I'll need some helper COM objects.
But first, I'm going to introduce something that I should have
introduced earlier: Objects that do nothing!
(Just like our scratch program, they start out doing nothing,
and then we'll modify them to do something.)
</p>
<pre>
// dummy data object
class CEmptyDataObject : public IDataObject
{
public:
  // IUnknown
  STDMETHODIMP QueryInterface(REFIID riid, void **ppvObj)
  {
    IUnknown *punk = NULL;
    if (riid == IID_IUnknown) {
      punk = static_cast&lt;IUnknown*&gt;(this);
    } else if (riid == IID_IDataObject) {
      punk = static_cast&lt;IDataObject*&gt;(this);
    }
  
    *ppvObj = punk;
    if (punk) {
      punk-&gt;AddRef();
      return S_OK;
    } else {
      return E_NOINTERFACE;
    }
  }

  STDMETHODIMP_(ULONG) AddRef()
  {
    return ++m_cRef;
  }
  STDMETHODIMP_(ULONG) Release()
  {
    ULONG cRef = --m_cRef;
    if (cRef == 0) delete this;
    return cRef;
  }

  // IDataObject
  STDMETHODIMP GetData(FORMATETC *pfe, STGMEDIUM *pmed)
  {
    ZeroMemory(pmed, sizeof(*pmed));
    return DV_E_FORMATETC;
  }
  STDMETHODIMP GetDataHere(FORMATETC *pfe, STGMEDIUM *pmed)
  {
    return E_NOTIMPL;
  }
  STDMETHODIMP QueryGetData(FORMATETC *pfe)
  {
    return DV_E_FORMATETC;
  }
  STDMETHODIMP GetCanonicalFormatEtc(FORMATETC *pfeIn,
                                     FORMATETC *pfeOut)
  {
    *pfeOut = *pfeIn;
    pfeOut-&gt;ptd = NULL;
    return DATA_S_SAMEFORMATETC;
  }
  STDMETHODIMP SetData(FORMATETC *pfe, STGMEDIUM *pmed,
                       BOOL fRelease)
  {
    return E_NOTIMPL;
  }
  STDMETHODIMP EnumFormatEtc(DWORD dwDirection,
                             LPENUMFORMATETC *ppefe)
  {
  *ppefe = NULL;
  return E_NOTIMPL;
  }
  STDMETHODIMP DAdvise(FORMATETC *pfe, DWORD grfAdv,
                    IAdviseSink *pAdvSink, DWORD *pdwConnection)
  {
    *pdwConnection = 0;
    return OLE_E_ADVISENOTSUPPORTED;
  }
  STDMETHODIMP DUnadvise(DWORD dwConnection)
  {
    return OLE_E_ADVISENOTSUPPORTED;
  }
  STDMETHODIMP EnumDAdvise(LPENUMSTATDATA *ppefe)
  {
    *ppefe = NULL;
    return OLE_E_ADVISENOTSUPPORTED;
  }

  CEmptyDataObject() : m_cRef(1) { }
  virtual ~CEmptyDataObject() { }

private:
  ULONG m_cRef;
};
</pre>
<p>
The <code>CEmpty&shy;Data&shy;Object</code>
is simply a data object that contains no data.
And here's an equally uninteresting
<code>CEmpty&shy;Drop&shy;Target</code>:
</p>
<pre>
class CEmptyDropTarget : public IDropTarget
{
public:
  // IUnknown
  STDMETHODIMP QueryInterface(REFIID riid, void **ppvObj)
  {
    IUnknown *punk = NULL;
    if (riid == IID_IUnknown) {
      punk = static_cast&lt;IUnknown*&gt;(this);
    } else if (riid == IID_IDropTarget) {
      punk = static_cast&lt;IDropTarget*&gt;(this);
    }
  
    *ppvObj = punk;
    if (punk) {
      punk-&gt;AddRef();
      return S_OK;
    } else {
      return E_NOINTERFACE;
    }
  }
  STDMETHODIMP_(ULONG) AddRef()
  {
    return ++m_cRef;
  }
  STDMETHODIMP_(ULONG) Release()
  {
    ULONG cRef = --m_cRef;
    if (cRef == 0) delete this;
    return cRef;
  }

  // IDropTarget
  STDMETHODIMP DragEnter(IDataObject *pdto, DWORD grfKeyState,
                         POINTL pt, DWORD *pdwEffect)
  {
    *pdwEffect = DROPEFFECT_NONE;
    return E_NOTIMPL;
  }
  STDMETHODIMP DragOver(DWORD grfKeyState, POINTL pt, DWORD *pdwEffect)
  {
    *pdwEffect = DROPEFFECT_NONE;
    return E_NOTIMPL;
  }
  STDMETHODIMP DragLeave()
  {
    return E_NOTIMPL;
  }
  STDMETHODIMP Drop(IDataObject *pdto, DWORD grfKeyState,
                    POINTL pt, DWORD *pdwEffect)
  {
    *pdwEffect = DROPEFFECT_NONE;
    return E_NOTIMPL;
  }

  CEmptyDropTarget() : m_cRef(1) { }
  virtual ~CEmptyDropTarget() { }

private:
  ULONG m_cRef;
};
</pre>
<p>
Okay, now back to item&nbsp;3: Connecting the drag with the drop.
Your initial reaction might be to create a new clipboard format
called, say, <tt>Dragged&shy;Menu&shy;Item</tt>
which takes the form of a <code>TYMED_<wbr>HGLOBAL</code>
consisting of a struct like
</p>
<pre>
struct MENUANDITEM
{
 HMENU hmenu;
 UINT uItem;
};
</pre>
<p>
But once you do that, you already have a problem:
What happens if this item is dragged out of a 32-bit process
and dropped into a 64-bit process?
The size of <code>HMENU</code> is different between the two processes,
so the 32-bit and 64-bit
<code>MENU&shy;AND&shy;ITEM</code> structures are
not compatible.
This is an example of 
how you need to be aware of inter-process
communications scenarios when developing persistence formats.
In this case,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2005/01/31/363790.aspx">
we are passing a pointer-sized object between processes</a>.
Although most people think of a persistence format as a file format,
here's a case where a persistence format takes the form of
an in-memory storage format.
</p>
<p>
You might decide to solve this problem by tweaking the structure
to accommodate 32-bit and 64-bit Windows:
</p>
<pre>
struct MENUANDITEM
{
 __int64 i64Menu;
 UINT uItem;

 void SetMenu(HMENU hmenu) { i64Menu = (INT_PTR)hmenu; }
 HMENU GetMenu() const { return (HMENU)(INT_PTR)i64Menu; }
};
</pre>
<p>
But there's an easier way out:
Since we only want to support drag/drop menu editing from within
the same menu (we don't care about dragging an item from one
menu to another menu),
the drag source and drop target reside in the same process,
so all we need to do is verify the data object's identity,
and if it's our data object, we can consult side data to determine
what is being dragged.
</p>
<p>
Okay, so let's start with a fresh
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>,
and paste in the following:
</p>
<ul>
<li>
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/12/06/275659.aspx">
    <code>CDrop&shy;Source</code></a></p>
<li><code>CEmpty&shy;Data&shy;Object</code>
<li><code>CEmpty&shy;Drop&shy;Target</code>
<li><code>Move&shy;Menu&shy;Item</code>
<li>
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/28/10251521.aspx">
    <code>HANDLE_<wbr>WM_<wbr>MENU&shy;DRAG</code></a></p>
<li>
    <a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/29/10251523.aspx">
    <code>HANDLE_<wbr>WM_<wbr>MENU&shy;GET&shy;OBJECT</code></a>
</ul>
<p>
Okay, enough
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/08/04/9856634.aspx">
shopping</a>.
Now to teach our drop target how to recognize that the data
object being dropped on it is our own:
</p>
<pre>
class CMenuDataObject : public CEmptyDataObject
{
public:
  CMenuDataObject(HMENU hmenu, UINT uPos)
    : m_hmenu(hmenu), m_uPos(uPos) { }

public:
  const HMENU m_hmenu;
  const UINT m_uPos;
};

CMenuDataObject *g_pdtoDrag;
</pre>
<p>
Our special data object when dragging a menu item merely carries
around the menu and item so we can find it later.
The magical bit is that we also keep track of the object being
dragged.
(Exercise: Since this is a demo program, the object is just a global variable.
What is the correct way of keeping track of <code>g_pdtoDrag</code>?)
</p>
<p>
Now we get to teach our drop target to recognize
<code>CMenu&shy;Data&shy;Object</code> and only
<code>CMenu&shy;Data&shy;Object</code>:
</p>
<pre>
class CMenuDropTarget : public CEmptyDropTarget
{
public:
  // IDropTarget
  STDMETHODIMP DragEnter(IDataObject *pdto, DWORD grfKeyState,
                         POINTL pt, DWORD *pdwEffect);
  STDMETHODIMP DragOver(DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);
  STDMETHODIMP DragLeave();
  STDMETHODIMP Drop(IDataObject *pdto, DWORD grfKeyState,
                    POINTL pt, DWORD *pdwEffect);

  CMenuDropTarget(HMENU hmenu, UINT uPos)
    : m_hmenu(hmenu), m_uPos(uPos), m_uPosDrag(uPosNone) { }
  void Reset() { m_uPosDrag = uPosNone; }

private:
  static const UINT uPosNone = 0xFFFFFFFF;
private:
  HMENU m_hmenu;   // menu being dropped on
  UINT m_uPos;     // menu item being dropped on
  UINT m_uPosDrag; // menu item being dragged, if from the same menu
                   // else uPosNone
};

HRESULT CMenuDropTarget::DragEnter(
    IDataObject *pdto, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect)
{
  Reset();
  IUnknown *punk;
  if (SUCCEEDED(pdto-&gt;QueryInterface(IID_PPV_ARGS(&punk)))) {
    punk->Release();
  }
  if (punk == g_pdtoDrag && g_pdtoDrag->m_hmenu == m_hmenu) {
    m_uPosDrag = g_pdtoDrag->m_uPos;
  } else {
    m_uPosDrag = uPosNone;
  }
  return DragOver(grfKeyState, pt, pdwEffect);
}
</pre>
<p>
The job of <code>CMenu&shy;Drop&shy;Target::&shy;Drag&shy;Enter</code>
is to determine whether the item being dragged is a menu item from
the same menu.
We detect that the object being dragged is <code>g_pdtoDrag</code>
by first querying for the canonical unknown,
to remove any layers of wrapping COM may have placed around the object.
We compare this against <code>g_pdtoDrag</code>, which is a bit of a cheat;
more properly we should call <code>g_pdtoDrag-&gt;Query&shy;Interface</code>
to get the canonical unknown for <code>g_pdtoDrag</code>,
but we can cheat because
we know that <code>CMenu&shy;Data&shy;Object</code>
is singly-derived from <code>IUnknown</code> and that it does not
support aggregation (and therefore it is its own canonical unknown).
(Exercise: Why is it okay to use <code>punk</code> after releasing it?)
</p>
<p>
Anyway, if the item is confirmed to be our item after all,
then we copy the menu item position so we can move it on the drop.
</p>
<pre>
HRESULT CMenuDropTarget::DragOver(
    DWORD grfKeyState, POINTL pt, DWORD *pdwEffect)
{
  if (m_uPosDrag == uPosNone) {
    *pdwEffect = DROPEFFECT_NONE;
  } else {
    *pdwEffect &= DROPEFFECT_MOVE;
  }
  return S_OK;
}

HRESULT CMenuDropTarget::DragLeave()
{
  Reset();
  return S_OK;
}
</pre>
<p>
The <code>Drag&shy;Over</code> and <code>Drag&shy;Leave</code>
methods are largely uninteresting.
<code>Drag&shy;Over</code> just gives appropriate feedback,
and
<code>Drag&shy;Leave</code> forgets about the data object that is
no longer being dragged over us.
The real excitement is in the <code>Drop</code> method.
</p>
<pre>
HRESULT CMenuDropTarget::Drop(
    IDataObject *pdto, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect)
{
  DragEnter(pdto, grfKeyState, pt, pdwEffect);
  if (*pdwEffect & DROPEFFECT_MOVE) {
     MoveMenuItem(m_hmenu, m_uPosDrag, m_uPos);
  }
  return S_OK;
}
</pre>
<p>
When the drop happens, we move the menu item.
Kind of anticlimactic, isn't it.
</p>
<p>
Okay, at this point the <code>WM_<wbr>MENU&shy;DRAG</code> and
<code>WM_<wbr>MENU&shy;GET&shy;OBJECT</code> handlers
are old hat:
</p>
<pre>
LRESULT OnMenuDrag(HWND hwnd, UINT uPos, HMENU hmenu)
{
 LRESULT lres = MND_CONTINUE;
 if (g_pdtoDrag == NULL &amp;&amp; hmenu == GetSubMenu(GetMenu(hwnd), 0)) {
  g_pdtoDrag = new(std::nothrow) CMenuDataObject(hmenu, uPos);
  if (g_pdtoDrag) {
   IDropSource *pds = new(std::nothrow) CDropSource();
   if (pds) {
    DWORD dwEffect;
    DoDragDrop(g_pdtoDrag, pds, DROPEFFECT_MOVE, &amp;dwEffect);
    pds-&gt;Release();
   }
   g_pdtoDrag-&gt;Release();
   g_pdtoDrag = NULL;
  }
 }
 return lres;
}

LRESULT OnMenuGetObject(HWND hwnd, MENUGETOBJECTINFO *pmgoi)
{
 HRESULT hr = E_NOTIMPL;
 if (pmgoi-&gt;hmenu == GetSubMenu(GetMenu(hwnd), 0) &amp;&amp;
     (pmgoi-&gt;dwFlags &amp; (MNGOF_BOTTOMGAP | MNGOF_TOPGAP))) {
  IDropTarget *pdt = new(std::nothrow)
      CMenuDropTarget(pmgoi-&gt;hmenu, pmgoi-&gt;uPos);
  if (pdt) {
   hr = pdt-&gt;QueryInterface(*(IID*)pmgoi-&gt;riid, &amp;pmgoi-&gt;pvObj);
   pdt-&gt;Release();
  }
 }
 return SUCCEEDED(hr) ? MNGO_NOERROR : MNGO_NOINTERFACE;
}

    HANDLE_MSG(hwnd, WM_MENUDRAG, OnMenuDrag);
    HANDLE_MSG(hwnd, WM_MENUGETOBJECT, OnMenuGetObject);

// and change CoInitialize and CoUninitialize
// to OleInitialize and OleUninitialize, respectively
</pre>
<p>
There is a tricky part in <code>On&shy;Menu&shy;Get&shy;Object</code>,
namely that we only return a drop target if the mouse is <i>between</i>
items, because it is only when you are between items that you are actually
rearranging.
</p>
<p>
And there you have it, some menu drag/drop stuff.
It was a lot of typing (mostly for those dummy objects),
but not a lot of work.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-955913">
				<div id="div-comment-955913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111230-00/?p=8763#comment-955913">
			December 30, 2011 at 7:39 am</a>		</div>

		<p>I can count the number of times I&#39;ve wished for the ability to rearrange menu items on zero hands. &nbsp;It&#39;s interesting, I guess, but aside from something like the Start menu it doesn&#39;t seem very useful (and even then only marginal). &nbsp;In fact, I can&#39;t recall ever seeing any program with a rearrangeable menu; it just doesn&#39;t strike me as a very intuitive or discoverable feature. &nbsp;Maybe I just don&#39;t get out that much.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-955923">
				<div id="div-comment-955923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111230-00/?p=8763#comment-955923">
			December 30, 2011 at 7:42 am</a>		</div>

		<p>Exercise: &nbsp;Because you created CEmptyDataObject with one reference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955953">
				<div id="div-comment-955953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111230-00/?p=8763#comment-955953">
			December 30, 2011 at 8:18 am</a>		</div>

		<p>James:</p>
<p>One of the rules of a well behaved COM object is that on failure the QueryInterface will guarantee that the pointer is set to null. So even if it is uninitialised there, after the QI call, if it failes then it will be null.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-956003">
				<div id="div-comment-956003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">wqw</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111230-00/?p=8763#comment-956003">
			December 30, 2011 at 2:40 pm</a>		</div>

		<p>1. keeping track of g_pdtoDrag: ROT or other cross-process marshaling</p>
<p>2. use punk after releasing it: pdto is keeping base object alive</p>
<div class="post">[<i>Even if you needed to put it in a cross-process marshaller (which you don&#39;t), that just replaces one question with an equivalent question: Where do you put the ROT cookie? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-955933">
				<div id="div-comment-955933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20111230-00/?p=8763#comment-955933">
			December 30, 2011 at 7:51 am</a>		</div>

		<p>Very interesting little demo. You didn&#39;t mention of any more drag and drop demos coming. Please continue on the same subject.</p>
<p>Do i dare to suggest a topic ? Take it as a compliment of me asking you. You do a much better job of showing how to use windows functions correctly than msdn ever have done so far. (Poor description and buggy demos)</p>
<p>I learn by watching how it&#39;s used so this is great. More microsoft employee&#39;s should do this.</p>
<p>1. Right-click dropping.</p>
<p>2. How to use IDropTarget with IDropTargetHelper correctly. (connected with 1.)</p>
<p>&quot;Exercise: Since this is a demo program, the object is just a global variable. What is the correct way of keeping track of g_pdtoDrag?&quot;</p>
<p>As a per window object. For example using SetProp or in the windows own class object (c++ version). </p>
<p>&quot;Exercise: Why is it okay to use punk after releasing it?&quot;</p>
<p>You are only comparing the location of where the object resides.</p>
<p>But it makes me very nervous. Due to &quot;IUnknown *punk;&quot; shouldn&#39;t it be &quot;IUnknown *punk = nullptr;&quot; or is that set in QueryInterface ?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

