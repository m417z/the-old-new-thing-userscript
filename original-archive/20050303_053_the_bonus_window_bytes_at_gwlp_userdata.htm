<html>
<head>
<title>The bonus window bytes at GWLP_USERDATA</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The bonus window bytes at GWLP_USERDATA</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 3, 2005 / year-entry #54</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>35</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The window manager provides a pointer-sized chunk of storage you can access via the GWLP_USERDATA constant. You pass it to the GetWindowLongPtr function and the SetWindowLongPtr function to read and write that value. Most of the time, all you need to attach to a window is a single pointer value anyway, so the free memory...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p> The window manager provides a pointer-sized chunk of storage you can access via the <code>GWLP_USERDATA</code> constant. You pass it to <a href="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/WindowClasses/WindowClassReference/WindowClassFunctions/GetWindowLongPtr.asp"> the <code>GetWindowLongPtr</code> function</a> and <a href="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/WindowClasses/WindowClassReference/WindowClassFunctions/SetWindowLongPtr.asp"> the <code>SetWindowLongPtr</code> function</a> to read and write that value. Most of the time, all you need to attach to a window is a single pointer value anyway, so the free memory in <code>GWLP_USERDATA</code> is all you need. </p>
<p> Note that this value, like the other window extra bytes and <a href="http://blogs.msdn.com/oldnewthing/archive/2003/12/02/55914.aspx"> the messages in the <code>WM_USER</code> range</a>, belongs to the window class and not to the code that creates the window. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (35)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-260603">
				<div id="div-comment-260603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260603">
			March 3, 2005 at 7:47 am</a>		</div>

		<p>Works in 99% of the cases&#8230; in the rest 1%, some third party component and/or simply other part of the code is using same place to store something else&#8230; </p>
<p>On Windows CE this happens almost certainly&#8230;</p>
<p>First a scratch windows, then GWL_USERDATA &#8211; are we going toward a CWindow sample?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260613">
				<div id="div-comment-260613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260613">
			March 3, 2005 at 8:04 am</a>		</div>

		<p>Can someone tell me why one would use GWL_USERDATA, rather than just use the SetProp / GetProp functions to store a pointer to data? Sorry if this is a stupid question, I do not know much about programming for Windows, but I am trying to learn.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260643">
				<div id="div-comment-260643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260643">
			March 3, 2005 at 8:37 am</a>		</div>

		<p>JDM:  I believe people use GWLP_USERDATA rather than GetProp/SetProp for performance reasons.  Looking up the pointer on every message a window processes can add up quickely.  GetWindowLongPtr() is a very direct way to get a bit of data stored with a window.  GetProp probably requires hashing a string to do a table look-up and is thus a lot more instructions.</p>
<p>GetWindowLongPtr() can be used in a set-and-forget fashion.  If you add properties to a window, you have to be careful to remove them all when the window is destroyed to avoid wasting system resources.  (That&#8217;s not to say that you can forget about cleaning up the data structure pointed to by your pointer.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260663">
				<div id="div-comment-260663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260663">
			March 3, 2005 at 8:58 am</a>		</div>

		<p>Raymond, do you mean that the window class decides what GWLP_USERDATA will be used for (for example for a pointer to the C++ object of type X that manages the window)? I assume the actual pointer stored there is still per-window and not per-class.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260693">
				<div id="div-comment-260693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260693">
			March 3, 2005 at 9:41 am</a>		</div>

		<p>Adrian &#8211; actually, you can short circuit the GetProp lookup by creating an ATOM from a string (eg. the window class name for sake of argument), and using that instead of the string.</p>
<p>This is what winforms in .NET does under the hood.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260703">
				<div id="div-comment-260703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260703">
			March 3, 2005 at 9:47 am</a>		</div>

		<p>Even with the ATOM, the proper entry has to be located.  GWLP_USERDATA should be much faster.  However, in the context of an application, the difference would be very insignificant.</p>
<p>When was GetProp/SetProp introduced?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260713">
				<div id="div-comment-260713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260713">
			March 3, 2005 at 9:51 am</a>		</div>

		<p>One apon a time I had a project where I had to write some &quot;middleware&quot; (if that&#8217;s the correct buzzword for it these days) between the Windows API and some cross-platform UI classes. I found that this userdata area was a great place to hook on each window&#8217;s instance of a class in the underlying library so I could then dispatch the appropriate events on it.</p>
<p>However, I was a bit naughty because I was attaching these objects to windows of built-in classes (BUTTON in particular). It worked, and at the time I didn&#8217;t really think anything of it, but I guess it&#8217;s a good thing that none of the classes I used had their own userdata&#8230; or are applications allowed to attach userdata to windows of classes owned by others?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260723">
				<div id="div-comment-260723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260723">
			March 3, 2005 at 9:59 am</a>		</div>

		<p>When I wrote that the values &quot;belong to the window class&quot;, I meant that only the window class implementor may read or write the values. Think of them as private members of the window class. Code that calls CreateWindow is a customer of the window class and should not be messing with the window class&#8217;s private data without permission.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260763">
				<div id="div-comment-260763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rabbit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260763">
			March 3, 2005 at 12:20 pm</a>		</div>

		<p>Actually, I bet the &quot;don&#8217;t store stuff in GWLP_USERDATA on windows you didn&#8217;t write&quot; belongs in the &quot;What would happen if everyone did this?&quot; category.</p>
<p>Since there is only one resource and no locks, the conclusion is that there must only be one owner, and the window implementation is the natural place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260773">
				<div id="div-comment-260773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Hampton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260773">
			March 3, 2005 at 1:05 pm</a>		</div>

		<p>As I recall, GetProp and PutProp were in Windows 2.x.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260793">
				<div id="div-comment-260793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260793">
			March 3, 2005 at 2:19 pm</a>		</div>

		<p>Interesting. I&#8217;m checking into that. But even if it does belong to the creator of the window, enough window class implementations use it that you still should stay away for safety&#8217;s sake.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260803">
				<div id="div-comment-260803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260803">
			March 3, 2005 at 3:13 pm</a>		</div>

		<p>Tim Smith-</p>
<p>Well, if you care about lookup time at all, you should really be using ATL&#8217;s assembly language thunking mechanism to hook your windows instead of GWLP_USERDATA anyway &#8211; it&#8217;s even faster, and has none of the problems of others potentially colliding with your userdata parameter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260633">
				<div id="div-comment-260633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rabbit</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260633">
			March 3, 2005 at 8:34 am</a>		</div>

		<p>Raymond, you have the sublety of MSDN with this one&#8230;</p>
<p>&quot;belongs to the window class and not to the code that creates the window.&quot;</p>
<p>In other words, if you are CreateWindow()ing a window implemented by someone else, do *not* set the window extra bytes &#8212; they are reserved for the window class implementation and you don&#8217;t know if they are using them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260833">
				<div id="div-comment-260833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260833">
			March 3, 2005 at 5:52 pm</a>		</div>

		<p>We most of us VC dotNet 2003.  Is the warning about the GetWindowLongPtr function being unsafe for Win64 fixed in new versions of Windows header file?  The problem is that in 32-bit, it&#8217;s remapped with a define to GetWindowLong!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260873">
				<div id="div-comment-260873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mihai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260873">
			March 3, 2005 at 8:25 pm</a>		</div>

		<p>This is the extra you are asking<br />
<br />with the cbWndExtra member of<br />
<br />WNDCLASS when you register the class,<br />
<br />or is somehing different?<br />
<br />If it is, there is nothing new.<br />
<br />And you can get the some &quot;per class&quot; data if you use cbClsExtra.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260783">
				<div id="div-comment-260783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260783">
			March 3, 2005 at 1:16 pm</a>		</div>

		<p>GWLP_USERDATA<br />
<br />Retrieves the user data associated with the window. This data is intended for use by the *application that created* the window. Its value is initially zero.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260903">
				<div id="div-comment-260903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260903">
			March 4, 2005 at 12:58 am</a>		</div>

		<p>This is the built-in extra you get with the cbWndExtra set to zero.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260913">
				<div id="div-comment-260913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260913">
			March 4, 2005 at 1:01 am</a>		</div>

		<p>Mihai, no it&#8217;s different. It has nothing to do with cbWndExtra. Every single window intance has it. cbWndExtra/cbClsExtra will apply only to class you register yourself, GWL_USERDATA is available in HWNDs registered by others too</p>
<p>Raymond, in my experience, none of the Windows controls use it (that statement isn&#8217;t true for CE though). Frankly, I don&#8217;t have much experience with third party window classes, so I don&#8217;t know how often GWL_USERDATA is in use, but it is very convinient place to store your data. That&#8217;s what the imply anyway &#8211; USERDATA. A simple assert could warn if it is already in use.</p>
<p>It seems that safest way is to use GetProp/SetProp with some GUID as a property name. Problem is that one should take care of cleaning up properties when window is destroyed</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260953">
				<div id="div-comment-260953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260953">
			March 4, 2005 at 7:22 am</a>		</div>

		<p>Chris Becke,</p>
<p>I remember that (first) problem from when I was doing my project I mentioned earlier in the discussion. As I recall, I worked around it by simply ignoring messages that arrived with no object pointer attached, so I missed a few messages on window creation. At the time I knew that was a bad idea, but I couldn&#8217;t see any way around it that didn&#8217;t involve really convulted code so I left it in.</p>
<p>Fortunately, thus far it hasn&#8217;t caused any problems, and Microsoft&#8217;s famous commitment to backward compatibility will hopefully keep it that way! ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-260963">
				<div id="div-comment-260963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260963">
			March 4, 2005 at 7:38 am</a>		</div>

		<p>Chris/Ben: This topic is drifting. You can put suggestions for future topics into the Suggestion Box. If you post a suggestion as as a comment to a regular article it will get lost in the mists of time. (By the way, as far as I can tell WM_SIZE comes after the creation messages.) There is already a brief series planned for July on a closely-related subject.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-261073">
				<div id="div-comment-261073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gdt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261073">
			March 4, 2005 at 10:35 am</a>		</div>

		<blockquote><p>
  &gt; (your object needs to live longer than its HWND)</p>
<p>Why?
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-261083">
				<div id="div-comment-261083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261083">
			March 4, 2005 at 10:45 am</a>		</div>

		<p>gdt &#8211; because people will write code like this:</p>
<p>class MyWnd {<br />
<br />&#8230;</p>
<p>LRESULT MyWndProc(&#8230;) {<br />
<br />case WM_USER_MSG:<br />
<br />      DestroyWindow(m_hWnd);<br />
<br />      m_bar = m_foo.CrashWithAccessViolation();<br />
<br />      return 0;<br />
<br />case WM_NCDESTROY:<br />
<br />      delete this;<br />
<br />      return 0;<br />
<br />}<br />
<br />};</p>
<p>&#8230; which will crash.</p>
<p>Even worse is when they write code like this:</p>
<p>case WM_DESTROY:<br />
<br />     delete this;<br />
<br />     return 0;</p>
<p>&#8230; which nearly guarantees a crash.</p>
<p>Never mind the fact that this whole GWLP_USERDATA pointer mapping mechanism is a godawful way of doing it that should have died out a long time ago, but MFC kept it around.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-261103">
				<div id="div-comment-261103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://d116.com' rel='external nofollow' class='url'>Fred White</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261103">
			March 4, 2005 at 10:49 am</a>		</div>

		<p>For a server-type application, you&#8217;ll find to your dismay that all of your window properties are recycled when the user logs out.</p>
<p>I can&#8217;t for the life of me find the reference right now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-261113">
				<div id="div-comment-261113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261113">
			March 4, 2005 at 10:54 am</a>		</div>

		<p>Then again, your service shouldn&#8217;t be displaying UI either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-261133">
				<div id="div-comment-261133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jorg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261133">
			March 4, 2005 at 11:42 am</a>		</div>

		<p>Hi Simon Cooke, what is the alternative solution for the pointer mapping?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-261153">
				<div id="div-comment-261153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://stud3.tuwien.ac.at/~e0226430/' rel='external nofollow' class='url'>Sebastian Redl</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261153">
			March 4, 2005 at 12:55 pm</a>		</div>

		<p>MFC doesn&#8217;t use GWLP_USERDATA. MFC installs a window creation hook, which gets called before the first message arrives, and in there maps the window handle against the class pointer in a global hash map.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-260933">
				<div id="div-comment-260933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-260933">
			March 4, 2005 at 6:09 am</a>		</div>

		<p>Actually, this all begs the question &#8211; why on earth does the window manager send messages before WM_CREATE/WM_NCCREATE ?</p>
<p>If I write a very simple window class that I want to embed ona dialog &#8211; or otherwise allow consumers to create with CreateWindow&#8230; well, I write in C++ and its natural for me to manage my data in a class associated with the window. GWL_USERDATA is the natural place to store my class pointer. The problem is, the seemingly logical and niavely simple &quot;new CMyWind&quot; in WM_CREATE and &quot;delete this&quot; in WM_DESTROY just dont work as one at least gets an extraneous WM_SIZE before any creation messages, leading to a window proc with convoluted just-in-time creation of class data.</p>
<p>This gets even worse when someone writes a CMyAppWindow that both wraps and implements a window. In which case the class is created up front, its constructor registers a window class and creates it. Which starts out simple and quickly turns into a mess when you realize theres no neat way to get the window &lt;-&gt; c++ class bound together. You cant do a SetWindowLong(CreateWindow(&#8230; to tell the WindowProc what the class instance pointer is as the WindowProc is invoked before CreateWindow returns. You cant even pass the class instance as the CREATEPARAM as you *still* miss a bunch of messages that arrive before WM_NCCREATE and WM_CREATE.</p>
<p>I really wish the guys responsible for the window manager had made what should be simple, well, simple.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-261003">
				<div id="div-comment-261003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261003">
			March 4, 2005 at 8:59 am</a>		</div>

		<p>Chris &#8211; it is simple. You&#8217;re just doing it the wrong way. You should create your object instance *before* attaching a window to it. You should also destroy your object instance *after* the attached window has been fully destroyed. </p>
<p>WM_DESTROY isn&#8217;t the place to do that kind of teardown anyway &#8211; WM_NCDESTROY might be.</p>
<p>Doing &quot;delete this&quot; on wrapped Windows is a lame idea anyway (your object needs to live longer than its HWND). But if you *really* need to do it, you could have a static WNDPROC that you poke into the window instance (using SetWindowLong) that handles the final set of messages your class gets after your object has been destroyed. Of course the trick at that point is making sure that you don&#8217;t have any other calls to your WNDPROC still waiting to be serviced when you unwind your way through the stack.</p>
<p>Just say NO to delete this. It has only one use as far as I&#8217;m concerned &#8211; handling destruction of object instances during calls to Release on COM objects. For nearly every other circumstance, you&#8217;re doing the wrong thing, and you should seriously reconsider before letting it into production code.</p>
<p>Think of it as the C++ equivalent of goto. You should only use it if you&#8217;re really damn certain that you should use it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-261163">
				<div id="div-comment-261163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261163">
			March 4, 2005 at 1:50 pm</a>		</div>

		<p>Well, if you want to write an old fashioned type window that can, for example, be embedded in a dialog resource, then the CreateWindow *must* come first, and the creating app is possibly not written in C++ or know how to create your class.</p>
<p>In which case youre stuck doing essentially a &#8216;delete this&#8217; in your WM_DESTROY code as the only signal that the consuming app is finished with your control.</p>
<p>This style of control seems to be a bit of a lost art :/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-261193">
				<div id="div-comment-261193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261193">
			March 4, 2005 at 2:51 pm</a>		</div>

		<p>Jorg &#8211; use thunks instead. See the ATL source code, or this article:</p>
<p><a target="_new" href="http://groups-beta.google.com/group/comp.os.ms-windows.programmer.ole/msg/9797b81ce52c7ffb?dmode=source" rel="nofollow">http://groups-beta.google.com/group/comp.os.ms-windows.programmer.ole/msg/9797b81ce52c7ffb?dmode=source</a></p>
<p>Sebastian &#8211;<br />
<br />OK; I&#8217;m wrong on the GWLP_USERDATA, but it&#8217;s a similar idea. It&#8217;s not a window creation hook (at least in older MFCs &#8211; not sure about 7.0), but is a generic MFC window which attaches the window to its C++ object in the generic window&#8217;s WM_NCCREATE handler. After that, you have this walk through an associative map for the HWND to C++ pointer&#8230; it&#8217;s just painful.</p>
<p>Chris Becke &#8211;<br />
<br />Sure, go ahead, but the LAST message your window will get is WM_NCDESTROY, *NOT* WM_DESTROY so you&#8217;d better hope that your WNDPROC implementation doesn&#8217;t use any member variables or your app is toast after that delete this call.</p>
<p>As for creating a window which can be embedded in a dialog resource of an App that *you* don&#8217;t control, that&#8217;s what ActiveX is for &#8211; and it controls lifetime management in those circumstances.</p>
<p>If you control the dialog creation code you have other options though &#8211; you can replace the window after dialog creation with one of your choosing, or you could walk through the dialog template looking for windows of your own class type and implement their creation yourself.</p>
<p>That doesn&#8217;t change the fact that delete this can lead to dangerous side effects in production code if everyone who will ever touch that code doesn&#8217;t know exactly what the circumstances are that the window wrapper can be torn down in.</p>
<p>Rather than a delete this, you&#8217;d at least want to add some kind of re-entrancy protection to the Wndproc, or a refcount to the object so that you don&#8217;t pull it out from unsuspecting others.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-261333">
				<div id="div-comment-261333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261333">
			March 6, 2005 at 5:54 pm</a>		</div>

		<p>3/4/2005 10:54 AM Raymond Chen</p>
<p>&gt; Then again, your service shouldn&#8217;t be<br />
<br />&gt; displaying UI either.</p>
<p>I used to think so too.  But I want things like antivirus and firewall programs to start before anyone logs in, and I want to be notified when they detect anything.  Perhaps the UI should be done by a separate program that gets started during login, but at least for antivirus we don&#8217;t usually want the logged-in user to be able to kill it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-261353">
				<div id="div-comment-261353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261353">
			March 6, 2005 at 6:42 pm</a>		</div>

		<p>Then don&#8217;t let the logged-in user kill the anti-virus checker. The service does the anti-virus checking and the UI part just does the UI. If the user kills the UI part, the service keeps running.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-261463">
				<div id="div-comment-261463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-261463">
			March 7, 2005 at 8:40 am</a>		</div>

		<p>Norman: Threads associated with the same desktop can use window messages to inject arbitrary code into each other and cause it to run (this is called a &quot;Shatter attack&quot;). So if a service displays UI, the logged-in user can kil it, or worse. There are ways to filter out such messages, and WM_TIMER is now blocked by the OS from being sent across processes, but it&#8217;s extremely hard if not impossible to catch all the messages that could be used for such an attack. This is the reason for the advice not to let services display UI directly. </p>
<p>(Nevertheless, messages received by the Messenger service are still displayed by the CSRSS process which runs as SYSTEM. I think all the services vulnerable to this exploit are disabled by default in XP SP2 though.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-264143">
				<div id="div-comment-264143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-264143">
			March 15, 2005 at 9:54 am</a>		</div>

		<p>I asked around and guidance is &quot;unclear&quot;, though leaning slightly towards &quot;it belongs to the person who called CreateWindow&quot;. For safety&#8217;s sake, then, you should just avoid it unless you can establish clear ownership.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267653">
				<div id="div-comment-267653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050303-00/?p=36293#comment-267653">
			March 27, 2005 at 6:30 am</a>		</div>

		<p>Surely it should belong to the person who called RegisterClass, because it&#8217;s the class that defines where the wndproc is, and it&#8217;s the wndproc which is almost always going to be what&#8217;s looking at the memory in question?</p>
<p>I can&#8217;t see the sense in making it belong to the person calling CreateWindow.  If they&#8217;re not defining the class (and hence the wndproc) why should they have any interest in this kind of thing?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

