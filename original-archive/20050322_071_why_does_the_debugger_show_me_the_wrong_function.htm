<html>
<head>
<title>Why does the debugger show me the wrong function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does the debugger show me the wrong function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 22, 2005 / year-entry #72</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>44</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Often you'll be minding your own business debugging some code, and you decide to step into one function and the debugger shows that you're in some other function. How did that happen? class Class1 { public: int *GetQ() { return q; } private: int *p; int *q; }; class Class2 { public: virtual int GetValue()...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Often you'll be minding your own business debugging some code,
and you decide to step into one function
and the debugger shows that you're in some other function.
How did that happen?
</p>
<pre>
class Class1
{
public:
 int *GetQ() { return q; }
private:
 int *p;
 int *q;
};

class Class2
{
public:
 virtual int GetValue() { return value; }
private:
 int value;
};
</pre>
<p>
You then step through code that does something like this:
</p>
<pre>
int Whatever(Class2 *p)
{
 return p-&gt;GetValue();
}
</pre>
<p>
And when you step into the call to <code>p-&gt;GetValue()</code>
you find yourself in <code>Class1::GetQ</code>.
What happened?
</p>
<p>
What happened is that the Microsoft linker combined functions that
are identical <strong>at the code generation level</strong>.
</p>
<pre>
?GetQ@Class1@@QAEPAHXZ PROC NEAR    ; Class1::GetQ, COMDAT
  00000 8b 41 04         mov     eax, DWORD PTR [ecx+4]
  00003 c3               ret     0
?GetQ@Class1@@QAEPAHXZ ENDP         ; Class1::GetQ

?GetValue@Class2@@UAEHXZ PROC NEAR  ; Class2::GetValue, COMDAT
  00000 8b 41 04         mov     eax, DWORD PTR [ecx+4]
  00003 c3               ret     0
?GetValue@Class2@@UAEHXZ ENDP       ; Class2::GetValue
</pre>
<p>
Observe that at the object code level,
the two functions are identical.
(Note that whether two functions are identical at the object code level
is highly dependent on which version of what compiler you're using,
and with which optimization flags.
Identical code generation for different functions occurs with very
high frequency when you use templates.)
Therefore, the linker says,
"Well, what's the point of having two identical functions?
I'll just keep one copy and use it to stand for both
<code>Class1::GetQ</code> and
<code>Class2::GetValue</code>."
</p>
<pre>
0:000&gt; u Class1::GetQ
010010d6 8b4104           mov     eax,[ecx+0x4]
010010d9 c3               ret
0:000&gt; u Class2::GetValue
010010d6 8b4104           mov     eax,[ecx+0x4]
010010d9 c3               ret
</pre>
<p>
Notice that the two functions were merged: The addresses are
identical.
That one fragment of code merely goes by two names.
Therefore, when the debugger sees that you've jumped to
<code>0x010010d6</code>,
it doesn't know which of the names it should use, so it just picks on.
</p>
<p>
That's why it looks like you jumped to the wrong function.
</p>
<p>
To disable what is called "identical COMDAT folding", you can pass
<a HREF="http://msdn.microsoft.com/library/en-us/vccore/html/_core_.2f.OPT.asp">
the <code>/OPT:NOICF</code> flag</a> to the linker.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (44)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-266293">
				<div id="div-comment-266293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266293">
			March 22, 2005 at 7:09 am</a>		</div>

		<p>Wow. I thought I&#8217;d seen some interesting behavior, but I&#8217;ve never seen that one. Thanks Raymond!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266263">
				<div id="div-comment-266263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266263">
			March 22, 2005 at 7:11 am</a>		</div>

		<p>And this feature is what makes C++ templates a viable solution for applications.</p>
<p>Otherwise templates would cause sufficient explosion in code size that they&#8217;d be almost unusable for production software.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266273">
				<div id="div-comment-266273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox [MS]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266273">
			March 22, 2005 at 7:13 am</a>		</div>

		<p>This doesn&#8217;t just affect debugging. It also affects sampling profilers for the same reason. So, when doing sampling profiling, you may want to throw the /OPT:NOICF switch to avoid getting time attributed to the wrong functions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266333">
				<div id="div-comment-266333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266333">
			March 22, 2005 at 7:19 am</a>		</div>

		<p>Oh, never mind, I found the answer: it crashed because the function pointers were compared elsewhere in the program. Do more recent versions of the compiler recognise this situation?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266303">
				<div id="div-comment-266303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266303">
			March 22, 2005 at 7:23 am</a>		</div>

		<p>There was a problem with MSVC6&#8217;s ICF that caused <font color=red>Browser X</font>&#8216;s JavaScript engine to crash when compiled as a release mode DLL.</p>
<p>From your description, I don&#8217;t see how such a thing could happen. Surely, if functions are truly identical, there&#8217;s no way this could cause a crash?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266313">
				<div id="div-comment-266313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Florian W.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266313">
			March 22, 2005 at 7:23 am</a>		</div>

		<p>A little bit off-topic: Why does the VisualStudio 2003 has sometimes a very short list of entries inside the call-stack?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266343">
				<div id="div-comment-266343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266343">
			March 22, 2005 at 7:28 am</a>		</div>

		<p>the bug was presumably fixed in the <font color=red>Browser X</font> code, I don&#8217;t suppose the compiler can detect in the general case whether the address of one of the functions that has suffered from ICF is being compared to another. (And it would be too heavy-handed to disallow ICF on functions that have just had their addresses taken.) </p>
<p>I found the same bug in <font color=red>Program Y</font>, when porting it to a new system &#8212; there was an assert to ensure you didn&#8217;t add a certain callback twice, which was exactly what happened once the linker had been at it&#8230; </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266353">
				<div id="div-comment-266353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266353">
			March 22, 2005 at 7:36 am</a>		</div>

		<p>The bug was &quot;fixed&quot; by disallowing ICF for that particular source file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266383">
				<div id="div-comment-266383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jbn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266383">
			March 22, 2005 at 7:51 am</a>		</div>

		<p>a way for the linker to avoid folding identical functions for which different addresses are needed would be to insert NOP or jump instructions in front of the common body, and use the address of the 1st NOP instruction (or a jump instruction). This way for large enough duplicated methods, you&#8217;d still get separate identities and code factoring.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266393">
				<div id="div-comment-266393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gene</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266393">
			March 22, 2005 at 7:53 am</a>		</div>

		<blockquote><p>
  it crashed because the function pointers were compared elsewhere in the program. </p>
<p>Ooooh, that&#8217;s so wrong on so many levels. WTF are they doing comparing functions? Why would you ever need to do that? And why would it crash if the answer was &#8220;yes, they&#8217;re equal&#8221;? I hope their nose hairs are still on fire. </p>
<p>Frickin&#8217; <font color=red>Browser X</font> retards. I&#8217;m suppressing the urge to rant, but it&#8217;s really difficult.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266403">
				<div id="div-comment-266403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://barrkel.blogspot.com' rel='external nofollow' class='url'>Barry Kelly</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266403">
			March 22, 2005 at 8:02 am</a>		</div>

		<p>&#8220;I hope their nose hairs are still on fire. </p>
<p>Frickin&#8217; <font color=red>Browser X</font> retards. I&#8217;m suppressing the urge to rant, but it&#8217;s really difficult.&#8221; </p>
<p>Oh! The hypocrisy!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266413">
				<div id="div-comment-266413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266413">
			March 22, 2005 at 8:13 am</a>		</div>

		<p>Gene: ISTR that it&#8217;s used as a type check in the JS compiler. It&#8217;s somewhat poor design, but it&#8217;s perfectly legal. The C standard specifies that pointers to different functions will compare unequal. Identical COMDAT folding breaks this, so it should not be enabled by default. Unfortunately the Visual Studio IDE does enable it in new C/C++ projects.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266423">
				<div id="div-comment-266423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266423">
			March 22, 2005 at 8:16 am</a>		</div>

		<p>Tom_ wrote: &#8220;the bug was presumably fixed in the <font color=red>Browser X</font> code &#8230; I found the same bug in <font color=red>Program Y</font>&#8221; </p>
<p>Comparing function pointers is not a bug. The bug is in the build settings that enable ICF for such code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266433">
				<div id="div-comment-266433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gene</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266433">
			March 22, 2005 at 8:35 am</a>		</div>

		<blockquote><p>
  Oh! The hypocrisy! </p>
<p>And why is that? Because <font color=red>Browser X</font> happens to be my browser of choice? Because I was hoping their coding standards were &#8220;better than the other guy&#8221;? Because I&#8217;m a Linux guy? Because I happen to prefer a command line to a GUI? Because I&#8217;ve been bitten by as much code that assumes GCC as assumes MSVC or assumes a particular optimization switch? </p>
<p>Stupid software tricks suck, whether it&#8217;s open source or Microsoft, or an app for which you have to write a compatiblity shim. The results of comparing pointers are undefined by the standards and up to the compiler, and all I&#8217;m saying is if you expect something sane from such an operation, you deserve a beating.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266443">
				<div id="div-comment-266443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://http:blogs.msdn.comAngryRichard' rel='external nofollow' class='url'>Angry Richard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266443">
			March 22, 2005 at 8:35 am</a>		</div>

		<p>&quot;The C standard specifies that pointers to different functions will compare unequal.&quot;</p>
<p>Just because it&#8217;s in the standard doesn&#8217;t mean it&#8217;s good practice.  The c++ standard says I can insert elements at the beginning of a vector&lt;T&gt;, but no one in their right mind would do that regularly.</p>
<p>A good callback implementation would include a context parameter.  Not only does this allow you to create callbacks to object methods, but it would allow the registration function a legitimate way to detect double registrations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266453">
				<div id="div-comment-266453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266453">
			March 22, 2005 at 8:52 am</a>		</div>

		<p>Ben: When I run the C compiler in ANSI-compliant mode (/Za), the identical functions are not folded.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266473">
				<div id="div-comment-266473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/junfeng' rel='external nofollow' class='url'>Junfeng Zhang</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266473">
			March 22, 2005 at 9:30 am</a>		</div>

		<p>A trivial, </p>
<p>CLR had COMDAT Folding turned off, because when in debug it needs to compare function pointers(As I remembered). </p>
<p>The code has been re-written since, and CLR has COMDAT turned on now. As a result, the size of mscorwks.dll shrinks by several hundred KBs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266483">
				<div id="div-comment-266483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266483">
			March 22, 2005 at 9:34 am</a>		</div>

		<p>It seems like it would be trivial to record whether the address of a function is taken, or exposed as a exported function.  If either of these conditions are true, then the function would be considered &#8216;unfoldable&#8217;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266493">
				<div id="div-comment-266493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Becke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266493">
			March 22, 2005 at 10:10 am</a>		</div>

		<p>At least historically the debugging symbols have included only the filename not the full path to a source file.</p>
<p>In at least one instance Ive debugged into the wrong function, because two cpp files, in different parts of the project tree, had the same name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266503">
				<div id="div-comment-266503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266503">
			March 22, 2005 at 10:13 am</a>		</div>

		<p>It&#8217;s less trivial when you realize that the .c file that defines the function need not be the same .c file that takes its address. Therefore the information would have to be passed in the .obj file and reconciled by the linker. Not that it can&#8217;t be done, but it&#8217;s not trivial either.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266553">
				<div id="div-comment-266553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nate</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266553">
			March 22, 2005 at 10:45 am</a>		</div>

		<p>Perhaps it isn&#8217;t trivial to figure out if any function pointer address is referenced, but what I&#8217;m getting at is that compilers have solved what would seem to be much more difficult hurdles already.  Take a look at the gymnastics behind template code generation, making sure that template code is only used once and doesn&#8217;t result in ugly linkage errors.  If that can be resolved, then I&#8217;d imagine so could this issue.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266563">
				<div id="div-comment-266563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266563">
			March 22, 2005 at 10:59 am</a>		</div>

		<p>Indeed, it is precisely this feature (COMDAT folding) that makes templates work!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266583">
				<div id="div-comment-266583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stuart Brockman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266583">
			March 22, 2005 at 11:36 am</a>		</div>

		<p>Even if a debugger is not able to tell which of the folded functions is being run, couldnt it detect that the function is folded and at least give the user the option to look at the other &#8216;foldees&#8217;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266593">
				<div id="div-comment-266593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266593">
			March 22, 2005 at 12:19 pm</a>		</div>

		<p>Gene wrote: &quot;The results of comparing pointers are undefined by the standards and up to the compiler &#8230;&quot;</p>
<p>The result of testing equality of pointers, including function pointers, is defined in both C and C++. See ISO 9899:1999 6.5.9/6 and ISO 14882:2003 5.10/1.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266603">
				<div id="div-comment-266603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266603">
			March 22, 2005 at 12:29 pm</a>		</div>

		<p>Raymond wrote: &quot;Indeed, it is precisely this feature (COMDAT folding) that makes templates work!&quot;</p>
<p>That&#8217;s wrong on two levels. Template instantiation can be implemented in several different ways, though most current implementations use &quot;greedy instantiation&quot;, i.e. generating code in each translation unit that needs it. This requires the basic COMDAT functionality (linker accepts multiple sections defining the same symbol and resolves all references to just one of them) but not ICF (linker merges sections with the same contents).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266613">
				<div id="div-comment-266613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266613">
			March 22, 2005 at 12:39 pm</a>		</div>

		<p>True, but notice that COMDAT doesn&#8217;t require one obj file (the one that takes the address of a function) to &quot;cancel&quot; another one (the one that generates the code for the function with the flag &#8216;it&#8217;s okay to merge me&#8217;). It is this &quot;cancellation&quot; that makes things nontrivial.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266623">
				<div id="div-comment-266623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266623">
			March 22, 2005 at 12:42 pm</a>		</div>

		<p>Raymond wrote: &quot;When I run the C compiler in ANSI-compliant mode (/Za), the identical functions are not folded.&quot;</p>
<p>At least in VC++ 7.1, /Za has nothing to do with it. ICF is enabled whenever optimisations are enabled (either /O1 or /O2), whether or not /Za is used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266643">
				<div id="div-comment-266643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266643">
			March 22, 2005 at 12:45 pm</a>		</div>

		<p>Okay, I haven&#8217;t written a compiler in a long time. Maybe compilers are smarter now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266633">
				<div id="div-comment-266633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266633">
			March 22, 2005 at 12:49 pm</a>		</div>

		<p>I&#8217;d assume the things they&#8217;ve added post VC6 to the linker to make WPO work (specifically, inlining functions defined in different object files) would make marking functions that have their address taken easy. I mean solving this type of problem is almost the same as making sure a function is removed from the EXE if its address never taken and/or gets completely inlined away. You&#8217;d have the same types of problems with functions exported from DLLs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266653">
				<div id="div-comment-266653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266653">
			March 22, 2005 at 1:03 pm</a>		</div>

		<p>It sounds like enabling COMDAT folding would have a performance impact, especially in large projects, due to cache misses from having to jump to possibly-distant locations for even trivial functions. Has anyone done tests in large CPU-bound, template-heavy applications to see if this does has an impact on performance, and if so, what the impact was?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266683">
				<div id="div-comment-266683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom_</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266683">
			March 22, 2005 at 2:19 pm</a>		</div>

		<p>I don&#8217;t think distance is relevant for caching on x86, just that portion of the address (bottom 12 or 13 bits I think?) that is used to determine the cache slot entry.</p>
<p>(I guess you could end up with potential problems due to ICF, but it would be by accident, and if you&#8217;re relying on not getting that behaviour then you&#8217;re on shaky ground by relying on that sort of linker option to enforce it.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266693">
				<div id="div-comment-266693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox [MS]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266693">
			March 22, 2005 at 4:08 pm</a>		</div>

		<p>Enabling COMDAT folding is good for performance, because it decreases your overall code footprint and increases the chance that code you need will be in the processor cache and or indeed physical memory. Hitting the pagefile is very expensive.</p>
<p>It&#8217;s also a useful optimization for constrained memory situations, where overall footprint is critical (e.g. Xbox, or handheld devices which do not have a pagefile).</p>
<p>The precise gains vary based on your situation, but in template-heavy code it can be significant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266723">
				<div id="div-comment-266723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266723">
			March 22, 2005 at 7:10 pm</a>		</div>

		<p>Can you give a non-contrived example of how COMDAT folding leads to significant size reduction of templated code?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266753">
				<div id="div-comment-266753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266753">
			March 22, 2005 at 9:38 pm</a>		</div>

		<p>I had a feeling you would say something like that but I have a gripe with it. My idea is that that for COMDAT folding to be effective, the functions (and template parameters) have to be really trivial to generate identical code. Most, if not all, of these functions are trivial inline functions like your example (unless the author of the code is so braindead as to not make them inline but then WPO would take care of that these days). The code for AddRef/Release (I&#8217;m assuming not calling them is an oversight, because they wouldn&#8217;t even be compiled at all given your code above) would be generated in the object files just in case its address gets taken, or it needs to reference it in another translation unit, etc. but the code should be completely eliminated from the final EXE/DLL after linkage. If this weren&#8217;t the case, then modern libraries that rely heavily on recursive templates or dummy classes like boost or any other template metafunction code would be really huge and I highly doubt Visual Studio handles inline template functions that stupidly.</p>
<p>I also have a similar gripe with the way .NET generics are advertised as being less bloated than C++ templates because of code sharing of reference types, but that&#8217;s another rant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266733">
				<div id="div-comment-266733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266733">
			March 22, 2005 at 7:37 pm</a>		</div>

		<p>asdf &#8211; sure.</p>
<p>template &lt;typename T&gt;<br />
<br />class RefCount<br />
<br />{<br />
<br />    T* m_pObj;<br />
<br />    DWORD m_refcount;</p>
<p>public:<br />
<br />    RefCount(T* pType) : m_pObj(pType), m_refcount(1)<br />
<br />    {<br />
<br />    }</p>
<p>    DWORD AddRef() { return m_refcount++; };<br />
<br />    DWORD Release() { if (&#8211;m_refcount == 0)<br />
<br />    {<br />
<br />        delete m_pObj; m_pObj = NULL;<br />
<br />    }</p>
<p>        return m_refcount;<br />
<br />    }<br />
<br />}</p>
<p>void Start()<br />
<br />{<br />
<br />    A* pA = new A;<br />
<br />    B* pB = new B;</p>
<p>    RefCount&lt;A&gt; a(pA);<br />
<br />    RefCount&lt;B&gt; b(pB);</p>
<p>}</p>
<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;</p>
<p>Without COMDAT folding:<br />
<br />You end up with a RefCount&lt;A&gt;::AddRef, a RefCount&lt;B&gt;::AddRef, a RefCount&lt;A&gt;::Release and a RefCount&lt;B&gt;::Release.</p>
<p>With COMDAT folding:<br />
<br />You end up with a RefCount&lt;*&gt;::AddRef, and a RefCount&lt;*&gt;::Release.</p>
<p>(At least, that&#8217;s how I think it works &#8211; I have a cold, so I may be wrong).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266823">
				<div id="div-comment-266823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox [MS]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266823">
			March 23, 2005 at 7:09 am</a>		</div>

		<p>asdf:</p>
<p>You don&#8217;t have to take anyone&#8217;s word for it: try it yourself. Take a large project, with plenty of template code, and then compile/link with and without COMDAT folding and compare the difference. It&#8217;s significant (I&#8217;ve seen double-digit percentage gains many times).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266813">
				<div id="div-comment-266813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2005/03/23/400938.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266813">
			March 23, 2005 at 8:57 am</a>		</div>

		<p>Pointers to virtual functions all look the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-266773">
				<div id="div-comment-266773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-266773">
			March 23, 2005 at 1:31 am</a>		</div>

		<p>Normally, AddRef and Release are virtual functions and cannot be inlined. In that case, folding duplicate functions *is* effective.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267023">
				<div id="div-comment-267023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-267023">
			March 23, 2005 at 2:06 pm</a>		</div>

		<p>It&#8217;s interesting to see that the Windows kernel uses the exactly opposite principle: a large number of functions are forced to be inlined. When looking at the disassembly, you see the same old &quot;faces&quot; over and over again (e.g. you learn pretty quickly to recognize KeLeaveCriticalRegion &#8211; the call to HalRequestSoftwareInterrupt(APC_LEVEL) gives it away). Same goes for interrupt handlers: all of them share most of the code, yet they are kept distinct</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-267073">
				<div id="div-comment-267073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tony Cox [MS]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-267073">
			March 23, 2005 at 5:11 pm</a>		</div>

		<p>There&#8217;s obviously a balance. Some functions are small enough that it&#8217;s better to inline them even if it means duplication, while others are not. I can&#8217;t speak to the particular compiler settings and inlining choices made in the kernel, since I&#8217;m not a kernel developer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267083">
				<div id="div-comment-267083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Isaac Chen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-267083">
			March 23, 2005 at 8:37 pm</a>		</div>

		<p>Ben wrote: &quot;The result of testing equality of pointers, including function pointers, is defined in both C and C++. See ISO 9899:1999 6.5.9/6 and ISO 14882:2003 5.10/1.&quot;</p>
<p>According to the (draft) C standard copy I have:<br />
<br />&quot;Two pointers compare equal if &#8230; both are pointers to the same function.&quot;</p>
<p>My reading of above is that the reverse is not necessary true. It seems to know the difference of &quot;if&quot; and &quot;if and only if&quot; (see 6.5.9/4).</p>
<p>According to 6.5.8/in C:<br />
<br />&quot;When two pointers are compared, &#8230;(standard specified comparison behavior deleted). In all other cases, the behavior is UNDEFINED.&quot;</p>
<p>And according to 5.9/2 in C++, the result of comparison of pointers to different functions is UNSPECIFIED.</p>
<p>So in both languages, the compiler seems to have the right to do whatever it sees fit if the program tries to &quot;compare pointers to different functions&quot;.</p>
<p>Isaac Chen<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-267093">
				<div id="div-comment-267093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-267093">
			March 23, 2005 at 11:26 pm</a>		</div>

		<p>The sections you quoted deal with relational operators, Ben was talking about the equality operators: &quot;Two pointers of the same type compare equal if and only if they &#8230; both point to the same function&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-267103">
				<div id="div-comment-267103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Isaac Chen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-267103">
			March 24, 2005 at 12:34 am</a>		</div>

		<p>I forgot to mention the related paragraphs:</p>
<p>6.5.9/3 in C<br />
<br />&quot;The == (equal to) and != (not equal to) operators are analogous to the relational operators except for their lower precedence.&quot;</p>
<p>5.10/1 in C++<br />
<br />&quot;The == (equal to) and the != (not equal to) operators have the same semantic restrictions, conversions, and result type as the relational operators except for their lower precedence and truth-value result.&quot;</p>
<p>I didn&#8217;t see the &quot;only if&quot; part in Ben&#8217;s message and the (draft) standards regarding these operators.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-292613">
				<div id="div-comment-292613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/scarroll/archive/2005/07/25/443210.aspx' rel='external nofollow' class='url'>scarroll's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113#comment-292613">
			July 25, 2005 at 7:57 pm</a>		</div>

		<p>Here&#8217;s another fun one from the internal support alias.</p>
<p>When you profile with the VS Profiler, you&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

