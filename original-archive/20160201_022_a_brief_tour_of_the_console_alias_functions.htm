<html>
<head>
<title>A brief tour of the console alias functions</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A brief tour of the console alias functions</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 1, 2016 / year-entry #23</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Kicking the tires.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program exercises the console alias functions.
These functions let you define console aliases which are
active when a target program reads a line of text from the console.
The alias is recognized when it is entered at the start of a line.
(Therefore, a way to defeat an alias is to put a space in front of it.)
More details about console aliases can be found in
<a HREF="https://technet.microsoft.com/en-us/library/bb490894.aspx">
the documentation for <code>DOSKEY</code></a>.
</p>
<p>
The program we'll write has five commands:
</p>
<dl>
<dt><code>add program.exe alias "value"</code></p>
<dd>This defines a console alias for the specified program.</p>
<dt><code>delete program.exe alias</code></p>
<dd>This deletes a console alias definition.</p>
<dt><code>show program.exe alias</code></p>
<dd>This shows the current definition of an alias.</p>
<dt><code>showall program.exe</code></p>
<dd>This shows all aliases defined for the specified program.</p>
<dt><code>showexes</code></p>
<dd>This shows all programs that have aliases defined.
</dl>
<p>
Let's dive in.
</p>
<pre>
#define UNICODE
#define _UNICODE
#include &lt;windows.h&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;

void do_add(int argc, wchar_t **argv);
void do_delete(int argc, wchar_t **argv);
void do_show(int argc, wchar_t **argv);
void do_showall(int argc, wchar_t **argv);
void do_showexes(int argc, wchar_t **argv);

int __cdecl wmain(int argc, wchar_t **argv)
{
  auto command = argv[1];

  if (wcscmp(command, L"add") == 0) {
    do_add(argc, argv);
  } else if (wcscmp(command, L"delete") == 0) {
    do_delete(argc, argv);
  } else if (wcscmp(command, L"show") == 0) {
    do_show(argc, argv);
  } else if (wcscmp(command, L"showall") == 0) {
    do_showall(argc, argv);
  } else if (wcscmp(command, L"showexes") == 0) {
    do_showexes(argc, argv);
  }
  return 0;
}
</pre>
<p>
The main program looks at the first command line argument and dispatches
the rest of the work to the appropriate handler function.
Now let's look at each of the handlers.
Remember, Little Programs do little to no error checking.
</p>
<pre>
void do_add(int argc, wchar_t **argv)
{
  auto program = argv[2];
  auto alias = argv[3];
  auto value = argv[4];
  if (AddConsoleAlias(alias, value, program)) {
    std::wcout &lt;&lt; alias &lt;&lt; L"=" &lt;&lt; value &lt;&lt; std::endl;
  } else {
    std::wcout &lt;&lt; L"Failed to add alias" &lt;&lt; std::endl;
  }
}
</pre>
<p>
To add an alias, we call <code>Add&shy;Console&shy;Alias</code>
with the alias, the value, and the program it should be applied to.
An example alias might be
</p>
<pre>
scratch add cmd.exe proj
  "cd /D \"%USERPROFILE%\Documents\Visual Studio 2015\Projects\$*\""
</pre>
<p>
(All one line; split into two for expository purposes.)
</p>
<p>
This lets you type <code>proj</code> to go to your Visual Studio
projects directory, and <code>proj scratch</code> to go to the
<code>scratch</code>
project.
Note that we had to quote the value twice,
once to get it past the scratch program's command line parser,
and a second time to get it past <code>cmd.exe</code>'s command
line parser.
</p>
<p>
Next is deletion:
To delete an alias, you set it to a null pointer.
</p>
<pre>
void do_delete(int argc, wchar_t **argv)
{
  auto program = argv[2];
  auto alias = argv[3];
  if (AddConsoleAlias(alias, nullptr, program)) {
    std::wcout &lt;&lt; alias &lt;&lt; L" deleted" &lt;&lt; std::endl;
  } else {
    std::wcout &lt;&lt; L"Failed to delete alias" &lt;&lt; std::endl;
  }
}
</pre>
<p>
Continuing our example, if you get bored of the <code>proj</code>
alias, you can delete it by saying
<code>scratch delete cmd.exe proj</code>.
</p>
<p>
The next command is for showing the value of an alias,
</p>
<pre>
void do_show(int argc, wchar_t **argv)
{
  auto program = argv[2];
  auto alias = argv[3];
  wchar_t value[8192];
  if (GetConsoleAlias(alias, value, sizeof(value), program)) {
    std::wcout &lt;&lt; alias &lt;&lt; L"=" &lt;&lt; value &lt;&lt; std::endl;
  } else {
    std::wcout &lt;&lt; L"Cannot show (maybe it isn't defined)" &lt;&lt; std::endl;
  }
}
</pre>
<p>
There is no way to query the length of an alias's value,
but since
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/12/10/56028.aspx">
the maximum command line length supported by <code>cmd.exe</code> is 8192</a>,
a buffer size of 8192 is a safe bet for now.
(This is a Little Program and doesn't need to worry itself with
pesky things like forward compatibility.)
</p>
<p>
The last two commands are for showing all the aliases defined
for a specific program,
and for showing the programs that have aliases defined.
The two functions are very similar, so we present them together.
First, a simple version that is subtly defective:
</p>
<pre>
<i>// code in italics is wrong
void do_showall(int argc, wchar_t **argv)
{
  auto program = argv[2];
  auto bytes = GetConsoleAliasesLength(program);
  std::vector&lt;wchar_t&gt; buffer(
    (bytes + sizeof(wchar_t) + 1) / sizeof(wchar_t));
  if (GetConsoleAliases(buffer.data(), bytes, program)) {
    for (auto current = buffer.data();
         current &lt; buffer.data() + buffer.size();
         current += wcslen(current) + 1) {
      std::wcout &lt;&lt; current &lt;&lt; std::endl;
    }
  }
}

void do_showexes(int argc, wchar_t **argv)
{
  auto bytes = GetConsoleAliasExesLength();
  std::vector&lt;wchar_t&gt; buffer(
    (bytes + sizeof(wchar_t) + 1) / sizeof(wchar_t));
  if (GetConsoleAliasExes(buffer.data(), bytes)) {
    for (auto current = buffer.data();
         current &lt; buffer.data() + buffer.size();
         current += wcslen(current) + 1) {
      std::wcout &lt;&lt; current &lt;&lt; std::endl;
    }
  }
}</i>
</pre>
<p>
One annoyance here is that the
<code>Get&shy;Console&shy;Aliases&shy;Length</code>
function returns a byte count rather than a <code>TCHAR</code> count,
so we have to do conversion between bytes and <code>TCHAR</code>s.
In case we get an odd number back (which shouldn't ever happen,
but better safe than sorry), we round up to get the number of
<code>wchar_t</code>s.
</p>
<p>
The next annoyance is that the <code>Get&shy;Console&shy;Aliases</code>
function returns a series of null-terminated strings,
but the last string is not double-null-terminated
(or more accurately,
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/10/08/9904646.aspx">
terminated with an empty string</a>).
This means that <i>you don't know when you're finished</i>!
After you process one string, the next byte could be the start of
the next string,
or it could just be uninitialized garbage.
If another thread deletes an alias between the calls to
<code>Get&shy;Console&shy;Aliases&shy;Length</code>
and
<code>Get&shy;Console&shy;Aliases</code>,
then we pass a too-large buffer to
<code>Get&shy;Console&shy;Aliases</code>,
and the unused bytes contain uninitialized garbage,
and we have no way to know when the valid data ends and the
uninitialized garbage begins.
</p>
<p>
Not knowing when you have reached the end of the valid data
is a really bad situation for a program to be in.
</p>
<p>
We can work around this problem by zeroing out the memory before we call
<code>Get&shy;Console&shy;Aliases</code>;
that way, if the buffer we pass turns out to be too large
(because another thread deleted an alias in the meantime),
the extra zeros we wrote created a double-null-terminated string
buffer.
</p>
<p>
On the other hand, if that didn't happen, then we want to stop
when we reached the end of the buffer.
</p>
<p>
The final problem is that another thread could <i>add</i> an alias
in between our calls to
<code>Get&shy;Console&shy;Aliases&shy;Length</code>
and
<code>Get&shy;Console&shy;Aliases</code>,
and the call to <code>Get&shy;Console&shy;Aliases</code> will fail
because the buffer is too small.
In that case, we want to loop back and try again with a bigger buffer.
</p>
<p>
All of the preceding issues with
<code>Get&shy;Console&shy;Aliases</code> also apply to
<code>Get&shy;Console&shy;Alias&shy;Exes</code>.
</p>
<p>
Here's the resulting code that tries to solve all of the problems:
</p>
<pre>
template&lt;typename GetLengthBytes, typename GetContents&gt;
void PrintAliasValue(
  const GetLengthBytes&amp; getLengthBytes,
  const GetContents&amp; getContents)
{
  std::vector&lt;wchar_t&gt; buffer;
  do {
    auto bytes = getLengthBytes();
    auto length = (bytes + sizeof(wchar_t) - 1) / sizeof(wchar_t);
    buffer.resize(length);
    ZeroMemory(buffer.data(), bytes);
    SetLastError(ERROR_SUCCESS);
    if (getContents(buffer.data(), bytes)) {
      for (auto current = buffer.data();
           current &lt; buffer.data() + buffer.size() &amp;&amp; *current;
           current += wcslen(current) + 1) {
        std::wcout &lt;&lt; current &lt;&lt; std::endl;
      }
    }
  } while (GetLastError() == ERROR_MORE_DATA);
}

void do_showall(int argc, wchar_t **argv)
{
  auto program = argv[2];
  PrintAliasValue(
    [program]() { return GetConsoleAliasesLength(program); },
    [program](LPTSTR buffer, DWORD length) {
        return GetConsoleAliases(buffer, length, program); });
}

void do_showexes(int argc, wchar_t **argv)
{
  PrintAliasValue(
    []() { return GetConsoleAliasExesLength(); },
    [](LPTSTR buffer, DWORD length) {
       return GetConsoleAliasExes(buffer, length); });
}
</pre>
<p>
The underlying algorithm is the same:
Get the byte length,
allocate a vector of characters,
zero-initialize the data in the vector so that we can
detect that a short buffer was returned,
then ask for the data.
If it succeeds, then read out the data, but stop when we
hit one of our preallocated zeroes, or when we reach the end
of the buffer, whichever comes first.
If it fails because the buffer is too small, then loop back
and try again.
</p>
<p>
So there you have it.
A quick tour of the console alias functions.
Now you can write your own <code>DOSKEY</code> replacement.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1225371">
				<div id="div-comment-1225371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225371">
			February 1, 2016 at 8:00 am</a>		</div>

		<p>I have used doskey in the console autorun value for 15+ years and the one annoying thing about it is that doskey crashes every now and then when started from that key. Maybe this series(?) is the kick in the butt I need to fix this myself once and for all.</p>
<p>Is there any hope of getting the history of some of the other console stuff like full graphics support, custom menus and the other undocumented things that go back to the early days of NT?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1225381">
				<div id="div-comment-1225381" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225381">
			February 1, 2016 at 11:24 am</a>		</div>

		<p>Didn&#8217;t Microsoft beat its chest claiming API&#8217;s are no longer UCS-2 but UTF-16? (we all know that&#8217;s impossible, especially if you think of NTFS and $UpCase, but let&#8217;s play along). So potentially, you&#8217;d need 4, 6 or 8 times the amount of memory, why returning # of bytes is definitely the most sane (the opposite, returning # of glyphs, would be insane).</p>
<p>I think I prefer byte count over some randomized glyph-count (especially when it&#8217;s based on a lie).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1225391">
				<div id="div-comment-1225391" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225391">
			February 1, 2016 at 11:59 am</a>		</div>

		<p>Most Win32 functions return the number of TCHARs; i.e., the number of code units. There may be some special-purpose functions that return the number of code points (which I think is what you mean by glyphs), but they are the exception rather than the rule.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1225401">
				<div id="div-comment-1225401" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://harryjohnston.wordpress.com' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225401">
			February 1, 2016 at 3:04 pm</a>		</div>

		<p>I don&#8217;t see that $UpCase is a problem per se, assuming that it translates the surrogates to themselves.  That means anything outside the BMP plane is necessarily case-sensitive, but does that matter?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1225411">
				<div id="div-comment-1225411" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225411">
			February 1, 2016 at 3:12 pm</a>		</div>

		<p>What makes this method better than adding a directory to the PATH that contains useful .bat files?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1225421">
				<div id="div-comment-1225421" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225421">
			February 1, 2016 at 4:20 pm</a>		</div>

		<p>This can be used to create aliases for any app that reads command lines (such as ntsd and cdb or <a href="https://blogs.msdn.microsoft.com/oldnewthing/20160113-00/?p=92841" rel="nofollow">my fake debugger app</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-exchange-development-blog-team even thread-odd thread-alt depth-1" id="comment-1225431">
				<div id="div-comment-1225431" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exchange development blog team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225431">
			February 1, 2016 at 4:44 pm</a>		</div>

		<p>&gt;More details about console aliases can be found in the documentation for DOSKEY. </p>
<p>Uhh, not they aren&#8217;t.  Only one occurrence of &#8220;console&#8221; on that page and it doesn&#8217;t mention aliases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-exchange-development-blog-team odd alt thread-even depth-1 parent" id="comment-1225374">
				<div id="div-comment-1225374" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exchange development blog team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225374">
			February 1, 2016 at 4:45 pm</a>		</div>

		<p>Console aliases are covered here: <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms682057%28v=vs.85%29.asp" rel="nofollow">https://msdn.microsoft.com/en-us/library/windows/desktop/ms682057%28v=vs.85%29.asp</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1225441">
				<div id="div-comment-1225441" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225441">
			February 1, 2016 at 5:03 pm</a>		</div>

		<p>Hey look, that page says &#8220;For more information on the special codes that can be used in Doskey macro definitions, see the command-line help for Doskey.exe or Doskey on TechNet.&#8221;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1225961">
				<div id="div-comment-1225961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DOS JOCKEY</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160201-00/?p=92952#comment-1225961">
			February 4, 2016 at 3:04 pm</a>		</div>

		<p>Can you believe that the DOSKEY instructions include this?  </p>
<p>  To create a macro that performs a quick and unconditional format of a disk, type:<br />
  doskey qf=format $1 /q /u </p>
<p>  To format a disk in drive A quickly and unconditionally, type:<br />
  qf a:</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

