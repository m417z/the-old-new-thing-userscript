<html>
<head>
<title>Allocating page file space without allocating RAM</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Allocating page file space without allocating RAM</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 21, 2015 / year-entry #268</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Fixing an old tool.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The Windows Server 2003 Resource Kit comes with a tool called
<code>consume.exe</code>,
and one of the things you can ask it to do is to suck up space
in your swap file.
If you run the program in that mode, you see that it 
manages to do its job without consuming physical memory.
(The amount of Free Pages in Task Manager remains constant.)
How is that possible?
</p>
<p>
Recall that memory allocation in user-mode is virtual
(unless you are using the special functions that specifically
allocate physical memory).
When you "allocate memory", you are really just allocating commit.
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/10/02/9902146.aspx">
Commit is the promise to produce memory upon access</a>,
but until you actually access it,
there is no requirement that memory be produced.
</p>
<p>
The <code>consume.exe</code> does its work by simply calling
<code>Virtual&shy;Alloc</code> to commit pages,
but never accessing them.
Since the program never accesses the pages,
the system never needs to find physical RAM to back them.
It can just leave the pages committed in the page file.
</p>
<p>
Actually, it's even more virtual than this:
There is no specific page in the page file with your name on it.
The operating system only needs to make sure that
it can produce the memory on demand.
Since you never wrote anything,
the page starts out filled with zeros,
and there is no need to find a spot in the page file
and physically fill it with zero.
The memory manager can just tag your commit with
"If anybody asks for this memory, just give them a page filled
with zero."
Of course, if you actually write to the memory,
then the memory manager needs to be sure that there's space in
the page file to write your modifications,
so that they can be read back on demand.
</p>
<p>
(In theory, the operating system could check if the memory
about to be written to the page file is filled with zeroes,
and if so, then don't actually write anything but merely
edit the tag on the commit to say,
"If anybody asks for this memory, just give them a page filled
with zero."
In practice, I don't think this happens
because the cost of doing this extra work for every page
doesn't exceed the benefit of saved I/O on the rare cases
it actually detects a page that has been modified to be full of zeros.)
</p>
<p>
The catch for the
<code>consume.exe</code> program is that it will eventually
<!-- backref: It's the address space, stupid -->
run out of virtual address space</a>.
At the time
<code>consume.exe</code> was written, this was probably not an issue
because computers didn't have that much memory,
and page files were typically less than 2GB.
But now, with 1GB of RAM being typical on entry-level machines,
the prospect of exhausting the virtual address space on a 32-bit system
becomes more likely.
</p>
<p>
Today's Little Program is a version of
<code>consume.exe</code> that can
soak up space in the page file in excess of 2GB,
even on 32-bit systems.
</p>
<p>
The trick is to allocate commit 
without consuming address space.
We actually saw how to do this a long time ago,
when we discussed
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2009/07/06/9818299.aspx">
how a 32-bit application can allocate more than 4GB of memory</a>:
Use
<code>Create&shy;File&shy;Mapping</code> to create commit without
mapping it.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

#define GIGABYTE (1024 * 1024 * 1024)

int __cdecl main(int argc, char **argv)
{
 if (argc &gt;= 2) {
  int gigabytes = atoi(argv[1]);
  for (int i = 0; i &lt; gigabytes; i++) {
   printf("Allocating another gigabyte...\n");
   HANDLE h = CreateFileMapping(INVALID_HANDLE_VALUE, 0,
                                PAGE_READWRITE, 0, GIGABYTE, NULL);
   if (h != NULL) printf("Allocated\n");
   Sleep(1000);
  }
  printf("Done. Sleeping 30 seconds before exiting.\n");
  Sleep(30 * 1000);
 }
 return 0;
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1 parent" id="comment-1220031">
				<div id="div-comment-1220031" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681#comment-1220031">
			December 21, 2015 at 10:02 am</a>		</div>

		<p>Nice article!</p>
<p>Side point:  I consider 2GB to be the bare minimum to do any useful work; and 4GB is what I consider a typical entry-level computer.   YMMV.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1220061">
				<div id="div-comment-1220061" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Neely</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681#comment-1220061">
			December 21, 2015 at 12:31 pm</a>		</div>

		<p>Raymond&#8217;s queue of articles waiting to be posted is well over a year long.  If the 1GB figure was talking about netbook class computers, then it&#8217;s an out of date figure.  OTOH there&#8217;re Win 8/10 tablets on the market currently with only 1GB of ram; so you can find new machines at that spec.  I&#8217;d be reluctant to call them typical entry level machines though.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3 parent" id="comment-1220064">
				<div id="div-comment-1220064" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681#comment-1220064">
			December 21, 2015 at 5:20 pm</a>		</div>

		<p>Well, of course it&#8217;s assumed to be talking about desktops.</p>
<p>If you talk about smartphone (which should be able to be called computer now), lots of current models are still under 1GB. :P</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4" id="comment-1220081">
				<div id="div-comment-1220081" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681#comment-1220081">
			December 22, 2015 at 2:06 am</a>		</div>

		<p>There&#8217;s also a ton of cheap x86 tablets that have 1GB of memory (and run 32-bit Windows 8.1/10).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even depth-4" id="comment-1220091">
				<div id="div-comment-1220091" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681#comment-1220091">
			December 22, 2015 at 6:36 am</a>		</div>

		<p>Luckily, one doesn&#8217;t need Raymond&#8217;s program to exhaust the swap file on a phone.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1220181">
				<div id="div-comment-1220181" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcos Kirchner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681#comment-1220181">
			December 22, 2015 at 4:03 pm</a>		</div>

		<p>Is there any way to monitor and/or track this file mapping memory commit?<br />
While this sample program is waiting the last Sleep call I can see the total commit for the system is increased but I saw no way to associate that &#8220;extra commit&#8221; with the process.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1220271">
				<div id="div-comment-1220271" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681#comment-1220271">
			December 23, 2015 at 6:23 pm</a>		</div>

		<p>Shouldn&#8217;t it show up in Task Manager under Commit Size?  (That column might be hidden by default, so enable it.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1220301">
				<div id="div-comment-1220301" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcos Kirchner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20151221-00/?p=92681#comment-1220301">
			December 24, 2015 at 3:06 am</a>		</div>

		<p>Nope. Couldn&#8217;t find anything in task manager, process explorer, procmon counters and even tried some APIs but no good.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

