<html>
<head>
<title>Using #pragma detect_mismatch to help catch ODR violations</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using #pragma detect_mismatch to help catch ODR violations</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 3, 2016 / year-entry #161</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There can be more than one, but they must be the same.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of the more insidious problems
you may encounter are those traced back to
violations of the C++
<a HREF="https://en.wikipedia.org/wiki/One_Definition_Rule">
One Definition Rule</a>.
As a general rule,
if the conflicting definitions occur in separate translation units,
the behavior is undefined, but
no diagnostic is required.
The lack of a diagnostic means that if two translation units
define a type differently
(say, because they were compiled with different compile-time
configurations),
you may not notice a problem until you start dealing with
mysterious memory corruption.
</p>
<p>
These types of bugs are not fun to diagnose.
</p>
<p>
If you use the Microsoft Visual C++ toolchain,
then you can use the
<code>#pragma detect_mismatch("name", "value")</code> directive
to give the linker some help in identifying mismatched
definitions.
Specifically,
the linker verifies that all
such declarations with the same name also have the same value.
</p>
<p>
The idea here is that if you have something that is declared
differently based on compilation settings, you can emit a
different
<code>#pragma detect_mismatch("name", "value")</code> for
each version, using the same name but a different value.
The linker will then verify that everybody used the same version
of the header file.
</p>
<p>
Here's an example:
</p>
<pre>
// This is a fake mutex that does no locking.
struct fake_mutex
{
 void lock() {}
 void unlock() {}
};

class Contoso
{
#ifdef SINGLE_THREADED
   // single-threaded doesn't need a mutex.
   typedef fake_mutex mutex_t;
#else
   // multi-threaded needs a true mutex.
   typedef std::mutex mutex_t;
#endif

public:
  Contoso();

  void Activate()
  {
     std::lock_guard&lt;mutex_t&gt; lock(object_mutex);
#ifndef NDEBUG
    isActivated = true;
#endif
    ... business logic to activate the object ...
  }

  void Charge()
  {
     std::lock_guard&lt;mutex_t&gt; lock(object_mutex);
    // You must activate before you can charge.
    assert(!isActivated);
    ... business logic to charge the object ...
  }

private:
  ...
  mutex_t object_mutex;
#ifndef NDEBUG
  bool isActivated = false;
#endif
};
</pre>
<p>
If this class is used in a project, but one file in the project
is compiled with <code>SINGLE_<wbr>THREADED</code>
and another file is compiled without
<code>SINGLE_<wbr>THREADED</code>,
or if the two files disagree on
<code>NDEBUG</code>,
then you have an ODR violation.
In practice, this means that
bad things will happen
if the two files try to access the same <code>Contoso</code>
object.
</p>
<p>
You can use <code>#pragma detect_mismatch</code> to encode
which definition is being used.
This allows the linker to detect
whether a single project uses multiple conflicting definitions.
</p>
<pre>
// This is a fake mutex that does no locking.
struct fake_mutex
{
 void lock() {}
 void unlock() {}
};

class Contoso
{
#ifdef SINGLE_THREADED
   // single-threaded doesn't need a mutex.
   typedef fake_mutex mutex_t;
   <font COLOR=blue>#pragma detect_mismatch("Contoso threading", "Single");</font>
#else
   // multi-threaded needs a true mutex.
   typedef std::mutex mutex_t;
   <font COLOR=blue>#pragma detect_mismatch("Contoso threading", "Multi");</font>
#endif

<font COLOR=blue>#ifdef NDEBUG
   #pragma detect_mismatch("Contoso debug", "Nondebug");
#else
   #pragma detect_mismatch("Contoso debug", "Debug");
#endif</font>

public:
  Contoso();

  void Activate()
  {
     std::lock_guard&lt;mutex_t&gt; lock(object_mutex);
#ifndef NDEBUG
    isActivated = true;
#endif
    ... business logic to activate the object ...
  }

  void Charge()
  {
     std::lock_guard&lt;mutex_t&gt; lock(object_mutex);
    // You must activate before you can charge.
    assert(!isActivated);
    ... business logic to charge the object ...
  }

private:
  ...
  mutex_t object_mutex;
#ifndef NDEBUG
  bool isActivated = false;
#endif
};
</pre>
<p>
You can see the directive in action in
<a HREF="https://channel9.msdn.com/Series/C9-Lectures-Stephan-T-Lavavej-Advanced-STL/C9-Lectures-Stephan-T-Lavavej-Advanced-STL-3-of-n">
this Channel 9 video</a>
starring C++ library master
Stephan T. Lavavej.
The <code>detect_mismatch</code> trick
appears around timecode 29:30.
</p>
<p>
Note of course that you can use this technique for things other than
catching ODR violations.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-jeremytais even thread-even depth-1 parent" id="comment-1258665">
				<div id="div-comment-1258665" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258665">
			August 3, 2016 at 7:05 am</a>		</div>

		<p>While I understand that ODR violations are not a required diagnostic by C++ linkers, is there a reason that modern linkers don&#8217;t do the requisite check and emit at least a warning?  Is performing link-time ODR checking really that computationally expensive?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1258675">
				<div id="div-comment-1258675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258675">
			August 3, 2016 at 7:10 am</a>		</div>

		<p>In the classical model of linking, the linker doesn&#8217;t see the definitions. The compiler has already generated object code. All the linker sees is a blob of bytes with fixups.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1258775">
				<div id="div-comment-1258775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matteo Italia</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258775">
			August 3, 2016 at 12:40 pm</a>		</div>

		<p>It is true however that the compiler could automatically emit a #pragma detect_mismatch-like for each type/inline function definition, named like the mangled name of the relevant entity and with a hash of the tokens sequence as value (which IIRC is what the standard defines as relevant for the ODR). I don&#8217;t think that it would cost so much to implement.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1258715">
				<div id="div-comment-1258715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258715">
			August 3, 2016 at 10:43 am</a>		</div>

		<p>@SimonRev: If you use GCC 5 or later with -flto-odr-type-merging it will warn about ODR violations by default (disable with -Wno-odr).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-shiva-live even thread-odd thread-alt depth-1" id="comment-1258725">
				<div id="div-comment-1258725" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kenneth+Porter' rel='external nofollow' class='url'>Kenneth Porter</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258725">
			August 3, 2016 at 11:41 am</a>		</div>

		<p>How do you recommend checking structure packing options?  It would be nice to see an example that shows as many C++ code generation options checked as possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1258785">
				<div id="div-comment-1258785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pm100</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258785">
			August 3, 2016 at 2:14 pm</a>		</div>

		<p>so the two strings have no meaning? the liner simply looks at all pragma&#8217;s called with name &#8216;foo&#8217; and verifies they are all either &#8216;wiz&#8217; or &#8216;bang&#8217;? Its not looking at types or externs or anything</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-exchange-development-blog-team even depth-2 parent" id="comment-1258805">
				<div id="div-comment-1258805" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exchange development blog team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258805">
			August 3, 2016 at 7:52 pm</a>		</div>

		<p>The example is actually kinda confusing and the MSDN page doesn&#8217;t help, does the NDEBUG pragma check tell you that you&#8217;ve built one module in debug mode and the other not, if it&#8217;s placed in a header file?  Do you have to methodically do a pragma_mismatch for every data structure and object in your code to get compete checking?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1258825">
				<div id="div-comment-1258825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258825">
			August 3, 2016 at 10:15 pm</a>		</div>

		<p>I think the idea is that you have 2 or 3 different configurations, and you check with the corresponding number of pragma_mismatch pairs. No need to check each structure if you&#8217;re saying &#8216;in configuration 1 I will use this set of types and in configuration 2 I will use a different set of types&#8217;. It&#8217;s the configuration that matters, not each specific type. (I think.)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1258976">
				<div id="div-comment-1258976" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258976">
			August 4, 2016 at 11:58 am</a>		</div>

		<p>You don&#8217;t need to put a check on every data structure, just for every configuration option that affects ODR. If you have twelve &#8220;#ifdef NDEBUG&#8221;s, you need only one #pragma detect_mismatch(&#8230;NDEBUG)&#8221; to cover it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-exchange-development-blog-team odd alt depth-5" id="comment-1259055">
				<div id="div-comment-1259055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">exchange development blog team</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1259055">
			August 4, 2016 at 10:32 pm</a>		</div>

		<p>Ah, OK, thanks.  That makes it quite useful if you only need to do it once per config.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1258835">
				<div id="div-comment-1258835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258835">
			August 4, 2016 at 3:18 am</a>		</div>

		<p>This reminds me of the problem of wanting to link against two static libraries and find that one is using the static CRT while the other is using the dynamic CRT&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1258845">
				<div id="div-comment-1258845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160803-00/?p=94015#comment-1258845">
			August 4, 2016 at 3:49 am</a>		</div>

		<p>A good example of a nasty gotcha!</p>
<p>Sometimes this con happen through no fault of your own. Eg: Some IDEs will sometimes not rebuild everything if you change a #define in the project file.</p>
<p>Does Link time code generation pick up on these errors in practice? By deferring code gen until link time, in theory the linker has all the information to know that there are type mismatches.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

