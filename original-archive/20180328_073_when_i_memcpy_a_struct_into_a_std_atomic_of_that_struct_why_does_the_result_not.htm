<html>
<head>
<title>When I memcpy a struct into a std::atomic of that struct, why does the result not match?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When I memcpy a struct into a std::atomic of that struct, why does the result not match?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 28, 2018 / year-entry #73</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You're storing it wrong.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Consider the following code:
</p>
<pre>
<i>// Code in italics is wrong.

struct Point3D { float x, y, z; };

std::atomic&lt;Point3D&gt; currentPoint;

bool LoadCurrentPointFromFile(HANDLE file)
{
 DWORD actualBytesRead;
 if (!ReadFile(file, &amp;currentPoint, sizeof(Point3D),
               &amp;actualBytesRead, nullptr)) return false;
 if (actualBytesRead != sizeof(Point3D)) return false;
 return true;
}</i>
</pre>
<p>
This code tries to load a <code>Point3D</code> structure
from a file directly into a <code>std::atomic</code>.
However, the customer found that the results were not properly
loaded
and suspected there may a bug in the <code>Read&shy;File</code>
function,
because the value that should have been in the
<code>z</code> member ended up in <code>y</code>,
the value that should have been in the
<code>y</code> member ended up in <code>x</code>,
and the value that should have been in the
<code>x</code> member wasn't loaded at all.
</p>
<p>
The <code>Read&shy;File</code> function is working fine.
What's wrong is that you aren't using the
<code>std::atomic</code> variable properly.
</p>
<p>
The contents of a <code>std::atomic</code> variable are
not directly accessible.
You have to use methods like <code>store</code> and
<code>load</code>.
There are operator overloads which make atomic variables
appear to be regular variables, but at no point can you
get the address of the underlying <code>Point3D</code> storage.
</p>
<p>
Processors have restrictions on the sizes of operands
on which they can natively perform atomic operations.
Some restrictions apply to the size of the operand:
Most processors do not support atomic operations on 12-byte objects,
and it's not reasonable to expect a processor to be able
to perform an atomic operation on a memory object that is
megabytes in size, after all.
Some restrictions are based on layout,
such as whether the object is suitably aligned.
</p>
<p>
In the cases where the object cannot be managed atomically
by the processor, the standard library steps in and adds
a lock,
and operations on the atomic variable take the lock to
ensure that the operation is atomic.
The reason everything is shifted is that the code took the
address of the atomic variable itself, which includes the
intenral lock, and the value you intended to read into <code>x</code>
didn't vanish. It overwrote the lock!
</p>
<p>
Access to the contents of the atomic variable must be done
by the appropriate methods on the atomic variable.
</p>
<pre>
bool LoadCurrentPointFromFile(HANDLE file)
{
 DWORD actualBytesRead;
 <font COLOR=blue>Point3D point;</font>
 if (!ReadFile(file, <font COLOR=blue>&amp;point</font>, sizeof(Point3D),
               &amp;actualBytesRead, nullptr)) return false;
 if (actualBytesRead != sizeof(Point3D)) return false;
 <font COLOR=blue>currentPoint.store(point);</font>
 return true;
}
</pre>
<p>
There's
<a HREF="https://www.youtube.com/watch?v=ZQFzMfHIxng">
a presentation from CppCon 2017
that covers <code>std::atomic</code> from start to finish</a>,
including performance characteristics.
I'm going to consider this video to be homework,
because
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180329-00/?p=98375">
next time I'm going to chatter about it</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1331085">
				<div id="div-comment-1331085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodr√≠guez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331085">
			March 28, 2018 at 7:38 am</a>		</div>

		<p>I&#8217;m no expert in C++, and most of its runtime library is uncharted territory to me. But when I read the code, it was evident it was a type mismatch: they were taking an struct and copying it into an object. Of course, that object contains a copy of the struct as a member. If you are lucky (or not?), it will be the first member, and all will go well. But you are relying in an implementation detail that can change in the future.</p>
<p>It seems that the atomic contains just an integer-sized lock and the target struct, so you could obtain a pointer to the struct with some pointer arithmetic. But it definitely would be a terrible idea. Not only can the implementation details change in future versions of the runtime. Also, accessing directly to an atomic&#8217;s contents does defeat it sole purpose: warrantying atomic operations.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-kapilkapre odd alt depth-2 parent" id="comment-1331155">
				<div id="div-comment-1331155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/%27k' rel='external nofollow' class='url'>'k</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331155">
			March 28, 2018 at 11:09 am</a>		</div>

		<p>I suppose the hope was that atomic is simply C++ language markup for the compiler to do some special joo joo by using atomic instructions while keeping the memory layout the same.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1331255">
				<div id="div-comment-1331255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331255">
			March 28, 2018 at 9:08 pm</a>		</div>

		<p>It&#8217;s presumably a case of starting off with a plain Point3D, getting everything working, and then discovering weird multithreaded behaviour. Then when they decided they need to use std::atomic, they didn&#8217;t realise that the way they used it would have to change in some places &#8211; as you said, probably because they thought of std::atomic as &#8220;tell the compiler to make all access to this variable atomic&#8221; and didn&#8217;t think about the technicalities. And while I&#8217;m no C++ expert, one thing I have picked up is that the technicalities will always come back to bite you.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1331275">
				<div id="div-comment-1331275" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331275">
			March 29, 2018 at 3:21 am</a>		</div>

		<p>Well, they were reading into an object but not using its size, so that should have been a red flag already.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1331095">
				<div id="div-comment-1331095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331095">
			March 28, 2018 at 8:09 am</a>		</div>

		<p>I don&#8217;t understand how anyone who would need an atomic type could think something like that would work.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1331135">
				<div id="div-comment-1331135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331135">
			March 28, 2018 at 10:12 am</a>		</div>

		<p>This is the &#8220;wave a magic wand over the problem&#8221; school of thought.  Whoever wrote that code didn&#8217;t think about what std::atomic actually means or how it might be implemented.  Instead, they simply think of it as a black box that &#8220;magically fixes all of my threading bugs.&#8221;</p>
<p>(This is, of course, complete hogwash: you can easily have threading bugs even if everything is atomic, because threading bugs arise from faulty assumptions about the sequencing of operations.  std::atomic makes things easier to reason about, but it does not eliminate the need to think.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1331145">
				<div id="div-comment-1331145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331145">
			March 28, 2018 at 10:41 am</a>		</div>

		<p>Yeah.  That had me scratching my head too.  Even if you could get the correct target address, the read operation would not be atomic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1331165">
				<div id="div-comment-1331165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331165">
			March 28, 2018 at 11:53 am</a>		</div>

		<p>Because it <u>does</u> work (for certain values of &#8220;work&#8221;) sometimes. If this were a Point2D instead of a Point3D, there&#8217;s a good chance it would have &#8220;worked&#8221;.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1331195">
				<div id="div-comment-1331195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331195">
			March 28, 2018 at 2:31 pm</a>		</div>

		<p>It isn&#8217;t really a std::atomic problem as such.  It&#8217;s an even lower level failure to understand the rules of the C++ memory model.<br />
The target variable in ReadFile() is an LPVOID, which should be easy enough for any MS C++ programmer to understand.  All you can expect to get out of this is a pointer/reference to a contiguous chunk of memory that (hopefully, error result permitting) has the same size in bytes that you requested.  It&#8217;s up to you to figure out what those (in this case) twelve bytes mean, because ReadFile() has no possible way of even giving you a hint.  The fact that the requested size is &#8220;sizeof(Point3D)&#8221; rather than &#8220;sizeof(placeholder for std::atomic)&#8221; should advert the caller to an obvious container mismatch.<br />
You could actually pick any other STL container and attempt to apply this &#8220;trick,&#8221; and the result would be equally as useless.  Effectively you are implicitly casting between two separate types via a void pointer, and any C++ programmer who thinks this is a good idea &#8230; should not be programming in C++.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1331245">
				<div id="div-comment-1331245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331245">
			March 28, 2018 at 9:08 pm</a>		</div>

		<p>I think <a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331155">&#8216;k was right </a>: They probably thought that <code>atomc&lt;T&gt;</code> is physically the same as <code>T</code>; the atomicity was believed to be entirely encapsulated in the algorithm (e.g., &#8220;interlocked operations everywhere!&#8221;), with no additional data needed.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1331225">
				<div id="div-comment-1331225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331225">
			March 28, 2018 at 7:26 pm</a>		</div>

		<p>I think we are going to guarantee that it does work as long as atomic::is_always_lock_free in a future release but we don&#8217;t do that right now. (We want atomic to be in the &#8220;ABI stabilized&#8221; domain as quickly as we can)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1331215">
				<div id="div-comment-1331215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331215">
			March 28, 2018 at 7:25 pm</a>		</div>

		<p>Note that sizeof(atomic&lt;T&gt;) can be surprising in relation to sizeof(T). For example, in our implementation, if you put a 3 byte struct into an atomic we don&#8217;t round up, we go &#8220;that&#8217;s not one of the sizes we recognize&#8221; and add our lock, making sizeof(atomic&lt;bytes&gt;) == 8.</p>
<p>We fixed that bug in the next ABI-breaking release of the Visual C++ libraries but the date we get to ship that seems to only always get further away :/</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1331265">
				<div id="div-comment-1331265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ismo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331265">
			March 28, 2018 at 9:24 pm</a>		</div>

		<p>The ReadFile can never operate on something which is more complex than pod (plain old data). I&#8217;ve seen memset(*this,0) stl code and it really crashes wierd ways. C++ is powerfull tool, it lets you to shoot your feet if not handled properly.<br />
I doubt that nobody reading Raymond&#8217;s blog would make that mistake.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1331305">
				<div id="div-comment-1331305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331305">
			March 29, 2018 at 8:03 am</a>		</div>

		<p>Hehe, that developer needs to eat some more humble pie. *If* there was a bug in ReadFile as easily exposed as this, that means millions of programs on &gt;1 billion devices are affected. So the outcry should be enormous. If you only hear *crickets* that *probably* means your own code is at fault. When in doubt blame yourself!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1331405">
				<div id="div-comment-1331405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331405">
			March 29, 2018 at 5:59 pm</a>		</div>

		<p>On the other hand I found a real bug in System.Data.SqlClient that was otherwise unknown for two years. If you express a preference for isolation levels on some open connections, ones that you didn&#8217;t do so end up with a random isolation level due to a dirty pool.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1331975">
				<div id="div-comment-1331975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phont Madders</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180328-00/?p=98365#comment-1331975">
			April 3, 2018 at 5:08 pm</a>		</div>

		<p>&#8220;Code in italics is wrong.&#8221;<br />
That&#8217;s why I only code in boldface.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

