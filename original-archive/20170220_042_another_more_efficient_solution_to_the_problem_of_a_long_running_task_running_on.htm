<html>
<head>
<title>Another more efficient solution to the problem of a long-running task running on the thread pool persistent thread</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Another more efficient solution to the problem of a long-running task running on the thread pool persistent thread</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 20, 2017 / year-entry #43</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170220-00/?p=95485</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>0</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The thread-agnostic change notification.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170217-00/?p=95465">
Last time</a>,
we broke up a series of operations on the persistent thread pool thread
so that the thread pool did the waiting rather then clogging up
the persistent thread with a synchronous wait.
This does still have the downside of processing the notification
on the persistent thread,
which could be a problem if that processing is time-consuming.
</p>
<p>
What we can do is to use the persistent thread pool thread
only for things that absolutely must be done on a persistent
thread, and move everything else to a thread pool task thread.
</p>
<p>
Make the highlighted changes to the code we had from last time.</p>
<pre>
// Error checking elided for expository purposes.

void WidgetMonitor::RegisterNotificationWait(
 <font COLOR="blue">void* parameter</font>)
{
 <font COLOR="blue">WidgetNotificationContext* context =
   reinterpret_cast&lt;WidgetNotificationContext*&gt;(parameter);</font>
 RegisterWaitForSingleObject(&amp;context-&gt;waitHandle,
  context-&gt;registryEvent,
  WidgetNotificationWaitCallback,
  context,
  INFINITE,
  WT_EXECUTEONLYONCE <font COLOR="red"><strike>/* | WT_EXECUTEINPERSISTENTTHREAD */</strike></font>);
 RegNotifyChangeKeyValue(context-&gt;hkey, false,
                         REG_NOTIFY_CHANGE_LAST_SET,
                         context-&gt;registryEvent, TRUE);
}

void WidgetMonitor::WidgetNotificationWaitCallback(
    void* parameter, BOOLEAN /* TimerOrWaitFired */)
{
 WidgetNotificationContext* context =
   reinterpret_cast&lt;WidgetNotificationContext*&gt;(parameter);

 ... process the change ...

 <font COLOR="blue">QueueUserWorkItem(RegisterNotificationWait,
                   context,
                   WT_EXECUTEINPERSISTENTTHREAD);</font>
}

void WidgetMonitor::StartMonitoring()
{
 auto context = new WidgetNotificationContext();
 <font COLOR="blue">context-&gt;hkey = ...;
 context-&gt;registryEvent = ...;</font>
 QueueUserWorkItem(<font COLOR="blue">RegisterNotificationWait</font>,
                   context,
                   WT_EXECUTEINPERSISTENTTHREAD);
}

void WidgetMonitor::StopMonitoring(
    WidgetNotificationContext* context)
{
 // WARNING! Massive race conditions here need to be addressed.

 if (context-&gt;waitHandle) {
  UnregisterWait(context-&gt;waitHandle);
  context-&gt;waitHandle = nullptr;
 }
 ... clean up other resources ...
 delete context;
}
</pre>
<p>
What we did this time was to put only the
<code>Reg&shy;Notify&shy;Change&shy;key&shy;Value</code>
on the persistent thread.
Everything else runs on a normal thread pool thread.
That way,
we minimize the amount of code running on the persistent thread.
</p>
<p>
The last fix we can make is to take advantage of a new
feature in Windows 8:
The <code>REG_NOTIFY_THREAD_AGNOSTIC</code> flag,
which turns off the old behavior of stopping the notification
when the thread exits.
With that change, we don't need the
<code>WT_EXECUTE&shy;IN&shy;PERSISTENT&shy;THREAD</code>
flag at all.
</p>
<pre>
// Error checking elided for expository purposes.

void WidgetMonitor::RegisterNotificationWait(
 WidgetNotificationContext* context)
{
 RegisterWaitForSingleObject(&amp;context-&gt;waitHandle,
  context-&gt;registryEvent,
  WidgetNotificationWaitCallback,
  context,
  INFINITE,
  WT_EXECUTEONLYONCE <font COLOR="red"><strike>/* | WT_EXECUTEINPERSISTENTTHREAD */</strike></font>);
 RegNotifyChangeKeyValue(context-&gt;hkey, false,
                         REG_NOTIFY_CHANGE_LAST_SET |
                         <font COLOR="blue">REG_NOTIFY_THREAD_AGNOSTIC</font>,
                         context-&gt;registryEvent, TRUE);
}

void WidgetMonitor::WidgetNotificationWaitCallback(
    void* parameter, BOOLEAN /* TimerOrWaitFired */)
{
 WidgetNotificationContext* context =
   reinterpret_cast&lt;WidgetNotificationContext*&gt;(parameter);

 ... process the change ...

 RegisterNotificationWait(context);
}

void WidgetMonitor::StartMonitoring()
{
 auto context = new WidgetNotificationContext();
 <font COLOR="blue">context-&gt;hkey = ...;
 context-&gt;registryEvent = ...;</font>
 RegisterNotificationWait(context);
}

void WidgetMonitor::StopMonitoring(
    WidgetNotificationContext* context)
{
 // WARNING! Massive race conditions here need to be addressed.

 if (context-&gt;waitHandle) {
  UnregisterWait(context-&gt;waitHandle);
  context-&gt;waitHandle = nullptr;
 }
 ... clean up other resources ...
 delete context;
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

