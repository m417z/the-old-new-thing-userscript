<html>
<head>
<title>Security: Don't forget to initialize the stuff you don't care about</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Security: Don&#8217;t forget to initialize the stuff you don&#8217;t care about</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 3, 2006 / year-entry #220</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Lost in excitement of privilege escalation vulnerabilities is the simple information disclosure through missing garbage initialization. Everybody should by now be familiar with the use of the SecureZeroMemory function to ensure that buffers that used to contain sensitive information are erased, but you also have to zero out buffers before you write their contents to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Lost in excitement of privilege escalation vulnerabilities is
the simple information disclosure through missing garbage initialization.
Everybody should by now be familiar with the use of the
<code>SecureZeroMemory</code> function to ensure that buffers
that used to contain sensitive information are erased,
but you also have to zero out buffers before you write their
contents to another location.
Consider, for example, the following binary format:
</p>
<pre>
struct FILEHEADER {
    DWORD dwMagic;
    DWORD dwVersion;
    WCHAR wszComment[256];
    DWORD cbData;
    // followed by cbData bytes of data
};
</pre>
<p>
Code that writes out one of these files might go like this:
</p>
<pre>
BOOL SaveToFile(HANDLE hFile, LPCWSTR pszComment,
                DWORD cbData, const BYTE *pbData)
{
  DWORD cbWritten;
  FILEHEADER fh;
  fh.dwMagic = FILE_MAGICNUMBER;
  fh.dwVersion = FILE_CURRENTVERSION;
  fh.cbData = cbData;
  return SUCCEEDED(StringCchCopyW(
             fh.wszComment, 256, pszComment)) &amp;&amp;
         WriteFile(hFile, &amp;fh, sizeof(fh), &amp;cbWritten, NULL) &amp;&amp;
         cbWritten == sizeof(fh) &amp;&amp;
         WriteFile(hFile, pbData, cbData, &amp;cbWritten, NULL) &amp;&amp;
         cbWritten == cbData;
}
</pre>
<p>
Do you see the security bug?
</p>
<p>
If the comment is shorter than 255 characters,
then the bytes after the terminating null consist of uninitialized
stack garbage.
That stack garbage might contain interesting information that
you didn't intend to leak into the file.
Sure, it won't contain information that you already recognized
as highly-sensitive, such as passwords,
but it still might contain information that, while less sensitive,
still would be valuable to somebody looking for it.
For example, depending on where the compiler decided to put
local variables, you might leak an account name into those
unused bytes.
</p>
<p>
I'm told that one company's networking software from a long time ago
had a bug just like this one.
They used a very advanced "change password" algorithm,
the details of which are not important.
The design was that only heavily encrypted data was transmitted on the wire.
That way, somebody who sat on the network and captured packets
wouldn't see anything of value.
Except that they had a bug in their client:
When it sent the encrypted password to the server,
it forgot to null out the unused bytes in the "change password" packet.
And in those unused bytes were, you guessed it, a copy of the password
in plain text.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-396783">
				<div id="div-comment-396783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Arthur Strutzenberg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396783">
			July 3, 2006 at 11:14 am</a>		</div>

		<p>What is interesting is that this is very similar to another forensic analysis technique taught to me by one of my instructors&#8211;analyzing slack space&#8230;not a whole big chance that you may find something, but the chance is still there!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-396843">
				<div id="div-comment-396843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rhomboid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396843">
			July 3, 2006 at 2:31 pm</a>		</div>

		<p>I remember waaaay back in the day (maybe 1993 or so) there was a HUGE controversy around AOL because someone looked in the binary data files that it created and found all kinds of personal information. &nbsp;The implication to the naive was of course that they were spying on their users, snooping about on their disks for interesting data and then transmitting it back to the mothership. &nbsp;(This was of course when AOL was a &quot;walled garden&quot; that offered their own proprietery BBS+content, not standard TCP/IP internet access.) &nbsp;But of course no such thing was happening, they were simply dumping data structures to this cache file on disk without clearing the uninitialized bits, and so if you looked hard enough you were bound to find something interesting in there. &nbsp;That didn&#8217;t stop the BBS rumor mill from going to town, though.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396903">
				<div id="div-comment-396903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">J</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396903">
			July 3, 2006 at 5:11 pm</a>		</div>

		<p>Similar to the AOL issue above, this issue bit Steam, the content-distribution program for Valve Software games like Half-Life 2. &nbsp;People didn&#8217;t trust the program, so they looked into the gigantic cache file that it reserves on the hard drive to see what data Valve might be collecting. &nbsp;Well, when the program reserved space for the gigantic cache, it didn&#8217;t initialize the data, so some people freaked when they saw stuff like their illegal .mp3 directories in the cache.</p>
<p>Some operating systems are designed around issues like this, and zero data after you delete things. &nbsp;I think VMS did that if I remember correctly.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-396913">
				<div id="div-comment-396913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396913">
			July 3, 2006 at 6:08 pm</a>		</div>

		<blockquote><p>
  Some operating systems are designed around issues like this, and zero data after you delete things.</p>
<p>NT always zeroes newly allocated space. It&#8217;d be quite a security hole if it didn&#8217;t.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396923">
				<div id="div-comment-396923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fred</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396923">
			July 3, 2006 at 8:14 pm</a>		</div>

		<p>A long time ago, on an OS/360/370/&#8230;, this caused us a configurtion management problem.</p>
<p>Due to compressed schedule, we shipped a preliminary version of the software to an associate contractor prior to validation, then a QA-blessed version afterward. We wrote up the spec saying that work done with the preliminary version would be acceptable because the two tapes would be identical.</p>
<p>They had to be identical, didn&#8217;t they&#8211;they were both written from the same disk file. So we didn&#8217;t check it.</p>
<p>The receiver&#8217;s QA people did check it and they weren&#8217;t identical. It seems that IBM&#8217;s tape copy utility copied the in-memory data structure which contained a session-specific value (a pointer, IIRC). Our faces were a bit red and we had to revise the configuration document to say &quot;identical except for these three bytes&quot; and cite the relevant documentation.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-396933">
				<div id="div-comment-396933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fred</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396933">
			July 3, 2006 at 8:22 pm</a>		</div>

		<p>One case when we did it right was a disk format specification. The Quality organization was responsibile for receiving inspection. So they came to Engineering (me) to get the specification against which they would inspect.</p>
<p>One of the things I had them do was to assure that all &quot;unused,&quot; &quot;spare,&quot; and &quot;reserved&quot; fields were zero. (Yes, the format [written before I was in charge of it] had all three kinds.)</p>
<p>The QA analyst came back and asked, &quot;If they&#8217;re unused, why do we care?&quot;</p>
<p>My response: &quot;Someday we may need these fields. Zero will mean whatever we do now, non-zero will be the new feature. And I don&#8217;t want any disks in the inventory pretending to have the new features.&quot;</p>
<p>&quot;Oh, you&#8217;re thinking further ahead than I was.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396853">
				<div id="div-comment-396853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396853">
			July 3, 2006 at 2:45 pm</a>		</div>

		<p>If I correctly remember, old versions of Office products &nbsp;had exactly the problems described in the article, and the problem was even operating system dependent (which demonstrates how Office was *not* &#8220;just another Windows application&#8221;), where NT based systems initialized the OLE slack data, and 9x didn&#8217;t. If somebody has better facts, please correct me.</p>
<p></p>
<div CLASS=post>[<i>You described it yourself &#8211; the two OSs initialized memory differently.  How is this proof that Office is not &#8220;just another Windows application&#8221;? This behavior would affect any application. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-396963">
				<div id="div-comment-396963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396963">
			July 3, 2006 at 11:34 pm</a>		</div>

		<p>The issue with Office I&#8217;m pretty sure has nothing to do with Office or the OS. I seem to remember the issue is actually with disk allocation. The OLE storage layer that Office (and any OLE program) uses actually creates filesystems within files, so it allocates files in blocks (say, 4k at a time).</p>
<p>Win9x would look at the allocation and just mark the disk block as used, leaving whatever bits were already on the disk. WinNT would either zero out the blocks when they were allocated, or just return zero and not actually allocate the blocks until they were written to disk.</p>
<p>Since the problem was actually not in Office, the memory manager, or even the kernel, this was a nontrivial problem to fix. It would require either changing the filesystem to zero allocated blocks (which is a performance hit when you allocate a large chunk and then write it all), or changing the OLE layer so that it zeroed out all disk blocks immediately upon allocation. I think they ended up changing OLE.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396973">
				<div id="div-comment-396973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396973">
			July 3, 2006 at 11:34 pm</a>		</div>

		<p>Monday, July 03, 2006 8:22 PM by Fred<br />
<br />&gt; One case when we did it right was a disk<br />
<br />&gt; format specification.<br />
<br />[&#8230;]<br />
<br />&gt; One of the things I had them do was to assure<br />
<br />&gt; that all &quot;unused,&quot; &quot;spare,&quot; and &quot;reserved&quot;<br />
<br />&gt; fields were zero.</p>
<p>Hmm, I would have interpreted &quot;unused&quot; as a binding promise. &nbsp;Though security would be a reason to zero out (or randomize) such fields, there wouldn&#8217;t be any other reason because the system will never use those fields. &nbsp;&quot;Spare&quot; is troublesome. &nbsp;The way that word sounds, in an executable image the spare bytes might be used for patches. &nbsp;On a disk the spare blocks might be used for relocations of bad blocks.</p>
<p>Meanwhile, my understanding is that IBM once specified a format for floppy disks, including specifying how many padding bytes would exist in between blocks that were used, but not specifying the contents of the padding bytes. &nbsp;Not zero, not unused, not spare, not reserved, not specified. &nbsp;One system wrote all 0xFF values into the padding bytes. &nbsp;Another system couldn&#8217;t read the floppies because the padding bytes weren&#8217;t all 0x00. &nbsp;A third system had to be found which could read the original floppies and rewrite them with zeroed padding bytes. &nbsp;Fortunately I only had to do it once, and it was only about 7 floppies. &nbsp;Someone else told me the reason.</p>
<p>Monday, July 03, 2006 8:14 PM by Fred<br />
<br />&gt; It seems that IBM&#8217;s tape copy utility copied<br />
<br />&gt; the in-memory data structure which contained<br />
<br />&gt; a session-specific value (a pointer, IIRC).</p>
<p>This I can&#8217;t figure out. &nbsp;I think the tape labels included dates but the file contents would be copied directly from disk exactly as you thought. &nbsp;I suppose that if the disk file had varying length records and the tape file had fixed length records then the padding could be unspecified (and might be a security leak).</p>
<p>By the way was the copying program IEBGENER? &nbsp;For the most part it didn&#8217;t care if the files were on disk or tape or cards or whatever. &nbsp;But it couldn&#8217;t handle an ANSI format tape. &nbsp;It was 100% repeatable. &nbsp;Tell IEBGENER to copy a tape formatted according to the then-ANSI standard with varying length records and watch it crash with an 0C4.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-397003">
				<div id="div-comment-397003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-397003">
			July 4, 2006 at 6:22 am</a>		</div>

		<p>Isn&#8217;t the real bug that some previously-called function failed to zero sensitive data in its stack frame before returning?</p>
<p>I think a simpler rule of thumb is to: don&#8217;t forget to zero all<br />
sensitive data when you&#8217;re done with it. &nbsp;Arguably dealing with it<br />
when you serialize buffers to disk/network packets/whatever is more<br />
direct, but if one should zero heap-allocated memory when freeing it,<br />
one should zero stack-allocated memory too. &nbsp;Why should people<br />
distinguish between the two in this regard?</p>
<div CLASS=post>[<i>The problem is, as others have noted, what one person considers sensitive another might not. Is the name of a file on the user&#8217;s hard disk sensitive?   Does this mean that you have to SecureZeroMemory your WIN32_FIND_DATA buffers? What about all the file names you added to your list box? The issue is not stack vs heap &#8211; you can have the same &#8220;information disclosure&#8221; with heap data. I just chose the stack for simplicity. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-397023">
				<div id="div-comment-397023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-397023">
			July 4, 2006 at 9:07 am</a>		</div>

		<p>James: yes, the virtual memory manager zeros user-mode page allocations (VirtualAlloc/VirtualCommit) before giving the page to the process. I&#8217;m not sure if it does it if the page was previously used by the same process &#8211; if it&#8217;s no longer in the working set I don&#8217;t think there&#8217;s any association with that process any longer, the OS cannot tell whether it&#8217;s safe to hand it over or not. However, the heap manager (HeapAlloc, LocalAlloc, malloc, new, etc) does not &#8211; it&#8217;s not disclosing sensitive information since the process could already read this memory. You might still get zeros if the heap manager has to allocate more virtual memory to satisfy this allocation, but you can&#8217;t rely on it.</p>
<p>If you use &lt;crtdbg.h&gt; you can get the C run-time heap allocation code to initialise blocks (to 0xCC, IIRC, which is something like &#8216;int 3&#8217;, the breakpoint instruction). This is to help stop developers relying on values being initialised to zero.</p>
<p>The OS has a background thread (the only one in the system with priority zero which is never boosted, so it only runs if there are fewer runnable threads than [logical] processors) called the zero page thread. This thread takes pages from the free list and overwrites them with zeros, to keep a pool (zero page list) of zero pages. This is to avoid having to hold up the application while it clears the page. If there aren&#8217;t any zero pages around already, the memory manager will try the free list. More in &#8216;Windows Internals, 4th Edition&#8217;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-397053">
				<div id="div-comment-397053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-397053">
			July 4, 2006 at 11:09 am</a>		</div>

		<p>On the subject &quot;was Office &#8216;just a normal win app&#8217;&quot;: Raymond, you&#8217;re right, in a sense &quot;Office just uses OLE&quot;. But, at the first moment when Office &quot;just used OLE&quot;, who from competitors was able to use it the same way?<br />
<br />Not to mention the dependencies demonstrated by the solution to the bug, which, as Gabe points, is practically impossible if you &quot;just use OLE&quot;.<br />
<br />Of course, we can say that competitors could have been better off not using OLE for document storage anyway. &nbsp;But still there are interoperability issues with existing Office documents etc. My excuses for drifting away from the subject of your article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-396993">
				<div id="div-comment-396993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deadnode.org/' rel='external nofollow' class='url'>James</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-396993">
			July 4, 2006 at 4:19 am</a>		</div>

		<p>The fact NT zeros out pages of memory before letting your app use them *doesn&#8217;t* free you from the need to initialise buffers yourself before you write out their contents to disk or network. It does mean uninitialized areas will tend to contain zero rather than the user&#8217;s data, but there&#8217;s no guarantee of that: memory managers will normally recycle pages, since that&#8217;s faster than constantly requesting and returning pages from the kernel.</p>
<p>So, you allocate a 4kb buffer to do something. Your memory manager gets a page from the OS to put the buffer in, you use it, then free the buffer. Now you allocate another 4kb buffer to send something over the network &#8211; and your memory manager hands you back the same page you used previously. Because it was never transferred to another application, the NT kernel never zeros it for you &#8211; and you might just have sent the user&#8217;s credit card number over the Internet in cleartext. Whoops.</p>
<p>Of course, in an ideal world you wouldn&#8217;t be saving or transmitting unused chunks of data anyway&#8230; ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-397113">
				<div id="div-comment-397113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reinder Verlinde</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-397113">
			July 4, 2006 at 5:37 pm</a>		</div>

		<p>Consider the following C skeleton code:</p>
<p> &nbsp; &nbsp;{<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp;volatile char password[ 64]; // probably needs other attribute(s)<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp;&#8230;<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp;aFunctionCall( password);<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp;&#8230;.<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp;SecureZeroMemory( password, 64)<br />
<br /> &nbsp; &nbsp;}</p>
<p>I do not think that one can guarantee that no copy of the password remains after leaving this loop. For instance, aFunctionCall could use registers in its calculation of a hash of the password. A heavily optimizing compiler might even use vector registers to do so. Those might give ample room for leaking sufficient bits to recover the entire password. Those registers, in turn, could easily make it into main memory when another function call saves and restores them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-397163">
				<div id="div-comment-397163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-397163">
			July 5, 2006 at 8:45 am</a>		</div>

		<p>And then there&#8217;s code that uses (say) std::string &nbsp;from the C++ standard library to hold &#8216;sensitive&#8217; data.</p>
<p>Since the string implementation can reallocate its internal storage -and- can share internal storage between objects whenever the whim takes it, it gets pretty tricky to write code that guarantees erasure.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-397173">
				<div id="div-comment-397173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060703-00/?p=30663#comment-397173">
			July 5, 2006 at 10:26 am</a>		</div>

		<p>Not to mention .Net&#8217;s System.String class&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

