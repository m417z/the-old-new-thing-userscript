<html>
<head>
<title>The implementation of iterators in C# and its consequences (part 3)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The implementation of iterators in C# and its consequences (part 3)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 14, 2008 / year-entry #273</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I mentioned that there was an exception to the general statement that the conversion of an iterator into traditional C# code is something you could have done yourself. That's true, and it was also a pun, because the exception is exception handling. If you have a try ... finally block in your iterator, the language...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
I mentioned that
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/08/12/8849519.aspx">
there was an exception</a>
to the general statement that the conversion of an iterator into
traditional C# code is something you could have done yourself.
That's true, and it was also a pun,
because the exception is exception handling.
</p>
<p>
If you have a <code>try ... finally</code> block in your iterator,
the language executes the <code>finally</code> block under the following
conditions:
</p>
<ul>
<li>After the last statement of the <code>try</code> block is executed.
    (No surprise here.)</p>
<li>When an exception propagates out of the <code>try</code> block.
    (No surprise here either.)</p>
<li>When execution leaves the <code>try</code> block via
    <code>yield break</code>.</p>
<li>When the iterator is <code>Dispose</code>d and the iterator body
    was trapped inside a <code>try</code> block at the time.
</ul>
<p>
That last case can occur if somebody decides to abandon the enumerator
before it is finished.
</p>
<pre>
IEnumerable&lt;int&gt; CountTo10()
{
 try {
  for (int i = 1; i &lt;= 10; i++) {
   yield return i;
  }
 } finally {
  System.Console.WriteLine("finally");
 }
}

foreach (int i in CountTo10()) {
 System.Console.WriteLine(i);
 if (i == 5) break;
}
</pre>
<p>
This code fragment prints "1 2 3 4 5 finally".
</p>
<p>
If you think about it, this behavior is completely natural.
You want the <code>finally</code> block to execute when
the <code>try</code> block is finished executing, either by normal
or abnormal means.
Although control leaves the <code>try</code> block
during the <code>yield return</code>, it comes back when
the caller asks for the next item from the enumerator, so execution
of the <code>try</code> block isn't finished yet.
The <code>try</code> is finished executing after the last statement
completes,
an exception is thrown past it,
or execution is abandoned when the enumerator is prematurely destroyed.
</p>
<p>
And this is exactly what you want when you use the <code>finally</code>
block to clean up resources used by the <code>try</code> block.
</p>
<p>
Now, technically, you <i>can</i> write this yourself without
using iterators, but it's pretty ugly.
You'll need more internal state variables to keep track of whether
the <code>try</code> block is still active and whether the exit
of the <code>try</code> block is temporary (due to <code>yield return</code>)
or permanent.
It's a real pain in the neck, however, so you probably are better off
letting the compiler do the work for you.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-657173">
				<div id="div-comment-657173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Professor Farnsworth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-657173">
			August 14, 2008 at 10:14 am</a>		</div>

		<p>Good news everyone! &nbsp;CLR week is almost over!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657273">
				<div id="div-comment-657273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-657273">
			August 14, 2008 at 11:10 am</a>		</div>

		<p>I want more CLR week! GIME GIME GIME. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ericlippert even thread-even depth-1" id="comment-657323">
				<div id="div-comment-657323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Eric+Lippert' rel='external nofollow' class='url'>Eric Lippert</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-657323">
			August 14, 2008 at 12:29 pm</a>		</div>

		<p>It is, as you note, a hard problem, so hard that we on the compiler team have gotten it wrong numerous times. I apologize for the inconvenience.</p>
<p>There are scenarios where you can have multiple nested try blocks and the released v3 compiler generates code that runs the finally blocks outside-to-inside instead of the correct order.</p>
<p>I believe we have fixed those bugs for the v3 service release, but we have found more since then. &nbsp;</p>
<p>(So far the only remaining bugs I know of involve bizarre cases of, say, a yield break which branches out to a finally which then executes a second yield break. The control flow can get messed up in complicated circumstances like that.)</p>
<p>If anyone finds bugs involving iterators blocks and finally execution, please email me via my blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657393">
				<div id="div-comment-657393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Plaisted</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-657393">
			August 14, 2008 at 2:17 pm</a>		</div>

		<p>Was support for try blocks with yield statements inside them added in VS2008? &nbsp;I tried to do this in VS2005 and the compiler told me that it wasn&#8217;t supported, so I had to work around it. &nbsp;It was kind of a pain.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657413">
				<div id="div-comment-657413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel Plaisted</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-657413">
			August 14, 2008 at 2:23 pm</a>		</div>

		<p>Regarding my previous comment, it looks like the limitation I was remembering was that you cannot yield a value in the body of a try block with a catch clause. &nbsp;You also can&#8217;t yield a value within a catch clause.</p>
<p>I assume there are good reasons for this but for my situation it would have been nice if it worked :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-657513">
				<div id="div-comment-657513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/' rel='external nofollow' class='url'>Today&#8217;s Blogs &laquo; Roman&#8217;s Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-657513">
			August 14, 2008 at 4:11 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/" rel="nofollow">http://rhnatiuk.wordpress.com/2008/08/14/todays-blogs/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-657583">
				<div id="div-comment-657583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-657583">
			August 14, 2008 at 5:28 pm</a>		</div>

		<p>If you don&#8217;t Dispose the iterator, will the finalizer cause the code in the finally blocks to get executed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-658113">
				<div id="div-comment-658113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://visualstudiohacks.com/blog/visual-studio-links-66/' rel='external nofollow' class='url'>Visual Studio Hacks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-658113">
			August 18, 2008 at 7:55 am</a>		</div>

		<p>My latest in a series of the weekly, or more often, summary of interesting links I come across related to Visual Studio. Greg Duncan posted a link to the release announcement for Task Board for Team System Beta 2 . Raymond Chen discussed the implementation</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-660683">
				<div id="div-comment-660683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.dirteam.com/blogs/mjohnson/archive/2008/08/21/interesting-links-8-21-2008.aspx' rel='external nofollow' class='url'>Matt Johnson's Technical Adventures</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-660683">
			August 21, 2008 at 3:21 pm</a>		</div>

		<p>The Old New Thing : The implementation of iterators in C# and its consequences (part 3) Notes from a</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-737403">
				<div id="div-comment-737403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://vasubalakrishnan.wordpress.com/2009/05/20/c-yield-keyword/' rel='external nofollow' class='url'>C# Yield Keyword &laquo; Vasu Balakrishnan&#8217;s Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080814-00/?p=21243#comment-737403">
			May 20, 2009 at 3:36 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://vasubalakrishnan.wordpress.com/2009/05/20/c-yield-keyword/" rel="nofollow">http://vasubalakrishnan.wordpress.com/2009/05/20/c-yield-keyword/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

