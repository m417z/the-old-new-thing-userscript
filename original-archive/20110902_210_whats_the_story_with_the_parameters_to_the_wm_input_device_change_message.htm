<html>
<head>
<title>What's the story with the parameters to the WM_INPUT_DEVICE_CHANGE message?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the story with the parameters to the WM_INPUT_DEVICE_CHANGE message?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 2, 2011 / year-entry #211</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer found these strange macros in winuser.h: #if (_WIN32_WINNT >= 0x0601) #define GET_DEVICE_CHANGE_WPARAM(wParam) (LOWORD(wParam)) #elif (_WIN32_WINNT >= 0x0501) #define GET_DEVICE_CHANGE_LPARAM(lParam) (LOWORD(lParam)) #endif /* (_WIN32_WINNT >= 0x0601) */ According to the documentation for the WM_INPUT_DEVICE_CHANGE message, the wParam is the operation code and the lParam is a handle to the device that changed. Given that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer found these strange macros in <tt>winuser.h</tt>:
</p>
<pre>
#if (_WIN32_WINNT &gt;= 0x0601)
#define GET_DEVICE_CHANGE_WPARAM(wParam)  (LOWORD(wParam))
#elif (_WIN32_WINNT &gt;= 0x0501)
#define GET_DEVICE_CHANGE_LPARAM(lParam)  (LOWORD(lParam))
#endif /* (_WIN32_WINNT &gt;= 0x0601) */
</pre>
<p>
According to the documentation for the
<code>WM_<wbr>INPUT_<wbr>DEVICE_<wbr>CHANGE</code>
message, the <code>wParam</code> is the operation code
and the <code>lParam</code> is a handle to the device that changed.
Given that definition, the correct macro would be
<code>GET_<wbr>DEVICE_<wbr>CHANGE_<wbr>WPARAM</code>.
What's up with the bogus
<code>GET_<wbr>DEVICE_<wbr>CHANGE_<wbr>LPARAM</code> macro?
</p>
<p>
The macro was incorrectly defined in Windows&nbsp;Vista.
In the Windows&nbsp;7 version of the Platform&nbsp;SDK,
the correct macro was added,
but in order to avoid introducing a breaking change to existing code,
the old broken macro remains in place in order to retain
bug-for-bug compatibility with existing code.
</p>
<p>
Even though the macro didn't work,
there is a good possibility
that code exists which relied on it anyway.
For example,
people may have read the documentation, read the macro,
realized that the macro was wrong, and worked around the bug
like this:
</p>
<pre>
case WM_INPUT_DEVICE_CHANGE:
 return OnInputDeviceChange(GET_DEVICE_CHANGE_LPARAM(wParam),
                            (HANDLE)lParam);
</pre>
<p>
To avoid breaking this code,
the old broken definition remains in the header file.
But at least it's defined only if you say that you want the
Windows&nbsp;Vista version of the header file, so at least
people won't use the bad macro
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2007/09/25/5108967.aspx">
going forward</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-933353">
				<div id="div-comment-933353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933353">
			September 2, 2011 at 7:08 am</a>		</div>

		<p>So should the winuser.h header file have a comment in there explaining what that was all for? &nbsp;If it was my code, it would have an explanation alongside &quot;the hack&quot;. &nbsp;Or even just a &nbsp;&quot;see KB-99999&quot; or something.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933363">
				<div id="div-comment-933363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933363">
			September 2, 2011 at 7:18 am</a>		</div>

		<p>OK, so my C/C++ is a bit rusty, but I&#39;m pretty sure that the &quot;wParam&quot;/&quot;lParam&quot; in this case is the parameter to the macro itself. So what&#39;s the difference how it is named, and why should changing it break any code?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933373">
				<div id="div-comment-933373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933373">
			September 2, 2011 at 7:19 am</a>		</div>

		<p>Oh, wait, should learn to read first. :P The name of the macro itself changed too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933383">
				<div id="div-comment-933383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933383">
			September 2, 2011 at 7:47 am</a>		</div>

		<p>Seriously? &nbsp;I&#39;m all for backward compatibility (run-time more than compile-time), but this is taking it a bit extreme for my tastes. &nbsp;I mean really, how many times could this bogus macro possibly be used? &nbsp;Also, why invent it in the first place? &nbsp;Why not just use LOWORD directly? &nbsp;The documentation doesn&#39;t even talk about splitting the wParam. &nbsp;Perhaps it was from a beta release of longhorn or something.</p>
<p>On a related topic, how stringent is Microsoft in surrounding functionality with #ifdefs? &nbsp;I&#39;ve been burned a few times where some function was not implemented on the target I was compiling against. &nbsp;Lo and behold, there were no #ifdefs to be found.</p>
<p>Also, please harass somebody to fix this ridiculous bug where your comment gets lost by the blogging system if you don&#39;t post it in a certain amount of time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933393">
				<div id="div-comment-933393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">configurator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933393">
			September 2, 2011 at 8:37 am</a>		</div>

		<p>I&#39;m not a C++ expert, but wouldn&#39;t this definition do the same thing? Why not use this simpler version? I&#39;m sure there&#39;s a really good reason that I&#39;m completely missing.</p>
<p>#define GET_DEVICE_CHANGE_WPARAM LOWORD</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933403">
				<div id="div-comment-933403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933403">
			September 2, 2011 at 8:54 am</a>		</div>

		<p>Here is a case where we REALLY need that time machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933443">
				<div id="div-comment-933443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933443">
			September 2, 2011 at 12:55 pm</a>		</div>

		<p>@Evan Nice to learn something new. The only thing I&#39;m now worried about is that we basically started fighting over the preprocessor which I&#39;m somehow sure will end in tears earlier or later ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933463">
				<div id="div-comment-933463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933463">
			September 2, 2011 at 1:55 pm</a>		</div>

		<p>@EvanED: You can also do (min)(a, b) to prevent function macro expansion. I guess MACRO_EXPANSION_BLOCKER is to show your intent to maintenance programmers.</p>
<p>I wonder how GET_DEVICE_CHANGE_LPARAM could come about. Did the API developer not even write a testcase and notice this instantly?</p>
<div class="post">[<i>Perhaps the parameter was originally in the lParam (so the testcase looked just fine), then later a design change moved it to wParam. Just speculating as to how this could&#39;ve happened. (You folks need to be more creative.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933413">
				<div id="div-comment-933413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EvanED</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933413">
			September 2, 2011 at 9:09 am</a>		</div>

		<p>@configurator:</p>
<p>I&#39;m not sure this is the reason (I&#39;d argue that the actual version is more readable, and that&#39;s probably closer to the reason; Haskell folks may disagree), but those two aren&#39;t *exactly* the same</p>
<p>If GET_DEVICE_CHANGE_WPARAM appears in a context where the next token is NOT a (, the actual version will not undergo macro replacement but your version will.</p>
<p>I know of one place where this can arguably be used in a productive manner. Suppose you are writing code that should work in a context where &quot;someone&quot; impolitely defines &#39;min&#39; and &#39;max&#39; as a macro. [Yes, I know about NOMINMAX or whatever it&#39;s called, but you don&#39;t always have that control.] The following will allow you to use those functions anyway:</p>
<p> &nbsp;#define MACRO_EXPANSION_BLOCKER</p>
<p> &nbsp;&#8230;</p>
<p> &nbsp;min MACRO_EXPANSION_BLOCKER (1, 2)</p>
<p>The MACRO_EXPANSION_BLOCKER goes away by the time the compiler sees things, so it just sees &quot;min (1, 2)&quot;, but it inhibits macro expansion of the min.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933423">
				<div id="div-comment-933423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933423">
			September 2, 2011 at 9:19 am</a>		</div>

		<p>BTW, credit where it&#39;s due; I learned about the MACRO_EXPANSION_BLOCKER from Boost. (They call it BOOST_PREVENT_MACRO_SUBSTITUTION.)</p>
<p>And it&#39;s actually got a bit wider applicability, e.g. <a rel="nofollow" target="_new" href="http://www.boost.org/doc/libs/1_36_0/boost/units/cmath.hpp" rel="nofollow">http://www.boost.org/&#8230;/cmath.hpp</a> uses it to inhibit expansion on &quot;functions&quot; from &lt;cmath&gt; that may actually be macros. (Boost defines it <a rel="nofollow" target="_new" href="http://www.boost.org/doc/libs/1_46_1/boost/config/suffix.hpp" rel="nofollow">http://www.boost.org/&#8230;/suffix.hpp</a> here. In my defense, the comment in that file *also* ignores the &lt;cmath&gt; macro problem. :-))</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933473">
				<div id="div-comment-933473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">denis bider</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933473">
			September 2, 2011 at 4:47 pm</a>		</div>

		<p>I haven&#39;t been able to find a proper way to submit this bug report for the Windows 7 console subsystem. None of the categories available through Microsoft Connect seems suitable.</p>
<p>Perhaps you will care about this problem and forward it to the right person.</p>
<p>In Windows 7, console support was moved from CSRSS.EXE to CONHOST.EXE. In the process of implementing this change, a bug was introduced which causes premature closing of the active console screen buffer. This causes applications that use screen buffers, such as less.exe or telnet.exe, to fail when running under some types of console-based terminal servers.</p>
<p>I described the bug in detail here:</p>
<p><a rel="nofollow" target="_new" href="https://fogbugz.bitvise.com/default.asp?WinSSHD.1.16969" rel="nofollow">fogbugz.bitvise.com/default.asp</a></p>
<p>The page also provides source code to a set of minimal test programs that reliably reproduce this problem in Windows 7.</p>
<p>I hope the Windows console subsystem is currently maintained by someone, and that you can forward this issue to them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-933483">
				<div id="div-comment-933483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933483">
			September 2, 2011 at 8:27 pm</a>		</div>

		<p>+1 Mc. The MS codebase must contain thousands of fixes etc. whose purpose is not clear just from reading the code. I&#39;ve often wondered how all of those are documented. Raymond sometimes says, &quot;we added a note describing why&quot; (for some particular fix). Is there a fixed policy for how to document fixes? Do you do always do it inine (in the source), or by reference to a big black book, or at the coder&#39;s discretion, or what?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-933493">
				<div id="div-comment-933493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110902-00/?p=9743#comment-933493">
			September 2, 2011 at 9:48 pm</a>		</div>

		<p>@denis bider: To file a bug in core Windows components, you have to open a support request (spend $$). If they agree it&#39;s a bug, you get your money back.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

