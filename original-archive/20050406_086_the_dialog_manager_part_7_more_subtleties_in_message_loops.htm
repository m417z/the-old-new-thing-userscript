<html>
<head>
<title>The dialog manager, part 7: More subtleties in message loops</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The dialog manager, part 7: More subtleties in message loops</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 6, 2005 / year-entry #87</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we solved the problem with the EndManualModalDialog function by posting a harmless message. Today, we're going to solve the problem in an entirely different way. The idea here is to make sure the modal message loop regains control, even if all that happened were incoming sent messages, so that it can detect that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/04/05/405518.aspx">
Last time, we solved the problem with
the <code>EndManualModalDialog</code> function
by posting a harmless message</a>.
Today, we're going to solve the problem in an entirely
different way.
</p>
<p>
The idea here is to make sure the modal message loop
regains control, even if all that happened were incoming
sent messages, so that it can detect that the <code>fEnded</code>
flag is set and break out of the modal loop.
</p>
<p>
Instead of changing
the <code>EndManualModalDialog</code> function,
we will change the modal message loop.
</p>
<pre>
int DoModal(HWND hwnd)
{
 DIALOGSTATE ds = { 0 };
 HWND hdlg = CreateDialogParam(g_hinst, MAKEINTRESOURCE(1),
             hwnd, DlgProc, reinterpret_cast&lt;LPARAM&gt;(&amp;ds));
 if (!hdlg) {
  return -1;
 }

 EnableWindow(hwnd, FALSE);
 MSG msg;
 msg.message = WM_NULL; // anything that isn't WM_QUIT
 while (<font COLOR=blue>!ds.fEnded</font>) {
  <font COLOR=blue>if (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) {
   if (msg.message == WM_QUIT) { /*  fixed 8am */
    break;
   } else</font> if (!IsDialogMessage(hdlg, &amp;msg)) {
    TranslateMessage(&amp;msg);
    DispatchMessage(&amp;msg);
   } /* fixed 10am */
  <font COLOR=blue>} else if (!ds.fEnded) {
   WaitMessage();
  }</font>
 }
 if (msg.message == WM_QUIT) {
  PostQuitMessage((int)msg.wParam);
 }
 EnableWindow(hwnd, TRUE);
 DestroyWindow(hdlg);
 return ds.iResult;
}
</pre>
<p>
We changed the call to <code>GetMessage</code>
into a call to
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/MessagesandMessageQueues/MessagesandMessageQueuesReference/MessagesandMessageQueuesFunctions/PeekMessage.asp">
the <code>PeekMessage</code> function</a>,
asking to remove the peeked message if any.
Like <code>GetMessage</code>,
this delivers any incoming sent messages,
then checks if there are any posted messages in the queue.
The difference is that whereas <code>GetMessage</code>
keeps waiting if there are no posted message,
<code>PeekMessage</code> returns and tells you that there
were no posted messages.
</p>
<p>
That's the control we want.
If <code>PeekMessage</code> says that it couldn't
find a posted message, we check our <code>fEnded</code>
flag once again, in case an incoming sent message
set the <code>fEnded</code> flag.
If not, then we call
<a HREF="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/windowing/messagesandmessagequeues/messagesandmessagequeuesreference/messagesandmessagequeuesfunctions/waitmessage.asp">
the <code>WaitMessage</code> function</a>
to wait until there is something to do
(either an incoming sent message or a posted message).
</p>
<p>
Exercise: If the whole point was to regain control
after sent messages are delivered, why isn't there a test
of the <code>fEnded</code> flag immediately after
<code>DispatchMessage</code> returns?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-269353">
				<div id="div-comment-269353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269353">
			April 6, 2005 at 9:38 am</a>		</div>

		<p>Raymond&#8230;  Completely off topic, but you may want to make a post about the new login stuff.</p>
<p>Or if you could at least get a log in link on your page, that might help.  It took some digging to figure out that I had to </p>
<p>a) Log in to post a comment..  and<br />
<br />b) Go to the main blogs.msdn.com to do it.</p>
<p>I think the reduction in your comment traffic shows that other people are just as confused.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-269363">
				<div id="div-comment-269363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269363">
			April 6, 2005 at 9:49 am</a>		</div>

		<p>&quot;&#8230;why isn&#8217;t there a test of the fEnded flag immediately after DispatchMessage returns? &quot;</p>
<p>There is, or at least the only thing between the return of DispatchMessage and the test of fEnded is most likely a single JMP instruction to the top of the while loop.</p>
<p>Since IsDialogMessage has the side-effect of processing the message when it returns TRUE, the DispatchMessage in the main loop isn&#8217;t being used for any case where fEnded might be set.</p>
<p>Is that loop handling WM_QUIT correctly now? PeekMessage retrieves WM_QUITs but GetMessage doesn&#8217;t and returns 0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-269373">
				<div id="div-comment-269373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269373">
			April 6, 2005 at 9:56 am</a>		</div>

		<blockquote><p>
  &gt; why isn&#8217;t there a test of the fEnded flag immediately after DispatchMessage returns</p>
<p>Because DispatchMessage() is invoked only for non-dialog messages. If for some reason dialog terminates while processing some of these messages, we&#8217;ll miss the check
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-269383">
				<div id="div-comment-269383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CoMargo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269383">
			April 6, 2005 at 10:27 am</a>		</div>

		<p>But why not to use Event and MsgWaitForMultipleObjects instead of using boolean variable?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-269393">
				<div id="div-comment-269393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269393">
			April 6, 2005 at 10:28 am</a>		</div>

		<p>Call me stupid, but I don&#8217;t get how this solves the problem.  Can&#8217;t you get stuck in WaitMessage just like the previous implementation got stuck in GetMessage?  Wouldn&#8217;t you still need to post a message to get the loop to wake up and see that the flag has changed?</p>
<p>I suppose that if you assume the EndManualModalDialog only gets called while processing a message that was dispatched from the modal loop, it&#8217;ll work, but that seems like you&#8217;re solving for a specific case.</p>
<p>[A sign-in link from the individual blog pages would be nice, since many of us navigate directly to postings we&#8217;re interested in from the RSS feed.]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-269413">
				<div id="div-comment-269413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269413">
			April 6, 2005 at 10:55 am</a>		</div>

		<p>&quot;But why not to use Event and MsgWaitForMultipleObjects instead of using boolean variable?&quot;</p>
<p>I would ask the question in reverse. Why use an Event and MsgWaitForMultipleObjects when a simple boolean variable is all you need?</p>
<p>[Alas I do not control the server software. I&#8217;ll forward these concerns to the people who run the server.]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-269423">
				<div id="div-comment-269423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269423">
			April 6, 2005 at 11:14 am</a>		</div>

		<p>Okay, it wasn&#8217;t handling WM_QUIT correctly. To correct my previous comment, I meant to say that GetMessage returns 0 on WM_QUIT, but it does retrieve it. </p>
<p>One topic I&#8217;d like to see discussed is when it is &quot;safe&quot; to ignore the fact that GetMessage can return -1. For example, am I safe if hwnd is valid and &amp;msg is a good address? The GetMessage docs are pretty insistent that -1 is a possible outcome and should be handled gracefully.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-269433">
				<div id="div-comment-269433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269433">
			April 6, 2005 at 11:29 am</a>		</div>

		<p>That code still isn&#8217;t quite right; the braces don&#8217;t match. If I&#8217;m following this correctly I think there should be two close-braces after the DispatchMessage() call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-269443">
				<div id="div-comment-269443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269443">
			April 6, 2005 at 2:06 pm</a>		</div>

		<p>Doesn&#8217;t this suffer from the same thing as <a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2005/02/17/375307.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2005/02/17/375307.aspx</a> ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-269403">
				<div id="div-comment-269403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BillArnette</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050406-57/?p=35963#comment-269403">
			April 6, 2005 at 10:47 am</a>		</div>

		<p>Adrian:  As I understand it (from the MSDN docs) GetMessage does not return until a *posted* message is in the queue.  WaitMessage returns if *any* message (posted, input, sent, WM_PAINT, WM_TIMER) is in the queue.</p>
<p>My stab at the exercise: From the SDK PeekMessage docs&#8230;<br />
<br />&quot;The PeekMessage function *dispatches* incoming *sent messages*, checks the thread message queue for a posted message, and retrieves the message (if any exist).&quot;</p>
<p>Therefore sent messages never get to the DispatchMessage branch.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

