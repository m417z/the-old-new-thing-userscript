<html>
<head>
<title>Why is Identical COMDAT Folding called Identical COMDAT Folding?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why is Identical COMDAT Folding called Identical COMDAT Folding?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 24, 2016 / year-entry #223</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Common data, as in FORTRAN.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw a while ago that
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050322-00/?p=36113">
the linker will recognize that two functions consist of the same code sequence
and will use the same bytes to represent both functions</a>,
a process known as <i>identical COMDAT folding</i>.
But why is it called identical COMDAT folding?
</p>
<p>
COMDAT is short for "common data",
a feature of the FORTRAN programming language.
</p>
<p>
For those of you who need some brushing up on FORTRAN:
Here's a crash course in common data.
</p>
<p>
In FORTRAN 77,
if you want to share variables between functions and subroutines,
you put them in a so-called "common data block",
usually shortened to just "common block".
For example, here are two FORTRAN subroutines that share
a variable called <code>LAST</code>:
</p>
<pre>
C     THE SETLAST SUBROUTINE TAKES ITS
C     PARAMETER AND SAVES IT IN THE
C     COMMON VARIABLE "LAST"

      SUBROUTINE SETLAST(I)

C     DECLARE THE DATA TYPE OF THE PARAMETER "I"
C     AS INTEGER. THIS IS TECHNICALLY NOT NECESSARY,
C     BECAUSE VARIABLES WHOSE NAMES BEGIN WITH THE
C     LETTERS I THROUGH N DEFAULT TO INTEGER.

      INTEGER I

C     DECLARE A VARIABLE CALLED LAST AND
C     PUT IT IN A COMMON BLOCK CALLED /LASTV/

      INTEGER LAST
      COMMON /LASTV/ LAST

C     OKAY, HERE WE GO. SAVE THE VALUE.
      LAST=I
      END

C     THE GETLAST SUBROUTINE RETURNS THE
C     VALUE SET BY THE MOST RECENT CALL TO
C     THE SETLAST SUBROUTINE.

      INTEGER FUNCTION GETLAST()

C     DECLARE A VARIABLE CALLED LAST AND
C     PUT IT IN A COMMON BLOCK CALLED /LASTV/

      INTEGER LAST
      COMMON /LASTV/ LAST

C     RETURN THE VALUE IN "LAST". THIS VALUE
C     WAS PUT THERE BY THE SETLAST SUBROUTINE.

      GETLAST = LAST
      END
</pre>
<p>
(Modern FORTRAN supports lowercase, but I grew
up in the days before lowercase was invented.
Writing FORTRAN code in lowercase just looks wrong
to me.)
</p>
<p>
Both <code>SETLAST</code> and <code>GETLAST</code>
declare a variable called <code>LAST</code> and put
it in a common block named <code>LASTV</code>.
The compiler matches up all common blocks with the same
name and aliases them together, so that they all refer
to the same block of memory.
</p>
<p>
You can put multiple variables into a common block
by separating them with commas.
</p>
<p>
Note that it is conventional to give the variables
in a common block the same name each time they occur.
But there's no requirement that they do.
You can give the variables different names each time
you declare the common block:
</p>
<pre>
      SUBROUTINE SETLAST(I)
      INTEGER I
      INTEGER FRED
      COMMON /LASTV/ FRED
      FRED=I
      END

      INTEGER FUNCTION GETLAST()
      INTEGER BARNEY
      COMMON /LASTV/ BARNEY
      GETLAST = BARNEY
      END
</pre>
<p>
This block of code is functionally equivalent
to the previous one.
Here, the <code>SETLAST</code> subroutine
calls the sole variable in the block "<code>FRED</code>",
whereas
the <code>GETLAST</code> function calls it
"<code>BARNEY</code>".
This is perfectly legal, albeit strange.
</p>
<p>
You aren't even required to match up the data types,
as long as the total size of the common block
stays the same.
For example, you might say
</p>
<pre>
      INTEGER*2 A
      INTEGER*2 B
      COMMON /FOURBYTES/ A, B
</pre>
<p>
in one function, declaring two two-byte integers
in a common block called <code>FOURBYTES</code>,
and then in a different function,
declare it like this:
</p>
<pre>
      INTEGER*4 I
      COMMON /FOURBYTES/ I
</pre>
<p>
The two common blocks are four bytes long,
so this is perfectly legal.
Of course, the results depend
on the endianness of the processor.
</p>
<p>
Okay, so anyway, FORTRAN had these weird
things called "common blocks" which are
used to get multiple functions to share
a chunk of memory.
I'm guessing that these things are what the
COMDAT object file segments were originally
intended for.
The rule that normally applies to COMDAT sections
is that
if the linker sees more than one COMDAT section
with the same name,
<a HREF="http://docs.oracle.com/cd/E19120-01/open.solaris/819-0690/6n33n7fcm/index.html">
it will keep one of them and throw away the rest</a>.
This is why it's important that all common blocks have
the same size:
You don't know which one the linker is going to use!
</p>
<p>
The C++ language introduced places where the compiler
may end up emitting the same code multiple times,
for example, vtables and
non-inline versions of inline functions.
The compiler can use these old FORTRAN COMDAT segments
to hold those things,
and rely on the linker to keep only one copy.
(Note that the linker doesn't validate that the duplicates
are identical.
Yet another reason why the C++ language requires that
inline functions be identically-defined in all translation units.)
</p>
<p>
And finally we get to identical COMDAT folding.
</p>
<p>
The idea is to put not just inline functions and vtables
in COMDAT segments.
Let's just put <i>everything</i> into COMDAT segments.
And then let's tell the linker,
"Hey, if you see two COMDAT code segments that are byte-for-byte
identical, then go ahead and treat them as if they were the
same thing."
</p>
<p>
That's how we got to the name "identical COMDAT folding".
We are taking COMDATs, looking for those which are identical,
and collapsing (folding) them together.
</p>
<p>
<b>Bonus chatter</b>:
I pulled a fast one in this article.
Next week, I'll come back and unwind it a little.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1270765">
				<div id="div-comment-1270765" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">George</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270765">
			October 24, 2016 at 8:06 am</a>		</div>

		<p>&#8220;before lowercase was invented&#8221;.  Of course I know what you mean, having entered Fortran IV on punch cards as the least bad input method long ago, but now I&#8217;m picturing you using hammer and chisel to enter code on marble slabs, with the comments in Latin.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1270895">
				<div id="div-comment-1270895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270895">
			October 25, 2016 at 9:57 am</a>		</div>

		<p>When I was a kid, we had sticks and a string. Uphill both ways!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-s-m-joshi-02 even thread-odd thread-alt depth-1" id="comment-1270775">
				<div id="div-comment-1270775" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/camhusmj38' rel='external nofollow' class='url'>camhusmj38</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270775">
			October 24, 2016 at 8:46 am</a>		</div>

		<p>I learned Fortran 95 &#8211; so Fortran 77 always looks wrong to me. In addition to the case business, there&#8217;s the abandonment of the importance of column position. Comments start with a ! and can begin anywhere. It&#8217;s so much more relaxing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1270785">
				<div id="div-comment-1270785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim Lyon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270785">
			October 24, 2016 at 11:35 am</a>		</div>

		<p>Oh, you youngsters!<br />
I started with FORTRAN II, on a machine with 6-bit characters. There literally weren&#8217;t enough bits in a character to afford lower case.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1272345">
				<div id="div-comment-1272345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">st</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1272345">
			November 4, 2016 at 7:05 pm</a>		</div>

		<p>And 10 characters per word? Whatever happened to CDC?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1270795">
				<div id="div-comment-1270795" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrea D'Alessandro</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270795">
			October 24, 2016 at 12:38 pm</a>		</div>

		<p>&#8220;Modern Fortran&#8221; is an oxymoron. ;-)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1270815">
				<div id="div-comment-1270815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270815">
			October 24, 2016 at 3:09 pm</a>		</div>

		<p>And yet Olde Fortran will be a popular brand of malt liquor / fuel for miscreant robots in the 31&#8217;st century&#8230; at least in the Futurama universe.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1270825">
				<div id="div-comment-1270825" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270825">
			October 24, 2016 at 10:31 pm</a>		</div>

		<p>Nitpick:  The official name of the language you refer to was &#8220;Fortran 77&#8221; (with title case).  Having said that, your code is perfectly valid FORTRAN IV.</p>
<p>Where did you say the nitpicker&#8217;s corner was?  First door on the right?  I&#8217;m on my way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1270835">
				<div id="div-comment-1270835" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270835">
			October 25, 2016 at 5:14 am</a>		</div>

		<p>&#8220;DECLARE THE DATA TYPE OF THE PARAMETER &#8220;I&#8221; AS INTEGER. THIS IS TECHNICALLY NOT NECESSARY, BECAUSE VARIABLES WHOSE NAMES BEGIN WITH THE LETTERS I THROUGH N DEFAULT TO INTEGER.&#8221;<br />
I guess I finally understand why iteration counters are often simply called &#8216;i&#8217;.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1270845">
				<div id="div-comment-1270845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270845">
			October 25, 2016 at 7:20 am</a>		</div>

		<p>Perhaps not entirely. The Fortran rule wasn&#8217;t arbitrary. It came from the common mathematical practice of using i, j, k as indices and m, n as matrix/vector dimensions, both usages that imply integers. (I suspect L just got swept up in the tide; it&#8217;s rare to see a straight (i.e. not script or bolded) L in math, because mathematicians love lowercase, and lowercase L looks like 1.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1270915">
				<div id="div-comment-1270915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Cohn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270915">
			October 25, 2016 at 11:27 pm</a>		</div>

		<p>👍 good answer</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1270935">
				<div id="div-comment-1270935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1270935">
			October 26, 2016 at 2:51 am</a>		</div>

		<p>I once had to figure out what some code did that used &#8216;i&#8217; &#8216;I&#8217; &#8216;l&#8217; &#8216;1&#8217; interchangably&#8230;. some days you think the previous programmer was out to get you.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1271735">
				<div id="div-comment-1271735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Austin Donnelly (MSFT)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161024-00/?p=94575#comment-1271735">
			November 1, 2016 at 9:19 am</a>		</div>

		<p>Note that plain old C also has a similar notion: globals that are not explicitly initialized are put into the .common section of the object files, and when the linker produces the final output those common sections are merged, identical symbols are folded, and they are assign a location in the .bss section.  NB: initializing a global puts it into the .data section, and those symbols are not eligible for folding: you get a link-time error.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

