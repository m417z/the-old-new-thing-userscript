<html>
<head>
<title>Your exception handler can encounter an exception</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Your exception handler can encounter an exception</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 17, 2005 / year-entry #68</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Consider the following code, written in C# just for kicks; the problem is generic to any environment that supports exception handling. void ObliterateDocument() { try { try { document.DestroyAll(); } finally { document.Close(); document.DestroyExtensions(); document.DestroyPlugins(); } } finally { document.Destroy(); } } Some time later, you find yourself facing an assertion failure from document.Destroy() claiming...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Consider the following code,
written in C# just for kicks; the problem is generic to any
environment that supports exception handling.
</p>
<pre>
void ObliterateDocument()
{
 try {
  try {
   document.DestroyAll();
  } finally {
   document.Close();
   document.DestroyExtensions();
   document.DestroyPlugins();
  }
 } finally {
  document.Destroy();
 }
}
</pre>
<p>
Some time later, you find yourself facing an assertion
failure from <nobr><code>document.Destroy()</code></nobr> claiming that you are
destroying the document while there are still active plugins.
But there is your call to <nobr><code>document.DestroyPlugins()</code></nobr>,
and it's in a <code>finally</code> block, and the whole point
of a <code>finally</code> block is that there is no way you can
escape without executing it.
</p>
<p>
So why didn't <nobr><code>document.DestroyPlugins()</code></nobr> execute?
</p>
<p>
Because your exception handler itself encountered an exception.
</p>
<p>
The exception handler is not active during its own
<code>finally</code> clause.
As a result,
if an exception is thrown during <code>document.Close()</code>,
the exception handler search begins at the block
<strong>outside</strong> the <code>finally</code> block.
</p>
<p>
(That the exception handler is not active during its own
<code>finally</code> clause should be obvious.  It would mean
that if an exception were to occur during the <code>finally</code>
clause, the program would go into an infinite loop.  And it also
wouldn't be possible to rethrow a caught exception; your <code>throw</code>
would end up caught by yourself!)
</p>
<p>
In this case, the exception was caught by some outer caller,
causing the remainder of the first <code>finally</code>
block to be abandoned.  The other <code>finally</code> blocks
do run since they contain the one that died.
</p>
<p>
(This bug also exists in the
<a HREF="/oldnewthing/archive/2005/01/14/352949.aspx#353092">
proposed alternative to error-checking code</a> posted by
an anonymous commenter.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-264873">
				<div id="div-comment-264873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cataraxia.com/' rel='external nofollow' class='url'>Kristoffer Henriksson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264873">
			March 17, 2005 at 7:21 am</a>		</div>

		<p>Putting stuff in the finally that can raise an exception gives me the willies. Putting anything in a finally AFTER a step that can raise an exception is right out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-264893">
				<div id="div-comment-264893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.johntopley.com/' rel='external nofollow' class='url'>John Topley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264893">
			March 17, 2005 at 7:33 am</a>		</div>

		<p>In Java, if document.Close() could throw a checked exception, then the call to it would itself have to be wrapped in its own try/catch block (unless a throws clause for that exception was added to the ObliterateDocument method signature).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-264903">
				<div id="div-comment-264903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart Tootill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264903">
			March 17, 2005 at 7:35 am</a>		</div>

		<p>I&#8217;m more of a C++ programmer, so finally==destructors, and doing anything that can throw in a destructor is outlawed on my team. Its in our coding standard and everything. Presumably as C# coding standards become more mature similar things will start cropping up for finally blocks since they are more or less analagous.</p>
<p>I don&#8217;t know what happens in C# but in C++ if an exception is thrown in (for comparison with the example) the finally block if that is being executed as a result of an exception the process terminates via std::terminate anyway, which (on vc7.1 at least) gives you (or your user) the wonderful error &quot;Application X terminated in an unusual way&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-264923">
				<div id="div-comment-264923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264923">
			March 17, 2005 at 7:44 am</a>		</div>

		<p>So basically if you do something silly with exceptions you can suffer the same problem as you suffer by default with return values.</p>
<p>OK.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-264933">
				<div id="div-comment-264933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264933">
			March 17, 2005 at 7:48 am</a>		</div>

		<p>DrPizza: No.  A more accurate summary is: If you don&#8217;t wrap every statement that can possibly throw an exception with a try/catch, then you&#8217;ll be in a situation where it&#8217;s impossible to ensure that you properly cleanup.</p>
<p>This is especially true if your statements have persistant side effects (like creating files).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-264943">
				<div id="div-comment-264943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264943">
			March 17, 2005 at 7:48 am</a>		</div>

		<p>&quot;DrPizza: No. A more accurate summary is: If you don&#8217;t wrap every statement that can possibly throw an exception with a try/catch, then you&#8217;ll be in a situation where it&#8217;s impossible to ensure that you properly cleanup.</p>
<p>This is especially true if your statements have persistant side effects (like creating files).&quot;</p>
<p>So how is this different from:</p>
<p>If you don&#8217;t check every statement that can possibly return an error code with a if/else, then you&#8217;ll be in a situation where it&#8217;s impossible to ensure that you properly cleanup.</p>
<p>This is especially true if your statements have persistant side effects (like creating files).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-264963">
				<div id="div-comment-264963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BlackTigerX</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264963">
			March 17, 2005 at 8:16 am</a>		</div>

		<p>that&#8217;s where in C# you would use &quot;using&quot;, of course this is only true for managed objects</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-264973">
				<div id="div-comment-264973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264973">
			March 17, 2005 at 8:16 am</a>		</div>

		<p>I&#8217;m pointing this out because I&#8217;ve seen this bug in production code &#8211; just sharing a tip.</p>
<p>(In an error-checking model, if you see &quot;if failed goto skip-over-the-rest-of-cleanup&quot; your brain might raise a red flag, &quot;What about cleaning up the plugins?&quot; I&#8217;m trying to point out that you need to raise that same flag when reading exception-based code.)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-264983">
				<div id="div-comment-264983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kbiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264983">
			March 17, 2005 at 8:20 am</a>		</div>

		<p>I think there is a another programming issue highlighted here, outside of the exception trap:  If you intend to call a method that depends on some state held in the object, you better check the state before you call the method.  This is a huge gotcha with the SqlConnection class that I am always cleaning up in other peoples code.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265013">
				<div id="div-comment-265013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">chrisB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265013">
			March 17, 2005 at 8:49 am</a>		</div>

		<p>I&#8217;ve lived in holy terror of that for years now.  Coming from the Delphi world this sort of thing can happen, just as in any language with structured error handling.</p>
<p>This definatly over-kill for most cases, but this is how I write &quot;some&quot; of my error handlers now:</p>
<p>void ObliterateDocument()<br />
<br />{<br />
<br /> try {<br />
<br />  try {<br />
<br />   document.DestroyAll();<br />
<br />  } finally {<br />
<br />    try { document.Close(); } catch(Exception ex){LogError(ex);}<br />
<br />    try { document.DestroyExtensions(); } catch(Exception ex){LogError(ex);}<br />
<br />   try { document.DestroyPlugins(); } catch(Exception ex){LogError(ex); }<br />
<br />  }<br />
<br /> } finally {<br />
<br />  document.Destroy();<br />
<br /> }<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-265043">
				<div id="div-comment-265043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265043">
			March 17, 2005 at 9:24 am</a>		</div>

		<p>&quot;This definatly over-kill for most cases, but this is how I write &quot;some&quot; of my error handlers now:&quot;</p>
<p>Is there some reason you failed to catch the actual example exception that Raymond pointed out in his article? I.e. document.Destroy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265053">
				<div id="div-comment-265053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Somebody</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265053">
			March 17, 2005 at 9:31 am</a>		</div>

		<p>When my exception handlers start becoming big monstrosities like crisB has shown, I take it as a sign that the function is trying to do too much and needs to be broken down into smaller and simpler components.  In this case, the document.DestroyAll() call should do what it&#8217;s supposed to do and destroy the extensions and plug-ins itself.  The document class should take care of its resources and not pass the buck to the callers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-265073">
				<div id="div-comment-265073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265073">
			March 17, 2005 at 9:43 am</a>		</div>

		<p>chrisB &#8230; the problem with what you have written is that while you have logged the exception, you haven&#8217;t handled it, and those calling ObliterateDocument have no idea something is wrong. It maybe safe in this particular cause, but is not the best as a general solution.</p>
<p>My recommendation is to have continual embedded try/catch/finally clauses and throw the caught exception:<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265063">
				<div id="div-comment-265063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265063">
			March 17, 2005 at 9:45 am</a>		</div>

		<p>Kristopher &#8230; given .NET&#8217;s exception model, you can have certain exceptions raised in otherwise benign code (like an assignment), but it will not preclude the need to make sure other items in your finally are called (if you want to be 100% safe).</p>
<p>Exceptions, such as ThreadAbortException, can happen at any time, and if you need/want to protect your finally clauses, you need to do something similar to ChrisB.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-265123">
				<div id="div-comment-265123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">testing 1 2 3</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265123">
			March 17, 2005 at 11:16 am</a>		</div>

		<p>This should work just fine:</p>
<p> try{<br />
<br />  try{<br />
<br />   try{<br />
<br />    try{<br />
<br />     document.DestroyAll();<br />
<br />    finally{document.Close();}}<br />
<br />   finally{document.DestroyExtensions();}}<br />
<br />  finally{document.DestroyPlugins();}}<br />
<br /> finally{document.Destroy();}}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265143">
				<div id="div-comment-265143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eugene Gershnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265143">
			March 17, 2005 at 12:18 pm</a>		</div>

		<p>The problem is a generic one not specific to exceptions or .NET: what to do if an error happens during recovery from another error. There are exactly 3 options here: ignore, abort process, handle-and-retry. Your fabulous .Java requires one to manually code all 3 of them. A better language like C++ defaults to abort (std::terminate) and requires programmer to manually code the other two. The usual guideline &quot;don&#8217;t throw from destructors&quot; sort of forces him to do it. In .Java you could adopt the same rule: &quot;don&#8217;t throw from Dispose/Close/whatever&quot;. But you are still left with the wrong default.<br />
<br />You may also want to read this: <a target="_new" href="http://groups-beta.google.com/group/comp.lang.c++.moderated/browse_frm/thread/67046b021cc4adb3/da59a2b51cf277fd#da59a2b51cf277fd" rel="nofollow">http://groups-beta.google.com/group/comp.lang.c++.moderated/browse_frm/thread/67046b021cc4adb3/da59a2b51cf277fd#da59a2b51cf277fd</a> for an interesting discussion of this same topic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-264993">
				<div id="div-comment-264993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-264993">
			March 17, 2005 at 8:26 am</a>		</div>

		<p>As soon as exceptions are broadly used, anything CAN raise an exception. I&#8217;m not using iostream but I&#8217;m affraid it also throws exceptions around. So, failed file open raises an exception, and failed close can also raise an exception and if you have two close statements in catch and first excepts, the second is not performed. Once everything throws exception, and you try to handle them correctly, you have *more* problems than with checking returns. </p>
<p>On some places Stroustrup and other insiders mention that they extended language before they knew what the results of it would be. I consider them guilty not because they introduced something to the language, but because they didn&#8217;t yell loud enough that such language features shouldn&#8217;t be used all around.</p>
<p>Moreover, the really usefull exceptions are the hardware generated floating point exceptions. And proper floating point is still something that most of the C++ fathers and stepfathers don&#8217;t consider enough.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265003">
				<div id="div-comment-265003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://codebetter.com/blogs/darrell.norton/' rel='external nofollow' class='url'>Darrell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265003">
			March 17, 2005 at 8:43 am</a>		</div>

		<p>What? You mean you still have to be a good programmer to use exceptions instead of error codes?  *gasp!*</p>
<p>No &quot;foolproof error handling strategy&quot; survives first contact with the general developer population (enemy).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-265283">
				<div id="div-comment-265283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hanson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265283">
			March 18, 2005 at 12:53 am</a>		</div>

		<p>Richard: The VC++ 7.1 help recommends that you don&#8217;t use SEH in C++ programs:</p>
<p>&quot;You can ensure that your code is more portable by using C++ exception handling.  Also, C++ exception handling is more flexible, in that it can handle exceptions of any type.&quot;<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265323">
				<div id="div-comment-265323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.arkestra.demon.co.uk' rel='external nofollow' class='url'>Paul Spendlove</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265323">
			March 18, 2005 at 1:47 am</a>		</div>

		<p>So the cleanup code in document.Close() is failing, and this failure is not being correctly handled. Not too surprising, that. Having cleanup code that may fail is going to make your error handling code more complex, whether you are using exceptions or return values to propagate error information.</p>
<p>But in general, cleanups should not fail, since they consist of freeing up resources that have already been successfully required. So I&#8217;m interested in what made document.Close() fail. What was this routine attempting?<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-265333">
				<div id="div-comment-265333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran Pušić</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265333">
			March 18, 2005 at 4:14 am</a>		</div>

		<p>I just hope that this was not Microsoft&#8217;s production code :-)). Here&#8217;s why:</p>
<p>1. This looks like general cleanup, so, in .NET, one should use IDisposable.Dispose.</p>
<p>2. Throwing from cleanup code is unnacteptable practice, as C++/Java/Delphi folks know. If one cannot control this, one should trycatch-wrap offending pieces.</p>
<p>3. The function obvoiusly leaves the object in an inconsistent state; then, some other function uses the bad object and fails. Really!? My feeling is, the object should probably have been disposed off and entirely forgotten by the program after the problem, but&#8230;</p>
<p>Regarding: &quot;In an error-checking model, if you see &quot;if failed goto skip-over-the-rest-of-cleanup&quot; your brain might raise a red flag, &quot;What about cleaning up the plugins?&quot; I&#8217;m trying to point out that you need to raise that same flag when reading exception-based code&quot;</p>
<p>No. You needn&#8217;t raise this flag. BAD ADVICE! In exception-based code cleanup must not throw and must not skip anything. Let&#8217;s ask the people from .NET teams about it. I think there is no cleanup that throws in the framework. Or, if there is, they know it&#8217;s a bug :-).<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265273">
				<div id="div-comment-265273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265273">
			March 17, 2005 at 11:46 pm</a>		</div>

		<p>BTW &#8211; in C++, using SEH, if I say</p>
<p>{SomeObject obj;<br />
<br /> _try {DoSomething();<br />
<br /> }<br />
<br /> __finally<br />
<br /> {};<br />
<br /> }</p>
<p>does obj.~SomeObject() get called if DoSomething() raises an exception?<br />
<br />If not, how *do* I get it called?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-265733">
				<div id="div-comment-265733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://arcavia.com/kyle' rel='external nofollow' class='url'>Kyle Lahnakoski</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265733">
			March 20, 2005 at 11:58 pm</a>		</div>

		<p>Saying that the finally clause is not allowed to throw exceptions is naive.  No programmer can reasonably expect to know what does and doesn&#8217;t throw an exception.  The only thing you can do is catch all possible  exceptions like chrisB showed.</p>
<p>I blame the existence of the finally clause for this problem.  Without finally{} there would be no problem.</p>
<p>I have always viewed throw as a return, so I never use finally.  I has always been odd to me to have a lanaguage construct that allows you to do work AFTER you have thrown an exception.  It is like allowing a method to continue AFTER it has returned.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-265763">
				<div id="div-comment-265763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran Pušić</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-265763">
			March 21, 2005 at 4:50 am</a>		</div>

		<p>&quot;No programmer can reasonably expect to know what does and doesn&#8217;t throw an exception.&quot;</p>
<p>This is true. OTOH, I was trying to convey the destructor rule from C++ (i.e. throw is forbidden). From where we stand, finally is analogue to d-tors so the same rule should apply in order to preserve cleanup semantics. It seems great that there is no &quot;finally&quot; in C++, doesn&#8217;t it? :-))</p>
<p>On the matter at hand: I think that in majority of cases, there will be no possibility of exceptions in cleanup code anyhow, so the whole point is moot. In rare cases when it&#8217;s are possible, it should be glaringly obvoius (it usually is, I think), try-catched around, well commented, whatever&#8230; If not, tough, needs to be fixed. </p>
<p>The example from the article is bad in this sense: it appears that it is usual to have cleanup code that throws, but, OTOH, it&#8217;s not true. It is also known (at least to C++ folks) that it&#8217;s a general no-no. Hence my opinion from before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-266123">
				<div id="div-comment-266123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mazur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-266123">
			March 21, 2005 at 11:29 pm</a>		</div>

		<p>Richard: the destructor is called in the normal way, since _try{} already ate the exception&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-714233">
				<div id="div-comment-714233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.arcavia.com/kyle/blog/?p=191' rel='external nofollow' class='url'>The Grumpy INTP &raquo; Blog Archive &raquo; Proper Exception Handling</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050317-00/?p=36143#comment-714233">
			March 6, 2009 at 11:42 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.arcavia.com/kyle/blog/?p=191" rel="nofollow">http://www.arcavia.com/kyle/blog/?p=191</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

