<html>
<head>
<title>How can I reserve a range of address space and receive notifications when the program first reads or writes a page in the range?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I reserve a range of address space and receive notifications when the program first reads or writes a page in the range?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 24, 2018 / year-entry #20</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Be in the exception handler chain.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to
reserve a range of address space and be notified when the
program first reads or writes a page in the range.
</p>
<p>
It's not clear what the customer's goal is,
but if it's true that all they want is to be notified
of the access,
without affecting the underlying memory,
then it's not so hard.
</p>
<p>
In the simplest case, you can mark the page as
<code>PAGE_</code><code>GUARD</code>.
This will raise a guard page violation the first time
the program reads from or writes to the memory.
You can log whatever you need and then indicate that you
handled the exception and want execution to continue as if
no exception had occurred.
The guard page violation is raised only once per page.
After it's done, the memory behaves normally,
either as a normal read-only page or a normal read-write page,
depending on how you allocated the memory.
</p>
<p>
In the more complicated case where you want to detect reads and
writes separately,
you can mark the page as
<code>PAGE_</code><code>NO&shy;ACCESS</code>.
If that's all you do, then this will raise
an access violation every time the program
reads from or writes to the memory.
But what you can do is to inspect the exception reason,
and if it's "read", then
change the protection from
<code>PAGE_</code><code>NO&shy;ACCESS</code>
<code>PAGE_</code><code>READ&shy;ONLY</code>
to upgrade the page from no-access to read-only.
If it's "write", then upgrade all the way to
<code>PAGE_</code><code>READ&shy;WRITE</code>.
Log the information, change the page protections,
and indicate that execution should continue.
</p>
<p>
Watch out for the multithreaded case, if two threads take
access violations simultaneously on the same page.
</p>
<p>
If you want this fancy memory management
only for the duration of a function call,
then you can install a structured exception handler
around the code whose access is being monitored.
If you need this beyond the scope of a single function,
then you can use a vectored exception handler.
</p>
<p>
A variation of this is where you want to commit empty pages
on demand.
In that case,
you 
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20120210-00/?p=8333">
the same technique that
the <code>Format&shy;Message</code> function used to use</a>:
Reserve a bunch of memory,
and then install an exception handler that creates the
memory on demand in response to an accss violation
on one of the pages you're managing.
</p>
<p>
There is a gotcha here:
Your custom page fault handler will be
called only for page faults incurred by user mode.
If the program passes a buffer to kernel mode (say as the source
of a <code>Write&shy;File</code> or the destination of
a <code>Read&shy;File</code>),
then kernel mode will complain that the buffer is invalid
because not all the pages are committed with appropriate
access.
To work around this, you'll have to manually fault in the pages
with the appropriate protections before using then as source
or destination buffers in kernel calls.
</p>
<p>
Okay, so this works in the case where the program
merely wants to be notified of the access,
or if it wants to swoop in and allocate blank pages.
Next time, we'll look at a more complicated scenario.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20180124-00/?p=97875#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="https://blogs.msdn.microsoft.com/oldnewthing/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-form-comment"><textarea id="comment" name="comment" cols="45" rows="4" aria-required="true"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" aria-required='true' required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" aria-required='true' required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit btn btn-default" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='97875' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p><p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="aaea36a6a0" /></p><p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="214"/></p>			</form>
			</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1322195">
				<div id="div-comment-1322195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875#comment-1322195">
			January 24, 2018 at 8:37 am</a>		</div>

		<p>&#8220;It&#8217;s not clear what the customer&#8217;s goal is,&#8221;&#8230;The first thing that comes to mind is a data breakpoint on a range of addresses</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875&#038;replytocom=1322195#respond' onclick='return addComment.moveForm( "div-comment-1322195", "1322195", "respond", "97875" )' aria-label='Reply to M'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1322205">
				<div id="div-comment-1322205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Doubleday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875#comment-1322205">
			January 24, 2018 at 10:21 am</a>		</div>

		<p>What a bizarre request.  The last time I needed to reserve a memory range was when I dealt with dual-ported memory between a Z8530 board and some sort of M68000 mini-computer.</p>
<p>Shared memory? Use the API given to you by the OS.  In fact, just rely on the OS.  Any OS.  This sort of question suggests that the customer has never heard of virtual memory and associated software support going way back into the 1990s.</p>
<p>(I&#8217;m wide open to being proven wrong in cases I haven&#8217;t considered.  But, really.  It&#8217;s a waste of your time.)</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875&#038;replytocom=1322205#respond' onclick='return addComment.moveForm( "div-comment-1322205", "1322205", "respond", "97875" )' aria-label='Reply to Peter Doubleday'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1322225">
				<div id="div-comment-1322225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875#comment-1322225">
			January 24, 2018 at 1:23 pm</a>		</div>

		<p>One of the 1990s era Object-Oriented databases did funky things like this with virtual memory.  It made for some interesting behavior when things when you started using it &#8211; there all sorts of unexpected side-effects.</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875&#038;replytocom=1322225#respond' onclick='return addComment.moveForm( "div-comment-1322225", "1322225", "respond", "97875" )' aria-label='Reply to Brian'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1322245">
				<div id="div-comment-1322245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875#comment-1322245">
			January 25, 2018 at 3:54 am</a>		</div>

		<p>There are too many typos in this post. :(</p>

		<div class="reply"><a rel='nofollow' class='comment-reply-link' href='https://blogs.msdn.microsoft.com/oldnewthing/20180124-00/?p=97875&#038;replytocom=1322245#respond' onclick='return addComment.moveForm( "div-comment-1322245", "1322245", "respond", "97875" )' aria-label='Reply to Tanveer Badar'>Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

