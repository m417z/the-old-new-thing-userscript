<html>
<head>
<title>Why does PrintWindow hate CS_PARENTDC? Because EVERYBODY hates CS_PARENTDC!</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does PrintWindow hate CS_PARENTDC? Because EVERYBODY hates CS_PARENTDC!</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 4, 2012 / year-entry #129</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter kero wants to know why the Print­Window function hates CS_PARENT­DC. (And CS_CLASS­DC, and CS_OWN­DC.) Because everybody hates CS_PARENT­DC! (And CS_CLASS­DC, and CS_OWN­DC.) We saw earlier that these class styles violate widely-held assumptions about how drawing works. I mean, who would have thought that asking for two device contexts would give you the same one...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter kero wants to know <a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/07/20/10040074.aspx#10040920"> why the <code>Print&shy;Window</code> function hates <code>CS_<wbr>PARENT&shy;DC</wbr></code></a>. (And <code>CS_<wbr>CLASS&shy;DC</wbr></code>, and <code>CS_<wbr>OWN&shy;DC</wbr></code>.)</p>
<p> Because <i>everybody</i> hates <code>CS_<wbr>PARENT&shy;DC</wbr></code>! (And <code>CS_<wbr>CLASS&shy;DC</wbr></code>, and <code>CS_<wbr>OWN&shy;DC</wbr></code>.) </p>
<p> We saw earlier that these class styles <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/06/01/612970.aspx"> violate widely-held assumptions about how drawing works</a>. I mean, who would have thought that asking for two device contexts would give you the same one back twice? Or that changes to one device context would secretly modify another (because they're really the same)? Or that a window procedure assumes that it will see only one device context <i>ever</i>? </p>
<p> The <code>Print&shy;Window</code> function is really in a pickle when faced with a window with one of these class styles, because the whole point of <code>Print&shy;Window</code> is to render into some <i>other</i> device context. The <code>Print&shy;Window</code> function says "Render into this other device context, please," and the window acts like a bratty two-year-old who refuses to eat food from anything other than his favorite <a href="http://www.bing.com/shopping/search?q=monkey+plate"> monkey plate</a>. "This is not my monkey plate. I will now throw a tantrum." </p>
<p> The <code>Print&shy;Window</code> function passes a custom device context as a parameter to the <code>WM_<wbr>PRINT</wbr></code> message, and the window says, "Hey, no fair! My class styles say that you aren't allowed to pass any old device context; you have to pass <i>mine</i>. I will now take my broccoli and mash it all over the table." </p>
<p> Oh well. At least it tried. </p>
<p> Yet another reason to avoid these weird class styles. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-988863">
				<div id="div-comment-988863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988863">
			June 4, 2012 at 7:38 am</a>		</div>

		<p>I&#39;ve only ever seen CS_OWNDC used for console windows, but at least they WM_PRINT ok</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes odd alt thread-odd thread-alt depth-1" id="comment-988873">
				<div id="div-comment-988873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988873">
			June 4, 2012 at 8:01 am</a>		</div>

		<p>I&#39;ve never had to work with them myself, but I do love the image of a bratty two-year-old kid mashing his broccoli. Add a glob of mashed potatoes flung from a spoon-shaped catapult and you&#39;ve got a regular slapstick popcorn movie.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988883">
				<div id="div-comment-988883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988883">
			June 4, 2012 at 8:19 am</a>		</div>

		<p>I didn&#39;t know that mashing broccoli had anything to do with programming, but now I know!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988893">
				<div id="div-comment-988893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988893">
			June 4, 2012 at 8:22 am</a>		</div>

		<p>I used to use CS_CLASSDC to set properties at setup time and leave them (things like persistent brushes that I didn&#39;t want to recreate in every WM_PAINT). These days I&#39;ve learned I can cache the brush and forget about the DC. Hmmm. ParentDC seems like a good idea for a child window and I would hope wouldn&#39;t mess up PrintWindow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988913">
				<div id="div-comment-988913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988913">
			June 4, 2012 at 9:26 am</a>		</div>

		<p>You described quite well why CS_CLASSDC and CS_OWNDC conflict with PrintWindow (drawing to an arbitrary DC invalidates assumptions about the DC being passed in), but CS_PARENTDC doesn&#39;t have the same problem. As I read the documentation, CS_PARENTDC just means the DC for that window will have its clipping region already set to that of its parent window.</p>
<p>Presumably this means that the DC passed from PrintWindow would differ only in the lack of a clipping region. I would think that this would be fine &#8212; indeed, I think it would be preferable. If I wanted a printout of a child window, I would probably want the whole thing, not just the part that was visible within the parent window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988923">
				<div id="div-comment-988923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988923">
			June 4, 2012 at 9:29 am</a>		</div>

		<p>I always wondered what MUST be restored before releasing a DC?</p>
<p>Only things which were SelectObject-ed or other things too?</p>
<p>Do these things need to be restored or not:</p>
<ul>
<li>SetBkMode</li>
<li>
<p>SetTextColor</p>
</li>
<li>
<p>SetTextAlign,</p>
</li>
</ul>
<p>etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-988933">
				<div id="div-comment-988933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988933">
			June 4, 2012 at 10:34 am</a>		</div>

		<p>MSDN states: &quot; For example, the system uses parent device contexts for push button and edit controls.&quot;</p>
<p>Do dialogs have a problem with &nbsp;PrintWindow?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988983">
				<div id="div-comment-988983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988983">
			June 4, 2012 at 9:25 pm</a>		</div>

		<p>Speaking of WM_PRINT.. What am I supposed to do with those flags passed by lParam when handling WM_PRINTCLIENT? All your examples seem to ignore them. Would it be a good idea to call DefWindowProc (or SendMessage?) with WM_PRINT in the message parameter and only really handle it when lParam is equal to PRF_CLIENT?</p>
<p>It also seems that many people don&#39;t call GetUpdateRect when handling WM_PAINT like it says to in WM_PAINT&#39;s documentation. How bad is it if I don&#39;t do this? BeginPaint doesn&#39;t say anything about it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-988963">
				<div id="div-comment-988963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988963">
			June 4, 2012 at 5:28 pm</a>		</div>

		<p>KJK::Hyperion: Before the introduction of the HasDC property, the class style for Visual Basic forms* always was CS_OWNDC | DBLCLKS. The second part allows for the Form_DblClick event and doesn&#39;t concern us now.</p>
<p>The CS_OWNDC was specified for two reasons that I know of.</p>
<p>1) It allows you to store the value in a variable. Even if you don&#39;t do this yourself, you may be unwittingly using something that does. For example, if you call OpenGL&#39;s wglCreateContext the device context handle is with many video drivers stored somewhere and must always refer to the same window. I believe this wasn&#39;t part of the original specification, but since it didn&#39;t warn driver programmers about the issue, and they live in a different world, many didn&#39;t know better than that the device context they got would always be for the same window. Hence they often didn&#39;t call WindowFromDC like they should. So often in fact that this has pretty much become part of the interface, if not on MSDN, at least on OpenGL.org.</p>
<p>2) It makes it possible for the runtime to, when drawing properties like ForeColor and DrawWidth are set, simply update the device context. If CS_OWNDC had not been present, the runtime library would have to refresh all the drawing properties every time a DC is acquired. (Or make it impossible to set the drawing properties at design time and make it clear that they&#39;re lost when the DC is released, which would presumably happen when you return to the message loop, but presumably not when you enter it with DoEvents&#8230;)</p>
<p>________</p>
<p>* Form is VB parlance for window (class).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-988993">
				<div id="div-comment-988993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-988993">
			June 5, 2012 at 7:07 am</a>		</div>

		<p>@Steve</p>
<p>On your second question the answer is pretty easy: &nbsp;Calling GetUpdateRect and modifying your paint code to accommodate it is, in many cases, premature optimization. &nbsp;It is much easier to write a paint function that simply assumes the entire window is going to be redrawn &#8212; and on modern hardware it is usually fast enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-989623">
				<div id="div-comment-989623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Klimax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-989623">
			June 6, 2012 at 11:08 am</a>		</div>

		<p>@Mike Dimmick:</p>
<p>Windows 7 added back support for some GDI operation, which are now accelerated again. (If driver supports WDDM 1.1)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-989593">
				<div id="div-comment-989593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-989593">
			June 6, 2012 at 11:01 am</a>		</div>

		<p>@Steve: I think they&#39;re trying to say that if you&#39;re *going* to call GetUpdateRect, you need to do it before calling BeginPaint. BeginPaint copies the current update rectangle into the PAINTSTRUCT&#39;s rcPaint member, then validates the update region. Calls to GetUpdateRect after this will not retrieve a valid rectangle, and GetUpdateRgn will return NULLREGION. (Sometimes it speeds up drawing if you only draw the exact pieces that need to be updated, rather than the whole bounding box, so you need to ask for the region rather than the rectangle.)</p>
<p>@SimonRev: Since Windows Vista, if you have the composited desktop enabled (Aero), GDI painting is done entirely in software, not hardware-accelerated. (However, when something is occluded by another window, it doesn&#39;t cause that part of the window to be invalidated &#8211; the last image painted is cached as a texture.) It can still be beneficial to optimize painting, to save battery power (CPU/GPU cycles not burned = less energy transferred). It does require that you call InvalidateRect/InvalidateRgn on only the bits that need repainting, of course.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-990243">
				<div id="div-comment-990243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-990243">
			June 8, 2012 at 8:31 am</a>		</div>

		<p>@SimonRev</p>
<p>If you look at it as a performance thing I&#39;m not sure it is premature because WM_PAINT is sent when there is nothing to paint. You can still assume everything needs to be redrawn when something needs to be redrawn, as long as that&#39;s not nothing. I&#39;m more concerned about it being a correctness issue though. Is the only cost that I will spend a few cycles where I otherwise wouldn&#39;t have, or would it be akin to calling BeginPaint/EndPaint outside of WM_PAINT which I guess is another no-no? Is that rule flexible too and BeginPaint is fair game anywhere?</p>
<p>If I were to guess the answer I would say that you&#39;re supposed to call it but lots of people don&#39;t read the documentation so there really isn&#39;t a penalty other than wasting time, or if there were, they were fixed so they don&#39;t happen anymore. But the amount of people who don&#39;t do it is so gigantic that it seems like it&#39;s less of an issue then that makes it sound. Also it feels like I&#39;m just three or four justifications like that away from being this blog&#39;s next butt-head (or at least making a mistake rivaling some of the ones outlined here).</p>
<p>I keep flipping back and forth between thinking that it&#39;s not an issue that should concern anyone anywhere ever, and thinking about how people who do things counter to what the documentation says are treated on here.</p>
<p>@Mike Dimmick</p>
<p>That&#39;s really not what I get from it. I see it saying that WM_PAINT is sent sometimes when we don&#39;t actually need to paint. Besides isn&#39;t the update region stored as the HDC&#39;s clipping region? Can&#39;t you get it from there? Apparently you can&#39;t get it from GetClipRgn() for some unexplained reason. GetRandomRgn() seems to do it though.</p>
<p>I wrote my question about WM_PRINTCLIENT understandably right?</p>
<p>case WM_PRINTCLIENT:</p>
<p>..if (lParam != PRF_CLIENT)</p>
<p>&#8230;.return DefWindowProc(hwnd, WM_PRINT, wParam, lParam);</p>
<p>..// handle it</p>
<p>I kind of want to do this because I don&#39;t want to have to print the things described in those flags.. (I also don&#39;t know how to.) Is this a bad idea?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-990263">
				<div id="div-comment-990263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-990263">
			June 8, 2012 at 10:26 am</a>		</div>

		<p>GetRandomRgn is certainly an interesting name for a function. It would certainly be amusing if it did in fact return a random region! However, it seems that the region is actually totally deterministic. I suspect that GetSpecificRgn would have been a much better name. Although given that SYSRGN is the only documented value that you&#39;re supposed to ask for, maybe GetSystemRgn would be better.</p>
<p>I wonder if there&#39;s anybody still at MS who remembers how GetRandomRgn got its name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-990463">
				<div id="div-comment-990463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-990463">
			June 10, 2012 at 8:01 pm</a>		</div>

		<p>Dear Raymond, the meaning of my long-standing question is the following.</p>
<p>PrintWindow draws CS_PARENTDC-window as a black rectangle.</p>
<p>But it&#39;s easy to fix, if before PrintWindow to remove CS_PARENTDC (+ to restore after).</p>
<p>So why is this in itself does not provide PrintWindow?</p>
<p>PrintWindow sometimes spoils the window with the style CS_OWNDC or CS_CLASSDC, &#8211; why is not provided to prevent this?</p>
<p>Finally, although the MSDN says that &quot;This function is similar to WM_PRINT&quot;, &#8211;</p>
<p>PrintWindow draws invisible (!WS_VISIBLE) window as black rectangle, but WM_PRINT sees invisible window. Why PrintWindow deprived of this ability?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-990503">
				<div id="div-comment-990503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120604-00/?p=7463#comment-990503">
			June 11, 2012 at 3:31 am</a>		</div>

		<p>forgotten (after 2 years have passed):</p>
<p>PrintWindow sometimes spoils WS_EX_LAYERED (UpdateLayeredWindow)- windows</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

