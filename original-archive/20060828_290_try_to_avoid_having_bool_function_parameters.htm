<html>
<head>
<title>Try to avoid having BOOL function parameters</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Try to avoid having BOOL function parameters</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 28, 2006 / year-entry #291</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>66</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Generally speaking, I believe that you should try to avoid giving functions a boolean parameter (BOOL, bool, etc.) unless the meaning of that boolean parameter is blatantly obvious. Examples of obvious meaning would be the second parameter to the EnableWindow function (TRUE obviously means the window is being enabled and FALSE means that it's being...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Generally speaking, I believe that you should try to avoid giving functions a boolean parameter (<code>BOOL</code>, <code>bool</code>, etc.) unless the meaning of that boolean parameter is blatantly obvious. Examples of obvious meaning would be the second parameter to the <code>EnableWindow</code> function (<code>TRUE</code> obviously means the window is being enabled and <code>FALSE</code> means that it's being disabled) and the final parameter to <code>ShowScrollBar</code> (<code>TRUE</code> obviously means the scroll bar is being shown and <code>FALSE</code> means that it's being hidden). In both of these cases, the meaning of the boolean parameter is encoded in the name of the function itself.</p>
<p> But for functions like <code>CreateEvent</code>, what does that first <code>BOOL</code> parameter mean? First, you have to realize that the first <code>BOOL</code> parameter controls whether you get an auto-reset event or a manual-reset one. Does <code>FALSE</code> create a manual-reset event? Or is that done by passing <code>TRUE</code>? I can never remember and I have to go looking it up each time. That first parameter should have been declared as, say, a <code>DWORD</code> or, even better, an <code>enum</code> with two legal values, <code>EVENTTYPE_AUTORESET</code> and <code>EVENTTYPE_MANUALRESET</code>. </p>
<p> Even worse is that <code>CreateEvent</code> has <strong>two</strong> <code>BOOL</code> parameters. Like anybody reading the code later can remember which comes first. </p>
<p> And the mystery <code>bool</code>s keep coming. Consider, for example, <a href="http://msdn.microsoft.com/library/en-us/cpref/html/frlrfsystemiostreamreaderclassctortopic3.asp"> <code>StreamReader(Stream, bool)</code></a>. What does <code>true</code> mean? Or <code>false</code>? Heck if I know. </p>
<p> Mind you, this is just my opinion. Others may disagree with me. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (66)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-413973">
				<div id="div-comment-413973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Goran</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-413973">
			August 28, 2006 at 10:10 am</a>		</div>

		<p>:-)</p>
<p>Thanks, Raymond! I, too, always struggle with CreateEvent (and others) and say to myself &quot;You stupid prick, when will you remember it!&quot;</p>
<p>Nice to know I&#8217;m not alone&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-413983">
				<div id="div-comment-413983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JCMay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-413983">
			August 28, 2006 at 10:11 am</a>		</div>

		<p>So I suppose an enumeration of legal values would be a much easier thing to read, huh? :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-413993">
				<div id="div-comment-413993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ryan T Shepherd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-413993">
			August 28, 2006 at 10:16 am</a>		</div>

		<p>I hear you on CreateEvent. Every time I was digging through code where I had used it, I always had to look it up to remember which parameter was which. Big waste of time. I had to resort to leaving comments wherever I used to remind me of the parameter ordering.</p>
<p>So many other API functions use enums, like ShowWindow and all the SW_* enums. Why wasn&#8217;t this used more often? Or even a single bitmask-type enum where you could pass in something like (EVENTTYPE_AUTORESET | EVENTTYPE_INIT_SIGNALLED) would be an improvement over the current ambiguity.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414003">
				<div id="div-comment-414003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frank</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414003">
			August 28, 2006 at 10:16 am</a>		</div>

		<p>Hi,<br />
<br />CreateEvent is a good example. At a first glance, the idea with the enum might be overkill but it is easier to read.</p>
<p>You might still end at the documentation to copy &amp; paste the enum&#8217;s name, but the BOOLs there&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414013">
				<div id="div-comment-414013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lauren Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414013">
			August 28, 2006 at 10:17 am</a>		</div>

		<p>Isn&#8217;t that what the variable names are for in function declarations?</p>
<p>CreateEvent is declared:</p>
<p>HANDLE CreateEvent(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCTSTR lpName);</p>
<p>Could those be made more usable with something like enum {RESET_AUTO, RESET_MANUAL} and enum {SIGNALLED, NOTSIGNALLED} ? Yes, but then you still run into the problem of now knowing what those parameters mean, not to mention not knowing the enum types.</p>
<p>With BOOL, you know that there are only two settings and the parameter name should be a giveaway as to the function of the parameter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-414023">
				<div id="div-comment-414023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414023">
			August 28, 2006 at 10:21 am</a>		</div>

		<blockquote><p>
  So I suppose an enumeration of legal values would be a much easier thing to<br />
  <br />&gt; read, huh? :)</p>
<p>At least ::CreateEvent(EVENTTYPE_MANUALRESET, &#8230;) is more obvious what you mean than ::CreateEvent(FALSE, &#8230;)</p>
<p>The latest .NET design guidelines are pretty good on this subject (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/brada/archive/2004/01/12/57922.aspx" rel="nofollow">http://blogs.msdn.com/brada/archive/2004/01/12/57922.aspx</a>) &#8211; too bad it&#8217;s too late for what&#8217;s already been designed!
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414033">
				<div id="div-comment-414033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414033">
			August 28, 2006 at 10:29 am</a>		</div>

		<p>Good thing Intellisense provides the formal parameter name and the description from XML comments :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414063">
				<div id="div-comment-414063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414063">
			August 28, 2006 at 11:08 am</a>		</div>

		<blockquote><p>
  Good thing Intellisense provides the formal parameter name and the description from XML comments :)</p>
<p>Have pity on those of us using third-party development environments. &nbsp;Besides, it doesn&#8217;t help when you&#8217;re trying to read the code. &nbsp;</p>
<p>No, the APIs that use enums or bit-sets for this kind of parameters are generally much easier to use.</p>
<p>Another point in favour of using a bitset as replacement for BOOL parameters is that the available choices can be expanded later without adding a new MyFunctionWithBoolParametersEx API.</p>
<p>Also, calling a function with a single bitset parameter is more efficient than calling one with two bool parameters, and the code on the inside of the function may be more efficient because of it too (you can branch based on a single bit in a register just as easily as you can branch based on the entire content of the register, and you may be able to eliminate an additional load).<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414073">
				<div id="div-comment-414073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414073">
			August 28, 2006 at 11:10 am</a>		</div>

		<p>I&#8217;d say that CreateEvent function pains are fixable: if somebody adds EVENT_MANUAL as 1 and EVENT_AUTO as 0 new defines to the windows.h and change the docs then any new code can use them for the second parameter of the calls like CreateEvent( lpsa, TRUE, FALSE, .. ). The third parameter is the state of the event, so it would be readable enough to remain as is (FALSE is obvious enough for non-signaled).</p>
<p>Then when you maintain some older code, and &nbsp;stumble to some TRUE, FALSE code there you can change it once for ever, to the state that<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414103">
				<div id="div-comment-414103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter Ritchie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414103">
			August 28, 2006 at 11:21 am</a>		</div>

		<p>Agreed. &nbsp;I use enums to signify meaning (which could, in fact, be cast to bool in the implementation if only 0 an 1 are uses as enum values&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414133">
				<div id="div-comment-414133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://devauthority.com/blogs/jwooley/default.aspx' rel='external nofollow' class='url'>Jim Wooley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414133">
			August 28, 2006 at 11:57 am</a>		</div>

		<p>Here&#8217;s where using named parameters in VB allows you to keep the maintainability without requiring special enums, thus you would have something like : CreateEvent(lpEventAttributes:=attribs, bManualReset:=True, bInitialState:=False &#8230;) Naturally, this requires that you take the time to consider your parameter names so that a boolean response makes sense, thus bManualReset could be requireManualReset and bInitialState could be something like initialStateClicked depending on the needs of the application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414173">
				<div id="div-comment-414173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414173">
			August 28, 2006 at 1:31 pm</a>		</div>

		<p>[i]Isn&#8217;t that what the variable names are for in function declarations? </p>
<p>CreateEvent is declared: </p>
<p>HANDLE CreateEvent(LPSECURITY_ATTRIBUTES lpEventAttributes, BOOL bManualReset, BOOL bInitialState, LPCTSTR lpName); [/i]</p>
<p>Um yes but I think you miss the point. &nbsp;Suppose you&#8217;re reading someone&#8217;s code where they are [i]calling[/i] the function. &nbsp;All you&#8217;ll see is something like</p>
<p>CreateEvent(NULL, TRUE, FALSE, NULL)</p>
<p>And most people can&#8217;t remember what the TRUE and FALSE are for without looking it up. &nbsp;Or worse, they think they remember but they actually remembered wrong (double bad if &quot;they&quot; happens to be the person who wrote the code).</p>
<p>Granted, I [i]suppose[/i] you can write something like this:</p>
<p>BOOL bManualReset = TRUE;<br />
<br />BOOL bInitialState = FALSE;<br />
<br />CreateEvent(NULL, bManualReset, bInitialState, NULL)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414183">
				<div id="div-comment-414183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.codeneverwritten.com' rel='external nofollow' class='url'>Curt</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414183">
			August 28, 2006 at 1:31 pm</a>		</div>

		<blockquote><p>
  I can never remember and I have to go looking it up each time.</p>
<p>Glad to see I&#8217;m not the only one (by far)!<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414193">
				<div id="div-comment-414193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BrianK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414193">
			August 28, 2006 at 1:37 pm</a>		</div>

		<p>Right after reading this, I had to add a parameter to a function &#8211; a BOOL! Here&#8217;s three parameters in a call to it now<br />
<br />&#8230; TRUE, FALSE, TRUE, &nbsp;&#8230;<br />
<br />sligtly out of control &#8211; oh well.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414213">
				<div id="div-comment-414213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://fluff.info/blog' rel='external nofollow' class='url'>b</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414213">
			August 28, 2006 at 1:51 pm</a>		</div>

		<p>Me, I&#8217;m a fan of chars. </p>
<p>Since Enums are typically in a global name space, they rely on verbosity to remain unique, meaning that they are inevitably verbose.<br />
<br />CreateEvent(NULL, EVENTTYPE_AUTORESET, EVENTTYPE_INITIALSTATEISSOMETHING, NULL);<br />
<br />is hard to read because it&#8217;s too long, and is hard to write because you have to look up whether it&#8217;s EVENTTYPE_AUTORESET or EVENT_TYPE_AUTO_RESET or EVENTTYPE_AUTO every time. </p>
<p>So my proposed alternative,<br />
<br />CreateEvent(NULL, &#8216;a&#8217;, &#8216;s&#8217;, NULL);<br />
<br />fits onto one line, provides some pneumonic assistance, doesn&#8217;t require you to remember which direction was supposed to be zero, and doesn&#8217;t read like you&#8217;re yelling. It&#8217;s not perfect either, but I&#8217;ve found that it leads to less manual-reading for me than the inevitably verbose enums. Newbies to the function will need to check what &#8216;a&#8217; means, but after seeing it a few times, it becomes as familiar as the verbose equivalent.</p>
<p>Smart IDEs don&#8217;t help with the verbosity issue, which is why people resorted to booleans to begin with. Enums are equivalent to naming the function<br />
<br />CreateEventWhereTheFirstBooleanIsZeroWhenAutoInitializing. Your autocomplete will gladly write it out for you, but there&#8217;s a reason nobody names their functions like that.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414223">
				<div id="div-comment-414223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://gabest.org/' rel='external nofollow' class='url'>Gabest</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414223">
			August 28, 2006 at 2:06 pm</a>		</div>

		<p>People here complain about tedious tasks they have to do each time while they could just code their own wrapper function/class to simplify their lives. Yes, I often find myself forgetting about this too&#8230; I take the longer, harder path foolishly thinking this was the last time I had to.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414233">
				<div id="div-comment-414233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://fluff.info/blog' rel='external nofollow' class='url'>b</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414233">
			August 28, 2006 at 2:07 pm</a>		</div>

		<p>Mnemonic. I meant mnemonic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414263">
				<div id="div-comment-414263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414263">
			August 28, 2006 at 3:03 pm</a>		</div>

		<p>A good IDE helps to write it, and a good comment helps to read:</p>
<p>ev = CreateEvent(NULL, false, false, NULL); // auto-reset, non-signaled</p>
<p>I fully agree with the notionj not to use bool unless it&#8217;s obvious &#8211; but I still have to see a language/IDE with an enum model that makes this easy.</p>
<p>It would be kinda neat to have &quot;explicit enums&quot; that don&#8217;t implicitely convert to/from int, and don&#8217;t conflict with each other when they are used in the same namespace:</p>
<p>enum EEventResetType { auto, manual };<br />
<br />enum EBookType { manual, poetry, &#8230; };</p>
<p>HANDLE CreateEvent(EEventResetTypes resetType);<br />
<br />HANDLE CreateBook(EBookType bookType);</p>
<p>CreateEvent(manual);<br />
<br />CreateBook(manual);</p>
<p>Together with an intelligent IDE this would really encourage to use enumerations instead of bools&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414283">
				<div id="div-comment-414283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://forbidden-planet.blogspot.com' rel='external nofollow' class='url'>richard</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414283">
			August 28, 2006 at 3:05 pm</a>		</div>

		<p>I find that bool is often added to a parameter list as a way of controlling the internal behaviour of the function. Consequently, I consider that either the function is too complicated, or the way it is being used is overly ambiguous.</p>
<p>While it might be nice to have a function called &quot;DoIt()&quot;, if you have to customize what DoIt() does with several bool parameters, then it is not doing one thing well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414293">
				<div id="div-comment-414293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Foolhardy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414293">
			August 28, 2006 at 3:16 pm</a>		</div>

		<p>That&#8217;s why the native function that implements CreateEvent on NT systems actually uses an enum for the event type:</p>
<p>NTSYSAPI NTSTATUS NTAPI NtCreateEvent(OUT PHANDLE EventHandle, IN ACCESS_MASK DesiredAccess, IN POBJECT_ATTRIBUTES ObjectAttributes OPTIONAL, IN EVENT_TYPE EventType, IN BOOLEAN InitialState);</p>
<p>typedef enum _EVENT_TYPE<br />
<br />{<br />
<br /> NotificationEvent,<br />
<br /> SynchronizationEvent<br />
<br />}EVENT_TYPE, *PEVENT_TYPE;</p>
<p>In my opinion, the native API is much cleaner than the wrappers Win32 provides on top of it. This is just one example.<br />
<br />The usual reason for not documenting this interface for use is that they are internal and subject to change at any time. However, the native API seems to have undergone almost no change over time&#8211; much less than Win32. Besides, kernel mode components have to use this API; changing it would break them too.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414303">
				<div id="div-comment-414303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pcooper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414303">
			August 28, 2006 at 3:21 pm</a>		</div>

		<p>I think that this is just a special case of the problem that when reading a function call it&#8217;s not immediately clear what the parameter order is. Something like MyFunction(7, 8, 12); doesn&#8217;t say much about what the parameters mean either. Perhaps something like the VB-style named parameters isn&#8217;t such a bad idea, particularly if you can get your IDE to complete the names for you&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414323">
				<div id="div-comment-414323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414323">
			August 28, 2006 at 4:07 pm</a>		</div>

		<p>&quot;Mind you, this is just my opinion. Others may disagree with me.&quot;</p>
<p>True. False.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414343">
				<div id="div-comment-414343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.noveltheory.com' rel='external nofollow' class='url'>James Curran</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414343">
			August 28, 2006 at 5:12 pm</a>		</div>

		<p>I&#8217;m a big fan of putting the boolean proprety into the name, so instead of EnableWindow(BOOL), there is EnableWindow() &amp; DisableWindow(). &nbsp;There&#8217;s a good chance two separate functions would be smaller than one big function, and if not, two inline functions redirecting to a private function taking a bool erases the difference.</p>
<p>That&#8217;s how a solved the problem of MFC&#8217;s UpdateData. &nbsp;I created a derived class which I based all my form on, which has a ToDialog() and FromDialog() methods.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414353">
				<div id="div-comment-414353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">boogie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414353">
			August 28, 2006 at 6:13 pm</a>		</div>

		<p>Avoid protos that only show a type. &nbsp;Don&#8217;t use func(bool), use func(bool die_now). &nbsp;Problem solve&#8217;ed!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414093">
				<div id="div-comment-414093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ScottR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414093">
			August 28, 2006 at 11:16 am</a>		</div>

		<p>MFC&#8217;s UpdateData is one which I *never* can remember what the (BOOL) parameter means. &nbsp;*Every* single time I use it (unless it&#8217;s a cut-and-paste) I have to look it up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414363">
				<div id="div-comment-414363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://denisbider.blogspot.com' rel='external nofollow' class='url'>denis bider</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414363">
			August 28, 2006 at 6:43 pm</a>		</div>

		<p>I very much agree with the policy of avoiding bool in function parameters. Looking up the meanings of bool parameters time and again is tedious and it obfuscates the source code, making it more difficult to analyze.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414373">
				<div id="div-comment-414373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://musingmarc.blogspot.com' rel='external nofollow' class='url'>Marc Brooks</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414373">
			August 28, 2006 at 7:15 pm</a>		</div>

		<p>Can I get an Amen? Yes, yes you can&#8230; here&#8217;s my version of the same gospel from March of 2006.<br />
<br /><a rel="nofollow" target="_new" href="http://musingmarc.blogspot.com/2006/03/sometimes-it-takes-forever-to-sink-in.html" rel="nofollow">http://musingmarc.blogspot.com/2006/03/sometimes-it-takes-forever-to-sink-in.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414383">
				<div id="div-comment-414383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414383">
			August 28, 2006 at 8:22 pm</a>		</div>

		<p>@b</p>
<p>But, at that point the compiler cannot check if a valid char was supplied, meaning that we have to rely on a runtime check only. What does &#8216;z&#8217; mean when specifying the event type? How should CreateEvent handle this?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414393">
				<div id="div-comment-414393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414393">
			August 28, 2006 at 8:38 pm</a>		</div>

		<p>[i]Monday, August 28, 2006 6:13 PM by boogie</p>
<p>Avoid protos that only show a type. &nbsp;Don&#8217;t use func(bool), use func(bool die_now). &nbsp;Problem solve&#8217;ed! [/i]</p>
<p>Um, Lauren Smith already made the same point, and I already pointed out that this is still useless on the line of code that actually [i]calls[/i] the function:</p>
<p>func(TRUE); // ???</p>
<p>Compare with using an enum, the call would read something like:</p>
<p>func(DIE_NOW);</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414403">
				<div id="div-comment-414403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jolyon Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414403">
			August 28, 2006 at 8:46 pm</a>		</div>

		<p>EnableWindow(BOOL) is only blatantly obvious if you already know that EnableWindow(BOOL) can be used to DISable a window as well as ENable it.</p>
<p>If EnableWindow(BOOL) had a partner in DisableWindow(BOOL) then the BOOL parameter might mean &quot;and all its children&quot; or &quot;and change visibility also&quot; or anything else that might make sense to do to a window when enabling it.</p>
<p>You can&#8217;t tell just by looking at EnableWindow(BOOL) whether there is a DisableWindow(BOOL).</p>
<p>So &quot;blatantly obvious&quot; actually means &quot;obvious if you know what you&#8217;re doing&quot;. &nbsp;Which applies to every other use of any type of parameter!</p>
<p>Incidentally however, I agree.</p>
<p>:)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414413">
				<div id="div-comment-414413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414413">
			August 28, 2006 at 8:50 pm</a>		</div>

		<p>[i]But, at that point the compiler cannot check if a valid char was supplied, meaning that we have to rely on a runtime check only. What does &#8216;z&#8217; mean when specifying the event type? How should CreateEvent handle this? [/i]</p>
<p>That may be, but keep in mind that with C/C++, people can always cast their way into passing &nbsp;garbage. &nbsp;So public functions like &quot;CreateEvent&quot; should do parameter validation anyway whether you used a char or a BOOL for the parameter types.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414443">
				<div id="div-comment-414443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://judahgabriel.blogspot.com' rel='external nofollow' class='url'>Judah</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414443">
			August 28, 2006 at 9:42 pm</a>		</div>

		<p>I wholeheartedly agree. </p>
<p>Another interesting tidbit here is that passing bools as parameters is generally frowned upon in the .NET framework class library, which makes it surprising to see it used in StreamReader.</p>
<p>IIRC, there&#8217;s FxCop (.NET static code analyzer for best practices) rule that recommends not using multiple boolean parameters.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-414453">
				<div id="div-comment-414453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414453">
			August 28, 2006 at 9:43 pm</a>		</div>

		<blockquote><p>
  That may be, but keep in mind that with C/C++, people can always cast their<br />
  <br />&gt; way into passing &nbsp;garbage. &nbsp;So public functions like &quot;CreateEvent&quot; should<br />
  <br />&gt; do parameter validation anyway whether you used a char or a BOOL for the<br />
  <br />&gt; parameter types.</p>
<p>Well, obviously, but that does require some effort. It only takes a mis-typed &#8216;n&#8217; instead of &#8216;m&#8217; to get an error using a char, and you don&#8217;t know until runtime what happened. If you&#8217;re going to the trouble of saying &quot;CreateEvent((EVENT_TYPE) garbage, &#8230;) to get it past the compile errors, then you&#8217;re at least doing it on purpose.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-414463">
				<div id="div-comment-414463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414463">
			August 28, 2006 at 9:46 pm</a>		</div>

		<p>Judah: Those guidelines were put in place at the time of the article I linked to above, which was after version 1 of the framework was released. You&#8217;ll notice that all new APIs in version 2 go for the &quot;use an enum over a bool when appropriate&quot; rule.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414503">
				<div id="div-comment-414503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414503">
			August 28, 2006 at 11:37 pm</a>		</div>

		<blockquote><p>
  Um, Lauren Smith already made the same<br />
  <br />&gt; point, and I already pointed out that this<br />
  <br />&gt; is still useless on the line of code that<br />
  <br />&gt; actually calls the function.</p>
<p>Even in the ancient VS 2003, hovering over the calling &quot;CreateEvent&quot; immediately gives me a tooltip with the full function declaration including variable names. Problem solved.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414513">
				<div id="div-comment-414513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414513">
			August 29, 2006 at 12:07 am</a>		</div>

		<p>[i]Even in the ancient VS 2003, hovering over the calling &quot;CreateEvent&quot; immediately gives me a tooltip with the full function declaration including variable names. Problem solved. [/i]</p>
<p>That assumes you are reading the code from a laptop in an IDE. &nbsp;You might instead receive a copy of the code on paper, or this is a code snippet posted by someone on a forum. &nbsp;(Granted, with the later you can take the trouble to copy and paste to your IDE and highlight&#8211;or you might as well just look it up.)</p>
<p>No one&#8217;s saying this is the programmer&#8217;s worst nightmare or anything. &nbsp;At the same time, with the use of enumeration constants, you won&#8217;t even need to take the effort to hover your mouse over it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414543">
				<div id="div-comment-414543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Austin Spafford</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414543">
			August 29, 2006 at 3:42 am</a>		</div>

		<p>Another thing to consider is that BOOL parameters don&#8217;t even have to be TRUE or FALSE, which can come up when a caller is messing around with flags somewhere upstream. This can lead to inefficient (but necessary) paranoia such as &quot;IS_TRUE(x) ((x) ? TRUE : FALSE)&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414573">
				<div id="div-comment-414573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414573">
			August 29, 2006 at 4:33 am</a>		</div>

		<p>Crazy talk. What about all those functions that take ints. How about (this is in C#/.NET, but the point is the same)</p>
<p>System.DateTime.DateTime(int, int, int);<br />
<br />System.DateTime.DateTime(int, int, int, int, int, int);<br />
<br />System.DateTime.DateTime(int, int, int, int, int, int, int);</p>
<p>How is that easier? If you can guess the first two prototypes, can you guess what the 7th parameter in the 3rd means?</p>
<p>What about</p>
<p>System.Windows.Forms.Control.Control(string, int, int, int, int);</p>
<p>By your arguments, we should avoid using ints as well as they&#8217;re just as meaningless!</p>
<p>Or maybe, we could just &#8230; use the documentation! That&#8217;s what it&#8217;s there for.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414593">
				<div id="div-comment-414593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">UnIntelliSense</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414593">
			August 29, 2006 at 4:56 am</a>		</div>

		<p>Do people assume IDEs with IntelliSense/AutoComplete?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414613">
				<div id="div-comment-414613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414613">
			August 29, 2006 at 6:02 am</a>		</div>

		<p>CreateEvent is a function that can create two distinct kinds of objects that have distinct behavior. I cannot imagine a situation where I would want to pass a variable (rather than a constant) into the bManualReset argument. On the other hand, with EnableWindow, imagining such a situation is quite easy (e.g. EnableWindow(hwndOk, isValidInput(&#8230;))). One might argue, then, that CreateEvent should have been two distinct factory functions — CreateAutoResetEvent and CreateManualResetEvent — or maybe CreateNotificationEvent and CreateSynchronizationEvent.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414623">
				<div id="div-comment-414623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414623">
			August 29, 2006 at 8:21 am</a>		</div>

		<blockquote><p>
  Do people assume IDEs with IntelliSense/AutoComplete?</p>
<p>I assume people would look to such for a solution before suggesting a change to the Win32 API.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414633">
				<div id="div-comment-414633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.morganalley.com' rel='external nofollow' class='url'>Dewi Morgan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414633">
			August 29, 2006 at 8:55 am</a>		</div>

		<p>About the only definitely-reasonable place to have a boolean parameter is in a SetFlag() function that sets a boolean state, where the boolean specifies the desired state and there is no unSetFlag() function.</p>
<p>I don&#8217;t feel that the readability problem is type-dependant. If you&#8217;re writing for readability, simply don&#8217;t put statics of any type into function calls.</p>
<p>Compare:</p>
<p>sql_print_table(&quot;select * from myDB.myMembersTable&quot;, true, 50, 100);</p>
<p>vs:</p>
<p>sql_print_table($listMembersSQL, $SHOW_PAGE_NAV, $pageStart, $pageEnd);</p>
<p>However, I almost never program in an IDE, and I agree that overusing booleans in function definitions damages my programming speed. Even in an IDE, if you have a function definition:</p>
<p>fn search(Str $needle, Str $haystack, Bool $case)</p>
<p>&#8230; you can&#8217;t be sure whether true means &quot;ignore case&quot; or &quot;respect case&quot;. Where there are two options, I prefer to have two functions, rather than a boolean option.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414643">
				<div id="div-comment-414643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414643">
			August 29, 2006 at 8:55 am</a>		</div>

		<p>enum bool {<br />
<br /> &nbsp; True,<br />
<br /> &nbsp; False,<br />
<br /> &nbsp; FileNotFound<br />
<br />}</p>
<p>(a nod to dailywtf <a rel="nofollow" target="_new" href="http://thedailywtf.com/forums/47844/ShowPost.aspx" rel="nofollow">http://thedailywtf.com/forums/47844/ShowPost.aspx</a> )</p>
<p>It all depends on your env I suppose&#8230; </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414663">
				<div id="div-comment-414663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.joshmcfarlane.com' rel='external nofollow' class='url'>Josh McFarlane</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414663">
			August 29, 2006 at 9:56 am</a>		</div>

		<p>&quot;That may be, but keep in mind that with C/C++, people can always cast their way into passing &nbsp;garbage. &nbsp;So public functions like &quot;CreateEvent&quot; should do parameter validation anyway whether you used a char or a BOOL for the parameter types.&quot;</p>
<p>Why exactly do you need to do parameter validation on a BOOL? If they cast some random structure into a BOOL, you still get your bits to determine which state it falls into. How do you propose validating the parameter besides eliminating negative values? This wouldn&#8217;t really harm the function, other than forcing it to be included in one of the two previous states.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414713">
				<div id="div-comment-414713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414713">
			August 29, 2006 at 10:58 am</a>		</div>

		<p>All it takes to &quot;fix&quot; this is a few #define&#8217;s, and it won&#8217;t break compatability&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414723">
				<div id="div-comment-414723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KiwiBlue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414723">
			August 29, 2006 at 11:05 am</a>		</div>

		<blockquote><p>
  How do you propose validating the parameter &gt; besides eliminating negative values?</p>
<p>Probably negative values count as TRUE in this case (and in other places where BOOLs are used &#8211; zero is FALSE and everything else is TRUE). Unless we deal with FileNotFound, of course :)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414803">
				<div id="div-comment-414803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414803">
			August 29, 2006 at 1:04 pm</a>		</div>

		<p>I&#8217;ve been thinking for a while now that it would be useful to have a language that required something like this:</p>
<p>    CreateEvent( lpEventAttributes=NULL, bManualReset=TRUE, bInitialState=FALSE, lpName=NULL ) </p>
<p>Using a editor that provided auto-completion this would be practical, and clear. &nbsp;Or just an editor that provided the names in place, so</p>
<p>    CreateEvent(NULL,TRUE,FALSE,NULL)</p>
<p>Would look like my example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414823">
				<div id="div-comment-414823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KiwiBlue</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414823">
			August 29, 2006 at 1:49 pm</a>		</div>

		<p>@John:</p>
<p>This was actually considered and rejected by C++ Standard commitee. More details in Stroustrup&#8217;s D&amp;E book.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414833">
				<div id="div-comment-414833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414833">
			August 29, 2006 at 2:00 pm</a>		</div>

		<p>My code is sprinkled with CreateEvent(0,0,0,0) and CreateEvent(0,1,0,0) depending on if I want an auto-reset or manual-reset event. Is it that bad? ;-)</p>
<p>I should probably use:<br />
<br />inline HANDLE CreateAutoResetEvent(void) { return CreateEvent(NULL,FALSE,FALSE,NULL); }<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414843">
				<div id="div-comment-414843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414843">
			August 29, 2006 at 2:24 pm</a>		</div>

		<p>[i]I assume people would look to such for a solution before suggesting a change to the Win32 API. [/i]</p>
<p>Non-sequitar. &nbsp;No one is contemplating changing an API function that&#8217;s over a decade old. &nbsp;We are merely discussing whether, if we could&#8217;ve turned back time, whether it is a change worth doing. &nbsp;Or whether we should repeat the same thing in the future.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414853">
				<div id="div-comment-414853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">reader</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414853">
			August 29, 2006 at 2:37 pm</a>		</div>

		<p>[i]Why exactly do you need to do parameter validation on a BOOL?[/i]</p>
<p>That&#8217;s a good point. &nbsp;Using the implicit C behavior of true being anything nonzero, there would no parameter validation necessary since all possible values are legal.</p>
<p>But then again, you can do the same with any primitive (non-structure) parameter types. &nbsp;The proposed char parameters can just as well have default meanings in the cases where it doesn&#8217;t match any of the expected values. &nbsp;Then you could get away with no validation, and then you&#8217;re back in the same situation where people could mix things up and get unexpected results. &nbsp;(Of course, with char&#8217;s it gets worse since there are more values that would fall under the &quot;default&quot; case.)</p>
<p>&#8212;-</p>
<p>On another note, another aspect of BOOL parameters worth noting is that if you later need to add one more, you&#8217;ll need to throw in yet another parameter. &nbsp;Whereas with enumerations or ints, you can use a bit-flag approach and simply define new flags rather than adding in another parameter.</p>
<p>Yes, I suppose you can use C++ default parameters to get around this, but then what happens when, for example, you need to pack some of the parameter data into an app-defined window message? &nbsp;The extra BOOL parameter might end up forcing you to pack the BOOLs back into a set of bitflags anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414873">
				<div id="div-comment-414873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BarryTannenbaum</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414873">
			August 29, 2006 at 3:52 pm</a>		</div>

		<p>This is why I generally write calls to system code something like:</p>
<p>&lt;code&gt;<br />
<br />hEvent = CreateEvent(NULL, &nbsp; &nbsp;// EventAttributes<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TRUE, &nbsp; &nbsp;// Manual Reset<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; FALSE, &nbsp; // Initial State<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NULL); &nbsp; // Name<br />
<br />&lt;/code&gt;</p>
<p>Unless it&#8217;s a system call that I use alot then I never remember it when I come back to it 6 months later. &nbsp;And why should I have to?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414883">
				<div id="div-comment-414883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JCMay</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414883">
			August 29, 2006 at 3:53 pm</a>		</div>

		<p>b wrote:<br />
<br />=================SNIP=================<br />
<br /> Me, I&#8217;m a fan of chars.</p>
<p>Since Enums are typically in a global name space, they rely on verbosity to remain unique, meaning that they are inevitably verbose.<br />
<br />CreateEvent(NULL, EVENTTYPE_AUTORESET, EVENTTYPE_INITIALSTATEISSOMETHING, NULL);<br />
<br />is hard to read because it&#8217;s too long, and is hard to write because you have to look up whether it&#8217;s EVENTTYPE_AUTORESET or EVENT_TYPE_AUTO_RESET or EVENTTYPE_AUTO every time.</p>
<p>So my proposed alternative,<br />
<br />CreateEvent(NULL, &#8216;a&#8217;, &#8216;s&#8217;, NULL);<br />
<br />fits onto one line, provides some pneumonic assistance, doesn&#8217;t require you to remember which direction was supposed to be zero, and doesn&#8217;t read like you&#8217;re yelling. It&#8217;s not perfect either, but I&#8217;ve found that it leads to less manual-reading for me than the inevitably verbose enums. Newbies to the function will need to check what &#8216;a&#8217; means, but after seeing it a few times, it becomes as familiar as the verbose equivalent.</p>
<p>Smart IDEs don&#8217;t help with the verbosity issue, which is why people resorted to booleans to begin with. Enums are equivalent to naming the function<br />
<br />CreateEventWhereTheFirstBooleanIsZeroWhenAutoInitializing. Your autocomplete will gladly write it out for you, but there&#8217;s a reason nobody names their functions like that.<br />
<br />=================SNIP=================</p>
<p>That might be true for C++, but C# enumerations can be tied to classes (they&#8217;re basically like const integers). I class-specific enumerations quite a bit. &nbsp;Makes things much more readable.</p>
<p>public class Foo<br />
<br />{<br />
<br /> &nbsp; &nbsp; public enum Bar<br />
<br /> &nbsp; &nbsp; {<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Asdf,<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Qwert,<br />
<br /> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Zxcv<br />
<br /> &nbsp; &nbsp; }</p>
<p> &nbsp; &nbsp; public int Operate(Bar Options)<br />
<br /> &nbsp; &nbsp; {}<br />
<br />}</p>
<p>somebody would call Operate() like</p>
<p>Foo x= new Foo();<br />
<br />x.Operate(Foo.Bar.Asdf);<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-414653">
				<div id="div-comment-414653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">/df</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414653">
			August 29, 2006 at 9:35 am</a>		</div>

		<p>@peterchen<br />
<br />&gt;ev = CreateEvent(NULL, false, false, NULL); // auto-reset, non-signaled</p>
<p>Or even</p>
<p>ev = CreateEvent( /*default security*/ NULL, /*auto-reset*/ false, /*non-signaled*/ false, /*anonymous*/ NULL);</p>
<p>It&#8217;s a simple rule that any anonymous constant should have an explanatory comment (0 and 1 when used arithmetically rather than as bit patterns and NULL/0 as a null object being possible exceptions). As a beneficial side-effect, the programmer is discouraged from using anonymous constants.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-414983">
				<div id="div-comment-414983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-414983">
			August 29, 2006 at 10:19 pm</a>		</div>

		<p>You don&#8217;t need to change the WinAPI to get the readability benefits of enums. All you need to do is update Win*.h and add an enormous number of consts or #defines:</p>
<p>#define ShowWindow_SHOW 1<br />
<br />#define ShowWindow_HIDE 0</p>
<p>Now we have [paper|intellisenseless|backwards compatible] friendly code:</p>
<p>ShowWindow(ShowWindow_Hide);</p>
<p>Doesn&#8217;t mean that any new functions should consider alternatives to Bools.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-415013">
				<div id="div-comment-415013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://devauthority.com/blogs/jwooley' rel='external nofollow' class='url'>Jim Wooley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-415013">
			August 29, 2006 at 11:02 pm</a>		</div>

		<p>You guys could just go to a real language which could allow something like the following:</p>
<p>CreateEvent(lpEventAttributes:=NULL, bManualReset:=TRUE, bInitialState:=FALSE, lpName:=NULL)</p>
<p>Oh yeah, VB/VBA has allowed this for some time and it is still valid in VB.Net. I guess a number of you are saying that VB is superior than C#/C++ after all&#8230; ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-415033">
				<div id="div-comment-415033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mailto:brentpweber@gmail.com' rel='external nofollow' class='url'>Brent</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-415033">
			August 29, 2006 at 11:21 pm</a>		</div>

		<p>I totally agree with the philosophical intent to this entry. &nbsp;Depending on what I was working on I might use defines/enums, but more likely is:</p>
<p>#define CREATE_RESET_EVENT CreateEvent(0, 1, 0, 0)</p>
<p>or even more likely…</p>
<p>#define pthread_cond_init(pobject,pattr) (*pobject=CreateEvent(NULL,FALSE,FALSE,NULL))</p>
<p>as long as this is in the source file or a private header, I dont see any problem, and now my code is readable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-415073">
				<div id="div-comment-415073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-415073">
			August 30, 2006 at 4:34 am</a>		</div>

		<p>I&#8217;m having the same problem also with int-parameters from time to time. For example I cannot remember if it&#8217;s<br />
<br />memset(buf, size, value) or memset(buf, value, size). I have to look it up every single time *sigh*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-415193">
				<div id="div-comment-415193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave Harris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-415193">
			August 30, 2006 at 10:07 am</a>		</div>

		<p>JCMay: &quot;That might be true for C++, but C# enumerations can be tied to classes (they&#8217;re basically like const integers).&quot;</p>
<p>C++ has that too. They can even be made private. The drawback is that they can&#8217;t be used unless the compiler knows that they are *not* private, which means the entire class definition has to be visible. Which leads to extra #includes in client code, which is bad for dependancy management.</p>
<p>That is, a declaration like:<br />
<br /> &nbsp; &nbsp; class CFoo;<br />
<br /> &nbsp; &nbsp; void doit( CFoo &amp;f, CFoo::Mode mode );</p>
<p>won&#8217;t compile. Some people use ints to get around this. I tend to give the class an associated namespace and rely on VC++&#8217;s non-stand forward declaration of enums feature:<br />
<br /> &nbsp; &nbsp;class CFoo;<br />
<br /> &nbsp; &nbsp;namespace Foo { enum Mode; } // Not standard C++.<br />
<br /> &nbsp; &nbsp;void doit( CFoo &amp;f, Foo::Mode mode );</p>
<p>is OK in VC++, if a bit ugly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-415543">
				<div id="div-comment-415543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Conrad</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-415543">
			August 30, 2006 at 10:17 pm</a>		</div>

		<p>@peterchen</p>
<p>I think your idea is sheer genius! In a case like (partly repeating your example):</p>
<p>enum EventType { manual, auto }<br />
<br />enum BookType { manual, novel }</p>
<p>CreateEvent(manual);<br />
<br />CreateBook(manual);</p>
<p>There is no ambiguity. The compiler would have rejected BookType.manual in the CreateEvent call, and EventType.manual in the CreateBook call. As long as the context it&#8217;s used in is unambiguous about what type is acceptable (and with strongly typed formal parameters this is a cinch) and the various enums are all disjoint types (also easy), there should be no problem.</p>
<p>I want this feature in the next hot language! I wonder if it&#8217;s too late to get it into C# 3.0? I wonder if Anders ever reads Raymond&#8217;s blog?</p>
<p>@Chris</p>
<p>Although I wouldn&#8217;t opt for chars, either, it isn&#8217;t really true that they can only be checked at runtime. All decent C compilers these days check literal printf format strings against the rest of the parameters. This could be done for CreateEvent as well.</p>
<p>You might object that the parameters might not be compile-time constants, but in this case that&#8217;s unlikely, and it&#8217;s still worth it for the compiler to do the check if it can.</p>
<p>A few people have made competing points about Intellisense vs. reading the code in a third party editor or even on paper. It leads to the question: Can you read code outside the IDE? Have we gotten to the point where our tools do so much for us that we can&#8217;t, or at least don&#8217;t want to, read code without syntax highlighting, tooltips, etc?</p>
<p>I haven&#8217;t had the experience yet of trying to hover over a function call on a piece of paper to see a tooltip, but is it just a matter of time before I do, and then curse? :)</p>
<p>@b</p>
<p>pneumonic, n. airy memory device</p>
<p>Sorry, couldn&#8217;t resist! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-415683">
				<div id="div-comment-415683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-415683">
			August 31, 2006 at 8:16 am</a>		</div>

		<blockquote><p>
  All decent C compilers these days check literal printf format strings</p>
<p>That&#8217;s because all decent C compilers these days have intimate knowledge of printf-style varargs functions, where a format string determines the rest of the arguments to the function. &nbsp;And they all understand the format-string language. &nbsp;This makes perfect sense, because printf and most of the other printf-style functions are part of the C library standard, which every C compiler must support.</p>
<p>You seem to be proposing that compilers should do the same thing for Windows-only system calls. &nbsp;But I would argue that it makes no sense at all for cygwin-gcc or mingw-gcc to have intimate knowledge of the various system call arguments available on Windows. &nbsp;Perhaps it&#8217;s possible, but I don&#8217;t think adding more code to every compiler to handle each system call that&#8217;s implemented this way on just one system makes any sense.</p>
<p>Especially considering how often gcc is used under Cygwin/MingW versus how often it&#8217;s used under other operating systems.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-415703">
				<div id="div-comment-415703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://adaptivity.nl/blog/?p=8' rel='external nofollow' class='url'>Just a Life &raquo; Blog Archive &raquo; Boolean usage</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-415703">
			August 31, 2006 at 9:14 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://adaptivity.nl/blog/?p=8" rel="nofollow">http://adaptivity.nl/blog/?p=8</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-416243">
				<div id="div-comment-416243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-416243">
			September 2, 2006 at 11:08 am</a>		</div>

		<p>@David Conrad<br />
<br />I think this is exactly how the Pascal handles enum types.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-417293">
				<div id="div-comment-417293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-417293">
			September 6, 2006 at 11:26 pm</a>		</div>

		<p>John, Jim: You&#8217;ll see keyword argument passing in Python and a few other languages out there, not just VBA.</p>
<p>In truth I don&#8217;t find it particularly useful most of the time. Its primary utility is when I have a function with a number of default parameters and I want to only override (eg) the third. Rather than having to specify the first and second anyway, I can just call the function with the named third argument.</p>
<p>In Python (a dynamically typed language) it&#8217;s also quite handy for what&#8217;s essentially varargs with a hash table. Like creating, populating, and passing a std::map parameter but much simpler and more convenient.</p>
<p>Using keyword arguments to enhance readability of otherwise ambiguous function calls is still nice, though.</p>
<p>All this reminds me &#8211; IronPython just went 1.0 so you can use Python with .NET. It might be of interest to some here.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-418593">
				<div id="div-comment-418593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Igor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-418593">
			September 10, 2006 at 11:13 pm</a>		</div>

		<p>It is bad to have to remember what BOOL does but IMO it is worse when you have to deal with functions which can return HANDLE, NULL and some &quot;special&quot; value to signal equally &quot;special&quot; error.<br />
<br />Also, many people do not know that built-in type &quot;bool&quot; generates safety check code for each conditional test to determine if the value is one of &quot;true&quot; or &quot;false&quot; so using built-in type slows the code down.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-490223">
				<div id="div-comment-490223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.red-sweater.com/blog/316/coding-for-readability' rel='external nofollow' class='url'>Red Sweater Blog - Coding For Readability</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20060828-18/?p=29953#comment-490223">
			April 6, 2007 at 11:23 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.red-sweater.com/blog/316/coding-for-readability" rel="nofollow">http://www.red-sweater.com/blog/316/coding-for-readability</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

