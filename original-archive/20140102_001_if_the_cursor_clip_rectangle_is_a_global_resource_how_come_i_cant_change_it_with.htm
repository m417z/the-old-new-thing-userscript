<html>
<head>
<title>If the cursor clip rectangle is a global resource, how come I can't change it with ClipCursor?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If the cursor clip rectangle is a global resource, how come I can&#8217;t change it with ClipCursor?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 2, 2014 / year-entry #2</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that the Clip­Cursor function was not working. "The cursor clip rectangle is a shared global resource, so I should be able to change it any time I like. My app installs a global mouse hook and sets the clip cursor inside the hook function, but the change doesn't have any effect. Why...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer reported that the <code>Clip&shy;Cursor</code> function was not working. "The cursor clip rectangle is a shared global resource, so I should be able to change it any time I like. My app installs a global mouse hook and sets the clip cursor inside the hook function, but the change doesn't have any effect. Why can't I change the clip cursor inside a mouse hook?"</p>
<p> Sure, you can change the clip cursor inside a mouse hook. But remember, a shared global resource cuts both ways. Since anybody can change it, your app can change it any time it likes. But since anybody can change it, <i>another app can also change it any time they like</i>. </p>
<p> In this case, what's happening is that your hook comes in and sets the clip rectangle. And the application gets the mouse message and passes it to <code>Def&shy;Window&shy;Proc</code>, and the default behavior for focus changes is to clear the clip rectangle so that any clip rectangle set by the previous window doesn't spill over into the new focus window. </p>
<p> The convention for the clip rectangle is that the focus window (perhaps after some negotiation with one of its ancestors) controls the clip rectangle. </p>
<p> This convention is not enforced for a few reasons. First of all,  you can't programmatically determine whether code is executing on behalf of any particular window. Even if you say "can be called only during the handling of a message", that doesn't prove that the code is associated with the window. The message handler might call into some other component, and that other component might decide to clip the cursor just because. </p>
<p> Another reason the rule isn't enforced is that the clip cursor was invented back in the day when programmers were trusted to do the right thing. The theory was that preventing people from doing sneaky things would also prevent them from doing clever things. </p>
<p> (Nowadays, the API design philosophy prefers to prevent people from doing sneaky things, even though it also prevents them from doing clever things, because the bad guys are sneakier than the good guys are clever.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1097303">
				<div id="div-comment-1097303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183#comment-1097303">
			January 2, 2014 at 9:06 am</a>		</div>

		<p>I like to think it&#39;s because the consequences of the bad guy&#39;s sneakiness outweighs the benefits of good guys&#39; cleverness.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1097323">
				<div id="div-comment-1097323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183#comment-1097323">
			January 2, 2014 at 10:22 am</a>		</div>

		<p>@Steve Wolf</p>
<p>I like to think it is because we&#39;ve had a societal shift away from &quot;give me liberty or give me death&quot; to &quot;I&#39;ll give you anything you want if you promise you&#39;ll never let anything bad happen.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1097383">
				<div id="div-comment-1097383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183#comment-1097383">
			January 2, 2014 at 2:46 pm</a>		</div>

		<p>@Anon I would attribute it more to practicality. In the old days computers just weren&#39;t powerful enough to include all these new-fangled safeguards and people were happy to use systems that easily bluescreened, corrupted data and what else. Also without the internet readily available there just weren&#39;t that many sources of maliciousness around to worry about.</p>
<p>The whole world has changed extremely since then and it makes perfect sense to change your priorities based on this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1097513">
				<div id="div-comment-1097513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183#comment-1097513">
			January 4, 2014 at 4:06 am</a>		</div>

		<p>i just want to know why anybody needs ClipCursor.</p>
<p>that sudden mouse behavior just looks like a bug to the user</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1097583">
				<div id="div-comment-1097583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183#comment-1097583">
			January 5, 2014 at 2:18 am</a>		</div>

		<p>&gt;&gt; First of all, you can&#39;t programmatically determine whether code is executing on behalf of any particular window.</p>
<p>Kernel always knows which process makes an api call, and can prevent that. This will be a future version of windows for sure. + backward compat shims.</p>
<div class="post">[<em>You know what thread is issuing the request, but since multiple windows can live on a single thread, you don&#39;t know which window. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1097903">
				<div id="div-comment-1097903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183#comment-1097903">
			January 6, 2014 at 8:41 pm</a>		</div>

		<p>Kernel knows if the process/thread owns the focused window.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1097913">
				<div id="div-comment-1097913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140102-00/?p=2183#comment-1097913">
			January 6, 2014 at 8:43 pm</a>		</div>

		<p>&#8230;kernel doesn&#39;t need to know which particular window it was, kernel should only prevent other threads which doesn&#39;t own the focused window to tamper with the clip region.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

