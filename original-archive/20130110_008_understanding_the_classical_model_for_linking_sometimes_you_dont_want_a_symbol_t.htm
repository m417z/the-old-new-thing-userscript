<html>
<head>
<title>Understanding the classical model for linking: Sometimes you don't want a symbol to come along for a ride</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Understanding the classical model for linking: Sometimes you don&#8217;t want a symbol to come along for a ride</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 10, 2013 / year-entry #9</td></tr>
<tr><td><b>Tags:</b></td><td>code;linker</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130110-00/?p=5593</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Continuing our study of the classical model for linking, let's take another look at the trick of taking symbols along for the ride. The technique of taking symbols along for the ride is quite handy if that's what you want, but sometimes you don't actually want it. For example, a symbol taken along for the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Continuing our study of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/07/10382714.aspx">
the classical model for linking</a>,
let's take another look at the trick of
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/01/08/10383017.aspx">
taking symbols along for the ride</a>.
</p>
<p>
The technique of taking symbols along for the ride is quite handy
if that's what you want,
but sometimes you don't actually want it.
For example, a symbol taken along for the ride may create
conflicts or create unwanted dependencies.
</p>
<p>
Here's an example:
Suppose you have a library called <code>stuff.lib</code>
where you put functions that are
used by various modules in different projects.
One of the files in your library might look like this:
</p>
<pre>
// filedatestuff.cpp

BOOL GetFileCreationTimeW(
        LPCWSTR pszFile,
        FILETIME *pft)
{
    WIN32_FILE_ATTRIBUTE_DATA wfad;
    BOOL fSuccess = GetFileAttributesExW(pszFile,
                             GetFileExInfoStandard,
                             &amp;wfad);
    if (fSuccess) {
        *pft = wfad.ftCreationTime;
    } else {
        pft-&gt;dwLowDateTime = 0;
        pft-&gt;dwHighDateTime = 0;
    }
    return fSuccess;
}

BOOL GetFileCreationTimeAsStringW(
         LPCWSTR pszFile,
         LPWSTR pszBuf,
         UINT cchBuf)
{
    FILETIME ft;
    BOOL fSuccess = GetFileCreationTimeW(pszFile, &amp;ft);
    if (fSuccess) {
        fSuccess = SHFormatDateTimeW(&amp;ft, NULL,
                                     pszBuf, cchBuf) > 0;
    }
    return fSuccess;
}
</pre>
<p>
Things are working out great,
people like the helper functions in your library,
and then you get a bug report:
</p>
<blockquote CLASS=q><p>
When my program calls the
<code>Get&shy;File&shy;Creation&shy;TimeW</code>
function,
I get a linker error:
<tt>unresolved external: __imp__<wbr>SHFormat&shy;Date&shy;TimeW</tt>.
If I remove my call to 
<code>Get&shy;File&shy;Creation&shy;TimeW</code>,
then my program builds fine.
</p>
</blockquote>
<p>
You scratch your head.
"The program is calling
<code>Get&shy;File&shy;Creation&shy;TimeW</code>,
but that function doesn't call
<code>SHFormat&shy;Date&shy;TimeW</code>,
so why are we getting an unresolved external error?
Any why hasn't anybody else run into this problem before?"
</p>
<p>
First question first.
Why are we getting an unresolved external error
for a nonexistent external dependency?
</p>
<p>
Because the
<code>Get&shy;File&shy;Creation&shy;Time&shy;As&shy;StringW</code>
function got <i>taken along for the ride</i>.
When the customer's program called
<code>Get&shy;File&shy;Creation&shy;TimeW</code>,
that pulled in the <code>filedatestuff.obj</code> file,
and that OBJ file contains both
<code>Get&shy;File&shy;Creation&shy;TimeW</code>
<i>and</i>
<code>Get&shy;File&shy;Creation&shy;Time&shy;As&shy;StringW</code>.
Since they are in the same OBJ file,
pulling in one function pulls in all of them.
</p>
<p>
The fix is to split the <code>filedatastuff.cpp</code> file
into two files,
one for each function.
That way, when you pull in one function,
nobody else comes along for the ride.
</p>
<p>
Now to the second half of the question:
Why did nobody run into this problem before?
</p>
<p>
The
<code>Get&shy;File&shy;Creation&shy;TimeW</code>
function has a dependency on
<code>Get&shy;File&shy;Attributes&shy;ExW</code>,
which is a function in <code>KERNEL32.DLL</code>.
On the other hand, the
<code>Get&shy;File&shy;Creation&shy;Time&shy;As&shy;StringW</code>
function has a dependency on
<code>SHFormat&shy;Date&shy;TimeW</code>,
which is a function in
<code>SHLWAPI.DLL</code>.
If somebody lists
<code>KERNEL32.LIB</code> as a dependent library
in their project,
but they don't include
<code>SHLWAPI.LIB</code> on that list,
then they will encounter this problem
because the linker will pull in the reference to
<code>SHFormat&shy;Date&shy;TimeW</code>
and have no way of resolving it.
</p>
<p>
Nobody ran into this before because <code>SHLWAPI.LIB</code>
has lots of cute little functions in it,
so most people include it in their project.
Only if somebody is being frugal and leaving
<code>SHLWAPI.LIB</code> out of their project
will they run into this problem.
</p>
<p>
<b>Bonus chatter</b>:
The suggestion to split the file into two will work,
but if you are really clever, you can still do some consolidation.
Instead of splitting up files by functional group
(for example, "all <code>FILETIME</code> functions"),
you need to split them up based on their dependencies
("functions that are dependent solely on <code>SHLWAPI.LIB</code>").
Of course, this type of organization may make the code harder
to follow ("Why did you put
<code>Get&shy;File&shy;Creation&shy;Time&shy;As&shy;StringW</code>
and
<code>Hash&shy;String</code>
in the same file?"),
so you have to balance this against maintainability and
readability.
For example, somebody who is not aware of the classical
model for linking may add a function to the file that has
a dependency on <code>SHELL32.DLL</code>,
and now your careful separation has fallen apart.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1032313">
				<div id="div-comment-1032313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130110-00/?p=5593#comment-1032313">
			January 10, 2013 at 8:13 am</a>		</div>

		<p>What are the consequences of splitting up libraries into one symbol per object file with regards to linking times? &nbsp;In other words, is it going to take significantly longer to link N*M object files of one symbol each vs. N object files with M symbols each? &nbsp;Have any studies been done on this? &nbsp;Obviously, this depends on a lot of factors like total symbol size, the topology of the symbol dependency graph, etc., but I&#39;d be interested if any generalized conclusions could be drawn given reasonable assumptions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032323">
				<div id="div-comment-1032323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130110-00/?p=5593#comment-1032323">
			January 10, 2013 at 8:15 am</a>		</div>

		<p>@Adam Rosenfield: In the classical model, really long compile times. We now have /Gy (or is it something else) that fixes it by allowing .OBJ files to be broken up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032333">
				<div id="div-comment-1032333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130110-00/?p=5593#comment-1032333">
			January 10, 2013 at 8:20 am</a>		</div>

		<p>Function level linking to the rescue?</p>
<div class="post">[<em>Nope. We&#39;ll see more about this tomorrow. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032343">
				<div id="div-comment-1032343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130110-00/?p=5593#comment-1032343">
			January 10, 2013 at 12:16 pm</a>		</div>

		<p>I don&#39;t like the suggestion for consolidation based on dependencies. &nbsp;Under that model, what seem like minor edits to a function would require it to be moved from file to file if the dependencies are changed. &nbsp;Some source-code control systems do not preserve edit history in that case. &nbsp;Also, if multiple programmers make edits to a function that require it to be moved to different files, merging these edits can be problematic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1032353">
				<div id="div-comment-1032353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130110-00/?p=5593#comment-1032353">
			January 10, 2013 at 1:01 pm</a>		</div>

		<p>@Bob: Haven&#39;t you seen #ifdef abused to break source files into multiple object files? I have.</p>
<p>Filler text to get past spam filter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1032393">
				<div id="div-comment-1032393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/peiyongpeng_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>peiyongpeng@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130110-00/?p=5593#comment-1032393">
			January 10, 2013 at 5:45 pm</a>		</div>

		<p>受益匪浅(I&#39;ve got a lot from your blog!),谢谢(thanks)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-1033393">
				<div id="div-comment-1033393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130110-00/?p=5593#comment-1033393">
			January 16, 2013 at 10:45 am</a>		</div>

		<p>From memory, shlwapi.lib is one of the many libraries that are included by default in a Visual C++ project from about VC 6.0 onwards. Another version of coming along for the ride rather than anyone really planning to include it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

