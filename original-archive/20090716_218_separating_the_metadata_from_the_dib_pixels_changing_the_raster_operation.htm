<html>
<head>
<title>Separating the metadata from the DIB pixels: Changing the raster operation</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Separating the metadata from the DIB pixels: Changing the raster operation</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 16, 2009 / year-entry #219</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090716-00/?p=17463</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">For a few days now, we've used the SetDIBitsToDevice function in conjunction with a precomputed BITMAPINFO to draw a DIB with an alternate color table without modifying the HBITMAP. The SetDIBitsToDevice function operates like a BitBlt with raster operation SRCCOPY. If you want another raster operation, you can use StretchDIBits, which has a final raster...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
For a few days now, we've
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/07/14/9832544.aspx">
used the <code>SetDIBitsToDevice</code> function
in conjunction with a precomputed <code>BITMAPINFO</code>
to draw a DIB with an alternate color table</a>
without modifying the <code>HBITMAP</code></a>.
</p>
<p>
The <code>SetDIBitsToDevice</code> function operates like
a <code>BitBlt</code> with raster operation <code>SRCCOPY</code>.
If you want another raster operation, you can use
<code>StretchDIBits</code>, which has a final raster operation parameter.
Despite its name, you don't have to stretch with <code>StretchDIBits</code>.
Just pass a source and destination of equal size, and you've performed
a NOP stretch, but you get the benefit of the raster operation.
</p>
<pre>
void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
 if (g_pvBits) {
    <font COLOR=blue>StretchDIBits</font>(pps-&gt;hdc, 0, 0,
                      g_bmiGray.bmiHeader.biWidth,
                      g_bmiGray.bmiHeader.biHeight, 0, 0,
                      <font COLOR=blue>g_bmiGray.bmiHeader.biWidth,
                      g_bmiGray.bmiHeader.biHeight,</font>
                      g_pvBits,
                     (BITMAPINFO*)&amp;g_bmiGray, DIB_RGB_COLORS,
                      <font COLOR=blue>NOTSRCCOPY</font>);
 }
}
</pre>
<p>
I changed the call from <code>SetDIBitsToDevice</code>
to <code>StretchDIBits</code>,
setting the source and destination rectangles to the same size
(so no actual stretching occurs),
and specifying a raster operation of <code>NOTSRCCOPY</code>
so the result on screen is a negative grayscale.
</p>
<p>
Some people may object to performing a stretch operation
and requesting no stretching, but that's perfectly fine.
At least in this case, GDI is not stupid.
If you ask it to perform a stretch operation
but pass parameters that don't do any stretching, it will
optimize this to a non-stretching operation.
You don't need to hand-optimize it.
Instead of writing
</p>
<pre>
if (cxSrc == cxDst &amp;&amp; cySrc == cyDst) {
 BitBlt(hdc, xDst, yDst, cxDst, cyDst,
        hdcSrc, xSrc, ySrc, dwRop);
} else {
 StretchBlt(hdc, xDst, yDst, cxDst, cyDst,
            hdcSrc, xSrc, ySrc, cxSrc, cySrc, dwRop);
}
</pre>
<p>
... just go straight to the <code>StretchBlt</code>:
</p>
<pre>
StretchBlt(hdc, xDst, yDst, cxDst, cyDst,
           hdcSrc, xSrc, ySrc, cxSrc, cySrc, dwRop);
</pre>
<p>
The <code>StretchBlt</code> function will convert the
operation to a <code>BitBlt</code> if <code>cxSrc == cxDst</code>
and <code>cySrc == cyDst</code>.
You don't have to hand-optimize it.
The GDI folks hand-optimized it for you.
</p>
<p>
(In fact, for a long time,
the <code>SetDIBitsToDevice</code> function simply called
<code>StretchDIBits</code>, saying that the input and
output rectangles were the same size,
and <code>StretchDIBits</code> detected the absence of stretching
and used an optimized code path.
Consequently,
"optimizating" the code by calling
<code>SetDIBitsToDevice</code>
was actually a pessimization.)</p>
<p>
Back to <code>StretchDIBits</code>.
So far, we've been drawing the entire bitmap at the upper left
corner of the destination device context.
The last remaining feature of <code>BitBlt</code> is
the ability to draw a rectangular chunk of a source bitmap
at a destination location,
so let's do that.
We'll draw the bottom right corner of the bitmap in
the bottom right corner of the window,
with negative colors,
and <i>just to show we can</i>, we'll also stretch it.
</p>
<pre>
void
PaintContent(HWND hwnd, PAINTSTRUCT *pps)
{
 if (g_pvBits) {
  <font COLOR=blue>RECT rc;
  GetClientRect(hwnd, &amp;rc);
  int cxChunk = g_bmiGray.bmiHeader.biWidth / 2;
  int cyChunk = g_bmiGray.bmiHeader.biHeight / 2;
  StretchDIBits(pps->hdc, rc.right - cxChunk * 2,
                rc.bottom - cxChunk * 2,
                cxChunk * 2, cyChunk * 2,
                g_bmiGray.bmiHeader.biWidth - cxChunk,
                g_bmiGray.bmiHeader.biHeight - cyChunk,
                cxChunk, cyChunk,
                g_pvBits, (BITMAPINFO*)&g_bmiGray,
                DIB_RGB_COLORS, NOTSRCCOPY);</font>
 }
}
</pre>
<p>
So far, we've been operating on DIB pixels that are
held inside a DIB section.
But there's no requirement that the bits passed to
<code>StretchDIBits</code> come from an actual DIB section.
We'll look at the total disembodiment of DIBs next time,
as well as looking at some unexpected consequences of all our game-playing.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-755633">
				<div id="div-comment-755633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090716-00/?p=17463#comment-755633">
			July 16, 2009 at 1:44 pm</a>		</div>

		<p>&#8216;Consequently, &quot;optimizating&quot; the code by calling SetDIBitsToDevice was actually a pessimization.&#8217;</p>
<p>Was the misspelling of &#8216;optimizing&#8217; here intentional? &nbsp;I think we have a new word for point-missing micro-optimization.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-755643">
				<div id="div-comment-755643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090716-00/?p=17463#comment-755643">
			July 16, 2009 at 2:05 pm</a>		</div>

		<p>Optimizating is a perfectly cromulent word.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-755663">
				<div id="div-comment-755663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">edgar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090716-00/?p=17463#comment-755663">
			July 16, 2009 at 4:55 pm</a>		</div>

		<p>The GDI.</p>
<p>Where does it come from in 1985 ?</p>
<p>Who was the designer or team ?</p>
<p>I remember the OS/2 GDI. It was similar, but better structured.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-755683">
				<div id="div-comment-755683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090716-00/?p=17463#comment-755683">
			July 16, 2009 at 6:17 pm</a>		</div>

		<p>@edgar:</p>
<p>The GDI, or to be precise, the Global Defense Initiative, was formed in 1995 primarily as a response to the threat the Brotherhood of Nod imposed on the United Nations and the world.</p>
<p>Check Wikipedia for more detailed information about our global protectors.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

