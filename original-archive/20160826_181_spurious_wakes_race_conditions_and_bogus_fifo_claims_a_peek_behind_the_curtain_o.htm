<html>
<head>
<title>Spurious wakes, race conditions, and bogus FIFO claims: A peek behind the curtain of WaitOnAddress</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Spurious wakes, race conditions, and bogus FIFO claims: A peek behind the curtain of WaitOnAddress</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 26, 2016 / year-entry #182</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Watch the gears turn.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We spent the past few days looking at the
<code>Wait&shy;On&shy;Address</code> function.
Today we're going to peek behind the curtain.
</p>
<p>
<b>Reminder</b>:
These are undocumented implementation details
and are subject to change at any time.
The information is presented here for
educational purposes.
Do not take dependencies on the implementation.&sup1;
</p>
<p>
Okay, let's go.
</p>
<p>
The general idea behind the implementation of
the <code>Wait&shy;On&shy;Address</code> function
is that all of the threads that have an outstanding
<code>Wait&shy;On&shy;Address</code> call
are kept on a lock-free hash table,
keyed by the address.
Once the thread adds itself to the hash table,
the thread calls
an internal kernel function to
go to sleep.
</p>
<p>
When one of the <code>Wake&shy;By&shy;Address</code>
functions is called,
it searches the hash table looking for any threads
that are waiting for the address,
and either wakes one or all of them
by removing the corresponding hash table entry
and calling an internal kernel function to
snap the thread out of its stupor.
</p>
<p>
From this rough description, you can see
a few race conditions.
For example, what if the monitored address
contains the undesirable value at the entry
to the <code>Wait&shy;On&shy;Address</code>
function,
while the thread was adding itself to the hash table,
another thread changed the value and called
<code>Wake&shy;By&shy;Address</code>?
Since the waking thread didn't see the hash
table entry, it didn't see anybody to wake up.
Meanwhile, the first thread finishes adding the
entry to the hash table and goes to sleep,
but it's too late.
The thread that performed the wake operation
didn't see anybody to wake,
and the waiting thread waits forever.
</p>
<p>
To solve this problem,
the
<code>Wait&shy;On&shy;Address</code>
function adds the thread to the hash table,
and then re-checks whether the value at the
address is equal to the undesirable value.
If not, then the
<code>Wait&shy;On&shy;Address</code> skips
the wait entirely,
thereby avoiding the problem of entering a wait
that will never be woken.
</p>
<p>
Even with this fix, there's still a race condition:
What if the re-check says that the value at the
address is equal to the undesirable value,
but just before the thread is about to call
the internal kernel function,
it gets pre-empted,
and another thread issues the corresponding wake.
The waiting thread is in the hash table,
so the waking thread will ask the kernel to wake
the waiting thread,
but the waiting thread <i>isn't waiting yet</i>,
so the wake request has no effect.
The waiting thread then enters the kernel and goes
to sleep, never to be woken.
</p>
<p>
To solve this second race condition,
the kernel steps in to assist.
When the waiting thread goes to sleep,
it also gives the kernel the address that
it's waiting for.
Similarly, when the waking thread wants
to wake up the waiting thread,
it gives the kernel the identity of the
thread to wake up as well as the address
that is being woken.
If the wake call arrives but the thread
is not waiting on an address,
then the kernel remembers the address for that thread.
When the thread finally gets around to
waiting on the address,
the kernel says,
"Oh, hey, there's a wake waiting for you."
</p>
<p>
This wake buffer is only one entry deep.
If you try to wake a non-waiting thread twice,
only the most recent wake request will be remembered.
But that's okay, because the way that
<code>Wait&shy;On&shy;Address</code> works,
it never needs anything but the most recent
wait request to be buffered.
</p>
<p>
This last race condition does explain one of
the cases of a spurious wake:
Suppose a thread calls
<code>Wait&shy;On&shy;Address</code>,
and after it adds the node to the hash table,
another thread wakes the thread by address.
Since the thread hasn't entered the kernel yet,
the wake request is buffered.
But now the thread re-checks the address and
sees that the value is not the undesirable
value,
so the wait is skipped entirely,
and control returns to the caller.
</p>
<p>
But the wake is still buffered.
</p>
<p>
That same thread then calls
<code>Wait&shy;On&shy;Address</code> for the
same address.
This time, it adds the node to the hash table,
no race condition occurs,
and the thread enters the kernel to wait.
The kernel thinks that this second wait is
the race condition from the first call to
<code>Wait&shy;On&shy;Address</code>,
so it completes the wait immediately.
"Hey, while you were busy setting up the wait,
somebody already woke you."
</p>
<p>
Result: Spurious wake.
</p>
<p>
Another note about spurious wakes:
There's nothing preventing an unrelated
component from calling
<code>Wake&shy;By&shy;Address</code>
on the same address.
And as we noted earlier,
there's also the possiblity that the
value changed back to the undesirable
value after the thread was woken.
Therefore, spurious wakes are unavoidably
just the way things are,
and your code needs to be able to handle them.
Even if there were a way to clear the buffered
wake from the kernel, applications still have
to deal with spurious wakes for other reasons.
</p>
<p>
My final note for today is a response to
<a HREF="https://msdn.microsoft.com/en-us/library/windows/desktop/hh706900(v=vs.85).aspx">
the documentation for
<code>Wake&shy;By&shy;Address&shy;Single</code></a>
which says
</p>
<blockquote CLASS=q><p>
If multiple threads are waiting for this address,
the system wakes the first thread to wait.
</p>
</blockquote>
<p>
This is one of those times where the documentation
starts documenting the implementation rather than the contract.
My guess is that the current implementation wakes waiters FIFO,
and somehow that got into the documentation without a clear
indication that this is a descriptive statement rather than
a normative one.
</p>
<p>
What's more, it's not even accurate.
The presence of spurious wakes means that
the order in which code calls
<code>Wait&shy;On&shy;Address</code>
may not match the order in which they remain
in the queue,
because a spurious wake takes a thread out of the queue,
and then it re-enters the queue at the end.
(<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20050105-00/?p=36803">Sound
familiar</a>?)
And who knows, a future version of
<code>Wait&shy;On&shy;Address</code>
may choose to dispense with FIFO waking in order
to add convoy resistance.
</p>
<p>
Okay, that's enough discussion of
<code>Wait&shy;On&shy;Address</code>
for now.
</p>
<p>
&sup1;
Mind you, this warning didn't stop people from
snooping in on the internals of the
<code>CRITICAL_<wbr>SECTION</code> structure.
As a result, the
<code>CRITICAL_<wbr>SECTION</code> structure
must continue to use an automatic-reset event,
use <code>-1</code> to indicate an unowned
critical section.
This
<a HREF="http://joeduffyblog.com/2006/11/28/windows-keyed-events-critical-sections-and-new-vista-synchronization-features/">
prevented the kernel team from switching
to a keyed event for critical sections</a>.
And even though the internal bookkeeping has changed,
and the <code>Lock&shy;Count</code> is no longer the lock count,
the implementation must nevertheless go through contortions
to ensure that
the value of <code>Lock&shy;Count</code> is <code>-1</code>
precisely when the critical section is unowned.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1262335">
				<div id="div-comment-1262335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262335">
			August 26, 2016 at 8:12 am</a>		</div>

		<p>I suppose the kernel could create a new critical section with a new implementation and new macros to declare them?</p>
<p>(Plus, with the advent of IoT, eventually, the kernel folks will be able to send zaps to the offending coders.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com0003bffda225a672 odd alt thread-odd thread-alt depth-1 parent" id="comment-1262345">
				<div id="div-comment-1262345" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/jnm236' rel='external nofollow' class='url'>jnm236</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262345">
			August 26, 2016 at 8:29 am</a>		</div>

		<p>Just curious- what&#8217;s the main reason Microsoft tries to shield users of software from the intentional bad decisions of the software writers like depending on undocumented features with no fallback?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1262355">
				<div id="div-comment-1262355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262355">
			August 26, 2016 at 8:44 am</a>		</div>

		<p>Many times on this blog: because you tend to depend on third party libraries that do it wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1262365">
				<div id="div-comment-1262365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kemp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262365">
			August 26, 2016 at 9:01 am</a>		</div>

		<p>Because when MS change the implementation in a non-backward-compatible way and the software no longer works the users (at big companies with expensive licenses) aren&#8217;t going to think &#8220;oh, the software must have been breaking the rules, we&#8217;ll find a new vendor now&#8221;, they&#8217;ll think &#8220;Windows sucks, the upgrade broke all our software, we&#8217;d better tell everyone not to upgrade&#8221;. Even if you could convince them it&#8217;s not Windows&#8217; fault they *still* can&#8217;t upgrade because their software is still broken. The truth will not set them free.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-dwalker-wk even depth-3" id="comment-1262485">
				<div id="div-comment-1262485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262485">
			August 29, 2016 at 7:33 am</a>		</div>

		<p>&#8220;The truth will not set them free.&#8221;  That&#8217;s one of the best explanations of this phenomenon I have ever heard!  </p>
<p>Even if (or when) the users fully understand that they can&#8217;t upgrade to a newer version of Windows *because* of bad decisions made by the ISVs, if their line-of-business software can&#8217;t handle an upgrade, then the users STILL cannot upgrade.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1262385">
				<div id="div-comment-1262385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262385">
			August 26, 2016 at 1:10 pm</a>		</div>

		<p>Not to mention the flood lawsuits that would be generated accusing Microsoft of deliberately breaking compatibility for anticompetitive reasons.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1262395">
				<div id="div-comment-1262395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262395">
			August 26, 2016 at 1:14 pm</a>		</div>

		<p>And before you say &#8220;But it is the ISVs that screwed up!&#8221; &#8211; yes, we know that. But will a jury understand that? Is it worth the costs of litigating and bad publicity?</p>
<p>Smarter for Microsoft and better for end users to just deal with the compat hacks.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1262445">
				<div id="div-comment-1262445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262445">
			August 28, 2016 at 6:48 am</a>		</div>

		<p>Even ignoring large corporations or assigning blame, if everything works fine in Windows n and half your programs break with Windows N+1 are you going to upgrade to the newest windows release?</p>
<p>I certainly wouldn&#8217;t without good reason and as vista demonstrated there&#8217;s many people out there who are fine with an older OS version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1263585">
				<div id="div-comment-1263585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Gilbert</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1263585">
			September 4, 2016 at 5:20 pm</a>		</div>

		<p>One possible solution: When introducing a new feature, implement its underlying data storage two different ways from the very beginning. Each time e.g. InitializeCriticalSection is called, it picks one at random. With each Windows upgrade, replace one of the two possible data storage layouts. Document that you will do this. Do not document the layouts themselves. If this were done across the board, it would become common knowledge that you can&#8217;t depend on the underlying storage of system structures documented as opaque. The only question is, is that extra work (and extra bit/byte of storage in the data structures) worth the gain? I personally have to lean toward, &#8220;Probably, yes&#8221; :-) Having developers that don&#8217;t respect boundaries clearly makes a *big* difference to what you can and can&#8217;t do as the OS evolves.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3" id="comment-1263826">
				<div id="div-comment-1263826" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1263826">
			September 6, 2016 at 8:37 am</a>		</div>

		<p>Back in the early days, developers were keenly sensitive to the number of cycles it took to perform an EnterCriticalSection. Articles were written about how few cycles it took to enter an uncontended lock. Adding an additional test and branch would have caused people to freak out.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1262425">
				<div id="div-comment-1262425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Barrell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262425">
			August 27, 2016 at 10:36 am</a>		</div>

		<p>Thank you for the explanation. The POSIX threads standard has a similar caveat that implementations are permitted spurious wakeups when sleeping on condition variables. I previously had no idea why. Your write up here illuminates why the pthreads standard&#8217;s authors too would have felt the need to allow spurious wakeups from condvars.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1262475">
				<div id="div-comment-1262475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ariel Ben-Yehuda</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262475">
			August 29, 2016 at 5:12 am</a>		</div>

		<p>So WaitOnAddress is implemented half in userspace and half in kernelspace, unlike Linux&#8217;s similar futex(2) API?</p>
<p>The futex(2) implementation inserts itself to the hash table and checks for waiters within the kernel, so this kind of spurious wakeup should not happen.</p>
<p>However:<br />
    1) typically, you have to check your condition again under a lock, so spurious wakeups do not matter.<br />
    2) signals still &#8220;spuriously&#8221; wake you up.<br />
    3) there is the self-synchronized destruction problem.</p>
<p>The self-synchronized destruction problem has several variants, most classically appears when a refcount is protected by a lock. Suppose that `obj` is owned by 2 threads, with a refcount of 2, and both execute the code</p>
<p>&#8220;`<br />
    lock(&amp;obj-&gt;lock);<br />
    if(&#8211;obj-&gt;refcount) {<br />
        unlock(&amp;obj-&gt;lock);<br />
    } else {<br />
        unlock(&amp;obj-&gt;lock);<br />
        free(obj);<br />
    }<br />
&#8220;`</p>
<p>If `unlock` is inlined, this becomes</p>
<p>&#8220;`<br />
    lock(&amp;obj-&gt;lock);<br />
    if(&#8211;obj-&gt;refcount) {<br />
        obj-&gt;lock = LOCK_UNLOCKED;<br />
        WakeByAddressSingle(&amp;obj-&gt;lock);<br />
    } else {<br />
        obj-&gt;lock = LOCK_UNLOCKED;<br />
        WakeByAddressSingle(&amp;obj-&gt;lock);<br />
        free(obj);<br />
    }<br />
&#8220;`</p>
<p>And execution can progress as<br />
&#8220;`<br />
thread 0:<br />
    lock(&amp;obj-&gt;lock);<br />
    if(&#8211;obj-&gt;refcount) {<br />
        obj-&gt;lock = LOCK_UNLOCKED;<br />
thread 1:<br />
    lock(&amp;obj-&gt;lock); // finishes because obj-&gt;lock is unlocked.<br />
    if(&#8211;obj-&gt;refcount) {<br />
        obj-&gt;lock = LOCK_UNLOCKED;<br />
        WakeByAddressSingle(&amp;obj-&gt;lock);<br />
        free(obj);<br />
thread 0:<br />
        WakeByAddressSingle(&amp;obj-&gt;lock); // use after free!<br />
&#8220;`</p>
<p>The problem is that a thread must wake a lock *after* it allows for the lock to be taken, which allows another thread to free it. The &#8220;use-after-free&#8221; occurs in the *kernel*, so it can&#8217;t crash the user program. However, if the lock is reused, the next lock&#8217;s owner will see a spurious wakeup.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1262625">
				<div id="div-comment-1262625" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1262625">
			August 30, 2016 at 7:53 am</a>		</div>

		<p>Um, futex is also implemented half in userspace and half in kernelspace. The &#8220;u&#8221; stands for &#8220;userspace&#8221; after all. (Userspace manipulates the integer, and then calls into kernelspace if waiting or waking is necessary.) Confusingly, the syscall is also called &#8220;futex&#8221; even though it really should be called &#8220;futexk&#8221;. Another solution to the problem you describe above is to call WakeByAddress before releasing the lock. It is explicitly permitted to call Wake while holding the lock.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1263085">
				<div id="div-comment-1263085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1263085">
			September 1, 2016 at 4:19 pm</a>		</div>

		<p>I tried to figure out what was going on here; unfortunately I discovered the documentation is somehow wrong; WaitOnAddressSingle is somehow not in kernel32.dl in Windows 10l (in desperation tried GetProcAddress and got NULL back). Maybe it&#8217;s only in synchronization.lib; in which case the docs need some real improvement.</p>
<p>Either way this code is wrong and the solution is as follows:<br />
lock(&amp;obj-&gt;lock);<br />
unlock(&amp;obj-&gt;lock);<br />
if (InterlockedAdd(&amp;obj-&gt;refcount, -1) == 0) free(obj);</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1263095">
				<div id="div-comment-1263095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160826-00/?p=94185#comment-1263095">
			September 1, 2016 at 4:30 pm</a>		</div>

		<p>On readback I typed it wrong here. My code does GetProcAddress(hKernel32, &#8220;WakeByAddressSingle&#8221;);</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

