<html>
<head>
<title>Creating an apartment-aware PPL task from nothing</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Creating an apartment-aware PPL task from nothing</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 1, 2018 / year-entry #175</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180801-00/?p=99385</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It says it has to be <CODE>IAsync­Action</CODE>- or <CODE>IAync­Operation<T></CODE>-derived, so let's do that.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
In the Parallel Patterns Library (PPL) of the Concurrency Runtime,
there are these things called <code>task</code>s.
Some tasks are <i>apartment-aware</i>,
which means that the
<a HREF="https://msdn.microsoft.com/en-us/library/hh749968.aspx#task_continuation_context::use_default Method">
default continuation context</a>
will execute the task continuation in the same COM apartment
that queued the continuation.
Otherwise, the task is not apartment-aware, which means
that the default continuation context is
<a HREF="https://msdn.microsoft.com/en-us/library/hh749968.aspx#task_continuation_context::use_arbitrary Method">
arbitrary</a>:
The concurrency runtime will execute the task continuation in a
thread of its choosing.
</p>
<p>
If you are working with objects that have thread affinity,
you are operating on a single-threaded apartment (STA),
and you need the continuation to run on that same thread
so that you still have access to those objects.
</p>
<p>
The rule used by the Concurrency Runtime is that tasks
which are derived from
<code>IAsync&shy;Action</code>
or
<code>IAsync&shy;Operation&lt;T&gt;</code>
are apartment-aware, and others are not.
</p>
<p>
Okay, so it's easy to create a non-apartment-aware completed task.
</p>
<pre>
Concurrency::task&lt;void&gt; completed_non_apartment_aware_task()
{
 return Concurrency::task_from_result();
}
</pre>
<p>
There is already a function in the Parallel Patterns Library for
creating a completed task,
and the result is a non-apartment-aware task.
</p>
<p>
The hard part is creating an apartment-aware completed task.
Here's what I came up with:
</p>
<pre>
Concurrency::task&lt;void&gt; completed_apartment_aware_task()
{
  Concurrency::create_task(Concurrency::create_async([]{}));
}
</pre>
<p>
Working from the inside out:
We start with a lambda that does nothing.
We use <code>create_<wbr>async</code> to wrap
that lambda inside an <code>IAsync&shy;Action</code>.
Then we use
<code>create_<wbr>task</code> to wrap the
<code>IAsync&shy;Action</code> inside a <code>task</code>.
</p>
<p>
It's not pretty, but it works.
</p>
<p>
Now you can write things like
</p>
<pre>
    completed_apartment_aware_task()
    .then([this]()
    {
       // something
    }).then([this](int result)
    {
       // something
    });
</pre>
<p>
and all of the <code>something</code>s will run on
the same apartment as the code that started the task chain.
</p>
<p>
This is particularly handy when you want to run a task
conditionally on a UI thread.
For the branch where you don't want a task, you still have
to make one, and you want it to be apartment-aware, so that
your UI code stays on the UI thread.
</p>
<pre>
Concurrency::task&lt;void&gt; MaybeDoSomethingAsync()
{
  if (condition) {
    return Concurrency::create_task(...);();
  } else {
    return completed_apartment_aware_task();
  }
}
</pre>
<p>
In the case where the condition is false,
you still have to return a task,
and you want it to be an apartment-aware task.
</p>
<p>
<b>Bonus chatter</b>:
This little detour through
<code>IAsync&shy;Action</code>
is necessary only if you are using
<code>concurrency::task::then()</code>
to attach continuations.
</p>
<p>
If you use <code>co_await</code> with
<code>Concurrency::task</code>,
then the <code>pplawait.h</code> header file
controls how the continuation is scheduled,
and it uses
<code>task_<wbr>continuation_<wbr>context::<wbr>get_<wbr>current_<wbr>winrt_<wbr>context()</code>
to schedule the continuation,
which means that the task continues in the same apartment.
</p>
<p>
If you use <code>co_await</code> with C++/winrt,
then the continuation runs in the same apartment,
although there are special awaitable objects for
<a HREF="https://docs.microsoft.com/en-us/windows/uwp/cpp-and-winrt-apis/concurrency">
explicitly moving between apartments</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1354995">
				<div id="div-comment-1354995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180801-00/?p=99385#comment-1354995">
			August 1, 2018 at 8:46 am</a>		</div>

		<p>That runtime is deprecated and no longer being seriously maintained <a href="https://twitter.com/StephanTLavavej/status/1021148498656292864" rel="nofollow">https://twitter.com/StephanTLavavej/status/1021148498656292864</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-kirbyfcf2 odd alt depth-2" id="comment-1355005">
				<div id="div-comment-1355005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kirby+FC' rel='external nofollow' class='url'>Kirby FC</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180801-00/?p=99385#comment-1355005">
			August 1, 2018 at 9:01 am</a>		</div>

		<p><a href="https://twitter.com/StephanTLavavej/status/1024507781351538689" rel="nofollow">https://twitter.com/StephanTLavavej/status/1024507781351538689</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1355395">
				<div id="div-comment-1355395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180801-00/?p=99385#comment-1355395">
			August 3, 2018 at 1:56 pm</a>		</div>

		<p>Yes, but there are still people who use it because their program was written prior to C++/winrt.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

