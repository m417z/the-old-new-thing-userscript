<html>
<head>
<title>Introducing the unrolled-switch anti-pattern</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Introducing the unrolled-switch anti-pattern</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 3, 2012 / year-entry #81</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>39</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Over the years, I've seen a bunch of coding anti-patterns. I figured maybe I'll share a few. Today, I'll introduce what I'm calling the unrolled-switch anti-pattern, also known as "Specialization is always faster, right?" enum Axis { XAxis, YAxis, ZAxis, }; // code earlier in the function ensure that // "axis" is always a valid...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Over the years, I've seen a bunch of coding anti-patterns.
I figured maybe I'll share a few.
</p>
<p>
Today, I'll introduce
what I'm calling the <i>unrolled-switch</i> anti-pattern,
also known as
"<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/04/27/10002865.aspx"
>Specialization is always faster, right?</a>"
</p>
<pre>
enum Axis
{
    XAxis,
    YAxis,
    ZAxis,
};

// code earlier in the function ensure that
// "axis" is always a valid axis
int newPosition;
switch (axis)
{
case XAxis:
    newPosition = m_position[XAxis] + amount;
    if (newPosition &lt; m_minPosition[XAxis])
        newPosition = m_minPosition[XAxis];
    if (newPosition &gt; m_maxPosition[XAxis])
        newPosition = m_maxPosition[XAxis];
    m_position[XAxis] = amount;
    break;
case YAxis:
    newPosition = m_position[YAxis] + amount;
    if (newPosition &lt; m_minPosition[YAxis])
        newPosition = m_minPosition[YAxis];
    if (newPosition &gt; m_maxPosition[YAxis])
        newPosition = m_maxPosition[YAxis];
    m_position[YAxis] = amount;
    break;
case ZAxis:
    newPosition = m_position[ZAxis] + amount;
    if (newPosition &lt; m_minPosition[ZAxis])
        newPosition = m_minPosition[ZAxis];
    if (newPosition &gt; m_maxPosition[XAxis])
        newPosition = m_maxPosition[XAxis];
    m_position[ZAxis] = amount;
    break;
}
</pre>
<p>As we all know,
special-case code is faster than general-purpose code.
Instead of writing slow general-purpose code:
</p>
<pre>
    newPosition = m_position[axis] + amount;
    if (newPosition &lt; m_minPosition[axis])
        newPosition = m_minPosition[axis];
    if (newPosition &gt; m_maxPosition[axis])
        newPosition = m_maxPosition[axis];
    m_position[axis] = amount;
</pre>
<p>
we unroll it into a switch statement, thereby generating
highly-optimized
special-purpose code, one for each axis.
</p>
<p>
What makes this anti-pattern particularly frustrating is that you
cannot tell at a glance whether all the cases really are the same
(just with different axes).
</p>
<p>
In fact, they aren't.
</p>
<p>
If you look closely, you'll see that we check the
new Z-position against the X-axis maximum rather than the Z-axis
maximum.
If you're reading this code, you now start to wonder,
"Is this a copy/paste bug, or is there some reason that
we really do want to check the Z-position against the X-axis minimum?"
</p>
<p>
A variation on the <i>unrolled-switch</i> is the
<i>unrolled-if</i>, used if the item you want to unroll
cannot be used in a <i>switch</i> statement:
</p>
<pre>
FruitBasket *BananaBasket;
FruitBasket *AppleBasket;
FruitBasket *PearBasket;
FruitBasket *MangoBasket;

if (basket == BananaBasket) {
  if (!BananaBasket-&gt;IsEmpty()) {
    fruit = BananaBasket-&gt;TakeFruit();
    if (HaveKnife()) {
      TakeKnife();
      fruit-&gt;Peel();
      fruit-&gt;Slice();
      fruit-&gt;Eat();
      ReplaceKnife();
    } else {
      BananaBasket-&gt;AddFruit(fruit);
    }
  }
} else if (basket == AppleBasket) {
  if (!AppleBasket-&gt;IsEmpty()) {
    fruit = AppleBasket-&gt;TakeFruit();
    if (HaveKnife()) {
      TakeKnife();
      fruit-&gt;Peel();
      fruit-&gt;Slice();
      fruit-&gt;Eat();
      ReplaceKnife();
    } else {
      AppleBasket-&gt;AddFruit(fruit);
    }
  }
} else if (basket == PearBasket) {
  if (!PearBasket-&gt;IsEmpty()) {
    fruit = PearBasket-&gt;TakeFruit();
    if (HaveKnife()) {
      TakeKnife();
      fruit-&gt;Slice();
      fruit-&gt;Eat();
      ReplaceKnife();
    } else {
      PearBasket-&gt;AddFruit(fruit);
    }
  }
} else if (basket == MangoBasket) {
  if (!MangoBasket-&gt;IsEmpty()) {
    fruit = MangoBasket-&gt;TakeFruit();
    if (HaveKnife()) {
      TakeKnife();
      fruit-&gt;Peel();
      fruit-&gt;Slice();
      fruit-&gt;Eat();
      ReplaceKnife();
    } else {
      BananaBasket-&gt;AddFruit(fruit);
    }
  }
}
</pre>
<p>
When I pointed out in an aside to the customer that this could
be simplified (after fixing the copy/paste errors) to
</p>
<pre>
if (!basket-&gt;IsEmpty()) {
  fruit = basket-&gt;TakeFruit();
  if (HaveKnife()) {
    TakeKnife();
    fruit-&gt;Peel();
    fruit-&gt;Slice();
    fruit-&gt;Eat();
    ReplaceKnife();
  } else {
    basket-&gt;AddFruit(fruit);
  }
}
</pre>
<p>
the response was, "Hey, that's a neat trick.
I didn't realize you could do that."
</p>
<p>
I wonder if this person also programs loops like this:
</p>
<pre>
switch (limit)
{
case 0:
  break;
case 1:
  do_something(array[0]);
  break;
case 2:
  for (int i = 0; i &lt; 2; i++) do_something(array[i]);
  break;
case 3:
  for (int i = 0; i &lt; 3; i++) do_something(array[i]);
  break;
case 4:
  for (int i = 0; i &lt; 4; i++) do_something(array[i]);
  break;
case 5:
  for (int i = 0; i &lt; 5; i++) do_something(array[i]);
  break;
case 6:
  for (int i = 0; i &lt; 6; i++) do_something(array[i]);
  break;
...
case 999:
  for (int i = 0; i &lt; 999; i++) do_something(array[i]);
  break;
default:
  FatalError("Need more cases to handle larger array");
  break;
}
</pre>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (39)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-976213">
				<div id="div-comment-976213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976213">
			April 3, 2012 at 7:22 am</a>		</div>

		<p>Throw a for loop around that and you&#39;ve got the for-switch anti-pattern, a variant of the for-if anti-pattern (<a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2011/12/27/10251210.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10251210.aspx</a>).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976223">
				<div id="div-comment-976223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Member vs. Static</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976223">
			April 3, 2012 at 7:27 am</a>		</div>

		<p>When the array lookup is a static variable, and you&#39;re doing something very time sensitive, the unrolled switch can be faster, because the array indexing gets done by the compiler. &nbsp;If you&#39;re on an embedded processor, the extra math needed by the general purpose code (esp. if it requires a multiply) might be horrifically expensive.</p>
<p>Of course, with the array being a member variable of some class/struct, you already are having to do arithmetic, so the unrolled switch buys you almost nothing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976233">
				<div id="div-comment-976233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mrkwatkins_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>mrkwatkins@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976233">
			April 3, 2012 at 7:30 am</a>		</div>

		<p>You&#39;ve got a typo in the ZAxis case, the m_maxPosition check is using XAxis&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976243">
				<div id="div-comment-976243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mrkwatkins_4000_gmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>mrkwatkins@gmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976243">
			April 3, 2012 at 7:31 am</a>		</div>

		<p>Ignore my previous comment&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976253">
				<div id="div-comment-976253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976253">
			April 3, 2012 at 7:31 am</a>		</div>

		<p>My hope is to one day have a tool that 1) compiles the code and optimizes it so it&#39;s no longer brain-damaged; 2) reverse translates the resulting code; 3) gives an error with &quot;here&#39;s what you wanted to write instead&quot;.</p>
<p>That said, I prefer code we can all point and laugh at to code we can all point at and cry over. If improving your code is so simple a computer could do it, you can get better. But if improving your code is so complicated no human could do it, you can only get worse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976263">
				<div id="div-comment-976263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976263">
			April 3, 2012 at 7:44 am</a>		</div>

		<p>The typos in the copy-pasted code are quite frequent. Andrey Karpov wrote some articles on viva64.com (syndicated on codeguru and codeproject, iirc) entitled &quot;How to make fewer errors at the stage of code writing&quot; extolling the virtues of static code analysis, obviously promoting their own PVS Studio in the process, which seems to catch many such errors. Unfortunately, such analysers are rather expensive for small shops and even if they weren&#39;t, I doubt the people who write such code are savvy enough to do SCA.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976273">
				<div id="div-comment-976273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/marco_4000_schramp.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>marco@schramp.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976273">
			April 3, 2012 at 7:45 am</a>		</div>

		<p>If only people would leave micro-optimization to the compiler. I&#39;ve been amazed already years ago how a loop-unroling by the compiler is very efficient, while keeping readable code. using shift operations and addition instead of multiplication when certain constants are involved. Don&#39;t try to beat the compiler, the effort invested by experts in making these things optimal is hardly to beat by writing &quot;efficient&quot; code.</p>
<div class="post">[<i>This code wasn&#39;t the result of micro-optimization. It was somebody who didn&#39;t realize that you could use variables to represent constants. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976283">
				<div id="div-comment-976283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 4372470</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976283">
			April 3, 2012 at 7:58 am</a>		</div>

		<p>Yep, the usual advice applies. Write it clearly. Then, if your testing (You do testing, don&#39;t you?) or production reveals a performance problem, do profiling. Then, optimize only the parts of the code the profiling reveals to be a problem.</p>
<p>(And the typical response will be &quot;BOCATOE&quot;. However, I suspect that if you actually do the profiling, most of the cases people expect to be exceptional, will actually be wasted &quot;optimization&quot;.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976293">
				<div id="div-comment-976293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random User 4372470</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976293">
			April 3, 2012 at 7:59 am</a>		</div>

		<p>Sorry, that should have been &quot;BOCTAOE&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976303">
				<div id="div-comment-976303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steven</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976303">
			April 3, 2012 at 8:08 am</a>		</div>

		<p>BTW, is the link for &quot;Specialization is always faster&quot; correct? If so, I don&#39;t get it&#8230;</p>
<div class="post">[<i>Now that you mention it, I don&#39;t get it either&#8230; -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976313">
				<div id="div-comment-976313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maxim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976313">
			April 3, 2012 at 8:10 am</a>		</div>

		<p>Was the omission of peeling the pear a deliberate test?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976323">
				<div id="div-comment-976323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bombsoft_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bombsoft@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976323">
			April 3, 2012 at 8:31 am</a>		</div>

		<p>if (!basket-&gt;IsEmpty()) {</p>
<p>&nbsp;fruit = basket-&gt;TakeFruit();</p>
<p>&nbsp;if (HaveKnife()) {</p>
<p>&nbsp; &nbsp;TakeKnife();</p>
<p>&nbsp; &nbsp;if (basket == PearBasket) {fruit-&gt;Peel();}</p>
<p>&nbsp; &nbsp;fruit-&gt;Slice();</p>
<p>&nbsp; &nbsp;fruit-&gt;Eat();</p>
<p>&nbsp; &nbsp;ReplaceKnife();</p>
<p>&nbsp;} else {</p>
<p>&nbsp; &nbsp;basket-&gt;AddFruit(fruit);</p>
<p>&nbsp;}</p>
<p>}</p>
<p>Maybe it was an example of where a catchall pattern falls short, when a specific instance has atypical behaviour?</p>
<p>Either that or put a stub function Peel() in the pear that does nothing but gives an identical signature to the other fruit?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976333">
				<div id="div-comment-976333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bombsoft_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bombsoft@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976333">
			April 3, 2012 at 8:32 am</a>		</div>

		<p>Also, bananas aren&#39;t fruit, they&#39;re herbs.</p>
<p>I&#39;m going to end up on the Nitpickers&#39; Naughty Step now, aren&#39;t I :(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976353">
				<div id="div-comment-976353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Harvey Pengwyn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976353">
			April 3, 2012 at 8:38 am</a>		</div>

		<p>Knowledge is knowing that a tomato is a fruit. Wisdom is not putting one in your fruit salad.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976363">
				<div id="div-comment-976363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976363">
			April 3, 2012 at 8:43 am</a>		</div>

		<p>Sadly, this customer cannot be given the response he deserves.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976373">
				<div id="div-comment-976373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976373">
			April 3, 2012 at 9:59 am</a>		</div>

		<p>@Maxim and @Lockwood: Oh wow, I didn&#39;t even notice not peeling the pear. I thought the test was wondering why mangoes were being moved to the banana basket if you didn&#39;t have the knife. I think this would be a shame, because bananas are delicious and mangoes are yucky, so they shouldn&#39;t be mixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976383">
				<div id="div-comment-976383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976383">
			April 3, 2012 at 10:07 am</a>		</div>

		<p>@Harvey: Botanically, tomato is a fruit, but culinarily, it&#39;s a vegetable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976403">
				<div id="div-comment-976403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976403">
			April 3, 2012 at 10:21 am</a>		</div>

		<p>@Lockwood: bananas are an herbaceous fruit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976413">
				<div id="div-comment-976413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976413">
			April 3, 2012 at 10:32 am</a>		</div>

		<p>Does the first example come from actual code? There&#39;s another bug there besides, which is that newPosition is not even used, and m_position[axis] is set to amount, completely ignoring the bounds checking done.</p>
<div class="post">[<i>All examples are made-up, but are inspired by actual code. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976423">
				<div id="div-comment-976423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/timothy_4000_roseharp.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>timothy@roseharp.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976423">
			April 3, 2012 at 10:42 am</a>		</div>

		<p>@Lockwood: did you mean &quot;if (basket != PearBasket) { fruit-&gt;Peel(); }&quot;?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-976453">
				<div id="div-comment-976453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976453">
			April 3, 2012 at 11:36 am</a>		</div>

		<p>The pear hack can be avoided, for example by extending the interface on the Fruit object to have a ShouldBePeeled() member function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976463">
				<div id="div-comment-976463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Agilent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976463">
			April 3, 2012 at 11:53 am</a>		</div>

		<p>Clearly this is a case for pear programming!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mikebmcl even thread-even depth-1" id="comment-976473">
				<div id="div-comment-976473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MikeBMcL' rel='external nofollow' class='url'>MikeBMcL</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976473">
			April 3, 2012 at 12:00 pm</a>		</div>

		<p>@Steven Don</p>
<p>All versions of VS11 (including Express) will have SCA. The Express SKUs will only have a subset consisting of the most critical warnings and all others will have all the rules. For more see <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/codeanalysis/archive/2012/03/09/what-s-new-in-code-analysis-for-visual-studio-11.aspx" rel="nofollow">blogs.msdn.com/&#8230;/what-s-new-in-code-analysis-for-visual-studio-11.aspx</a> . Here&#39;s hoping people will use it (and thus make the world of computing that much better)!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976503">
				<div id="div-comment-976503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Hensley</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976503">
			April 3, 2012 at 12:57 pm</a>		</div>

		<p>This is just a special case of the &quot;can&#39;t be bothered to factor&quot; anti-pattern which I have seen afflict even otherwise sensible developers. It&#39;s a darn shame.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976533">
				<div id="div-comment-976533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976533">
			April 3, 2012 at 4:08 pm</a>		</div>

		<p>@Adam Rosenfield: That makes no sense at all, since you use tomato the same way you use fruit in the kitchen. You eat it raw whole, like apples, or chopped in sauce like apples in curry, purified and boiled like pumpkin or as a juice like apple or citrus fruit, or as a desert.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976543">
				<div id="div-comment-976543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976543">
			April 3, 2012 at 4:14 pm</a>		</div>

		<p>I kind of &quot;legitimately&quot; did this for a large interrupt handler on an embedded microcontroller. &nbsp;There were three interrupts, all of which had to be handled virtually identically &#8211; the only difference being that the code used the interrupt number as a parameter. &nbsp;Putting the code into a shared function that was called by each interrupt was too slow &#8211; the generated code took much too long because it had to be prepared to handle any number in its input. &nbsp;Copying/pasting the interrupt code from the shared function directly into each interrupt&#39;s handler fixed the issue, as the variable could be replaced by a constant. &nbsp;The code ran much faster.</p>
<p>Except I left it to the compiler to commit this atrocity, by declaring the function &quot;inline&quot; and letting it do a nice optimization since the function parameter was known in advance. &nbsp;(Code size was not an issue; performance was.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976563">
				<div id="div-comment-976563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976563">
			April 3, 2012 at 5:11 pm</a>		</div>

		<p>@MikeBMcl: So many companies, like my employer, can&#39;t use VS 2012 because the output won&#39;t work on XP. &nbsp;VS 2012 has a lot of neat stuff, but we&#39;re just stuck as long as at least a quarter of our customers are on XP.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976393">
				<div id="div-comment-976393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976393">
			April 3, 2012 at 10:15 am</a>		</div>

		<p>&gt;It was somebody who didn&#39;t realize that you could use variables to represent constants.</p>
<p>It seems worse than that. He apparently realises that you can use a variable to represent a constant *some of the time* (after all, axis somehow got set to something before the switch statement) but then decides that you can&#39;t use a variable at other times (i.e., array indexing). &nbsp;Which is especially weird, since imagine how useless arrays are if the index can only be a constant.</p>
<p>In short, &quot;clueless&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976583">
				<div id="div-comment-976583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Erzengel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976583">
			April 3, 2012 at 7:18 pm</a>		</div>

		<p>Reading the title, I was sure this was going to be about Duff&#39;s Device. But this was actually so much worse.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976593">
				<div id="div-comment-976593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976593">
			April 3, 2012 at 7:47 pm</a>		</div>

		<p>It&#39;s a small variant called the &quot;Duff&quot; device!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976603">
				<div id="div-comment-976603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976603">
			April 3, 2012 at 9:40 pm</a>		</div>

		<blockquote><p>
  The pear hack can be avoided, for example by extending the interface on the Fruit</p>
<p>  object to have a ShouldBePeeled() member function.
</p></blockquote>
<p>Or by genetically modifying pears to have really thick skins.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976573">
				<div id="div-comment-976573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976573">
			April 3, 2012 at 5:42 pm</a>		</div>

		<p>I&#39;ve found calls to operator delete in C++ to feature this over the years. The reason may be due to a design which requires downcasts in other situations, leading in some cases to the code presented in the article.</p>
<p>Given:</p>
<p> &nbsp; &nbsp;class Base, with a virtual destructor since first appearance in source control.</p>
<p> &nbsp; &nbsp;classes A and B, derived from Base.</p>
<p>I&#39;ve seen:</p>
<p> &nbsp; &nbsp;switch( pointerToBase-&gt;GetUniqueId() )</p>
<p> &nbsp; &nbsp;{</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;case A::UniqueId: delete (A *)p; break;</p>
<p> &nbsp; &nbsp; &nbsp; &nbsp;case B::UniqueId: delete (B *)p; break;</p>
<p> &nbsp; &nbsp;} // repeated in multiple modules. Too bad for newly added C and D</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976633">
				<div id="div-comment-976633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lockwood</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976633">
			April 4, 2012 at 3:43 am</a>		</div>

		<p>I sign in and nothing happens. Maybe xpclient&#39;s threat to remove me from the blogs was legit.</p>
<p>Anyway&#8230;</p>
<p>@Timothy Byrd: Yes, that&#39;s what I meant. I had initally done a different test with a (!foo == bar) style construct and realised I was not thinking clearly.</p>
<p>That did leave the == artefact behind.</p>
<p>@Paul: That&#39;s a good point, I&#39;d missed that.</p>
<p>We&#39;ll work on the assumption that IFruit is untouchable, therefore we can&#39;t put a Peel() that returns false or a ShouldBePeeled() function into it.</p>
<p>We&#39;re maintaining backwards compatibility at the expense of a nice simple fix, and are matching the original behaviour bug-for-bug.</p>
<p>AIUI, the code should read now thus:</p>
<p>if (!basket-&gt;IsEmpty()) {</p>
<p>fruit = basket-&gt;TakeFruit();</p>
<p>if (HaveKnife()) {</p>
<p>&nbsp; TakeKnife();</p>
<p>&nbsp; if (basket != PearBasket) {fruit-&gt;Peel();}</p>
<p>&nbsp; fruit-&gt;Slice();</p>
<p>&nbsp; fruit-&gt;Eat();</p>
<p>&nbsp; ReplaceKnife();</p>
<p>} else {</p>
<p>&nbsp; if (basket != MangoBasket) {</p>
<p>&nbsp; &nbsp; &nbsp;BananaBasket-&gt;AddFruit(fruit);</p>
<p>&nbsp; } else {</p>
<p>&nbsp; &nbsp; &nbsp;basket-&gt;AddFruit(fruit);</p>
<p>&nbsp; }</p>
<p>}</p>
<p>}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976643">
				<div id="div-comment-976643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976643">
			April 4, 2012 at 4:04 am</a>		</div>

		<p>Your AddFruit calls are swapped at the end, only mangos (and bananas) should go in the banana basket.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-976693">
				<div id="div-comment-976693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976693">
			April 4, 2012 at 8:00 am</a>		</div>

		<p>&quot;If you&#39;re reading this code, you now start to wonder, &quot;Is this a copy/paste bug, or is there some reason that we really do want to check the Z-position against the X-axis minimum?&quot; &quot;</p>
<p>That&#39;s why it is SO CRUCIAL to write meaningful comments inside code. &nbsp;I have written comments that say &quot;The apparent simplification of doing this part in such-and-such a way won&#39;t work, for the following reason&#8230;&quot;</p>
<p>Some programmers are bad at writing comments, beyond just not writing them at all. &nbsp;If the code says foo = foo + 1, the comment should say WHY foo is being incremented, rather than saying &quot;add 1 to foo&quot;. &nbsp;It should be clear from the earlier comments in the same code, what foo represents.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976703">
				<div id="div-comment-976703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976703">
			April 4, 2012 at 9:31 am</a>		</div>

		<p>It is better to NAME the variable properly instead of &#39;foo&#39;:</p>
<p>LinesInCache = LinesInCache + 1;</p>
<p>Then there is no need for the WHY comment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-976753">
				<div id="div-comment-976753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JJJ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976753">
			April 4, 2012 at 4:37 pm</a>		</div>

		<p>@AsmGuru62: &nbsp;Personally I think it&#39;s odd that you&#39;re giving your cache an extra line and your naming convention, while descriptive, tells me nothing about why you&#39;re doing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-976763">
				<div id="div-comment-976763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric Andeen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976763">
			April 4, 2012 at 4:42 pm</a>		</div>

		<p>Many years ago, pre-Microsoft, I worked with somebody who built unit tests using the unrolled switch anti-pattern. It was in a proprietary variant of Pascal which I no longer remember, but the gist was:</p>
<p>switch (test_case)</p>
<p>{</p>
<p>&nbsp; &nbsp;case &#39;a&#39; : test(&#39;a&#39;); break;</p>
<p>&nbsp; &nbsp;case &#39;b&#39; : test(&#39;b&#39;); break;</p>
<p>&nbsp; &nbsp;case &#39;c&#39; : test(&#39;c&#39;); break;</p>
<p>&nbsp; &nbsp;case &#39;d&#39; : test(&#39;d&#39;); break;</p>
<p>&nbsp; &nbsp;&#8230;</p>
<p>&nbsp; &nbsp;case &#39;z&#39; : test(&#39;z&#39;); break;</p>
<p>} // no default case!!!</p>
<p>In the clearest example I have ever seen of the Dilbert principle, this dev was promoted to lead in order to reduce the amount of time he spent coding.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamesnt even thread-even depth-1" id="comment-976913">
				<div id="div-comment-976913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JamesNT' rel='external nofollow' class='url'>JamesNT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120403-00/?p=7943#comment-976913">
			April 5, 2012 at 5:18 pm</a>		</div>

		<p>I&#39;m guilty of stuff like this once in a while. &nbsp;It&#39;s the result of me just overthinking a problem.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

