<html>
<head>
<title>Why does my synchronous overlapped ReadFile return FALSE when the end of the file is reached?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does my synchronous overlapped ReadFile return FALSE when the end of the file is reached?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 21, 2015 / year-entry #15</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer reported that the behavior of Read­File was not what they were expecting. We have a synchronous file handle (not created with FILE_FLAG_OVERLAPPED), but we issue reads against it with an OVERLAPPED structure. We find that when we read past the end of the file, the Read­File returns FALSE even though the documentation says...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that the behavior of
<code>Read&shy;File</code> was not what they were expecting.
</p>
<blockquote CLASS=q><p>
We have a synchronous file handle
(not created with
<code>FILE_<wbr>FLAG_<wbr>OVERLAPPED</code>),
but we issue reads against it with an
<code>OVERLAPPED</code> structure.
We find that when we read past the end of the file,
the <code>Read&shy;File</code> returns <code>FALSE</code>
even though the documentation says it should return <code>TRUE</code>.
</p>
</blockquote>
<p>
They were kind enough to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2013/10/18/10457796.aspx">
include a simple program that demonstrates the problem</a>.
</p>
<pre>
#include &lt;windows.h&gt;

int __cdecl wmain(int, wchar_t **)
{
 // Create a zero-length file. This succeeds.
 HANDLE h = CreateFileW(L"test", GENERIC_READ | GENERIC_WRITE,
               0, nullptr, CREATE_ALWAYS,
               FILE_ATTRIBUTE_NORMAL, nullptr);

 // Read past EOF.
 char buffer[10];
 DWORD cb;
 OVERLAPPED o = { 0 };
 ReadFile(h, buffer, 10, &cb, &o); // returns FALSE
 GetLastError(); // returns ERROR_HANDLE_EOF

 return 0;
}
</pre>
<p>
The customer quoted this section from
<a HREF="http://msdn.microsoft.com/library/aa365467">
The documentation for <code>Read&shy;File</code></a>:
</p>
<blockquote CLASS=m>
<p>
Considerations for working with synchronous file handles:
</p>
<ul>
<li>If <i>lpOverlapped</i> is <b>NULL</b>,
    the read operation starts at the current file position and
    <b>Read&shy;File</b> does not return until the oepration
    is complete,
    and the system updates the file pointer before <b>Read&shy;File</b>
    returns.</p>
<li>If <i>lpOverlapped</i> is not <b>NULL</b>,
    the read operation starts at the offset that is specified
    in the <b>OVERLAPPED</b> structure and <b>Read&shy;File</b>
    does not return until the read operation is complete.
    The system updates the <b>OVERLAPPED</b> offset before
    <b>Read&shy;File</b> returns.</p>
<li>When a synchronous read operation reads the end of a file,
    <b>Read&shy;File</b> returns <b>TRUE</b> and sets
    <code>*lpNumberOfBytesRead</code> to zero.
</ul>
</blockquote>
<p>
and then added
</p>
<blockquote CLASS=q><p>
According to the third bullet point,
the <code>Read&shy;File</code> should return <code>TRUE</code>,
but in practice it returns <code>FALSE</code> and the error
code is
<code>ERROR_<wbr>HANDLE_<wbr>EOF</code>.
</p>
</blockquote>
<p>
The problem here is that there are two concepts here,
and they confusingly both use the word <i>synchronous</i>.
</p>
<ul>
<li>A synchronous file handle is a handle opened without
    <code>FILE_<wbr>FLAG_<wbr>OVERLAPPED</code>.
    All I/O to a synchronous file handle is serialized
    and synchronous.</p>
<li>A synchronous I/O operation is an I/O issued with
    <code>lpOverlapped == NULL</code>.
</ul>
<p>
The sample program issues an asynchronous read against a
synchronous handle.
The third bullet point applies only to synchronous reads.
</p>
<p>
To reduce confusion, the documentation would have been clearer
if it hadn't switched terminology midstream.
</p>
<blockquote CLASS=m>
<ul>
<li>If <i>lpOverlapped</i> is <b>NULL</b>,
    the read operation starts at the current file position and
    <b>Read&shy;File</b> does not return until the oepration
    is complete,
    and the system updates the file pointer before <b>Read&shy;File</b>
    returns.</p>
<li>If <i>lpOverlapped</i> is not <b>NULL</b>,
    the read operation starts at the offset that is specified
    in the <b>OVERLAPPED</b> structure and <b>Read&shy;File</b>
    does not return until the read operation is complete.
    The system updates the <b>OVERLAPPED</b> offset before
    <b>Read&shy;File</b> returns.</p>
<li><u>If <i>lpOverlapped</i> is <b>NULL</b> and</u>
    the read operation reads the end of a file,
    <b>Read&shy;File</b> returns <b>TRUE</b> and sets
    <code>*lpNumberOfBytesRead</code> to zero.
</ul>
</blockquote>
<p>
We asked what the customer was doing that caused them to trip
over this confusion in the documentation.
</p>
<blockquote CLASS=q>
<p>
The customer's original code opened a file (synchronously)
and read from it (synchronously).
The customer is parallelizing the computation in a way that will
read that single file from multiple threads.
A single file pointer is therefore not suitable,
because different threads will want to read from different positions.
</p>
<p>
One idea would be to have
each thread call <code>Create&shy;File</code> so that each handle
has its own file position.
Unfortunately, this won't work for the customer
because the sharing mode on the file handle denies read sharing.
</p>
<p>
The solution they came up with was to open the file synchronously
(without <code>FILE_<wbr>FLAG_<wbr>OVERLAPPED</code>)
but to read asynchronously
(by using an <code>OVERLAPPED</code> structure).
The <code>OVERLAPPED</code> structure lets you specify where
you want to read from,
so multiple threads can issue reads against the file
position they want.
</p>
<p>
This solution works, but the customer is concerned because this
hybrid model is not well-documented in MSDN.
They found
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/04/05/10290954.aspx">
a blog entry that discusses it</a>,
but even that blog entry does not discuss what happens in the
multithreaded case.)
In particular, they are seeing that the end-of-file behavior
acts according to asynchronous rather than synchronous rules.
</p>
<p>
Any advice you have on how we can pursue this model
would be appreciated.
Another concern is that since we do not set the
<code>hEvent</code> in the
<code>OVERLAPPED</code> structure,
the file handle itself is used as the signal that I/O has completed,
and this will cause problems if multiple I/O's are active simultaneously.
</p>
</blockquote>
<p>
The problem is that the customer confused the two senses
of synchronous,
one when applied to files and one when applied to I/O operations.
Since they opened a synchronous file handle, all I/O operations
are serialized and execute synchronously.
Passing an <code>OVERLAPPED</code> structure
issues an asynchronous I/O,
but since the underlying handle is synchronous,
the I/O is serialized and synchronous.
The customer's code therefore is not actually performing
I/O asynchronously;
its requests for asynchronous I/O is overridden by the fact that
the underlying handle is synchronous.
</p>
<p>
The hybrid model doesn't actually realize any gains of asynchronous I/O.
The use of the <code>OVERLAPPED</code> structure merely provides
the convenience of
combining the seek and read operations into a single call.
Since the benefit is rather meager,
the hybrid model is not commonly used,
and consequently it is not covered in depth in the documentation.
(The facts are still there, but there is relatively little discussion
and elaboration.)
</p>
<p>
Based on this feedback, the customer considered switching
to using an asynchronous file handle and setting the
<code>hEvent</code> in the <code>OVERLAPPED</code> structure
so that each thread can wait for its specific I/O to complete.
In the end, however,
they decided to stick with the hybrid model because
switching to an asynchronous handle was too disruptive to their code base.
They are satisfied with the <code>OVERLAPPED</code> technique
that lets them perform the equivalent of an atomic
<code>Set&shy;File&shy;Pointer</code> + <code>Read&shy;File</code>
(even if the I/O is synchronous and serialized).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1172443">
				<div id="div-comment-1172443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172443">
			January 21, 2015 at 7:19 am</a>		</div>

		<p>You should contact the author of that other blog entry and let him know it cause some people some confusion.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172453">
				<div id="div-comment-1172453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172453">
			January 21, 2015 at 7:42 am</a>		</div>

		<p>More post-mortems like this one please.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172473">
				<div id="div-comment-1172473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymous1</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172473">
			January 21, 2015 at 8:57 am</a>		</div>

		<p>Would duplicating the handle for each thread work better (each thread will have its own synchronous handle so no serialization between threads)?</p>
<div class="post">[<em>Duplicating the handle doesn&#39;t help, since all the duplicates refer to the same file object and therefore share the same file position. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172483">
				<div id="div-comment-1172483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mordachai</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172483">
			January 21, 2015 at 9:11 am</a>		</div>

		<p>I would imagine separate file handles &#8211; one per thread &#8211; would work okay so long as all are readers, and all were opened in overlapped mode (async). &nbsp;Otherwise the OS has to serialize everything (sync handle), and if you add a writer to the mix you&#39;ve got sync/race conditions no matter how you slice it (what each thread will perceive is not predictable, depending on the actual order things resolve in at run time).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172493">
				<div id="div-comment-1172493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172493">
			January 21, 2015 at 9:24 am</a>		</div>

		<p>Why not just open separate handles in each thread with FILE_SHARE_READ? &nbsp;Or did the customer intentionally want to deny read sharing to other processes?</p>
<p>I&#39;ve seen a lot of cases where programs open file handles with FILE_SHARE_NONE when they could have safely allowed at least FILE_SHARE_READ with no problems. &nbsp;This is usually the result of opening files with either C&#39;s fopen() or C++&#39;s [i]fstream, which by default use FILE_SHARE_NONE under the hood in the call to CreateFile; it takes extra effort from the developers, especially if it&#39;s a cross-platform code base, to call one of the Windows-specific variants that allows them to specify a sharing mode.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172503">
				<div id="div-comment-1172503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172503">
			January 21, 2015 at 11:37 am</a>		</div>

		<p>I would put more emphasis on the use of this technique to avoid the race condition, whereby multiple threads seek and then read simultaneously. It&#39;s a race because the seek pointer is global to the file object.</p>
<p>The only hint that this technique solves a real issue is the mention of &quot;atomic&quot; in the last sentence.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172513">
				<div id="div-comment-1172513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172513">
			January 21, 2015 at 12:22 pm</a>		</div>

		<p>Ref: Adam Rosenfield: Yeah that&#39;s been my big complaint too. Lots of programs have the wrong sharing because MS picked a really dumb default when writing the standard libraries.</p>
<p>&quot;r&quot; should have been FILE_SHARE_READ | FILE_SHARE_DELETE</p>
<p>&quot;a&quot;, &quot;a+&quot; should have been FILE_SHARE_READ | FILE_SHARE_DELETE</p>
<p>&quot;w&quot;, &quot;r+&quot;, &quot;w+&quot; should have been FILE_SHARE_DELETE</p>
<p>Deleting a file open for writing is almost always equivalent to deleting it right after it was closed, especially on Windows where the name sticks around anyway.</p>
<div class="post">[<em>You&#39;re assuming that the Research division has that time machine working. <code>FILE_SHARE_DELETE</code> did not exist when the standard libraries were written. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com000340019af3cc36 odd alt thread-odd thread-alt depth-1" id="comment-1172533">
				<div id="div-comment-1172533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Richard+T+Russell' rel='external nofollow' class='url'>Richard T Russell</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172533">
			January 21, 2015 at 2:01 pm</a>		</div>

		<p>Not only did FILE_SHARE_DELETE not exist when the standard libraries were written, versions of Windows prior to its introduction don&#39;t ignore it: the open fails! &nbsp;So you mustn&#39;t set that bit if you are concerned about compatibility with older versions of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172543">
				<div id="div-comment-1172543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172543">
			January 21, 2015 at 2:11 pm</a>		</div>

		<p>[You&#39;re assuming that the Research division has that time machine working. FILE_SHARE_DELETE did not exist when the standard libraries were written. -Raymond]</p>
<p>Which doesn&#39;t mean it couldn&#39;t have been added to the standard library as soon as FILE_SHARE_DELETE existed (with a windows version check). Even now it would fix more problems than cause.</p>
<div class="post">[<em>So you are silently changing the behavior of apps written with the old version of the standard library? That seems risky. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172553">
				<div id="div-comment-1172553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172553">
			January 21, 2015 at 3:00 pm</a>		</div>

		<p>The problem is that portable programs (which are written using open/fopen/iostream) expect that files are opened for sharing (which is the behavior in other operating systems).</p>
<p>Unfortunately, non-portable programs written for DOS (but also written using open/fopen/iostream/etc) expect that files are NOT opened for sharing. Windows inherited that behavior.</p>
<p>For programmers coming from other operating systems, Windows&#39; behavior is a pain; I have many times seen they do a &quot;retry loop&quot; waiting for the antivirus (or whatever the culprit is) to release the lock on the file so they can open/delete/rename it.</p>
<p>Getting back on topic (sort of), the portable way to solve the seek+read/write problem is pread/pwrite; do these functions exist on Windows?</p>
<div class="post">[<em>I find it interesting the mindset that lets you write the sentence &quot;Portable programs expect behavior that is not portable (not required by the standard).&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1172563">
				<div id="div-comment-1172563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172563">
			January 21, 2015 at 3:51 pm</a>		</div>

		<p>Is the simultaneous use of the same synchronous file handle in multiple threads actually supported? &nbsp;I&#39;ve always vaguely assumed that it wasn&#39;t, and don&#39;t recall ever seeing anything on the subject in MSDN.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1172573">
				<div id="div-comment-1172573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172573">
			January 21, 2015 at 5:38 pm</a>		</div>

		<p>s/oepration/operation/ :P</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172593">
				<div id="div-comment-1172593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172593">
			January 21, 2015 at 6:41 pm</a>		</div>

		<p>[So you are silently changing the behavior of apps written with the old version of the standard library? That seems risky. -Raymond]</p>
<p>I&#39;ve already done a limited form of the experiment. The only program I broke was Adobe PDF and that turned out to be an artifact of the test (it spawned a worker process with a different security level). I could do it system-wide w/ an appinit DLL but appinit DLLs need to die.</p>
<p>A minifilter would catch too much; however I wonder if that&#39;s actually safe all the same. I could prove it was safe if files w/ pending deletes could still be opened.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172603">
				<div id="div-comment-1172603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172603">
			January 22, 2015 at 2:47 am</a>		</div>

		<p>(Aren&#39;t these posts queued up months in advance? How long does it take to get the MSDN documentation updated to be less confusing? I think it&#39;s confusing that passing in an OVERLAPPED structure subtly changes that behaviour. Where&#39;s my time machine?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1172633">
				<div id="div-comment-1172633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">D-Coder</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172633">
			January 22, 2015 at 8:48 am</a>		</div>

		<p>@Neil &quot;Where&#39;s my time machine?&quot;</p>
<p>I&#39;m going to steal it a month ago, that&#39;s why you didn&#39;t see it next week.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1172663">
				<div id="div-comment-1172663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20150121-00/?p=44863#comment-1172663">
			January 22, 2015 at 10:58 am</a>		</div>

		<p>I think it&#39;s important to observe that the hybrid mode needs to conform to the contract of async, because programs written for async (opening using FILE_FLAG_OVERLAPPED) may end up in hybrid mode without warning, depending on the file-like object being opened. &nbsp;Some drivers always complete operations synchronously.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

