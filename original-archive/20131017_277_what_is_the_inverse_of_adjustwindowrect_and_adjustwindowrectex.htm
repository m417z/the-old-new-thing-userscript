<html>
<head>
<title>What is the inverse of AdjustWindowRect and AdjustWindowRectEx?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What is the inverse of AdjustWindowRect and AdjustWindowRectEx?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 17, 2013 / year-entry #278</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">We saw over a decade ago (my goodness I've been doing this way too long) that the Adjust­Window­Rect and Adjust­Window­Rect­Ex functions do not take menu wrapping into account because they don't take a window handle parameter, so they don't know what menu to test for wrapping. Still, they are useful functions if you aren't worried...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We saw
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2003/09/11/54885.aspx">
over a decade ago</a>
(my goodness I've been doing this way too long)
that the
<code>Adjust&shy;Window&shy;Rect</code> and
<code>Adjust&shy;Window&shy;Rect&shy;Ex</code> functions
do not take menu wrapping into account because they don't
take a window handle parameter,
so they don't know what menu to test for wrapping.
Still, they are useful functions if you aren't worried about
menu wrapping
because they let you do window size calculations without
a window handle (say, before you create your window).
</p>
<p>
But those functions take a proposed client rectangle
and return the corresponding non-client rectangle
by inflating the rectangle by the appropriate borders,
caption, scroll bars, and other non-client goo.
But how do you go the other way?
Say you have a proposed window rectangle and you want to know
what client rectangle would result from it?
</p>
<p>
<code>Adjust&shy;Window&shy;Rect</code> and
<code>Adjust&shy;Window&shy;Rect&shy;Ex</code> can do that too.
You just have to apply a negative sign.
</p>
<p>
The idea here is that we use the
<code>Adjust&shy;Window&shy;Rect&shy;Ex</code>
function to calculate how much additional non-client area gets
added due to the styles we passed.
To make the math simple, we ask for a zero client rectangle,
so that the resulting window is all non-client.
</p>
<table CELLPADDING=0 CELLSPACING=0 BORDER=0
       TITLE="A rectangle with left edge -10, right edge +10, top edge -50, bottom edge +10, with a dot at (0,0)">
<tr>
<td COLSPAN=3 ALIGN=right>&minus;10</td>
<td STYLE="width: 1em"></td>
<td ALIGN=center>0</td>
<td STYLE="width: 1em"></td>
<td ALIGN=left>+10</td>
</tr>
<tr>
<td ROWSPAN=3 VALIGN=center>&minus;50</td>
<td></td>
<td></td>
<td STYLE="border-left: solid black 1px">&nbsp;</td>
<td ALIGN=center>|</td>
<td STYLE="border-right: solid black 1px">&nbsp;</td>
<td></td>
</tr>
<tr COLSPAN=6>
<td STYLE="height: 1ex"></td>
</tr>
<tr STYLE="height: 1.5em">
<td STYLE="border-top: solid black 1px; width: 1em">&nbsp;</td>
<td>&nbsp;</td>
<td COLSPAN=3 STYLE="border-left: solid black 1px; border-top: solid black 1px; border-right: solid black 1px">&nbsp;</td>
<td></td>
</tr>
<tr STYLE="height: 1.5em">
<td></td>
<td></td>
<td></td>
<td COLSPAN=3 STYLE="border-left: solid black 1px; border-right: solid black 1px">&nbsp;</td>
<td></td>
</tr>
<tr>
<td COLSPAN=2 ALIGN=right>0 &mdash;</td>
<td></td>
<td ALIGN=center COLSPAN=3 STYLE="border-left: solid black 1px; border-right: solid black 1px">&bull;</td>
<td></td>
</tr>
<tr>
<td ROWSPAN=2 VALIGN=bottom>+10</td>
<td STYLE="border-bottom: solid black 1px; width: 1em">&nbsp;</td>
<td>&nbsp;</td>
<td COLSPAN=3 STYLE="border-left: solid black 1px; border-bottom: solid black 1px; border-right: solid black 1px">&nbsp;</td>
<td></td>
</tr>
<tr COLSPAN=6>
<td STYLE="height: 1ex"></td>
</tr>
</table>
<p>
We pass in the empty rectangle represented by the dot in the middle,
and the
<code>Adjust&shy;Window&shy;Rect&shy;Ex</code> expands the rectangle
in all dimensions.
We see that it added ten pixels to the left, right, and bottom,
and it added fifty pixels to the top.
(Numbers are for expository purposes.
Actual numbers will vary.)
</p>
<p>
From this we can perform the reverse calculation:
Instead of expanding the rectangle, we shrink it.
</p>
<pre>
BOOL UnadjustWindowRectEx(
    LPRECT prc,
    DWORD dwStyle,
    BOOL fMenu,
    DWORD dwExStyle)
{
  RECT rc;
  SetRectEmpty(&amp;rc);
  BOOL fRc = AdjustWindowRectEx(&amp;rc, dwStyle, fMenu, dwExStyle);
  if (fRc) {
    prc-&gt;left -= rc.left;
    prc-&gt;top -= rc.top;
    prc-&gt;right -= rc.right;
    prc-&gt;bottom -= rc.bottom;
  }
  return fRc;
}
</pre>
<p>
Note that the top and left are subtracted,
so that the two negative signs cancel out.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1083353">
				<div id="div-comment-1083353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083353">
			October 17, 2013 at 7:27 am</a>		</div>

		<p>That doesn&#39;t sound like the function doing the inversion&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083373">
				<div id="div-comment-1083373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083373">
			October 17, 2013 at 7:42 am</a>		</div>

		<p>@henke37</p>
<p>My psychic commenting powers tell me you&#39;re engaging in pedantry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083393">
				<div id="div-comment-1083393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083393">
			October 17, 2013 at 8:16 am</a>		</div>

		<p>@xor88 But then your helper function has to perform memory allocation. In C# one doesn&#39;t care about memory ownership (i.e. who is responsible for deleting it), but in C one must. It is beneficial for simple helper methods to not participate in the management of memory. In this case memory management is left to the caller.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083423">
				<div id="div-comment-1083423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083423">
			October 17, 2013 at 9:26 am</a>		</div>

		<p>The C version could return a copy without performing memory allocation, by returning the struct by value. In C++ you even have the return value optimization, which eliminates the copy on return (and I believe the copy from the return value into a new stack object can also be elided). In this case the copy would have only been four words anyway. </p>
<p>Of course this isn&#39;t always a solution. If you have a bigger structure, the function is being called in a tight loop, and the RVO doesn&#39;t save you (e.g. if you&#39;re updating an existing object instead of creating a new one on the stack), then returning by value may not be sensible. In this particular case these are unlikely to apply to any caller, but we&#39;d need a time machine anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1083443">
				<div id="div-comment-1083443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083443">
			October 17, 2013 at 10:04 am</a>		</div>

		<p>The RECT functions typically accept separate input and output parameters. Here&#39;s a more idiomatic implementation:</p>
<p>BOOL UnadjustWindowRectEx(</p>
<p> &nbsp; &nbsp;_Out_ LPRECT pShrunk,</p>
<p> &nbsp; &nbsp;LPCRECT pOriginal,</p>
<p> &nbsp; &nbsp;DWORD dwStyle,</p>
<p> &nbsp; &nbsp;BOOL fMenu,</p>
<p> &nbsp; &nbsp;DWORD dwExStyle)</p>
<p>{</p>
<p> &nbsp;RECT rc;</p>
<p> &nbsp;SetRectEmpty(&amp;rc);</p>
<p> &nbsp;BOOL fRc = AdjustWindowRectEx(&amp;rc, dwStyle, fMenu, dwExStyle);</p>
<p> &nbsp;if (fRc) {</p>
<p> &nbsp; &nbsp;pShrunk-&gt;left = pOriginal-&gt;left &#8211; rc.left;</p>
<p> &nbsp; &nbsp;pShrunk-&gt;top = pOriginal-&gt;top &#8211; rc.top;</p>
<p> &nbsp; &nbsp;pShrunk-&gt;right = pOriginal-&gt;right &#8211; rc.right;</p>
<p> &nbsp; &nbsp;pShrunk-&gt;bottom = pOriginal-&gt;bottom &#8211; rc.bottom;</p>
<p> &nbsp;}</p>
<p> &nbsp;return fRc;</p>
<p>}</p>
<p>This would (equally idiomatically) be called by passing the same pointer to the first two args:</p>
<p>RECT rc = &#8230;;</p>
<p>// shrink rectangle</p>
<p>if (!UnadjustWindowRectEx(&amp;rc, &amp;rc, &#8230;)) { &#8230; }</p>
<p>// rectangle is now shrunk</p>
<p>This makes it clear that no memory is being allocated, and that the RECT is being modified in-place. It does place a burden on the called function not to read from the input after it&#39;s written to the output, since they might be the same RECT!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1083453">
				<div id="div-comment-1083453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083453">
			October 17, 2013 at 10:09 am</a>		</div>

		<p>&gt; The RECT functions typically accept separate input and output parameters</p>
<p>A counterexample to this general trend is AdjustWindowRectEx itself, which takes a single input/output parameter. So it makes sense for UnadjustWindowRectEx to do the same.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083463">
				<div id="div-comment-1083463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083463">
			October 17, 2013 at 10:32 am</a>		</div>

		<p>I bet TCM_ADJUSTRECT was invented after developers learned (from AdjustWindowRect) that opposite operation also sometimes needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083473">
				<div id="div-comment-1083473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MV</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083473">
			October 17, 2013 at 10:59 am</a>		</div>

		<p>So&#8230;. we&#39;re taking this interesting tidbit of math as a chance to observe that two different languages, with different expectation of how memory is handled, end up with different &quot;best practices&quot; and that neither is a good fit for the other. &nbsp;Better late than never, I suppose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083483">
				<div id="div-comment-1083483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083483">
			October 17, 2013 at 12:21 pm</a>		</div>

		<p>&gt; We saw over a decade ago (my goodness I&#39;ve been doing this way too long) </p>
<p>Then this is probably a good time to say thank you for ten years of consistent and consistently high quality writing. &nbsp;I can only hope that Microsoft sees the immense value in your blog archives (as well as others at Microsoft) and ensures it stays online and available even long after you stop writing.</p>
<p>Coincidentally, Eric Lippert also just celebrated (perhaps &quot;recognized&quot; is a better word!) his 10th anniversary of blogging. &nbsp;Both of you are fantastic writers and your sites a pleasure to read. &nbsp;Thank you!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083383">
				<div id="div-comment-1083383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xor88</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083383">
			October 17, 2013 at 8:05 am</a>		</div>

		<p>Having used C# for years in a functional style, viewing idiomatic C is quite a contrast. In C# I&#39;d probably have created a new rectangle and returned directly that expression, or put it into a fresh variable. I wouldn&#39;t have modified *prc or overwritten it.</p>
<p>Even if I had wanted to use the return-value-by-out-param style I&#39;d have create a fresh rect and assigned it to *prc instead of mutating its members.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083513">
				<div id="div-comment-1083513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marcel K.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083513">
			October 17, 2013 at 3:09 pm</a>		</div>

		<p>&gt; We saw over a decade ago (my goodness I&#39;ve been doing this way too long)</p>
<p>Which means that you&#39;ve been part of my daily routine for 10 years as I haven&#39;t missed a single article since&#8230; wow, that&#39;s a weird thought! Can&#39;t imagine the withdrawal symptoms should you ever decide to stop&#8230; so cheers for the next 10 years :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083543">
				<div id="div-comment-1083543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083543">
			October 18, 2013 at 3:37 am</a>		</div>

		<p>But what if the window manager one day decides to use different styles of window decoration for different window sizes? E.g., it could place the title bar on the side for very narrow windows. Or the close button in the center if the window is exactly square. Then your UnadjustWindowRectEx would be wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083553">
				<div id="div-comment-1083553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083553">
			October 18, 2013 at 3:43 am</a>		</div>

		<p>The other approach is to simply create a window of the desired size and style and use ClientToScreen and GetClientRect on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1083563">
				<div id="div-comment-1083563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083563">
			October 18, 2013 at 6:13 am</a>		</div>

		<p>@Sven2: &quot;Then your UnadjustWindowRectEx would be wrong.&quot;</p>
<p>Then wouldn&#39;t AdjustWindowRectEx return the correct coordinates for the &quot;new&quot; style? If so, then I fail to see how the Unadjust code would be wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083573">
				<div id="div-comment-1083573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Damien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083573">
			October 18, 2013 at 6:18 am</a>		</div>

		<p>@Brian_EE</p>
<p>I think Sven was saying that different styles might be used &#8211; so the non-client area for a square, 0x0 window may have a different &quot;shape&quot; (be narrower or wider, in general) than the non-client area for a window of whatever size was passed to UnadjustWindowRectEx.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1083713">
				<div id="div-comment-1083713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083713">
			October 18, 2013 at 6:01 pm</a>		</div>

		<p>@Damien: In the same way Windows doesn&#39;t support transactions for the file system any longer, Windows doesn&#39;t support transactions for the windowing system either. Windows does never guarantee that the border size and other system global decoration settings hasn&#39;t changed between the AdjustÂ­WindowÂ­Rect* and CreateWindows* functions calls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1083803">
				<div id="div-comment-1083803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131017-00/?p=2903#comment-1083803">
			October 19, 2013 at 7:46 pm</a>		</div>

		<p>&gt;Note that the top and left are subtracted, so that the two negative signs cancel out.</p>
<p>Dear Raymond, happy to read your article.</p>
<p>This way of representing the geometry of the window, I also think the best.</p>
<p>So use myself in my native utilities for many years, here are the screenshots for examples:</p>
<p><a rel="nofollow" target="_new" href="http://www.geocities.ws/xmemor/2lz/htspy.png">http://www.geocities.ws/&#8230;/htspy.png</a> (see &quot;w-cl: [3,22, -3, -3]&quot;),</p>
<p><a rel="nofollow" target="_new" href="http://www.geocities.ws/xmemor/2lz/printlayered.jpg">http://www.geocities.ws/&#8230;/printlayered.jpg</a> (see &quot;rtdif: [4,23, -4, -4]&quot;).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

