<html>
<head>
<title>Common gotchas when writing your own p/invoke</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Common gotchas when writing your own p/invoke</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 13, 2009 / year-entry #254</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you're looking to get into some p/invoke action, you'd be well-served to check out the pinvoke wiki to see if somebody else has done it too. If what you need isn't there, you may end up forced to write your own, and here are some gotchas I've seen people run into: C++ bool and...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you're looking to get into some p/invoke action,
you'd be well-served to check out the
<a HREF="http://pinvoke.net/">pinvoke wiki</a>
to see if somebody else has done it too.
If what you need isn't there, you may end up forced to write your own,
and here are some gotchas I've seen people run into:
</p>
<ul>
<li>
    C++ <code>bool</code> and Win32 <code>BOOLEAN</code>
    are not the same as C# <code>bool</code>
    (aka <code>System.Boolean</code>).
    In Win32, <code>BOOL</code> is a 4-byte type,
    and <code>BOOLEAN</code> is a 1-byte type.
    [<i>See also
    <a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/08/13/9867383.aspx#9870333">
    MadQ's remarks about <code>VARIANT_BOOL</code></a></i>.]
    Meanwhile, C++ <code>bool</code> is not standardized by Win32,
    so the size will vary based on your compiler, but most compilers
    use a 1-byte value.
    And then C# is even weirder:
    The <code>bool</code> is a 1-byte type,
    <a HREF="http://blogs.msdn.com/jaredpar/archive/2008/10/14/pinvoke-and-bool-or-should-i-say-bool.aspx">
    but it marshals as a 4-byte type by default</a>.</p>
<li>Win32 <code>char</code> is not the same as C# <code>char</code>
    (aka <code>System.Char</code>).
    In C#, <code>char</code> is a Unicode character (two bytes), whereas in
    C/C++ under Win32 it is an ANSI character (one byte).</p>
<li>Win32 <code>long</code> is not the same as C# <code>long</code>
    (aka <code>System.Int64</code>).
    In C#, <code>long</code> is 64-bit value, whereas in
    C/C++ under Win32 it is a 32-bit value.</p>
<li>If memory is allocated and freed across the interop boundary,
    make sure both sides are using the same allocator.
    It is my understanding that
    <a HREF="http://msdn.microsoft.com/en-us/library/f1cf4kkz.aspx">
    the CLR uses <code>CoTaskMemAlloc</code>/<code>CoTaskMemFree</code>
    by default</a>.
    If your Win32 function doesn't use <code>CoTaskMemAlloc</code>,
    you'll have to teach the CLR which allocator you really want.</p>
<li>When laying out structures, you have to watch out for alignment.
</ul>
<p>
That last one is particularly gnarly on 64-bit systems,
where alignment requirements are less forgiving than on x86.
The structure declarations on pinvoke.net tend to ignore 64-bit
issues.
For example, the declaration of the <code>INPUT</code> structure
(<a HREF="http://pinvoke.net/default.aspx/user32/SendInput(2008-01-24-03-56-33.4726--69.14.194.68).html"
>as of this writing</a>&mdash;it's a wiki so it's probably changed
by the time you read this) reads as follows:
</p>
<blockquote CLASS=q>
<pre>
[StructLayout(LayoutKind.Explicit)]struct INPUT {
  [FieldOffset(0)] int type;
  [FieldOffset(4)] MOUSEINPUT mi;
  [FieldOffset(4)] KEYBDINPUT ki;
  [FieldOffset(4)] HARDWAREINPUT hi;
}
</pre>
</blockquote>
<p>
This structure layout is correct for 32-bit Windows,
but it's incorrect for 64-bit Windows.
</p>
<p>
Let's take a look at that <code>MOUSEINPUT</code> structure,
for starters.
</p>
<pre>
typedef struct tagMOUSEINPUT {
    LONG    dx;
    LONG    dy;
    DWORD   mouseData;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, FAR* LPMOUSEINPUT;
</pre>
<p>
In 64-bit Windows, the <code>LONG</code> and <code>DWORD</code>
members are four bytes, but the <code>dwExtraInfo</code> is
a <code>ULONG_PTR</code>, which is eight bytes on a 64-bit machine.
Since
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/04/22/9560726.aspx">
Windows assumes /Zp8 packing</a>,
the <code>dwExtraInfo</code> must be aligned on an 8-byte boundary,
which forces four bytes of padding to be inserted after the
<code>time</code> to get the <code>dwExtraInfo</code> to align
properly.
And in order for all this to work, the <code>MOUSEINPUT</code>
structure itself must be 8-byte aligned.
</p>
<p>
Now let's look at that <code>INPUT</code> structure again.
Since the <code>MOUSEINPUT</code> comes after the <code>type</code>,
there also needs to be padding between the <code>type</code>
and the <code>MOUSEINPUT</code> to get the <code>MOUSEINPUT</code>
back to an 8-byte boundary.
In other words, the offset of <code>mi</code> in the <code>INPUT</code>
structure is <u>8</u> on 64-bit Windows, not&nbsp;4.
</p>
<p>
Here's how I would've written it:
</p>
<pre>
// This generates the anonymous union
[StructLayout(LayoutKind.Explicit)] struct INPUT_UNION {
  [FieldOffset(0)] MOUSEINPUT mi;
  [FieldOffset(0)] KEYBDINPUT ki;
  [FieldOffset(0)] HARDWAREINPUT hi;
};

<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/08/13/9867383.aspx#9869008">[StructLayout(LayoutKind.Sequential)]</a> struct INPUT {
  int type;
  INPUT_UNION u;
}
</pre>
<p>
I introduce a helper structure to represent the anonymous union
that is the second half of the Win32 <code>INPUT</code> structure.
By doing it this way, I let somebody else worry about the
alignment,
and it'll be correct for both 32-bit and 64-bit Windows.
</p>
<pre>
static public void Main()
{
  Console.WriteLine(Marshal.OffsetOf(typeof(INPUT), "u"));
}
</pre>
<p>
On a 32-bit system, this prints&nbsp;4,
and on a 64-bit system, it prints&nbsp;8.
The downside is that you have to type an extra <code>u.</code>
when you access the <code>mi</code>, <code>ki</code> or <code>hi</code>
members.
</p>
<pre>
input i;
i.<font COLOR=blue>u.</font>mi.dx = 0;
</pre>
<p>
(I haven't checked what the
<a HREF="http://www.codeplex.com/Release/ProjectReleases.aspx?ProjectName=clrinterop&ReleaseId=14120">
PInvoke Interop Assistant</a>
comes up with for the <code>INPUT</code> structure.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-762283">
				<div id="div-comment-762283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762283">
			August 13, 2009 at 11:35 am</a>		</div>

		<p>The interop assistant comes up with basically the same thing you did, only with lengthier names and uints for the DWORDs</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-762363">
				<div id="div-comment-762363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762363">
			August 13, 2009 at 1:52 pm</a>		</div>

		<p>Since my C# development uses mostly C# features (WCF of recent), or uses interop to access functions from internal/own C++ DLLs, I&#8217;ve not needed interop to get to native win32 APIs.. &nbsp;How often do other folks need to do it?</p>
<p>I mean, the questions in my mind are: how common is it ? Why isn&#8217;t there similar functionality in the .net CLR ? Why not use C++ to access the win32 api to begin with ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762373">
				<div id="div-comment-762373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shaved Regressor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762373">
			August 13, 2009 at 2:49 pm</a>		</div>

		<p>To answer &quot;Nathan works&quot; &#8211; I have had to use a lot of interop from C#. A quick search shows that I use 154 different calls in my interop library.</p>
<p>(We have special needs because we use Windows XP embedded on touch-screen kiosk-like devices.)</p>
<p>For example, we have the taskbar on our machines set to auto-hide and be behind other applications. Yet we&#8217;d still get occasional reports from the field of the taskbar appearing over our full-screen application. We couldn&#8217;t repro it, but it had to be fixed.</p>
<p>I&#8217;m sure the solution would make Raymond cringe &#8211; I use interop to get the taskbar window handle then make it invisible. Then it will never appear over anything. This would be really, really bad on a desktop app, but fixed our custom machines.</p>
<p>In fact, as a regular reader of Raymond&#8217;s blog, I often come across situations where I wonder &quot;how much would this make Raymond cringe.&quot; Sometimes that prompts me to find a better solution. But sometimes I just have to get things done within the deadline.</p>
<p>Moving the interop to C++ would still require a layer of interop between my C# app and the C++ helper app, so that wouldn&#8217;t really buy us anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762393">
				<div id="div-comment-762393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762393">
			August 13, 2009 at 2:57 pm</a>		</div>

		<p>As a reply to &quot;Shaved Regressor&quot;. Why on earth do you run Explorer.exe on a kiosk machine to begin with? You should change the shell to be your own kiosk app.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762403">
				<div id="div-comment-762403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shaved Regressor</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762403">
			August 13, 2009 at 4:11 pm</a>		</div>

		<p>Koro, I don&#8217;t remember why they decided to stick with Explorer as the shell for our machines. There were discussions, but our OS guy decided keep Explorer.</p>
<p>Anyway, the example I used was just one thing among many. Most of the interop I have to use isn&#8217;t for dealing with Explorer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762433">
				<div id="div-comment-762433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762433">
			August 13, 2009 at 5:38 pm</a>		</div>

		<p>I once &quot;gained&quot; access to a kiosk (like, could run IE, the MSN Messenger included with XP, browse folders and such) because the taskbar had somehow been displayed over the kiosk app. Funny thing was that the kiosk was a pay-per-minute internet kiosk.</p>
<p>About interop, yeah, that&#8217;s because most of the time, the .NET Framework / Windows Forms does not support natively doing what we are trying to do. Especially in the area of the shell (like for example getting an icon off the system image list, and using said system imagelist with a ListView), it seems as soon as you want to do something interesting, you HAVE to PInvoke&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762453">
				<div id="div-comment-762453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James Schend</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762453">
			August 13, 2009 at 6:40 pm</a>		</div>

		<p>About a year ago I was playing around with streaming webcam video. It surprised me how little support the .NET framework has for this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762463">
				<div id="div-comment-762463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://ra3s.com/wordpress/dysfunctional-programming/' rel='external nofollow' class='url'>aaron</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762463">
			August 13, 2009 at 7:17 pm</a>		</div>

		<p>Helpful reminder: the C# &quot;struct INPUT&quot; should be annotated with [StructLayout(LayoutKind.Sequential)]. Normal JIT behavior to lay out structs and classes in any order it desires (which in many versions happens to be the same as Sequential, but I understand may change without warning.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762473">
				<div id="div-comment-762473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://iansinke.tumblr.com/' rel='external nofollow' class='url'>Ian</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762473">
			August 13, 2009 at 7:27 pm</a>		</div>

		<p>Clearly, Raymond&#8217;s backlog is about 1.5 years, as this post (or so he seems to indicate in the link above) was written on January 24, 2008.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762483">
				<div id="div-comment-762483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762483">
			August 13, 2009 at 7:29 pm</a>		</div>

		<p>Isn&#8217;t there an attribute to explicitly declare the byte-packing for a struct? &nbsp;I know I&#8217;ve used it before.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762523">
				<div id="div-comment-762523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762523">
			August 13, 2009 at 9:01 pm</a>		</div>

		<p>Karellen: but Win32 was traditionally based in C. &nbsp;MS didn&#8217;t need a bool type, as it had BOOL standardised. &nbsp;However, various other houses had settled on enum/int/char, which is why C++ tried to fix it.</p>
<p>As for your final question, VC4.2 for one.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762533">
				<div id="div-comment-762533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762533">
			August 13, 2009 at 9:23 pm</a>		</div>

		<p>By the way, name decoration is of course internal to Microsoft&#8217;s linker, but DLL imports, COM and RPC are well defined, and they&#8217;re more the ABI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762553">
				<div id="div-comment-762553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762553">
			August 13, 2009 at 11:43 pm</a>		</div>

		<p>I was just about to post what aaron said above; there&#8217;s a sequential struct alignment missing, I think.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762513">
				<div id="div-comment-762513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762513">
			August 13, 2009 at 7:53 pm</a>		</div>

		<p>&quot;Meanwhile, C++ bool is not standardized by Win32, so the size will vary based on your compiler, but most compilers use a 1-byte value.&quot;</p>
<p>Huh? Given that the Win32 API and the Windows implementation of it is written by Microsoft, and /de facto/ reference compiler for the platform is the compiler which is also written by Microsoft, surely the Win32 ABI is by definition whatever the MS compiler does for the MS implementation of the MS API.</p>
<p>There was an interesting essay which touches on this subject of C++ ABIs, their various origins and relative usage, posted to the Qt Labs Blogs the other day, which seems to have come to the conclusion that MS defines the C++ ABI for Win32/Windows. &lt;<a rel="nofollow" target="_new" href="http://labs.trolltech.com/blogs/2009/08/12/some-thoughts-on-binary-compatibility/&gt;" rel="nofollow"></a><a href="http://labs.trolltech.com/blogs/2009/08/12/some-thoughts-on-binary-compatibility/&#038;gt" rel="nofollow">http://labs.trolltech.com/blogs/2009/08/12/some-thoughts-on-binary-compatibility/&#038;gt</a>;</p>
<p>Just out of curiosity, which compilers do *not* implement the C++ bool type as a 1-byte value when compiling for the Win32 target?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762583">
				<div id="div-comment-762583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762583">
			August 14, 2009 at 7:07 am</a>		</div>

		<p>Gah. System.Char is not a &#8216;Unicode character&#8217; &#8211; it is a UTF16LE code unit (and the MSDN documentation could use correcting).</p>
<p>The difference may not seem important at first glance &#8211; but I&#8217;m sure people who mis-use the Win32 API and think it&#8217;s OK because it works for them didn&#8217;t think that understanding the technology they were using was important either.</p>
<div class=post>[<i>See <a href="http://blogs.msdn.com/oldnewthing/archive/2007/01/05/1416853.aspx" rel="nofollow">What(&#8216;s) a character!</a> The article uses the term &#8220;character&#8221; in its common meaning of &#8220;storage character&#8221; or &#8220;code unit&#8221; rather than &#8220;linguistic character&#8221; or even &#8220;code point&#8221;.&nbsp;-Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762593">
				<div id="div-comment-762593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Garthy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762593">
			August 14, 2009 at 7:24 am</a>		</div>

		<p>On of the Biggest problems I had was interacting with the DDK accross 32/64 bit platforms pack value is 1 for 32bit but for 64bit platforms it&#8217;s 8</p>
<p>&nbsp; &nbsp;[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 1)]</p>
<p>&nbsp; &nbsp;public struct SP_DEVICE_INTERFACE_DETAIL_DATA_W_32</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;public int cbSize;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)]</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;public string DevicePath;</p>
<p>&nbsp; &nbsp;}</p>
<p>&nbsp; &nbsp;[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode, Pack = 8)]</p>
<p>&nbsp; &nbsp;public struct SP_DEVICE_INTERFACE_DETAIL_DATA_W_64</p>
<p>&nbsp; &nbsp;{</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;public int cbSize;</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)]</p>
<p>&nbsp; &nbsp; &nbsp; &nbsp;public string DevicePath;</p>
<p>&nbsp; &nbsp;}</p>
<p>This is a simple sturct but it causes problems all over the place</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762663">
				<div id="div-comment-762663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762663">
			August 14, 2009 at 1:35 pm</a>		</div>

		<p>&#8220;In Win32, BOOL is a 4-byte type, and BOOLEAN is a 1-byte type.&#8221;</p>
<p>You might want to add that VARIANT_BOOL is is a 2-byte type where 0 == FALSE and -1 == TRUE.</p>
<p>This is very important when declaring COM interfaces. For interfaces, the CLR marshals System.Boolean as a 2-byte type. A lot of COM interfaces use and mix the Win32 BOOL and VARIANT_BOOL. If the IDL (or the C/C++ header) declares a BOOL, make sure to decorate it with with a MarshalAsAttribute(UnmanagedType.Bool) in your .NET code.</p>
<div class=post>[<i>Excellent points, thanks for contributing. I&#8217;ve linked to your comment from the main article. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-762693">
				<div id="div-comment-762693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762693">
			August 14, 2009 at 2:52 pm</a>		</div>

		<p>Full ACK on pinvoke.net &#8211; whatever I tried to grab from there didn&#8217;t work. Been P/Invoking for more than two years without the site and my code happily runs on 32- and 64-bit systems.</p>
<p>@Raymond: Good summary of what you have to pay attention to!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-762903">
				<div id="div-comment-762903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MadQ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-762903">
			August 16, 2009 at 6:13 am</a>		</div>

		<p>@Nathan_works: Several years ago, I hand-rolled a large portion of the DirectShow API in C#. I needed the ability to manually build and manipulate filter graphs.</p>
<p>I also once wrote a pluggable protocol handler in C# (IInternetProtocol, etc.) to allow reading resources from .NET assemblies. Kinda like the res: protocol lets you read Win32 resources from executable files.</p>
<p>None of this would have been possible without InterOp.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-763093">
				<div id="div-comment-763093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-763093">
			August 17, 2009 at 4:19 pm</a>		</div>

		<p>@Raymond: By that definition, C/C++ char is also a &quot;Unicode character&quot;, since it stores UTF-8 code units just dandy. &nbsp;I agree that a pendantic definition of &#8216;character&#8217; vs code-point vs whatever isn&#8217;t needed, but &quot;UTF-16&quot; is in order to meaningfully describe the difference between C char, .NET System.Char === C# char, and gcc wchar32_t</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-763103">
				<div id="div-comment-763103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090813-00/?p=17113#comment-763103">
			August 17, 2009 at 4:22 pm</a>		</div>

		<p>Also, the part about C/C++ char being ANSI is just plain wrong. &nbsp;Win32 functions variously treat char strings as ANSI, the OEM code page, or any of a large number of other SBCS or MBCS formats.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

