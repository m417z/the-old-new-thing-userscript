<html>
<head>
<title>The PowerPC 600 series, part 12: Leaf functions</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The PowerPC 600 series, part 12: Leaf functions</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 21, 2018 / year-entry #190</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180821-00/?p=99535</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>4</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Making do with what you are given.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
On Windows NT for the PowerPC,
there is a leaf function optimization available provided
your function meets these criteria:
</p>
<ul>
<li>
    It calls no other functions.
</li>
<li>
    It does not have an exception handler.
</li>
<li>
    It does not need any stack space beyond
    stack space used by actual inbound parameters,
    the eight words of stack used as home space,&sup1;
    and the 232-byte red zone.
</li>
<li>
    It does not modify any nonvolatile registers.
</li>
</ul>
<p>
If all of these conditions are met, then the function does
not need to declare any function unwind codes,
and it does not
need to set up a stack frame.
It can reuse the stack frame of its caller.
In order for the system to be able to unwind out of
a lightweight leaf function,
the leaf function must keep its return address in the <var>lr</var>
register throughout the entire life of the function,
and it cannot move the stack pointer.
</p>
<p>
Conversely, if you fail to declare unwind codes for a function,
then the system assumes that it is a lightweight leaf function.
</p>
<p>
Here's a sample function that is a candidate for lightweight leaf
status:
</p>
<pre>
wchar_t* SkipLeadingSpacesAndTabs(wchar_t* s)
{
    while (*s == L' ' || *s == L'\t') s++;
    return s;
}
</pre>
<p>
This is how the Microsoft compiler generated the code for it:
</p>
<pre>
SkipLeadingSpacesAndTabs:
    lhz     r4,(r3)     ; load wchar_t into r4
    cmpwi   cr6,r4,0x20 ; Is it a space?
    beq     cr6,loop    ; Y: skip it
    cmpwi   cr7,r4,9    ; Is it a tab?
    bne     cr7,break   ; N: done
loop:
    lhzu    r4,2(r3)    ; Skip over current character and load next one
    cmpwi   cr6,r4,0x20 ; Is it a space?
    beq     cr6,loop    ; Y: skip it
    cmpwi   cr7,r4,9    ; Is it a tab?
    beq     cr7,loop    ; Y: continue
break:
    blr                 ; Return to caller, result already in r3
</pre>
<p>
For some reason, the Microsoft compiler likes to use
<var>cr6</var> and <var>cr7</var> as the targets for its comparison
instructions.
It probably wants to stay far away from <var>cr0</var>
and <var>cr1</var>,
which are implicitly updated by some instructions.
</p>
<p>
Notice that we used the <code>lhzu</code> instruction to
advance the <var>r3</var> register and then fetch a halfword from it.
This shows how the update version of a load instruction is handy
for walking through an array.
</p>
<p>
If we wanted to be clever, we could apply the following transformation.
First, un-unroll the loop:
</p>
<pre>
SkipLeadingSpacesAndTabs:
    lhz     r4,(r3)     ; load wchar_t into r4
    b       test
loop:
    lhzu    r4,2(r3)    ; Skip over current character and load next one
test:
    cmpwi   cr6,r4,0x20 ; Is it a space?
    beq     cr6,loop    ; Y: skip it
    cmpwi   cr7,r4,9    ; Is it a tab?
    beq     cr7,loop    ; Y: continue
break:
    blr                 ; Return to caller, result already in r3
</pre>
<p>
This seems like a pessimization, since we introduced a branch.
But now I can remove the branch by realizing that I can trick the
first iteration's <code>lhzu</code> to load the first halfword
of the string rather than the second:
Predecrement the value to counteract the preincrement!
</p>
<pre>
SkipLeadingSpacesAndTabs:
    subi    r3,r3,2     ; decrement to counteract the upcoming increment
loop:
    lhzu    r4,2(r3)    ; Skip over current character and load next one
    cmpwi   cr6,r4,0x20 ; Is it a space?
    beq     cr6,loop    ; Y: skip it
    cmpwi   cr7,r4,9    ; Is it a tab?
    beq     cr7,loop    ; Y: continue
break:
    blr                 ; Return to caller, result already in r3
</pre>
<p>
Finally, I can combine the results of the two comparisons so there
is only one branch that needs to be predicted:</p>
<pre>
SkipLeadingSpacesAndTabs:
    subi    r3,r3,2     ; decrement to counteract the upcoming increment
loop:
    lhzu    r4,2(r3)    ; Skip over current character and load next one
    cmpwi   cr6,r4,0x20 ; Is it a space?
    cmpwi   cr7,r4,9    ; Is it a tab?
    cror    4*cr7+eq,4*cr6+eq,4*cr7+eq ; Is it either?
    beq     cr7,loop    ; Y: continue
    blr                 ; Return to caller, result already in r3
</pre>
<p>
I don't know whether this performs better than the original code,
but it
is four instructions shorter,
consumes one fewer branch prediction slot,
and simply looks cooler.
I win on style points,
but I could very well lose on real-world performance.
</p>
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20180822-00/?p=99545">
Next time</a>,
we'll look at common patterns for branches and calls.
</p>
<p>
&sup1;
As I noted earlier, you are allowed to use all of the home space
even if your function doesn't have that many parameters.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (4)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1356975">
				<div id="div-comment-1356975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wyatt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180821-00/?p=99535#comment-1356975">
			August 21, 2018 at 8:02 am</a>		</div>

		<p>Shouldn&#8217;t the line &#8220;cror eq,4*cr6+eq,4*cr7+eq&#8221; be &#8220;cror 4*cr7+eq,4*cr6+eq,4*cr7+eq&#8221;?  Admittedly, I only marginally understand this, but I would think as written, &#8220;eq&#8221; would store the bit in the equality bit of cr0, which is not what you use in your beq instruction.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1356995">
				<div id="div-comment-1356995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180821-00/?p=99535#comment-1356995">
			August 21, 2018 at 9:49 am</a>		</div>

		<p>Derp, you&#8217;re right.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1357015">
				<div id="div-comment-1357015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180821-00/?p=99535#comment-1357015">
			August 21, 2018 at 12:21 pm</a>		</div>

		<p>I must be reading this wrong. The assembly appears to be exploring another global symbol &#8220;loop&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1357035">
				<div id="div-comment-1357035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180821-00/?p=99535#comment-1357035">
			August 21, 2018 at 6:35 pm</a>		</div>

		<p>&gt;For some reason, the Microsoft compiler likes to use cr6 and cr7 as the targets for its comparison instructions.<br />
&gt;It probably wants to stay far away from cr0 and cr1, which are implicitly updated by some instructions. </p>
<p>&#8220;OK guys, we don&#8217;t want to go anywhere near cr0 and cr1.  cr2 and cr3 are probably out too, they&#8217;re right next door.  cr4 is married to cr1&#8217;s cousin so that&#8217;s out, and then cr5 plays golf with cr0 every other Saturday, so that leaves us with cr6 and cr7&#8221;.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

