<html>
<head>
<title>How can I wait until all startup applications have finished launching?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I wait until all startup applications have finished launching?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 12, 2014 / year-entry #266</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer wanted to know how to detect that all startup applications have finished launching. They wanted to wait until everything settled down before proceeding with some task. What if two programs did this? Suppose two programs both wanted to detect that all startup applications have finished launching. Each one would sit there waiting for...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer wanted to know how to detect that all startup applications have finished launching. They wanted to wait until everything settled down before proceeding with some task.</p>
<p> What if two programs did this? </p>
<p> Suppose two programs both wanted to detect that all startup applications have finished launching. Each one would sit there waiting for the other, because this is one of those <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/06/07/426294.aspx"> I want to be the last to do something, even laster than the other guy who wants to do something last</a> things. </p>
<p> If you want to wait until the system is idle to perform some task, you can use the Task Scheduler to create an idle-time task. This has the benefit of coordinating multiple idle-time tasks so that you don't have the phenomenon of two applications both trying to do things when they think nobody else is doing anything, resulting in an <a href="http://wordsmith.org/words/alphonse_and_gaston.html"> Alphonse-and-Gaston</a> state: The system goes idle, and both Alphonse and Gaston start doing their idle-time tasks. But Alphonse notices that Gaston is busy and backs off; at the same time, Gaston notices that Alphonse is busy and backs off. Now the system is idle again, and both Alphonse and Gaston start their idle-time tasks, and the cycle continues. The computer gets into this weird state where it keeps waking up, going to sleep, waking up, going to sleep, and never actually making progress. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1161543">
				<div id="div-comment-1161543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161543">
			November 12, 2014 at 7:04 am</a>		</div>

		<p>Well that assumes utter idiocicy to get into the problem state. Set thy priority and thy IO priority to very low then try to work.</p>
<div class="post">[<em>They want their task to run at high priority, but after the startup apps are finished launching. Setting their task to low priority would not accomplish that, because it would then be interrupted by non-startup tasks. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161553">
				<div id="div-comment-1161553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Count Zero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161553">
			November 12, 2014 at 7:05 am</a>		</div>

		<p>I understand why it isn&#39;t possible, but&#8230; </p>
<p>:heavy breathing: </p>
<p>&#8230;you have to admit it would be nice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161563">
				<div id="div-comment-1161563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">acq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161563">
			November 12, 2014 at 7:16 am</a>		</div>

		<p>Thanks for &quot;Alphonse and Gaston&quot; tip, one good full comic:</p>
<p><a rel="nofollow" target="_new" href="http://1.bp.blogspot.com/_H3uQvpZPI9A/S9n0PjebiPI/AAAAAAAAF6U/WVyRVvh6yuM/s1600/Alphonse+and+gaston2.jpg">1.bp.blogspot.com/&#8230;/Alphonse+and+gaston2.jpg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161573">
				<div id="div-comment-1161573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161573">
			November 12, 2014 at 8:38 am</a>		</div>

		<p>The problems start with the first sentence. &quot;Finished launching&quot;. What&#39;s the definition of &quot;finished launching&quot;? The kernel started the initial thread? The process entered wWinMain? The process created at least one window or notification icon? The process is waiting for the next event with an empty event queue? What if the process has more than one thread with an event loop? And so on.</p>
<p>As for &quot;what if two programs did this&quot;, I have an easy solution. Suppose hypothetically that we have two functions, IFinishedLaunching() and WaitForEveryoneToFinishLaunching(). Simply make WaitForEveryoneToFinishLaunching() imply IFinishedLaunching() as its first action (before waiting). Then there will be no risk of deadlock, the barrier will release once everyone has called either of these functions. Replace IFinishedLaunching() by whatever implicit action you want (idle in the event loop, created a window, etc) and you have a usable WaitForEveryoneToFinishLaunching() function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161583">
				<div id="div-comment-1161583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161583">
			November 12, 2014 at 8:55 am</a>		</div>

		<p>&quot;Even laster&quot;? &nbsp;I like that! &nbsp;I want to be lastest!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161593">
				<div id="div-comment-1161593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161593">
			November 12, 2014 at 9:34 am</a>		</div>

		<p>&#8230; and there are various &quot;startup delayer&quot; programs around. &nbsp;Some of them have an option to wait until the system is &quot;idle enough&quot; (this is configurable) after system boot, and then they can launch one or more programs. &nbsp;This is very similar to what Raymond suggests with an idle-time scheduled task.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161603">
				<div id="div-comment-1161603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161603">
			November 12, 2014 at 9:52 am</a>		</div>

		<p>Finally&#8230;. &nbsp;once you have detected that all startup tasks have finished, if the user &quot;wanted to wait until everything settled down before proceeding with some task&quot;, they very likely fire off their task and they are done with it. &nbsp;</p>
<p>When you say &quot;What if two programs did this&quot; and &quot;But Alphonse notices that Gaston is busy and backs off&quot;, that&#39;s likely beyond the scope of the original problem. &nbsp;The original problem was how to wait and then fire off a task. &nbsp;How to create a task that runs at &quot;high priority yet backs off if the system is not idle&quot; is a conceptual mind warp anyway. &nbsp;:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161613">
				<div id="div-comment-1161613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161613">
			November 12, 2014 at 1:32 pm</a>		</div>

		<p>Typical viewpoint of a manager, complete failure to grasp the concept of multitasking.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161643">
				<div id="div-comment-1161643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nico</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161643">
			November 12, 2014 at 3:01 pm</a>		</div>

		<p>Reminds me of a question on Stack Exchange a while back: <a rel="nofollow" target="_new" href="http://superuser.com/questions/729738/">superuser.com/&#8230;/729738</a></p>
<p>At the time I didn&#39;t consider an on-idle task. &nbsp;That&#39;s got me curious though how well it works for system startup (which will depend on the definition of &quot;idle&quot; I guess). &nbsp;However, at first glance (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/windows/desktop/aa383561%28v=vs.85%29.aspx">msdn.microsoft.com/&#8230;/aa383561%28v=vs.85%29.aspx</a>) it appears that the check is only made every 15 minutes on Windows 7. &nbsp;Might not work the best for that scenario.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161653">
				<div id="div-comment-1161653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161653">
			November 12, 2014 at 3:33 pm</a>		</div>

		<p>@Yuri: Typical viewpoint of a manager, complete failure to grasp the concept of multitasking.</p>
<p>Except multitasking is a leaky abstraction. Competition for resources between two processes will slow both down, and in the case of I/O in particular I&#39;m nearly positive it is even very possible that Time(X and Y simultaneously) can be rather higher than Time(X alone) + Time(Y alone).</p>
<p>As a result of that fact, there are a number of reasons why one could quite reasonably either not want to slow down the startup tasks or not want the startup tasks to slow down your task.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1161663">
				<div id="div-comment-1161663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161663">
			November 12, 2014 at 3:56 pm</a>		</div>

		<p>I have an application that (kind of) needs to do this: the scripting engine that installs software for me in our teaching labs. &nbsp;(Basically a homegrown version of the Microsoft Deployment Toolkit, originally developed before MDT existed.)</p>
<p>It turned out that if the scripting engine launched an installer too soon after logon, the UI automation would sometimes behave erratically, because too many startup applications were stealing focus unexpectedly, and sometimes this would happen at just the wrong time. &nbsp;So I needed it to wait until things settled down a bit before getting started. &nbsp;(If you&#39;ve got two scripting engines running on the same machine at the same time, whether they start up properly is the least of your problems, so that at least wasn&#39;t an issue.)</p>
<p>I didn&#39;t spend a lot of time thinking about it, as I recall. &nbsp;Launching the application via the startup menu got me most of the way there, because they don&#39;t get launched until Explorer is well and truly ready to do so, and then I just stuck in a 30-second wait. &nbsp;In the grand scheme of things, an extra 30 seconds per reboot is negligible. &nbsp;But then, I&#39;m the only person who uses this software, so I can afford to take a pragmatic approach to coding it. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1161673">
				<div id="div-comment-1161673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161673">
			November 12, 2014 at 5:28 pm</a>		</div>

		<p>It&#39;s like asking &quot;how can I change the program so it&#39;ll reserve at least 50% of overall CPU time for other process?&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161733">
				<div id="div-comment-1161733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike S</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161733">
			November 13, 2014 at 8:39 am</a>		</div>

		<p>I&#39;ve been in this situation, where starting up everything at once would hammer the database, making the DBAs scream. So we had a launcher which would launch a couple of apps, wait for them to signal that their initial load to finish, and then launch a few more. It worked pretty well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161773">
				<div id="div-comment-1161773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161773">
			November 13, 2014 at 9:45 am</a>		</div>

		<p>Funnily enough, ethernet (on a shared medium, not a star topology) does exactly this. Everyone who has data to transmit waits for the line to go quiet. The trick is that everyone then waits for a random period before trying and monitors the state of the line whilst they are doing so.</p>
<p>I imagine something similar would work for this customer. They aren&#39;t certain to be the lastest last, but they&#39;d be last enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161783">
				<div id="div-comment-1161783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161783">
			November 13, 2014 at 9:47 am</a>		</div>

		<p>To clarify my previous reply. They&#39;d be laster than anyone else who wasn&#39;t using the same algorithm, which means they&#39;d do their work after all those tasks that couldn&#39;t wait.</p>
<p>Obviously if you really want to be last then you need to hook shutdown, not startup.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1161953">
				<div id="div-comment-1161953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161953">
			November 13, 2014 at 2:33 pm</a>		</div>

		<p>@Evan</p>
<p>it is even very possible that Time(X and Y simultaneously) can be rather higher than Time(X alone) + Time(Y alone)</p>
<p>This is pretty much the point that multitasking doesn&#39;t allow. You cannot enforce Time(X alone) + Time(Y alone) in the Windows multitasking environment. The solution of launching an idle-time task solves the &#39;Run when ressources are available&#39; problem while still allowing to launch other task simultaneously. A hard requirement to do Time(X alone) + Time(Y alone) would require an OS optimized for real-time process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1161993">
				<div id="div-comment-1161993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1161993">
			November 13, 2014 at 10:31 pm</a>		</div>

		<p>Having the background of embedded real-time systems, where the CPU load is not allowed to go bellow 70% (or the management will consider a cheaper CPU in order to make it more economically feasible), this is a non issue for me. Read entries in registry for start-up applications, give them a bit of time to launch, check they finally settled in with their main window(s) and verify the overall CPU load. If lower then 10%, fire my high priority thread and be done with it. And also make it a wait maximum of 5 minutes. Job accomplished, in worse case scenario of 2 applications using same algorithm, one will start 5 minutes later, still doing real work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1162043">
				<div id="div-comment-1162043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162043">
			November 14, 2014 at 6:03 am</a>		</div>

		<p>DWalker says it best with &quot;idle enough&quot;. &nbsp;The customer was probably wanting to know how to delay until the system has quieted down so that his task doesn&#39;t make an already busy system slower. &nbsp;We&#39;ve all had that frustration of logging in to a system being tricked by a desktop that looked ready, but was totally unresponsive to input. &nbsp;I think the customer&#39;s question is being interpreted too literally and the &quot;us the Task Scheduler&quot; suggestion was probably exactly what they needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1162053">
				<div id="div-comment-1162053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162053">
			November 14, 2014 at 6:04 am</a>		</div>

		<p>@Harry Johnston: &quot;&#8230;at just the wrong time.&quot;</p>
<p>This would lead me to conclude that you&#39;ve got some sort of race condition going on. &nbsp;By waiting, you reduce the likelihood of it occurring, but do not fix the underlying problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1162113">
				<div id="div-comment-1162113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162113">
			November 14, 2014 at 10:09 am</a>		</div>

		<p>I wish windows update could be set to high priority when system is idle.</p>
<p>Installing updates takes an hour but cpu is stuck at 50 percent.</p>
<div class="post">[<em>It&#39;s not a priority issue. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/12/02/499389.aspx">It&#39;s because your machine is dual-core</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1162143">
				<div id="div-comment-1162143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hans</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162143">
			November 14, 2014 at 12:21 pm</a>		</div>

		<p>OK, I was under the impression windows update was programmed explicitly to not hog the cpu so user tasks could run too.</p>
<p>But if this is not the case as you state, why they are not multithreaded to take use of all cores?</p>
<div class="post">[<em>You&#39;d have to ask them. My guess is that the code is intended to run when nobody is there, so who cares how many cores it uses? (Besides, you probably don&#39;t want to be installing multiple updates in parallel.) -Raymond</em>],/DIv&gt;</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston odd alt thread-odd thread-alt depth-1" id="comment-1162193">
				<div id="div-comment-1162193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162193">
			November 16, 2014 at 4:28 pm</a>		</div>

		<p>@Mark K: yes, exactly.</p>
<p>The simplest example is when you&#39;re generating synthetic keystrokes. &nbsp;You have to activate the window you want, wait a bit to make sure it&#39;s ready, then generate the keystroke. &nbsp;If another process jumps up and steals focus, the keystroke will go to it instead of the window it was meant for. &nbsp;I don&#39;t think there&#39;s any reasonable way to prevent it.</p>
<p>Even with more sophisticated techniques, my experience suggests that you can still run into trouble, though it isn&#39;t as common. &nbsp;If you&#39;re automating a button push, say, the target application might not always behave as expected if another application steals focus at the same time. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1162213">
				<div id="div-comment-1162213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162213">
			November 16, 2014 at 11:36 pm</a>		</div>

		<p>@Harry Johnson: &quot;I don&#39;t think there&#39;s any reasonable way to prevent it.&quot;</p>
<p>Well, unless you could send a keystroke to a window without a focus, but how crazy would that be?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1162313">
				<div id="div-comment-1162313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162313">
			November 17, 2014 at 3:57 pm</a>		</div>

		<p>Joker_vD: It&#39;s quite likely that the standard SendKeys method doesn&#39;t have a way to send a keystroke to a window without focus.</p>
<p>But even so if it did, that doesn&#39;t solve the problem of not being able to click on a window that isn&#39;t on top. How can you automate dismissing a popup window if you can&#39;t guarantee that there won&#39;t be a window covering it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston even thread-even depth-1" id="comment-1162323">
				<div id="div-comment-1162323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162323">
			November 17, 2014 at 5:15 pm</a>		</div>

		<p>@Gabe: yes, the supported methods for synthesizing a keystroke don&#39;t allow you to send it to any particular application, it is added to a global queue in the same way as an actual keystroke.</p>
<p>It should in theory be possible to send the appropriate window messages to a specific application &quot;as if&quot; a keystroke had been received, but in practice I gather this is a lot harder than it sounds. &nbsp;(Besides, if an application receives a message at a time when it knows that message shouldn&#39;t be possible, the results may be unpredictable.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1162333">
				<div id="div-comment-1162333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joker_vD</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162333">
			November 18, 2014 at 12:05 am</a>		</div>

		<p>@Gabe: Well, again, get the window&#39;s handle, and send it WM_LBUTTONDOWN and WM_LBUTTONUP messages.</p>
<p>@Harry Johnston: Since the application doesn&#39;t control its environment, but the environment controls the application (duh), the application really shouldn&#39;t make arbitrary assumptions about what environment will do. If it&#39;s possible for any thread to send any message to any window, then there is no such thing as a &quot;message that shouldn&#39;t be possible at this time&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1162553">
				<div id="div-comment-1162553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Beldantazar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141112-00/?p=43633#comment-1162553">
			November 18, 2014 at 5:07 pm</a>		</div>

		<p>@Joken_vD: Because we all know how developers never make stupid assumptions about what can and can&#39;t happen.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

