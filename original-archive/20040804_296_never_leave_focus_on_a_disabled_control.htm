<html>
<head>
<title>Never leave focus on a disabled control</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Never leave focus on a disabled control</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 4, 2004 / year-entry #297</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the big no-no's in dialog box management is disabling the control that has focus without first moving focus somewhere else. When you do this, the keyboard becomes dead to the dialog box, since disabled windows do not receive input. For users who don't have a mouse (say, because they have physical limitations that...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of the big no-no's in dialog box management is disabling
the control that has focus without first moving focus somewhere
else.
When you do this, the keyboard becomes dead to the dialog box,
since disabled windows do not receive input.
For users who don't have a mouse (say, because they have physical
limitations that confine them to the keyboard),
this kills your dialog box.
</p>
<p>
(I've seen this happen even in Microsoft software.
It's very frustrating.)
</p>
<p>
Before you disable a control, check whether it has focus.
If so, then move focus somewhere else before you disable it,
so that the user isn't left stranded.
</p>
<p>
If you don't know which control focus should go to,
you can always let the dialog manager decide.
<a HREF="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/DialogBoxes/DialogBoxReference/DialogBoxMessages/WM_NEXTDLGCTL.asp">
The WM_NEXTDLGCTL message</a> once again comes to the rescue.
</p>
<pre>
void DialogDisableWindow(HWND hdlg, HWND hwndControl)
{
  if (hwndControl == GetFocus()) {
    SendMessage(hdlg, WM_NEXTDLGCTL, 0, FALSE);
  }
  EnableWindow(hwndControl, FALSE);
}
</pre>
<p>
(And of course you should never disable the last control on a dialog.
That would leave the user completely stranded with no hope of escape!)
</p>
<p>
[This was supposed to go out yesterday but the autoblog
tool had a bad day and forgot to post this. Sorry.]</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-200913">
				<div id="div-comment-200913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-200913">
			August 4, 2004 at 10:32 am</a>		</div>

		<p>And don&#8217;t forget to disable controls when you hide them!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-200973">
				<div id="div-comment-200973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shay Erlichmen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-200973">
			August 4, 2004 at 12:04 pm</a>		</div>

		<p>Well Mr. Chen, If it&#8217;s such a no-no to disbale a focus control why to you allow it. (#define you Microsoft).<br />
<br />Why doens&#8217;t it give you an error if you try to disbale a focus control?, let me take a wild guess: In Windows 2.0 some MS software counts on this behaviour.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201003">
				<div id="div-comment-201003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mannu.livejournal.com/' rel='external nofollow' class='url'>Manish Jethani</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201003">
			August 4, 2004 at 12:18 pm</a>		</div>

		<blockquote><p>
  For users who don&#8217;t have a mouse (say, because they have physical limitations that confine them to the keyboard)</p>
<p>&#8230; or because the mouse is not such a good input device after all, especially for filling out forms.<br />
  
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201023">
				<div id="div-comment-201023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke [exMSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201023">
			August 4, 2004 at 12:47 pm</a>		</div>

		<p>Shay: It&#8217;s quite simple. If you&#8217;re programming win32, you&#8217;re expected to know what you&#8217;re doing. You&#8217;re expected to be a reasonably intelligent software engineer, who understands the consequences of their actions.</p>
<p>Why doesn&#8217;t it give you an error? Because not all controls that can take focus and can be marked disabled are used in dialogs, and those other controls may have different behavior.</p>
<p>If you want a system which mollycoddles you with defensive programming to the nth degree regardless of whether or not it makes sense for all use cases, might I suggest Visual Basic? Or perhaps Tcl/tk?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201083">
				<div id="div-comment-201083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike Weller</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201083">
			August 4, 2004 at 4:25 pm</a>		</div>

		<p>Just last week I implemented this very same thing.</p>
<p>The only other problems I&#8217;m having are because I&#8217;m using controls in a non-dialog window, with IsDialogMessage(&#8230;) in the main message loop.</p>
<p>This enables dialog keyboard navigation, but doesn&#8217;t handle everything quite correctly.  When the main window loses focus, and you return to it, the default button is still &#8216;default&#8217; but without the keyboard focus!  That and a few other niggles.</p>
<p>But I can live with it &#8211; I know I should be using a dialog box instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201093">
				<div id="div-comment-201093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Puzzled exAAPL guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201093">
			August 4, 2004 at 4:46 pm</a>		</div>

		<p>Simon, I really don&#8217;t understand your logic.</p>
<p>What useful capability would you lose in this case if the dialog manager did something sensible instead of allowing the programmer to shoot himself in the foot?</p>
<p>Could you elaborate (in a technical manner, without insulting my intelligence, please)?</p>
<p>&#8216;Cause from my perspective, it just looks like something the Dialog Manager programmers originally forgot to implement. Why not fix it for everyone at the source?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201103">
				<div id="div-comment-201103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201103">
			August 4, 2004 at 4:56 pm</a>		</div>

		<p>Often a dialog box will want to disable one window and enable another. If it did them in that order, then the disable would fail and you would now have two enabled buttons instead of the one button that the program intended.</p>
<p>And what if you really wanted to disable the last window on the dialog? Say because all of the options are unavailable?</p>
<p>This could lead to serious problems, since the app might accidentally leave the &quot;send&quot; button enabled when it should be disabled. The user clicks the button and now something that shouldn&#8217;t have been sent got sent.</p>
<p>But the upshot is that the window manager&#8217;s design is to do what you tell it, not to second-guess you.  To paraphrase Doug Gwyn, &quot;The window manager was not designed to stop you from doing stupid things because that would also stop you from doing clever things.&quot;</p>
<p>For example, suppose your program&#8217;s design was to &quot;disable everything, then selective re-enable what you want to enable.&quot;  That would not be possible if the dialog manager didn&#8217;t allow you disable the last control on a dialog.</p>
<p>And besides, EnableWindow operates at the window manager level, not the dialog manager. So it couldn&#8217;t prevent you from doing it even if it wanted to. (It doesn&#8217;t know that the window is on a &quot;dialog&quot;; all it sees is &quot;Hey here&#8217;s a window and the program wants to disable it.&quot;)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201153">
				<div id="div-comment-201153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201153">
			August 4, 2004 at 8:49 pm</a>		</div>

		<ol>
<li>Suppose the function (or message or whatever) that disables a control would check if the control has focus and, if so, automatically change the focus to the window that contains the control.
<p>For comparison, if an application is running in one window, if the user minimizes or closes the application, then focus sometimes changes to another application&#8217;s window or sometimes changes to no window at all.  If the user types on the keyboard while no window has focus, the input is ignored, but nothing is dead.  The user can still click any window or press alt+tab or even restore the window that the user had just minimized.</p>
<p>2.  An interesting pair of notes here.</p>
<p>8/4/2004 12:47 PM Simon Cooke [exMSFT]:<br />
<br />&gt; You&#8217;re expected to be a reasonably<br />
<br />&gt; intelligent software engineer, who<br />
<br />&gt; understands the consequences of their<br />
<br />&gt; actions.</p>
<p>and the base note:<br />
<br />&gt; (I&#8217;ve seen this happen even in Microsoft<br />
<br />&gt; software.</p>
<p>Well, maybe it&#8217;s fine to expect every Win32 programmer to be more reasonably intelligent and understanding than some Microsoft software engineers who programmed in Win32.</p>
<p>But what about MFC programmers?  An edit box might come from CEdit, whose member function EnableWindow is inherited from CWnd.  The MSDN Library for CWnd mentions that disabling a window implicitly disables child windows but doesn&#8217;t mention the parent window.  It also says:<br />
<br />+ An application can use this function to<br />
<br />+ enable or disable a control in a dialog box.<br />
<br />+ A disabled control cannot receive the input<br />
<br />+ focus, nor can a user access it.<br />
<br />This also doesn&#8217;t warn that all keyboard access to the dialog box dies with it.  If you wish for MFC programmers to also be more reasonably intelligent and understanding than some Microsoft programmers are, then surely Mr. Chen&#8217;s warning does need to be added to the MSDN Library.</li>
</ol>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201183">
				<div id="div-comment-201183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201183">
			August 4, 2004 at 11:16 pm</a>		</div>

		<p>&quot;Suppose the function (or message or whatever) that disables a control would check if the control has focus and, if so, automatically change the focus to the window that contains the control.&quot;</p>
<p>Sure it could&#8217;ve done that but that doesn&#8217;t often help (for example, putting focus on the dialog box frame doesn&#8217;t accomplish much of anything), and sometimes it&#8217;s undesirable. E.g., in the &quot;disable everything then re-enable what you want&quot; scenario, this would end up moving focus to the frame even though nothing &quot;happened&quot;.</p>
<p>At any rate, it&#8217;s too late to change the behavior now.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201243">
				<div id="div-comment-201243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201243">
			August 5, 2004 at 5:31 am</a>		</div>

		<p>What&#8217;s wrong with having a new dialog manager that has roughly the same design as the old one but is cleaned up? That way new code could be written (or ported) against saner APIs. This is the sort of versioning used on Linux with Qt and GTK+, and it works very well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201253">
				<div id="div-comment-201253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201253">
			August 5, 2004 at 6:06 am</a>		</div>

		<p>This is a problem with the winapi and MSDN in particular. Some of the functions have some logic to do the right thing and some of them are just low level functions that expect the user to do all the smarts. I can&#8217;t think of a function off the top of my head right now but for example lets say you&#8217;re writing a streams class and have a member called close(). The obvious thing to do would have the stream class call flush() inside the close() call (this is analagous to your argument about having the function change the focus to the next window on a call to disable). You can argue it both ways but the problem boils down to MSDN not explicitly stating what will happen in this case. So it&#8217;s up to you to experiment and that is no guarantee it will work with the ever changing future versions of Windows. Funny Shay brought up DeleteObject. I somewhat remember in 16 bit windows that if you did that call on a system object, bad things would happen unlike the modern versions of windows where it would just ignore it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201303">
				<div id="div-comment-201303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201303">
			August 5, 2004 at 7:41 am</a>		</div>

		<p>Simon:</p>
<p>The dialog manager may be seperate from the window manager, but Windows was designed with dialogs in mind.  Therefore, for the window manager to have no left the appropriate hooks for the dialog manager to handle such mundane things as this is a problem in the design.</p>
<p>If you design an API where common tasks can be done wrong so easily without obvious error or incident, and the <em>right</em> way to do them requires everyone doing it to write their own helper function, then the system is flawed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201383">
				<div id="div-comment-201383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201383">
			August 5, 2004 at 8:54 am</a>		</div>

		<p>Activation does get moved around automatically and even though the window manager is trying to do &quot;the right thing&quot; you still have to be careful or you get undesired behavior: </p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/02/27/81155.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/02/27/81155.aspx</a> </p>
<p>So no matter how you design it, it&#8217;s still subtle and people will get it wrong.  Historically, remember, the window manager was designed for computers with 640K of memory. It couldn&#8217;t be too fancy; there wasn&#8217;t enough memory to be fancy.</p>
<p>(And giving the window manager special hooks into the dialog manager violates the principles of layered architectures. The lower level should not be aware of the upper level. If it did, then it would be impossible for people to write their own dialog manager since the window manager would talk to the &quot;native&quot; dialog manager instead of their custom one.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201233">
				<div id="div-comment-201233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Shay Erlichmen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201233">
			August 5, 2004 at 3:48 am</a>		</div>

		<p>I&#8217;ve been programming in Win32 API for ages now and I consider myself a *clever* Win32 programmer.<br />
<br />The example that Mr. Chen gives is one of many behaviors that I need to take into account each time that I want to write a Win32 programmer.<br />
<br />Not all Win32 programmer are cleaver and that tend to make many mistake (DeleteObject anyone?). I Guess that&#8217;s why BoundsChecker and friends are so popular. The Win32 API is dead, The only problem is that even more advance APIs like WinForms and Avalon (in the past it was MFC and WTL) have ridiculous legacy that will probably make this blog valid till the 22 century</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-201593">
				<div id="div-comment-201593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201593">
			August 5, 2004 at 4:33 pm</a>		</div>

		<p>Raymond:<br />
<br />I didn&#8217;t say that window manager would hook directly into the dialog manager, but that it would &quot;leave hooks&quot; for the dialog manager.  Meaning that there would be hooks that a dialog manager could use, or any other similar manage could use.</p>
<p>While you can&#8217;t design a general system knowing what every client would when, when you have example clients (like dialogs) that have specific needs, you can put the functionality in so that clients (including the dialog manager) can service those needs with minimal effort.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-201843">
				<div id="div-comment-201843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.lingolanguage.com' rel='external nofollow' class='url'>Bill Rayer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040804-00/?p=38243#comment-201843">
			August 7, 2004 at 1:10 pm</a>		</div>

		<p>&quot;Never leave focus on a disabled control&quot;</p>
<p>I&#8217;ve spent some time implementing a dialog manager similar to the one built into Windows, as part of <a target="_new" href="http://www.lingolanguage.com" rel="nofollow">http://www.lingolanguage.com</a> and have issues with this comment!</p>
<p>First, if you call EnableWindow(hCtl,FALSE) for EDIT or BUTTON classes (pushbuttons) the spacebar still presses the button, and keystrokes still feed into the edit control. So it is not quite correct to say the keyboard becomes dead. </p>
<p>Second, if you call EnableWindow(hWnd,FALSE) for a pseudo-dialog (eg a WS_OVERLAPPED window containing child controls) the control with the focus retains the focus.</p>
<p>Finally, in some cases it&#8217;s necessary to disable a window and leave the focus on a control in a window. Eg consider a dialog with a push button to run an external program that displays a window &#8211; we want the focus to stay in the temporarily disabled dialog, and allow the external program to run in a window that is not made active. By doing this the focus returns to the original dialog when it is re-enabled.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

