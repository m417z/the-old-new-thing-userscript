<html>
<head>
<title>What's the guidance on when to use rundll32? Easy: Don't use it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the guidance on when to use rundll32? Easy: Don&#8217;t use it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 4, 2013 / year-entry #4</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Occasionally, a customer will ask, "What is Rundll32.exe and when should I use it instead of just writing a standalone exe?" The guidance is very simple: Don't use rundll32. Just write your standalone exe. Rundll32 is a leftover from Windows 95, and it has been deprecated since at least Windows Vista because it violates a lot...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Occasionally, a customer will ask, "What is Rundll32.exe and when should I use it instead of just writing a standalone exe?"</p>
<p> The guidance is very simple: Don't use rundll32. Just write your standalone exe. </p>
<p> Rundll32 is a leftover from Windows&nbsp;95, and it has been deprecated since at least Windows Vista because it violates a lot of modern engineering guidelines. If you run something via Rundll32, then you lose the ability to tailor the execution environment to the thing you're running. Instead, the environment is set up for whatever Rundll32 requests. </p>
<ul>
<li>Data Execution Prevention policy cannot be applied to     a specific Rundll32 command line.     Any policy you set applies to all Rundll32 commands. </li>
<li>Address Space Layout Randomization cannot be applied to     a specific Rundll32 command line.     Any policy you set applies to all Rundll32 commands. </li>
<li>Application compatibility shims cannot be applied to     a specific Rundll32 command line.     Any application compatibilty shim you enable     will be applied to all Rundll32 commands. </li>
<li>SAFER policy cannot be applied to     a specific Rundll32 command line.     Any policy you set applies to all Rundll32 commands. </li>
<li>The Description in Task Manager will be Rundll32's     description,     which does not help users identify what the     specific Rundll32 instance is doing. </li>
<li>You cannot apply a manifest to     a specific Rundll32 command line.     You have to use the manifest that comes with Rundll32.     (In particular, this means that your code must be     high DPI aware.) </li>
<li>The Fault Tolerant Heap cannot be enabled for     a specific Rundll32 command line.     Any policy you set applies to all Rundll32 commands. </li>
<li>All Rundll32.exe applications are treated as the same program     for the purpose of determining which applications are     most frequently run. </li>
<li>Explorer tracks various attributes of an application     based on the executable name,     so all Rundll32.exe commands will be treated     as the same application.     (For example, all windows hosted by Rundll32 will group together.) </li>
<li>You won't get any Windows Error Reporting reports for crashes     in your Rundll32.exe command line, because they all got sent     to the registered owner of Rundll32.exe (the Windows team). </li>
<li>Many environmental settings are implied by the executable.     If you use Rundll32, then those settings are not chosen by you     since you didn't control how Rundll32 configures its environment.     
<ul>
<li>Rundll32 is marked as         <a href="http://msdn.microsoft.com/library/01cfys9z">         <code>TSAWARE</code></a>, so your Rundll32 command must be         Terminal Services compatible.     </li>
<li>Rundll32 is marked as         <a href="http://msdn.microsoft.com/library/wz223b1z">         <code>LARGE&shy;ADDRESS&shy;AWARE</code></a>,         so your Rundll32 command         <a href="http://blogs.msdn.com/b/oldnewthing/archive/2004/08/12/213468.aspx">         must be 3GB-compatible</a>.     </li>
<li>Rundll32 specifies its         <a href="http://msdn.microsoft.com/library/8cxs58a6">         preferred stack reserve and commit</a>,         so you don't control your stack size.     </li>
<li>Rundll32 is marked as compatible with the version of         Windows it shipped with,         so it has opted into all new behaviors (even the breaking ones),         such as automatically getting the         <code>Heap&shy;Enable&shy;Termination&shy;On&shy;Corruption</code>         flag set on all its heaps.     </li>
</ul>
</li>
<li>Windows N+1 may add a new behavior that Rundll32 opts into,     but which your Rundll32 command line does not support.     (It can't, because the new behavior didn't exist at the time     you wrote your Rundll32 command line.)     As you can see, this has happened many times in the past     (for example,     high DPI, Terminal Services compatibility, 3GB compatibility),     and it will certainly happen again in the future. </li>
</ul>
<p> You get the idea. </p>
<p> Note also that Rundll32 assumes that the entry point you provide corresponds to a task which pumps messages, since it creates a window on your behalf and passes it as the first parameter. A common mistake is writing a Rundll32 entry point for a long-running task that does not pump messages. The result is an unresponsive window that <a href="http://blogs.msdn.com/b/oldnewthing/archive/2005/03/10/392118.aspx"> clogs</a> <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/09/26/772222.aspx"> up</a> <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/02/10/529525.aspx"> broadcasts</a>. </p>
<p> Digging deeper, one customer explained that they asked for guidance making this choice because they want to create a scheduled task that runs code inside a DLL, and they wanted to decide whether to create a Rundll32 entry point in their DLL, or whether they should just create a custom executable whose sole job is loading the DLL and calling the custom code. </p>
<p> By phrasing it as an either/or question, they missed the third (correct) option: Create your scheduled task with an <a href="http://msdn.microsoft.com/en-us/library/aa380613.aspx"> <code>ICom&shy;Handler&shy;Action</code></a> that specifies a <code>CLSID</code> your DLL implements. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-1030843">
				<div id="div-comment-1030843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030843">
			January 4, 2013 at 7:31 am</a>		</div>

		<p>I&#39;m no task scheduler expert, but doesn&#39;t using IComHandlerAction give you the same disadvantages of rundll32 &#8211; namely, you are a guest in another process, that is set up however it likes best?</p>
<p>(on the other hand, if you wrote a COM component you should be ready for this in first place&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1030863">
				<div id="div-comment-1030863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030863">
			January 4, 2013 at 7:37 am</a>		</div>

		<p>I sometimes see people suggesting the use of rundll32 to open control panels: for example</p>
<p>rundll32.exe Shell32.dll,Control_RunDLL mmsys.cpl,,recording</p>
<p>For the specific case of opening a control panel, there&#39;s no need to create an .exe; just use control.exe. &nbsp;Replace &quot;rundll32.exe Shell32.dll,Control_RunDLL&quot; with &quot;control.exe&quot;:</p>
<p>control.exe mmsys.cpl,,recording</p>
<div class="post">[<em>I&#39;ve covered that specific case <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/01/09/510781.aspx" rel="nofollow">multiple</a> <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/04/24/582152.aspx" rel="nofollow">times</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030883">
				<div id="div-comment-1030883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030883">
			January 4, 2013 at 8:09 am</a>		</div>

		<p>What would be the non-rundll32 equivalent of something like:</p>
<p>rundll32.exe printui.dll,PrintUIEntry /ia /f &quot;&#8230;ghostpdfghostpdf.inf&quot; /m &quot;Ghostscript PDF&quot;</p>
<p>All documentation I could find pointed to rundll32 being the official way to do this. It did not seem very elegant to me (compared to AddPrinter(&#8230;)), having to shell out to rundll32 (this is not a batch file, it is being called from an executable written in C), but I found no other documented way to do this.</p>
<div class="post">[<em>That is not the same question asked by this customer. The customer was asking to choose between writing a standalone exe or writing a DLL that is called via rundll32. Your question is about using an existing DLL designed for rundll32. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030893">
				<div id="div-comment-1030893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030893">
			January 4, 2013 at 8:11 am</a>		</div>

		<p>I use rundll32 for one purpose &#8211; to create a self-deleting image for uninstaller. As you know, an .EXE cannot delete itself because the file is locked (the handle is no longer a userspace handle starting in XP so cannot be closed by CloseHandle). A .DLL loaded by rundll32 can by setting up a ROP sled that goes FreeLibrary -&gt; DeleteFile -&gt; RemoveDirectory -&gt; ExitProcess.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030913">
				<div id="div-comment-1030913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030913">
			January 4, 2013 at 9:00 am</a>		</div>

		<p>For uninstallation, using CMD.EXE as the host is far easier. Just write a batch file.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030923">
				<div id="div-comment-1030923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030923">
			January 4, 2013 at 9:14 am</a>		</div>

		<blockquote><p>
  &nbsp;For uninstallation, using CMD.EXE as the host is far easier. Just write a batch file.
</p></blockquote>
<p>If anything&#39;s a weird dependency on an implementation detail, that is. That depends on the fact that cmd.exe closes and reopens the batch file between each command.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030943">
				<div id="div-comment-1030943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nitpickery</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030943">
			January 4, 2013 at 9:40 am</a>		</div>

		<blockquote><p>
  Rundll32 is marked as LARGEÂ­ADDRESSÂ­AWARE, so your Rundll32 command must be 3GB-compatible.
</p></blockquote>
<p>Probably best to just stick with &quot;large address aware&quot;, since it&#39;s not strictly a 3GB thing &#8211; on x64 Windows, your 32bit LAA executables get pretty close to 4GB to play with. (It&#39;s nitpickery, though, since anything &gt;2GB means bit31, which is what LAA is all about &#8211; not causing pointer-tagging code to crash and burn.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1030953">
				<div id="div-comment-1030953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030953">
			January 4, 2013 at 9:47 am</a>		</div>

		<p>@Joshua: If using a ROP sled is the answer, you&#39;re asking the wrong question. If you try and do this in C, you&#39;re at the mercy of the compiler choosing not to try and return to you after FreeLibrary &#8211; and that might change if you decide to upgrade Visual Studio, compile for ARM or x64 or change any setting at all anywhere in the compiler. Hell it might break because it&#39;s a Tuesday for all you know. If you do it in hand-coded assembler, you&#39;ve now got an architecture-dependent and horrendously unmaintainable uninstaller.</p>
<p>Also, don&#39;t write a batch file for the reasons you mentioned; &quot;CMD.EXE /c&quot; is more reliable &#8211; but MSIs are a better and more supported solution for this problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1030983">
				<div id="div-comment-1030983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1030983">
			January 4, 2013 at 12:06 pm</a>		</div>

		<p>&quot;ROP sled that goes FreeLibrary -&gt; DeleteFile -&gt; RemoveDirectory -&gt; ExitProcess.&quot;</p>
<p>That&#39;s at the same time ingenious and a horribly, horribly wrong hackery.</p>
<p>Makes you wonder how somebody that even knows how to do it does not realize this.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031013">
				<div id="div-comment-1031013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031013">
			January 4, 2013 at 12:52 pm</a>		</div>

		<p>@AC: The MSDN article about how to make a self-deleting executable from the time when I first wrote it advocated injecting a DLL into explorer. [Look in the MSDN Library that came with VC6 if you want to find it.] Now you tell me which is the bad idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031023">
				<div id="div-comment-1031023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031023">
			January 4, 2013 at 1:15 pm</a>		</div>

		<p>Just because injecting a DLL into explorer is a bad idea, doesn&#39;t mean using a ROP is a good (or even a better) one.</p>
<p>Firstly, the use of a batch file is documented in MSDN and is sufficiently utilized that Microsoft won&#39;t be able to ever kill it. Self-modifying batch files run the entire US financial system for example, so it&#39;s unlikely that Microsoft would ever dare touch this &quot;feature&quot;.</p>
<p>Secondly, if you really want a better and arguably more supported solution, you can do it thus:</p>
<ol>
<li>Create a &nbsp;selfdeleteonexit.bat in %TEMP% with FILE_FLAG_DELETE_ON_CLOSE.</li>
<li>
<p>Write the following:</p>
</li>
</ol>
<p>:Repeat</p>
<p>mkdir &quot;C:pathbatchfilestarted&quot;</p>
<p>del &quot;C:pathme.exe&quot;</p>
<p>if exist &quot;C:pathme.exe&quot; goto Repeat</p>
<p>rmdir &quot;C:path&quot;</p>
<p>rmdir &quot;C:pathbatchfilestarted&quot;</p>
<ol>
<li>Launch CMD.EXE selfdeleteonexit.bat</li>
</ol>
<li>
<p>Wait for C:pathbatchfilestarted to come into existence.</p>
</li>
<li>
<p>Only now close the handle. The file will now be deleted either now if CMD.EXE has already dropped it&#39;s handle, or when CMD.EXE closes the handle or dies later.</p>
</li>
<li>
<p>Exit current process.</p>
</li>
<p>So with this system, regardless of whether CMD.EXE retains a handle to the batch file or not, you get to delete your own process from disk and the batch file will now also be gone. The only way this will break is if some future version of CMD.exe closes and re-opens the file after the mkdir on line (1), but before the del on line (2), or if the power blows &#8211; and in those worst cases you&#39;ve left a &lt;1KB file in %TEMP%.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031033">
				<div id="div-comment-1031033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Candy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031033">
			January 4, 2013 at 2:01 pm</a>		</div>

		<p>I suppose similar comments app;y to dllgost?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1031043">
				<div id="div-comment-1031043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031043">
			January 4, 2013 at 2:07 pm</a>		</div>

		<p>There&#39;s also the idea of spawning a process like cmd.exe /c &quot;timeout /t 10&quot; &amp; del me.exe</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031073">
				<div id="div-comment-1031073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031073">
			January 4, 2013 at 3:26 pm</a>		</div>

		<blockquote><p>
  The only way this will break is if some future version of CMD.exe closes and re-opens the file after the mkdir on line (1), but before the del on line (2), or if the power blows &#8211; and in those worst cases you&#39;ve left a &lt;1KB file in %TEMP%.
</p></blockquote>
<p>Which is exactly what it did when I tested it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031083">
				<div id="div-comment-1031083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031083">
			January 4, 2013 at 3:40 pm</a>		</div>

		<p>All that restricions are not restrictitons of rundll32, its a common restictions for any dll thats host app is not yours. So COM servervs, hooks, tasks etc &#8211; they all have same problems.</p>
<p>Topic must be &#39;if you need to run your own process &#8211; write your exe and run it, do not run your dll with rundll32 cuz it will be not your process&#39;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031133">
				<div id="div-comment-1031133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031133">
			January 5, 2013 at 3:27 am</a>		</div>

		<p>AC, in all fairness it&#39;s just a bunch of arguments pushed on the stack. Hardly unmaintainable and it generalises to every architecture I&#39;ve ever used, although for some you&#39;d have to use a define to use a different mnemonic.</p>
<p>It&#39;s also by far the simplest and cleanest method I&#39;ve found anywhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031143">
				<div id="div-comment-1031143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031143">
			January 5, 2013 at 3:29 am</a>		</div>

		<p>s/arguments/arguments and function pointers/</p>
<p>Sorry, it seemed self-evident when I posted it, but on a second reading I thought I should clarify.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031153">
				<div id="div-comment-1031153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Owen Shepherd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031153">
			January 5, 2013 at 5:04 am</a>		</div>

		<p>Not sure how it generalises to, say, AMD64 or ARM with their register calling conventions&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031163">
				<div id="div-comment-1031163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031163">
			January 5, 2013 at 6:03 am</a>		</div>

		<p>Not at all of course, but if I&#39;d ever find myself in those environments (and assuming that the puzzle is to write a self-deleting executable as such, id est not part of a bigger problem which can be solved with MSI) I&#39;d probably use FILE_FLAG_DELETE_ON_CLOSE and some careful synchronisation.</p>
<div class="post">[<em>In other words &quot;every architecture I&#39;ve ever used&quot; is &quot;all one of them.&quot; Oh, and actually zero, because <a href="http://msdn.microsoft.com/library/Aa271991" rel="nofollow">even x86 passes in registers sometimes</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1031183">
				<div id="div-comment-1031183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031183">
			January 5, 2013 at 6:31 am</a>		</div>

		<p>A self-deleting executable would have been a piece of cake, if we used the super-secret time machine, and instead of media-dependent /SWAPRUN had Microsoft implement unconditional /SWAPRUN (with no options).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031203">
				<div id="div-comment-1031203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031203">
			January 5, 2013 at 8:29 am</a>		</div>

		<p>@Owen Shepard: It doesn&#39;t. What I&#39;d do if I had to solve the same problem for x64 is VirtualAlloc(&#8230;, PAGE_EXECUTE_READWRITE, &#8230;), copy the compiled function there and call it. My compiler will generate position independent code with a certain compiler option. The only trick to remember is to pass its string arguments as heap-allocated pointers rather than constants.</p>
<p>alegrl1 has a point.</p>
<div class="post">[<em>Don&#39;t forget to call <a href="http://msdn.microsoft.com/library/ms680588" rel="nofollow"><code>Rtl&shy;Add&shy;Function&shy;Table</code></a> for any code you dynamically generate. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031273">
				<div id="div-comment-1031273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031273">
			January 5, 2013 at 7:11 pm</a>		</div>

		<p>[Your question is about using an existing DLL designed for rundll32. -Raymond]</p>
<p>How does this statement interact with your comment to not use rundll32, since it&#39;s been deprecated? &nbsp;Will printui.dll be rewriten/replaced?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031253">
				<div id="div-comment-1031253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031253">
			January 5, 2013 at 1:37 pm</a>		</div>

		<p>Sure, IA-32, x86-64 and ARM are the only architectures out there. *rolls eyes* Next thing you&#39;re going to tell me that Windows is the only operating system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031293">
				<div id="div-comment-1031293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031293">
			January 6, 2013 at 6:28 am</a>		</div>

		<p>Looks like Raymond has written the definitive guidance for rundll32. I could not find any useful information in a couple of minutes of searching for the answer. The top hit was a very out-of-date Microsoft KB. Based on my research (perhaps as much as 120 seconds) there&#39;s nothing out there that is this succinct. Perhaps Raymond, should he tire of whatever he does during the day, could move into documentation? I think I&#39;m kidding &#8212; he should start a blog.</p>
<p>This is my second attempt to post. Perhaps it failed because I linked to msdn documentation or mentioned the big G?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031303">
				<div id="div-comment-1031303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031303">
			January 6, 2013 at 7:34 am</a>		</div>

		<p>@Rick C &quot;How does this statement interact with your comment to not use rundll32, since it&#39;s been deprecated? &nbsp;Will printui.dll be rewriten/replaced?&quot;</p>
<p>Two different things entirely.</p>
<ol>
<li>If you a developer (outside of Microsoft) and you are wondering if you should write your application to be an EXE or a DLL powered by rundll, use the EXE.</li>
<li>
<p>If you a user of a different program that is powered by rundll32, it is still acceptable for you to call rundll32 to power it.</p>
</li>
</ol>
<p>Consequently it is fine for you to type rundll32 printui.dll into CMD.exe, and it is fine for you to invoke rundll32 printui from your EXE. But if you work for Contoso and they have written an awesome app in the form MyAweswomeApp.dll that is to be invoked rundll32.dll MyAwesomeApp.dll, they should change as soon as possible to deploying an EXE (MyAwesomeApp.EXE) instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1031323">
				<div id="div-comment-1031323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gechurch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031323">
			January 6, 2013 at 6:57 pm</a>		</div>

		<p>@Cesar</p>
<p>&quot;What would be the non-rundll32 equivalent of something like:</p>
<p>rundll32.exe printui.dll,PrintUIEntry /ia /f &quot;&#8230;ghostpdfghostpdf.inf&quot; /m &quot;Ghostscript PDF&quot;</p>
<p>Microsoft wrote their own .exe to handle this, starting with Windows 7 (or Vista). The paramaters are the same, but no more rundll32. You&#39;d instead run:</p>
<p>PrintUI.exe /ia /f &quot;&#8230;ghostpdfghostpdf.inf&quot; /m &quot;Ghostscript PDF&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1031403">
				<div id="div-comment-1031403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1031403">
			January 7, 2013 at 8:07 am</a>		</div>

		<p>@Gechurch not only that, but if PrintUIEntry is written properly it should be a pretty simple matter to write a program to call it instead of using rundll32: &nbsp;just write a short main function that calls LoadLibrary and GetProcAddress.</p>
<p>Matt, my question was more along the line of &quot;if rundll32 has been deprecated, doesn&#39;t that mean calling PrintUIEntry be done some other way now? &nbsp;And Gechurch answered that there is a new way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1032403">
				<div id="div-comment-1032403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130104-00/?p=5643#comment-1032403">
			January 11, 2013 at 2:32 am</a>		</div>

		<p>@nitpickery: I hate the fact that /LARGEADDRESSAWARE is the same flag for /3GB and for 64-bit, despite not being the same problem: The problem with /3GB is the possibility of &quot;negative&quot; pointers, while the problem with 64-bit is the risk of storing a 64-bit pointer in a DWORD&#8230;</p>
<p>So if you only support 64-bit you have to be sure to set the flag in your 64-bit build, but not in your 32-bit build&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

