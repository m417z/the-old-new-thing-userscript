<html>
<head>
<title>The MIPS R4000, part 12: Calling convention</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The MIPS R4000, part 12: Calling convention</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 17, 2018 / year-entry #89</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Pretty standard&hellip; for a MIPS.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The Windows NT calling convention for the MIPS R4000
is similar to the other major MIPS calling conventions,
but calling conventions for the MIPS are like snowflakes:
Despite being made of the same underlying materials,
no two are completely alike.
</p>
<p>
The short version of the parameter passing is that
the first four parameters are passed in registers
<var>a0</var> through <var>a3</var>,
and the remaining parameters go on the stack
after a 16-byte gap.
The 16-byte gap represents the home space for the
register-based parameters.
We've seen this convention before,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040114-00/?p=41053">
in the x64 calling convention</a>.
Even if a function accepts fewer than four parameters,
you must still provide a full 16 bytes of home space.
</p>
<p>
Things get weird when you mix in 64-bit values or floating point.
The way to think about it is as if you were creating a C structure
whose members are all the parameters, in order,
except that any types smaller than a 32-bit value are promoted to
a 32-bit value.
If you have a 64-bit value (either integer or floating point),
you may need to insert padding to get the parameter to
be properly aligned.
</p>
<p>
Once you've laid out your parameters in the structure,
you load the first sixteen bytes into <var>a0</var>
through <var>a3</var>,
and the rest go on the stack.
However,
if a parameter that would normally be passed in
<var>a0</var> through <var>a3</var>
turns out to be a non-variadic floating point value,
then it is stored in
<var>$f12</var>/<var>$f13</var> (for the first floating point value)
or
<var>$f14</var>/<var>$f15</var> (for the second),
and the corresponding integer register is left unused.
</p>
<p>
Here are some examples:
</p>
<p>
<code>void f(int a, char b, short c, int d, int e);</code>
</p>
<table CLASS="cp3" BORDER=1 BORDERCOLOR=black CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>Offset</th>
<th>Parameter</th>
<th>Passed as</th>
</tr>
<tr>
<td><code>00</code></td>
<td><code>int a</code></td>
<td><var>a0</var></td>
</tr>
<tr>
<td><code>04</code></td>
<td><code>int b</code></td>
<td><var>a1</var></td>
</tr>
<tr>
<td><code>08</code></td>
<td><code>int c</code></td>
<td><var>a2</var></td>
</tr>
<tr>
<td><code>0C</code></td>
<td><code>int d</code></td>
<td><var>a3</var></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>int e</code></td>
<td><code>0x10(sp)</code></td>
</tr>
</table>
<p>
<code>void f(float a, int b, double c, int d);</code>
</p>
<table CLASS="cp3" BORDER=1 BORDERCOLOR=black CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>Offset</th>
<th>Parameter</th>
<th>Passed as</th>
</tr>
<tr>
<td><code>00</code></td>
<td><code>float a</code></td>
<td><var>f12</var></td>
</tr>
<tr>
<td><code>04</code></td>
<td><code>int b</code></td>
<td><var>a1</var></td>
</tr>
<tr>
<td><code>08</code></td>
<td ROWSPAN=2><code>double c</code></td>
<td><var>f14</var></td>
</tr>
<tr>
<td><code>0C</code></td>
<td><var>f15</var></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>int e</code></td>
<td><code>0x10(sp)</code></td>
</tr>
</table>
<p>
<code>void f(int a, double b, float c);</code>
</p>
<table CLASS="cp3" BORDER=1 BORDERCOLOR=black CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>Offset</th>
<th>Parameter</th>
<th>Passed as</th>
</tr>
<tr>
<td><code>00</code></td>
<td><code>int a</code></td>
<td><var>a0</var></td>
</tr>
<tr>
<td><code>04</code></td>
<td COLSPAN=2>padding</td>
</tr>
<tr>
<td><code>08</code></td>
<td ROWSPAN=2><code>double b</code></td>
<td><var>f12</var></td>
</tr>
<tr>
<td><code>0C</code></td>
<td><var>f13</var></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>float c</code></td>
<td><code>0x10(sp)</code></td>
</tr>
</table>
<p>
<code>void f(int a, ...);</code><br>
<code>f(1, 2, 0.0, 3);</code>
</p>
<table CLASS="cp3" BORDER=1 BORDERCOLOR=black CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>Offset</th>
<th>Parameter</th>
<th>Passed as</th>
</tr>
<tr>
<td><code>00</code></td>
<td><code>1</code></td>
<td><var>a0</var></td>
</tr>
<tr>
<td><code>04</code></td>
<td><code>2</code></td>
<td><var>a1</var></td>
</tr>
<tr>
<td><code>08</code></td>
<td ROWSPAN=2><code>0.0</code></td>
<td><var>a2</var></td>
</tr>
<tr>
<td><code>0C</code></td>
<td><var>a3</var></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>3</code></td>
<td><code>0x10(sp)</code></td>
</tr>
</table>
<p>
In this last example, the floating point double-precision
value <code>0.0</code>
is a variadic parameter (matches the <code>...</code> part
of a function prototype), so it gets passed in the integer registers
even though it's a floating point value.
That's because one of the first things that variadic functions
do is spill all their variadic register parameters onto the stack
so they form a contiguous array of bytes.
Passing all variadic parameters in integer registers means that
this spilling can be done without knowing the types of the parameters.
(Which is a good thing because the types of the parameters are frequently
not known at compile time.)
</p>
<p>
The last wrinkle is if you're calling a function with no prototype.
In that case, you don't know whether a parameter is variadic or not.
If the parameter is a floating point value, then
you have to pass it in both an integer register <i>and</i>
a floating point register,
because you don't know where the callee is going to look for it.
</p>
<p>
<code> f(1, 2, 0.0, 3); // no prototype</code>
</p>
<table CLASS="cp3" BORDER=1 BORDERCOLOR=black CELLPADDING=3
    STYLE="border-collapse: collapse">
<tr>
<th>Offset</th>
<th>Parameter</th>
<th>Passed as</th>
</tr>
<tr>
<td><code>00</code></td>
<td><code>1</code></td>
<td><var>a0</var></td>
</tr>
<tr>
<td><code>04</code></td>
<td><code>2</code></td>
<td><var>a1</var></td>
</tr>
<tr>
<td><code>08</code></td>
<td ROWSPAN=2><code>0.0</code></td>
<td><var>a2</var> and <var>f12</var></td>
</tr>
<tr>
<td><code>0C</code></td>
<td><var>a3</var> and <var>f13</var></td>
</tr>
<tr>
<td><code>10</code></td>
<td><code>3</code></td>
<td>stack</td>
</tr>
</table>
<p>
This explains the importance of
the rule that if a parameter is passed
in a floating point register, then the corresponding integer
register is left unused.
Without that rule, calling functions with no prototype
would be a disaster because the register assignment would
be different depending on whether the function takes variadic
parameters or not.
</p>
<p>
With the exception of lightweight leaf functions,
every function must include exception unwind codes in the
module metadata so that the kernel can figure out what to do
if an exception occurs.
</p>
<p>
A lightweight leaf function is one that can do its work
using only the 16 bytes of home space, plus any scratch
registers.
It cannot move the stack pointer or modify any
callee-preserved registers.
Furthermore, the return address must remain in the <var>ra</var>
register for the duration of the function.
</p>
<p>
You are allowed to promote your lightweight leaf function
to a full function by a technique known as
<i>shrink-wrapping</i>,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150730-00/?p=90791">
which I described earlier</a>.
</p>
<p>
(Some of the details of the calling convention are
<a HREF="https://msdn.microsoft.com/en-us/library/ms864304.aspx">
documented on MSDN</a>.
The documentation was originally written for Windows CE,
but I figure they are still true for Windows NT,
because why not reuse the compiler you already have?)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1333255">
				<div id="div-comment-1333255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525#comment-1333255">
			April 17, 2018 at 10:33 am</a>		</div>

		<p>I&#8217;m surprised the Microsoft compiler takes so much effort just to allow calling a varargs function without a prototype.<br />
The C standard does not require this: 6.7.6.3, paragraph 15 says that functions without prototype are not compatible with varargs functions.<br />
With gcc, you will get a compiler error if you have both types of declaration (no prototype + with varargs) in the same compilation unit. And it&#8217;s undefined behavior if they&#8217;re in different compilation units.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1333265">
				<div id="div-comment-1333265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525#comment-1333265">
			April 17, 2018 at 12:09 pm</a>		</div>

		<p>It&#8217;s so nice of you to cite a standard that wouldn&#8217;t exist until 26 years after the compiler was written. Do you have a time machine?</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1333295">
				<div id="div-comment-1333295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Daniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525#comment-1333295">
			April 17, 2018 at 1:47 pm</a>		</div>

		<p>OK, I admit I took the C11 standard for the section number.<br />
But the paragraph in question is basically unchanged from C89; it was in 6.5.4.3 &#8220;Function declarators (including prototypes)&#8221;.</p>
<p>Which was a bit earlier than the MIPS R4000. Of course the compiler probably just re-used the same behavior as on other platforms. But at least you can do the job with a smaller time machine ;)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip odd alt depth-4" id="comment-1333335">
				<div id="div-comment-1333335" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525#comment-1333335">
			April 17, 2018 at 4:14 pm</a>		</div>

		<p>Remember that the x64 calling convention defines the same thing.<br />
&#8220;For functions not fully prototyped, the caller will pass integer values as integers and floating-point values as double precision. For floating-point values only, both the integer register and the floating-point register will contain the float value in case the callee expects the value in the integer registers. &#8221;<br />
So while it is true that C doesn&#8217;t allow this, it isn&#8217;t like all languages are C, so any programming language that sticks to this ABI, even ones that accept varag unprototyped functions, will work.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-3 parent" id="comment-1333305">
				<div id="div-comment-1333305" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525#comment-1333305">
			April 17, 2018 at 1:57 pm</a>		</div>

		<p>And even when newer language standards forbid something, consider that platform ABIs need to work for all programs (and all language standards) supported on a platform. Including the odd K&amp;R C program that (dynamically) links against a libc written against a newer language standard.</p>
<p>The particular case of unprototyped varargs functions is a source of trouble in every C platform ABI that I&#8217;ve ever seen. The SysV x64 ABI definitely included. :)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-4 parent" id="comment-1333635">
				<div id="div-comment-1333635" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525#comment-1333635">
			April 18, 2018 at 3:27 pm</a>		</div>

		<p>In theory since Microsoft controlled the ABI for NT on MIPS and the (at the time they were producing NT on MIPS) only toolchain that produced code for NT on MIPS, they could have just said no to vararg functions with no prototype. But I suspect they supported such things on other platforms like x86 and therefore couldn&#8217;t drop support on a new platform.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-5" id="comment-1333675">
				<div id="div-comment-1333675" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525#comment-1333675">
			April 18, 2018 at 11:58 pm</a>		</div>

		<p>Remember, if you want to get people to port to your new platform, you want to make it <u>easier</u> for them, not <u>harder</u>. And saying &#8220;You must rewrite all your K&amp;R code to be C89-compliant&#8221; is not exactly in the &#8220;easier&#8221; category.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-5" id="comment-1333895">
				<div id="div-comment-1333895" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180417-00/?p=98525#comment-1333895">
			April 23, 2018 at 3:51 am</a>		</div>

		<p>It was probably easier to code the no-prototype case than it was to hold meetings to argue that it shouldn&#8217;t be supported, knowing that at some point you&#8217;d probably need to implement it anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

