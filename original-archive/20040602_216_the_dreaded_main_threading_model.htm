<html>
<head>
<title>The dreaded "main" threading model</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The dreaded &#8220;main&#8221; threading model</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 2, 2004 / year-entry #217</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040602-00/?p=39053</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In the absence of an explicit threading model for your COM object, you get the "main" threading model. The "main" threading model is little-known, and that's a good thing. It's a relic from the days before multi-threading. The first thread in a process to initialize COM becomes declared the "main" thread. (It might be the...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>In the absence of an explicit threading model for your COM object,  <a href="http://msdn.microsoft.com/library/en-us/cossdk/htm/pgcontexts_0pk5.asp">  you get the "main" threading model</a>.  The "main" threading model is little-known, and that's a good thing.  It's a relic from the days before multi-threading.</p>
<p>  The first thread in a process to initialize COM becomes declared  the "main" thread.  (It might be the first thread to initialize COM in apartment model;  I forget.)  When a "main" threaded object is created, COM marshals the creation  call to the main thread, creates the object, then marshals the result  back to the creator's thread.  Similarly, when you invoke any method on the object, the call is  marshalled to the main thread, invoked, then the result is marshalled back.  </p>
<p>  In other words, a "main" threaded object is like an apartment threaded  object, with the additional constraint that the only apartment that  can use it is the one that the "main" thread belongs to.  </p>
<p>  As you can imagine, this is a horrific performance penalty  in any multithreaded application, since there is so much marshalling  going on.  Even worse, it completely bottlenecks the main thread  because there are now all these objects that <strong>must</strong>  be serviced on that thread and no other thread.  </p>
<p>  Even worse than worse, all this marshalling creates  new opportunities for re-entrancy.  While waiting for the main thread to do its thing, the calling  thread will likely process messages, which means that you can  receive a window message at a time when you didn't expect it.  </p>
<p>  So why does this awful threading model exist at all?  </p>
<p>  For backwards compatibility with COM objects written before  multithreaded support was added to COM.  Back in those days, there was only one thread, so COM objects  could be extremely lazy with their synchronization.  In fact, they didn't need any!  If you have only one thread,  then you certainly don't need to coordinate your actions with  other threads because there are none.  </p>
<p>  That's also why "main" threading model is the default.  Threading models were invented when multithreading support  was added to COM. Before then, there were no threads, so no  threading models. All old objects therefore didn't specify  a threading model in their registration.  </p>
<p>  The only reason you should even be aware of this ancient threading model  in the first place is that  <strong>if you forget to specify a threading model in your object  registration, you will get the dreaded "main" threading model by  default</strong>.  </p>
<p>  And then you will wonder why your application's performance is horrible,  and why you have all these strange re-entrancy problems.  </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-179663">
				<div id="div-comment-179663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Johan Johansson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040602-00/?p=39053#comment-179663">
			June 2, 2004 at 7:33 am</a>		</div>

		<p>Does affect a COM client that registers a callback with a COM server if the COM client uses CoInitialize rather than CoInitializeEx?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-179693">
				<div id="div-comment-179693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040602-00/?p=39053#comment-179693">
			June 2, 2004 at 8:34 am</a>		</div>

		<p>CoInitialize() creates a single-threaded apartment, as noted in the very first sentence of the documentation. </p>
<p>In other words, CoInitialize(NULL) is 100% equivalent to CoInitializeEx(COINIT_APARTMENTTHREADED, NULL).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-179703">
				<div id="div-comment-179703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Johan Johansson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040602-00/?p=39053#comment-179703">
			June 2, 2004 at 8:37 am</a>		</div>

		<p>Yes, I know. It&#8217;s the leading sentences in your second paragraph that confuse me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-179713">
				<div id="div-comment-179713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040602-00/?p=39053#comment-179713">
			June 2, 2004 at 8:49 am</a>		</div>

		<p>That paragraph describes how the &quot;main&quot; thread is determined and how the &quot;main&quot; thread is involved when somebody does a CoCreateInstance on an object that is marked as &quot;main&quot;-threaded.</p>
<p>Since &quot;main&quot;-threaded is the same as &quot;apartment-threaded on the main thread&quot;, it doesn&#8217;t matter whether the callback you hand back (on an STA thread) is main-threaded or apartment-threaded since the behavior is the same: Always call back on the thread it was created from.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-181183">
				<div id="div-comment-181183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jay Simmons</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040602-00/?p=39053#comment-181183">
			June 5, 2004 at 9:23 am</a>		</div>

		<p>(I work on the COMCOM+ team at Microsoft)</p>
<p>Two small additions&#8230;Raymond is correct that the &quot;main&quot; STA thread is the first STA thread to be initialized in the process.   And that all COM objects without an explicitly declared threading model are run on this thread.   This was important, if memory serves, not just for COM objects lacking synchronization but also for certain older object runtimes that put lots of state in TLS and always expected that state to be there.    So those objects *had* to be run on a dedicated thread, for the life of the process.   </p>
<p>Second, COM was originally written to expect that the &quot;main&quot; STA thread, once initialized, would never, ever, go away in the process.  If it did, and you tried to create another &quot;main&quot;-threaded COM object, you&#8217;d get an error.   We relaxed this in Windows XP and later, if the &quot;main&quot; thread goes away, COM will now allow a new &quot;main&quot; thread to be designated.  This was done to allow folks to use antique COM objects without having to keep a wasteful dedicated thread around.   Of course this will likely break those older object runtimes I mentioned (probably in hard-to-debug ways) but it may be okay for some objects in some situations.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-452293">
				<div id="div-comment-452293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/tonyschr/archive/2006/12/11/interface-smuggling.aspx' rel='external nofollow' class='url'>Tony Schreiner's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040602-00/?p=39053#comment-452293">
			December 11, 2006 at 11:51 pm</a>		</div>

		<p>While I&#8217;m on the subject of COM and extension compatibility, another issue that affected a small number</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-623683">
				<div id="div-comment-623683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2008/04/24/8420242.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040602-00/?p=39053#comment-623683">
			April 24, 2008 at 12:20 pm</a>		</div>

		<p>Multi-threaded apartments do not pump messages.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

