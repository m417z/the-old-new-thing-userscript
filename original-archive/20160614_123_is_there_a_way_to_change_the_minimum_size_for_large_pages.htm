<html>
<head>
<title>Is there a way to change the minimum size for large pages?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Is there a way to change the minimum size for large pages?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 14, 2016 / year-entry #124</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's set by the processor, not Windows.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We discussed
<a HREF="https://msdn.microsoft.com/library/windows/desktop/aa366720(v=vs.85).aspx">
Large Page Support</a>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20110128-00/?p=11643">
a few years ago</a>.
In practice, the large page minimum size is
2<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090611-00/?p=17933">MB</a>.
A customer wanted to know if there was a configuration setting
to change the minimum size for a large page.
</p>
<p>
The large page minimum size isn't chosen by Windows.
It's chosen by the processor.
</p>
<p>
Recall that the paging structure is hierarchical.
The x86 and x64 use a three-level page table;&sup1;
ARM uses a two-level page table.
For concreteness, we'll talk about the x86 page table structure,
and let's assume that all pages are present.
</p>
<p>
When the processor tries to access a linear address,
the address is broken down into four pieces:
</p>
<ul>
<li>Bits 30 and 31 form a two-bit value that selects a page directory
    from the page directory pointer table.</p>
<li>Bits 21 through 29 form a nine-bit value that selects a page table
    within the page directory.</p>
<li>Bits 12 through 20 form a nine-bit value that selects a page
    within the page table.</p>
<li>Bits 0 through 11 form a twelve-bit value that selects a byte
    within the page.
</ul>
<p>
In pseudo-C++, it goes something like this:
</p>
<pre>
byte&amp; FindPhysicalAddress(intptr_t linearAddress)
{
  // assuming all pages are present and there are no funny games.
  return cr3[(linearAddress &gt;&gt; 30) & 0x003]
            [(linearAddress &gt;&gt; 21) & 0x1FF]
            [(linearAddress &gt;&gt; 12) & 0x1FF]
            [(linearAddress      ) & 0xFFF];
}
</pre>
<p>
At the bottom of the hierarchy are pages.
Each page is 4KB of data, and the bottom 12 bits of the
address are an offset into the page.
</p>
<p>
The next level up is a <i>page table</i>.
Each page table is one 4KB page in size,
broken down into entries called <i>page table entries</i>
which are each 8 bytes in size.
A little math tells you, therefore, that each page table
contains 512 page table entries.
Since each page table entry describes one 4KB page,
an entire page table describes 512 &times; 4KB = 2MB.
</p>
<p>
The next level up is a <i>page directory</i>,
which is filled with 512 <i>page directory entries</i>.
Each page directory entry describes one page table.
</p>
<p>
The top of the hierarchy is a
<i>page directory pointer table</i>,
which holds four <i>page directory pointers</i>.
</p>
<p>
Here's a diagram.
</p>
<table BORDER=0 STYLE="border-collapse: collapse">
<tr>
<td>PDPT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td>PD</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td>PT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PTE</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td STYLE="border: solid 1px black">PTE</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
<td></td>
<td STYLE="border: solid 1px black">PTE</td>
<td></td>
<td COLSPAN=2>Physical memory</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PTE</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
</tr>
</table>
<p>
You can see how the hierarchy can be extended further
if necessary.
Basically, each level of the hierarchy describes some number
of objects one level down,
until you finally reach pages, which contain the actual data.
</p>
<p>
The trick with large pages is that instead of having a page
table filled with 512 entries that say
"Entry 0 is page <var>N</var>;
entry 1 is page <var>N</var> + 1;
entry 2 is page <var>N</var> + 2;
&hellip;
and
entry 511 is page <var>N</var> + 511,"
you say
"Hey, let's just save everybody some trouble and I'll just
say "Pretend you have a full page table of contiguous pages
starting at page <var>N</var>."
</p>
<p>
In other words, we start with this:
</p>
<table BORDER=0 STYLE="border-collapse: collapse">
<tr>
<td>PDPT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td>PD</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td>PT</td>
<td></td>
<td COLSPAN=2>Physical memory (contiguous)</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td STYLE="border: solid 1px black">PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>+1: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
<td></td>
<td STYLE="border: solid 1px black">PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>+2: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>+3: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>+4: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
</tr>
</table>
<p>
and we create a special page directory entry that says
"Hey, let's just pretend there's a full page table
of contiguous pages starting at page <var>N</var>":
</p>
<table BORDER=0 STYLE="border-collapse: collapse">
<tr>
<td>PDPT</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td>PD</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: solid 1px black">PDE</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td>Imaginary PT</td>
<td></td>
<td COLSPAN=2>Physical memory (contiguous)</td>
</tr>
<tr>
<td STYLE="border: solid 1px black">PDP</td>
<td></td>
<td STYLE="border: solid 1px black">Page <var>N</var> through <var>N</var>+511 &#x25cf;</td>
<td>&rarr;</td>
<td STYLE="border: dashed 1px black">Imaginary PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">PDE</td>
<td></td>
<td STYLE="border: dashed 1px black">Imaginary PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>+1: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td STYLE="border: solid 1px black">&vellip;</td>
<td></td>
<td STYLE="border: dashed 1px black">Imaginary PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>+2: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: dashed 1px black">Imaginary PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>+3: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: dashed 1px black">Imaginary PTE &#x25cf;</td>
<td>&rarr;</td>
<td>Page <var>N</var>+4: </td>
<td STYLE="border: solid 1px black">00 01 02 03 04 05 &hellip;</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td STYLE="border: dashed 1px black">&vellip;</td>
</tr>
</table>
<p>
This special "understanding between friends" is known as a
<i>large page</i>.
Instead of filling out an entire page table
and referencing it from a page directory entry,
we just put a shorthand entry in the page directory entry
that says "Pretend there's a page table full of contiguous
pages."
This saves memory because you don't have to spend 4KB of memory
on a page table,
and it saves the processor some work
because it doesn't have to walk a page table and therefore
doesn't need to spend TLB slots to remember the contents of that
page table.&sup2;
</p>
<p>
Since a page table describes
512 &times; 4KB = 2MB of memory,
each large page is 2MB in size.
</p>
<p>
There isn't anything that can be done to customize this value.
It's a consequence of the way the processor is designed.
So if you want to have custom sizes for large pages,
you need to start by asking the processor manufacturers.
</p>
<p>
&sup1;In the dark ages before PAE,
the x86 had a two-level page table.
Windows uses PAE even on machines with less than 4GB
of physical memory because NX requires PAE.
If you don't understand what that means, don't worry.
</p>
<p>
&sup2; TLB slots are another one of those
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20041216-00/?p=36973">
hidden variables</a> in the processor.
TLB stands for <i>translation lookaside buffer</i>,
which is a cache that remembers mappings between linear addresses
and pages.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-mngoldeneagle even thread-even depth-1 parent" id="comment-1252555">
				<div id="div-comment-1252555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/MNGoldenEagle' rel='external nofollow' class='url'>MNGoldenEagle</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665#comment-1252555">
			June 14, 2016 at 7:24 am</a>		</div>

		<p>What&#8217;s with the weird formatting?  It almost looks like it&#8217;s trying to fit to a mobile-sized window, but the contents don&#8217;t adjust dynamically (and it says nothing for the first sentence, which looks like a haiku).</p>
<p>[<i>I&#8217;ve opened a ticket with the blog server team. The server injected a bunch of &lt;br/&gt; and &lt;p&gt;&lt;/p&gt; tags. -Raymond</i>]</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1252655">
				<div id="div-comment-1252655" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665#comment-1252655">
			June 14, 2016 at 12:34 pm</a>		</div>

		<p>Actually, all of the posts have the weird poetry-like formatting. It&#8217;s kind of fun to browse through the archives like this.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1252735">
				<div id="div-comment-1252735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665#comment-1252735">
			June 15, 2016 at 1:54 am</a>		</div>

		<p>You mean that was *not* intentional?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1252695">
				<div id="div-comment-1252695" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net/' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665#comment-1252695">
			June 14, 2016 at 2:40 pm</a>		</div>

		<p>It&#8217;s pretty clear that some sort of parser injected the extra markup. Anyone who has viewed source on Raymond&#8217;s well-crafted markup would know he would never use a  inside a  tag, seeing as it&#8217;s redundant.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1252705">
				<div id="div-comment-1252705" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://programmerman.net/' rel='external nofollow' class='url'>Nick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665#comment-1252705">
			June 14, 2016 at 2:41 pm</a>		</div>

		<p>Ahem. A BR element inside of a PRE element.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1252565">
				<div id="div-comment-1252565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">EduardoS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665#comment-1252565">
			June 14, 2016 at 7:58 am</a>		</div>

		<p>Raymond didn&#8217;t tell the full history.<br />
Before PAE page entries were 4 bytes in size, so, each 4kB page hold 1024 entries, now you all can guess why the PDPT had 4 entries, also, in those dark ages, large pages were 4MB, guess why.</p>
<p>And finally, modern x64 processors supports 1GB pages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1252605">
				<div id="div-comment-1252605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kktkkr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665#comment-1252605">
			June 14, 2016 at 8:35 am</a>		</div>

		<p>In case this isn&#8217;t Raymond&#8217;s fault or an intentional joke on &#8220;large pages&#8221;, and it fixes itself later, here&#8217;s a screenshot showing off that poetry-like formatting: <a href="http://i.imgur.com/9l6wDWS.png" rel="nofollow">http://i.imgur.com/9l6wDWS.png</a> . I feel like this is some kind of build-up to Coding on Windows: The Musical.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt thread-odd thread-alt depth-1" id="comment-1252815">
				<div id="div-comment-1252815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160614-00/?p=93665#comment-1252815">
			June 15, 2016 at 3:54 pm</a>		</div>

		<p>However, if you are writing 32-bit programs, I think you should always assume that the large page minimum is 4MB so both PAE and non-PAE kernels can be supported.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

