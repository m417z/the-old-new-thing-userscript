<html>
<head>
<title>If you configure a program to run in Windows 2000 compatibility mode, then it is also vulnerable to Windows 2000 security issues</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If you configure a program to run in Windows 2000 compatibility mode, then it is also vulnerable to Windows 2000 security issues</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 11, 2017 / year-entry #204</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>25</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Bug-for-bug compatibility.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
We received a security vulnerability report that said,
basically, that if you apply Windows 2000 compatibility mode
to an application,
then it becomes vulnerable to Windows 2000 security issues.
</p>
<p>
Well, yeah.
Because that's what you asked for.
</p>
<p>
If you set a program to run in Windows 2000 compatibility mode,
then one of the things that happens is that the DLL loading
follows the Windows 2000 rules,
and Windows 2000 predates the
<a HREF="https://msdn.microsoft.com/library/windows/desktop/ms682586(v=vs.85).aspx#standard_search_order_for_desktop_applications">
<b>Safe&shy;Dll&shy;Search&shy;Mode</b></a> setting,
so they always follow the
"<b>Safe&shy;Dll&shy;Search&shy;Mode</b> is disabled" rules.
</p>
<p>
This is intentional,
because one of the reasons the program was put into Windows 2000
compatibility mode is that it relies on the Windows 2000 algorithm
for DLL loading.
In other words, the program relies on bug-for-bug
compatibility,&sup1;
and the Windows 2000 compatibility does its best to oblige.&sup2;
</p>
<p>
Is this a security vulnerability?
</p>
<p>
Well, it's a security vulnerability in the program,
that it stops working when the more secure DLL loading
algorithm is used.
On the other hand,
good luck getting the vendor to do anything to address this issue.
The fact that the program requires Windows 2000 compatibility mode
is a strong indication that the vendor is not going to do anything
about the matter,
given that it's had over fifteen years to do something about it
and hasn't.
</p>
<p>
But what about if a user manually applies the Windows 2000 compatibility
mode to a program that doesn't need it?
Is it a security vulnerability that Windows allows the user to
put a current-day program into a compatibility mode that reintroduces
old security vulnerabilities?
Or is this a case of
"<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20100114-00/?p=15273">If
you configure your system to be insecure,
then don't be surprised that you have a security vulnerability</a>"?
</p>
<p>
Let's look at the usual questions for evaluating whether
something is a security vulnerability:
Who is the attacker?
Who is the victim?
What has the attacker gained?
</p>
<p>
The attacker is somebody who can set a program into an
insecure compatibility mode.
The victim is somebody who runs the program thinking they
are getting a normal program, but are instead getting
an insecure program.
The attacker can now compromise the program by using
the old security vulnerability.
</p>
<p>
Okay, but let's take closer look at the relationship
between the the attacker and the victim.
If a local user applies an insecure compatibility mode
to a program, it affects only that user.
The user hasn't gained anything.
They could have just written a program that does whatever
they like and run it.
No need to pile on the
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20090409-00/?p=18593">
style points</a>
by employing DLL injection.
In this case, the attacker is attacking himself.
This is not particularly interesting.
</p>
<p>
In order to change what other users experience when they
run the program,
you need to have administrator privileges
in order to modify the system compatibility database
or edit system shortcuts.
In that case,
you're already on the other side of the airtight hatchway.
</p>
<p>
Compatibility shims should be applied only to
address compatibility issues and not as something
you run around applying to anything you see,
because some compatibility shims weaken security for compatibility reasons.
</p>
<p>
&sup1;
And that isn't even the weirdest "throwback Thursday"
compatibility shim.
My favorite is
<a HREF="https://technet.microsoft.com/library/ff625273.aspx">
Emulate&shy;Heap</a>,
which replaces the standard heap with an exact copy of the
Windows 95 heap manager.
</p>
<p>
&sup2;
Note that the compatibility shim infrastructure performs
only in-process shimming.
It can alter the way the process internally behaves
(or how in-process components like the DLL loader behave),
but it doesn't alter the security boundaries between the
program and the rest of the system.
So even though it weakens the security to Windows 2000 levels,
it does so only to the extent that the application could have
weakened security on its own (say by implementing an insecure algorithm).</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (25)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1 parent" id="comment-1309035">
				<div id="div-comment-1309035" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309035">
			September 11, 2017 at 7:15 am</a>		</div>

		<p>How can 1 and 2 both be correct? Win95 has a undocumented flag to allocate memory that is shared by all processes. (From your TechNet article: &#8220;&#8230; that emulate the Windows 95 heap down to the very last detail&#8221;)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1309045">
				<div id="div-comment-1309045" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309045">
			September 11, 2017 at 7:20 am</a>		</div>

		<p>To be specific, emulates the heap memory layout down to the very last detail. Because the shim is for programs that relied on details of the heap layout (usually inadvertently, such as the exact lifetime of memory after it has been freed).</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-3 parent" id="comment-1309215">
				<div id="div-comment-1309215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309215">
			September 12, 2017 at 11:00 am</a>		</div>

		<p>There was that time when Windows 95 HyperTerminal stopped working after MSVCRT update, and a patch was issued to restore the heap behavior for those buggy programs.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-4 parent" id="comment-1309245">
				<div id="div-comment-1309245" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309245">
			September 12, 2017 at 11:48 am</a>		</div>

		<p>Windows 98. Windows 95 is too old to use MSVCRT.DLL I think.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks even depth-5" id="comment-1309375">
				<div id="div-comment-1309375" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309375">
			September 13, 2017 at 3:28 am</a>		</div>

		<p>Win 95 doesn&#8217;t always have MSVCRT installed but it might be there depending on which features you selected during installation. Obviously, it is not the one from VC6 that most people depended on, probably 4.1 or 4.2.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao odd alt depth-5" id="comment-1309405">
				<div id="div-comment-1309405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309405">
			September 13, 2017 at 9:15 am</a>		</div>

		<p>Win95 was created before MSVCRT.DLL even was introduced (in Vistual C++ 4.2 I think).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1309056">
				<div id="div-comment-1309056" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309056">
			September 11, 2017 at 8:27 am</a>		</div>

		<p>Since Windows 7 has shared memory there&#8217;s no reason they couldn&#8217;t implement the shared across processes flag. Obviously it would only work against processes that enabled EmulateHeap.</p>
<p>The only reasonable mistake that could be depended on is memory freed retains its value until the next allocation; this would actually be true with classical heap managers. To be fair, I used to abuse that, but only with malloc and free and when I knew the library version of malloc and free implemented a classical heap (that is, never returns free heap to the OS). I didn&#8217;t ever try it with the Windows heap allocation functions. I want to say because I didn&#8217;t know you could do that, but in fact I knew you couldn&#8217;t do that.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-3 parent" id="comment-1309065">
				<div id="div-comment-1309065" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309065">
			September 11, 2017 at 9:02 am</a>		</div>

		<p>&#8220;The only reasonable mistake that could be depended on is memory freed retains its value until the next allocation.&#8221; Um, no, they depended upon a lot more than that. I&#8217;ve vaguely recall one program that inadvertently relied on the fact that if they allocated memory, freed it, then allocated four more blocks of memory, the last block would be pointer-identical to the memory that they freed a while back. Something like that.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1309125">
				<div id="div-comment-1309125" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309125">
			September 11, 2017 at 10:56 am</a>		</div>

		<p>It must be fun having to debug that&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1309355">
				<div id="div-comment-1309355" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309355">
			September 13, 2017 at 2:51 am</a>		</div>

		<p>Yeah, one of the major SQL vendors (not microsoft) had some really strange memory allocation issues. You could see when it started allocating memory quickly then it started logging internal memory inconsistency errors and connections locked up.</p>
<p>Of course we were the only customer reporting that issue (it was on their latest offering so no wonder) and it must be something wrong with the queries were were executing (wait what???).</p>
<p>They never fixed it. We found daily defragmenting the database and log file &amp; trying to get it to allocate a huge amount of memory upfront would let us keep the database running.</p>
<p>It turns out they have an A and B development team. The A developers write the new code, then release it and move on to their next bug creation phase. The B developers then have to hack fixes in. I&#8217;m not naming the vendor in case they sue.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even depth-4 parent" id="comment-1309175">
				<div id="div-comment-1309175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309175">
			September 11, 2017 at 11:30 pm</a>		</div>

		<p>Which also reminded me of the VC6 small block heap debacle where the old VC5 allocator had to be added to MSVCRT. I think even some MS software was affected. I wonder if many would be considered security bugs nowadays.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev odd alt depth-5" id="comment-1309225">
				<div id="div-comment-1309225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309225">
			September 12, 2017 at 11:01 am</a>		</div>

		<p>That&#8217;s when Hyperterminal was crashing because of allocator change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even depth-5" id="comment-1309235">
				<div id="div-comment-1309235" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309235">
			September 12, 2017 at 11:29 am</a>		</div>

		<p>Update: one of them seems to be double frees, which is definitely a security issue.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1309055">
				<div id="div-comment-1309055" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309055">
			September 11, 2017 at 7:33 am</a>		</div>

		<p>&#8220;They could have just written a program that does whatever they like and run it. [&#8230;] In this case, the attacker is attacking himself.&#8221;</p>
<p>Hmmm&#8230;..thinking about this brings to mind Return Oriented Programming.[0] There can exist situations where an attacker has no way of creating new executable code on a system, or even of modifying existing executable code, but is capable of running existing executable code in new, exciting, and previously not-considered ways, as but one step in a long series of leveraging small vulnerabilities into increasingly larger ones.[1]</p>
<p>It&#8217;s possible that the attacker is not the user, and that the attacker is someone who does not have the ability to write a program that does whatever they like, but can somehow change the configuration of existing programs. Just because one person can&#8217;t imagine how a given bug might be turned into a vulnerability, that doesn&#8217;t mean that no-one else on the internet can.</p>
<p>[0] <a href="https://en.wikipedia.org/wiki/Return-oriented_programming" rel="nofollow">https://en.wikipedia.org/wiki/Return-oriented_programming</a><br />
[1] <a href="https://blog.chromium.org/2012/05/tale-of-two-pwnies-part-1.html" rel="nofollow">https://blog.chromium.org/2012/05/tale-of-two-pwnies-part-1.html</a></p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1309075">
				<div id="div-comment-1309075" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309075">
			September 11, 2017 at 9:03 am</a>		</div>

		<p>In which case, exploiting that other vulnerable program brought them to the other side of the airtight hatchway. Once they&#8217;re on the other side, it&#8217;s not surprising they can cause havoc.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1309155">
				<div id="div-comment-1309155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309155">
			September 11, 2017 at 3:01 pm</a>		</div>

		<p>I agree with just about everything you&#8217;ve written (particularly that this is a reasonable design decision for compatibility mode), but I&#8217;m not sure about the &#8220;airtight hatchway&#8221; model.  Taken to its logical extreme, it suggests that we shouldn&#8217;t bother with defense in depth at all.</p>
<p>(But then, this blog is for entertainment purposes only, presumes a certain level of knowledge in its audience, etc., so I suppose I should just get over it.)</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1309365">
				<div id="div-comment-1309365" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309365">
			September 13, 2017 at 2:59 am</a>		</div>

		<p>I think his point is that if you install an insecure programme that doesn&#8217;t sanitize it&#8217;s inputs, then it&#8217;s not windows fault.</p>
<p>Things like ASLR make it more challenging, but you can&#8217;t stop a program from writing to it&#8217;s stack. Although CPU&#8217;s could sign stack frames<br />
.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1309605">
				<div id="div-comment-1309605" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309605">
			September 15, 2017 at 12:45 am</a>		</div>

		<p>Input sanitization is a dead end. Where do you stop &#8220;cleaning&#8221; the string you received ?</p>
<p>Just escape it.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1309076">
				<div id="div-comment-1309076" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://deleted' rel='external nofollow' class='url'>Pierre B.</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309076">
			September 11, 2017 at 9:05 am</a>		</div>

		<p>Well, the truth is that the victim would probably set the compatibility mode without knowing that it has security implication, just to make the program run. It gets worse because the vendor has no incentive to fix their issue since there&#8217;s this handy work-around.</p>
<p>Then the attacker would simply profit from the situation as a side effect.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1309135">
				<div id="div-comment-1309135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309135">
			September 11, 2017 at 11:07 am</a>		</div>

		<p>In practice, this would be improbable. Why does Windows get all the viruses, even when other desktop OSes have security vulnerabilities too (as evidenced by their patches)? Because Windows has a 95% usage share. If I&#8217;m going to write a worm or a piece of spyware, I&#8217;m going to target that 95%, instead of the 1-4% of the other platforms.</p>
<p>In the same way, if I write malware, I&#8217;ll be aiming at a standard configuration. How many users will be running a 15-year-old version of some program under a current version of Windows? I guess there won&#8217;t be too much&#8230; If you still have doubts, see how Windows XP came out unscratched from the recent WannaCry attack, even if it is technically vulnerable. It seems that attackers didn&#8217;t bother to target an OS with less than 1% usage share.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1309166">
				<div id="div-comment-1309166" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GP.Burth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309166">
			September 11, 2017 at 10:44 pm</a>		</div>

		<p>That depends on the attack. If it&#8217;s a generic &#8220;infect anything you see&#8221; type of attack (like WannaCry) then you are right. On the other hand there are more specific attacks on people, e.g. spearfishing. These could very well use knowledge that the victim uses a specific program.<br />
Then there are attacks like Nyetya this june which only attacked a specific program only a small subset of companies worldwide use, but with devastating effects nonetheless (shipping company Maersk lost up to 300 Million $). In this case the update mechanism was compromised, something unlikely for a program needing Win2000-mode (but could very well be for XP-mode programs), but there are other ways to compromise a system. And it only needs one infected computer in a company network&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1309185">
				<div id="div-comment-1309185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">xcomcmdr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309185">
			September 12, 2017 at 12:52 am</a>		</div>

		<p>&gt; see how Windows XP came out unscratched from the recent WannaCry attack</p>
<p>&#8230; I wouldn&#8217;t call a BSOD loop (especially on embedded and/or medical equipement) as &#8220;coming out unscratched&#8221;.<br />
But yes, that was quite surprising, compared to what happens on Windows 7 (for example).<br />
<a href="https://blog.kryptoslogic.com/malware/2017/05/29/two-weeks-later.html" rel="nofollow">https://blog.kryptoslogic.com/malware/2017/05/29/two-weeks-later.html</a></p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1309676">
				<div id="div-comment-1309676" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.silverbacknetworks.tech' rel='external nofollow' class='url'>Joshua Bowman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309676">
			September 17, 2017 at 1:19 am</a>		</div>

		<p>I&#8217;ve never set the compatibility mode of something I didn&#8217;t REALLY need, let alone if one mode didn&#8217;t work and I had to keep going back in time. While I might not assume that there was a specific security vuln, I would absolutely assume that a broken program would be broken and vulnerable in many ways.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwedit odd alt thread-odd thread-alt depth-1 parent" id="comment-1309685">
				<div id="div-comment-1309685" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dwedit' rel='external nofollow' class='url'>Dwedit</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309685">
			September 17, 2017 at 12:24 pm</a>		</div>

		<p>Can&#8217;t compatibility settings be applied to a program without administrative access just by poking the registry?  This means a user mode EXE could change the DLL search order of another application.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1309687">
				<div id="div-comment-1309687" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170911-00/?p=96995#comment-1309687">
			September 18, 2017 at 7:04 am</a>		</div>

		<p>Yup, and I discussed this in the article. All you&#8217;re doing is attacking yourself. If you have medium integrity access, then you already pwn all other medium integrity processes running under the same user.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

