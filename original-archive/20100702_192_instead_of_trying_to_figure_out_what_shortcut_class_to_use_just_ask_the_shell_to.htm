<html>
<head>
<title>Instead of trying to figure out what shortcut class to use, just ask the shell to do it for you</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Instead of trying to figure out what shortcut class to use, just ask the shell to do it for you</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 2, 2010 / year-entry #193</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>17</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If a shell namespace item has the SFGAO_LINK attribute, then it is a shortcut to another location. The most common type of shortcut is the .lnk file, which you can load by creating the CLSID_Shell­Link object and using IPersist­File::Load, but what if you have some other type of shortcut? How do you know what CLSID...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If a shell namespace item has the
<code>SFGAO_LINK</code> attribute,
then it is a shortcut to another location.
The most common type of shortcut is the <code>.lnk</code> file,
which you can load by creating the
<code>CLSID_<wbr>Shell&shy;Link</wbr></code> object and using
<code>IPersist&shy;File::<wbr>Load</wbr></code>,
but what if you have some other type of shortcut?
How do you know what CLSID to use?
</p>
<p>
Since anybody can create their own shortcut file types,
a hard-coded list mapping file extensions to CLSIDs is
not going to work for long.
But fortunately, you don't have to know how to look up the CLSID
for a particular shortcut;
you can just ask the namespace to do it for you
by asking for the <code>IShell&shy;Link</code> UI object.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;ole2.h&gt;
#include &lt;stdio.h&gt;
#include &lt;tchar.h&gt;
#include &lt;shellapi.h&gt;

// <a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/09/20/231739.aspx">GetUIObjectOfFile</a> function incorporated by reference

int __cdecl _tmain()
{
  int argc;
  LPWSTR *argv = CommandLineToArgvW(GetCommandLineW(), &amp;argc);
  if (argv == NULL || argc != 2) return 0;
  if (SUCCEEDED(CoInitialize(NULL))) {
    IShellLink *psl;
    if (SUCCEEDED(GetUIObjectOfFile(NULL, argv[1], IID_PPV_ARGS(&amp;psl)))) {
      TCHAR sz[MAX_PATH];
      if (SUCCEEDED(psl-&gt;GetPath(sz, MAX_PATH, NULL, 0))) {
        _tprintf(TEXT("-&gt; %ls\n"), sz);
      }
      else _tprintf(TEXT("GetPath failed\n"));
      psl-&gt;Release();
     }
     else _tprintf(TEXT("GetUIObjectOf failed\n"));
    CoUninitialize();
  }
  LocalFree(argv);
  return 0;
}
</pre>
<p>
I've limited myself to files here for simplicity of exposition,
and I assume that you've passed a fully-qualified path on the
command line.
Of course, you can have shortcuts to non-file objects as well,
and for those shortcuts,
<code>IShell&shy;Link::<wbr>Get&shy;Path</wbr></code>
is unlikely to return an actual
file path.
(In fact, for things like shortcuts to the Control Panel,
they're unlikely to return anything at all.)
I've also used the <code>Command&shy;Line&shy;To&shy;ArgvW</code> function
instead of the built-in <code>argc</code> and <code>argv</code>
because the <code>Get&shy;UI&shy;Object&shy;Of&shy;File</code> function wants
a Unicode file name, but the C runtime's <code>argv</code>
is a <code>TCHAR *</code> string, which might not be Unicode.
</p>
<p>
Let's take this program for a spin.
</p>
<p>
<b>Warning</b>: I am using hard-coded paths.
In real life, you would use appropriate functions to obtain
the paths to the files you care about.
(Actually, in real life, you probably will have a pidl to the item
rather than a path, so the issue of paths disappears.)
</p>
<pre>
&gt;set STARTMENU=%APPDATA%\Microsoft\Windows\Start Menu\Programs
&gt;scratch "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Accessories\Calculator.lnk"
-&gt; C:\Windows\System32\calc.exe

&gt;scratch "%STARTMENU%\Internet Explorer.lnk"
-&gt; C:\Program Files\Internet Explorer\iexplore.exe
</pre>
<p>
Okay, these are your regular <code>.lnk</code> files,
so there's nothing special going on here.
Let's try something fancier, like a symbolic link.
</p>
<pre>
&gt;echo &gt; blah.txt
&gt;mklink other blah.txt
symbolic link created for other &lt;&lt;===&gt;&gt; blah.txt

&gt;scratch "%CD%\other"
-&gt; C:\test\blah.txt
</pre>
<p>
Via the Add Network Location wizard,
I created a network location (which is internally represented
as a Folder Shortcut).
Let's see what happens with that:
</p>
<pre>
&gt; scratch "%APPDATA%\Microsoft\Windows\Network Shortcuts\Tools"
-&gt; \\live.sysinternals.com\tools
</pre>
<p>
How about Internet shortcuts?
</p>
<pre>
&gt; scratch "%USERPROFILE%\Favorites\MSN Websites\MSN.url"
-&gt; http://go.microsoft.com/fwlink/?LinkId=54729
</pre>
<p>
OneClick shortcuts?
(MS Space is an internal application which lets you view floor
plans of every Microsoft building,
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/05/15/9617531.aspx">
book conference rooms</a>,
reserve
<a HREF="http://microsoftjobsblog.com/blog/employees-score-with-touchdown-space/">
touchdown space</a>,
that sort of thing.)
</p>
<pre>
&gt; scratch "%STARTMENU%\MS Space.appref-ms"
GetUIObjectOf failed
</pre>
<p>
Huh? What happened?
</p>
<p>
It so happens that the people who wrote the shortcut handler for
OneClick applications only bothered to implement the Unicode
version of the <code>IShell&shy;Link</code> interface.
We built our application as ANSI, so our attempt to get the
<code>IShell&shy;LinkA</code> interface failed.
But that's easily worked around:
</p>
<pre>
<font COLOR=blue>#define <a HREf="http://blogs.msdn.com/oldnewthing/archive/2004/02/12/71851.aspx">_UNICODE</a>
#define UNICODE</font>
#include &lt;windows.h&gt;
#include &lt;shlobj.h&gt;
#include &lt;ole2.h&gt;
...
</pre>
<p>
(In real life, your program would probably first ask for the Unicode
interface, and if the call fails, then ask for the ANSI interface.)
</p>
<p>
With the Unicode version of the program, the shortcut resolves:
</p>
<pre>
&gt; scratch "%STARTMENU%\MS Space.appref-ms"
-&gt; C:\Users\<span STYLE="border: solid .75pt black">...</span>\MSSpaceDeploy.exe
</pre>
<p>
(I elided some of the ugly path because, well, it's ugly.
The full unabbreviated path is 139 characters,
most of which is just hex digits.)
</p>
<p>
Anyway,
the point for today wasn't the minutiae of obtaining
shortcut targets from shell namespace items.
It was the principle that if you want something from the shell
namespace,
the
<code>IShell&shy;Folder::<wbr>Get&shy;UI&shy;Object&shy;Of</wbr></code>
method will often get
it for you.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (17)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-844063">
				<div id="div-comment-844063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844063">
			July 2, 2010 at 7:38 am</a>		</div>

		<p>It would have been better if the GetUIObjectOf() implementation used public API&#39;s exposed by win32 instead of hiding the implementation internally.</p>
<p>The described way is sufficient for most needs but windows also permits anyone to implement their own IShellFolders in which you might want to mimic some std IShellFolder behaviour. </p>
<div class="post">[<i>I&#39;m confused. The public API is IShellFolder::GetUIObjectOf! Just delegate the call from your own IShellFolder::GetUIObjectOf to the shell folder you want to mimic. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-844083">
				<div id="div-comment-844083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844083">
			July 2, 2010 at 7:50 am</a>		</div>

		<p>How do I get hold of a std IShellFolder implementation for contents that is beneath a custom NSE?</p>
<p>( Prefferable without copying the contents to another folder (if they are normal files ) and query that. &nbsp;)</p>
<div class="post">[<i>Remember, this Web site is not for developer support. I&#39;ll consider this a topic suggestion. In the meantime, you might want to study the <a href="http://msdn.microsoft.com/en-us/library/dd940368(v=VS.85).aspx" rel="nofollow">Parsing with Parameters</a> sample in the SDK. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-844093">
				<div id="div-comment-844093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MH</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844093">
			July 2, 2010 at 8:00 am</a>		</div>

		<p>Ok, that&#39;s fair, I was not after any support just commenting on your first comment to delegate the call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-844133">
				<div id="div-comment-844133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">unekdoud</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844133">
			July 2, 2010 at 9:06 am</a>		</div>

		<p>I actually had to look up the meaning of &quot;elided&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-844153">
				<div id="div-comment-844153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844153">
			July 2, 2010 at 10:02 am</a>		</div>

		<blockquote><p>
  I actually had to look up the meaning of &quot;elided&quot;.
</p></blockquote>
<p>I tried to look it up but someone had torn that page out of my dictionary.</p>
<blockquote><p>
  the C runtime&#39;s argv is a TCHAR * string, which might not be Unicode.
</p></blockquote>
<p>For _tmain this is true, but you could use wmain.</p>
<blockquote><p>
  We built our application as ANSI
</p></blockquote>
<p>For the love of God, Montresor!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-rup odd alt thread-odd thread-alt depth-1" id="comment-844163">
				<div id="div-comment-844163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Rup' rel='external nofollow' class='url'>Rup</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844163">
			July 2, 2010 at 10:04 am</a>		</div>

		<p>I had some code refused review a few years back because I&#39;d written &quot;elided&quot; in a comment and the reviewer had to look it up.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-844173">
				<div id="div-comment-844173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle S.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844173">
			July 2, 2010 at 10:09 am</a>		</div>

		<p>Thanks for choosing not to elide the name of the internal app, Raymond. Tidbits like that are interesting to outsiders like me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-844203">
				<div id="div-comment-844203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844203">
			July 2, 2010 at 2:26 pm</a>		</div>

		<p>Nice word, &quot;elided&quot;. &nbsp;Just like &quot;eschew&quot;; it&#39;s not used often enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-844223">
				<div id="div-comment-844223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844223">
			July 2, 2010 at 3:56 pm</a>		</div>

		<p>@DW:</p>
<p>&quot;eschew&quot; = &quot;chew your way to escape&quot;? Not?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-844233">
				<div id="div-comment-844233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844233">
			July 2, 2010 at 6:02 pm</a>		</div>

		<p>Why not use wmain?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-844253">
				<div id="div-comment-844253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brandon Paddock</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844253">
			July 2, 2010 at 8:56 pm</a>		</div>

		<p>The preferred way to do this is to use IShellItem::BindToHandler. &nbsp;Then you need not concern yourself with creating the item&#39;s parent or dealing with PIDLs directly.</p>
<p>pseudo-code:</p>
<p>CComPtr&lt;IShellItem&gt; spItem;</p>
<p>HRESULT hr = SHCreateItemFromParsingName(pszPath, NULL, IID_PPV_ARGS(&amp;spItem));</p>
<p>if (SUCCEEDED(hr))</p>
<p>{</p>
<p>&nbsp; &nbsp;CComPtr&lt;IShellLink&gt; spLink</p>
<p>&nbsp; &nbsp;hr = spItem-&gt;BindToHandler(NULL, BHID_SFUIObject, IID_PPV_ARGS(&amp;spLink));</p>
<p>}</p>
<p>Or in this case you can do BindToHandler with BHID_LinkTargetItem, and get another IShellItem pointing to the target of the link.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-844273">
				<div id="div-comment-844273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844273">
			July 3, 2010 at 8:34 am</a>		</div>

		<p>main() is the c/c++ standard. anything else is proprietary and non-portable.</p>
<p>Instead of implementing new char types (wchar_t), the compiler should have used char as a unicode character, instead of wchar_t. wchar_t is still not enough for all unicode character. Currently you should use ansi because &quot;ms unicode&quot; cannot handle true unicode anyway. Using ms unicode will not solve the problem, only make your code non-portable, and not solving the problem anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-844283">
				<div id="div-comment-844283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">make it so</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844283">
			July 3, 2010 at 8:40 am</a>		</div>

		<blockquote><p>
  Remember, this Web site is not for developer support.
</p></blockquote>
<p>Yes it is. You are just stubborn.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-844293">
				<div id="div-comment-844293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Http://brandonlive.com' rel='external nofollow' class='url'>Brandon Paddock</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844293">
			July 3, 2010 at 10:22 am</a>		</div>

		<p>@640k, which brand of time machine would you recommend?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-844303">
				<div id="div-comment-844303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844303">
			July 3, 2010 at 9:41 pm</a>		</div>

		<blockquote><p>
  main() is the c/c++ standard. anything else is proprietary and non-portable.
</p></blockquote>
<p>Then what do you say about CommandLineToArgvW or GetUIObjectOfFile? If you care about portability, _tmain is the least of your problems. :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-844333">
				<div id="div-comment-844333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844333">
			July 4, 2010 at 4:20 pm</a>		</div>

		<p>@640k needs to look up &quot;UTF-16&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-844373">
				<div id="div-comment-844373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100702-00/?p=13523#comment-844373">
			July 5, 2010 at 7:34 am</a>		</div>

		<p>@640k:</p>
<blockquote><p>
  &gt;Instead of implementing new char types (wchar_t), the compiler should have used char as a unicode character, instead of wchar_t.
</p></blockquote>
<p>You lost that argument in 1995 with the publishing of ISO 9899 Amendment 1, where wchar_t was defined.</p>
<p>The C standard has always said that the basic unit of measure is a &#39;char&#39; &#8211; sizeof is defined in terms of chars &#8211; and redefining char to be a 16-bit quantity would have the unfortunate side effect of being unable to manipulate bytes.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

