<html>
<head>
<title>Do you need clean up one-shot timers?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Do you need clean up one-shot timers?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 23, 2004 / year-entry #432</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The CreateTimerQueueTimer function allows you to create one-shot timers by passing the WT_EXECUTEONLYONCE flag. The documentation says that you need to call the DeleteTimerQueueTimer function when you no longer need the timer. Why do you need to clean up one-shot timers? To answer this, I would like to introduce you to one of my favorite...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://msdn.microsoft.com/library/en-us/dllproc/base/createtimerqueuetimer.asp">
The <code>CreateTimerQueueTimer</code> function</a> allows you to create
one-shot timers by passing
the <code>WT_EXECUTEONLYONCE</code> flag.
The documentation says that
you need to call
<a HREF="http://msdn.microsoft.com/library/en-us/dllproc/base/deletetimerqueuetimer.asp">
the <code>DeleteTimerQueueTimer</code> function</a>
when you no longer need the timer.
</p>
<p>
Why do you need to clean up one-shot timers?
</p>
<p>
To answer this, I would like to introduce you to one of my
favorite rhetorical questions when trying to puzzle out
API design:
"What would the world be like if this were true?"
</p>
<p>
Imagine what the world would be like if you didn't need to
clean up one-shot timers.
</p>
<p>
Well, for one thing, it means that the behavior of the
function would be confusing.  The caller of the
the <code>CreateTimerQueueTimer</code> function would have
to keep track of whether the timer was one-shot or not,
to know whether or not the handle needed to be deleted.
</p>
<p>
But far, far worse is that if one-shot timers were self-deleting,
it would be impossible to use them correctly.
</p>
<p>
Suppose you have an object that creates a one-shot timer,
and you want to clean it up in your destructor if it hasn't fired yet.
If one-shot timers were self-deleting,
then it would be impossible to write this object.
</p>
<pre>
class Sample {
 HANDLE m_hTimer;
 Sample() : m_hTimer(NULL) { CreateTimerQueueTimer(&m_hTimer, ...); }
 ~Sample() { ... what to write here? ... }
};
</pre>
<p>
You might say, "Well, I'll have my callback null out the
<code>m_hTimer</code> variable. That way, the destructor
will know that the timer has fired."
</p>
<p>
Except that's a race condition.
</p>
<pre>
Sample::Callback(void *context)
{
  /// RACE WINDOW HERE
  ((Sample*)context)->m_hTimer = NULL;
  ...
}
</pre>
<p>
If the callback is pre-empted during the race window
and the object is destructed,
and one-shot timers were self-deleting,
then the object would attempt to use an invalid handle.
</p>
<p>
This race window is uncloseable
since the race happens even before
you get a chance to execute a single line of code.
</p>
<p>
So be glad that you have to delete handles to one-shot timers.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-236843">
				<div id="div-comment-236843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.csc.calpoly.edu/~bfriesen/' rel='external nofollow' class='url'>Brian Friesen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-236843">
			December 23, 2004 at 9:18 am</a>		</div>

		<p>While on the subjuct of freeing handles, I wish Microsoft made it more clear about whether or not a particular resource needs to be freed.  Take for example the API CreateIcon (<a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/resources/icons/iconreference/iconfunctions/createicon.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/resources/icons/iconreference/iconfunctions/createicon.asp</a>), no where on this page does it say you need to free the handle.  If you read other pages in the MSDN it says you must call DestroyIcon, but the help page for CreateIcon doesn&#8217;t mention this at all.  I just wish Microsoft were more explicit.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-236853">
				<div id="div-comment-236853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anawn</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-236853">
			December 23, 2004 at 9:53 am</a>		</div>

		<p>I wonder why do I have to use DeleteTimerQueueTimer() instead of CloseHandle()?<br />
<br />(same with FindClose() etc.)</p>
<p>Why is the type a HANDLE if I can&#8217;t do HANDLE operations with it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-236863">
				<div id="div-comment-236863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-236863">
			December 23, 2004 at 11:08 am</a>		</div>

		<p>CloseHandle works only for handles to kernel objects.  It&#8217;s too bad that such a generic word (HANDLE) was used for such a specific scope.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-236873">
				<div id="div-comment-236873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Memet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-236873">
			December 23, 2004 at 11:11 am</a>		</div>

		<p>anawn:<br />
<br /> Maybe because it comes from a different subsystem?<br />
<br /> As far as I know, and Raymond would be best suited to answer this, CloseHandle only works on objects that have an underlying kernel object associated with them (files, sections, threads, mutexes etc) since CloseHandle is just a wrapper around ZwCloseHandle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-236883">
				<div id="div-comment-236883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Memet</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-236883">
			December 23, 2004 at 11:12 am</a>		</div>

		<p>Innit just so irritating when you click submit only to find someone has already answered the exact same question =)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-236943">
				<div id="div-comment-236943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-236943">
			December 23, 2004 at 6:24 pm</a>		</div>

		<p>And the race window is uncloseable  ^_^</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-236893">
				<div id="div-comment-236893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-236893">
			December 23, 2004 at 12:56 pm</a>		</div>

		<p>Think yourself lucky. It&#8217;s even more annoying when you hit submit and find that someone else has posted a *contradictory* answer! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-237453">
				<div id="div-comment-237453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mirobin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-237453">
			December 25, 2004 at 5:49 pm</a>		</div>

		<p>&quot;You might say, &#8216;Well, I&#8217;ll have my callback null out the m_hTimer variable. That way, the destructor will know that the timer has fired.&#8217;&quot;</p>
<p>At that point, you might as well ask the person what they gain by setting a handle to null over calling DeleteTimerQueueTimer&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-237423">
				<div id="div-comment-237423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/earhart' rel='external nofollow' class='url'>Rob Earhart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-237423">
			December 25, 2004 at 11:24 am</a>		</div>

		<p>Heh.  I own these APIs these days.</p>
<p>There are other problems.  Like, when *do* you delete the timer?  Do you do it from your callback?  Then your main code has nothing to synchronize on, and you have no idea when your callback has actually completed execution.  This can easily cause you to let your dll unload while your callback routine is in progress, barring some custom assembly to do things like call SetEvent() with the return address pointing back to the threadpool.</p>
<p>So you use a timer queue, so that you have something to synchronize with.  And all is right with the world, except that the implementation&#8217;s slow.</p>
<p>RegisterWaitForSingleObject()&#8217;s another API in the same family; it has no equivalent to the timer queue, so there&#8217;s no good time for you to clean up your wait object.  QueueUserWorkItem() has no handle at all, so there&#8217;s nothing to synchronize with.</p>
<p>The plan is to fix &amp; simplify a lot of this stuff in Longhorn.  (And &quot;HANDLE&quot; in the new API is replaced with &quot;pointer to undeclared structure&quot;, so that you can some actual typechecking and don&#8217;t try to CloseHandle() on it.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-237533">
				<div id="div-comment-237533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-237533">
			December 26, 2004 at 8:00 pm</a>		</div>

		<p>12/25/2004 11:24 AM Rob Earhart</p>
<p>&gt; And &quot;HANDLE&quot; in the new API is replaced<br />
<br />&gt; with &quot;pointer to undeclared structure&quot;</p>
<p>Please try to persuade your colleagues who own other APIs to do the same.  The MSDN library used to say to use various specific kinds of handles instead of a single generic HANDLE type.  I still think that was right, and the move to delete typechecking among all the varieties of handles was a step backwards.</p>
<p>12/25/2004 5:49 PM mirobin</p>
<p>&gt; &quot;You might say, &#8216;Well, I&#8217;ll have my callback<br />
<br />&gt; null out the m_hTimer variable. That way,<br />
<br />&gt; the destructor will know that the timer has<br />
<br />&gt; fired.&#8217;&quot;<br />
<br />&gt;<br />
<br />&gt; At that point, you might as well ask the<br />
<br />&gt; person what they gain by setting a handle to<br />
<br />&gt; null over calling DeleteTimerQueueTimer&#8230; </p>
<p>By setting a handle to null, the program can later inspect the value of the handle later and see that it&#8217;s null.  By calling DeleteTimerQueueTimer and omitting changing the handle, the program can later try to guess and hope.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238143">
				<div id="div-comment-238143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mirobin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-238143">
			December 28, 2004 at 10:49 am</a>		</div>

		<blockquote><p>
  By setting a handle to null, the program can<br />
  <br />&gt; later inspect the value of the handle later<br />
  <br />&gt; and see that it&#8217;s null. By calling<br />
  <br />&gt; DeleteTimerQueueTimer and omitting changing<br />
  <br />&gt; the handle, the program can later try to guess<br />
  <br />&gt; and hope. </p>
<p>The point of not calling DeleteTimerQueueTimer would be to avoid having to do some cleanup after the timer is fired.  If you&#8217;re setting the handle to NULL, you&#8217;re doing some cleanup, which begs the question about why you&#8217;d want to avoid one piece of cleanup while doing another&#8230;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-376453">
				<div id="div-comment-376453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/05/03/589110.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041223-00/?p=36913#comment-376453">
			May 3, 2006 at 10:00 am</a>		</div>

		<p>The non-GUI way of scheduling code to run on a thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

