<html>
<head>
<title>Removing the Terminate­Thread from a DLL that needs to shut down a helper thread at unload</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Removing the <CODE>Terminate&shy;Thread</CODE> from a DLL that needs to shut down a helper thread at unload</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 7, 2018 / year-entry #203</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Designing it out again.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Once more we undertake the exercise of designing the
<code>Terminate&shy;Thread</code> out of some code.
</p>
<p>
The customer had an instrumentation toolchain.
What you did was take your object code and sent it through
an instrumentation tool, and that tool patched your object
code so it could instrument things of interest.
You then linked the modified object code with a special
instrumentation library (statically-linked) to produce
the final instrumented binary.
</p>
<p>
The static library created a worker thread,
and they needed to shut down that worker thread.
The object code was completely oblivious to the fact that
somebody was trying to instrument it,
so the static library had to somehow manage this worker
thread without any help from the outside.
</p>
<p>
To clean up the worker thread, the instrumentation library
used the <code>atexit</code> function to get a callback to
run when the hosting DLL went through its
<code>DLL_</code><code>PROCESS_</code><code>DETACH</code>.
The developers didn't have way to get the
worker thread to shut down cleanly,
so they just called <code>Terminate&shy;Thread</code>
and crossed their fingers that it wouldn't come back
to bite them.
</p>
<p>
Let's see if we can do better.
</p>
<p>
One idea is to put the worker thread in a helper DLL.
The static library creates the thread on demand
using the
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20131105-00/?p=2733">
<code>Free&shy;Library&shy;And&shy;Exit&shy;Thread</code> technique</a>
to ensure that the worker thread maintains a reference to the
host DLL.
The <code>atexit</code> callback function
calls a shutdown function in the helper DLL.
Following the
<code>Free&shy;Library&shy;And&shy;Exit&shy;Thread</code> technique,
the shutdown function would signal the worker thread to exit
and return immediately, allowing the worker thread to exit
and free the library on its own.
</p>
<p>
There are some race conditions to be dealt with,
such as the case where the host DLL is reloaded
before the helper DLL's worker thread can exit.
But these issues can be worked out.
</p>
<p>
The customer was reluctant to introduce a new DLL into
the picture, however.
For example, it means that the host's
installer would have to carry the helper DLL when
installing an instrumented version.
</p>
<p>
To avoid the helper DLL,
the code could create a worker task in the thread pool
with <code>Create&shy;Threadpool&shy;Work</code>,
with an environment marked as
<code>Set&shy;Threadpool&shy;Callback&shy;Runs&shy;Long</code>.
Make that task do whatever the original thread was doing.
</p>
<p>
When it's time to shut down the worker thread,
signal the worker task to exit using an event or some other
private mechanism, and then
call
<code>Wait&shy;For&shy;Threadpool&shy;Work&shy;Callbacks</code>
to wait for the exit to occur.
Of course, you want to
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20170203-00/?p=95345">
skip this if the entire process is shutting down</a>.
</p>
<p>
This trick does assume that the worker task does not require
any locks that might be held by the
code running
<code>DLL_<code></code>PROCESS_<code></code>DETACH</code>
(most notably the loader lock).
</p>
<p>
The customer replied that they had found an even better
third solution:
They got rid of the worker thread entirely!
</p>
<p>
The purpose of the worker thread was to respond to requests
for information from the instrumentation tool,
and the customer realized that they could extract that information
with careful use of <code>Read&shy;Process&shy;Memory</code>,
so there was no need to have a thread dedicated to handing out
that information.
</p>
<p>
(Normally, I wouldn't be a fan of using
<code>Read&shy;Process&shy;Memory</code>
as a mechanism for interprocess communication
because it requires that the other process have
<code>PROCESS_<code></code>VM_<code></code>READ</code> access
to the process, which is a pretty large farm to be giving away,
and it doesn't give you very useful granularity.
But since this is an instrumentation tool,
it's not unreasonable to require that the tool run
in a security context that has full access to the process
being instrumented.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1359715">
				<div id="div-comment-1359715" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359715">
			September 7, 2018 at 7:37 am</a>		</div>

		<p>It wasn&#8217;t initially clear (to me anyway) that the code being instrumented is in a DLL.</p>
<p>So maybe I&#8217;m missing the point.  But adding a clean exit mechanism to the worker thread seems like less effort than adding a clean exit mechanism and moving to the thread pool.  Or is there some problem with waiting for the worker thread to terminate in atexit?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1359915">
				<div id="div-comment-1359915" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359915">
			September 9, 2018 at 10:12 am</a>		</div>

		<p>And how do you add that clean exit mechanism to the worker thread? The usual solution is <code>FreeLibraryAndExitThread</code>, but that also prevents the DLL from unloading.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1359995">
				<div id="div-comment-1359995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359995">
			September 10, 2018 at 4:15 pm</a>		</div>

		<p>Sorry, I wasn&#8217;t being that sophisticated!  I was thinking you could just signal the worker thread and wait for it to exit, but I was forgetting this would cause a loader lock deadlock.</p>
<p>The TerminateThread solution is unfortunately recommended here (section headed &#8220;Thread Synchronization in DllMain for DLL_THREAD_DETACH during DLL Unload&#8221;):<br />
<a href="https://docs.microsoft.com/en-us/windows/desktop/Dlls/dynamic-link-library-best-practices" rel="nofollow">https://docs.microsoft.com/en-us/windows/desktop/Dlls/dynamic-link-library-best-practices</a></p>
<p>It seems unhelpful to label this &#8220;best practice&#8221; when it&#8217;s actually &#8220;best practice for getting out of a hole you can usually avoid with better API design&#8221;.  And if that&#8217;s not an option, your thread pool solution is better.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4" id="comment-1360025">
				<div id="div-comment-1360025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1360025">
			September 10, 2018 at 4:52 pm</a>		</div>

		<p>Yes, <a href="https://blogs.msdn.microsoft.com/oldnewthing/20150814-00/?p=91811/">I&#8217;ve complained about that document before</a>.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1359735">
				<div id="div-comment-1359735" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359735">
			September 7, 2018 at 9:10 am</a>		</div>

		<p>I like shared memory for IPC in the same security context. To my mind ReadProcessMemory and WriteProcessMemory provide an implementation of shared memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo odd alt thread-even depth-1 parent" id="comment-1359785">
				<div id="div-comment-1359785" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359785">
			September 7, 2018 at 2:03 pm</a>		</div>

		<p>A finer-grained alternative to <code>ReadProcessMemory</code> may have been a named shared memory block &#8211; say, the instrumentation code at startup does something like <code>CreateFileMapping(INVALID_HANDLE_VALUE, ..., ("ContosoInstrumentationTool" + std::to_string(GetCurrentProcessId())).c_str())</code>, creating the memory area to use to store the information for the instrumentation tool. The instrumentation tool, in turn, given the process ID can open the corresponding memory block and read it as it pleases.</p>
<p>As a bonus point, as long as the instrumentation tool keeps the file mapping open the data is kept alive for it to examine.</p>
<p>The only drawback that comes to mind is that you may have problems if the shared memory is still alive and a new process <i>with the same PID</i> is started, but this can be worked around by adding an increasing suffix to the mapping name if the base name fails.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1359815">
				<div id="div-comment-1359815" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359815">
			September 7, 2018 at 9:51 pm</a>		</div>

		<p>Isn&#8217;t there a temporary involved whose c_str() you are calling?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1359845">
				<div id="div-comment-1359845" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maia Everett</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359845">
			September 8, 2018 at 2:43 am</a>		</div>

		<p>Nitpick, but in the code you provided, wouldn&#8217;t the anonymous std::string be immediately destroyed before the CreateFileMapping is called, thus invalidating the c_str pointer?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1359925">
				<div id="div-comment-1359925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20180907-00/?p=99675#comment-1359925">
			September 9, 2018 at 2:18 pm</a>		</div>

		<p>The temporary is destroyed <a href="https://stackoverflow.com/questions/3041249/when-are-temporaries-created-as-part-of-a-function-call-destroyed" rel="nofollow">at the end of the full expression</a>, which means after <code>CreateFileMapping</code> returns.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

