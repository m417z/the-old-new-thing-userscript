<html>
<head>
<title>Why are HANDLE return values so inconsistent?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why are HANDLE return values so inconsistent?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 2, 2004 / year-entry #79</td></tr>
<tr><td><b>Tags:</b></td><td>history</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you look at the various functions that return HANDLEs, you'll see that some of them return NULL (like CreateThread) and some of them return INVALID_HANDLE_VALUE (like CreateFile). You have to check the documentation to see what each particular function returns on failure. Why are the return values so inconsistent? The reasons, as you may...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
If you look at the various functions that return <code>HANDLE</code>s,
you'll see that some of them return <code>NULL</code>
(like <code>CreateThread</code>)
and some of them return <code>INVALID_HANDLE_VALUE</code>
(like <code>CreateFile</code>).
You have to check the documentation to see what each particular function
returns on failure.</p>
<p>
Why are the return values so inconsistent?</p>
<p>
The reasons, as you may suspect, are historical.</p>
<p>
The values were chosen to be compatible with 16-bit Windows.
The 16-bit functions <code>OpenFile</code>, <code>_lopen</code> and
<code>_lcreat</code> return <code>-1</code> on failure, so the 32-bit
<code>CreateFile</code> function returns <code>INVALID_HANDLE_VALUE</code>
in order to facilitate porting code from Win16.</p>
<p>
(Armed with this, you can now answer the following trivia
question: Why do I call <code>CreateFile</code>
when I'm not actually creating a file?  Shouldn't it be called
<code>OpenFile</code>?  Answer:  Yes, <code>OpenFile</code> would have
been a better name, but
<a HREF=http://msdn.microsoft.com/library/en-us/fileio/base/openfile.asp>
that name was already taken</a>.)</p>
<p>
On the other hand, there are no Win16 equivalents for
<code>CreateThread</code> or <code>CreateMutex</code>, so they
return <code>NULL</code>.</p>
<p>
Since the precedent had now been set for inconsistent return values,
whenever a new function got added, it was a bit of a toss-up whether
the new function returned <code>NULL</code> or
<code>INVALID_HANDLE_VALUE</code>.</p>
<p>
This inconsistency has multiple consequences.</p>
<p>
First, of course, you have to be careful to check the return values
properly.</p>
<p>
Second, it means that if you write a generic handle-wrapping class,
you have to be mindful of two possible "not a handle" values.</p>
<p>
Third, if you want to pre-initialize a <code>HANDLE</code> variable,
you have to initialize it in a manner compatible with the function
you intend to use.  For example, the following code is wrong:</p>
<pre>
HANDLE h = NULL;
if (UseLogFile()) {
    h = CreateFile(...);
}
DoOtherStuff();
if (h) {
   Log(h);
}
DoOtherStuff();
if (h) {
    CloseHandle(h);
}
</pre>
<p>This code has two bugs.  First, the return value from
<code>CreateFile</code> is checked incorrectly.  The code above
checks for <code>NULL</code> instead of <code>INVALID_HANDLE_VALUE</code>.
Second, the code initializes the <code>h</code> variable incorrectly.
Here's the corrected version:</p>
<pre>
HANDLE h = INVALID_HANDLE_VALUE;
if (UseLogFile()) {
    h = CreateFile(...);
}
DoOtherStuff();
if (h != INVALID_HANDLE_VALUE) {
   Log(h);
}
DoOtherStuff();
if (h != INVALID_HANDLE_VALUE) {
    CloseHandle(h);
}
</pre>
<p>
Fourth, you have to be particularly careful with the
<code>INVALID_HANDLE_VALUE</code> value:
By coincidence, the value <code>INVALID_HANDLE_VALUE</code>
happens to be numerically equal to the pseudohandle returned by
<code>GetCurrentProcess()</code>.
Many kernel functions accept pseudohandles, so if
if you mess up
and accidentally call, say, <code>WaitForSingleObject</code> on a
failed <code>INVALID_HANDLE_VALUE</code> handle, you will actually
end up waiting on your own process.  This wait will, of course,
never complete, because a process is signalled when it exits,
so you ended up waiting for yourself.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-149073">
				<div id="div-comment-149073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://supersat.livejournal.com/' rel='external nofollow' class='url'>Karl Koscher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149073">
			March 2, 2004 at 7:34 am</a>		</div>

		<p>I would have guessed it was called &quot;CreateFile&quot; instead of &quot;OpenFile&quot; because it creates a file handle or object.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-149083">
				<div id="div-comment-149083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tomservo.cc/' rel='external nofollow' class='url'>Mario Goebbels</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149083">
			March 2, 2004 at 7:46 am</a>		</div>

		<p>My guess would have been because the same function can both create AND open files, thus settled for the CreateFile name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-149103">
				<div id="div-comment-149103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149103">
			March 2, 2004 at 7:57 am</a>		</div>

		<p>(It&#8217;s also a parallel construction with the other handle-creation functions like CreateMutex, CreateEvent&#8230;  But it&#8217;s still confusing.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-149113">
				<div id="div-comment-149113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149113">
			March 2, 2004 at 8:00 am</a>		</div>

		<p>And it&#8217;ll stay this way forever, because Win64 needs to be compatible to Win32 needs to be compatible to Win16&#8230;  You know, making all of this &quot;compatibility&quot; between the different versions of Win## just makes it harder and harder to master over the years.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-149133">
				<div id="div-comment-149133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">edmundo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149133">
			March 2, 2004 at 8:23 am</a>		</div>

		<blockquote><p>
  And it&#8217;ll stay this way forever, because Win64 needs to be compatible to Win32 needs to<br />
  <br />&gt; be compatible to Win16</p>
<p>ad nauseum until Windows becomes such a kludge of hacks that it becomes impossible for Microsoft to maintain. (is this already happening?)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-149143">
				<div id="div-comment-149143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149143">
			March 2, 2004 at 10:11 am</a>		</div>

		<p>I don&#8217;t quite understand how CreateFile had to return -1 to &quot;facilitate porting code from Win16&quot;. CreateFile didn&#8217;t exist in Win16.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-149153">
				<div id="div-comment-149153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149153">
			March 2, 2004 at 10:17 am</a>		</div>

		<p>In the hopes of convincing people to switch to Win32, there was a program called PORTTOOL.EXE that took a Win16 source program and ported it to Win32 (using various rewrite rules and heuristics).  I suspect the return value allowed PORTTOOL.EXE to port various 16-bit file open calls to CreateFile without having to worry about trying to understand the error-checking logic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-149173">
				<div id="div-comment-149173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149173">
			March 2, 2004 at 10:23 am</a>		</div>

		<p>Ahh, I see.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-149193">
				<div id="div-comment-149193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://mikedimmick.blogspot.com' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149193">
			March 2, 2004 at 12:03 pm</a>		</div>

		<p>edmundo: it&#8217;s certainly possible to keep compatibility shims up in the top layers of the software stack, keeping the lower levels pretty clean and maintainable. If you&#8217;ve written your software well, with decent use of abstraction and information-hiding, and evaluate your maintenance fixes correctly, you can vary the implementation behind your interfaces without affecting the client of that interface.</p>
<p>If the semantics of the interface remain the same, there&#8217;s no need to change it. On the contrary, change for change&#8217;s sake is almost never good in any software, least of all platform software. You leave yourself with no product to sell until you&#8217;re finished, and no ISV can sell their product until you&#8217;re finished either. Even then they can only sell to people who&#8217;ve already bought your new platform. I&#8217;m already finding myself wondering whether Longhorn will actually be released, or whether it will become another Cairo.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-149253">
				<div id="div-comment-149253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149253">
			March 2, 2004 at 5:07 pm</a>		</div>

		<blockquote><p>
  some of them return INVALID_HANDLE_VALUE<br />
  <br />&gt; (like CreateFile).</p>
<p>That is sometimes true and sometimes false, which is exactly why I asked about it when you coded an insufficient test.  Under Windows 98, CreateFile sometimes returned INVALID_HANDLE_VALUE and sometimes returned NULL (and sometimes returned valid handles :-)  I did not try to reproduce it under Windows XP, but continue to code defensively.<br />
  <br />  if ((MyHandle == INVALID_HANDLE_VALUE) || (MyHandle == NULL)) &#8230;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-149303">
				<div id="div-comment-149303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149303">
			March 2, 2004 at 5:53 pm</a>		</div>

		<p>Sorry for adding a second message in a row, but it&#8217;s not my fault no one else posted in between  :-)</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/sdkintro/sdkintro/strict_compliance.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/sdkintro/sdkintro/strict_compliance.asp</a></p>
<p>&gt; General Requirements<br />
<br />[&#8230;]<br />
<br />&gt; You cannot use one handle type where another<br />
<br />&gt; is expected.<br />
<br />[&#8230;]<br />
<br />&gt; For best results, the generic HANDLE type<br />
<br />&gt; should be used only when necessary.</p>
<p>I agree.  But to do so for file handling, we have to call a 16-bit compatibility function.  Why did Win32 break compatibility with this formerly respected practice?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-149313">
				<div id="div-comment-149313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149313">
			March 2, 2004 at 5:55 pm</a>		</div>

		<p>? You were never able to interchange file handles and other types of handles (like GDI handles). Any code that did was already broken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-149333">
				<div id="div-comment-149333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149333">
			March 2, 2004 at 6:30 pm</a>		</div>

		<p>To use an HFILE, one must call the 16-bit compatibility function OpenFile.  Why does CreateFile return a generic HANDLE instead of an HFILE?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-149343">
				<div id="div-comment-149343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149343">
			March 2, 2004 at 6:35 pm</a>		</div>

		<p>Because that&#8217;s what CloseHandle and ReadFile and WriteFile use. File handles are a special type of kernel handle, and kernel handles are manipulated as HANDLE. </p>
<p>I don&#8217;t understand why you are calling 16-bit compatibility functions (that use HFILE &#8211; which if you look is just &quot;int&quot;). Use ReadFile and WriteFile.</p>
<p>The purpose of that remark (&quot;the generic HANDLE type should be used only when necessary&quot;) is to get people to stop using HANDLE for things that aren&#8217;t kernel handles (like GDI and USER handles).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-149363">
				<div id="div-comment-149363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149363">
			March 2, 2004 at 6:48 pm</a>		</div>

		<p>I am not calling 16-bit compatibility functions for file access (except for application-specific .ini files as mentioned in the other thread).  My question here was why Win32 took a backwards step from Win16.  MSDN Platform SDK documentation recommends practices which Win16 got right in this case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-149383">
				<div id="div-comment-149383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-149383">
			March 2, 2004 at 6:51 pm</a>		</div>

		<p>It was a backwards step in the sense that what used to be a separate type (HFILE) is now a generic HANDLE. (Of course, that separate type was just &quot;int&quot; so it wasn&#8217;t really a separate type.)</p>
<p>It was a step forward in the uniform handling of kernel objects.</p>
<p>Engineering is all about tradeoffs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-159483">
				<div id="div-comment-159483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrPizza</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-159483">
			March 31, 2004 at 9:05 am</a>		</div>

		<p>It isn&#8217;t a backwards step.</p>
<p>One of the remarkable things about the Win32 API (which is generally far from remarkable) is that it&#8217;s quite polymorphic in this area.  In general, a HANDLE is the same wherever it&#8217;s from.</p>
<p>This is great.  It means I don&#8217;t have to care if a HANDLE is a file, a thread, a process, a mutex, an event, a pipe, a directory, a physical disk, a volume, a mailslot, a console, a serial port, or a tape drive &#8212; I can do certain operations (such as close it or wait on it) in the same way.</p>
<p>Obviously, not all combinations are meaningful; ReadFile doesn&#8217;t (at least, I assume it doesn&#8217;t, as it has no obvious behaviour) work with a mutex handle, for example.  But it&#8217;s still pretty good &#8212; it&#8217;s more versatile than POSIX, for example.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-161343">
				<div id="div-comment-161343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-161343">
			April 6, 2004 at 5:57 pm</a>		</div>

		<p>3/31/2004 9:05 AM DrPizza:</p>
<p>&gt; It isn&#8217;t a backwards step. </p>
<p>The I trust you&#8217;ll fix this MSDN page:</p>
<p><a target="_new" href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/sdkintro/sdkintro/strict_compliance.asp" rel="nofollow">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/sdkintro/sdkintro/strict_compliance.asp</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-385353">
				<div id="div-comment-385353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnet.org.za/codingsanity/archive/2006/05/26/52687.aspx' rel='external nofollow' class='url'>Coding Sanity</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-385353">
			May 26, 2006 at 11:40 am</a>		</div>

		<p>Right, now that we&#8217;ve got the basics of reliability covered, we can move on to SafeHandle. If you&#8217;ve&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-492103">
				<div id="div-comment-492103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/04/11/2079137.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-492103">
			April 11, 2007 at 1:43 pm</a>		</div>

		<p>It&#8217;s a confusing story.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-603803">
				<div id="div-comment-603803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.unsanity.org/archives/betas/enthusiastic_trepidation.php' rel='external nofollow' class='url'>Unsanity.org</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040302-00/?p=40443#comment-603803">
			February 25, 2008 at 1:34 am</a>		</div>

		<p>(Yes, Betas). While my previous post talked only about the past, this post talks about the present. Some of the&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

