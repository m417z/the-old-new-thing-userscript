<html>
<head>
<title>Why doesn't the file system have a function that tells you the number of files in a directory?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why doesn&#8217;t the file system have a function that tells you the number of files in a directory?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 17, 2009 / year-entry #53</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>46</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">There are any number of bits of information you might want to query from the file system, such as the number of files in a directory or the total size of the files in a directory. Why doesn't the file system keep track of these things? Well, of course, one answer is that it certainly...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>There are any number of bits of information you might want to query from the file system, such as the number of files in a directory or <a href="http://blogs.msdn.com/oldnewthing/archive/2007/10/29/5750353.aspx#5781390"> the total size of the files in a directory</a>. Why doesn't the file system keep track of these things?</p>
<p> Well, of course, one answer is that it certainly couldn't keep track of every possible fragment of information anybody could possibly want, because that would be an infinite amount of information. But another reason is simply a restatement of the principle we learned last time: <a href="http://blogs.msdn.com/oldnewthing/archive/2009/02/16/9425124.aspx"> Because the file system doesn't keep track of information it doesn't need</a>. </p>
<p> The file system doesn't care how many files there are in the directory. It also doesn't care how many bytes of disk space are consumed by the files in the directory (and its subdirectories). Since it doesn't care, it doesn't bother maintaining that information, and consequently it avoids all the annoying problems that come with attempting to maintain the information. </p>
<p> For example, one thing I noticed about many of the proposals for maintaining the size of a directory in the file system is that very few of them addressed the issue of hard links. Suppose a directory contains two hard links to the same underlying file. Should that file be double-counted? If a file has 200 hard links, then a change to the size of the file would require updating the size field in 200 directories, not <a hef="http://blogs.msdn.com/oldnewthing/archive/2007/10/29/5750353.aspx#5775698"> just one</a> as one commenter postulated. (Besides, the file size isn't kept in the directory entry anyway.) </p>
<p> <a href="http://blogs.msdn.com/oldnewthing/archive/2007/10/29/5750353.aspx#5766417"> Another issue most people ignored was security</a>. If you're going to keep track of the recursive directory size, you have to make sure to return values consistent with <i>each user's</i> permissions. If a user does not have permission to see the files in a particular directory, you'd better not include the sizes of those files in the "recursive directory size" value when that user goes asking for it. That would be an information disclosure security vulnerability. Now all of a sudden that single 64-bit value is now a complicated set of values, each with a different ACL that controls which users each value applies to. And if you change the ACL on a file, the file system would have to update the file sizes for each of the directories that contains the file, because the change in ACL may result in a file becoming visible to one user and invisible to another. </p>
<p> Yet another cost many people failed to take into account is just the amount of disk I/O, particular writes, that would be required. Generating additional write I/O is a bad idea in general, particularly on media with a limited number of write cycles like USB thumb drives. One commenter did note that <a href="http://blogs.msdn.com/oldnewthing/archive/2007/10/29/5750353.aspx#5777186"> this metadata could not be lazy-written</a> because a poorly-timed power outage would result in the cached value being out of sync with the actual value. </p>
<p> Indeed the added cost of all the metadata writes is one of the reasons why <a href="http://blogs.technet.com/filecab/archive/2006/11/07/disabling-last-access-time-in-windows-vista-to-improve-ntfs-performance.aspx"> Windows Vista no longer updates the Last Access time by default</a>. </p>
<p> <b>Bonus chatter</b>: My colleague <a href="http://blogs.msdn.com/aaron_margosis/"> Aaron Margosis</a> points out a related topic over on the <a href="http://blogs.msdn.com/ntdebugging/"> ntdebugging</a> blog: <a href="http://blogs.msdn.com/ntdebugging/archive/2008/07/03/ntfs-misreports-free-space.aspx"> <i>NTFS Misreports Free Space?</i></a> on the difficulties of accurate accounting, especially in the face of permissions which don't grant you total access to the drive. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (46)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-709293">
				<div id="div-comment-709293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709293">
			February 17, 2009 at 11:09 am</a>		</div>

		<p>Showing the size of files that the user doesn&#8217;t have access to is an &#8220;information security disclosure vulnerability&#8221;? &nbsp;</p>
<p>I suppose so, in the strictest sense, but since I am the OWNER of my computer, and all of the files belong to me &#8212; and I could take ownership of any files that didn&#8217;t belong to me &#8212; I use one of the free services that maintains Folder Size information. &nbsp;I don&#8217;t really know or care what it does for files that I don&#8217;t have permission to (such as OS files). &nbsp;I have read permission for the bulk of the OS files anyway. &nbsp;It occasionally takes a few seconds to refresh all of the numbers, but that&#8217;s fine with me.</p>
<p>I can see how much space is used recursively by all of the files in a subfolder, and how many files are present. &nbsp;The information might not be 100% accurate in the case of hard links, but I don&#8217;t really care, since I don&#8217;t have lots of hard links (that I know of). &nbsp;I feel that the usefulness of the (approximate) information outweighs the potential small edge cases where some piece of it is not 100% accurate.</p>
<p>Maybe Microsoft can&#8217;t get by with something that&#8217;s not 100% accurate, and I don&#8217;t begrudge them not implementing this feature, but what I use is terrific and does a fantastic job.</p>
<div class=post>[<i>And you don&#8217;t mind exposing that information to non-OWNER users? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-709333">
				<div id="div-comment-709333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709333">
			February 17, 2009 at 11:32 am</a>		</div>

		<p>My computer doesn&#8217;t HAVE any non-owner users. &nbsp;Ever. &nbsp;But no, in general, I wouldn&#8217;t mind at all. &nbsp;</p>
<p>I suppose the feature should be turn-off-able for those who DID mind showing this info.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709343">
				<div id="div-comment-709343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709343">
			February 17, 2009 at 11:35 am</a>		</div>

		<p>Considering the OWNER user is most likely to need the information (as he&#8217;s likely the maintainer of the sytem), the valid question is &quot;Do I mind NOT exposing that information to non-OWNERs&quot;, and the answer is &quot;No, they can use the old mechanism&quot;.</p>
<p>Personally, I&#8217;d consider this as a feature quite similar to &quot;Thumbs.db&quot;, another directory-level caching mechanism. Seems someone in Microsoft answered Raymonds questions before. And yes, I understand that thumbs.db is not part of NTFS. I&#8217;m just pointing out that an answer to the original question could have been &quot;because there are more appropriate parts of the OS&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709353">
				<div id="div-comment-709353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Derlin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709353">
			February 17, 2009 at 12:21 pm</a>		</div>

		<p>I imagine that the average home user wouldn&#8217;t care if this information was available to everyone and that hard links might not be accurately represented. &nbsp;However, I also imagine that certain businesses would very much want to restrict as much information as possible on files to users who own or have reason to access them. &nbsp;On a local desktop this would likely only be relevant to Documents and Settings, but on network shares could be just about anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709363">
				<div id="div-comment-709363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul M. Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709363">
			February 17, 2009 at 1:16 pm</a>		</div>

		<p>&quot;I suppose the feature should be turn-off-able for those who DID mind showing this info.&quot;</p>
<p>I&#8217;m pretty sure Raymond talked about this recently:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2009/02/13/9416485.aspx" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2009/02/13/9416485.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709393">
				<div id="div-comment-709393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709393">
			February 17, 2009 at 1:43 pm</a>		</div>

		<p>Seeing as how an NTFS directory is just an index, it is quite likely that it does actually know how many files (entries) are in the directory. Anybody who is allowed to enumerate the files would have permission to get that number. Of course this is of no use to the person who wants the recursive number of files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709403">
				<div id="div-comment-709403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709403">
			February 17, 2009 at 1:44 pm</a>		</div>

		<p>&quot;Considering the OWNER user is most likely to need the information (as he&#8217;s likely the maintainer of the system)&quot;</p>
<p>No. the most likely situation is that the owner(s) (shareholder(s) of a company) never use the system at all. And the most likely maintainer of the system is the IT department, not the one using it on a daily basis.</p>
<p>But this doesn&#8217;t answer this blog entry&#8217;s title: &quot;Why doesn&#8217;t the file system have a function that tells you the number of files in a directory?&quot;</p>
<p>Even without storing this metadata it could still provide a convenience method for getting the directory size. Maybe not in the low-level system calls but in one of the system libraries. I image there are several interesting ways in which someone could screw up the task of recursively determining a directory&#8217;s size (e.g. symlink-cycles) so why not have a proven-correct implementation generally available ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709413">
				<div id="div-comment-709413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cjm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709413">
			February 17, 2009 at 1:57 pm</a>		</div>

		<p>This is slightly off-topic, but the information disclosure thing reminds me of the way processes are handled. &nbsp;In XP, I find that whoever is logged in sees all processes in Task Manager, but if you have fast user switching then subsequent users don&#8217;t get the full list. &nbsp;They only see their own processes.</p>
<p>Another problem is that if a program is searching the process list, access is not restricted to processes by the current user. &nbsp;So if I want to fire up explorer with a runas command, it will check to see if there is another copy running (which there will be, under MY own account) and quit. &nbsp;Firefox does the same thing. &nbsp;This just reminds me of the information disclosure thing that Raymond mentioned. &nbsp;I would have thought that a user shouldn&#8217;t be able to determine what others are running, unless they have permission.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709423">
				<div id="div-comment-709423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709423">
			February 17, 2009 at 2:24 pm</a>		</div>

		<blockquote><p>
  Indeed the added cost of all the metadata writes is one of the reasons why Windows Vista no longer updates the Last Access time by default.
</p></blockquote>
<p>Updating the last access time is even worse than most examples, since it converts what should be nothing more than a simple read (which can be heavily cached) into a simple read plus a much more expensive metadata update. The difference can be dramatic if the data is &nbsp;on a disk which has been spun down to save power and the read could be satisfied from the cache.</p>
<p>On Linux, most distributions seem to be enabling &quot;relatime&quot; lately. The relatime mount option causes the last access time to be updated only if its current value is less than or equal to the modification time (basically, turning it into a &quot;this file has been read since it was last written&quot; flag). There is also &quot;noatime&quot; (which completely disables the updates), but a few programs need at least the &quot;relatime&quot; behaviour.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709443">
				<div id="div-comment-709443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaron</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709443">
			February 17, 2009 at 2:54 pm</a>		</div>

		<p>I think you&#8217;re looking at it from a Service-perspective, rather than a Customer-perspective.</p>
<p>I agree that NTFS probably cannot provide this information easily and consistently.</p>
<p>But customers still have a legitimate want for this data.</p>
<p>The Indexing-Service should be able to provide it.</p>
<p>Indexing already keeps track of EVERY SINGLE WORD IN EVERY SINGLE FILE! &nbsp;But somehow, can&#8217;t yet tell me how big my files are, or how many files are in a director?</p>
<p>Based on the volume and type of information that indexing tracks, I think it could also track information on files regarding numbers, and sizes, properly accounting for permissions and hard-links.</p>
<p>Ultimately, this information should be available to the Customer. &nbsp;I don&#8217;t care which service provides it.</p>
<div class=post>[<i>If you want to store this information outside the file system, then more power to you. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709493">
				<div id="div-comment-709493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BCS</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709493">
			February 17, 2009 at 3:52 pm</a>		</div>

		<p>Is their any MS provided code for computing these things? I would expect that even if the FS doesn&#8217;t have it built in it would be nice to be able to get the info out of the box. Heck Explorer must have the code somewhere.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709503">
				<div id="div-comment-709503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709503">
			February 17, 2009 at 4:02 pm</a>		</div>

		<p>&quot;I suppose the feature should be turn-off-able for those who DID mind showing this info.&quot;</p>
<p>APIs that may or may not work really suck. Any programmer who wants to use the information has to check whether it is enabled (and even if it is then the value might not be accurate) and so if the feature is used for any non-cosmetic purpose then they need to code an alternative algorithm, which they might as well then use on all platforms, unless it is really expensive, because maintaining one body of code is always easier than maintaining two.</p>
<p>If you want a purely-cosmetic-because-it-might-not-be-accurate number to appear in Explorer, use rand().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709513">
				<div id="div-comment-709513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709513">
			February 17, 2009 at 4:04 pm</a>		</div>

		<p>@Michiel:</p>
<p>Please no, not another file like that poxy thumbs.db that ends up everywhere for no good reason (yes, I know you can turn it off in Explorer; no, that doesn&#8217;t stop them from getting onto my USB key from other people&#8217;s machines).</p>
<p>Microsoft aren&#8217;t the only ones to do this, nor the most egregious. But it&#8217;s still a little pet peeve (and, IMO, a good case of &quot;don&#8217;t keep track of what you don&#8217;t need&quot;).</p>
<p>As has been pointed out it just replaces one problem (how do I get the size of this directory?) with another (how do I verify that size.db is up-to-date?) which isn&#8217;t even significantly easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709523">
				<div id="div-comment-709523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709523">
			February 17, 2009 at 4:26 pm</a>		</div>

		<p>@Aaron: Indexing service can tell you how big files are. &nbsp;It stores a variety of metadata, including the size.</p>
<p>I think you can also find out how many files are in a directory with an appropriate query.</p>
<p>But since it doesn&#8217;t precalculate totals, I suspect it would be quicker to get this information from the file system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709533">
				<div id="div-comment-709533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709533">
			February 17, 2009 at 4:41 pm</a>		</div>

		<p>@cjm,</p>
<p>Task Manager shows the processes it can enumerate. If you have administrative privileges, it will show you all terminal sessions. If you don&#8217;t have admin privs, it will only show you your session. If you&#8217;re the first user logged in, it will also show you all system services (which run on session 0). In vista, no user runs on session zero, and you won&#8217;t see all services.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709563">
				<div id="div-comment-709563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709563">
			February 17, 2009 at 5:28 pm</a>		</div>

		<p>The question about &#8216;ownership&#8217; is not entirely correct. There is some confusion here about people like Raymond who use &#8216;owner&#8217; as &#8216;the user identity that owns the file&#8217; and others who seem to think it is &#8216;the real person who paid for the computer&#8217;.</p>
<p>Fortunately, we don&#8217;t have to resolve that question.</p>
<p>The real question is &#8216;who is allowed to see the metadata&#8217; such as file size. The ACL of a file gives precise control over this via the READ_ATTRIBUTES access.</p>
<p>Apart from that quibble, I&#8217;m on the side of people who say it&#8217;s no business of the file system to maintain running totals of the space consumed by the subtree rooted at some arbitrary directory. &nbsp;How often is that needed, anyway? &nbsp; It is programmatically simple to count it when needed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709593">
				<div id="div-comment-709593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709593">
			February 17, 2009 at 6:18 pm</a>		</div>

		<p>Another difficulty with doing this: what happens to you directory size when you mount either another filesystem or a network drive somewhere in your directory tree ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709633">
				<div id="div-comment-709633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff Tyrrill</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709633">
			February 17, 2009 at 8:04 pm</a>		</div>

		<p>@DWalker59:</p>
<p>&quot;My computer doesn&#8217;t HAVE any non-owner users. &nbsp;Ever. &nbsp;But no, in general, I wouldn&#8217;t mind at all. &nbsp;</p>
<p>I suppose the feature should be turn-off-able for those who DID mind showing this info.&quot;</p>
<p>So Microsoft should punch holes in the low-level security system because you think that some owners wouldn&#8217;t &quot;mind&quot; sharing this information, and it&#8217;s the burden of every owner to track down all of these holes and re-enable the security unless they agree with these arbitrary proposed inconsistencies in the security system?</p>
<p>That reminds me of somebody complaining once in an article (sorry, I&#8217;ll never be able to locate it, it was years ago) that the Music folder which is currently in My Documents ought to instead be a single shared folder on the machine, because they believed typically in a home everybody would want to share their music with each other. That&#8217;s not a valid justification for destroying the per-user/per-computer separation which is an architectural principle of the operating system. If people in a household (or any other arrangement) would like to share music they are free to do so by creating a shared folder under the current system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709653">
				<div id="div-comment-709653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709653">
			February 17, 2009 at 9:09 pm</a>		</div>

		<p>If you want an accurate count of just the number of files in a directory, (and it SEEMS like it would be easy to implement), you aren&#8217;t thinking about multi-tasking. &nbsp;You&#8217;d have to have the OS block access to the directory while the calculations are done. &nbsp;We can&#8217;t have files created or removed during the counting. &nbsp;Plus, the number your process got may not be accurate as after the count is done other processes can modify the directory. &nbsp;It is better to have a get-next-entry &nbsp;API for this reason.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709663">
				<div id="div-comment-709663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jolyon Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709663">
			February 17, 2009 at 9:27 pm</a>		</div>

		<p>&quot;APIs that may or may not work really suck&quot;</p>
<p>Right, but how about an API that works all of the time but which may work one way or another depending on environmental factors?</p>
<p>A lot of the &quot;Yes but&#8230;&quot; arguments against the file system maintaining this information simply do not apply to a home user or in many cases even to (the local files system) of an office computer used by a single individual.</p>
<p>If there was an API that yielded the information of interest, that API could take a look around it&#8217;s environment and determine the appropriate mechanism for yielding the required result.</p>
<p>In a single-user, no security complications scenario, the file system maintained information could be used to quickly return the required result.</p>
<p>In a multi-user, security complicated scenario the figure would be calculated dynamically w.r.t context, just as ALL software currently has to do today.</p>
<p>Hard links etc certainly add further complication, but again, most people don&#8217;t even know that such things exist, let alone use them, and again they could be allowed for within the API implementation, one way or another.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709683">
				<div id="div-comment-709683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pete</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709683">
			February 17, 2009 at 9:44 pm</a>		</div>

		<p>@Jolyon,</p>
<p>Even on local drives, in directories designated as belonging to the end user, having the OS keep track of per-folder disk use would seriously impact computer performance in a lot of common situations. &nbsp;In a scenario where you have N-deep directories, each single write by an application (of which there could be many per second), would require N-writes. &nbsp;A different process which shared any part of the path would have to acquire some sort of exclusive lock on the shared directories, wasting even more time and disk throughput. &nbsp;Heck, just moving a single file from one folder to another might make one have to worry about deadlocks! &nbsp;Personally I&#8217;d rather just keep the performance. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709703">
				<div id="div-comment-709703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kaenneth</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709703">
			February 17, 2009 at 9:52 pm</a>		</div>

		<p>My issue with Thumbs.db is that it is tagged as a system owned file (at least on XP)&#8230; every time I move/delete a media folder I get prompted if I want to move/delete the system file thumbs.db&#8230;</p>
<p>otherwise, I like having thumbnails, and it&#8217;s good the metadata is stored with the data. A while back I ran a popular linux desktop, and when I switched back to Windows, used a extfs driver to copy my files back to a windows machine, and found many, many things I had deleted, and wanted very deleted, had thumbnails stored in a central .directory that wasn&#8217;t cleaned when the origional files were deleted, including confidental faxes. (not a linux fault, I&#8217;ve seen the same thing with windows apps.)</p>
<p>Thumbnails, Sine/Cosine Tables, and other expensive to regenerate data is acceptable to retain; but retaining by default is a case of premature optimization, having to recalculate a few numbers in memory thousands of times over is much faster than swapping because you ran out of ram.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis even thread-even depth-1" id="comment-709713">
				<div id="div-comment-709713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709713">
			February 17, 2009 at 10:22 pm</a>		</div>

		<p>I didn&#8217;t realize that about Vista and the last-accessed time stamp. &nbsp;Running as standard user on XP actually generates a lot of &quot;access-denied&quot; noise in a Process Monitor or LUA Buglight trace (the latter filters it out by default) because exe and dll files are opened for GenericRead + WriteAttributes so that last-access can be updated. &nbsp;Windows XP &quot;degrades gracefully&quot; by opening the file for just GenericRead and not updating last-access in that case.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-709453">
				<div id="div-comment-709453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709453">
			February 17, 2009 at 3:03 pm</a>		</div>

		<p>@cjm:</p>
<p>Explorer is unlikely to be checking the process list, and you can easily verify that you *can* run multiple copies of Explorer under different users (else Terminal Services and Fast User Switching would be a little broken).</p>
<p>It&#8217;s probably looking for a named object in the Local (session) scope to avoid creating more than one instance of itself in the same session.</p>
<p>@Michiel:</p>
<p>I don&#8217;t think it would make sense for directory size information to be stored similar to thumbs.db because validating that the cached size information was up-to-date would often take as long as re-calculating the information. You&#8217;d have to do a scan of the directory structure to see if any sub-directories had changed or been added since the cache file was written.</p>
<p>(You might be able to exclude some directories at the deepest part of the tree by noticing that their timestamps haven&#8217;t changed since the cache was last updated, but that only works for folders you know to have no sub-folders. The modified timestamp doesn&#8217;t change on a folder if its sub-folder contents are changed; only if it&#8217;s own contents are changed. Even then I&#8217;m not sure if it&#8217;s reliable, and there&#8217;s definitely the problem of programs (re-)setting folder timestamps (which could also affect thumbnails, of course).)</p>
<p>FWIW there&#8217;s a shell extension for Explorer that runs a SYSTEM service which keeps track of folder size changes. Some people seem to like it. Personally I think the idea is a bit flawed as it can never be completely accurate (plus keeping that info in memory seems a waste given how often one typically wants to see folder sizes in such a hurry) but I guess if you don&#8217;t need that, and/or don&#8217;t care about the cases where it&#8217;d be inaccurate, then it does work.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709553">
				<div id="div-comment-709553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Trent</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709553">
			February 17, 2009 at 4:48 pm</a>		</div>

		<p>In addition to the security considerations, the other problem is that any such value would have to have too many caveats applied to it to be a useful number.</p>
<p>And storing useless information is even worse than storing information you don&#8217;t need.</p>
<p>For example, consider the cases of network shares, which can be updated by other machines even when your machine is off (especially with NAS drives). </p>
<p>Even if you only wanted this mythical value to track &quot;directories on disks on the local machine&quot; (assuming you can really even figure that out, given the presence of local mappings and substs), how about directories that have links to files or subdirectories on network drives? Should their number only refer to &quot;the subset of the stuff in this directory that &#8216;I&#8217; happen to have been the one to have written &#8216;locally&#8217;&quot;? </p>
<p>Now, should their be a system call that accurately *calculates* this number? That&#8217;s a useful question to ask. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709753">
				<div id="div-comment-709753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michiel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709753">
			February 18, 2009 at 3:40 am</a>		</div>

		<p>Glad to see I&#8217;m not the only one that dislikes the thumbs.db littering. I agree 100% with &nbsp;Raymond&#8217;s remark to Aaron. This kind of information should be tracked by an optional service, and stored centrally. </p>
<p>Flushing the information to disk can be done lazily, as the information is fully recoverable after a crash. Of course, for efficiency reasons you&#8217;d want to keep dirty flags at a more granular level than entire disks. But you&#8217;d want to have some locality of reference to make recursive queries fast. So, you&#8217;d probably want to keep that data together. E.g. Program Files and My Documents would each have their own chunk of directory metadata info, with separate dirty flags. </p>
<p>Can this service be written outside Microsoft? Probably not, as you need to keep track of file changes during shutdown. That means that you&#8217;d need to keep write to disk after the NTFS susbsystem has shut down, but before the disk drivers themselves call it quits. And NTFS has to give you a bunch of fixed sectors that you can write to after it quit. I understand that there&#8217;s similar functionality anyway for hibernating.</p>
<div class=post>[<i>Um, use the change journal. That&#8217;s what it&#8217;s for: Tracking changes to the file system when you&#8217;re not running. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick even thread-even depth-1" id="comment-709763">
				<div id="div-comment-709763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709763">
			February 18, 2009 at 5:24 am</a>		</div>

		<p>@cjm, Leo Davidson: It&#8217;s simply looking for a window with the appropriate window class, and sending it a message. If there&#8217;s an IE or Firefox window already in your window station, it will be found and the new window will close.</p>
<p>If you don&#8217;t want this to happen, turn off the &#8216;Reuse windows for launching shortcuts&#8217; option (in IE).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709793">
				<div id="div-comment-709793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709793">
			February 18, 2009 at 6:28 am</a>		</div>

		<p>Rather annoyingly, the last access date in an Explorer properties dialog is always &quot;now&quot;, presumably because it just accessed the file in order to populate the Summary tab&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk even thread-even depth-1" id="comment-709863">
				<div id="div-comment-709863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709863">
			February 18, 2009 at 11:34 am</a>		</div>

		<p>@Ray Trent: &quot;any such value would have to have too many caveats applied to it to be a useful number&quot;.</p>
<p>No, it would NOT have to have too many caveats to be useful! &nbsp;The information IS useful. &nbsp;If I know that it&#8217;s not 100% correct if I have hardlinks, and I also know that I don&#8217;t have any hardlinks (in my user directories), then I know that the number is useful. &nbsp;I don&#8217;t mount other filesystems in my directory tree.</p>
<p>I am perfectly aware that what applies to me doesn&#8217;t apply to everyone, but that doesn&#8217;t make the information &quot;not useful&quot; to me.</p>
<p>As the creator of one of the free services said, in the original linked entry, he created something that was useful to him, and other people could use it if they wanted to. &nbsp;You can&#8217;t unilaterally declare that the information is not useful.</p>
<p>And, when you discover that there are gigabytes of junk in a Temp folder, or gibgabytes of junk in the &quot;desktop&quot; or &quot;documents&quot; folder of a user whose logon name has been deleted, or gigabytes of files in a folder tree for a program that you uninstalled a long time ago, then you have gained some useful information. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709893">
				<div id="div-comment-709893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Robert Obryk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709893">
			February 18, 2009 at 1:10 pm</a>		</div>

		<p>So what does the change journal do in presence of hardlinks and events associated with file itself and not its directory entry (for instance, file truncation)? Does it store event for every filename or for the one which was used when opening the file? If the former, then the list of file entries corresponding to a file must be stored with it on disk &#8212; is there a public API to access it?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-709903">
				<div id="div-comment-709903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709903">
			February 18, 2009 at 3:22 pm</a>		</div>

		<p>Aaargh! was nitpicking the word &quot;owner&quot;, perhaps admin would have been a better word, though often the admin is the owner, which reminds me of &quot;The admin is an idiot&quot; article from this blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-leo-davidson odd alt thread-odd thread-alt depth-1" id="comment-709873">
				<div id="div-comment-709873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Leo+Davidson' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709873">
			February 18, 2009 at 12:26 pm</a>		</div>

		<p>@DWalker59:</p>
<p>How often do you check for wasted space? Unless you&#8217;re doing it more than once an hour I don&#8217;t see why you&#8217;d need an API that returned the information faster than it can be calculated already.</p>
<p>Some of the replies in this thread make it sound like it&#8217;s *impossible* to find out how big directories are at the moment but that&#8217;s not true at all. It&#8217;s a trivial amount of code. One short, recursive function. Even if you check for links it&#8217;s not complicated.</p>
<p>It&#8217;s not _that_ slow, either. Unless you have something crazy &#8212; like folders with 100,000 files in them, in which case you&#8217;ve probably got bigger problems and/or know about those special folders and can exclude them from measurements &#8212; it&#8217;s not going to take more than a few seconds to calculate the disk space used without needing any kind of cache.</p>
<p>That goes double for things like Temp, Desktop and Documents which are typically shallow folders which can be enumerated (recursively) in under a second each.</p>
<p>Also, if you are frequently re-scanning the same folders then it gets even quicker as the filesystem caches the data in memory. Open the Properties dialog for a folder with a lot below it, let it calculate, then close that an open it again. The second one will usually calculate almost instantly because it&#8217;s just re-reading the filesystem structures from memory.</p>
<p>So given that it&#8217;s easily calcualted now, in a reasonably quick way, and caching the data has all sorts of issues attached with it (whether or not you care about them, unaware people will run into them if a caveat-filled API were created), I don&#8217;t see that it would be worth it at all for the filesystem to provide the data.</p>
<p>(Assuming the current type of filesystem, of course. If we one day move to a database filesystem then things might be very different.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-710003">
				<div id="div-comment-710003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">required</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710003">
			February 18, 2009 at 9:46 pm</a>		</div>

		<p>Some of the reasons used to justify not storing the file size reminded me of the article &lt;a href=&quot;<a rel="nofollow" target="_new" href="http://blogs.msdn.com/oldnewthing/archive/2006/06/09/623793.aspx&quot;&gt;Why" rel="nofollow">http://blogs.msdn.com/oldnewthing/archive/2006/06/09/623793.aspx&quot;&gt;Why</a> did the Add or Remove Programs control panel try to guess all that information?&lt;/a&gt;</p>
<p>Not to say there&#8217;s any immediate relevance, it just, reminded me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-709953">
				<div id="div-comment-709953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jolyon Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709953">
			February 18, 2009 at 5:01 pm</a>		</div>

		<p>For the simple case where a directory size metric could be maintained (no security, single user etc), the &quot;size of files in this directory&quot; metric would be just that&#8230;. the size of files in THIS directory, not &quot;this directory and all sub-directories&quot;.</p>
<p>A change to a file (or files) in a directory would affect the metric for THAT directory only.</p>
<p>The API for calculating the &quot;size&quot; of a directory would then still have to iterate over the sub-directory structure, but it would still be vastly more efficient than having to do that iteration over directories AND files in order to calculate the size. &nbsp;It would simply collect and sum the directory size metrics directly.</p>
<p>And since I suggested that any such API would internally select a strategy appropriate to the environment, then *if* performance were significantly impacted (I doubt that it would if you maintained the metrics as described above), but *if* it was (or you felt/feared that it was), it would be trivial to have a &quot;manual override&quot; setting suppressing the maintenance of this metric and forcing the API to calculate the metric dynamically on request.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding even thread-even depth-1" id="comment-709993">
				<div id="div-comment-709993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-709993">
			February 18, 2009 at 6:08 pm</a>		</div>

		<p>@DWalker59: Nobody is saying that a program which keeps track of folder sizes isn&#8217;t useful to *anybody*. But surely you can understand that it&#8217;s not going to be useful to EVERYbody. In fact, it&#8217;s only going to be useful to a very small percentage of people.</p>
<p>This blog post is about whether or not NTFS should keep track of recursive folder sizes for you. If such a feature is only going to be useful for a small percentage of people, and keeping track of those sizes has a performance penalty, then surely you must agree that this feature is better left to a third party program, rather than building it into NTFS where everybody would have to suffer the consequences?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-710023">
				<div id="div-comment-710023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aaargh!</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710023">
			February 19, 2009 at 8:20 am</a>		</div>

		<p>&quot;Aaargh! was nitpicking the word &#8216;owner&#8217;, perhaps admin would have been a better word&quot;</p>
<p>My point was that the admin/owner usually isn&#8217;t the one using the computer on a daily basis. At least not in a corporate setting.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-710063">
				<div id="div-comment-710063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710063">
			February 19, 2009 at 12:09 pm</a>		</div>

		<p>@Jolyon Smith:</p>
<p>&quot;The API for calculating the &quot;size&quot; of a directory would then still have to iterate over the sub-directory structure, but it would still be vastly more efficient than having to do that iteration over directories AND files in order to calculate the size.&quot;</p>
<p>What makes you say that? How do you enumerate the sub-directories without also enumerating the files?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dwalker-wk odd alt thread-odd thread-alt depth-1" id="comment-710073">
				<div id="div-comment-710073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DWalker' rel='external nofollow' class='url'>DWalker</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710073">
			February 19, 2009 at 12:32 pm</a>		</div>

		<p>@Dean Harding: &nbsp;You&#8217;re right, although I always wished it was something that Windows would keep track of for me. &nbsp;Now I realize that perhaps Windows shouldn&#8217;t; instead, users who want this should have to go through the process of finding a third-party tool, downloading it, trusting it, and installing it!</p>
<p>:-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-710203">
				<div id="div-comment-710203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://plexuk.co.uk/blogs/news/archive/2009/02/20/why-doesn-t-the-file-system-have-a-function-that-tells-you-the-number-of-files-in-a-directory.aspx' rel='external nofollow' class='url'>News</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710203">
			February 20, 2009 at 5:48 am</a>		</div>

		<p>There are any number of bits of information you might want to query from the file system, such as the</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-710283">
				<div id="div-comment-710283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Maybe insane, but who, really I?</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710283">
			February 20, 2009 at 12:35 pm</a>		</div>

		<p>I DON&#8217;T WANT filesystem to keep this info for me. I AM NOT TOO LAZY to call System.IO.Directory.GetFiles() and sum their sizes easily. I&#8217;m not too lazy to do it recursively for each GetFolder(). PowerShell can do it for me. And if I need it often, I&#8217;ll just create a cmdlet in PowerShell. Same if I need number of files/subfolders.</p>
<p>Why all you commenters put so much energy into inventing totally useless crappy feature?? Wondering about all problems, I/O, performance, security, mountpoints, hardlinks, USN change journal and so on&#8230;</p>
<p>HOW OFTEN do you need this info?? And now again: how often do you REALLY need this info??</p>
<p>You aren&#8217;t skilled to write yourself a script that would do that for you, but you feel skilled to resolve all the problems that arise from this stupid idea?? Then wow.</p>
<p>I DON&#8217;T THINK that people at Microsoft should spend ANY SECOND MORE wondering whether to implement this. DO NOT IMPLEMENT THIS.</p>
<p>About last access time, I think turning it off by default is A VERY GOOD IDEA. I&#8217;m turning it off at ANY MACHINE I administer since NT 4.0. I DIDN&#8217;T NEED IT A SINGLE TIME!! This is A DIFFERENT ISSUE than the above, because these times cannot be inferred, and I can imagine somebody may need it, BUT THEN HE/SHE SHOULD CONSCIOUSLY TURN IT ON!!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-710323">
				<div id="div-comment-710323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Friday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710323">
			February 20, 2009 at 2:37 pm</a>		</div>

		<p>Just like with the start menu, I expect in the next reincarnation of Windows the current behaviour to be thrown out and only this hypothetical size information to be maintained.</p>
<p>Quote Aaron Margosis in previous thread (which is now closed for comments):</p>
<p>Keeping AND MAINTAINING older code involves a lot of risk, and sometimes that risk is not worth the marginal benefit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aaron-margosis odd alt thread-odd thread-alt depth-1" id="comment-710473">
				<div id="div-comment-710473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Aaron+Margosis' rel='external nofollow' class='url'>Aaron Margosis</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710473">
			February 20, 2009 at 11:56 pm</a>		</div>

		<p>I would like to clarify and extend my previous comments:</p>
<p>Keeping and maintaining REDUNDANT AND/OR OBSOLETE older code involves a lot of risk, and sometimes that risk is not worth the marginal benefit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-710683">
				<div id="div-comment-710683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Friday</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710683">
			February 21, 2009 at 7:23 pm</a>		</div>

		<p>Aaron, nothing personal, I was just upset with the probable removal of Classic start menu in Windows 7. (And I still can&#8217;t calm down).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-710833">
				<div id="div-comment-710833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor Levicki</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710833">
			February 23, 2009 at 2:08 am</a>		</div>

		<p>Why the filesystem can&#8217;t just keep subtotals of each folder (not including subfolders) as a metadata updating them as the file sizes change and calculate grand-total of the recursive tree only when user clicks on properties to check it out? It would have a lot less work to do that way because it would just have to sum the folder sub-totals and not check each individual file.</p>
<p>As for the hardlinked files, the only logical way is to add their sizes only to the folder in which they physically reside, because that is where they are taking up the space. Hardlinks are most often made to make files more accessible in the hierarchy so usually the intention is not to copy them with a folder. Perhaps their size could be shown in a second sub-total on the property sheet, for example:</p>
<p>Folder size &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: 3,541,365 bytes</p>
<p>Folder size (with hardlinks) : 4,158,678 bytes</p>
<p>As for mounted filesystems, be it on a network or on another drive &#8212; they do not take up the space on the drive on which the mountpoint resides. Therefore they should not be summed up with the rest, but you could also show two totals:</p>
<p>Folder size &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;: 3.2 GB</p>
<p>Folder size (with mountpoints) : 41.5 GB</p>
<p>You folks seem to have rather poor imagination.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-710843">
				<div id="div-comment-710843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.levicki.net/' rel='external nofollow' class='url'>Igor Levicki</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-710843">
			February 23, 2009 at 2:11 am</a>		</div>

		<p>&quot;I DON&#8217;T WANT filesystem to keep this info for me. I AM NOT TOO LAZY to call System.IO.Directory.GetFiles() and sum their sizes easily.&quot;</p>
<p>Yes, and have users pull their hair out waiting for the result.</p>
<p>Moreover, at least 80% of users don&#8217;t know how to call System.IO.Directory.GetFiles().</p>
<p>Who asked you for an opinion anyway?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-712653">
				<div id="div-comment-712653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.openquality.ru/software-quality-news-0209/' rel='external nofollow' class='url'>OpenQuality.ru &#124; ?????????????????????? ??????????: ???????????? ???? ??????????</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090217-00/?p=19123#comment-712653">
			March 1, 2009 at 2:28 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://blog.openquality.ru/software-quality-news-0209/" rel="nofollow">http://blog.openquality.ru/software-quality-news-0209/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

