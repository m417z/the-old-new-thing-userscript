<html>
<head>
<title>What happens if you call RevertToSelf when not impersonating?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What happens if you call RevertToSelf when not impersonating?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 2, 2016 / year-entry #230</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161102-00/?p=94625</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>7</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Nothing, but be careful.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer wanted to know what happens if you call
<code>Revert&shy;To&shy;Self</code> from a thread that is not
impersonating.
"Does the call succeed or fail?
This particular scenario is not explicitly discussed in
the documentation.
We have a bunch of places in our code that say
<code>if (impersonating) RevertToSelf();</code>
and we were wondering whether the <code>if</code> test
was really necessary."
</p>
<p>
The answer to the question is that calling
<code>Revert&shy;To&shy;Self</code> when the thread
is not impersonating will return success
without doing anything
(because the thread is already not impersonating).
</p>
<p>
However, that doesn't mean that you can blindly remove
all your <code>if</code> tests.
You don't want to over-revert either.
Consider:
</p>
<pre>
// Error checking elided for expository purposes.
void DoSomething()
{
 bool impersonating = false;

 if (!ThreadIsAlreadyImpersonating() &amp;&amp;
     ImpersonationIsNeeded()) {
   StartImpersonating();
   impersonating = true;
 }

 DoWork();

 if (impersonating) {
  RevertToSelf();
 }
}
</pre>
<p>
If you remove the <code>if (impersonating)</code>
and unconditionally revert,
then you have a security defect if the thread
was already impersonating,
because your modified code will unconditionally
revert and prematurely end the existing impersonation. 
</p>
<p>
So yes, it's okay to call
<code>Revert&shy;To&shy;Self</code>
when the thread is not impersonating,
but that doesn't relieve you of the responsiblity
of knowing when to revert.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (7)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1271945">
				<div id="div-comment-1271945" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161102-00/?p=94625#comment-1271945">
			November 2, 2016 at 7:29 am</a>		</div>

		<p>Seems like something you could make an RAII helper for:</p>
<p>class Impersonator{<br />
bool impersonating;<br />
// prevent copy/move<br />
Impersonator(Impersonator&amp;&amp;) = delete;<br />
public:<br />
Impersonator():impersonating(false){<br />
    if (!ThreadIsAlreadyImpersonating() &amp;&amp;<br />
         ImpersonationIsNeeded()) {<br />
         StartImpersonating();<br />
         impersonating = true;<br />
    }<br />
}</p>
<p>~Impersonator() noexcept{<br />
    if (impersonating) {<br />
        RevertToSelf();<br />
    }<br />
}<br />
};</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2 parent" id="comment-1271955">
				<div id="div-comment-1271955" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161102-00/?p=94625#comment-1271955">
			November 2, 2016 at 7:48 am</a>		</div>

		<p>That rephrases the question but does nothing to help answer it.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-3 parent" id="comment-1271965">
				<div id="div-comment-1271965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161102-00/?p=94625#comment-1271965">
			November 2, 2016 at 8:33 am</a>		</div>

		<p>Not my intent, my intent was merely to demonstrate that you could take the sample code and wrap it up in an RAII helper for exception safety and ease of use.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-4 parent" id="comment-1271995">
				<div id="div-comment-1271995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161102-00/?p=94625#comment-1271995">
			November 2, 2016 at 10:38 am</a>		</div>

		<p>I intentionally present the code in a straightforward linear manner in order to avoid distractions from the issue at hand. In real life, you would use RAII, add error handling, include comments, all that stuff. The RAII class as written is not very reusable. You cannot plug in custom ImpersonationIsNeeded() or StartImpersonating() methods, so it would be a one-shot class specifically for DoSomething() that isn&#8217;t reusable.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-5" id="comment-1272005">
				<div id="div-comment-1272005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161102-00/?p=94625#comment-1272005">
			November 2, 2016 at 11:00 am</a>		</div>

		<p>Apologies, feel free to delete my comment</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1271956">
				<div id="div-comment-1271956" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ZLB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161102-00/?p=94625#comment-1271956">
			November 2, 2016 at 8:20 am</a>		</div>

		<p>Another approach to this which we took in a project a long time ago was to tie the impersonation stuff up in thread-factory.</p>
<p>Rather than having to track impersonation, you simply asked for thread with an impersonation token and you got a thread that is impersonating that user back. Obviously, this won&#8217;t work well if you have to impersonate a whole ton of users.</p>
<p>This meant that there was a clearer seperation between code that impersonates and code that doesn&#8217;t. This seperation is important becuase theres a whole ton of stuff that will break if you call under impersonation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1271975">
				<div id="div-comment-1271975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161102-00/?p=94625#comment-1271975">
			November 2, 2016 at 8:52 am</a>		</div>

		<p>Better OpenThreadToken in c-tor, remember resulted hanlde in field, then impersonate under specified token, in d-tor: revert and and re-impersonate under old token (if it was set on thread) back. This will allow nested impersonation under different user&#8217;s account, but only need to be careful with access rights to token objects themselves.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

