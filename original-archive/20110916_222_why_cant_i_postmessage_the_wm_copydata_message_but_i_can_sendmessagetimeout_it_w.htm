<html>
<head>
<title>Why can't I PostMessage the WM_COPYDATA message, but I can SendMessageTimeout it with a tiny timeout?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why can&#8217;t I PostMessage the WM_COPYDATA message, but I can SendMessageTimeout it with a tiny timeout?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 16, 2011 / year-entry #223</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110916-00/?p=9623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>3</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">After receiving the explanation of what happens to a sent message when Send­Message­Timeout reaches its timeout, a customer found that the explanation raised another question: If the window manager waits until the receiving thread finishes processing the message, then why can't you post a WM_COPY­DATA message? "After all, Send­Message­Timeout with a very short timeout isn't...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>After receiving the explanation of <a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/09/15/10208975.aspx"> what happens to a sent message when <code>Send&shy;Message&shy;Timeout</code> reaches its timeout</a>, a customer found that the explanation raised another question: If the window manager waits until the receiving thread finishes processing the message, then why can't you post a <code>WM_<wbr>COPY&shy;DATA</wbr></code> message? "After all, <code>Send&shy;Message&shy;Timeout</code> with a very short timeout isn't all that different from <code>Post&shy;Message</code>."</p>
<p> Actually,  <code>Send&shy;Message&shy;Timeout</code> with a very short timeout is completely different from <code>Post&shy;Message</code>. </p>
<p> Let's set aside the one crucial difference that, unlike messages posted by <code>Post&shy;Message</code>, which cannot be recalled, the <code>Send&shy;Message&shy;Timeout</code> function will cancel the message entirely if the receiving thread does not process messages quickly enough. </p>
<p> Recall that messages posted to a queue via <code>Post&shy;Message</code> are retrieved by the <code>Get&shy;Message</code> function and placed in a <code>MSG</code> structure. Once that's done, the window manager disavows any knowledge of the message. It did its job: It placed the message in the message queue and produced it when the thread requested the next message in the queue. What the program does with the message is completely up in the air. There's no metaphysical requirement that the message be dispatched to its intended recipient. (In fact, you already know of a common case where messages are "stolen" from their intended recipients: Dialog boxes.) </p>
<p> In principle, the message pump could do anything it wants to the message. Dispatch it immediately, steal the message, <a href="http://blogs.msdn.com/oldnewthing/archive/2005/04/26/412116.aspx"> throw the message away</a>, <a href="http://blogs.msdn.com/oldnewthing/archive/2008/05/23/8535427.aspx"> eat the message and post a different message</a>, even save the message in its pocket for a rainy day. </p>
<p> By contrast, there's nothing you can do to redirect inbound non-queued messages. They always go directly to the window procedure. </p>
<p> The important difference from the standpoint of messages like <code>WM_<wbr>COPY&shy;DATA</wbr></code> is that with sent messages, the window manager knows when message processing is complete: When the window procedure returns. At that time, it can free the temporary buffers used to marshal the message from the sender to the recipient. If the message were posted, the window manager would never be sure. </p>
<p> Suppose the message is placed in a <code>MSG</code> structure as the result of a call to <code>GetMessage</code>. Now the window manager knows that the receiving thread has the potential for taking action on the message and the buffers need to be valid. But how would it know when the buffers can be freed? "Well you can wait until the exact same parameters get passed in a <code>MSG</code> structure to the <code>Dispatch&shy;Message</code> function." But what if the message loop discards the message? Or what if it decides to dispatch it twice? Or what if it decides to <a href="http://msdn.microsoft.com/bb774593.aspx"> smuggle it inside another message</a>? </p>
<p> Posted messages have no guarantee of delivery nor do they provide any information as to when the message has been definitely processed, or even if it has been processed at all. If the window manager let you post a <code>WM_<wbr>COPY&shy;DATA</wbr></code> message, it would have to use its psychic powers to know when the memory can be freed. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (3)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-935923">
				<div id="div-comment-935923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kemp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110916-00/?p=9623#comment-935923">
			September 16, 2011 at 8:53 am</a>		</div>

		<p>It may be entirely inappropriate, but it helps me to relate them to TCP and UDP. There are several parallels in terms of the guarantee of delivery, implication of some form of transaction, and the different biases towards synchronous or asynchronous communication between the two.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-935933">
				<div id="div-comment-935933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110916-00/?p=9623#comment-935933">
			September 16, 2011 at 8:57 am</a>		</div>

		<p>Whoever asked this question didn&#39;t read yesterday&#39;s article.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-935993">
				<div id="div-comment-935993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110916-00/?p=9623#comment-935993">
			September 16, 2011 at 8:35 pm</a>		</div>

		<p>@Kemp: I find that quite a good relation actually&#8230; not entirely on the money, but gets the point across :)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

