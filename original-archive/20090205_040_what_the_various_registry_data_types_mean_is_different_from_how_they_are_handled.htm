<html>
<head>
<title>What the various registry data types mean is different from how they are handled</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What the various registry data types mean is different from how they are handled</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 5, 2009 / year-entry #41</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>55</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Although you can tag your registry data with any of a variety of types, such as REG_DWORD or REG_BINARY or REG_EXPAND_SZ. What do these mean, really? Well, that depends on what you mean by mean, specifically, who is doing the interpreting. At the bottom, the data stored in the registry are opaque chunks of data....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Although you can tag your registry data with any of a variety of types, such as <code>REG_DWORD</code> or <code>REG_BINARY</code> or <code>REG_EXPAND_SZ</code>. What do these mean, really?</p>
<p> Well, that depends on what you mean by <i>mean</i>, specifically, who is doing the interpreting. </p>
<p> At the bottom, the data stored in the registry are opaque chunks of data. The registry itself doesn't care if you lie and write two bytes of data to something you tagged as <code>REG_DWORD</code>. (Try it!) The type is just another user-defined piece of metadata. The registry dutifully remembers the two bytes you stored, and when the next person comes by asking for the data, those two bytes come out, along with the type <code>REG_DWORD</code>. Garbage in, garbage out. The registry doesn't care that what you wrote doesn't many any sense any more than the NTFS file system driver doesn't care that you wrote an invalid XML document to the file <code>config.xml</code>. Its job is just to remember what you wrote and produce it later upon request. </p>
<p> There is one place where the registry does pay attention to the type, and that's when you use one of the types that involve strings. If you use the <code>RegQueryValueA</code> function to read data which is tagged with one of the string types (such as <code>REG_SZ</code>), then the registry code will read the raw data from its database, and then call <code>WideCharToMultiByte</code> to convert it to ANSI. But that's the extent of its assistance. </p>
<p> Just as the registry doesn't care whether you really wrote four bytes when you claimed to be writing a <code>REG_DWORD</code>, is also doesn't care whether the various string types actually are of the form they claim to be. If you forget to include the null terminator in your byte count when you write the data to the registry, then the null terminator will not be stored to the registry, and the next person to read from it will not read back a null terminator. </p>
<p> This simplicity in design pushes the responsibility onto the code that uses the registry. If you read a registry value and the data is tagged with the <code>REG_EXPAND_SZ</code> type, <a href="http://blogs.msdn.com/oldnewthing/archive/2008/01/18/7145021.aspx#7152056"> then it's up to you to expand it if that's what you want to do</a>. The <code>REG_EXPAND_SZ</code> value is just part of the secret handshake between the code that wrote the data and the code that is reading it, a secret handshake which is well-understood <i>by convention</i>. After all, if <code>RegQueryValueEx</code> automatically expanded the value, then how could you read the original unexpanded value? </p>
<p> Windows Vista added a new function <code>RegGetValue</code> which tries to take care of most of the cumbersome parts of reading registry values. You can tell it what data types you are expecting (and it will fail if the data is of an incompatible type), and it coerces the data to match its putative type. For example, it auto-expands <code>REG_EXPAND_SZ</code> data, and if a blob of registry data marked <code>REG_SZ</code> is missing a null terminator, <code>RegGetValue</code> will add one for you. Better late than never. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (55)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-706363">
				<div id="div-comment-706363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706363">
			February 5, 2009 at 10:10 am</a>		</div>

		<p>This is the main thing about the registry I have never liked. &nbsp;It seems like the only point of having a type associated with the value is so that things like RegEdit can work. &nbsp;Generally you are reading from and writing to a specific registry value for which you know the type beforehand.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706373">
				<div id="div-comment-706373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andrew</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706373">
			February 5, 2009 at 10:14 am</a>		</div>

		<p>@John</p>
<p>But what about areas like the Registry Editor, where it uses that type to show a different editor?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706393">
				<div id="div-comment-706393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SmartyPants</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706393">
			February 5, 2009 at 11:15 am</a>		</div>

		<p>Its comforting to know you can still create hidden reg keys using internal NT api&#8217;s and regedit (atleast on WS 2003) cant open them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706403">
				<div id="div-comment-706403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">quarterlife</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706403">
			February 5, 2009 at 11:22 am</a>		</div>

		<p>&quot;The registry doesn&#8217;t care that what you wrote doesn&#8217;t many any sense any more than the NTFS file system&quot;</p>
<p>That doesn&#8217;t make any sense at all (which is funny considering what you were trying to say)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706413">
				<div id="div-comment-706413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SmartyPants</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706413">
			February 5, 2009 at 11:29 am</a>		</div>

		<p>@quarterlife</p>
<p>No, it makes sense. Are you a non-native speaker?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706423">
				<div id="div-comment-706423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706423">
			February 5, 2009 at 11:36 am</a>		</div>

		<p>No, it doesn&#8217;t make sense, because it says &#8220;many&#8221; instead of &#8220;make.&#8221;</p>
<div class=post>[<i>Holy cow, I read it twice and didn&#8217;t see the typo until you pointed it out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706433">
				<div id="div-comment-706433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blog.koroirc.com/' rel='external nofollow' class='url'>Koro</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706433">
			February 5, 2009 at 12:12 pm</a>		</div>

		<p>So that&#8217;s what RegGetValue does!</p>
<p>I was still wondering from the last time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706443">
				<div id="div-comment-706443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706443">
			February 5, 2009 at 12:19 pm</a>		</div>

		<p>Since NTFS is a file system, and the registry is like a filesystem, will the Windows team ever merge the two into one that performs well for both kinds of data? So that the registry hyves can then be simply folders in your profile that you can browse to, make shortcuts to keys, open them in Notepad, &amp;c?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706453">
				<div id="div-comment-706453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706453">
			February 5, 2009 at 1:04 pm</a>		</div>

		<p>Raymond, I&#8217;m curious are you familiar with the history behind why the registry was designed as a hierarchical database instead of a relational database?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706463">
				<div id="div-comment-706463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706463">
			February 5, 2009 at 2:31 pm</a>		</div>

		<p>ton: why would you ever need more than one way to get a setting, or to retrieve a large subset according to a common property? &nbsp;The decision between HKCU and HKLM is taken wrongly enough of the time already.</p>
<p>And how would you design it? &nbsp;A large proportion of settings in the registry are optional. &nbsp;You&#8217;d either end up with 3 tables, or so many that it would effectively be a filesystem. &nbsp;That comes with enormous memory and maintenance difficulties, not to mention the likelihood of unimplemented classes (thinking WMI here).</p>
<p>I&#8217;m not trying to bash your idea here &#8211; I&#8217;m interested in whether you have some existing system in mind.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706483">
				<div id="div-comment-706483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706483">
			February 5, 2009 at 3:26 pm</a>		</div>

		<p>@Mark it&#8217;s not really about having multiple ways to retrieve a setting. It&#8217;s that relational databases have proven to be a better storage model over the years than hierarchical database systems have. That&#8217;s what the registry really is; a hierarchical database that stores configuration settings for how the windows operating system and installed applications will behave.</p>
<p>A common problem is that programs and sometimes people will corrupt the registry by deleting a setting or supplying a nonsense value. If the registry had been designed as a relational database instead then deletions that destabilize the system could be prevented thru referential integrity and value constraints. It just would have made for a more stable system overall as opposed to what Microsoft has to support with the registry now. However, I fully acknowledge that it is much too late to change this now because of backwards compatibility issues and its also why I only asked Raymond about the history.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706493">
				<div id="div-comment-706493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706493">
			February 5, 2009 at 5:29 pm</a>		</div>

		<p>I don&#8217;t understand how the registry being a relational database would protect against someone corrupting the registry by deleting a setting or supply a nonsense value.</p>
<p>As far as I&#8217;m aware, the major advantage of a relational database is the fact that you can model more relationships than can be modeled in a hierarchical database. &nbsp;I don&#8217;t understand how that modeling technique ( which would&#8217;ve been more expensive right? ) would prevent misuse of the registry.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706513">
				<div id="div-comment-706513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706513">
			February 5, 2009 at 5:50 pm</a>		</div>

		<blockquote><p>
  Since NTFS is a file system, and the registry is like a filesystem, will the Windows team ever merge the two into one that performs well for both kinds of data? So that the registry hyves can then be simply folders in your profile that you can browse to, make shortcuts to keys, open them in Notepad, &amp;c?
</p></blockquote>
<p>I doubt it; reg data is far more granular than FS data, so different rules are required to make each perform well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706523">
				<div id="div-comment-706523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706523">
			February 5, 2009 at 6:04 pm</a>		</div>

		<p>@Bryan</p>
<p>An application would have a table or group of tables in relational style registry. A group of settings would be a row. A single setting would be a column. Is it starting to become clearer now how SQL like statements could now be used to constrain what gets deleted and added? How good is your understanding of SQL and DBMS?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706543">
				<div id="div-comment-706543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706543">
			February 5, 2009 at 8:35 pm</a>		</div>

		<p>That makes some level of sense, but the prospect of enforcing constraints seems like it defeats the whole prospect of the registry being lightweight. &nbsp;I would only say I know only basic RDBMS knowledge, but I know table data can be heavy (com structured storage being a case-in-point).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706553">
				<div id="div-comment-706553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">agrirmSmadcaf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706553">
			February 5, 2009 at 8:39 pm</a>		</div>

		<p>dgdfgds fgf gdsf gssd f gfsd df dsfdgdfgds fgf gdsf gssd f gfsd df dgdfgds fgf gdsf gssd f gfsd df</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706563">
				<div id="div-comment-706563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706563">
			February 5, 2009 at 9:00 pm</a>		</div>

		<p>@Bryan</p>
<p>You must understand the registry is storing data that determines whether or not your computer can boot! Instead of being lightweight the registry needs to be robust and durable.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706573">
				<div id="div-comment-706573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706573">
			February 5, 2009 at 9:44 pm</a>		</div>

		<blockquote><p>
  I doubt it; reg data is far more granular than FS data, so different rules are required to make each perform well.
</p></blockquote>
<p>But there is no reason the merged filesystem couldn&#8217;t contain both rulesets. In fact, it already does in a sense, since the hives are already saved in regular files in the filesystem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706583">
				<div id="div-comment-706583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706583">
			February 5, 2009 at 9:59 pm</a>		</div>

		<p>ton: it seems there&#8217;s two changes with your suggestion, viz.</p>
<p>1) The isolation of program data, which is currently done through cooperation of programs and permissions on individual keys. &nbsp;Would you allow programs to access each other&#8217;s tables? &nbsp;If so, how do you make sure they don&#8217;t do that accidentally?</p>
<p>An alternative is to have different tables for each class of data (Paths, Dwords, UninstallInfos), but you&#8217;d then need huge indexes, and a sensible way for adding new classes.</p>
<p>2) The formation of settings into rows and columns. &nbsp;I don&#8217;t think this will help at all: nearly all registry data is individual settings, and doesn&#8217;t fit into a grid at all.</p>
<p>How good is your understanding of SQL and DBMS? &nbsp;Good enough to know that forgetting the WHERE clause in a DELETE is about as easy as stomping someone else&#8217;s registry key. &nbsp;I also feel that the benefits of RDBMS only emerge with indexing and normalisation.</p>
<p>Perhaps if the Windows 3.1 OLE registry had been designed to use tables (like MSIs) it would be more efficient now. &nbsp;But your average program just wants to store window sizes or the last 5 opened documents: the registry was doomed as soon as someone decided to store config in it.</p>
<p>As for why that happened, my guess (which may or may not be as good as Raymond&#8217;s) is that it was economy. &nbsp;Imagine someone in the NT team looking around for some way to manage the rapid proliferation of .ini files &#8211; a hierarchical database that was already coded would have been too tempting not to use. &nbsp;(For some context, see the History part of <a rel="nofollow" target="_new" href="http://home.eunet.no/~pnordahl/ntpasswd/WinReg.txt" rel="nofollow">http://home.eunet.no/~pnordahl/ntpasswd/WinReg.txt</a> and bear in mind developers were used to GetPrivateProfileString, etc.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706593">
				<div id="div-comment-706593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706593">
			February 5, 2009 at 10:08 pm</a>		</div>

		<p>Anonymous Coward: the trouble isn&#8217;t in the granularity below the filesystem layer, but above. &nbsp;How would Windows tell a program that it can open a value like a text file, but can&#8217;t get its last modified date? &nbsp;Or that cmd&#8217;s current directory is longer than MAX_PATH characters long? &nbsp;Better to let programs treat them separately, since they&#8217;ll have to anyway.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706613">
				<div id="div-comment-706613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706613">
			February 5, 2009 at 11:36 pm</a>		</div>

		<p>It is already perfectly possible to create paths longer than MAX_PATH so while merging might increase the chance of hitting that, it doesn&#8217;t really create a problem that doesn&#8217;t already exist. The correct solution would be to remove the whole MAX_PATH restriction. This would probably require moving over to a new API, and saying ‘no sorry you can&#8217;t’ to ancient applications. We already do that by the way when an application using the ANSI API tries to open セーラー服と機関銃.mp3 for example. Similar applies to the time, ACL&#8217;s or lack thereof, and so on. For old applications using the old API everything will appear as it was as long as they access the registry through the registry functions, but for migrated applications like the shell things would be much simpler because you&#8217;d have one API for doing one thing, and as I said it would enable a lot of new features. Features which we should have been able to take for granted, given that the registry is a file system. And even unmigrated applications would benefit most of the time, seeing as when I concatenated the most ridiculously long keyname I could find (somewhere in the Windows part of the registry) with the place where ntuser.dat is now, I only got about half of MAX_PATH.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706633">
				<div id="div-comment-706633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706633">
			February 6, 2009 at 5:02 am</a>		</div>

		<blockquote><p>
  That makes some level of sense, but the prospect of enforcing constraints seems like it defeats</p>
<p>  the whole prospect of the registry being lightweight.
</p></blockquote>
<p>Exactly. &nbsp;As the current registry shows it was perfectly possible to make it a bloated mass of cruft without having to resort to implementing constraints.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706643">
				<div id="div-comment-706643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">A Crazy Person</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706643">
			February 6, 2009 at 6:55 am</a>		</div>

		<p>Wow!</p>
<p>Armed with this information, can I now hide extra configuration information in the bytes after a DWORD value, storing a whole pile of hidden settings, masquerading as a zero DWORD value in the UI?</p>
<p>(ducks)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706603">
				<div id="div-comment-706603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706603">
			February 5, 2009 at 10:56 pm</a>		</div>

		<p>@Mark &nbsp;</p>
<p> You are over complicating my brilliant design :-)</p>
<p>1)All access to the database,isolation, and &quot;accidents&quot; can be controlled by only allowing each program to have permissions to its own database and tables. (e.g.GRANT,REVOKE,DENY)</p>
<p>2)Even if there is only one column in the table it&#8217;s still better than using a hierarchical design especially when it comes to critical data. Also, most programs I&#8217;ve seen usually have *multiple* settings for each program if they are non trivial which is almost always for most commercial programs that software vendors sell. SQL and RDMS are fully capable of fulfilling all requirements you brought up.</p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/SQL#Data_control" rel="nofollow">http://en.wikipedia.org/wiki/SQL#Data_control</a></p>
<p><a rel="nofollow" target="_new" href="http://en.wikipedia.org/wiki/DBMS#DBMS_Features_and_capabilities" rel="nofollow">http://en.wikipedia.org/wiki/DBMS#DBMS_Features_and_capabilities</a></p>
<p> Read both links carefully and you&#8217;ll start to see the possibilities. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706663">
				<div id="div-comment-706663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706663">
			February 6, 2009 at 8:37 am</a>		</div>

		<p>And, unfortunately, we will not be able to actually use RegGetValue for several years more, since there are still a lot of people who use XP or earlier systems.</p>
<p>I recently heard from a developer from another company that they cannot use a more recent version of their chosen development environment, which creates programs that require newer API functions, because several of their clients are still on Windows 9x.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706673">
				<div id="div-comment-706673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrkMatter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706673">
			February 6, 2009 at 9:09 am</a>		</div>

		<p>&quot;All access to the database,isolation, and &quot;accidents&quot; can be controlled by only allowing each program to have permissions to its own database and tables.&quot;</p>
<p>Except that this does not only involve a change to the registry, but to the whole Win32 security model which, as far as I know, has no concept whatsoever of application identity. Security constraints are always applied on a per user basis.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706683">
				<div id="div-comment-706683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706683">
			February 6, 2009 at 9:13 am</a>		</div>

		<p>@ton</p>
<p>What is the mechanism by which you grant each program it&#8217;s own permissions? &nbsp;How do you protect against collisions, impersonations, etc.? &nbsp;What about &quot;suites&quot; where several programs work together and share registry data? &nbsp;What about all the registry data that is written by programs but largely used by windows itself (or other programs&#8230; interface stuff,etc.)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706693">
				<div id="div-comment-706693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706693">
			February 6, 2009 at 10:18 am</a>		</div>

		<blockquote><p>
  not be able to actually use RegGetValue for several years
</p></blockquote>
<p>Can&#8217;t you just use RegGetValue from Wine?</p>
<p><a rel="nofollow" target="_new" href="http://source.winehq.org/git/wine.git/?f=dlls/advapi32/registry.c;hb=HEAD" rel="nofollow">http://source.winehq.org/git/wine.git/?f=dlls/advapi32/registry.c;hb=HEAD</a></p>
<p>A cursory glance seems to indicate that it&#8217;s implemented in terms of other API&#8217;s so you can add it in a helper DLL if you need it.</p>
<blockquote><p>
  each program it&#8217;s own permissions
</p></blockquote>
<p>And that isn&#8217;t even what you really want&#8230; you really want different instances of programs to possibly have different sets of permissions too. I think the only way to solve that problem would be to make Windows (or Linux depending on what&#8217;s easier to do) more object oriented, eventually turning the old Win32 and POSIX API&#8217;s into an emulation layer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706703">
				<div id="div-comment-706703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706703">
			February 6, 2009 at 10:35 am</a>		</div>

		<p>I entirely disagree with the Registry being robust and durable. &nbsp;No, the last thing we need is another slow mechanism that makes it difficult and unhelpful to store information.</p>
<p>Further, all that permissions work would be a bear. &nbsp;I don&#8217;t really feel like having to develop or use a registry management library just for storing application data.</p>
<p>In the end, your solution seems overcomplicated and restrictive. &nbsp;Windows can certainly boot without all of the registry data intact as well as long as it can load the hives themselves.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706743">
				<div id="div-comment-706743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706743">
			February 6, 2009 at 10:54 am</a>		</div>

		<p>@DrkMatter</p>
<p>Remember basic object-oriented design. The registry would have application identity knowledge and enforce security access to the registry the win32 security model would go unchanged.</p>
<p>@Thom</p>
<p>The registry would grant permissions to each installed program. The registry could store a sha-256 hash to verify application identity. In the suite case it would simply be a collection of tables for each component in the suite. The last case only changes in one way because of a move to the relational model from a hierarchical model, and that is the way the data is accessed. What I have presented is pretty simple; if you are willing to completely forget about backwards compatibility :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706773">
				<div id="div-comment-706773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706773">
			February 6, 2009 at 11:39 am</a>		</div>

		<p>@ton</p>
<p>But the question becomes how would the registry know when and to which program to grant permissions. &nbsp;The hash would have to be updated each and every time the application was updated, else all settings would be lost. What if I have 2,3,4 or 5 versions of a program on my computer for some reason? &nbsp;All have different hashes, what data is shared and what isn&#8217;t, and who decides?</p>
<p>In these instances do you ask the user and trust their answer? &nbsp;Do you decide when a program is installed or updated? &nbsp;Do you let the program tell you, which only works for things it currently knows of like updates or new add-ons, or lets some malware fool you? &nbsp;</p>
<p>Same for the suite of applications, who tells you what is part of the suite? &nbsp;The user? &nbsp;The application(s) &#8211; which may not be installed all at once but separately over time? &nbsp;What if some are updated and others aren&#8217;t? What about third party add ons, especially competitive ones that a program might wish to block?</p>
<p>Even tossing out backwards compatibility it grows very complex very quickly, so much so that it becomes an unworkable solution. &nbsp;I wish it didn&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706783">
				<div id="div-comment-706783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrkMatter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706783">
			February 6, 2009 at 11:50 am</a>		</div>

		<p>@ton</p>
<p>Even if you disregard the concerns about determining application identity, which Thom explained, there is still the question of ressource ownership. The registry and the data it contains belong to the user, not the application. Much like how the files that make up an application&#8217;s executable data also belongs to the user. If the user wants to delete those files, or replace them with others, it is his choice: much like it is the user&#8217;s choice to overwrite or delete any registry configuration for any application.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706793">
				<div id="div-comment-706793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706793">
			February 6, 2009 at 12:29 pm</a>		</div>

		<p>@Anonymous Coward:</p>
<blockquote><p>
  Can&#8217;t you just use RegGetValue from Wine?
</p></blockquote>
<p>Only if your code&#8217;s license is LGPL-compatible. I suppose you could create a LGPL-licensed helper DLL and use it in your application, however. You would then only have to redistribute the DLL&#8217;s source code together with your application.</p>
<p>But you still would be reimplementing RegGetValue instead of simply using it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706813">
				<div id="div-comment-706813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ton</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706813">
			February 6, 2009 at 12:46 pm</a>		</div>

		<blockquote><p>
  Even if you disregard the concerns about determining application identity, which Thom explained, there is still the question of ressource ownership.
</p></blockquote>
<p>Both of your objections about application identity stem from a lack of understanding of how hash algorithms work. If there is a different version of the same program then it would create a different hash value. It&#8217;s just that simple. As for resource ownership the user can override the constraints if they want but they should be ready to deal with the consequences and they would be prompted with such information. You can&#8217;t save everyone from winning the Darwin award.</p>
<p>I have only proposed a change from a hierarchical model to a relational one for data storage for the registry. ALL THE OTHER CAPABILITIES OF THE REGISTRY ARE COMPLETELY UNAFFECTED BY HOW IT ACTUALLY STORES DATA.</p>
<p>It just adds additional benefits and tools that a hierarchical system can&#8217;t provide. geez&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706823">
				<div id="div-comment-706823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706823">
			February 6, 2009 at 12:58 pm</a>		</div>

		<p>&quot;Both of your objections about application identity stem from a lack of understanding of how hash algorithms work. If there is a different version of the same program then it would create a different hash value.&quot;</p>
<p>That&#8217;s the point: &nbsp;sometimes, we don&#8217;t want it to, other times we do. &nbsp;The application I&#8217;m working on has 4 different versions that can be installed at the same time for feature-related reasons. &nbsp;In addition, each of those versions has 1 &#8211; 3 minor versions that have to share registry data with the other versions; however, must also be independently identified as minor versions.</p>
<p>Users aren&#8217;t going to care about the above situation. &nbsp;UAC will look like a walk in the park compared to trying to help a user understand how to deal with the above scenario.</p>
<p>Your system also adds additional complexity, management requirements, and critical design issues that a hierarchical system doesn&#8217;t have.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706843">
				<div id="div-comment-706843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">night</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706843">
			February 6, 2009 at 1:22 pm</a>		</div>

		<p>@Coward</p>
<blockquote><p>
  Since NTFS is a file system, and the registry is like a filesystem, will the Windows team ever merge the two into one that performs well for both kinds of data?
</p></blockquote>
<p>Yes, I would favor that, too, having lost data due to corrution of Outlook Express databases and OLE structured storage many times in the past. Keep things simple and have everything in a single, reliable, transparent storage system. Modern file systems should be strong enough for that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706863">
				<div id="div-comment-706863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Markus</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706863">
			February 6, 2009 at 1:52 pm</a>		</div>

		<p>ton. relational model offer only additional problems as means of access control. relational model offer only overhead as diff means of storage only.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706893">
				<div id="div-comment-706893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706893">
			February 6, 2009 at 6:21 pm</a>		</div>

		<blockquote><p>
  corruption of Outlook Express databases and OLE structured storage
</p></blockquote>
<p>Yes, what&#8217;s with all these subfilesystems in the first place? They just make things more difficult for the end user (editing a CHM file is significantly more involved than editing a folder of HTML files) and tend to be implemented badly. CHM is a case in point, someone once remarked that it looked like it was cooked up by an intern.</p>
<blockquote><p>
  could create a LGPL-licensed helper DLL
</p></blockquote>
<p>That was what I said yes. On Vista you could simply not install the DLL and use the system provided function, if you&#8217;re desperate to shave a few kB of your working set. But if you&#8217;re that desperate you shouldn&#8217;t be running Vista.</p>
<p>The whole hashes idea sounds bonkers to me. It&#8217;s fragile, probably more annoying than UAC, provides less security than the current system could provide, and worse, it sounds complicated. Which means that most people will not bother. It cannot properly differentiate between different instances of the same program without doing trickery, and it requires a lot of configuring that sounds like it would be hard to do dynamically. All in all, it sounds complex, contrived, fragile, and non-intuitive.</p>
<p>I&#8217;d prefer an object-oriented approach. Take things like Java or .NET as examples. If you pass an object to a function, you can call methods on its interfaces. Now imagine that you can port that concept&#8230; like an application would be the function that you could pass objects to. Over the past decades we&#8217;ve come a long way in understanding object-oriented design, we now know a lot about it, how to reason about it, and I think applying that knowledge to operating system design and security would be a very fruitful endeavour.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706853">
				<div id="div-comment-706853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Thom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706853">
			February 6, 2009 at 1:36 pm</a>		</div>

		<p>@ton</p>
<p>Sorry ton, but I think the lack of understanding is on your part. &nbsp;All those hash values have to be associated with data in the registry and it is *impossible* for the OS, the software, or the user to give a definitive answer to what data should be associated with what hashes and available to what programs.</p>
<p>The OS has no way of knowing what program(s) should or should not be able to read or write particular data aside from the original hashed executable that wrote it. &nbsp;Allow all &#8211; in other words you&#8217;ve just tagged every bit of data with the hash of the executable that wrote it &#8211; then what have you gained but a lot of overhead to tell you who (originally?, last? &nbsp;journalled?) wrote the data. &nbsp;Deny all others but that one hashed executable, then you limit or break everything but that exact one. You can&#8217;t do *anything* based on those hashes without breaking something, so why bother with them to begin with. &nbsp; &nbsp;</p>
<p>You can&#8217;t rely on allowing the original executable to tell the OS what programs can read or write the data because the original executable only knows about (at best) programs that currently exist, and probably only those that are already installed. It has no knowledge of future updates or expansions to itself, updates to suite programs, new add-ons (including third parties), new OS components, etc.</p>
<p>You can&#8217;t rely on the user to tell you or even aid you, because even the most technically savy user has no idea what data is being written/read, when, and why.</p>
<p>Any change in OS components, OS features, installed software, etc., can require that those relations be changed *if they are actually used for anything* &#8211; but there is NO way for the OS, the original software, the user, or even the new software to determine how to do so with any accuracy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-706923">
				<div id="div-comment-706923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">The Imp</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706923">
			February 7, 2009 at 6:24 am</a>		</div>

		<p>@ton</p>
<p>A good reason for not designing (or redesigning) the registry as a relational database, is that traditionally, they are designed such that getting multiple chunks of data at once is as simple as getting single chunks. But with the registry, it&#8217;s generally implicit that you&#8217;re going to be asking for solitary chunks of data only. Hmm. Well, I guess that&#8217;s less true than it used to be… And the fact that the original design of the registry never expected to have very much of anything in it, and certainly not almost every setting for every program on the system.</p>
<p>Why do you assume that you cannot add referential integrity checks on a hierarchical (or spatial or otherwise non-relational) database?</p>
<p>@Anonymous Coward</p>
<p>NTFS and the registry cannot be merged as you suggest (however good that idea might otherwise be). They both support the same ACL system, but there is no guarantee that the filesystem where the registry settings will live, will be an NTFS filesystem. If it isn&#8217;t, there will be NO way to enforce ACLs on registry entries. I do love the idea, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-706933">
				<div id="div-comment-706933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-706933">
			February 7, 2009 at 7:50 am</a>		</div>

		<blockquote><p>
  no guarantee &#8230; will be an NTFS filesystem
</p></blockquote>
<p>But in the case that it is, it could be merged. And if it isn&#8217;t&#8230; well, we&#8217;re using a subfilesystem already, so we might as well make this subfilesystem (in the case that say ntsuser.dat is saved on a FAT volume) this NTFS/registry merger. It&#8217;d be pretty much like working with an image file. I think it could be done, but then, I&#8217;m an optimist.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707003">
				<div id="div-comment-707003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">eth0</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707003">
			February 8, 2009 at 12:53 pm</a>		</div>

		<blockquote><p>
  They both support the same ACL system, but there is no guarantee that the filesystem where the registry settings will live, will be an NTFS filesystem. If it isn&#8217;t, there will be NO way to enforce ACLs on registry entries.
</p></blockquote>
<p>Registry ACL permissions are not the same as NTFS ACL permissions.</p>
<p>They&#8217;re both ACLs but not interchangeable.</p>
<p>Remember, as far as the NTFS filesystem is concerned, the separate Hives are just like any other file.</p>
<p>And Registry ACLs are available on FAT32 systems as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707013">
				<div id="div-comment-707013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707013">
			February 8, 2009 at 3:05 pm</a>		</div>

		<p>The registry and NTFS permissions are not entirely identical, but the basic ACL architecture appears to be the same. They could certainly be merged. On FAT32 however you only have the DOS attributes, no ACLs. So to make it work there you either need subfilesystem trickery (which we&#8217;re already doing) or you would need to store the required additional meta-data in files in the filesystem, which you hide from the API.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707023">
				<div id="div-comment-707023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">steveg</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707023">
			February 8, 2009 at 5:40 pm</a>		</div>

		<p>My guess the Registry is not an RDMS is because it would&#8217;ve made Win3.x/95 run even slower (I think the Registry came first on 3.x). Theoretically a bespoke registry implementation would be faster than a more generic RDMS.</p>
<p>I do, however, like the sounds of making the Registry visible in the file system &#8212; ala /proc on linux (for those who don&#8217;t know most anything can show up in /proc as, apparently, a file even though they&#8217;re not really&#8230; &nbsp;eg /proc/cpu might be a text file that contains info about your cpu).</p>
<p>grep &quot;malware&quot; /proc/registry/HKCU | delreg</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707033">
				<div id="div-comment-707033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707033">
			February 8, 2009 at 7:38 pm</a>		</div>

		<p>@A Crazy Person:</p>
<p>That&#8217;s the first thing that occurred to me as well. &nbsp;I wonder how regedit displays such things?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707043">
				<div id="div-comment-707043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707043">
			February 8, 2009 at 7:55 pm</a>		</div>

		<p>@Miral: there&#8217;s only one way to find out&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707223">
				<div id="div-comment-707223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707223">
			February 9, 2009 at 2:55 pm</a>		</div>

		<p>@steveg</p>
<p>&lt;<a rel="nofollow" target="_new" href="http://www.codeplex.com/RegNamespace&gt;" rel="nofollow"></a><a href="http://www.codeplex.com/RegNamespace&#038;gt" rel="nofollow">http://www.codeplex.com/RegNamespace&#038;gt</a>;</p>
<p>&lt;<a rel="nofollow" target="_new" href="http://www.regxplor.com/&gt;" rel="nofollow"></a><a href="http://www.regxplor.com/&#038;gt" rel="nofollow">http://www.regxplor.com/&#038;gt</a>;</p>
<p>And don&#8217;t forget to see the REALLY old sample code on MSDN too!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707343">
				<div id="div-comment-707343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707343">
			February 9, 2009 at 11:58 pm</a>		</div>

		<p>It&#8217;s certainly cool that things like that are possible, after all, that&#8217;s why ZIP files don&#8217;t suck anymore, but given that shell namespace extensions are not visible in the actual filesystem, these things unfortunately certainly have their limitations, as is also apparent when you&#8217;re working with ZIP files.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707383">
				<div id="div-comment-707383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ceapseAcank</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707383">
			February 10, 2009 at 7:59 am</a>		</div>

		<p>dgdfgds fgf gdsf gssd f gfsd df dsfdgdfgds fgf gdsf gssd f gfsd df dgdfgds fgf gdsf gssd f gfsd df</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707513">
				<div id="div-comment-707513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707513">
			February 10, 2009 at 1:12 pm</a>		</div>

		<p>@Anonymous Coward</p>
<p>Nobody keeps you from implementing ZIP or registry access as extension to the Windows filesystem: junctions exist!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707623">
				<div id="div-comment-707623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707623">
			February 10, 2009 at 7:08 pm</a>		</div>

		<blockquote><p>
  junctions exist
</p></blockquote>
<p>Then why didn&#8217;t Microsoft implement ZIP folders that way? I suspect that junctions don&#8217;t do what you say they do. Certainly all information that turns up in a web search suggests that what you say is impossible. If you didn&#8217;t pull it out of your arse, please point me to some example code demonstrating the possibility.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-707743">
				<div id="div-comment-707743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707743">
			February 11, 2009 at 10:27 am</a>		</div>

		<p>Forgive me that my suggestion is above your mental capabilities! Junctions are an instantiation of the more general &quot;reparse points&quot;. If you dont understand their possibilities then choose another way to implement the desired functionality, for example file system filter drivers. THINK!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-707763">
				<div id="div-comment-707763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stefan Kanthak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-707763">
			February 11, 2009 at 10:28 am</a>		</div>

		<p>Forgive me that my suggestion goes beyond your mental capabilities! Junctions are an instantiation of the more general &quot;reparse points&quot;. If you dont understand their possibilities then choose another way to implement the desired functionality, for example file system filter drivers. THINK!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-708053">
				<div id="div-comment-708053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">eth0</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-708053">
			February 11, 2009 at 4:25 pm</a>		</div>

		<blockquote><p>
  On FAT32 however you only have the DOS attributes, no ACLs.
</p></blockquote>
<p>So: Registry and NTFS permissions are not AT ALL identical.</p>
<p>They&#8217;re both ACLs, that&#8217;s it.</p>
<p>Just like you are a mammal and a possum is.</p>
<p>But you&#8217;re no possum &#8211; at least I hope not for your sake ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-708073">
				<div id="div-comment-708073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous Coward</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090205-00/?p=19243#comment-708073">
			February 11, 2009 at 5:24 pm</a>		</div>

		<blockquote><p>
  THINK
</p></blockquote>
<p>In the meantime I&#8217;ve read up on junction points, and they can&#8217;t be used the way you say they can. In other words, I don&#8217;t see much evidence that you&#8217;re doing what you tell me to do: thinking. If you aren&#8217;t lying, provide links and example code.</p>
<blockquote><p>
  not AT ALL identical
</p></blockquote>
<p>They are sufficiently homologous and a common API could certainly be written. The old API&#8217;s would simply show the best fit of what&#8217;s actually there in terms of the new API.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

