<html>
<head>
<title>A 32-bit application can allocate more than 4GB of memory, and you don't need 64-bit Windows to do it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A 32-bit application can allocate more than 4GB of memory, and you don&#8217;t need 64-bit Windows to do it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 6, 2009 / year-entry #203</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>20</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Herb wondered how a 32-bit program running on 64-bit Windows can allocate more than 4GB of memory. Easy: The same way it allocates more than 4GB of memory on 32-bit Windows! Over a year before Herb asked the question, I had already answered it in the tediously boring two-week series on the myths surrounding...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Commenter Herb wondered <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#608186"> how a 32-bit program running on 64-bit Windows can allocate more than 4GB of memory</a>. Easy: The same way it allocates more than 4GB of memory on 32-bit Windows!</p>
<p> Over a year before Herb asked the question, I had already answered it in the tediously boring <a href="http://blogs.msdn.com/oldnewthing/archive/2004/08/22/218527.aspx"> two-week series on the myths surrounding the /3GB switch</a>. Here's a page that shows <a href="http://blogs.msdn.com/oldnewthing/archive/2004/08/10/211890.aspx"> how you can allocate more than 2GB of memory</a> by using shared memory (which Win32 confusingly calls file mappings). That code fragment allocated 4GB of memory at one go, and then accessed it in pieces (because a 32-bit program can't map an entire 4GB memory block at one go). To allocate more, either make the number bigger in the call to <code>CreateFileMapping</code> or just call <code>CreateFileMapping</code> multiple times. </p>
<p> The following week, I talked about how you can <a href="http://blogs.msdn.com/oldnewthing/archive/2004/08/19/217087.aspx"> use AWE to allocate physical pages</a>. Again, you can allocate as much memory as you like, but if you allocate enormous amounts of memory, you will probably not be able to map them all in at once. </p>
<p> The claims of the program are true, but 64-bit Windows wasn't necessary for the program to accomplish what it claims. It's like <a href="http://www.imdb.com/title/tt0033563/"> Dumbo</a> and the magic feather. "Dumbo can fly with the magic feather in his trunk." Well, yeah, but he didn't actually need the feather. </p>
<p> (On the other hand, 64-bit Windows certainly makes it more convenient to <u>use</u> more than 4GB of memory, since you can map the memory  into your address space all at once and use normal pointers to access it.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (20)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-752073">
				<div id="div-comment-752073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sunil Joshi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752073">
			July 6, 2009 at 10:04 am</a>		</div>

		<p>I think the point of the claim was that client versions of 32-bit Windows only support 4GB physical memory as a license restriction.</p>
<p>If you have a 64-bit system, you can have more physical memory so it&#8217;s more worthwhile going through the contortions to allocate greater than 4GB memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-752093">
				<div id="div-comment-752093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752093">
			July 6, 2009 at 10:47 am</a>		</div>

		<p>Yea, AWE: XMS/EMS all over again!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-752113">
				<div id="div-comment-752113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752113">
			July 6, 2009 at 12:13 pm</a>		</div>

		<p><!-- p>Small typo in the first sentence, Raymond: "Windows scan allocate" instead of "Windows can allocate."
Interesting post<!-- , aside from that -->. &nbsp;It&#39;s nice to know we <em>can</em> allocate that much memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-752143">
				<div id="div-comment-752143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Krunch</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752143">
			July 6, 2009 at 2:03 pm</a>		</div>

		<p>This trick is not specific to Windows (well, yes I know, this is a Microsoft blog) and there is a similar technique in Linux that can be used by Oracle (among other things): <a rel="nofollow" target="_new" href="http://www.puschitz.com/TuningLinuxForOracle.shtml#ConfiguringVeryLargeMemory" rel="nofollow">http://www.puschitz.com/TuningLinuxForOracle.shtml#ConfiguringVeryLargeMemory</a></p>
<p>Now, the interest of doing that seems a bit dubious to me. Better switch to 64 bits and make your application code simpler (and stop confusing sysadmins/users who don&#8217;t understand this method and its limitations).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-752163">
				<div id="div-comment-752163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752163">
			July 6, 2009 at 2:48 pm</a>		</div>

		<p>Karellen: have you read <a rel="nofollow" target="_new" href="http://blogs.msdn.com/ericlippert/9628808.aspx?" rel="nofollow"></a><a href="http://blogs.msdn.com/ericlippert/9628808.aspx" rel="nofollow">http://blogs.msdn.com/ericlippert/9628808.aspx</a>? &nbsp;Sometimes the &quot;allocation is storage&quot; analogy is useful, sometimes &quot;allocation is mapping&quot; is more appropriate. &nbsp;I&#8217;d say both are true at the same time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-752173">
				<div id="div-comment-752173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752173">
			July 6, 2009 at 2:48 pm</a>		</div>

		<p>Make that &quot;most of the time, both are true&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-752083">
				<div id="div-comment-752083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752083">
			July 6, 2009 at 10:35 am</a>		</div>

		<p>Hmmm&#8230;.I suppose that it depends on what you mean by &quot;allocate&quot;.</p>
<p>If I created a regular 8Gb file, a regular heap-allocated 500Mb buffer, and then wrote a function called MapChunk() which was responsible for writing the old contents of the buffer to where it was originally read from in the file, and then read a different portion of the file into the buffer, would that count as having &quot;allocated&quot; 8Gb of (very, very slow) memory?</p>
<p>It feels like you&#8217;re playing semantics and stretching the meaning of the word &quot;allocated&quot;. Now, I don&#8217;t think you *are* doing that and think you are actually correct, but that&#8217;s what it feels like.</p>
<p>Oh, the perils of language. Even highly technical terms can have widely used but incorrect colloquialisms that are used by techies.</p>
<p>To me, after a good few years of C programming, memory &quot;allocated&quot; to my process is memory mapped into my process&#8217; virtual address space &#8211; i.e. that which I am allowed to access immediately with a simple pointer dereference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-752273">
				<div id="div-comment-752273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752273">
			July 6, 2009 at 6:26 pm</a>		</div>

		<p>Karellen: The difference is if you use CreateFileMapping and you&#8217;ve got more than 4GB of physical memory, Windows can keep the whole lot in physical memory. So as you map difference sections of the file, you&#8217;re not actually copying stuff from disk to physical memory, just mapping a differen physical location into your virtual address space.</p>
<p>Using a manual buffer, you HAVE TO copy the file contents to and from disk each time you map a new &quot;view&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-752283">
				<div id="div-comment-752283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://myblog.rsynnott.com' rel='external nofollow' class='url'>Robert Synnott</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752283">
			July 6, 2009 at 7:16 pm</a>		</div>

		<p>Krunch: Yep, it&#8217;s a horrible hack from back when 32bit Xeons with physical address extension (generally 36bit) were all the rage. I doubt anyone really does it now.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-752293">
				<div id="div-comment-752293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752293">
			July 6, 2009 at 7:36 pm</a>		</div>

		<p>Dean: Yes, but that&#8217;s an implementation detail which varies according to the hardware you&#8217;re running on.</p>
<p>If you&#8217;ve got more than 4Gb of physical memory, Windows could still keep the whole file in a physical memory page cache, and you&#8217;d &quot;only&quot; actually be copying stuff between regions of memory during my horribly inefficient &quot;map a new view&quot; API.</p>
<p>But again, that&#8217;s an implementation detail.</p>
<p>The process of allocating memory and using that memory is an abstraction defined by an API. In C, that API is revolves around pointers. &quot;Allocated memory&quot; is accessed through pointers by dereferencing them, and pointers are obtained either from &quot;taking the address&quot; of things on &quot;the stack&quot;, or they&#8217;re managed by various families of functions which return pointers or take pointer arguments to allocate or deallocate regions of memory, such as {m,c,re}alloc()/free(), mmap()/munmap(), HeapAlloc()/HeapFree(), CreateFileMapping()/&#8230; etc&#8230;</p>
<p>The case could certainly be made that, in the C &quot;abstract machine&quot;, if you can&#8217;t access the storage <em>right now</em> through a plain pointer, then it&#8217;s not currently &quot;allocated&quot;.</p>
<p>Of course, the difference between the C abstract machine and concrete implementations is that in practice, there /is/ a difference between theory and practice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-752353">
				<div id="div-comment-752353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Worf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752353">
			July 7, 2009 at 1:40 am</a>		</div>

		<p>Basically, you do bank switching, which is how you get 64kiB of memory in a useful 8-bit computer, or access 32MiB of data when your processor can on map 16MiB of physical address space&#8230; Or in DOS, we called them overlays and mapped code in and out as we needed it.</p>
<p>Hrm, fun trick would be to try to execute code and bypaassing DEP&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-752393">
				<div id="div-comment-752393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752393">
			July 7, 2009 at 5:22 am</a>		</div>

		<p>&quot;Hrm, fun trick would be to try to execute code and bypaassing DEP&#8230;&quot;</p>
<blockquote><p>
  4GB of executable code? give it a few more years&#8230;
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-752413">
				<div id="div-comment-752413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cix.co.uk/~gort' rel='external nofollow' class='url'>Chris Oldwood</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752413">
			July 7, 2009 at 8:29 am</a>		</div>

		<p>Krunch: I have used this technique a few times because it is considerably cheaper to extend the life of a well trusted 32-bit application that &quot;needs a little more headroom&quot; than to port it to 64-bits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-752463">
				<div id="div-comment-752463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752463">
			July 7, 2009 at 10:29 am</a>		</div>

		<p>@Chris: Really? What are you typically needing to do to port your applications to 64-bit other than simply recompile them and then pass them through whatever QA process you normally have in place (if any)?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-752623">
				<div id="div-comment-752623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.cix.co.uk/~gort' rel='external nofollow' class='url'>Chris Oldwood</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-752623">
			July 7, 2009 at 1:18 pm</a>		</div>

		<p>Karellen: In theory that&#8217;s all there is to it. In practice you have umpteen 3rd party libs and in-proc COM objects that may or may not available in 64-bit variants. One hopes the code is 64-bit aware, but I can guarentee that wherever serialization is used, either by file or network etc, there will be issues. What about mixing 32-bit clients with 64-bit servers? What about the costs of bringing in new 64-bit servers instead of adding a little more RAM to a bedded in 32-bit server? Even the 64-bit servers themselves behave differently and can highlight new issues.</p>
<p>This all takes time and is risky, especially with old legacy systems like the ones I was dealing with. Try selling that option to &quot;The Business&quot; over some smaller, possibly more localised change.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754133">
				<div id="div-comment-754133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-754133">
			July 10, 2009 at 2:24 pm</a>		</div>

		<p>Last time I looked, windows didn&#8217;t support shared memory. At best, you can map a file and mess with that, but the guarantees required for it to really be shared just aren&#8217;t there.</p>
<div class=post>[<i>MapViewOfFile describes the conditions for coherency. If you create a mapping from the pagefile, you have shared memory. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754143">
				<div id="div-comment-754143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-754143">
			July 10, 2009 at 4:11 pm</a>		</div>

		<p>[MapViewOfFile describes the conditions for coherency. If you create a mapping from the pagefile, you have shared memory. -Raymond]</p>
<p>What if I have some memory and I map that? No file involved at all, and if I set a value in it, it&#8217;s available on the next tick of the clock to anyone who&#8217;s mapped it. As far as I can tell, your method is a VM hack and not shared memory</p>
<div class=post>[<i>You&#8217;re reading too much into &#8220;backed by the pagefile&#8221;, assuming that this makes the memory somehow different from &#8220;normal&#8221; memory. It turns out that <u>normal memory is backed by the pagefile</u>. If it&#8217;s a VM hack, then so is any other type of virtual memory. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754173">
				<div id="div-comment-754173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-754173">
			July 10, 2009 at 4:42 pm</a>		</div>

		<p>[You&#8217;re reading too much into &#8220;backed by the pagefile&#8221;, assuming that this makes the memory somehow different from &#8220;normal&#8221; memory.</p>
<p>Not at all. I&#8217;m going with what I found online stating that I can&#8217;t rely on writes being visible without a flush (on a pagefile of all things). If this were shared memory, then you would have each process sharing the memory writing to the same actual pages. </p>
<p>The fact is, mapped files are different from normal memory, and so is shared memory, but they also differ from each other, even when the mapped memory is mapping the pagefile.</p>
<p>Besides, if I&#8217;m mapping the pagefile, won&#8217;t that break if I turn off paging to disk?</p>
<div class=post>[<i>Like I already pointed out, the conditions for ensuring coherency are spelled out in the documentation for MapViewOfFile. Memory &#8220;from the page file&#8221; meets the criteria and are therefore coherent (because it&#8217;s the same as normal memory). <a href="http://blogs.msdn.com/oldnewthing/archive/2003/10/07/55194.aspx" rel="nofollow">Here&#8217;s an example</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-754193">
				<div id="div-comment-754193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-754193">
			July 10, 2009 at 4:59 pm</a>		</div>

		<p>I see your examples, but you&#8217;re missing the point:</p>
<p>1. shared memory must use the same pages across processes. Your example used a single process.</p>
<p>2. The VM hack you suggest to simulate shared mem fails if I map 1G and only have 500M in the pagefile (assume for argument that I have 8G sitting around on a system).</p>
<p>3. MapViewOffile is silent on coherence with regards to the pagefile. According to rumor on the internet, flushes are required for the coherence to actually work</p>
<p>4. shared memory is automatically coherent, by design. If you need to do extra work for shared mem, it isn&#8217;t shared mem &#8482;</p>
<p>I&#8217;m trying to educate you on how shared memory works and how ms differs in its usage, but you must realize that just because MS calls something shared mem doesn&#8217;t make it so.</p>
<div class=post>[<i>Shared memory uses the same pages across processes. Feel free to use the kernel debugger to confirm. The physical pages are shared. If you want to call that something other than &#8220;shared memory&#8221; (say you want to call it &#8220;Fred&#8221;), then MapViewOfFile(INVALID_HANDLE_VALUE) gives you &#8220;Fred&#8221;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-754413">
				<div id="div-comment-754413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.marthinusswart.com' rel='external nofollow' class='url'>Marthinus</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090706-00/?p=17623#comment-754413">
			July 13, 2009 at 5:52 am</a>		</div>

		<p>This reminds me of the 16bit days where you could only allocate 64kb at a time, so you started playing with segments and offsets and what else, but in all honesty it sucked! The first 32bit protected mode compile I could lay my hands on I think was Watcom C++ and it was brilliant, allocating 8mb of memory just for the hell of it what just so satisfying.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

