<html>
<head>
<title>Why do Microsoft code samples tend to use ZeroMemory instead of { 0 }?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why do Microsoft code samples tend to use ZeroMemory instead of { 0 }?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 28, 2005 / year-entry #165</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>24</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">If you go browsing around MSDN, you'll find that code samples tend to call ZeroMemory explicitly rather than using "= { 0 }" notation. Why is that? To make it clearer for people who are used to other programming languages. Like it or not, a significant percentage of people who write programs for Windows do...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>If you go browsing around MSDN, you'll find that <a href="http://msdn.microsoft.com/library/en-us/sysinfo/base/verifying_the_system_version.asp"> code samples tend to call <code>ZeroMemory</code> explicitly</a> rather than using <nobr>"<code>= { 0 }</code>"</nobr> notation. Why is that?</p>
<p> To make it clearer for people who are used to other programming languages. </p>
<p> Like it or not, a significant percentage of people who write programs for Windows do it in languages other than C and C++. Although those developers may have a basic understanding of C and C++, they don't have all the language subtleties memorized. </p>
<p> Compare the situation of speaking in English to a group of people where not everyone speaks the language fluently. If you're considerate of your audience, you're going to avoid the more esoteric grammatical constructions, the rare words, and the obscure idioms. Instead of saying, "Were it to rain, we will see that umbrellas be available," you would use the simpler "If it rains, then we will make sure that umbrellas are available," thereby avoiding the grammatical complexity of the implied conditional by inversion ("if"), the subjunctive of condition ("were"), the implied conclusion ("then"), and the subjunction of intention ("be"). </p>
<p> Heck, even people who claim to know C and C++ don't have all the language subtleties memorized. Some of them have false impressions of what <nobr>"<code> = { 0 }</code>"</nobr> does. And who among us really has C/C++'s bizarre operator precedence rules committed to memory? </p>
<p> Consequently, MSDN samples tend to use <code>ZeroMemory</code> to make it blindingly obvious what is being set to zero. One of the things we've learned over the years is that many people just copy/paste sample code without understanding it. If there are little things like <code>ZeroMemory</code> that can be done to make the intent of sample code clearer and reduce translation errors, then that's a good thing. </p>
<p> If you prefer <nobr>"<code> = { 0 }</code>"</nobr>, then go ahead and use it, secure in the knowledge that thousands of programmers aren't going to read your code and try to translate it into Visual Basic because that's the only language they know. But MSDN doesn't have that luxury. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (24)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-287243">
				<div id="div-comment-287243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287243">
			June 28, 2005 at 10:17 am</a>		</div>

		<p>I prefer to use = { }; but unfortunately that only works in C++ and not C. ZeroMemory isn&#8217;t the same thing as using { 0 } though. The later may or may not set padding bits to zero and of course the standards make no guarantee about an object representation of all bits zero being mapped to a value of zero (except until recently when a defect report made that constraint true for integers). In practice, all platforms that programmers actually enjoy programming for, they mean the same thing.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-287253">
				<div id="div-comment-287253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://bozo99@gmail.com' rel='external nofollow' class='url'>E. Massey</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287253">
			June 28, 2005 at 10:40 am</a>		</div>

		<p>I&#8217;ve found that using ZeroMemory (or ZERO_INIT, a similar macro) is frequently a better choice for me since it can accomodate changes to the data structure definition (e.g. adding a new field on the end).</p>
<p>For C++, though, if the structure has a constructor, either explicit or implicit, then you&#8217;ve got to be careful not to blow over any non-NULL initialized pointers (e.g. sentinels) if you zero-init after constructing the object.  In this case, assigning it to a global const object will do the trick (without the padding, however).</p>
<p>For debugging, zero-init clears any structure padding to help prevent mistaking uninitialized data for real values when debugging with hex dumps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287303">
				<div id="div-comment-287303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287303">
			June 28, 2005 at 12:14 pm</a>		</div>

		<p>It&#8217;s not really true that ZeroMemory could generate different code.  The context in which it is used in these samples is to zero the memory of structures on the stack, not static variables.  It&#8217;s just a define to memset.<br />
<br />The post above is not advocating using ZeroMemory instead of constructors for C++ objects, just that it&#8217;s used to zero C structures and arrays to null bytes. And yes, float 0.0 is an IEEE standard.<br />
<br />It&#8217;s called ZeroMemory : It does exactly what it says : sets memory bytes to value zero, and no more. In Windows if a structure has a pointer that needs to be NULL if not used, it needs to be of the bit pattern zero, it is not a compiler decision, it&#8217;s not language-specific, but something that you pass to the OS.  ZeroMemory is the clearest way to zero these structures.</p>
<p></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cornedbee odd alt thread-odd thread-alt depth-1" id="comment-287323">
				<div id="div-comment-287323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287323">
			June 28, 2005 at 12:36 pm</a>		</div>

		<p>Why does anyone care about hypothetical cases containing padding bits and non-IEEE floating point numbers? We&#8217;re talking about Windows here. It runs on x86, IA64, x86-64, an unsupported old version on Alpha, and various embedded devices. All of them use 2&#8217;s complement signed representations, no padding bits and IEEE floats, if they support floats at all. (Not sure if that&#8217;s a hardware requirement for WinCE.) Bitfields never appear in any place of the WinAPI. (They wouldn&#8217;t be properly portable to other languages.)</p>
<p>For all intents and purposes, {0} and ZeroMemory are 100% identical in Windows programming.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287333">
				<div id="div-comment-287333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287333">
			June 28, 2005 at 12:45 pm</a>		</div>

		<p>CornedBee: Bitfields never appear in any place of the WinAPI.</p>
<p>Take a look at the definition of the DCB strucutre.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-287363">
				<div id="div-comment-287363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Hypertarded CPU</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287363">
			June 28, 2005 at 3:38 pm</a>		</div>

		<p>Some day people will learn not to state absolutes in this blog :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287383">
				<div id="div-comment-287383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karan Mehra</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287383">
			June 28, 2005 at 4:58 pm</a>		</div>

		<p>Let&#8217;s not forget unions</p>
<p>If the structure being initialized is a union or includes a union, then only the first field of the union will be zeroed. If this field isn&#8217;t the largest one in the union, then you end up with uninitialized data!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-ryanmy odd alt thread-odd thread-alt depth-1" id="comment-287403">
				<div id="div-comment-287403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ryanmy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287403">
			June 28, 2005 at 5:41 pm</a>		</div>

		<p>&quot;All of them use 2&#8217;s complement signed representations&quot;</p>
<p>That&#8217;s not just Windows.  The C++ language spec (ISO/IEC/INCITS 14882:1998) requires that any target machine must use 2s complement for signed ints and straight unsigned numbers for unsigned ints.  Period.  So it&#8217;s safe from that perspective as well :)  C, I&#8217;m not so sure on, but I think (correct me if I&#8217;m wrong) that it offers the same guarantee.</p>
<p>As for NULL, I can only think of one C platform that ever used a pattern other than all zeros for NULL &#8212; and that was Honeywell-Bull.  In C++, at least, you are guaranteed that casting the integer 0 to any pointer type results in an appropriate null pointer value for that platform.  (Granted, this is NOT what ZeroMemory is guaranteed to do.  But it results in the same thing on every platform that Windows currently runs on.)</p>
<p>The only time it&#8217;s not safe are in floats, because C/C++ put no standards on it.  I think, though, that every platform Windows currently runs on uses IEEE754.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287273">
				<div id="div-comment-287273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287273">
			June 28, 2005 at 11:25 am</a>		</div>

		<p>I like the explanation of being explicit and avoiding the less well-known &quot;features&quot; of a language.  It&#8217;s something I strive for in the code I write.</p>
<p>On the other hand, ZeroMemory doesn&#8217;t do exactly what ={0} does.  Although it&#8217;s unlikely, the difference could lead to portability problems.</p>
<p>Consider a struct with pointers and floats.  The ={0} initialization will set the pointers to null and the floats to 0.0.  But ZeroMemory will just set all the *bits* of those fields to 0.  If null pointers are represented by all-zeroes (which is true for most but not all platforms), then you&#8217;re fine.  I&#8217;m less familiar with the representations for floating point numbers.  Is 0.0 always represented with all-zeroes?</p>
<p>One other difference is bit-fields.  Sayeth K&amp;R:  &quot;Unnamed bit-field members are ignored, and are not initialized.&quot;  Zero memory is going to clear all of the bitfields in your struct, but the ={0} technique does not.</p>
<p>And lastly (because it really shouldn&#8217;t be an important consideration until your performance profile says it is), these two techniques may optimize differently.  ZeroMemory is a function call (possibly inlined?) that will set the memory block to 0.  An initialized structure, however, may just copy bits from the executable into the desired memory slot.</p>
<p>On VAX/VMS, there was a special optimization for statics that were to be initialized to all-zeroes.  Rather than storing an appropriately-sized block of zeros in the executable, the variables were mapped to &quot;demand zero-page&quot;, which relied on a feature of the memory manager to provide pages of all-zeroes when those addresses are first paged into RAM.  This same feature was responsible for calloc being significantly faster than malloc + memset to zero.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-dean-harding odd alt thread-odd thread-alt depth-1" id="comment-287423">
				<div id="div-comment-287423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dean+Harding' rel='external nofollow' class='url'>Dean Harding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287423">
			June 28, 2005 at 7:16 pm</a>		</div>

		<p>I think the point is that while &#8216;= {0}&#8217; is not always the same as ZeroMemory that when they differ, it&#8217;s the ZeroMemory behaviour that you (as in, the person using the Windows API) wants.  Otherwise it wouldn&#8217;t be called ZeroMemory.</p>
<p>Just another reason to always be explicit and only make micro-optimizations like &#8216;= {0}&#8217; when it&#8217;s actually required.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287313">
				<div id="div-comment-287313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/jdanielsmith/' rel='external nofollow' class='url'>J. Daniel Smith</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287313">
			June 28, 2005 at 12:26 pm</a>		</div>

		<p>Ulric: as Adrian points out, a NULL pointer is not necessarily a &quot;the bit pattern zero&quot;.<br />
<br />   void* p = NULL;<br />
<br />is not the same as<br />
<br />   void* p;<br />
<br />   ZeroMemory(&amp;p, &#8230;);<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-287473">
				<div id="div-comment-287473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287473">
			June 28, 2005 at 9:40 pm</a>		</div>

		<p>ryanmy: C++[3.9.1/7] &quot;[Example: this International Standard permits 2&#8217;s complement, 1&#8217;s complement and signed magnitude representations for integral types.]&quot;. Ditto for C.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287483">
				<div id="div-comment-287483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Norman Diamond</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287483">
			June 28, 2005 at 9:48 pm</a>		</div>

		<p>Tuesday, June 28, 2005 5:41 PM by ryanmy </p>
<p>&gt; The C++ language spec (ISO/IEC/INCITS<br />
<br />&gt; 14882:1998) requires that any target machine<br />
<br />&gt; must use 2s complement for signed ints and<br />
<br />&gt; straight unsigned numbers for unsigned ints.<br />
<br />&gt; [&#8230;] C, I&#8217;m not so sure on, but I think<br />
<br />&gt; (correct me if I&#8217;m wrong) that it offers the<br />
<br />&gt; same guarantee.</p>
<p>C sure doesn&#8217;t.  Last I saw, the C standard still has a defect where, in a one&#8217;s complement environment and a program that uses both signed chars and unsigned chars and reads one byte from a file, the standard essentially guarantees that the implementation is going to read the programmer&#8217;s mind in order to know how to convert the value.  That didn&#8217;t persuade the committee to remove the possibility of an implementation being one&#8217;s-complement.</p>
<p>By the way in K&amp;R C there was no such problem.  One&#8217;s-complement implementations could conform very easily in those days.</p>
<p>&gt; As for NULL, I can only think of one C<br />
<br />&gt; platform that ever used a pattern other than<br />
<br />&gt; all zeros for NULL</p>
<p>Yeah, that&#8217;s really too bad.  It would have been possible for implementations on Intel systems to use all one-bits (0xFFFF:0xFFFF or 0xFFFF:0xFFFFFFFF etc.) and get hardware assistance in catching some buggy programs that dereferenced null pointers.  But no, no one wants to get their bugs caught and fixed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-287493">
				<div id="div-comment-287493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lj.dpdx.net' rel='external nofollow' class='url'>Brooks Moses</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287493">
			June 28, 2005 at 9:53 pm</a>		</div>

		<p>I think I&#8217;m going to have to make a grammar-pedant comment here (given that I&#8217;m not enough of a C++ programmer to know what you&#8217;re talking about in the rest of the entry!).  The first of your example sentences doesn&#8217;t use the subjunctive tense properly; it should instead be: &quot;Were it to rain, we would see that umbrellas would be available.&quot;</p>
<p>The use of the subjunctive in this case also creates an impression that the speaker is certain that it&#8217;s not going to rain.  Thus, if your example were to be used to reassure people who expected it to rain, you would also want to use the &quot;if it rains, then we will&#8230;&quot; construction for that reason.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287503">
				<div id="div-comment-287503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Cooke</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287503">
			June 29, 2005 at 1:50 am</a>		</div>

		<p>Norman Diamond wrote:<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-<br />
<br />Yeah, that&#8217;s really too bad. It would have been possible for implementations on Intel systems to use all one-bits (0xFFFF:0xFFFF or 0xFFFF:0xFFFFFFFF etc.) and get hardware assistance in catching some buggy programs that dereferenced null pointers. But no, no one wants to get their bugs caught and fixed.<br />
<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</p>
<p>Erm&#8230; it already does have hardware assistance. There&#8217;s a guard page there. It&#8217;s also why you get EXCEPTION_INVALID_ACCESS_VIOLATION when you dereference a NULL pointer.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-themuujgmail-com odd alt thread-odd thread-alt depth-1" id="comment-287513">
				<div id="div-comment-287513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matthew+W.+Jackson' rel='external nofollow' class='url'>Matthew W. Jackson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287513">
			June 29, 2005 at 2:46 am</a>		</div>

		<p>&quot;If you prefer &quot; = { 0 }&quot;, then go ahead and use it, secure in the knowledge that thousands of programmers aren&#8217;t going to read your code and try to translate it into Visual Basic because that&#8217;s the only language they know. But MSDN doesn&#8217;t have that luxury.&quot;</p>
<p>I thought this was moot, since VB will initialize structs to zero for you.  If the VB programmer decides to manually assign zero to every value, it won&#8217;t keep the program from working, it will just be redundant code.  Those same programmers might copy the call to ZeroMemory even when it wasn&#8217;t needed.</p>
<p>Anyway, this is splitting hairs.  I agree about mindless copying of code.  Look at all the VB Declare statements being ported to .NET with ABSOLUTELY no regard for 64-bit machines.  VB6 didn&#8217;t have a 64-bit version, but .NET does, so the decision to use Int32 or IntPtr is very important, and over half of the code on the Internet seems to get it wrong.</p>
<p>I worry about moving to 64-bit with too many careless programmers around.  I assume the problem is similar in the unmanaged world, but at least you have to recompile the application to even attempt to run it in 64-bit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287583">
				<div id="div-comment-287583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://spaces.msn.com/members/jdanielsmith/' rel='external nofollow' class='url'>J. Daniel Smith</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287583">
			June 29, 2005 at 10:55 am</a>		</div>

		<p>Bristol Technology and Mainsoft have software (Wind/U and MainWin) to build Windows applications on other OSes.</p>
<p>There is a difference between the Win32 API and the Windows OS.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-287683">
				<div id="div-comment-287683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287683">
			June 29, 2005 at 3:08 pm</a>		</div>

		<p>Right.. as one person replied above, discussion of the bit pattern of NULL is not important.  The goal of ZeroMemory is to zero a struct you pass it to the Win32 API, not produce a NULL pointer bit pattern for your compiler. :^)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-287723">
				<div id="div-comment-287723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287723">
			June 29, 2005 at 6:20 pm</a>		</div>

		<p>Btw, Bristol( hasn&#8217;t that gone out of business?) and MainSoft do not allow to make Win32 software on just any configuration and theorical compiler.  The compiler must meet some specific requirements, like having a v-table layout that is compatible with COM.  MainSoft has a modified version of GCC and each version requires one compiler.  On thing that can happen is that you can use MainWin on a machine that is big-endian instead of little endian, but that&#8217;s as far as you&#8217;ll be away from the bitwize representation from your WinTel machine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-287853">
				<div id="div-comment-287853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ts</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-287853">
			June 30, 2005 at 7:32 am</a>		</div>

		<p>Allan Bauer, at <a rel="nofollow" target="_new" href="http://blogs.borland.com/abauer/archive/2005/06/29/20035.aspx" rel="nofollow">http://blogs.borland.com/abauer/archive/2005/06/29/20035.aspx</a>, says that &quot;asdf&quot; here is a &quot;glory seeker&quot; for pointing out some factual details about { 0 } vs. ZeroMemory.  &quot;glory seeker&quot;?  For simply pointing out some facts?  I&#8217;d say that Allan Bauer is an anti-intellectual jackass *and* a glory seeker.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-288033">
				<div id="div-comment-288033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Anderson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-288033">
			June 30, 2005 at 4:28 pm</a>		</div>

		<p>CornedBee said:<br />
<br />&quot;Why does anyone care about hypothetical cases containing padding bits and non-IEEE floating point numbers? We&#8217;re talking about Windows here. It runs on x86, IA64, x86-64, an unsupported old version on Alpha, and various embedded devices.&quot;</p>
<p>Bits of windows systems get ported to the strangest places; I was involved in a port of the Windows Media system to a custom VLIW processor with it&#8217;s own compiler, and every Windows centric assumption cost us bigtime. We knew we were going to rewrite the inner loops for our architecture, but we didn&#8217;t realize how much pain the support infrastructure would be. There was ASF, and DRM, and and &#8230;</p>
<p>New platforms keep on showing up; the XBox2  PowerPC derivative isn&#8217;t on your list. Yes, it is a 2&#8217;s complement, IEEE machine, but it might not have been. Why take the gamble when doing the right thing is often a moment&#8217;s work?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-288223">
				<div id="div-comment-288223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-288223">
			July 1, 2005 at 9:55 am</a>		</div>

		<p>&quot;secure in the knowledge that thousands of programmers aren&#8217;t going to read your code and try to translate it into Visual Basic because that&#8217;s the only language they know&quot;</p>
<p>Huh? Haven&#8217;t all those people automagically converted their millions of lines of VB[A] code, into .NET?</p>
<p>TC  :-(</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-288543">
				<div id="div-comment-288543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-288543">
			July 3, 2005 at 7:21 am</a>		</div>

		<p>For all those people wondering whether there&#8217;s actually a case when ZeroMemory differs from C++&#8217;s idea of zero initialization, I think Raymond did a few peices on pointers to members. He could have mentioned it then. Bitfields have already been mentioned, and I think only the first member of a union is zeroed (of course, it will overlap with others). There&#8217;s basically no guarantee of gaps between objects having a value.</p>
<p>I wonder who thought ZeroMemory was so much more readable than memset, though.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-288563">
				<div id="div-comment-288563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050628-07/?p=35183#comment-288563">
			July 3, 2005 at 11:07 am</a>		</div>

		<p>To somebody who doesn&#8217;t know C well, it&#8217;s not obvious whether</p>
<p>memset(&amp;s, 5, 10);</p>
<p>sets five bytes to 10 or ten bytes to 5. Heck even I don&#8217;t know.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

