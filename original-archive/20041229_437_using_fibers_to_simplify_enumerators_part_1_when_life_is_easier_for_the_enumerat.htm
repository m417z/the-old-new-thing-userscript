<html>
<head>
<title>Using fibers to simplify enumerators, part 1: When life is easier for the enumerator</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using fibers to simplify enumerators, part 1: When life is easier for the enumerator</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 29, 2004 / year-entry #438</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>28</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The COM model for enumeration (enumeration objects) is biased towards making life easy for the consumer and hard for the producer. The enumeration object (producer) needs to be structured as a state machine, which can be quite onerous for complicated enumerators, for example, tree walking or composite enumeration. On the other hand, the callback model...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The COM model for enumeration (enumeration objects)
is biased towards making
life easy for the consumer and hard for the producer.
The enumeration object (producer)
needs to be structured as a state machine,
which can be quite onerous for complicated enumerators,
for example, tree walking or composite enumeration.
</p>
<p>
On the other hand, the callback model for producer
(used by most Win32 functions) is
biased towards making life easy for the enumerator and hard
for the consumer.
This time, it is the consumer that needs to be structured as
a state machine, which is more work if the consumer is doing
something complicated with each callback.
(And even if not, you have to create a context structure
to pass state from the caller, through the enumerator,
to the callback.)
</p>
<p>
For example, suppose we want to write a routine that
walks a directory structure, allowing the caller to
specify what to do at each decision point.
Let's design this first using the callback paradigm:
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;shlwapi.h&gt;
#include &lt;stdio.h&gt;

enum FERESULT {
 FER_CONTINUE,      // continue enumerating
                    // (if directory: recurse into it)
 FER_SKIP,          // skip this file/directory
 FER_STOP,          // stop enumerating
};

enum FEOPERATION {
 FEO_FILE,          // found a file
 FEO_DIR,           // found a directory
 FEO_LEAVEDIR,      // leaving a directory
};

typedef FERESULT (CALLBACK *FILEENUMCALLBACK)
    (FEOPERATION feo,
     LPCTSTR pszDir, LPCTSTR pszPath,
     const WIN32_FIND_DATA* pwfd,
     void *pvContext);

FERESULT EnumDirectoryTree(LPCTSTR pszDir,
    FILEENUMCALLBACK pfnCB, void* pvContext);
</pre>
<p>
The design here is that the caller calls
<code>EnumDirectoryTree</code> and provides a callback function
that is informed of each file found and can decide
how the enumeration should proceed.
</p>
<p>
Designing this as a callback makes life much simpler
for the implementation of <code>EnumDirectoryTree</code>.
</p>
<pre>
FERESULT EnumDirectoryTree(
    LPCTSTR pszDir,
    FILEENUMCALLBACK pfnCB, void *pvContext)
{
 FERESULT fer = FER_CONTINUE;
 TCHAR szPath[MAX_PATH];
 if (PathCombine(szPath, pszDir, TEXT("*.*"))) {
  WIN32_FIND_DATA wfd;
  HANDLE hfind = FindFirstFile(szPath, &amp;wfd);
  if (hfind != INVALID_HANDLE_VALUE) {
   do {
    if (lstrcmp(wfd.cFileName, TEXT(".")) != 0 &amp;&amp;
        lstrcmp(wfd.cFileName, TEXT("..")) != 0 &amp;&amp;
        PathCombine(szPath, pszDir, wfd.cFileName)) {
     FEOPERATION feo = (wfd.dwFileAttributes &amp;
                     FILE_ATTRIBUTE_DIRECTORY) ?
                     FEO_DIR : FEO_FILE;
     fer = pfnCB(feo, pszDir, szPath, &amp;wfd, pvContext);
     if (fer == FER_CONTINUE) {
      if (feo == FEO_DIR) {
       fer = EnumDirectoryTree(szPath, pfnCB, pvContext);
       if (fer == FER_CONTINUE) {
        fer = pfnCB(FEO_LEAVEDIR, pszDir, szPath,
                    &amp;wfd, pvContext);
       }
      }
     } else if (fer == FER_SKIP) {
      fer = FER_CONTINUE;
     }
    }
   } while (FindNextFile(hfind, &amp;wfd));
   FindClose(hfind);
  }
 }
 return fer;
}
</pre>
<p>
Note: I made no attempt to make this function at all efficient
since that's not my point here.
It's highly wasteful of stack space (which can cause problems
when walking deep directory trees).
This function also doesn't like paths deeper than <code>MAX_PATH</code>;
fixing this is beyond the scope of this series.
Nor do I worry about
<a HREF="/oldnewthing/archive/2004/12/27/332704.aspx">
reparse points</a>, which can induce infinite loops if you're not
careful.
</p>
<p>
Well, that wasn't so hard to write. But that's because we made
life hard for the consumer.  The consumer needs to maintain state
across each callback. For example, suppose you wanted to build
a list of directories and their sizes (both including and
excluding subdirectories).
</p>
<pre>
class EnumState {
public:
 EnumState()
   : m_pdirCur(new Directory(NULL)) { }
 ~EnumState() { Dispose(); }
 FERESULT Callback(FEOPERATION feo,
    LPCTSTR pszDir, LPCTSTR pszPath,
    const WIN32_FIND_DATA* pwfd);
 void FinishDir(LPCTSTR pszDir);

private:

 struct Directory {
  Directory(Directory* pdirParent)
   : m_pdirParent(pdirParent)
   , m_ullSizeSelf(0)
   , m_ullSizeAll(0) { }
  Directory* m_pdirParent;
  ULONGLONG m_ullSizeSelf;
  ULONGLONG m_ullSizeAll;
 };
 Directory* Push();
 void Pop();
 void Dispose();

 Directory* m_pdirCur;
};

EnumState::Directory* EnumState::Push()
{
 Directory* pdir = new Directory(m_pdirCur);
 if (pdir) {
  m_pdirCur = pdir;
 }
 return pdir;
}

void EnumState::Pop()
{
 Directory* pdir = m_pdirCur-&gt;m_pdirParent;
 delete m_pdirCur;
 m_pdirCur = pdir;
}

void EnumState::Dispose()
{
 while (m_pdirCur) {
  Pop();
 }
}

void EnumState::FinishDir(LPCTSTR pszDir)
{
  m_pdirCur-&gt;m_ullSizeAll +=
    m_pdirCur-&gt;m_ullSizeSelf;
  printf("Size of %s is %I64d (%I64d)\n",
   pszDir, m_pdirCur-&gt;m_ullSizeSelf,
   m_pdirCur-&gt;m_ullSizeAll);
}

ULONGLONG FileSize(const WIN32_FIND_DATA *pwfd)
{
  return 
    ((ULONGLONG)pwfd-&gt;nFileSizeHigh &lt;&lt; 32) +
    pwfd-&gt;nFileSizeLow;
}

FERESULT EnumState::Callback(FEOPERATION feo,
    LPCTSTR pszDir, LPCTSTR pszPath,
    const WIN32_FIND_DATA* pwfd)
{
 if (!m_pdirCur) return FER_STOP;

 switch (feo) {
 case FEO_FILE:
  m_pdirCur-&gt;m_ullSizeSelf += FileSize(pwfd);
  return FER_CONTINUE;

 case FEO_DIR:
  if (Push()) {
   return FER_CONTINUE;
  } else {
   return FER_SKIP;
  }

 case FEO_LEAVEDIR:
  FinishDir(pszPath);

 /* Propagate size into parent */
  m_pdirCur-&gt;m_pdirParent-&gt;m_ullSizeAll +=
    m_pdirCur-&gt;m_ullSizeAll;
  Pop();
  return FER_CONTINUE;

 default:
  return FER_CONTINUE;
 }
 /* notreached */
}

FERESULT CALLBACK EnumState_Callback(
    FEOPERATION feo,
    LPCTSTR pszDir, LPCTSTR pszPath,
    const WIN32_FIND_DATA* pwfd,
    void* pvContext)
{
 EnumState* pstate =
    reinterpret_cast&lt;EnumState*&gt;(pvContext);
 return pstate-&gt;Callback(feo, pszDir,
            pszPath, pwfd);
}

int __cdecl main(int argc, char **argv)
{
 EnumState state;
 if (EnumDirectoryTree(TEXT("."),
        EnumState_Callback,
        &amp;state) == FER_CONTINUE) {
  state.FinishDir(TEXT("."));
 }
 return 0;
}
</pre>
<p>
Boy that sure was an awful lot of typing, and what's
worse, the whole structure of the program has
been obscured by the explicit state management.
It sure is hard to tell at a glance what this
chunk of code is trying to do.
Instead, you have to stare at the <code>EnumState</code> class
and reverse-engineer what's going on.
</p>
<p>
(Yes, I could have simplified this code a little by
using a built-in stack class, but as I have already noted
in the context of smart pointers,
I try to present these articles in
"pure" C++ so people won't get into arguments about which
class library is best.)
</p>
<p>
Tomorrow, we'll look at how the world would be
if the function <code>EnumDirectoryTree</code> were spec'd out
by the caller rather than the enumerator!</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (28)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-238353">
				<div id="div-comment-238353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://drazen.dotlic.name/weblog' rel='external nofollow' class='url'>Drazen Dotlic</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238353">
			December 29, 2004 at 8:05 am</a>		</div>

		<blockquote><p>
  &gt; (Yes, I could have simplified this code a little by using a built-in stack class, but as I have already noted in the context of smart pointers, I try to present these articles in &quot;pure&quot; C++ so people won&#8217;t get into arguments about which class library is best.)</p>
<p>stack is a part of C++ Standard Library, it&#8217;s not any particular vendor&#8217;s one, thus it is &quot;safe&quot; to use in this context.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238373">
				<div id="div-comment-238373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238373">
			December 29, 2004 at 9:52 am</a>		</div>

		<p>It may be the part of the standard library, but it&#8217;s still a library. Some people may like std::string, others might prefer CString, still others may prefer their own string library. (If everybody agreed on std::string then why are there so many string libraries?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238393">
				<div id="div-comment-238393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John McCormick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238393">
			December 29, 2004 at 10:36 am</a>		</div>

		<p>Perhaps if more people treated the standard library as a standard, more people would accept it as such. In any case, I don&#8217;t think too many people would lampoon you for using it.</p>
<p>I always find this sort of mix of c-like code and c++ code a bit jarring, but then I&#8217;m not really a windows programmer. Looking forward to tomorrow&#8217;s installment!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238403">
				<div id="div-comment-238403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238403">
			December 29, 2004 at 10:38 am</a>		</div>

		<p>True, but if I chose a specific library (even the standard one), I would lose people who weren&#8217;t familiar with (or actively disliked) that library. But everybody who programs Windows knows what TCHAR is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238463">
				<div id="div-comment-238463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://drazen.dotlic.name/weblog' rel='external nofollow' class='url'>Drazen Dotlic</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238463">
			December 29, 2004 at 2:47 pm</a>		</div>

		<blockquote><p>
  &gt;If everybody agreed on std::string then why are there so many string libraries?</p>
<p>So many? Besides MFC, I am not familiar with any other in widespread use.<br />
  <br />The only reason for these &quot;other&quot; libraries, including (parts of) MFC has been poor implementation (or buggy) of both C++ compiler and/or Standard Library. Things are a lot better now with VS.NET 2003 and will be even better with 2005. It&#8217;s time to start treating Standard Library as a part of C++ language, not something we might not use because we don&#8217;t like it or are not familiar with.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238473">
				<div id="div-comment-238473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eric TF Bat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238473">
			December 29, 2004 at 2:57 pm</a>		</div>

		<p>Maybe it&#8217;s because I&#8217;ve been reading a lot of LISP code lately, but I looked at this article and my first thought was &quot;Why is Raymond posting randomly-indented assembler code on his blog?&quot;</p>
<p>C++: Just Say AAAARRGHH OH GOD STOP AAAAARRRGGGHHH HELP PLEASE PLEASE PLEASE UUURKKK!<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238483">
				<div id="div-comment-238483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Noob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238483">
			December 29, 2004 at 3:04 pm</a>		</div>

		<p>What does fibers have to do with this?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238493">
				<div id="div-comment-238493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman' rel='external nofollow' class='url'>Larry Osterman</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238493">
			December 29, 2004 at 3:06 pm</a>		</div>

		<p>Drazen,<br />
<br />  There are lots of reasons not to use std::string, and CString/CAtlString often provide an alternative to it.</p>
<p>  Just because STL&#8217;s a part of the C++ standard library doesn&#8217;t mean that it is a worthy solution for everyone &#8211; the code size bloat you get from using STL is enough to preclude its use in many scenarios (like most of the Windows core).  Also the fact that STL&#8217;s localization support is mediochre (it has to be because it&#8217;s platform neutral, and localization basically requires a platform specific infrastructure (how you specify your localizable resources depends on the platform)) precludes its use in many places.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238503">
				<div id="div-comment-238503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238503">
			December 29, 2004 at 3:08 pm</a>		</div>

		<p>Noob, this is a multi-part lecture.  I&#8217;m sure Rand will get to that.  Part 1 is setting a stage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238513">
				<div id="div-comment-238513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">MYG</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238513">
			December 29, 2004 at 4:09 pm</a>		</div>

		<p>Noob,</p>
<p>Because state is easily held on the CPU stack. A fiber is a bit like a thread in that it has its own stack but the context switching is driven by the application rather than the scheduler. </p>
<p>So the idea here is to have a tasking module without the tasking overhead (or part of it, stack space is overhead): two &quot;fibers&quot;, one a consumer, one a producer. </p>
<p>Think of fibers as setjmp()/longjmp() with separate stacks. </p>
<p>IIRC, there is a &quot;fiber like&quot; construct in later versions of VMS. I wonder if they are a Cutler decree or just a common good idea.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238523">
				<div id="div-comment-238523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/michkap/' rel='external nofollow' class='url'>Michael Kaplan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238523">
			December 29, 2004 at 4:15 pm</a>		</div>

		<p>Speaking as the owner of a technology (namely, linguistic collation) and a colleague to the owner of a technology (namely encoding / codepages) and a former owner of a technology (namely, locale based formatting) which is superior in almost every way to the correponding CRT analogue, I can tell you that there are indeed times that the CRT is not always the best solution. And there do exist many times that it is not the answer&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238533">
				<div id="div-comment-238533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://kentb.blogspot.com' rel='external nofollow' class='url'>Kent Boogaart</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238533">
			December 29, 2004 at 4:33 pm</a>		</div>

		<p>This is OT and for that I apologise . . .</p>
<p>Does anyone know where I can find information about the next standard version of C++? I remember hearing about this somewhere but have no idea what it is codenamed etcetera.</p>
<p>Nice article Raymond (as per usual).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238573">
				<div id="div-comment-238573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238573">
			December 29, 2004 at 10:00 pm</a>		</div>

		<p>std::auto_ptr is a perfect example of something that just because it is the standard doesn&#8217;t mean it is good.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238593">
				<div id="div-comment-238593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://andyandy.sprayblogg.no' rel='external nofollow' class='url'>Andreas H&#228;ber</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238593">
			December 30, 2004 at 1:38 am</a>		</div>

		<p>Kent:<br />
<br />You can find some links about the next C++ standard here: <a target="_new" href="http://www.gotw.ca/iso/" rel="nofollow">http://www.gotw.ca/iso/</a></p>
<p>And also check out Herb Sutter&#8217;s blog at <a target="_new" href="http://www.pluralsight.com/blogs/hsutter/default.aspx" rel="nofollow">http://www.pluralsight.com/blogs/hsutter/default.aspx</a></p>
<p>Happy new year everyone :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238653">
				<div id="div-comment-238653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://drazen.dotlic.name/weblog' rel='external nofollow' class='url'>Drazen Dotlic</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238653">
			December 30, 2004 at 9:38 am</a>		</div>

		<blockquote><p>
  &gt;Drazen,<br />
  <br />&gt;&gt;There are lots of reasons not to use std::string, and CString/CAtlString often provide an alternative to it.</p>
<p>Larry,</p>
<p>you are right. But let&#8217;s put things into context here &#8211; this is supposed to be an example of a certain technique. State management is only a necessary &quot;evil&quot; here, it is not a meat of the post. I am simply arguing that standard stack could have been used to simplify the code sample without jeopardizing the message of the post &#8211; even better, shorter code might have improved the readibility and help push the message through.
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238663">
				<div id="div-comment-238663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238663">
			December 30, 2004 at 9:49 am</a>		</div>

		<p>Perhaps true, but when I see std:: stuff I tend to get more confused rather than less.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238613">
				<div id="div-comment-238613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/archive/2004/12/30/344281.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238613">
			December 30, 2004 at 9:58 am</a>		</div>

		<p>This time, we&#8217;ll watch the enumerator lose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238673">
				<div id="div-comment-238673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mgrier' rel='external nofollow' class='url'>Michael Grier [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238673">
			December 30, 2004 at 10:18 am</a>		</div>

		<p>The std:: stuff assumes you are comfortable with exceptions.  I personally believe that there are unsolvable quality problems associated with use of exceptions.  Thus, even though the library seems very useful, I stay as far away from the STL libraries as possible.</p>
<p>C and C++ (pre-STL) were systems programming languages which provided you with a syntax for using the underlying machine.  The libraries provided were really just tokens to portability.</p>
<p>With the introduction of STL, C++ is moving/has moved out of the systems programming space and is trying to seem like an application programming language like BASIC.  I personally don&#8217;t see the point.  If I wanted to use BASIC, with all its plusses and minuses, I&#8217;d use BASIC.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-238713">
				<div id="div-comment-238713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-238713">
			December 30, 2004 at 10:54 am</a>		</div>

		<p>&quot;an application programming language like BASIC&quot;</p>
<p>I see Microsoft doesn&#8217;t do any drug testing&#8230;</p>
<p>Raymond: You need to cast the ULONGLONGs to unsigned __int64 when you pass it in to printf and you need the format to be %I64u because %I64d is the signed version.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-239033">
				<div id="div-comment-239033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-239033">
			January 3, 2005 at 10:09 am</a>		</div>

		<blockquote><p>
  I see Microsoft doesn&#8217;t do any drug testing&#8230;</p>
<p>Perhaps they do, just not the way you were thinking ;)
</p></blockquote>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-239133">
				<div id="div-comment-239133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sig9</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-239133">
			January 4, 2005 at 10:58 am</a>		</div>

		<p>is part of the software industry.  if you do not learn to learn (ya ya ya) you will be out of a job as fast as you can say &quot;hello world!&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-239463">
				<div id="div-comment-239463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman/archive/2005/01/05/347314.aspx' rel='external nofollow' class='url'>Larry Osterman's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-239463">
			January 5, 2005 at 6:58 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-241363">
				<div id="div-comment-241363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/larryosterman/archive/0001/01/01/347314.aspx' rel='external nofollow' class='url'>Larry Osterman's WebLog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-241363">
			January 10, 2005 at 2:03 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-246543">
				<div id="div-comment-246543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotnetjunkies.com/WebLog/barblog/archive/2005/01/18/45891.aspx' rel='external nofollow' class='url'>public Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-246543">
			January 19, 2005 at 12:11 am</a>		</div>

		<p>CSci 101 Part I</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-247833">
				<div id="div-comment-247833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.wisniewski-online.com/cs/blogs/wizzys_world/archive/2005/01/20/4.aspx' rel='external nofollow' class='url'>Wizzy's World</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-247833">
			January 20, 2005 at 6:32 pm</a>		</div>

		<p>A while back there was an article in MSDN magazine about wrapping up the unmaged fibers API to implement&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-460343">
				<div id="div-comment-460343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://excastle.com/blog/archive/2007/01/11/10280.aspx' rel='external nofollow' class='url'>Joe White's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-460343">
			January 11, 2007 at 10:19 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-460373">
				<div id="div-comment-460373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://excastle.com/blog/archive/0001/01/01/10280.aspx' rel='external nofollow' class='url'>Joe White's Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-460373">
			January 11, 2007 at 10:21 pm</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-572213">
				<div id="div-comment-572213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.labraaten.com/wpblog/2007/11/29/mimic-the-c-yield-instruction-in-vc/' rel='external nofollow' class='url'>Labr??tens Web Log &raquo; Blog Archive &raquo; Mimic the C# yield instruction in VC++</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041229-00/?p=36853#comment-572213">
			November 28, 2007 at 7:25 pm</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.labraaten.com/wpblog/2007/11/29/mimic-the-c-yield-instruction-in-vc/" rel="nofollow">http://www.labraaten.com/wpblog/2007/11/29/mimic-the-c-yield-instruction-in-vc/</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

