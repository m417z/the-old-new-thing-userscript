<html>
<head>
<title>Sorting by indices, part 2: The Schwartzian transform</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Sorting by indices, part 2: The Schwartzian transform</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 6, 2017 / year-entry #5</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Decorate-sort-undecorate.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Before we dig into the Schwartzian transform, let's
look at a more conventional generic way to sort by a key:
</p>
<pre>
template&lt;typename Iter, typename UnaryOperation, typename Compare&gt;
void sort_by(Iter first, Iter last, UnaryOperation op, Compare comp)
{
  std::sort(first, last,
            [&amp;](T&amp; a, T&amp; b) { return comp(op(a), op(b)); });
}
</pre>
<p>
The idea here is that you give a unary operator <code>op</code> that
produces a sort key, and we sort the items by that key according
to the comparer.
For example, you might say
</p>
<pre>
std::vector&lt;Person&gt; v = ...;

// Sort by last name
sort_by(v.begin(), v.end(),
        [](const Person&amp; p) { return p.LastName; },
        std::less&lt;std::string&gt;);
</pre>
<p>
The first functional selects the thing we are sorting by
(here, the last name),
and the second functional selects how we are sorting
(here, in ascending order).
</p>
<p>
This technique works okay if the unary operator (the key generator)
is simple, such as the one we have here.
But if generating the key is expensive,
then we will want to cache the keys rather than evaluating
them over and over.
So let's do it:
</p>
<pre>
template&lt;typename Iter, typename UnaryOperation, typename Compare&gt;
void sort_by_with_caching(Iter first, Iter last, UnaryOperation op, Compare comp)
{
 using Diff = std::iterator_traits&lt;Iter&gt;::difference_type;
 using T = std::iterator_traits&lt;Iter&gt;::value_type;
 using Key = decltype(op(std::declval&lt;T&gt;()));
 using Pair = std::pair&lt;T, Key&gt;;
 Diff length = std::distance(first, last);
 std::vector&lt;Pair&gt; pairs;
 pairs.reserve(length);
 std::transform(first, last, std::back_inserter(pairs),
                [&amp;](T&amp; t) { return std::make_pair(std::move(t), op(t)); });
 std::sort(pairs.begin(), pairs.end(),
           [&amp;](const Pair&amp; a, const Pair&amp; b) { return comp(a.second, b.second); });
 std::transform(pairs.begin(), pairs.end(), first, [](Pair&amp; p) { return std::move(p.first); });
}
</pre>
<p>
The above is the literal translation of the
<a HREF="https://en.wikipedia.org/wiki/Schwartzian_transform">
Schwartian transform</a>
(also known more conventionally as the decorate-sort-undecorate pattern)
into C++.
You augment each item to be sorted with its corresponding key.&sup1;
You then sort by the key.
And then you throw away the keys, leaving the original items.&sup1;
</p>
<p>
We use <code>std::move</code> to move the items out of the
original collection into our temporary vector of pairs,
then we sort the pairs by the key,
and then we move the items from our pairs back to the
original collection.
The hope is that the object is efficiently movable,
so these move operations are very inexpensive.
</p>
<p>
But maybe the objects being sorted isn't efficiently movable.
Or maybe (horrors) the keys aren't efficiently movable.
We can use the trick from the
<code>sort_minimize_copies</code>
function to sort the items with minimal moving.
</p>
<pre>
template&lt;typename Iter, typename UnaryOperation, typename Compare&gt;
void sort_by_with_caching(Iter first, Iter last, UnaryOperation op, Compare comp)
{
 using Diff = std::iterator_traits&lt;Iter&gt;::difference_type;
 using T = std::iterator_traits&lt;Iter&gt;::value_type;
 using Key = decltype(op(std::declval&lt;T&gt;()));
 Diff length = std::distance(first, last);
 std::vector&lt;Key&gt; keys;
 keys.reserve(length);
 std::transform(first, last, std::back_inserter(keys),
                [&amp;](T&amp; t) { return op(t); });
 std::vector&lt;Diff&gt; indices(length);
 std::iota(indices.begin(), indices.end(), static_cast&lt;Diff&gt;(0));
 std::sort(indices.begin(), indices.end(),
           [&amp;](Diff a, Diff b) { return comp(keys[a], keys[b]); });
 apply_permutation(first, last, indices.begin());
}

template&lt;typename Iter, typename UnaryOperation&gt;
void sort_by_with_caching(Iter first, Iter last, UnaryOperation op)
{
 sort_by_with_caching(first, last, op, std::less&lt;&gt;());
}
</pre>
<p>
We create two helper arrays.
One holds the keys corresponding to the items,
and the other holds the indices.
The keys are in a parallel array with the original collection
and do not move during sorting.
Instead, we sort the indices.
Once we finish the sort, we apply the permutation to
the original items to move them to their final positions.
</p>
<p>
Okay, so that's what I was trying to get at:
Sorting a vector by a key, with caching.
If there's already a standard function to do this,
please let me know.&sup3;
</p>
<p>
&sup1;
The algorithm does assume that the key can consistently be generated
from the item,
and in particular that it depends only on the item and
not on the item with which it is being compared.
</p>
<p>
&sup2;
If we wanted to show off <code>sort_by</code>,
the call to <code>std::sort</code> could have been replaced with
</p>
<pre>
 sort_by(pairs.begin(), pairs.end(),
         [](const Pair&amp; p) { return p.second; }, comp);
</pre>
<p>
&sup3;
I would like to point out that I arrived at this particular
algorithm only after going down a dead end of having only
a parallel key array.
The idea was that I would sort the items and keys together
by using a proxy iterator that represented both the original
item and its key.
The thing I had trouble working out was how to structure
the proxy iterator so that it knew when its contents had
been moved out,
so it could move the real objects.
I probably could have gotten it to work eventually,
but then I realized I could avoid the entire hassle
by sorting indices instead.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1279395">
				<div id="div-comment-1279395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279395">
			January 6, 2017 at 8:54 am</a>		</div>

		<p>Typo alert:  The ยน footnote is in the body twice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1279415">
				<div id="div-comment-1279415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279415">
			January 6, 2017 at 1:49 pm</a>		</div>

		<p>What kind of a real world task would require a code that is sorting &#8220;heavy&#8221; objects? All me had to do is to sort pointers by keys, any general purpose library can handle this excellently.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1279425">
				<div id="div-comment-1279425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279425">
			January 6, 2017 at 1:50 pm</a>		</div>

		<p>Even if you&#8217;re sorting pointers, the calculation of the sort key can be expensive.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1279435">
				<div id="div-comment-1279435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279435">
			January 6, 2017 at 2:02 pm</a>		</div>

		<p>My objects are coming with keys in their hands. If they made it up to be an unordered bunch of objects, then I will extract their sorting preferences and put it into std::map. No way to fancy algorithms in my code base.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4" id="comment-1279445">
				<div id="div-comment-1279445" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279445">
			January 6, 2017 at 2:06 pm</a>		</div>

		<p>Then you&#8217;re lucky. I have a bunch of objects that I need to sort by things like &#8220;distance to nearest ATM which matches the criteria specified by the user&#8221;. Those objects didn&#8217;t come with those keys in their hands. I have to generate the keys when the user clicks Submit.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3 parent" id="comment-1279455">
				<div id="div-comment-1279455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dmitry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279455">
			January 6, 2017 at 2:11 pm</a>		</div>

		<p>If I have to sort my pointers by heavy predicate, std::sort is good enough. Algorithm that is doing least possible comparisons was not yet found. And my code base is not a scientific playground, we have to guarantee quality and performance.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1279465">
				<div id="div-comment-1279465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279465">
			January 7, 2017 at 5:00 am</a>		</div>

		<p>&#8220;If I have to sort my pointers by heavy predicate, std::sort is good enough&#8221;<br />
Since that can be several orders of magnitudes be less efficient than the shown code here I guess you either don&#8217;t have really heavy predicates or your performance targets are weaker than Raymonds. </p>
<p>Caching keys for the comparison is a pretty standard approach &#8211; .NET&#8217;s OrderBy does it out of the box (so I guess there&#8217;s one standard function that does it ;) ). I&#8217;d usually sort pointers if I have heavy objects, but the apply_permutation` solution is intriguing &#8211; there are situations where this would give better performance and simplify the code.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1279495">
				<div id="div-comment-1279495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279495">
			January 9, 2017 at 6:27 am</a>		</div>

		<p>I&#8217;ve implemented something very similar to the code here to sort a list of OOP COM objects by a user selected property. The previous implementation (std::sort + custom predicate) did 2 * N log N COM calls, the new one had N, which resulted in a huge speed up.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1279496">
				<div id="div-comment-1279496" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yukkuri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170106-00/?p=95135#comment-1279496">
			January 9, 2017 at 10:47 am</a>		</div>

		<p>Decorate, celebrate, don&#8217;t undecorate until March&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

