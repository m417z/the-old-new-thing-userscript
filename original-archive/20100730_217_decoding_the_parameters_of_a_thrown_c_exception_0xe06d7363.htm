<html>
<head>
<title>Decoding the parameters of a thrown C++ exception (0xE06D7363)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Decoding the parameters of a thrown C++ exception (0xE06D7363)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 30, 2010 / year-entry #218</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Special preview content for my TechReady talk later today. I'd like to claim it was planned this way, but actually it was just a coincidence. The Visual C++ compiler uses exception code 0xE06D7363 for C++ exceptions. Here's how you can decode the other parameters. (Handy if you're debugging a crash dump.) Note that this information...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<i>Special preview content for
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/07/22/10041191.aspx">
my TechReady talk later today</a>.
I'd like to claim it was planned this way,
but actually it was just a coincidence.
</i>
</p>
<p>
The Visual C++ compiler uses exception code
<code>0xE06D7363</code> for C++ exceptions.
Here's how you can decode the other parameters.
(Handy if you're debugging a crash dump.)
</p>
<p>
Note that this information falls under the category of
implementation detail.
There is no guarantee that this method will continue to work
in the future,
so don't write code that relies on it.
It's just a debugging tip.
</p>
<p>
When the C++ exception is raised,
<a HREF="http://support.microsoft.com/kb/185294">
the exception code is 0xE06D7363</a>
and there are three (possibly four) parameters.</p>
<ul>
<li>
Parameter&nbsp;0 is some internal value not important to the discussion.
</li>
<li>
Parameter&nbsp;1 is a pointer to the object being thrown (sort of).
</li>
<li>
Parameter&nbsp;2 is a pointer to information that describes the
object being thrown.
</li>
<li>
Parameter&nbsp;3 is the
    <code>HINSTANCE</code> of the DLL that raised the exception.
    (Present only on 64-bit Windows.)
</li>
</ul>
<p>
The object being thrown is pretty much the object being thrown,
except that sometimes there is some junk in front that you have to skip over.
Once you figure out what it is, you can dump it.
(I haven't bothered trying to figure out exactly how much;
I just dump bytes and figure out the correct start of the object
by inspection.)
But what is it?
That's what Parameter&nbsp;2 tells you, but in a very roundabout way.
</p>
<p>
Take Parameter&nbsp;2 and go to the fourth <code>DWORD</code>
and treat it as a pointer.
(On 64-bit systems, you have to add this value to the <code>HINSTANCE</code>
passed as Parameter&nbsp;3 to convert it to a pointer.)
</p>
<p>
Next, go to the second <code>DWORD</code> and treat it as a pointer.
(Again, on 64-bit systems,
it's really an offset from the <code>HINSTANCE</code>.)
</p>
<p>
Next, go to the second <code>DWORD</code> and treat it as a pointer.
(64-bit systems: you know the drill.)
</p>
<p>
Finally, skip over the first two <code>void*</code>s and the rest
is the class name.
</p>
<p>Here's a picture, rendered in high-tech ASCII line drawing.
Pointer-sized fields are marked with an asterisk,
and fields whose value are unknown or not important are marked
with tildes.
</p>
<pre>
EXCEPTION_RECORD
+----------+
| E06D7363 |
+----------+
|  ~~~     |
+----------+
|* ~~~     |
+----------+
|* ~~~     |
+----------+
| 3 or 4   |
+----------+
|* ~~~     |
+----------+
|*Object   |
+----------+     +---+
|*       ------&gt; |~~~|
+----------+     +---+
|*HINSTANCE|     |~~~|
+----------+     +---+
                 |~~~|
                 +---+    +---+
                 | -----&gt; |~~~|
                 +---+    +---+    +---+
                          | -----&gt; |~~~|
                          +---+    +---+    +----------+
                                   | -----&gt; |*   ~~~   |
                                   +---+    +----------+
                                            |*   ~~~   |
                                            +----------+
                                            |Class name|
                                            +----------+
</pre>
<p>
"When in doubt, add another level of indirection"
appears to be the mantra here.
</p>
<p>
Here's a real-world example I had to debug.
This came from a crash dump in a third-party application
reported via Windows Error Reporting, so all debugging has
to be done without source code or symbols.
</p>
<pre>
0:008&gt; .exr <a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/08/21/710754.aspx">00000000`015dede0</a>
ExceptionAddress: 000007fefd23bb5d (KERNEL32!RaiseException+0x39)
   ExceptionCode: e06d7363 (C++ EH exception)
  ExceptionFlags: 00000001
NumberParameters: 4 // this is running on 64-bit Windows
   Parameter[0]: 0000000019930520
   Parameter[1]: 00000000015def30 // object being thrown
   Parameter[2]: 00000000100cefa8 // magic Parameter 2
   Parameter[3]: 0000000010000000 // HINSTANCE
</pre>
<p>
According to the cookbook, we follow Parameter&nbsp;2:
</p>
<pre>
0:008&gt; dd 00000000100cefa8 l4
00000000`100cefa8  00000000 00000000 00000000 000cefc8
                                              ^^^^^^^^
</pre>
<p>
and take the fourth <code>DWORD</code>.
Since this is a 64-bit machine, we add it to the <code>HINSTANCE</code>
before dumping.
(If this were a 32-bit machine, we would just dump it directly.)
</p>
<pre>
0:008&gt; dd 100cefc8 l2
00000000`100cefc8  00000005 000ceff8
                            ^^^^^^^^
</pre>
<p>
Now we take the second <code>DWORD</code> (add the <code>HINSTANCE</code>
since this is a 64-bit machine) and then dump it again:
</p>
<pre>
0:008&gt; dd 100ceff8 l2
00000000`100ceff8  00000001 000d6670
                            ^^^^^^^^
</pre>
<p>
Okay, we're within striking distance now.
Since this is a 64-bit machine, we add the <code>HINSTANCE</code> to
the offset.
And on all platforms, we add two pointers (which is 0x10 on a 64-bit
machine and 8 on a 32-bit machine).
The result should be an ASCII string representing the class name:
</p>
<pre>
0:008&gt; da 100d6670+10
00000000`100d6680  ".PEAVCResourceException@@"
</pre>
<p>
If you ignore the decorations, you see that this is telling you
that the object thrown was a
<code>CResource&shy;Exception</code>.
</p>
<p>
And for old time's sake, here's a 32-bit version I just made up now.
</p>
<pre>
0:000&gt; .exr 0008f2e4
ExceptionAddress: 7671b046 (kernel32!RaiseException)
   ExceptionCode: e06d7363 (C++ EH exception)
  ExceptionFlags: 00000001
NumberParameters: 3 // 32-bit platform
   Parameter[0]: 19930520
   Parameter[1]: 0008f384 // object being thrown
   Parameter[2]: 10cfed60 // magic Parameter 2
0:000&gt; dd 10cfed60 l4
10cfed60  00000000 00000000 00000000 10db297c
0:000&gt; dd 10db297c l2
10db297c  00000004 10db2990
0:000&gt; dd 10db2990 l2
10db2990  00000001 10dbccac
0:000&gt; da 10dbccac+8
10dbccb4  ".PAVCFileException@@"
</pre>
<p>
Anyway, back to the original problem:
Knowing that the object being thrown was a
<code>CResource&shy;Exception</code> was a big help,
because that's a class used by MFC,
so I have additional information as to what it does
and how it's used.
This turns out to have been the necessary foothold to
identify the source of the problem,
which will be the subject of a future write-up.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-849873">
				<div id="div-comment-849873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rich</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849873">
			July 30, 2010 at 7:33 am</a>		</div>

		<p>Hey, great post. The exact type of thing that gets me started, and I can dive deeper if needed. This will be really handy in sept. when I take my final semester in Comp. Sci. It&#39;s going to be a rough semester, these timbits of info really help.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-849893">
				<div id="div-comment-849893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849893">
			July 30, 2010 at 8:49 am</a>		</div>

		<p>Thank you so much for getting back to in-depth, hard-to-get, advance debugging technique!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-849903">
				<div id="div-comment-849903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Todd A.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849903">
			July 30, 2010 at 10:11 am</a>		</div>

		<p>Is there any documentation on the structure that we are traversing in this article? Even if the EXACT structure is generated by the VC 8.23.3737 compiler ONLY, I&#39;d be curious to see what information kicks around after an exception.</p>
<p>Alternatively, is the traversing you have shown in this article the only traversing that can be safely done with the application in this exceptional state?</p>
<p>And finally&#8230; How do you learn about these techniques or develop them? Is it because you have internal Microsoft documentation for the exception structures generated or are there books that will show you how to derive this information?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-849913">
				<div id="div-comment-849913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben C.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849913">
			July 30, 2010 at 10:54 am</a>		</div>

		<p>If you have a pointer to the object, and that object has virtual functions, there is a strong probability that the object will have a vtable pointer. &nbsp;If you have symbols loaded for that object, then the debugger will usually tell you the type of the object based off of that vtable information.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-849923">
				<div id="div-comment-849923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849923">
			July 30, 2010 at 10:54 am</a>		</div>

		<p>Very Interesting.</p>
<p>Is there a similar way to do this in the Visual Studio debugger when you&#39;re in a catch(&#8230;) block? (Or maybe there&#39;s a build in way to display the exception type that I&#39;ve overlooked)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-849963">
				<div id="div-comment-849963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849963">
			July 30, 2010 at 4:23 pm</a>		</div>

		<p>Note that this information falls under the category of implementation detail. There is no guarantee that this method will continue to work in the future, so don&#39;t write code that relies on it. It&#39;s just a debugging tip.</p>
<p>You should format that as big red and ugly. And still everybody will ignore it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-849983">
				<div id="div-comment-849983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Felix Wyss</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849983">
			July 31, 2010 at 1:28 pm</a>		</div>

		<p>Filling in some blanks based on information I&#39;ve collected and reverse engineered. </p>
<p>Labeling the structure pointed to by the ExceptionInformation[2] member of EXCEPTION_RECORD as &quot;A&quot;, we have the following:</p>
<p>*A*</p>
<p>DWORD &nbsp;bitmask; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// Probably: 1=Const, 2=Volatile</p>
<p>DWORD &nbsp;destructor; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // RVA (Relative Virtual Address) of destructor for that exception object</p>
<p>DWORD &nbsp;unknown;</p>
<p>DWORD &nbsp;catchableTypesPtr; &nbsp; &nbsp;// RVA of instance of type &quot;B&quot;</p>
<p>*B*</p>
<p>// Array of RVAs of descriptors (type &quot;C&quot;) describing types as which the thrown object may be caught. &nbsp;</p>
<p>// The most specific/derived type is listed first.</p>
<p>DWORD &nbsp;count;</p>
<p>DWORD &nbsp;catchableTypes[count];</p>
<p>*C* </p>
<p>DWORD &nbsp;someBitmask;</p>
<p>DWORD &nbsp;typeInfo; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // RVA of std::type_info for that type</p>
<p>DWORD &nbsp;memberDisplacement; &nbsp; // Add to ExceptionInformation[1] in EXCEPTION_RECORD to obtain &#39;this&#39; pointer.</p>
<p>DWORD &nbsp;virtBaseRelated1; &nbsp; &nbsp; // -1 if no virtual base</p>
<p>DWORD &nbsp;virtBaseRelated2; &nbsp; &nbsp; // ?</p>
<p>DWORD &nbsp;objectSize; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // Size of the object in bytes</p>
<p>DWORD &nbsp;probablyCopyCtr; &nbsp; &nbsp; &nbsp;// RVA of copy constructor (?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-849993">
				<div id="div-comment-849993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Morten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-849993">
			August 1, 2010 at 8:20 am</a>		</div>

		<p>It strikes me that given that this is something people in the real world use as part of their job, it should probably be locked down or have a tool for somehow helping one get at the info. I mean, when I debug $SYSTEM I want as much information about what went on at the time of the incident as possible, up to and including implementation details like which class was most intimately involved in the crash and where the offending object was living at the time. Sure it might change in the next incarnation, but RIGHT NOW real world problems are harder to solve than they should be because the support information is not quite available. YMMV.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jamesnt even thread-even depth-1" id="comment-850003">
				<div id="div-comment-850003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/JamesNT' rel='external nofollow' class='url'>JamesNT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-850003">
			August 1, 2010 at 9:51 am</a>		</div>

		<p>Mr. Chen,</p>
<p>Very helpful information. &nbsp;You are my programming god.</p>
<p>JamesNT</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-850023">
				<div id="div-comment-850023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CPDaniel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100730-00/?p=13273#comment-850023">
			August 1, 2010 at 4:36 pm</a>		</div>

		<p>@Todd A: &nbsp;I&#39;d recommend writing a small bit of C++ code that catches and throws exceptions and compiling it with /FAsc to get an assembler listing. &nbsp;You can usually deduce a lot from the structure declarations and the names of the symbols generated by the compiler. &nbsp;Sometimes feeding the symbol names to undname.exe will reveal details about the purpose of the symbol beyond the simple unmangling of a C++ object name.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

