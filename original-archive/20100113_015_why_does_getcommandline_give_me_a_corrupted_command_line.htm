<html>
<head>
<title>Why does GetCommandLine give me a corrupted command line?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does GetCommandLine give me a corrupted command line?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 13, 2010 / year-entry #16</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer had the following problem: We're calling GetCommandLine to retrieve the command line, and the documentation says that it returns a single null-terminated string. However, when we call it in our application, we find that it is actually a double-null-terminated string. The buffer returned consists of a series of null-terminated strings, one string per...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer had the following problem:</p>
<blockquote class="q"><p> We're calling <code>GetCommandLine</code> to retrieve the command line, and the documentation says that it returns a single null-terminated string. However, when we call it in our application, we find that it is actually a <i>double</i>-null-terminated string. The buffer returned consists of a series of null-terminated strings, one string per word on the command line, all stored one after the other, and with two null terminators at the end. How do I get the original string? </p>
</blockquote>
<p> Recall that <a href="http://blogs.msdn.com/oldnewthing/archive/2009/02/23/9440784.aspx"> the command line is just a conveniently-initialized variable in a process</a> and once it's set up, the kernel doesn't really care about it any more. </p>
<p> What is most likely happening is that somebody is taking the raw command line returned by <code>GetCommandLine</code> and <a href="http://blogs.msdn.com/oldnewthing/archive/2009/11/25/9928372.aspx"> writing to it</a>. The customer can confirm this by dumping the command line just as the process starts, even before any DLLs get to run their <code>DllMain</code>s, and then setting a write breakpoint on the command line to see who is writing to it. </p>
<p> And in fact, the customer did find the culprit. </p>
<blockquote class="q"><p> It turns out it was some other part of the code (not written by me!) which was parsing the command line and writing into it in the process. </p>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-802583">
				<div id="div-comment-802583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802583">
			January 13, 2010 at 10:52 am</a>		</div>

		<p>I bet some unsuspecting person used the bane of the c standard library &#8211; strtok. &nbsp;Probably one of the least safe standard functions. &nbsp;Modifies de-facto input data AND keeps global state.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-802593">
				<div id="div-comment-802593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802593">
			January 13, 2010 at 12:15 pm</a>		</div>

		<p>@Jack</p>
<p>I don&#8217;t know if it&#8217;s strtok()&#8217;s fault. &nbsp;If you don&#8217;t want there to be any surprises where buffers get modified out from under you, you should use the &quot;const&quot; keyword responsibly. &nbsp;Callers of strtok() and similar functions should duplicate the buffer if they&#8217;re passed something that&#8217;s const.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-802653">
				<div id="div-comment-802653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ooh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802653">
			January 13, 2010 at 11:25 pm</a>		</div>

		<p>Wondering how often PSS + Raymond have to answer this question&#8230; Seems to come up a lot!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-802673">
				<div id="div-comment-802673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cthulhu</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802673">
			January 14, 2010 at 3:54 am</a>		</div>

		<p>i bet it was written by them</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-802663">
				<div id="div-comment-802663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">M&#233;dinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802663">
			January 14, 2010 at 12:53 am</a>		</div>

		<p>It&#8217;s likely that it was modified by a strtok-style parsing, but note that this function, while not reentrant (strtok_r() is, as well as its port foolishly named strtok_s()) *is* const-correct, as it explicitly takes a non-const parameter.</p>
<p>So I&#8217;d rather blame the non-const-correct C functions like strchr() and strtol()&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-802773">
				<div id="div-comment-802773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802773">
			January 14, 2010 at 11:48 am</a>		</div>

		<p>@M&#233;dinoc</p>
<p>What I meant is that all buffers that you don&#8217;t want modified should be marked const, and you should mark things const liberally and defensively. &nbsp;GetCommandLine() (and typically argv and similar) aren&#8217;t marked with const, but the broader point stands, and I don&#8217;t think this is a weakness of strtok()&#8217;s interface.</p>
<p>(Also, strtok() may not be reentrant, but at least if the CRT declares the state pointer as __declspec(thread) it can be used by multiple threads, though still not in a recursive function&#8230;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-802823">
				<div id="div-comment-802823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jack Mathews</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802823">
			January 14, 2010 at 12:25 pm</a>		</div>

		<p>Oh, you people&#8230; &nbsp;I didn&#8217;t say anything was strtok&#8217;s fault. &nbsp;It&#8217;s the fault of the person that used strtok, which happens to be a poorly designed ancient function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-802953">
				<div id="div-comment-802953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802953">
			January 15, 2010 at 2:14 am</a>		</div>

		<p>Windows must keep the original command line around somewhere though, because it can be retrieved via WMI.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-802973">
				<div id="div-comment-802973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-802973">
			January 15, 2010 at 6:08 am</a>		</div>

		<p>Joe: Are you saying that WMI manages to give you a non-corrupted command line? If so, it does it by making a copy when the process starts, because Windows doesn&#8217;t keep a copy anywhere.</p>
<p>Honestly, though, it should. It would be nice if somebody (kernel or CSRSS) kept a copy of the original command line (possibly retrieved with GetOriginalCommandLine) so that DLLs can write proper debug logs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-803103">
				<div id="div-comment-803103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100113-00/?p=15293#comment-803103">
			January 16, 2010 at 7:45 pm</a>		</div>

		<p>Hehe. I remember when I tried to parse the commandline using sprintf and put the arguments backwards. Simple mistake that took down the Linux server it was running on.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

