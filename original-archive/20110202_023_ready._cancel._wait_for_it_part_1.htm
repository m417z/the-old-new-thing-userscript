<html>
<head>
<title>Ready... cancel... wait for it! (part 1)</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Ready&#8230; cancel&#8230; wait for it! (part 1)</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 2, 2011 / year-entry #24</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>31</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">One of the cardinal rules of the OVERLAPPED structure is the OVERLAPPED structure must remain valid until the I/O completes. The reason is that the OVERLAPPED structure is manipulated by address rather than by value. The word complete here has a specific technical meaning. It doesn't mean "must remain valid until you are no longer...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
One of the cardinal rules of the <code>OVERLAPPED</code>
structure is <i>the <code>OVERLAPPED</code> structure
must remain valid until the I/O completes</i>.
The reason is that the <code>OVERLAPPED</code> structure
is
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/12/17/10106259.aspx">
manipulated by address rather than by value</a>.
</p>
<p>
The word <i>complete</i> here has a specific technical meaning.
It doesn't mean "must remain valid until you are no longer interested
in the result of the I/O."
It means that the structure must remain valid until
the I/O subsystem has signaled that the I/O operation
is finally over, that there is nothing left to do,
it has passed on:
You have an ex-I/O operation.
</p>
<p>
Note that
an I/O operation can complete successfully, or it can
complete unsuccessfully.
Completion is not the same as success.
</p>
<p>
A common mistake when performing overlapped I/O
is issuing a cancel and immediately freeing the <code>OVERLAPPED</code>
structure.
For example:
</p>
<pre>
<i>// this code is wrong
 HANDLE h = ...; // handle to file opened as FILE_FLAG_OVERLAPPED
 OVERLAPPED o;
 BYTE buffer[1024];
 InitializeOverlapped(&amp;o); // creates the event etc
 if (ReadFile(h, buffer, sizeof(buffer), NULL, &amp;o) ||
     GetLastError() == ERROR_IO_PENDING) {
  if (WaitForSingleObject(o.hEvent, 1000) != WAIT_OBJECT_0) {
   // took longer than 1 second - cancel it and give up
   CancelIo(h);
   return WAIT_TIMEOUT;
  }
  ... use the results ...
 }
 ...</i>
</pre>
<p>
The bug here is that after calling <code>Cancel&shy;Io</code>,
the function returns without waiting for the <code>Read&shy;File</code>
to complete.
Returning from the function
implicitly frees the automatic variable <code>o</code>.
When the <code>Read&shy;File</code> finally completes, the I/O system
is now writing to stack memory that has been freed and is probably
being reused by another function.
The result is impossible to debug:
First of all, it's a race condition between your code and the I/O
subsystem, and breaking into the debugger <i>doesn't stop the
I/O subsystem</i>.
If you step through the code, you don't see the corruption,
because the I/O completes <i>while you're broken into the debugger</i>.
</p>
<p>
Here's what happens when the program is run outside the debugger:
</p>
<table BORDER=0>
<tbody>
<tr>
<td>ReadFile</td>
<td>&rarr;</td>
<td>I/O begins</td>
</tr>
<tr>
<td>WaitForSingleObject</td>
<td></td>
<td>I/O still in progress</td>
</tr>
<tr>
<td>WaitForSingleObject times out</td>
</tr>
<tr>
<td>CancelIo</td>
<td>&rarr;</td>
<td>I/O cancellation submitted to device driver</td>
</tr>
<tr>
<td>return</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Device driver was busy reading from the hard drive<br />
        Device driver receives the cancellation<br />
        Device driver abandons the rest of the read operation<br />
        Device driver reports that I/O has been canceled<br />
        I/O subsystem writes <code>STATUS_<wbr>CANCELED</wbr></code>
        to <code>OVERLAPPED</code> structure<br />
        I/O subsystem queues the completion function (if applicable)<br />
        I/O subsystem signals the completion event (if applicable)<br />
        I/O operation is now complete</td>
</tr>
</tbody>
</table>
<p>
When the I/O subsystem receives word from the device driver
that the cancellation has completed,
it performs the usual operations when an I/O operation completes:
It updates the <code>OVERLAPPED</code> structure with the results
of the I/O operation, and notifies whoever wanted to be notified
that the I/O is finished.
</p>
<p>
Notice that when it updates the <code>OVERLAPPED</code> structure,
it's updating memory that has already been freed back to the stack,
which means that it's corrupting the stack of whatever function
happens to be running right now.
(It's even worse if you happened to catch it while it was in the
process of updating the <code>buffer</code>!)
Since the precise timing of I/O is unpredictable,
the program crashes with memory corruption that keeps changing
each time it happens.
</p>
<p>
If you try to debug the program, you get this:
</p>
<table BORDER=0>
<tbody>
<tr>
<td>ReadFile</td>
<td>&rarr;</td>
<td>I/O begins</td>
</tr>
<tr>
<td>WaitForSingleObject</td>
<td></td>
<td>I/O still in progress</td>
</tr>
<tr>
<td>WaitForSingleObject times out</td>
</tr>
<tr>
<td>Breakpoint hit on <code>Cancel&shy;Io</code> statement<br />
        Stops in debugger</td>
</tr>
<tr>
<td>Hit F10 to step over the CancelIo call</td>
<td>&rarr;</td>
<td>I/O cancellation submitted to device driver</td>
</tr>
<tr>
<td>Breakpoint hit on <code>return</code> statement<br />
        Stops in debugger</td>
</tr>
<tr>
<td></td>
<td></td>
<td>Device driver was busy reading from the hard drive<br />
        Device driver receives the cancellation<br />
        Device driver abandons the rest of the read operation<br />
        Device driver reports that I/O has been canceled<br />
        I/O subsystem writes <code>STATUS_<wbr>CANCELED</wbr></code>
        to <code>OVERLAPPED</code> structure<br />
        I/O subsystem queues the completion function (if applicable)<br />
        I/O subsystem signals the completion event (if applicable)<br />
        I/O operation is now complete</td>
</tr>
<tr>
<td>Look at the <code>OVERLAPPED</code> structure in the debugger<br />
        It says <code>STATUS_<wbr>CANCELED</wbr></code></td>
</tr>
<tr>
<td>Hit F5 to resume execution<br />
        No memory corruption</td>
</tr>
</tbody>
</table>
<p>
Breaking into the debugger changed the timing of the I/O operation
relative to program execution.
Now, the I/O completes before the function returns,
and consequently there is no memory corruption.
You look at the <code>OVERLAPPED</code> structure and say,
"See? Immediately on return from the <code>Cancel&shy;Io</code> function,
the <code>OVERLAPPED</code> structure has been updated with the result,
and the <code>buffer</code> contents are not being written to.
It's safe to free them both now.
Therefore, this can't be the source of my memory corruption bug."
</p>
<p>
Except, of course, that it is.
</p>
<p>
This is even more crazily insidious because the <code>OVERLAPPED</code>
structure and the <code>buffer</code> are
updated by the I/O subsystem, which means that it happens
<i>from kernel mode</i>.
This means that
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/05/09/8475735.aspx">
write breakpoints set by your debugger won't fire</a>.
Even if you manage to narrow down the corruption to
"it happens somewhere in this function",
your breakpoints will never see it as it happens.
You're going to see that the value was good,
then a little while later, the value was bad,
and yet your write breakpoint never fired.
You're then going to declare that the world has gone mad
and seriously consider a different line of work.
</p>
<p>
To fix this race condition,
you have to delay freeing the <code>OVERLAPPED</code> structure
and the associated <code>buffer</code>
until the I/O is complete and anything else that's using them
has also given up their claim to it.
</p>
<pre>
   // took longer than 1 second - cancel it and give up
   CancelIo(h);
   <font COLOR=blue>WaitForSingleObject(o.hEvent, INFINITE); // added
   // Alternatively: GetOverlappedResult(h, &amp;o, TRUE);</font>
   return WAIT_TIMEOUT;
</pre>
<p>
The <code>Wait&shy;For&shy;Single&shy;Object</code> after the
<code>Cancel&shy;Io</code>
waits for the I/O to complete
before finally returning (and implicitly freeing the <code>OVERLAPPED</code>
structure and the <code>buffer</code> on the stack).
Better would be to use
<code>GetOverlapped&shy;Result</code>
with <code>bWait&nbsp;=&nbsp;TRUE</code>,
because that also handles the case where the <code>hEvent</code>
member of the <code>OVERLAPPED</code> structure is <code>NULL</code>.
</p>
<p>
<b>Exercise</b>:
If you retrieve the completion status
after canceling the I/O
(either by looking at the <code>OVERLAPPED</code> structure
directly or by using <code>GetOverlapped&shy;Result</code>)
there's a chance that the overlapped result 
will be something other than <code>STATUS_<wbr>CANCELED</wbr></code>
(or <code>ERROR_<wbr>CANCELLED</wbr></code> if you prefer Win32 error codes).
Explain.
</p>
<p>
<b>Exercise</b>:
If this example had used <code>Read&shy;File&shy;Ex</code>,
the proposed fix would be incomplete.
Explain and provide a fix.
Answer to come next time, and then we'll look at another
version of this same principle.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (31)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-892623">
				<div id="div-comment-892623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pcooper</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892623">
			February 2, 2011 at 7:08 am</a>		</div>

		<p>My guess for Exercise 1: the IO could have completed successfully between the time that your wait-for-1-second expired and the time you called the CancelIO function, so the status reflects that it actually all worked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-nathan_works odd alt thread-odd thread-alt depth-1" id="comment-892633">
				<div id="div-comment-892633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/nathan_works' rel='external nofollow' class='url'>nathan_works</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892633">
			February 2, 2011 at 7:42 am</a>		</div>

		<p>It&#39;s still a race condition waiting for the underlying cancel to complete. Until the event is signaled, not much in the struct can be considered valid..</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892643">
				<div id="div-comment-892643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892643">
			February 2, 2011 at 8:01 am</a>		</div>

		<p>For the second one from the documentation &quot;The ReadFileEx function ignores the OVERLAPPED structure&#39;s hEvent member. An application is free to use that member for its own purposes&#8230;&quot; which tells me that &quot;WaitForSingleObject(o.hEvent, INFINITE);&quot; would be a bad idea.</p>
<p>I&#39;d think one way to solve that is to allocate the OVERLAPPED structure on the heap, and delete it in the completion callback.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892653">
				<div id="div-comment-892653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892653">
			February 2, 2011 at 8:10 am</a>		</div>

		<p>For the second exercise (ReadFileEx()), the proposed fix would be incomplete because ReadFileEx() doesn&#39;t signal hEvent when the I/O is complete; it just calls (or queues) the I/O completion routine. &nbsp;In this circumstance, the addition to the fix provided above would be to signal the hEvent member manually in the completion routine. &nbsp;This way, the OVERLAPPED local variable stays valid since the function still won&#39;t return until hEvent has been signaled.</p>
<p>As an aside, it seems based on fix that I provide above that ReadFile() is essentially doing what I proposed behind the scenes. &nbsp;Is that actually the case?</p>
<div class="post">[<i>Assume that the rest of the code has also been adjusted for ReadFileEx. (E.g., WaitForSingleObject changes to a wait on an event set by the completion function.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892663">
				<div id="div-comment-892663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ian Kelly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892663">
			February 2, 2011 at 8:16 am</a>		</div>

		<p>In addition to the above fix, you have to wait in an Alertable state. So assuming you signal the hEvent in your completion routine, you would need to change the WaitForSingleObject call to WaitForSingleObjectEx(o.hEvent, INFINITE, TRUE).</p>
<div class="post">[<i>That only fixes part of the problem. Keep looking, or wait for the answer tomorrow. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892673">
				<div id="div-comment-892673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kyle</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892673">
			February 2, 2011 at 8:29 am</a>		</div>

		<p>Ian &#8211;</p>
<p>Good point&#8230;waiting in an alertable state is absolutely necessary. &nbsp;It would still be necessary, however, to check the completion state after the WaitForSingleObjectEx() call because other APC&#39;s theoretically could have been queued to the thread. &nbsp;If it&#39;s not complete, perform another alertable wait.</p>
<p>Raymond &#8211;</p>
<p>The MSDN documentation doesn&#39;t indicate whether or not GetOverlappedResult() will wait in an alertable state. &nbsp;I assume it probably doesn&#39;t and WaitForSingleObjectEx() must be used?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-892683">
				<div id="div-comment-892683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892683">
			February 2, 2011 at 8:32 am</a>		</div>

		<p>FWIW, experiments seem to indicate that WaitForSingleObject(NULL, INFINITE) returns WAIT_FAILED and calls SetLastError(ERROR_INVALID_HANDLE), which is good.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892693">
				<div id="div-comment-892693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">David Levine</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892693">
			February 2, 2011 at 8:49 am</a>		</div>

		<p>FWIW this illustrates one of the dangers of sharing memory between code, especially across user-kernel boundaries. If an API was used that did not share memory the corruption problem would be avoided. It also shows how incredibly complex canceling IO operations can be &#8211; there are lots of use cases and race conditions that have to be accounted for. </p>
<div class="post">[<i>I assume you&#39;re talking about the control buffer. (Copying the I/O buffer can get really expensive for large I/O.) The alternative to sharing the control buffer is having ReadFile return a handle that you then pass to GetOverlappedResult, and then which you have to close. It also means that you need to find some other place to store your reference data. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892703">
				<div id="div-comment-892703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892703">
			February 2, 2011 at 8:55 am</a>		</div>

		<p>&quot;You&#39;re then going to declare that the world has gone mad and seriously consider a different line of work.&quot;</p>
<p>Literally laughed out loud because it&#39;s so true. &nbsp;Thanks, Raymond.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892713">
				<div id="div-comment-892713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">waleri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892713">
			February 2, 2011 at 10:57 am</a>		</div>

		<p>I think alertable wait should be in a loop.</p>
<p>Also, I suspect that actual error code after CancelIo() would depend on the driver underneath.</p>
<p>Correct me if I am wrong, but from my observations, no internal wait is ever alertable.</p>
<p>I guess it is because the waiting thread should be notified about APC event. Why should it be notified is a whole another story.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892723">
				<div id="div-comment-892723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892723">
			February 2, 2011 at 11:43 am</a>		</div>

		<p>Well thanks, now you made me read your article with the voice of John Cleese in my head.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892733">
				<div id="div-comment-892733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Phil W</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892733">
			February 2, 2011 at 11:45 am</a>		</div>

		<p>I had no idea that Raymond might be a Monty Python afficionado&#8230;</p>
<p>&quot;it has passed on: You have an ex-I/O operation&#8230;&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892743">
				<div id="div-comment-892743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Vilx-</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892743">
			February 2, 2011 at 12:00 pm</a>		</div>

		<p>A very interesting topic! This reminds me of another edge case: what about if you call CancelIO and then end your process? I remembered this because of a somewhat related observation that one of the few ways how you can create a truly unkillable zombie process in Windows is to make it hang at some IO. This can get very annoying if the process has locked some other resource (such as a file) that you would really like to access. But until the IO completes (which can take ages in some cases, like a scratched CD/DVD, or a network problem), you&#39;re stuck. The only way to reset things is to reboot.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892763">
				<div id="div-comment-892763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Morten</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892763">
			February 2, 2011 at 12:29 pm</a>		</div>

		<p>&quot;You&#39;re then going to declare that the world has gone mad and seriously consider a different line of work.&quot;</p>
<p>Oh, many products can do that to you. Now that I think about it, they all can. Remember: down, not across. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892793">
				<div id="div-comment-892793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892793">
			February 2, 2011 at 3:43 pm</a>		</div>

		<p>@Vilx-:</p>
<blockquote><p>
  what about if you call CancelIO and then end your process
</p></blockquote>
<p>When a thread terminates, all IO associated with that thread are canceled. This means the equivalent of CancelIo is called for all of them; thus it&#39;s not really necessary to call CancelIo in your test case. A bad driver that doesn&#39;t support IO cancellation can cause a thread or a process to get stuck on its unwind. A &quot;bad driver&quot; is also storport.sys that hosts most HBA miniports. It only relies on ULP timeout, which may be very big in some cases. And if you issue SCSI_PASSTHROUGh requests, you specify your own ULP timeout. Go figure.</p>
<p>@Raymond:</p>
<p>Part of the confusion is because the SDK documentation doesn&#39;t say explicitly that the IO is not completed as soon CancelIo returns; and that you still need to wait for it. The docs vaguely say &quot;The thread can use the GetOverlappedResult function to determine when the I/O operations themselves have been completed.&quot; Which, depending on the reader, may or may not be interpreted as requirement to determine when the IO is completed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-892803">
				<div id="div-comment-892803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892803">
			February 2, 2011 at 5:43 pm</a>		</div>

		<blockquote><p>
  The only way to reset things is to reboot.
</p></blockquote>
<p>Would restarting the driver in question also work (that is, can the driver cancel/fail the IRP from below in response to a shutdown request?)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892823">
				<div id="div-comment-892823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steve</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892823">
			February 2, 2011 at 6:08 pm</a>		</div>

		<p>The second cardinal rule of the OVERLAPPED structure is &quot;You don&#39;t talk about the OVERLAPPED structure&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892843">
				<div id="div-comment-892843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892843">
			February 2, 2011 at 7:19 pm</a>		</div>

		<p>[The alternative to sharing the control buffer is having ReadFile return a handle that you then pass to GetOverlappedResult, and then which you have to close. It also means that you need to find some other place to store your reference data. -Raymond]</p>
<p>It seems to me that this would have been the better solution (if the crystal ball had been operating that day). A potential leak is infinitely preferable to memory corruption that cannot be debugged. When is that time-machine due to be ready?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892853">
				<div id="div-comment-892853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">janm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892853">
			February 2, 2011 at 7:30 pm</a>		</div>

		<p>In the ReadFileEx case, when waiting on the event set in the completion function, the return value from &quot;WaitForSingleObjectEx(h, INFINITE, TRUE)&quot; is important.</p>
<p>If it returns with WAIT_IO_COMPLETION, there is no guarantee that I/O that completed is the I/O this function cares about, so something like &quot;while (WaitForSingleObjectEx(h, INFINITE, TRUE) != WAIT_IO_COMPLETION) ;&quot; would avoid the problem and ensure that forward progress is only made after the completion function executes.</p>
<p>On the first exercise, the answer is clearly a race condition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892863">
				<div id="div-comment-892863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Moi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892863">
			February 3, 2011 at 12:13 am</a>		</div>

		<p>Raymond &#8211; I really enjoy your coding posts. I loved your scrollbar series, the context menu stuff, and all the random one-of or two-of posts. Please never stop!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892873">
				<div id="div-comment-892873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andreas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892873">
			February 3, 2011 at 12:44 am</a>		</div>

		<p>Thanks Raymond for writing these very important articles. Your blog has meant more for me improving my Windows programming skills than any book has. As Moi says, please never stop!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892883">
				<div id="div-comment-892883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892883">
			February 3, 2011 at 4:02 am</a>		</div>

		<p>That is evil. How can I find something like that, except by being more experienced and smarter than I am?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892893">
				<div id="div-comment-892893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892893">
			February 3, 2011 at 5:42 am</a>		</div>

		<p>Seems to me that in general that it is a bad idea to allocate the OVERLAPPED structure as local to such a low-level leaf function. In actual code, you&#39;d be doing something important while the I/O progresses instead of just immediately waiting for it. (Otherwise, you would have used a synchronous I/O call.) &nbsp;If that &quot;something important&quot; raised an exception or otherwise exited prematurely, you could have the same corrupt memory problem. Seems that this structure should either be allocated from the heap (as another commenter suggested) or at least be local to a back-stop procedure which catches any internally handle-able exceptions.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892903">
				<div id="div-comment-892903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rangoric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892903">
			February 3, 2011 at 5:44 am</a>		</div>

		<p>@K</p>
<p>Actually you are experienced and smart enough to find out about it. You are reading this blog.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-892913">
				<div id="div-comment-892913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">And</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892913">
			February 3, 2011 at 6:20 am</a>		</div>

		<p>Second exercice</p>
<p>I think that if you change to WaitForSingleObjectEx, you still have to waith for the overlapped completion routine to finish, so you would have to alloc OVERLAPPED on heap and release it inside the completion routine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-892923">
				<div id="div-comment-892923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zarat</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-892923">
			February 3, 2011 at 6:33 am</a>		</div>

		<p>Where does the event handle actually get closed?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893073">
				<div id="div-comment-893073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-893073">
			February 3, 2011 at 9:46 am</a>		</div>

		<p>@Mauritis:</p>
<p>A PNP driver doesn&#39;t get a remove request until all the IRPs on the stack are completed. It does get query_remove, though, but that doesn&#39;t mean to complete all requests. Usually, it&#39;s a job of the client app to close the handle on the remove device notification.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893083">
				<div id="div-comment-893083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alex Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-893083">
			February 3, 2011 at 9:47 am</a>		</div>

		<p>@Zarat:</p>
<p>The event handle is only closed when the app explicitly closes it (or terminates).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893603">
				<div id="div-comment-893603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-893603">
			February 6, 2011 at 5:39 pm</a>		</div>

		<p>[You&#39;re then going to declare that the world has gone mad and seriously consider a different line of work.]</p>
<p>Not exactly.</p>
<p>If I were able to trace down the problem this close, I&#39;d search on the web and by chance I&#39;ll find someone posting explanation like this series.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-893743">
				<div id="div-comment-893743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-893743">
			February 7, 2011 at 8:37 pm</a>		</div>

		<p>Four years too late. I ran into this *exact* problem half a year after I joined Microsoft. I didn&#39;t write the code, but I got asked to solve a bug that was caused by this same issue. It was particularly confusing because it only repro-ed on prod builds, and as you noted, didn&#39;t trigger and on-write breakpoints in WinDbg. And when it did hit, it overwrote the return pointer on the stack, so the program tried to return to STATUS_CANCELLED. Quite confusing. I spent the better part of a month trying new approaches (we didn&#39;t have a good repro initially, so even examining the stack to find the bad return value was out of the question).</p>
<p>I did eventually solve it, so no, my particularly OS app doesn&#39;t suffer from the problem anymore, but damn was it annoying to figure out.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-893903">
				<div id="div-comment-893903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [Visual C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110202-00/?p=11613#comment-893903">
			February 8, 2011 at 11:39 am</a>		</div>

		<p>Please, let&#39;s not forget that in addition to keeping the OVERLAPPED structure available for use, the data buffer must remain available too. &nbsp;So the various proposals to not use the OVERLAPPED structure to store the status haven&#39;t actually solved anything.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

