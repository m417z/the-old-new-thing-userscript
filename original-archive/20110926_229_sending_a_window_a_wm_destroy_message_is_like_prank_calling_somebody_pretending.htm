<html>
<head>
<title>Sending a window a WM_DESTROY message is like prank calling somebody pretending to be the police</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Sending a window a WM_DESTROY message is like prank calling somebody pretending to be the police</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 26, 2011 / year-entry #230</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>27</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was trying to track down a memory leak in their program. Their leak tracking tool produced the stacks which allocated memory that was never freed, and they all seemed to come from uxtheme.dll, which is a DLL that comes with Windows. The customer naturally contacted Microsoft to report what appeared to be a...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was trying to track down a memory leak in their program.
Their leak tracking tool produced the stacks which allocated memory
that was never freed, and they all seemed to come from
<code>uxtheme.dll</code>, which is a DLL that comes with Windows.
The customer naturally contacted Microsoft to report what appeared
to be a memory leak in Windows.
</p>
<p>
I was one of the people who investigated this case,
and the customer was able to narrow down
the scenario which was triggering the leak.
Eventually, I tracked it down.
First, here's the thread that caused the leak:
</p>
<pre>
DWORD CALLBACK ThreadProc(void *lpParameter)
{
 ...
 // This CreateWindow caused uxtheme to allocate some memory
 HWND hwnd = CreateWindow(...);
 RememberWorkerWindow(hwnd);
 MSG msg;
 while (GetMessage(&amp;msg, NULL, 0, 0)) {
  TranslateMessage(&amp;msg);
  DispatchMessage(&amp;msg);
 }
 return 0;
}
</pre>
<p>
This thread creates an invisible window whose job is to
do <i>something</i> until it is destroyed, at which point
the thread is no longer needed.
The window procedure for the window looks like this:
</p>
<pre>
LRESULT CALLBACK WndProc(HWND hwnd, UINT uMsg,
                         WPARAM wParam, LPARAM lParam)
{
 ...
 switch (uMsg) {
 ... business logic deleted ...

 case WM_DESTROY:
  ForgetWorkerWindow(hwnd);
  PostQuitMessage(0);
  break;
 ...
 }
 return DefWindowProc(hwnd, uMsg, wParam, lParam);
}
</pre>
<p>
Sinec this is the main window on the thread,
its destruction posts a quit message to signal the message
loop to exit.
</p>
<p>
There's nothing obviously wrong here that would cause <code>uxtheme</code>
to leak memory.
And yet it does.
The memory is allocated when the window is created,
and it's supposed to be freed when the window is destroyed.
And the only time we exit the message loop is when the window
is destroyed.
So how is it that this thread manages to exit without destroying the window?
</p>
<p>
The key is how the program signals this window that it should go away.
</p>
<pre>
void MakeWorkerGoAway()
{
 // Find the worker window if it is registered
 HWND hwnd = GetWorkerWindow();
 // If we have one, destroy it
 if (hwnd) {
  // DestroyWindow doesn't work for windows that belong
  // to other threads.
  // DestroyWindow(hwnd);
  SendMessage(hwnd, WM_DESTROY, 0, 0);
 }
}
</pre>
<p>
The authors of this code first tried destroying the window
with <code>DestroyWindow</code> but ran into the problem that
you cannot destroy a window that belongs to a different thread.
"But aha, since the <code>DestroyWindow</code> function sends
the <code>WM_DESTROY</code> message, we can just cut out the
middle man and send the message directly."
</p>
<p>
Well, yeah, you can do that, but that doesn't actually destroy
the window.
It just <i>pretends</i> to destroy the window by prank-calling
the window procedure and saying
"Ahem, um, yeah, this is the, um, window manager?
(stifled laughter)
And, um, like, we're just calling you to tell you, um,
you're being destroyed.
(giggle)
So, um, you should like pack up your bags and
(snort)
sell all your furniture!
(raucous laughter)"
</p>
<p>
The window manager sends the <code>WM_DESTROY</code> message
to a window as part of the window destruction process.
If you send the message yourself, then you're making the window <i>think</i>
that it's being destroyed, even though it isn't.
(Because it's <code>DestroyWindow</code> that destroys windows.)
</p>
<p>
The victim window procedure goes through its
"Oh dear, I'm being destroyed, I guess I'd better clean up my stuff"
logic, and in this case, it unregisters the worker window and
posts a quit message to the message loop.
The message loop picks up the <code>WM_QUIT</code> and exits the thread.
</p>
<p>
And that's the memory leak:
The thread exited before all its windows were destroyed.
That worker window is still there, because it never got
<code>DestroyWindow</code>'d.
Since the window wasn't actually destroyed, the internal memory
used to keep track of the window didn't get freed, and there you have
your leak.
</p>
<p>
"You just got punk'd!"
</p>
<p>
The correct solution is for the <code>MakeWorkerGoAway</code>
function to send a message to the worker window to tell it,
"Hey, I'd like you to go away.
Please call <code>DestroyWindow</code> on yourself."
You can invent a private message for this,
or you can take advantage of the fact that the
default behavior of the <code>WM_CLOSE</code> message
is to destroy the window.
Since our window procedure doesn't override <code>WM_CLOSE</code>,
the message will fall through to <code>DefWindowProc</code>
which will convert the <code>WM_CLOSE</code> into a <code>DestroyWindow</code>.
</p>
<p>
Now that you understand the difference between destroying a window
and prank-calling a window telling it is being destroyed,
you might be able to
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2007/05/23/407234.aspx#443420">
help Arno with his problem</a>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (27)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-937083">
				<div id="div-comment-937083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937083">
			September 26, 2011 at 7:21 am</a>		</div>

		<p>So, the problem is that WM_DESTROY is a notification, while WM_CLOSE is a command, and they were sending the notification as if it were a command?</p>
<p>Perhaps this was not obvious to them and they were thinking that WM_DESTROY was a command. That is, they probably were thinking that all DestroyWindow does is send or post or whatever is the correct term a WM_DESTROY message and that all the window deletion code was within DefWindowProc when called with WM_DESTROY.</p>
<p>This is why I like looking at the source code whenever I use a function I am not used to (or, when programming for Windows, look at the Wine source code, which should act similar enough).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-937093">
				<div id="div-comment-937093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937093">
			September 26, 2011 at 7:32 am</a>		</div>

		<blockquote><p>
  send a message to the worker window to tell it, &quot;Hey, I&#39;d like you to go away. Please call DestroyWindow on yourself.&quot;
</p></blockquote>
<p>I would call it UWM_GTFO or UWM_ESAD</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937103">
				<div id="div-comment-937103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Roger Lipscombe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937103">
			September 26, 2011 at 7:33 am</a>		</div>

		<p>I&#39;ve long thought that Windows should have made more of a distinction between those messages that are commands and those that are notifications (WM_DESTROY vs WM_DESTROYING vs WM_DESTROYED). Obviously, that would involve inventing a time machine &#8212; it&#39;s way too late to fix it now. It just means that you can&#39;t assume that this is obvious from the message name.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937113">
				<div id="div-comment-937113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wyatt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937113">
			September 26, 2011 at 7:43 am</a>		</div>

		<p>The last link goes to the top of the suggestion page rather than the specific comment. &nbsp;Looks like the redirect is dropping the target.</p>
<div class="post">[<i>It goes to the comment if the page is already cached. You have &quot;Web 2.0 technology&quot; to thank. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937123">
				<div id="div-comment-937123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937123">
			September 26, 2011 at 7:57 am</a>		</div>

		<p>Fortunately you can search for &quot;Arno&quot; on the suggestion box: &nbsp;An app with a window and a modal dialog box. &nbsp;If another app sends WM_DESTROY while the dialog is active, the app crashes, and the question is &quot;I mean, what is the standard way for an application to close wheter it has a modal box or not ? &quot;</p>
<p>I would assume the answer is an extension of the same&#8211;have both the parent window and the dialog box accept WM_CLOSE, or a user-defined message. &nbsp;If the dialog gets it, it would have to communicate to the parent window that it was told to shut down externally, probably by something like a certain value from nResult in EndDialog().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-937133">
				<div id="div-comment-937133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937133">
			September 26, 2011 at 8:15 am</a>		</div>

		<p>That error is very easy to make. I remember making it as a beginner, until I read the documentation saying &quot;WM_DESTROY tells the window that it&#39;s being destroyed&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937143">
				<div id="div-comment-937143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Frederik Slijkerman</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937143">
			September 26, 2011 at 8:46 am</a>		</div>

		<p>&quot;This is why I like looking at the source code whenever I use a function I am not used to (or, when programming for Windows, look at the Wine source code, which should act similar enough).&quot;</p>
<p>This is why I like looking at the documentation before using a function or message.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937163">
				<div id="div-comment-937163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937163">
			September 26, 2011 at 9:30 am</a>		</div>

		<p>@Cesar: The problem with doing that is that you don&#39;t know what&#39;s supposed to be a contract (maintained between versions) or an implementation detail (changes between versions). You need documentation to tell the difference.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937173">
				<div id="div-comment-937173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937173">
			September 26, 2011 at 9:54 am</a>		</div>

		<p>@Frederik Slijkerman, @Billy O&#39;Neal: I thought looking at the documentation went without saying. But if you missed it when reading the documentation, looking at the source code would make it clear.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937183">
				<div id="div-comment-937183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">djeidot</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937183">
			September 26, 2011 at 10:34 am</a>		</div>

		<p>Shouldn&#39;t it be called WM_ONDESTROY instead of WM_DESTROY?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937193">
				<div id="div-comment-937193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937193">
			September 26, 2011 at 10:54 am</a>		</div>

		<p>This is a good topic. Cause we involved with developers with big argument about the memory leak which cause the embedded system crash. We can see leak in the testing tool. Then we told the developer, he attacked our testing tool rather than fix the problem. Although the leak was getting better, but it was not resolved at all. But the system got crashed a less frequently then everybody was happy?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937203">
				<div id="div-comment-937203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937203">
			September 26, 2011 at 11:39 am</a>		</div>

		<p>Why not just make a rule that only the owner can send events from a window and prevent the error from being made in the first place? We seriously need to write a note about thinking about the long long term effects of the design for when the timemachine is completed.</p>
<div class="post">[<i>How do you know that the code sending the message is the &quot;owner&quot;? From a kernel standpoint, objects don&#39;t send messages; threads do. (You might semantically attribute the action to an object, but that&#39;s a conceptual thing not encoded anywhere in the CPU state.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937213">
				<div id="div-comment-937213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937213">
			September 26, 2011 at 11:53 am</a>		</div>

		<p>@henke37: I&#39;m pretty sure that the completion of the time machine will herald the end of thinking about design. &nbsp;After all, if our design is sub-optimal, we can always use the time-machine later, to fix it retroactively.</p>
<p>At least, that&#39;s the argument all managers will use to justify firing all architects, designers, and in fact any programmer who actually understands their trade and expects to be compensated correspondingly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937223">
				<div id="div-comment-937223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937223">
			September 26, 2011 at 12:04 pm</a>		</div>

		<p>&nbsp;// DestroyWindow doesn&#39;t work for windows that belong</p>
<p>&nbsp;// to other threads.</p>
<p>Hmmm. Last time I tried it it worked just fine, but that was in a 16 bit program on Win95.</p>
<p>I&#39;m sure Raymond would agree that calling DestroyWindow on a window owned by another process is a bad idea.</p>
<p>It&#39;s the kind of tool I&#39;d only reach for these days if I had to blast a virus out of the system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937243">
				<div id="div-comment-937243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeff</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937243">
			September 26, 2011 at 2:17 pm</a>		</div>

		<p>I notice that (on Vista at least) you can&#39;t send WM_CREATE from one thread to another, even within the same process. Odd that WM_DESTROY doesn&#39;t have the same restriction.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937153">
				<div id="div-comment-937153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937153">
			September 26, 2011 at 9:01 am</a>		</div>

		<p>&quot;[It goes to the comment if the page is already cached. You have &quot;Web 2.0 technology&quot; to thank. -Raymond]&quot;</p>
<p>Actually I couldn&#39;t get it to work right in Chrome 14 *or* IE9. &nbsp;IE redirected the page and lost the anchor; Chrome redirected and kept the anchor in the address bar but wouldn&#39;t navigate to the link. &nbsp;In both browsers, I tried hitting the link several times to see the &quot;from cached&quot; behavior.</p>
<div class="post">[<i>I&#39;ll tweak the link to at least take the redirect out of the mix. Maybe that&#39;ll help. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-937263">
				<div id="div-comment-937263" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937263">
			September 26, 2011 at 6:49 pm</a>		</div>

		<blockquote><p>
  Sinec this is the main window on the thread,&#8230;
</p></blockquote>
<p>Since?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-937273">
				<div id="div-comment-937273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937273">
			September 26, 2011 at 7:00 pm</a>		</div>

		<p>You don&#39;t perform UI update from the other threads, so it&#39;s only logical to NOT perform UI destruction from the other threads.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937283">
				<div id="div-comment-937283" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937283">
			September 26, 2011 at 7:43 pm</a>		</div>

		<p>Joshua:</p>
<p>Were you checking for memory leaks? While sending WM_DESTROY does work fine in that it provokes the window destroy action, it doesn&#39;t do the rest of the actions that calling DestroyWindow does.</p>
<p>So yes, sending the message even in Windows 7 &quot;works fine&quot; in the sense that the window is destroyed, it doesn&#39;t work fine in that none of the associated cleanup takes place.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937293">
				<div id="div-comment-937293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937293">
			September 26, 2011 at 7:46 pm</a>		</div>

		<p>-_-; oops ignore that, I posted it by accident after reading, typing it out and realising that I misunderstood the post. Sorry. One of those cases where you want the bug of it not posting your message to happen but it doesn&#39;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-937313">
				<div id="div-comment-937313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937313">
			September 26, 2011 at 9:38 pm</a>		</div>

		<p>@Joshua:</p>
<p>&quot;Last time I tried it it worked just fine, but that was in a 16 bit program on Win95.&quot;</p>
<p>For Win16 app in Windows 9x, there is only one thread (effectively) in the whole system. One can say that even Win32 apps in Win9x might not have had this DestroyWindow restriction, because the whole USER system was pretty much serialized.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-937323">
				<div id="div-comment-937323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937323">
			September 26, 2011 at 9:41 pm</a>		</div>

		<p>@Jeff:</p>
<p>If you&#39;re ever sending WM_CREATE, you&#39;re doing things wrong. WM_CREATE can only be sent by Windows, and never cross-thread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937333">
				<div id="div-comment-937333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">TC</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937333">
			September 26, 2011 at 9:50 pm</a>		</div>

		<p>@Cesar: &quot;if you missed [something] when reading the documentation, looking at the source code would make it clear.&quot;</p>
<p>That doesn&#39;t make it clear at all &#8211; for the reason Billy stated: you don&#39;t know what is maintained between versions, and what is just an implementation detail that might change between versions. &quot;You need documentation to tell the difference.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937403">
				<div id="div-comment-937403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937403">
			September 27, 2011 at 5:21 am</a>		</div>

		<p>Caching the page doesn&#39;t help because the page doesn&#39;t actually have the comments on it. (Try visiting the blog with a browser with scripting disabled.) The target doesn&#39;t even exist until the (presumed) XHR has completed and the page populated. At this point you can then click Go again and the browser should just scroll to the link. (I&#39;m sure that this step could be automated.)</p>
<p>Earlier versions of the blogging software would output a number of comments (with a more link) and then XHR the rest (deleting the link) so you could at least link safely to a comment that made the cut.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-937413">
				<div id="div-comment-937413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Rick C</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937413">
			September 27, 2011 at 6:36 am</a>		</div>

		<p>It looks like the workaround Neil mentioned, clicking Go a second time after the page has loaded completely, works for IE9, but NOT for Chrome. &nbsp;Yay, Community Server.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-937743">
				<div id="div-comment-937743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Andy Feldstein</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-937743">
			September 28, 2011 at 12:08 pm</a>		</div>

		<p>Thank you for the smile&#8211;your anthropomorphization of the wrong code hit just the right note.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-938233">
				<div id="div-comment-938233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mark Y</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20110926-00/?p=9553#comment-938233">
			September 30, 2011 at 4:47 am</a>		</div>

		<p>This reminds me of <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2011/07/28/10190521.aspx" rel="nofollow">blogs.msdn.com/&#8230;/10190521.aspx</a>. &nbsp;:)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

