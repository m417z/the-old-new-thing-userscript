<html>
<head>
<title>How can I control which parts of the shell namespace the INamespaceWalk::Walk operation will walk into?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I control which parts of the shell namespace the INamespaceWalk::Walk operation will walk into?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 8, 2017 / year-entry #247</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171108-00/?p=97365</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">You can ask it to skip the folder, or you can tell it to give up entirely.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The
<code>INamespace&shy;Walk::</code><code>Walk</code> method
initiates a depth-first traversal of the shell namespace,
subject to constraints controlled by the various parameters
(such as maximum search depth).
If you pass an object which implements the
<code>INamespace&shy;Walk&shy;CB</code>
interface, you can monitor the progress of the namespace walk
and also influence how it proceeds.
</p>
<p>
The
<code>Enter&shy;Folder</code> method is called when the namespace
walk finds an object in the shell namespace with
the <code>SFGAO_</code><code>FOLDER</code> attribute.
You can perform whatever actions you wish in response to this callout,
and you can provide limited feedback to the namespace walk operation:
</p>
<ul>
<li>Return <code>S_OK</code> to allow the namespace walk to
    recurse into the folder.
    The folder is eligible to be reported by
    <code>INamespace&shy;Walk::</code><code>Get&shy;ID&shy;Array&shy;Result</code>.
    </li>
<li>Return <code>S_FALSE</code> to prevent the namespace walk from
    recursing into the folder.
    The folder is eligible to be reported by
    <code>INamespace&shy;Walk::</code><code>Get&shy;ID&shy;Array&shy;Result</code>.
    </li>
<li>Return a COM error <code>HRESULT</code> to abandon the
    namespace walk operation.
    The error code you return will be the return value of the
    <code>INamespace&shy;Walk::</code><code>Walk</code> method.
    </li>
</ul>
<p>
The
<code>Found&shy;Item</code> method is called when the namespace
walk finds an object in the shell namespace without
the <code>SFGAO_</code><code>FOLDER</code> attribute.
Again,
you can perform whatever actions you wish in response to this callout,
and you can provide limited feedback to the namespace walk operation:
</p>
<ul>
<li>Return <code>S_OK</code> to allow the namespace walk to
    continue.
    The item will be reported by
    <code>INamespace&shy;Walk::</code><code>Get&shy;ID&shy;Array&shy;Result</code>.
    </li>
<li>Return a COM error <code>HRESULT</code> to abandon the
    namespace walk operation.
    The error code you return will be the return value of the
    <code>INamespace&shy;Walk::</code><code>Walk</code> method.
    </li>
</ul>
<p>
Note that "allow the namespace walk to recurse into the folder"
and "eligible to be reported by
<code>INamespace&shy;Walk::</code><code>Get&shy;ID&shy;Array&shy;Result</code>"
are both conditional upon how the namespace walk is configured.
For example, if recursing into the folder would exceed the recursion
depth, then recursion won't occur even if you say "Sure, go ahead"
in your <code>Enter&shy;Folder</code> handler.
</p>
<p>
The
<code>Leave&shy;Folder</code> method is called when the namespace
walk has finished enumerating the contents of a folder.
It is the counterpart to <code>Enter&shy;Folder</code>.
This is your chance to perform any cleanup or other actions.
(For example, if you are counting the number of items in each folder,
this tells you that the enumeration of a folder is complete,
and you can save the totals to wherever you intend to save them.)
The return value here does not affect the namespace walk.
</p>
<p>
Let's go with the table again:
</p>
<table BORDER=1 CELLPADDING=3 CLASS="cp3"
    STYLE="border-collapse: collapse">
<tr>
<th>Operation</th>
<th><code>S_OK</code></th>
<th><code>S_FALSE</code></th>
<th>COM error</th>
</tr>
<tr>
<td><code>Enter&shy;Folder</code></td>
<td>
<div>Allow recursion<br>Allow reporting<br>Continue</div>
</td>
<td>
<div>Block recursion<br>Allow reporting<br>Continue</div>
</td>
<td>
<div>Block recursion<br>Block reporting<br>Abandon</div>
</td>
</tr>
<tr>
<td><code>Found&shy;Item</code></td>
<td>
<div>Allow reporting<br>Continue</div>
</td>
<td>Not allowed</td>
<td>
<div>Block reporting<br>Abandon</div>
</td>
</tr>
<tr>
<td><code>Leave&shy;Folder</code></td>
<td>Continue</td>
<td>Not allowed</td>
<td>Continue</td>
</tr>
</table>
<p>
The boxes marked "Not allowed" indicate that returning
<code>S_FALSE</code> is not allowed for those methods.
</p>
<p>
<b>Exercise 1</b>:
A customer had the following question.
Maybe you can answer it.
</p>
<blockquote CLASS=q><p>
We are using
<code>INamespace&shy;Walk::</code><code>Walk</code>,
and we're passing the
<code>NSWF_</code><code>TRAVERSE_</code><code>STREAM_</code><code>JUNCTIONS</code> flag
so that it recurses into CAB folders,
but it's also recursing into ZIP folders.
How can we stop it from recursing into ZIP folders?
</p>
</blockquote>
<p>
<b>Exercise 2</b>:
Suppose you want to process at most the first 100 files.
How would you stop the
namespace walk operation
after 100 files have been processed?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1315186">
				<div id="div-comment-1315186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171108-00/?p=97365#comment-1315186">
			November 8, 2017 at 7:44 am</a>		</div>

		<p>Exercise 1: in the EnterFunction method, detect wether the item is a ZIP folder, and in that case, return S_FALSE. Otherwise, return S_OK.</p>
<p>Exercise 2: create a counter and initialize it to zero. In every call to FoundItem, increment the counter. If the counter goes over 100, return a COM error. Otherwise, return S_OK.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1315205">
				<div id="div-comment-1315205" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ray Koopa</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171108-00/?p=97365#comment-1315205">
			November 8, 2017 at 8:08 am</a>		</div>

		<p>Sounds like the walk methods I implemented once in a .NET node hierarchy for a game engine. I feel like I&#8217;ve done something right for once after reading this!</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1315216">
				<div id="div-comment-1315216" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171108-00/?p=97365#comment-1315216">
			November 8, 2017 at 11:00 am</a>		</div>

		<p>Ideally FoundItem and LeaveFolder should also treat S_FALSE as &#8220;stop searching, successfully&#8221; (You can always implement that with a customer error code that means &#8220;gave up early for some reason&#8221;, but that&#8217;s really the sort of thing S_FALSE is for.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1315247">
				<div id="div-comment-1315247" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171108-00/?p=97365#comment-1315247">
			November 8, 2017 at 3:45 pm</a>		</div>

		<p>IIRC, COM error codes are based, for historical reasons, on old Win16 error codes, which themselves were based on DOS codes, which include some sort of &#8220;aborted by the user&#8221; code. But I&#8217;m too lazy to look up that O:-) . If it&#8217;s true, you can use it in the case you mention.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4 parent" id="comment-1315255">
				<div id="div-comment-1315255" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171108-00/?p=97365#comment-1315255">
			November 8, 2017 at 5:09 pm</a>		</div>

		<p>I just set a global boolean that means ignore that error.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1315315">
				<div id="div-comment-1315315" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171108-00/?p=97365#comment-1315315">
			November 9, 2017 at 9:05 am</a>		</div>

		<p>Given that you are already using an object to control the recursion, and that the object must be created before calling the INamespace­Walk::Walk method (and thus, should be destroyed after returning), I think it&#8217;s better to put that flag in the control object. CS courses teach not to use global variables under any circumstances. I think you should use them only for global configuration and for singular objects (like the ones representing your application or your main window). Or, as Raymond says it, don&#8217;t use a global resource to solve a local problem.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

