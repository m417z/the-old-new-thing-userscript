<html>
<head>
<title>A trick for keeping an object alive in a C++ lambda while still being able to use the this keyword to refer to it</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A trick for keeping an object alive in a C++ lambda while still being able to use the <CODE>this</CODE> keyword to refer to it</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 4, 2019 / year-entry #3</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20190104-00/?p=100635</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Capture it twice, once for the money, and once for the show.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
You may want to capture your <code>this</code>
pointer into a C++ lambda,
but that captures the raw pointer.
If you need to extend the object's lifetime,
you will need to capture a strong reference.
For plain C++ code, this would be a
<code>std::shared_</code><code>ptr</code>.
For COM objects, this is usually some sort
of smart pointer class like
<code>ATL::</code><code>CComPtr</code>,
<code>Microsoft::</code><code>WRL::</code><code>ComPtr</code>,
or
<code>winrt::</code><code>com_ptr</code>.
</p>
<pre>
  // std::shared_ptr
  auto callback = [self = shared_from_this()]() {
    self-&gt;DoSomething(self-&gt;m_value);
    self-&gt;DoSomethingElse();
   };

  // WRL::ComPtr
  auto callback = [self =
                   Microsoft::WRL::ComPtr&lt;ThisClass&gt;(this)]() {
    self-&gt;DoSomething(self-&gt;m_value);
    self-&gt;DoSomethingElse();
  };

  // ATL::CComPtr
  auto callback = [self =
                   ATL::CComPtr&lt;ThisClass&gt;(this)]() {
    self-&gt;DoSomething(self-&gt;m_value);
    self-&gt;DoSomethingElse();
  };

  // winrt::com_ptr
  template&lt;typename T&gt;
  auto to_com_ptr(T* p) noexcept
  {
    winrt::com_ptr&lt;T&gt; ptr;
    ptr.copy_from(p);
    return ptr;
  }

  auto callback = [self = to_com_ptr(this)] {
    self-&gt;DoSomething(self-&gt;m_value);
    self-&gt;DoSomethingElse();
  };
</pre>
<p>
A common pattern for the "capture a strong reference to yourself"
is to capture both a strong reference and a raw <code>this</code>.
The strong reference keeps the <code>this</code> alive,
and you use the <code>this</code> for convenient access to members.
</p>
<pre>
  // std::shared_ptr
  auto callback = [<font COLOR=blue>lifetime</font> = std::shared_from_this(this),
                   <font COLOR=blue>this</font>]() {
    DoSomething(m_value);  <font COLOR=blue>// was self-&gt;DoSomething(self-&gt;m_value);</font>
    DoSomethingElse();     <font COLOR=blue>// was self-&gt;DoSomethingElse();</font>
   };

  // WRL::ComPtr
  auto callback = [<font COLOR=blue>lifetime</font> =
                   Microsoft::WRL::ComPtr&lt;ThisClass&gt;(this),
                   <font COLOR=blue>this</font>]() {
    DoSomething(m_value);  <font COLOR=blue>// was self-&gt;DoSomething(self-&gt;m_value);</font>
    DoSomethingElse();     <font COLOR=blue>// was self-&gt;DoSomethingElse();</font>
  };

  // ATL::CComPtr
  auto callback = [<font COLOR=blue>lifetime</font> =
                   ATL::CComPtr&lt;ThisClass&gt;(this),
                   <font COLOR=blue>this</font>]() {
    DoSomething(m_value);  <font COLOR=blue>// was self-&gt;DoSomething(self-&gt;m_value);</font>
    DoSomethingElse();     <font COLOR=blue>// was self-&gt;DoSomethingElse();</font>
  };

  // winrt::com_ptr
  auto callback = [<font COLOR=blue>lifetime</font> = to_com_ptr(this),
                   <font COLOR=blue>this</font>]() {
    DoSomething(m_value);  <font COLOR=blue>// was self-&gt;DoSomething(self-&gt;m_value);</font>
    DoSomethingElse();     <font COLOR=blue>// was self-&gt;DoSomethingElse();</font>
  };
</pre>
<p>
I like to give the captured strong reference a name like
<code>lifetime</code> to emphasize that its purpose is to
extend the lifetime of the <code>this</code> pointer.
Otherwise, somebody might be tempted to "optimize" out
the seemingly-unused variable.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title"> <small><a rel="nofollow" id="cancel-comment-reply-link" href="/oldnewthing/20190104-00/?p=100635#respond" style="display:none;">Cancel reply</a></small></h3><p class="must-log-in">You must be <a href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20190104-00%2F%3Fp%3D100635">logged in</a> to post a comment.</p>	</div><!-- #respond -->
	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1375175">
				<div id="div-comment-1375175" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20190104-00/?p=100635#comment-1375175">
			January 4, 2019 at 7:04 am</a>		</div>

		<p>From a &#8220;I don&#8217;t trust the compiler&#8221; perspective, I think the <code>lifetime</code> examples are dangerous, the compiler should be free to optimize out any variables captured if they aren&#8217;t actually used in the body of the lambda. That said I&#8217;m not a very good language lawyer.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20190104-00%2F%3Fp%3D100635">Log in to Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-damien_the_unbeliever odd alt depth-2" id="comment-1375185">
				<div id="div-comment-1375185" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Damien_The_Unbeliever' rel='external nofollow' class='url'>Damien_The_Unbeliever</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20190104-00/?p=100635#comment-1375185">
			January 4, 2019 at 7:17 am</a>		</div>

		<p>I don&#8217;t think it can because it&#8217;s probably constrained to call the destructor on lifetime at the end of the lambda scope. The whole RAII pattern is based on having useful destructors called at known points in time.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20190104-00%2F%3Fp%3D100635">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-geelaw even depth-2" id="comment-1375195">
				<div id="div-comment-1375195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Gee+Law' rel='external nofollow' class='url'>Gee Law</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20190104-00/?p=100635#comment-1375195">
			January 4, 2019 at 9:25 am</a>		</div>

		<p>It <em>is</em> used. “Used” means having a side effect. Here the side effect is the non-trivial constructor/destructor.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20190104-00%2F%3Fp%3D100635">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-d-sturm odd alt depth-2" id="comment-1375225">
				<div id="div-comment-1375225" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/DanStur' rel='external nofollow' class='url'>DanStur</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20190104-00/?p=100635#comment-1375225">
			January 4, 2019 at 11:12 am</a>		</div>

		<p>This seems quite obviously an illegal optimisation even without checking any specific parts of the standard. If an optimisation makes a legal c++ program invalid we surely have a problem.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20190104-00%2F%3Fp%3D100635">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-odd thread-alt depth-1 parent" id="comment-1375265">
				<div id="div-comment-1375265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20190104-00/?p=100635#comment-1375265">
			January 4, 2019 at 4:16 pm</a>		</div>

		<p>The <code>std::shared_ptr</code> example is probably wrong&#8230; AFAIK there is no such a thing as <code>std::shared_from_this</code>, maybe you meant (if you class inherits from <code>std::enable_shared_from_this</code>) <code>self = this-&gt;shared_from_this()</code> (possibly without the redundant <code>this-&gt;</code>).</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20190104-00%2F%3Fp%3D100635">Log in to Reply</a></div>
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1375285">
				<div id="div-comment-1375285" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20190104-00/?p=100635#comment-1375285">
			January 4, 2019 at 5:41 pm</a>		</div>

		<p>Thanks. Fixed.</p>

		<div class="reply"><a rel="nofollow" class="comment-reply-login" href="https://blogs.msdn.microsoft.com/oldnewthing/wp-login.php?redirect_to=https%3A%2F%2Fblogs.msdn.microsoft.com%2Foldnewthing%2F20190104-00%2F%3Fp%3D100635">Log in to Reply</a></div>
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

