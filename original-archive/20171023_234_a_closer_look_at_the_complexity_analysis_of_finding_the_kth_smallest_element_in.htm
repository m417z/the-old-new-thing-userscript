<html>
<head>
<title>A closer look at the complexity analysis of finding the k'th smallest element in two sorted arrays</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A closer look at the complexity analysis of finding the k&#8217;th smallest element in two sorted arrays</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 23, 2017 / year-entry #235</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Let's calculate it properly.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Given two sorted arrays of the same length,
with unique elements,
find the <var>k</var>th smallest element in the combined collection.
One solution involves the
<a HREF="http://typeocaml.com/2017/10/19/pearl-no-4-double-binary-search/">
double binary search</a>.
I'll let you go read the article to see how it works.
I'm here to dissect the complexity analysis.
</p>
<blockquote CLASS=q><p>
Since every time we remove
&frac14; elements, the complexity is
<span TITLE="order of 2 times log N">
<var>O</var>(2*log(<var>N</var>))</span>,
<i>i.e.</i>,
<span TITLE="order of log N">
<var>O</var>(log(<var>N</var>))</span>.
</p>
</blockquote>
<p>
Okay, that was pretty glib.
How did we get there?
</p>
<p>
If an algorithm reduces the problem to
a smaller problem that is half the size, then the number of
reduction steps needed to reduce the problem to size 1
is
<span TITLE="ceiling of binary logarithm of N">
&lceil;lg&thinsp;<var>N</var>&rceil;</span>.
More generally, if you have an algorithm where the ratio of the
size of the next iteration
to the size of the current iteration is <var>r</var>,
then the number of reduction steps is
<span TITLE="ceiling of log base 1 over r, of N">
&lceil;log<sub><var>1/r</var></sub>&thinsp;N&rceil;</span>.
</p>
<p>
In the above example, the ratio is <var>r</var> = &frac34;,
so the number of reduction steps is
<span TITLE="ceiling of log base four thirds of N">
&lceil;log<sub>4/3</sub>&thinsp;<var>N</var>&rceil;</span>.
We can
<a HREF="https://en.wikipedia.org/wiki/Logarithm#Change_of_base">
change the logarithm to base 2</a>
to arrive at
<span TITLE="ceiling of binary logarithm of N, divided by binary logarithm of four thirds">
&lceil;(lg&thinsp;<var>N</var>)&divide;(lg&thinsp;(4/3))&rceil;</span>
&#x2248;
<span TITLE="ceiling of two point four times binary logarithm of N">
&lceil;2.4 &times; lg&thinsp;<var>N</var>&rceil;</span>.
</p>
<p>
This is not the same as
<span TITLE="two times binary logarithm of N">
2 &times; lg&thinsp;<var>N</var></span>
given in the original article.
My guess is that the original article calculated the conversion
factor incorrectly as
<span TITLE="binary logarithm of 4">lg&thinsp;4</span> = 2.
</p>
<p>
But since this is all for order of magnitude calculations,
an error in the constant factor is forgiven because order of magnitude
ignores constant factors.
</p>
<p>
But wait, does the formula even apply in the first place?
</p>
<p>
The formula applies if the reduced problem is the same as the original
problem, but with a smaller size.
In the case under consideration,
the starting point was two equal-sized arrays,
but when we're done, we have two unequal-sized arrays:
One of the arrays shrunk in half, but the other stayed the same size.
</p>
<p>
We used the wrong formula!
</p>
<p>
Consider the second iteration, where we have one small array and one
large array.
And suppose the second iteration of the algorithm decides to throw
away half of the smaller array.
We did not throw away a quarter of the elements.
We threw away half of the smaller array, which is one third of the
total number of elements, which means that we threw away only a sixth!
</p>
<p>
It gets worse at the third iteration:
If we are unlucky and the algorithm decides to throw away half of the
tiny array,
we discarded only one tenth of the elements.
</p>
<p>
So in the worst case, we get into a case of diminishing returns,
where were throw away less and less from the small array
and never make a dent in the big array.
Does this algorithm even guarantee termination?
</p>
<p>
In mathematics, sometimes the way to solve a problem is to convert
it to a harder problem, and then solve the harder problem.
In this case, the harder problem is
"Given two sorted arrays of <i>possibly-unequal length</i>,
with unique elements,
find the <var>k</var>th smallest element in the combined collection."
</p>
<p>
Let
<span TITLE="f of n comma m">
<var>f</var>(<var>n</var>, <var>m</var>)</span>
represent the number
of reduction steps needed to solve the problem,
where <var>n</var> and <var>m</var> are the lengths of the two arrays.
If you decide to throw away half of the first array,
then the number of remaining steps is
<span TITLE="f of n over 2 comma m">
<var>f</var>(&frac12;<var>n</var>, <var>m</var>)</span>.
Similarly, if you decide to throw away half of the second array,
then the number of remaining steps is
<span TITLE="f of n comma m over 2">
<var>f</var>(<var>n</var>, &frac12;<var>m</var>)</span>.
You now have the recursion
<span TITLE="f of n comma m equals 1 plus the max of the value of f of n over 2 comma m or the value of f of n comma m over 2">
<var>f</var>(<var>n</var>, <var>m</var>) =
1 + max(<var>f</var>(&frac12;<var>n</var>, <var>m</var>),
        <var>f</var>(<var>n</var>, &frac12;<var>m</var>))</span>.
</p>
<p>
The solution to this recursion is
<span TITLE="f of n comma m equals the ceiling of the binary logarithm of n plus the ceiling of the binary logarithm of m">
<var>f</var>(<var>n</var>, <var>m</var>) =
&lceil;lg&thinsp;<var>n</var>&rceil; + 
&lceil;lg&thinsp;<var>m</var>&rceil;</span>.
</p>
<p>
You can think of the problem this way:
You have two arrays, and
based on the algorithm, you cut one in half or you cut the other in half,
until both arrays are cut down to just one element.
It takes
<span TITLE="the ceiling of the binary logarithm of n">
&lceil;lg&thinsp;<var>n</var>&rceil;</span>
cuts to reduce the first array and
<span TITLE="the ceiling of the binary logarithm of m">
&lceil;lg&thinsp;<var>m</var>&rceil;</span>
cuts to reduce the second array.
The algorithm tells you which piece to cut next,
but regardless of what order the algorithm gives,
the total number of cuts is the same.
</p>
<p>
In the original problem,
<span TITLE="n equals m equals half of capital N">
<var>n</var> = <var>m</var> = &frac12;<var>N</var></span>.
Therefore, the number of reduction steps is
<span TITLE="the ceiling of the binary logarithm of half of capital N plus the ceiling of the binary logarithm of half of capital N which equals two less than twice the ceiling of the binary logarithm of capital N">
&lceil;lg&thinsp;&frac12;<var>N</var>&rceil; + 
&lceil;lg&thinsp;&frac12;<var>N</var>&rceil;
=
2&lceil;lg&thinsp;&frac12;<var>N</var>&rceil;
=
2&lceil;lg&thinsp;<var>N</var>&rceil; - 2</span>,
which is
<span TITLE="order of log capital N">
<var>O</var>(lg&thinsp;<var>N</var>)</span>.
</p>
<p>
So the answer given in the article was off by two.
This doesn't make any difference when calculating
order of magnitude,
but it was interesting that the incorrect calculation
was so close to the correct one.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1313465">
				<div id="div-comment-1313465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">nathan_works</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313465">
			October 23, 2017 at 9:18 am</a>		</div>

		<p>I remember cs304/algorithms (from a long time ago) saying something like 80% of all CPU time is spent sorting.  A  <a href="http://www.cs.cmu.edu/~clo/www/CMU/DataStructures/Lessons/lesson8_1.htm" rel="nofollow">CMU slide</a> says 25%. I wonder how true that still is today.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman odd alt depth-2 parent" id="comment-1313475">
				<div id="div-comment-1313475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313475">
			October 23, 2017 at 11:49 am</a>		</div>

		<p>With multiple cores, and most PCs (at least in work/industrial environments) being on 24/7, I would suggest that 80% of all CPU time is spent in the idle loop.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1313485">
				<div id="div-comment-1313485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Aged .Net Guy</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313485">
			October 23, 2017 at 12:55 pm</a>		</div>

		<p>And 80% of the rest is spent processing or filtering spam or displaying inane or inflammatory videos.</p>
<p>What have we collectively wrought?  Von Neumann would be simultaneously awed with our progress and appalled by our uses of it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1313495">
				<div id="div-comment-1313495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Antonio Rodríguez</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313495">
			October 23, 2017 at 4:12 pm</a>		</div>

		<p>Some time ago I read a joke. A 1950s-era man in a suit in front of a teletype was talking by (wired) phone: &#8220;Will we have inside our pockets machines capable of billions of operations per second? And will we use them to do &#8220;likes&#8221; and &#8220;faves&#8221;, and share pictures of our breakfast with our friends? Really?&#8221;. There&#8217;s nothing more to add.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1313505">
				<div id="div-comment-1313505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fabian Giesen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313505">
			October 23, 2017 at 5:06 pm</a>		</div>

		<p>These figures are from way back in the punchcards-and-tapes era of mainframe computing.</p>
<p>There&#8217;s still a lot of sorting and searching going on (e.g. inside database engines, especially if you also count things like B-tree index maintenance as &#8220;sorting&#8221; in a sense), but computer workloads are a lot more heterogenous now than when the primary commercial usage of computers was accounting or payroll :).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1313497">
				<div id="div-comment-1313497" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Bryce Wagner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313497">
			October 23, 2017 at 4:45 pm</a>		</div>

		<p>A binary search makes sense here, but the the choice of bounds does not.  The search space is size k, so a binary search on it should be O(log2(k)), both the best case and worst case.  We&#8217;re searching for how many of k elements should come from each array.  At one extreme we have k elements coming from array 1.  At the other extreme,  we have k elements coming from array 2.  So we can represent 0 as one extreme, and k as the other extreme.  Your binary search ends up looking something like this pseudocode:</p>
<p>binarysearch(0, k, i =&gt; arrax1[k -i].CompareTo(array2[i])).</p>
<p>And then you can shrink your bounds further so it can&#8217;t go past the end of either array.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1313506">
				<div id="div-comment-1313506" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313506">
			October 23, 2017 at 6:27 pm</a>		</div>

		<p>Excellent!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1313515">
				<div id="div-comment-1313515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.tripleboot.org' rel='external nofollow' class='url'>Henry Skoglund</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313515">
			October 23, 2017 at 7:29 pm</a>		</div>

		<p>Hi, in those cases where k is bigger than half of the total size of array 1 and array 2, it should be faster to instead binary search downwards for (total size) &#8211; k as the new k.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-3" id="comment-1313585">
				<div id="div-comment-1313585" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313585">
			October 24, 2017 at 7:29 am</a>		</div>

		<p>That&#8217;s what Bryce&#8217;s &#8220;shrink your bounds further so it can’t go past the end of either array&#8221; step does. Magic.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1313536">
				<div id="div-comment-1313536" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Simon Clarkstone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313536">
			October 24, 2017 at 3:51 am</a>		</div>

		<p>I was thinking in similar ways; I imagine it as an ascending line and a descending line plotted on the same axes and trying to find where they cross.</p>
<p>Since we want to know which specific element is the answer and hence which array to get it from, we might want to consider the bottom k elements of array1 to be in some sense &#8220;interleaved&#8221; with the reversed bottom k elements of array2, so the index not only specifies at a specific bottom slice of both arrays, but also indicates which of those two slices has the answer at the top.  I haven&#8217;t thought about exactly how this search would work.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1313637">
				<div id="div-comment-1313637" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313637">
			October 24, 2017 at 9:12 am</a>		</div>

		<p>@Simon: Yours is a simple binary search (for zero) on the array representing (the signed difference between the two signals).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1313796">
				<div id="div-comment-1313796" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Markus Falk</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1313796">
			October 25, 2017 at 4:54 am</a>		</div>

		<p>As both lists are already sorted, only k steps are needed to get the result.<br />
1) Start with the first elements of A and B.<br />
2) Choose the smaller one and put it on the new list. If it was from A take the next element from A, otherwise from B.<br />
3) repeat 2) until you have k elements.</p>
<p>This is always O(k)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1314106">
				<div id="div-comment-1314106" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1314106">
			October 26, 2017 at 5:39 pm</a>		</div>

		<p>But O(log k) is better than O(k).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3" id="comment-1314145">
				<div id="div-comment-1314145" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard Wells</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171023-00/?p=97266#comment-1314145">
			October 27, 2017 at 9:33 am</a>		</div>

		<p>It&#8217;s not just better; it&#8217;s exponentially better.  I&#8217;m ashamed to say it took one of my students pointing this out for me to realize it; I had never thought of it that way.<br />
Perhaps a better challenge is to find the kth smallest item in two unsorted arrays in O(n) time.  I know it can be done with a single array, and I&#8217;m pretty sure that solution can be extended to two arrays in a manner similar to this problem, but I have to admit I  haven&#8217;t bothered working out the details.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

