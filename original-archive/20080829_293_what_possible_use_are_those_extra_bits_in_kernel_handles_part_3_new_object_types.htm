<html>
<head>
<title>What possible use are those extra bits in kernel handles? Part 3: New object types</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What possible use are those extra bits in kernel handles? Part 3: New object types</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>August 29, 2008 / year-entry #294</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we saw how those extra bits can be used to multiplex HANDLE with other values. That was a specific case of a more general scenario: Expanding the handle namespace to include things that aren't handles. (You can also view today's example as a generalization of the sentinel value problem, where we need to...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Last time, we saw how
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/08/28/8902173.aspx">
those extra bits can be used to multiplex <code>HANDLE</code>
with other values</a>.
That was a specific case of a more general scenario:
Expanding the handle namespace to include things that aren't handles.
(You can also view today's example as a generalization of the
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/08/27/8898863.aspx">
sentinel value problem</a>,
where we need to generate an arbitrary number of sentinel values dynamically.
Actually, multiplexing <code>HANDLE</code> with <code>HRESULT</code>
is also just another special case: We expanded the handle namespace
to include error codes too.)
</p>
<p>
As I noted in the base article,
the people who are most interested in this sort of thing are people
writing low-level class libraries or wrapping kernel objects inside
a larger framework.
</p>
<p>
Suppose, for example, you are writing a library that manipulates
kernel objects, but you also have private types of objects (say,
a handle to a remote computer)
that you also want this library to be able to manipulate.
One way of doing this is to wrap everything inside some base class
that virtualizes away what type of handle you're working on:
</p>
<pre>
class ExtendedHandle {
public:
  virtual ExtendedHandleType GetType() = 0;
  virtual ~ExtendedHandle() { }
};

class KernelExtendedHandle : public ExtendedHandle {
public:
  static KernelExtendedHandle *Create(...);
  ExtendedHandleType GetType() { return KernelHandle; }
  HANDLE GetHandle() { return Handle; }
private:
  KernelExtendedHandle(...);
  HANDLE Handle;
};

class RemoteComputerExtendedHandle : public ExtendedHandle {
public:
  static RemoteComputerExtendedHandle *Create(...);
  ExtendedHandleType GetType() { return RemoteComputer; }
  LPCTSTR GetComputerName() { ... }
  ... other remote computer methods ...
private:
  RemoteComputerExtendedHandle(...);
  ... stuff necessary for tracking remote computers ...
};
</pre>
<p>
Now, your library spends only 1% of its time manipulating these
private object types;
most of the time, it's dealing with regular kernel handles.
In other words,
99% of your objects are of type <code>KernelExtendedHandle</code>.
What used to be just a <code>HANDLE</code> (4&nbsp;bytes)
is now a <code>EHANDLE</code> that in turn points to an 8-byte
structure
(4&nbsp;bytes for the vtable and
4&nbsp;bytes for the <code>HANDLE</code>).
Your memory requirements have tripled <i>and</i> you added
another level of indirection (costing you locality),
just for that 1% case.
</p>
<p>
But you can do better if you have those extra bits to play with.
Since 99% of the objects you're wrapping are just plain old kernel
handles, you can say that
if the bottom bit is clear, then it's just a kernel handle,
and if the bottom bit is set, then the upper bits tell us what
we are really operating on.
</p>
<pre>
typedef void *EHANDLE;

BOOL IsKernelHandle(EHANDLE Handle)
{
  return (!((INT_PTR)Handle &amp; 1));
}

EHANDLE CreateHandleFromKernelHandle(HANDLE Handle)
{
  // if this assertion fires, then somebody tried to
  // use an invalid kernel handle!
  assert((!((INT_PTR)Handle &amp; 1));
  return (EHANDLE)Handle;
}

EHANDLE CreateHandleFromExtendedHandle(ExtendedHandle Handle)
{
  // if this assertion fires, then somebody allocated
  // a misaligned ExtendedHandle!
  assert(!((INT_PTR)Handle &amp; 1));
  return (EHANDLE)((INT_PTR)Handle | 1));
}

ExtendedHandle *GetExtendedHandle(EHANDLE Handle)
{
  assert(!IsKernelHandle(Handle));
  return (ExtendedHandle*)((INT_PTR)Handle &amp; ~1);
}

ExtendedHandleType GetType(EHANDLE Handle)
{
 if (IsKernelHandle(Handle)) {
   return KernelHandleType;
 } else {
   return GetExtendedHandle(Handle)->GetType();
 }
}

void ECloseHandle(EHANDLE Handle)
{
  if (IsKernelHandle(Handle))
  {
    CloseHandle(GetKernelHandle(Handle));
  } else {
   delete GetExtendedHandle(Handle);
  }
}
</pre>
<p>
Now the cost of a wrapped kernel handle is just 4&nbsp;bytes:
4&nbsp;bytes for the <code>EHANDLE</code>, which also doubles
as the actual kernel handle.
The cost of wrapped pseudo-handles is the same as before
(4&nbsp;bytes for the <code>EHANDLE</code>, plus the size
of the corresponding <code>XxxExtendedHandle</code> class).
We used the trick from last time in order to pack 33&nbsp;bits
into only 32&nbsp;bits:
Since we know that the bottom bit of both kernel <code>HANDLE</code>s
and <code>ExtendedHandle</code> pointers are zero,
we can use it as a discriminator.
</p>
<p>
If you are not confident that your <code>ExtendedHandle</code>
classes all use aligned pointers, you can use a different packing
mechanism by using your own handle translation table:
</p>
<pre>
ExtendedHandle *ExtendedHandleTable;

ExtendedHandle *GetExtendedHandle(EHANDLE Handle)
{
  assert(!IsKernelHandle(Handle));
  return ExtendedHandleTable[(INT_PTR)Handle &gt;&gt; 1];
}
</pre>
<p>
Using this technique, the upper 31&nbsp;bits of an <code>EHANDLE</code>
which refers to an <code>ExtendedHandle</code> is an index into a
privately-managed table of <code>ExtendedHandle</code> objects.
</p>
<p>
This <i>secondary handle table</i> technique
is entirely analogous to
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2008/02/28/7925962.aspx#7946255">
the trick which one Posix library uses</a>
to distinguish "real" process IDs from "virtual" process IDs,
except that they are relying on undocumented behavior because
the bottom bits of process IDs are not guaranteed to be zero!
</p>
<p>
So there you have it, three scenarios where you can take advantage
of knowing that
the bottom bits of kernel handles are always zero.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-663013">
				<div id="div-comment-663013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663013">
			August 29, 2008 at 10:22 am</a>		</div>

		<p>Not a big deal, but near the end of the snippet:</p>
<p>delete GetExtendedHandle();</p>
<p>should be</p>
<p>delete GetExtendedHandle(Handle);</p>
<div class=post>[<i>Fixed, thanks, as well as another place I forgot to give GetExtendedHandle() a parameter. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663023">
				<div id="div-comment-663023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">An Hero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663023">
			August 29, 2008 at 10:40 am</a>		</div>

		<p>So, how much of a performance difference between the two methods do your extensive benchmarks reveal?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663063">
				<div id="div-comment-663063" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eddie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663063">
			August 29, 2008 at 11:05 am</a>		</div>

		<p>@An Hero</p>
<p>Yeah, but he is not talking about today&#8217;s computers, he is talking about yesterday&#8217;s computers that the code would be written for. &nbsp;I am sure benchmarks would reveal that the difference is little.</p>
<p>I think he is simply trying to justify why the design was made the way it was</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663073">
				<div id="div-comment-663073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663073">
			August 29, 2008 at 12:09 pm</a>		</div>

		<p>4 bytes can make a huge difference, even on today&#8217;s computers.</p>
<p>I worked on a system where someone added a single int member to an object without thinking. An easy thing to do since it&#8217;s just 4 bytes and we do that all the time. Problem was, there were a lot of those objects in memory during large operations and that 4 bytes per object pushed the process to the limits of the 2gig memory space for 32-bit apps (this stuff had to run inside Excel so even if we had 64-bit CPUs it wouldn&#8217;t matter).</p>
<p>Okay, you might say that 32-bit is &quot;yesterday&#8217;s machines&quot; but that still isn&#8217;t a reality for the majority of code out there and using up several hundred meg of additional memory is a big deal even on a 64-bit machine.</p>
<p>I don&#8217;t generally like having overloaded values (e.g. the outright wrongness that is atoi() returning zero on failure) but sometimes they are better than the alternative (though atoi() is still wrong!).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663093">
				<div id="div-comment-663093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reginald Wellington III</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663093">
			August 29, 2008 at 12:36 pm</a>		</div>

		<p>&quot;So, how much of a performance difference between the two methods do your extensive benchmarks reveal?&quot;</p>
<p>Uh oh, here comes the &quot;NO PREMATURE OPTIMIZATION!!!!!&quot; crowd. &nbsp;There&#8217;s nothing wrong with cutting memory usage of an object by 1/3 and getting rid of an indirection, especially if the implementation difficulty of the better method is roughly the same.</p>
<p>Not all of us have to profile our code extensively to figure out what&#8217;s better. &nbsp;We just do it the better way the first time.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663103">
				<div id="div-comment-663103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DrkMatter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663103">
			August 29, 2008 at 12:53 pm</a>		</div>

		<p>The important difference between atoi and the current discussion is that 0 is part of the set of results you would expect from atoi, whereas you should never expect an HANDLE with the bottom bits set: it&#8217;s part of the HANDLE definition.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663113">
				<div id="div-comment-663113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">An Hero</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663113">
			August 29, 2008 at 1:11 pm</a>		</div>

		<p>Leo: &nbsp;I don&#8217;t mean this in a derogatory way; I am genuinely curious. &nbsp;What the hell does your Excel plug-in do that it can use up almost the entire process address space? &nbsp;I think I am going to have nightmares tonight.</p>
<p>Reginald: &nbsp;So you&#8217;ve never used a profiler, or even a simple GetTickCount() measurement in your entire life? &nbsp;I guess you must be God. &nbsp;Truly, I am in awe and blessed to be in your presence.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663123">
				<div id="div-comment-663123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Reginald Wellington III</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663123">
			August 29, 2008 at 1:47 pm</a>		</div>

		<p>&quot;Reginald: &nbsp;So you&#8217;ve never used a profiler, or even a simple GetTickCount() measurement in your entire life? &nbsp;I guess you must be God. &nbsp;Truly, I am in awe and blessed to be in your presence.&quot;</p>
<p>And the reward for best melodramatic response to a comment goes to&#8230;. YOU! &nbsp;Bravo! &nbsp;I look forward to more ridiculous conclusions from you in the future.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663133">
				<div id="div-comment-663133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663133">
			August 29, 2008 at 1:56 pm</a>		</div>

		<p>Hero: don&#8217;t confuse the issues. That bit of wisdom about not doing early optimizations has too often been abused in exactly the way Reginald says. And it&#8217;s not only me and Reginald saying this, although I won&#8217;t go googling for references.</p>
<p>Not doing early optimization is not a ticket to write bad code, choose bad data structures, not doing up-front design and choosing your implementation wildly from the get-go. It&#8217;s about not writing obscure and complex code without scientific measurement justifying the added complexity and increased maintenance and debugging costs.</p>
<p>Often, the right and good and simple design is also efficient. You just have to think about your code before writing it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-friedicusrediculoushotmail-com odd alt thread-odd thread-alt depth-1" id="comment-663153">
				<div id="div-comment-663153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Fried' rel='external nofollow' class='url'>Mike Fried</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663153">
			August 29, 2008 at 2:28 pm</a>		</div>

		<p>Hero:</p>
<p>Premature optimization for time can be bad (though it isn&#8217;t always &#8211; inner loops expected to run on millions of items, for example should be optimized, and profilers/perf counters are one tool to help), but premature optimization for space without a time or coding readability impact is usually smart, and Raymond is pointing out a specific instance where you save time as well as space.</p>
<p>There is a space/time tradeoff when you need to redo calculations instead of lookups, but that is mostly to do cacheing of complex calculations and not bit manipulation of the kind Raymond is espousing.</p>
<p>A profiler or even calls to QueryPerformanceCounter (GetTickCount is NOT a high precision timer) is all well and good when measuring cycles, but working set can be a critical factor in performance. Once your program work becomes large enough that cache line fills start happening, you can measure the impact to performance in cache line fills.</p>
<p>The cost of allocating one 4-byte integer is more than the size of the integer. This costs more in 64-bits than in 32-bits. Small improvements here and there can make a huge difference overall.</p>
<p>The overall theme of the message is: Don&#8217;t waste space needlessly &#8211; you have bits, so use them wisely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663163">
				<div id="div-comment-663163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663163">
			August 29, 2008 at 2:29 pm</a>		</div>

		<p>it could be said the memory has a lot more than tripple with the c++ approach.</p>
<p>I haven&#8217;t checked if each object has in fact two vtable pointer, rather than 1, but in any case in order to use that approach, you&#8217;d have to &#8216;new&#8217; the object of the right class and use pointers. &nbsp;So you&#8217;ve got multiple other pointers (probably two or three DWORD_PTR in the heap block around your object). &nbsp;Now if you actually did need to store or associate data with the handle, and if you&#8217;re making a framework/libary it&#8217;s likely, then this may indeed be a needless early optimization. &nbsp;but the article was just an example.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663173">
				<div id="div-comment-663173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663173">
			August 29, 2008 at 2:38 pm</a>		</div>

		<p>to guys above: &nbsp;this who &#8216;memory has doubled&#8217; thing is an over simplication. &nbsp;I understand why you think it&#8217;s a big optimization benefit if you see it that way. &nbsp;</p>
<p>But you need to know how much RAM a handle actually cost. It probably links to structure in the OS, there may be stuff associated with like security descriptor, heap block header/footer, etc. &nbsp;Saving a DWORD in your code may in fact increase the memory per handle of just 5%, not 200%.</p>
<p>Isn&#8217;t it in these comments a few weeks ago that someone was talking about lottery and chances. &nbsp;A statement had been made that you had a 50% chance: either you win or you loose. &nbsp;Same thing here, the problem is more complex.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663053">
				<div id="div-comment-663053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663053">
			August 29, 2008 at 11:02 am</a>		</div>

		<p>I&#8217;ll admit right away that I didn&#8217;t *all* the comments on each part of this serie.</p>
<p>My question is: the fact that the bottom two bits are available is something at the NT-kernel level (in ntdef.h). How can we be sure those bits really are available when we are writing code at the Win32 level?</p>
<p>Some APIs (the GetQueuedCompletionStatus function being the initial example) might use them now. Some APIs or sub-system might use them in the future.</p>
<p>Is this trick reserved for the Windows team?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663203">
				<div id="div-comment-663203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://marksowul.com' rel='external nofollow' class='url'>Mark Sowul</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663203">
			August 29, 2008 at 6:53 pm</a>		</div>

		<p>I propose yet another new tagline for Raymond&#8217;s blog &#8211; &quot;You will never find a more wretched hive of carping and pedantry.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kjkhyperion even thread-even depth-1" id="comment-663223">
				<div id="div-comment-663223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KJK::Hyperion</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663223">
			August 29, 2008 at 11:23 pm</a>		</div>

		<p>Pierre: to the best of my knowledge, the only tagged handles you&#8217;ll ever come across are console handles (console input and console screen buffers), which aren&#8217;t kernel handles in the first place. Win32 also special-cases STD_INPUT_HANDLE, STD_OUTPUT_HANDLE and STD_ERROR_HANDLE, which, zero-extended to a handle with UlongToHandle, count as an implicit GetStdHandle call &#8211; but this is an undocumented feature you most definitely didn&#8217;t hear about from me and should forget for your own good</p>
<p>Curiously enough, handle tags are in fact used by the NT layer in cases where adding a new system call for a single flag was presumably deemed too expensive</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663293">
				<div id="div-comment-663293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sys64738</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663293">
			August 31, 2008 at 6:09 pm</a>		</div>

		<p>Thanks for sharing these low-level optimization techniques. While for business apps all the &quot;managed&quot; stuff (.NET, CLR, Java, etc.) can be good, for low-level stuff like operating systems, device drivers, and in general for high-performance applications these techniques can save lots of memory and increase speed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663333">
				<div id="div-comment-663333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Medinoc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663333">
			September 1, 2008 at 7:22 am</a>		</div>

		<p>@Ulric: You&#8217;re right on one point, adding four bytes to a dynamically allocated structure is usually cheap. Adding a dynamically allocated structure where there weren&#8217;t one in the first place, however, isn&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663343">
				<div id="div-comment-663343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Richard</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663343">
			September 1, 2008 at 8:36 am</a>		</div>

		<p>The thing which has most struck me about this whole series is (apologies to Raymond) /what if two people did this?/.</p>
<p>Suppose some team maintaining some lower-layer code decides they need a flag with their handle, and add one. Further suppose some team maintaining some higher-layer code decides the same thing. Suppose further that the release schedules of the two teams are unrelated (possibly they&#8217;re in different companies altogether?). Result: assertions if you&#8217;re lucky/careful, all kinds of failure if not.</p>
<p>At most one group can own the spare bits here, even if they&#8217;re not used by anyone at the moment. Fortunately, in my experience, the documentation&#8217;s been reasonably good in identifying who that is, but the thought of applications doing this still fills me with dread.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663403">
				<div id="div-comment-663403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663403">
			September 1, 2008 at 6:08 pm</a>		</div>

		<p>&quot;How can we be sure those bits really are available when we are writing code at the Win32 level?&quot;</p>
<p>The two lower bits are documented to be zero.</p>
<p>&quot;Some APIs (the GetQueuedCompletionStatus function being the initial example) might use them now.&quot;</p>
<p>I don&#8217;t care if it uses them internally. I just need to pass a proper HANDLE, and it has to work. If I store data in the two lower bits, I have to mask them (myhandle_with_data &amp; 3), so that it becomes a proper HANDLE, of course!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663643">
				<div id="div-comment-663643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663643">
			September 2, 2008 at 12:54 pm</a>		</div>

		<p>In the old days a true handle was defined as &quot;a pointer to a pointer&quot;, how can any old application still work now that this concept has been broken by the kernel by manipulating the addresses?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-663883">
				<div id="div-comment-663883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663883">
			September 2, 2008 at 5:20 pm</a>		</div>

		<p>SuperKoko: obviously, you didn&#8217;t understand my comment. The fact that the two lower bits are zero is a contract at the NT kernel level. Win32 lives above the NT kernel, it&#8217;s a separate layer, and is not necessarily bound by the promises made by the kernel.</p>
<p>KJK::Hyperion already provided an example of a Win32 call (GetStdHandle) which will return HANDLE with low-bits set. You can&#8217;t &quot;mask them out&quot; when you make Win32 calls later on, it will not work!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-663903">
				<div id="div-comment-663903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-663903">
			September 2, 2008 at 5:44 pm</a>		</div>

		<p>&quot;Win32 lives above the NT kernel, it&#8217;s a separate layer, and is not necessarily bound by the promises made by the kernel.&quot;</p>
<p>I thought it was guaranteed at the Win32 level too, but it looks like I&#8217;m &nbsp;wrong, as the documentation is in ntdef.h. Consequently, Raymond&#8217;s hack mayn&#8217;t be portable to Windows 9x/Me or future non-NT based versions of Windows and should never be used by Win32 programs intending to be portable. Basically, it should never be used.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-664533">
				<div id="div-comment-664533" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Good Point</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20080829-00/?p=21033#comment-664533">
			September 3, 2008 at 5:59 pm</a>		</div>

		<p>I guess Raymond doesn&#8217;t update his mistakes anymore.</p>
<p>As Adam pointed out, ECloseHandle() is wrong. &nbsp;Also I don&#8217;t think CreateHandleFromExtendedHandle() was meant to accept an ExtendedHandle by value.</p>
<div class=post>[<i>I guess Raymond is too busy working (y&#8217;know that thing that he gets paid to do) to update mistakes immediately after they are reported, preferring to wait a few days to let all the corrections settle out. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

