<html>
<head>
<title>Why does CoCreateInstance work even though my thread never called CoInitialize? The curse of the implicit MTA</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why does CoCreateInstance work even though my thread never called CoInitialize? The curse of the implicit MTA</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 19, 2013 / year-entry #107</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">While developing tests, a developer observed erratic behavior with respect to Co­Create­Instance: In my test, I call Co­Create­Instance and it fails with CO_E_NOT­INITIALIZED. Fair enough, because my test forgot to call Co­Initialize. But then I went and checked the production code: In response to a client request, the production code creates a brand new thread...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>While developing tests, a developer observed erratic behavior with respect to <code>Co&shy;Create&shy;Instance</code>:</p>
<blockquote class="q"><p>  In my test, I call <code>Co&shy;Create&shy;Instance</code> and it fails with <code>CO_<wbr>E_<wbr>NOT&shy;INITIALIZED</wbr></wbr></code>. Fair enough, because my test forgot to call <code>Co&shy;Initialize</code>. </p>
<p> But then I went and checked the production code: In response to a client request, the production code creates a brand new thread to service the request. The brand new thread does not call <code>Co&shy;Initialize</code>, yet its call to <code>Co&shy;Create&shy;Instance</code> <i>succeeds</i>. How is that possible? I would expect the production code to also get a <code>CO_<wbr>E_<wbr>NOT&shy;INITIALIZED</wbr></wbr></code> error. </p>
</blockquote>
<p> I was able to debug this psychically, but only because I knew about the <i>implicit MTA</i>. </p>
<p> The <i>implicit MTA</i> is not something I can find very much documentation on, except in the documentation for the <a href="http://msdn.microsoft.com/library/dd542638"> <code>APP&shy;TYPE&shy;QUALIFIER</code> enumeration</a>, where it mentions: </p>
<blockquote class="q"><p> [The <b>APT&shy;TYPE&shy;QUALIFIER_<wbr>IMPLICIT_</wbr>MTA</b>] qualifier is only valid when the <i>pAptType</i> parameter of the <b>Co&shy;Get&shy;Apartment&shy;Type</b> function specifies APT&shy;TYPE_<wbr>MTA on return. A thread has an implicit MTA apartment type if it does not initialize the COM apartment itself, and if another thread has already initialized the MTA in the process. This qualifier informs the API caller that the MTA of the thread is implicitly inherited from other threads and is not initialized directly. </wbr></p>
</blockquote>
<p> Did you get that? If any thread in the process calls <code>Co&shy;Initialize&shy;[Ex]</code> with the <code>COINIT_<wbr>MULTI&shy;THREADED</wbr></code> flag, then that not only initializes the current thread as a member of the multi-threaded apartment, but it also says, "Any thread which has never called <code>Co&shy;Initialize&shy;[Ex]</code> is also part of the multi-threaded apartment." </p>
<p> Further investigation revealed that yes, some other thread in the process called <code>Co&shy;Initialize&shy;Ex(0, COINIT_<wbr>MULTI&shy;THREADED)</wbr></code>, which means that the thread which forgot to call <code>Co&shy;Initialize</code> was implicitly (and probably unwittingly) placed in the MTA. </p>
<p> The danger of this implicit MTA, of course, is that since you didn't know you were getting it, you also don't know if you're going to lose it. If that other thread which called <code>Co&shy;Initialize&shy;Ex(0, COINIT_<wbr>MULTI&shy;THREADED)</wbr></code> finally gets around to calling <code>Co&shy;Un&shy;initialize</code>, then it will tear down the MTA, and your thread will have the MTA rug ripped out from under it. </p>
<p> Moral of the story: If you want the MTA, make sure you ask for it explicitly. And if you forget, you may end up in the implicit MTA, whether you wanted it or not. (Therefore, conversely, if you <i>don't</i> want the MTA, make sure to deny it explicitly!) </p>
<p> <b>Exercise</b>: Use your psychic debugging skills to diagnose the following problem. "When my code calls <code>Get&shy;Open&shy;File&shy;Name</code>, it behaves erratically. I saw a Knowledge Base article that says that this can happen <a href="http://support.microsoft.com/kb/287087"> if I initialize my thread in the multi-threaded apartment</a>, but my thread does not do that." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1051643">
				<div id="div-comment-1051643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051643">
			April 19, 2013 at 8:06 am</a>		</div>

		<p>Ewww.</p>
<p>GetOpenFileName should work without the caller initializing COM. It happens to be invokable from higher languages that cannot invoke COM.</p>
<p>Picking up the implicit MTA in that case is very bad. Worse, if it came from an AppInit DLL.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051663">
				<div id="div-comment-1051663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RPC_E_CHANGED_MODE</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051663">
			April 19, 2013 at 8:31 am</a>		</div>

		<p>I&#39;m pretty sure you can&#39;t initialise apartment threaded once you&#39;ve initialised (or been initialised) multithreaded. Also, prepare for fun if your threads still call CoUninitialize after a failed CoInit.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1051673">
				<div id="div-comment-1051673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Peter</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051673">
			April 19, 2013 at 8:38 am</a>		</div>

		<p>Raymond, does it matter when CoInitialize is called in relation to thread start? &nbsp;That is, if thread 1 calls CoInitializeEx(COINIT_MULTITHREADED) and thread 2 has already started, does thread 2 suddenly become part of the multithreaded apartment?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051683">
				<div id="div-comment-1051683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051683">
			April 19, 2013 at 9:36 am</a>		</div>

		<p>Peter: You can probably answer the question yourself by thinking about how it could possibly work.</p>
<p>In order for the thread start order to matter, either starting a thread would have to execute some code check for an existing MTA and store that information somewhere, or the CoInitializeEx would have to store the time it created an MTA to be compared with the thread start time.</p>
<p>In order for thread start order to not matter, the object creation code can simply check to see if there is currently an MTA.</p>
<p>Hopefully the answer is obvious given the options.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1051653">
				<div id="div-comment-1051653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051653">
			April 19, 2013 at 8:07 am</a>		</div>

		<p>Well, your thread doesn&#39;t do that *explicitly*, but through the miracle of the implicit MTA created by another thread it&#39;s now part of an MTA nevertheless. To fix the problem, explicitly call CoInitializeEx() with COINIT_APARTMENTTHREADED on all threads that need to call shell functions, even if they do not otherwise use COM.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051743">
				<div id="div-comment-1051743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051743">
			April 19, 2013 at 4:31 pm</a>		</div>

		<p>@RPC_E_CHANGED_MODE:</p>
<p>That is only true for previous calls to CoInitialize(Ex) (referred to as CoInit from now on).</p>
<p>The implicit MTA would work along the lines of if no call to CoInit has taken place, then the creation of the first object would in essence call CoInit and mark the thread as part of the MTA. This is different from a thread that has never called CoInit or created any objects before calling CoInit to initialise the thread as an STA and failing. In the latter case, the CoInit would succeed and set the thread to an STA with no issues because COM has yet to be initialised on that thread. It really has to be this way around, otherwise there is potential for a lot of breakage, especially when using things like the common dialogs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1051763">
				<div id="div-comment-1051763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Wilson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051763">
			April 19, 2013 at 6:35 pm</a>		</div>

		<p>The fact that you need to even know about COM in order to properly use the common dialogs library (a library that has existed since before COM did) is stupid IMO.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1051773">
				<div id="div-comment-1051773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@Crescens2k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051773">
			April 19, 2013 at 8:36 pm</a>		</div>

		<p>Ah, of course: you&#39;re right. I&#39;ve never explicitly mixed threading models in the same app, so forgot about the scenario. Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1051853">
				<div id="div-comment-1051853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051853">
			April 22, 2013 at 3:51 am</a>		</div>

		<p>For .NET related note: WinForm/Console Projects created under VS2002 or 2003 always have [STAThread] attribute predefined in main() method (even after conversion to .NET v2 or above, don&#39;t know whether the conversion ignored this attribute or someone added it back later).</p>
<p>VS2005 or later have this removed from the default project template and use MTA as default.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mike-dimmick odd alt thread-odd thread-alt depth-1" id="comment-1051863">
				<div id="div-comment-1051863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1051863">
			April 22, 2013 at 4:50 am</a>		</div>

		<p>@cheong00: Windows Forms has thread affinity and must initialize the main thread in an STA. I&#39;ve just checked: VS2008 (2.0 and 3.5), VS2010 (4.0) and VS2012 (4.5) C# Windows Forms projects all default to specifying [STAThread], as they should. I no longer have VS2005 installed.</p>
<p>Console projects do not default to [STAThread] in any version, so far as I&#39;m aware, though I haven&#39;t checked.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1052023">
				<div id="div-comment-1052023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1052023">
			April 22, 2013 at 7:43 pm</a>		</div>

		<p>I see. It makes sense.</p>
<p>Not sure why the projects I&#39;m working on removed this attribute, though.</p>
<p>Btw, it&#39;s true that in .NET v2 or later it&#39;s defaulted to MTA if STAThread is not specified (from MSDN documentation for STAThreadAttribute).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1052053">
				<div id="div-comment-1052053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Stewart</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130419-00/?p=4613#comment-1052053">
			April 23, 2013 at 3:25 am</a>		</div>

		<p>@Jonathan &#8211; You don&#39;t need to care about COM to use GetOpenFileName. If your app does not use COM at all, then GetOpenFileName will take care of things for you. The problem arises when your app already cares about COM, and has a thread which has already initialized the MTA. Then bad things will happen. Of course you may not know about this thread, which is where the risk comes in. In my opinion it is good practise for any thread which shows UI to always initialize itself an STA before creating any UI. That way you&#39;re safe since you should only be calling GetOpenFileName on a UI thread anyway. As has already been said, WinForms does this already in default apps.</p>
<p>@Mike &#8211; Console projects cannot initialize to STAThread by default, because console applications do not typically pump messages on their main thread, and it is illegal to have an STA thread which does not pump messages. If they defaulted to STA they&#39;d be broken.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

