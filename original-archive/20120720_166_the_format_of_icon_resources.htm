<html>
<head>
<title>The format of icon resources</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The format of icon resources</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 20, 2012 / year-entry #167</td></tr>
<tr><td><b>Tags:</b></td><td>other</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">It's been a long time since my last entry in the continuing sporadic series on resources formats. Today we'll look at icons. Recall that an icon file consists of two parts, an icon directory (consisting of an icon directory header followed by a number of icon directory entries), and then the icon images themselves. When...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
It's been a long time since my last entry in the continuing
sporadic series on resources formats.
Today we'll look at icons.
</p>
<p>
Recall that an icon file
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2010/10/18/10077133.aspx">
consists of two parts</a>,
an <i>icon directory</i>
(consisting of an icon directory header followed by a number of
icon directory entries),
and then the icon images themselves.
</p>
<p>
When an icon is stored in resources, each of those parts gets its own
resource entry.
</p>
<p>
The icon directory (the header plus the directory entries)
is stored as a resource of type
<code>RT_GROUP_ICON</code>.
The format of the icon directory in resources is slightly different
from the format on disk:
</p>
<pre>
typedef struct GRPICONDIR
{
    WORD idReserved;
    WORD idType;
    WORD idCount;
    GRPICONDIRENTRY idEntries[];
} GRPICONDIR;

typedef struct GRPICONDIRENTRY
{
    BYTE  bWidth;
    BYTE  bHeight;
    BYTE  bColorCount;
    BYTE  bReserved;
    WORD  wPlanes;
    WORD  wBitCount;
    DWORD dwBytesInRes;
    WORD  nId;
} GRPICONDIRENTRY;
</pre>
<p>
All the members mean the same thing as in the corresponding
<code>ICONDIR</code> and <code>IconDirectoryEntry</code>
structures, except for that mysterious <code>nId</code>
(which replaces the <code>dwImageOffset</code> from the
<code>IconDirectoryEntry</code>).
To unravel that mystery, we need to look at where
the rest of the icon file went.
</p>
<p>
In the icon file format,
the <code>dwImageOffset</code> represented the location
of the icon bitmap within the file.
When the icon file is converted to a resource,
each icon bitmap is split off into its own resource
of type <code>RT_ICON</code>.
The resource compiler auto-assigns the resource IDs,
and it is those resource IDs that are stored in the
<code>nId</code> member.
</p>
<p>
For example, suppose you have an icon file with four
images.
In your resource file you say
</p>
<pre>
42 ICON myicon.ico
</pre>
<p>
The resource compiler breaks the file into five resources:
</p>
<table BORDER=1 CELLPADDING=3 BORDERCOLOR=black
    STYLE="border-collapse: collapse">
<tr>
<th>Resource type</th>
<th>Resource Id</th>
<th>Contents</th>
</tr>
<tr>
<td><code>RT_GROUP_ICON</code></td>
<td ALIGN=right>42</td>
<td><code>GRPICONDIR.idCount = 4</code><br>
        <code>GRPICONDIRENTRY[0].nId = 124</code><br>
        <code>GRPICONDIRENTRY[1].nId = 125</code><br>
        <code>GRPICONDIRENTRY[2].nId = 126</code><br>
        <code>GRPICONDIRENTRY[3].nId = 127</code>
    </td>
</tr>
<tr>
<td><code>RT_ICON</code></td>
<td ALIGN=right>124</td>
<td>Pixels for image 0</td>
</tr>
<tr>
<td><code>RT_ICON</code></td>
<td ALIGN=right>125</td>
<td>Pixels for image 1</td>
</tr>
<tr>
<td><code>RT_ICON</code></td>
<td ALIGN=right>126</td>
<td>Pixels for image 2</td>
</tr>
<tr>
<td><code>RT_ICON</code></td>
<td ALIGN=right>127</td>
<td>Pixels for image 3</td>
</tr>
</table>
<p>
Why does Windows break the resources into five pieces instead of just
dumping them all inside one giant resource?
</p>
<p>
Recall
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2004/02/02/66159.aspx">
how 16-bit Windows managed resources</a>.
Back in 16-bit Windows, a resource was a handle into a table,
and obtaining the bits of the resource involved allocating memory and
loading it from the disk.
Recall also that 16-bit Windows operated under tight memory constraints,
so you didn't want to load anything into memory unless you really
needed it.
</p>
<p>
Therefore, looking up an icon in 16-bit Windows went like this:
</p>
<ul>
<li>Find the icon group resource, load it, and lock it.
<li>Study it to decide which icon image is best.
<li>Unlock and free the icon group resource since we don't need
    it any more.</p>
<li>Find and load the icon image resource for the one you chose.
<li>Return that handle as the icon handle.
</ul>
<p>
Observe that once we decide which icon image we want,
the only memory consumed is the memory for that specific image.
We never load the images we don't need.
</p>
<p>
Drawing an icon went like this:</p>
<ul>
<li>Lock the icon handle to get access to the pixels.
<li>Draw the icon.
<li>Unlock the icon handle.
</ul>
<p>
Since icons were usually marked discardable,
they could get evicted from memory if necessary,
and they would get reloaded the next time you tried to draw them.
</p>
<p>
Although Win32 does not follow the same memory management model
for resources as 16-bit Windows,
it preserved the programming model
(find, load, lock)
to make it easier to port programs from 16-bit Windows to 32-bit Windows.
And in order not to break code which loaded icons from resources directly
(say, because they wanted to replace the icon selection algorithm),
the breakdown of an icon file into a directory + images was also preserved.
</p>
<p>
You now know enough to solve this customer's problem:
</p>
<blockquote CLASS=q>
<p>
I have an icon in a resource DLL, and I need to pass its raw data
to another component.
However, the number of bytes reported by
<code>Size&shy;Of&shy;Resource</code> is only 48 instead of 5KB
which is the amount actually stored in the resource DLL.
I triple-checked the resource DLL and I'm sure I'm looking at the
right icon resource.
</p>
<p>
Here is my code:
</p>
<pre>
HRSRC hrsrcIcon = FindResource(hResources,
                     MAKEINTRESOURCE(IDI_MY_ICON), RT_GROUP_ICON);
DWORD cbIcon = SizeofResource(hResources, hrsrcIcon);
HGLOBAL hIcon = LoadResource(hResources, hrsrcIcon);
void *lpIcon = LockResource(hIcon);
</pre>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-999633">
				<div id="div-comment-999633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999633">
			July 20, 2012 at 7:13 am</a>		</div>

		<p>This person is getting the icon directory header and entries only. Which happens to just contain 3 enteries if I calculated that correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-999643">
				<div id="div-comment-999643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999643">
			July 20, 2012 at 7:14 am</a>		</div>

		<p>Err, forgot to mention, to get the icon itself, the customer would need to search for the RT_ICON resource type, not RT_GROUP_ICON.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-999653">
				<div id="div-comment-999653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/chazste_4000_yahoo.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>chazste@yahoo.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999653">
			July 20, 2012 at 8:16 am</a>		</div>

		<p>So I am going to vote for a future article on the history of &quot;the icon selection algorithm&quot;. I know that there is some amount of unofficial stuff on-line that suggests that the order of the entries in the icon directory matters for certain version of Windows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-999663">
				<div id="div-comment-999663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken Hagan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999663">
			July 20, 2012 at 9:01 am</a>		</div>

		<p>@Charles: I can interpret your suggestion in two ways.</p>
<p>Either different versions of Windows make different-but-equally-legitimate choices depending on the order of entries, or some versions of Windows make a definitely-bad choice unless the order is such-and-such. Since I&#39;ve never knowingly used a tool that let me control the order of entries, the latter possibility might be something worth knowing about.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-999683">
				<div id="div-comment-999683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/johnstonj_4000_inn_2D00_soft.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>johnstonj@inn-soft.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999683">
			July 20, 2012 at 10:44 am</a>		</div>

		<p>I guess he&#39;d need to reconstruct the icon file format by hand by gathering all the different pieces together?</p>
<p>Or better, don&#39;t store the resource as an ICON, so that the compiler doesn&#39;t split it apart?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-999693">
				<div id="div-comment-999693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999693">
			July 20, 2012 at 11:12 am</a>		</div>

		<p>@Charles &amp; Ken</p>
<p>This article (<a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms997538.aspx" rel="nofollow">msdn.microsoft.com/&#8230;/ms997538.aspx</a>) says that Windows chooses the application icon thus:</p>
<p>&quot;Windows NT simply chooses the first resource listed in the application&#39;s RC script. On the other hand, Windows 95&#39;s algorithm is to choose the alphabetically first named group icon if one exists. If one such group resource does not exist, Windows chooses the icon with the numerically lowest identifier.&quot;</p>
<p>Compiled resources are split into named and numbered resources (names first), and each category is sorted by the resource identifier. &nbsp;So you can&#39;t normally control the order of resources, other than by changing the IDs.</p>
<p>Which suggests that Windows 9x was looking at RT_GROUP_ICON resources, which are ordered by ID, and Windows NT was (is) looking at RT_ICON resources, whose IDs can match the order of icons in the RC file because they are auto-generated.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-999703">
				<div id="div-comment-999703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Troy Martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999703">
			July 21, 2012 at 3:12 am</a>		</div>

		<p>Raymond, a comment on the post that is the second link you included in today&#39;s post links to a Microsoft Support document (<a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;282423&amp;Product=winxp" target="_new" rel="nofollow">support.microsoft.com/default.aspx</a>) that says &quot;No 16-bit code can run, except for recognized InstallShield and Acme installers (these are hard-coded in Wow64 to allow them to work).&quot; How does WoW64 support these legacy fragments of code in a processor mode that does not support v86 mode?</p>
<div class="post">[<i>Hm, I thought it was obvious. I guess not&#8230; (Hint: Why does it have to be &quot;recognized&quot;?) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-999743">
				<div id="div-comment-999743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Troy Martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999743">
			July 21, 2012 at 1:23 pm</a>		</div>

		<blockquote><p>
  [Hm, I thought it was obvious. I guess not&#8230; (Hint: Why does it have to be &quot;recognized&quot;?) -Raymond]
</p></blockquote>
<p>My train of thought leads me to the idea that WoW64 extracts the contents of a &quot;recognized&quot; installer and puts up its own install method or translates it to a newer InstallShield platform. I&#39;m probably wrong, though.</p>
<p>&#8230;ooor there&#39;s a software emulator or translator built into Windows for the specific purpose of executing enough BIOS crud to get through a tried-and-true stable installer. That would be nifty.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-999753">
				<div id="div-comment-999753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cherry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999753">
			July 21, 2012 at 1:32 pm</a>		</div>

		<p>&lt;a href=&quot;<a rel="nofollow" target="_new" href="http://my.safaribooksonline.com/book/-/9780735671294/wow64/id3362927#X2ludGVybmFsX0ZsYXNoUmVhZGVyP3htbGlkPTk3ODA3MzU2NzEyOTQvaWQzMzYyOTI3&quot;&gt;This" rel="nofollow">my.safaribooksonline.com/&#8230;/id3362927</a> book&lt;/a&gt; says:</p>
<p>&lt;blockquote&gt;&quot;Whenever a 16-bit process is about to be created using the CreateProcess() API, Ntvdm64.dll is loaded and control is transferred to it to inspect whether the 16-bit executable is one of the supported installers. If it is, another CreateProcess is issued to launch a 32-bit version of the installer with the same command-line arguments.&quot;&lt;/blockquote&gt;</p>
<p>I assume these installers were not packed at all, instead they had an executable file and some data files, so all Windows needs to do is call the 32-bit version of the installer (which is probably shipped with Windows) so that the 32-bit installer may install the data files originally belonging to the 16-bit installer.</p>
<p>Thus, the wording &quot;No 16-bit code can run, except for&#8230;&quot; is technically incorrect, since no 16-bit code will ever be actually running.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-999763">
				<div id="div-comment-999763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cherry</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999763">
			July 21, 2012 at 1:34 pm</a>		</div>

		<p>Sorry, I assumed a limited HTML set was allowed.</p>
<p><a rel="nofollow" target="_new" href="http://my.safaribooksonline.com/book/-/9780735671294/wow64/id3362927#X2ludGVybmFsX0ZsYXNoUmVhZGVyP3htbGlkPTk3ODA3MzU2NzEyOTQvaWQzMzYyOTI3" rel="nofollow">my.safaribooksonline.com/&#8230;/id3362927</a></p>
<p>This is the complete link.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-999773">
				<div id="div-comment-999773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Troy Martin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999773">
			July 21, 2012 at 1:44 pm</a>		</div>

		<p>After a bit of poking around, I found that in driverland you can poke HAL.DLL to emulate a real mode BIOS environment (at least, on Windows XP x64): <a rel="nofollow" target="_new" href="http://x86asm.net/articles/calling-bios-from-driver-in-windows-xp-x64/" rel="nofollow">x86asm.net/&#8230;/calling-bios-from-driver-in-windows-xp-x64</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-999793">
				<div id="div-comment-999793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120720-00/?p=7083#comment-999793">
			July 22, 2012 at 11:13 pm</a>		</div>

		<p>I&#39;ve never understood why (32/64-bit) windows is trying to hide the bitmap data. If I didn&#39;t know better, I would have guessed it was because it was only on disk and/or in graphics memory. But that&#39;s not true, it has never been true. It&#39;s allocated in the process, gimme my data!</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

