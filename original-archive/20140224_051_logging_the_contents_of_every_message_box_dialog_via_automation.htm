<html>
<head>
<title>Logging the contents of every message box dialog via automation</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Logging the contents of every message box dialog via automation</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 24, 2014 / year-entry #52</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program logs the contents of every message box dialog, or anything that vaguely resembles a message box dialog. (Since there's no way for sure to know whether a dialog box is a message box or not.) using System.Windows.Automation; class Program { [System.STAThread] public static void Main(string[] args) { Automation.AddAutomationEventHandler( WindowPattern.WindowOpenedEvent, AutomationElement.RootElement, TreeScope.Descendants, (sender,...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program logs the contents of every message box dialog,
or anything that vaguely resembles a message box dialog.
(Since there's no way for sure to know whether a dialog box is
a message box or not.)
</p>
<pre>
using System.Windows.Automation;

class Program
{
 [System.STAThread]
 public static void Main(string[] args)
 {
  Automation.AddAutomationEventHandler(
   WindowPattern.WindowOpenedEvent,
   AutomationElement.RootElement,
   TreeScope.<font COLOR=blue>Descendants</font>,
   (sender, e) => {
    var element = sender as AutomationElement;
    <font COLOR=blue>if (element.GetCurrentPropertyValue(
     AutomationElement.ClassNameProperty) as string != "#32770") {
     return;
    }

    var text = element.FindFirst(TreeScope.Children,
     new PropertyCondition(AutomationElement.AutomationIdProperty, "65535"));
    if (text != null) {
     System.Console.WriteLine(text.Current.Name);
    }</font>
   });
  System.Console.ReadLine();
  Automation.RemoveAllEventHandlers();
 }
}
</pre>
<p>
This is the same pattern as the program we wrote last week,
but with different guts when the window opens.
</p>
<p>
This time, we see if the class name is
<code>#32770</code>,
which UI Spy tells us is the class name for dialog boxes.
(That this is the numerical value of
<code>WC_<wbr>DIALOG</code> is no coincidence.)
</p>
<p>
If we have a dialog,
then we look for a child element whose automation ID
is <code>65535</code>,
which UI Spy tells us is the automation ID for the text
inside a message box dialog.
(That
the traditional control ID for static controls is <code>-1</code>
and 65535 is the
the numerical value of
<code>(WORD)-1</code>,
 is no coincidence.)
</p>
<p>
If so, then we print the text.
</p>
<p>
If we were cleverer, we could also confirm that the only buttons
are OK, Cancel, and so on.
Otherwise, we can get faked out by other dialog boxes that contain
static text.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1109003">
				<div id="div-comment-1109003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan Bugglin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109003">
			February 24, 2014 at 7:55 am</a>		</div>

		<p>A little known feature is that you can press CTRL+C to copy the text of dialog boxes.</p>
<p>Obviously it&#39;s bad form to hijack the clipboard and simulate key presses, so I wonder if there&#39;s a programmatic way to get the text that would be copied&#8230; or if you would just end up with approximately this little program anyway.</p>
<div class="post">[<em>It would basically be this program, if you also added code to capture the button labels. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1109043">
				<div id="div-comment-1109043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109043">
			February 24, 2014 at 9:54 am</a>		</div>

		<p>We use the UIAutomation Framework very heavily in our in house wrapper around it. I&#39;m always happy to see Raymond give some input on it (the UIAutomation Library) we have a very similar function internally.</p>
<p>One thing to be on the lookout for is enumerating from the AutomationElement.RootElement and asking for Descendants is usually going to result in you having a bad time if you&#39;ve got a complex tree (it is remarked upon in the MSDN docs). Obviously this is a Toy program/Little Program so no real qualms there, just be on the look out for it.</p>
<p>Only tangentially related does anyone know if these guys have their own blog? I was able to find the MSDN forum and they are pretty responsive there, but it&#39;d be neat to know if they had a blog that showed best practices? We&#39;ve run into issues were we consume 100% CPU in the AutomationElement.FindFirst() call. The core problem I believe is that we rely on heavily on polling and the assumption that FindFirst() is reasonably cheap (bad bad bad assumption). I noticed on Raymond&#39;s last blog post that he was able to register for Window events (which is usually the preferred solution), but have not researched it further.</p>
<p>Long winded post/not the right forum, etc the tl;dr; I like seeing these programs as it exposes me to more real usage of the API, where can I find more?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1109053">
				<div id="div-comment-1109053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109053">
			February 24, 2014 at 1:52 pm</a>		</div>

		<p>@John: there&#39;s <a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/winuiautomation/">blogs.msdn.com/&#8230;/winuiautomation</a> but it&#39;s fairly low-traffic. The last post was in October.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1109083">
				<div id="div-comment-1109083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109083">
			February 24, 2014 at 10:23 pm</a>		</div>

		<p>I imagine that this wouldn&#39;t work on crash dialog message boxes, because those are owned by csrss.exe.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1109103">
				<div id="div-comment-1109103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">But...</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109103">
			February 24, 2014 at 11:26 pm</a>		</div>

		<p>Message boxes can have more than OK/Cancel &#8211; there are several buttons they can display &#8211; so testing for buttons would need to be a little more sophisticated. And there&#39;s the optional icon.</p>
<p>Still, a little work, and it could be closer to correct :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1109113">
				<div id="div-comment-1109113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109113">
			February 25, 2014 at 4:07 am</a>		</div>

		<p>Just send the window a WM_COPY message. Works in Windows XP at least.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1109123">
				<div id="div-comment-1109123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109123">
			February 25, 2014 at 6:38 am</a>		</div>

		<p>How does this method compare with SetWinEventHook, as described here:</p>
<p><a rel="nofollow" target="_new" href="http://blogs.msdn.com/b/oldnewthing/archive/2013/03/25/10404940.aspx">blogs.msdn.com/&#8230;/10404940.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1109133">
				<div id="div-comment-1109133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IInspectable</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109133">
			February 25, 2014 at 6:52 am</a>		</div>

		<p>@Neil: The clipboard belongs to the user. You have no business destroying it for them. Plus, this constitutes a Global Solution to a Local Problem™.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1109143">
				<div id="div-comment-1109143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">parkrrrr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140224-00/?p=1683#comment-1109143">
			February 25, 2014 at 7:10 am</a>		</div>

		<p>@Michael: SetWinEventHook is part of the Active Accessibility API (MSAA). UI Automation was designed to replace MSAA, ideally fixing many of the shortcomings of the older framework along the way.</p>
<p>Practically speaking, anything that implements MSAA is proxied to UIA. The reverse is also generally true, but only to the extent that the conversion is possible &#8211; UIA has much richer information than MSAA.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

