<html>
<head>
<title>What happens if I don't paint when I get a WM_PAINT message?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What happens if I don&#8217;t paint when I get a WM_PAINT message?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 3, 2014 / year-entry #281</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Suppose your window procedure doesn't paint when it gets a WM_PAINT message. What happens? It depends on how you don't paint. If you have an explicit handler for the WM_PAINT message that does nothing but return without painting, then the window manager will turn around and put a new WM_PAINT message in your queue. "And...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Suppose your window procedure doesn't paint when it gets a
<code>WM_<wbr>PAINT</code> message.
What happens?
</p>
<p>
It depends on how you don't paint.
</p>
<p>
If you have an explicit handler for the
<code>WM_<wbr>PAINT</code> message
that does nothing but return without painting,
then the window manager will turn around and
put a new
<code>WM_<wbr>PAINT</code> message in your queue.
"And try harder this time."
Remember that the rules for the
<code>WM_<wbr>PAINT</code> message are that the window manager will
generate a
<code>WM_<wbr>PAINT</code> message
for any window that has a dirty region.
If you fail to remove the dirty region in your
<code>WM_<wbr>PAINT</code> message handler,
well, then the rules state that you get another
<code>WM_<wbr>PAINT</code> message.
(The most common way of clearing the dirty region is to call
<code>Begin&shy;Paint</code>,
but there are other less common ways,
like
<code>Validate&shy;Rect</code> or
<code>Redraw&shy;Window</code> with the <code>RDW_<wbr>VALIDATE</code> flag.)
</p>
<p>
The other case is that you
simply don't have a <code>WM_<wbr>PAINT</code> handler
and let the message fall through to
<code>Def&shy;Window&shy;Proc</code>.
In that case,
<code>Def&shy;Window&shy;Proc</code>
will do a blank paint for you.
In other words,
<code>Def&shy;Window&shy;Proc</code> contains
the logical equivalent of
</p>
<pre>
case WM_PAINT:
 {
  PAINTSTRUCT ps;
  if (BeginPaint(hwnd, &amp;ps))
   EndPaint(hwnd, &amp;ps);
 }
 return 0;
</pre>
<p>
In the case where you pass the
<code>WM_<wbr>PAINT</code> to
<code>Def&shy;Window&shy;Proc</code>,
the dirty region is cleared because
<code>Def&shy;Window&shy;Proc</code>
will call
<code>Begin&shy;Paint</code> for you.
</p>
<p>
There are some quirks in the handling of the
<code>WM_<wbr>PAINT</code> message by the
<code>Def&shy;Window&shy;Proc</code> function
to handle various application compatibility cases,
but the above is the basic idea.
</p>
<p>
To avoid tripping over the weird application compatibility
cases, decide up front how you want to deal with
<code>WM_<wbr>PAINT</code> messages delivered to your window
procedure.
</p>
<ul>
<li>Handle them completely
    by calling
    <code>Begin&shy;Paint</code> and
    <code>End&shy;Paint</code>,
    then returning 0.
    (Do not pass the message to
    <code>Def&shy;Window&shy;Proc</code>.)</p>
<li>Pass them all to
    <code>Def&shy;Window&shy;Proc</code>,
    and let it do the
    <code>Begin&shy;Paint</code> and
    <code>End&shy;Paint</code>.
</ul>
<p>
Don't try playing fancy games like
"Oh, I'm going to call
<code>Begin&shy;Paint</code> and
<code>End&shy;Paint</code>,
but sometimes I'm <i>also</i> going to pass the message to
<code>Def&shy;Window&shy;Proc</code> afterwards."
Just pick one plan and stick to it.
It's a lot simpler for everybody that way.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1164893">
				<div id="div-comment-1164893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Amin Mohammadi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1164893">
			December 3, 2014 at 7:03 am</a>		</div>

		<p>always i wonder can we corrupt GDI and prevent it from paint client area?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1164903">
				<div id="div-comment-1164903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1164903">
			December 3, 2014 at 7:15 am</a>		</div>

		<p>Well, I suppose you should get a DC for the desktop window and scribble on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1164913">
				<div id="div-comment-1164913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xv8</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1164913">
			December 3, 2014 at 7:25 am</a>		</div>

		<p>I thought WM_PAINT was where you put all your (important, blocking) logic, not for painting anyway?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1164923">
				<div id="div-comment-1164923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1164923">
			December 3, 2014 at 7:30 am</a>		</div>

		<p>For the record, the BeginPaint function will send the WM_ERASEBKGND message that DefWindowProc handles by using the specified BG erasing brush for the window class (which may or may not actually do have any effect) to clear the area. But only if the region was marked for erasing while asking for invalidation. It isn&#39;t defined if the region is marked for erasing when it&#39;s &quot;the system&quot; that marks for invalidation.</p>
<p>I hope that clears up any confusion of what happens to the visual result if you try and skimp on the processing of WM_PAINT messages.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1164933">
				<div id="div-comment-1164933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1164933">
			December 3, 2014 at 8:10 am</a>		</div>

		<p>Slightly off topic: I assume this means the correct way of handling painting with an async background thread is to have the main thread call ::ValidateRect() and trigger the extra thread to run a render / update pass as needed, which then updates the screen using a cached copy of the invalid region + whatever has become invalid in the meanwhile?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1164973">
				<div id="div-comment-1164973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">AsmGuru62</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1164973">
			December 3, 2014 at 9:21 am</a>		</div>

		<p>I am not sure if painting on a thread is a good idea.</p>
<p>I always thought that a thread should just update the data (in file or memory) and then post the redraw (InvalidateRect/UpdateWindow), but main thread should actually draw in response to WM_PAINT.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1164983">
				<div id="div-comment-1164983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1164983">
			December 3, 2014 at 9:33 am</a>		</div>

		<p>@SI</p>
<p>I might be (read: probably am) misunderstanding you, and this may not be a good solution, but here&#39;s my two cents.</p>
<p>Ideally, all the information needed to paint the screen is obtained from some source (pointer to a struct?) that can be updated atomically. The main/GUI/event thread just grabs the info (with an acquire/consume barrier) from that whenever it needs to paint. If the data hasn&#39;t changed since the last update, it&#39;s not stale, if it has, it shouldn&#39;t be for long. When the background thread(s) has updated the data, it (with a release barrier) tells the main thread in some way (e.g. PostMessage a MY_UPDATE_MSG (I don&#39;t know how PostMessage interacts with memory ordering)) to update.</p>
<p>Obviously, you&#39;ll need a way to handle disposing of the old data, and there&#39;re probably many other problems, but that&#39;s the way that occured to me. (And yes, I have done something like this in Java/Swing. SwingWorker is unbelievably helpful.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165013">
				<div id="div-comment-1165013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doynax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165013">
			December 3, 2014 at 10:54 am</a>		</div>

		<p>SI: Seems a bit dodgy to me.. How about running a recursive message loop between BeginPaint/EndPaint (filtering with QS_PAINT/PM_QS_PAINT) while waiting for the rendering thread to signal completion?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-matteo even thread-even depth-1" id="comment-1165033">
				<div id="div-comment-1165033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Matteo+Italia' rel='external nofollow' class='url'>Matteo Italia</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165033">
			December 3, 2014 at 12:25 pm</a>		</div>

		<p>@Xv8: don&#39;t even mention that. We spent days tracking bugs in an old win32 applications written by someone who didn&#39;t have a clue about handling WM_PAINT &amp; co. I have yet to see a wndproc of this guy which does things normally. I&#39;ve seen all kind of antipatterns:</p>
<p>&#8211; good old &quot;update all the fundamental data structures of the program in WM_PAINT&quot;; the window stays covered the whole time? Business-logic objects don&#39;t get created.</p>
<p>&#8211; initializing data structures related to click handling in WM_PAINT; a WM_LBUTTONDOWN happens to arrive before the first WM_PAINT? Too bad, access violation.</p>
<p>&#8211; initializing half of the data structures in WM_ERASEBACKGROUND, fixing up some others in WM_PAINT, and the rest in a WM_TIMER;</p>
<p>&#8211; setting up an off-screen bitmap in WM_ERASEBACKGROUND, painting some of them in a timer, finishing in WM_PAINT and then doing a BitBlt; the first WM_TIMER arrives before WM_ERASEBACKGROUND? Access violation. Someone does InvalidateRect with last parameter FALSE? Access violation.</p>
<p>&#8211; marking the window as &quot;to repaint&quot; in some cases by killing (delete/set to NULL) said bitmap, in other cases by setting a flag in the same data structure; someone tries to set this flag between the delete and the WM_ERASEBACKGROUND? Access violation.</p>
<p>There are surely some others which I&#39;m missing, but you got the idea.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165053">
				<div id="div-comment-1165053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165053">
			December 3, 2014 at 5:10 pm</a>		</div>

		<p>Interesting. I always thought it is EndPaint that validates the window. That would make more sense ;-)</p>
<p>And that WM_ERASEBKGND is a nuisance. More often than not, I do</p>
<p>&nbsp; case WM_ERASEBKGND: return 0;</p>
<p>or its moral equivalent in WinForms.</p>
<div class="post">[<em>If EndPaint validated the window, then you would have a problem if the window was invalidated while you were painting it. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-aadsso-1live-com00034001a5381f07 even thread-even depth-1" id="comment-1165073">
				<div id="div-comment-1165073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Georg_Rottensteiner' rel='external nofollow' class='url'>Georg_Rottensteiner</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165073">
			December 3, 2014 at 9:51 pm</a>		</div>

		<p>I&#39;d really really like to see that DefWindowProc. It must be some kind of library spanning monster.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165083">
				<div id="div-comment-1165083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Darran Rowe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165083">
			December 3, 2014 at 11:44 pm</a>		</div>

		<p>For new desktop applications, I can imagine that BeginPaint is going to become less common. Direct2D was released with Windows 7, and Windows 8 has DirectComposition. So as time goes on and skill sets improve, I can really see the use of GDI in new applications vanish almost completely.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165103">
				<div id="div-comment-1165103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165103">
			December 4, 2014 at 1:44 am</a>		</div>

		<p>Douglas: Even in the cases where I have all the information cached locally (so no stale caches), the shear amount of information means a paint cycle may take several seconds.</p>
<p>Doynax: The entire point of the background thread is to avoid blocking the main thread since the painting may take a while as it gathers data via COM. If the main thread waits / runs a loop could just lead to blocking reentrancy problems.</p>
<p>I could have an extra paint buffer just so the main thread can update the window from the stale state and bitblt the new state to this buffer whenever it is done, but that just introduces another layer of caching and I have never seen anything that says using getDC / paint / releaseDC from an extra thread is wrong. But I also have never found a good example of a control with the requirements I have (so rendering via dedicated thread).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165113">
				<div id="div-comment-1165113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165113">
			December 4, 2014 at 1:48 am</a>		</div>

		<p>PS: I am not trying to say my approach is correct, if I knew that I would not be asking, I am just trying to explain why I am doing it this way until I find a better way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165123">
				<div id="div-comment-1165123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165123">
			December 4, 2014 at 2:26 am</a>		</div>

		<p>@Douglas: The best way to tell the main thread that it needs to paint the window is to invalidate it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165143">
				<div id="div-comment-1165143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doynax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165143">
			December 4, 2014 at 3:53 am</a>		</div>

		<p>SI: The idea was to keep running the application as usual, just ignoring further WM_PAINT messages until the rendering is done. Not to go into a special modal state. Admittedly I don&#39;t know how to selectively ignore WM_PAINT for a single window if you still need to keep updating the rest of the user interface in the meantime. Surely there must be a proper way to defer the painting?</p>
<p>AsmGuru62: Sounds reasonable but what do you do in WM_PAINT while the buffer is out-of-date, say after window sizing or because new input has arrived?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165183">
				<div id="div-comment-1165183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165183">
			December 4, 2014 at 7:42 am</a>		</div>

		<p>ValidateRect seems like the easiest way to defer painting, and then InvalidateRect when a backbuffer is ready.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1165203">
				<div id="div-comment-1165203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">doynax</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165203">
			December 4, 2014 at 8:03 am</a>		</div>

		<p>SI: Indeed and I imagine it works just fine for the most part. The fact that you&#39;re effectively lying to the API seems like it might come back to bite you in corner cases though, say if the window happens to be captured in the interim (screenshot, alt+tab icon, screen reader, etc).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1165293">
				<div id="div-comment-1165293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SI</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20141203-00/?p=43483#comment-1165293">
			December 5, 2014 at 1:34 am</a>		</div>

		<p>That&#39;s a good point and probably true for when the invalid state is due to the window size changing, etc. 99% of all invalidates are due to mouse interaction and animations, and then the last state is still about as valid as you can get without infinite cpu resources at your disposal until the new state is drawn.</p>
<p>I did have to sync the two threads to handle WM_PRINTCLIENT, but since that message isn&#39;t autogenerated during COM message loops it doesn&#39;t lead to any problems.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

