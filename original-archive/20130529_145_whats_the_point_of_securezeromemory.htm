<html>
<head>
<title>What's the point of SecureZeroMemory?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the point of SecureZeroMemory?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 29, 2013 / year-entry #146</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>37</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The Secure­Zero­Memory function zeroes out memory in a way that the compiler will not optimize out. But what's the point of doing that? Does it really make the application more secure? I mean, sure the data could go into the swap file or hibernation file, but you need to have Administrator access to access those...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>The <code>Secure&shy;Zero&shy;Memory</code> function zeroes out memory in a way that the compiler will not optimize out. But what's the point of doing that? Does it really make the application more secure? I mean, sure the data could go into the swap file or hibernation file, but you need to have Administrator access to access those files anyway, and you can't protect yourself against a rogue Administrator. And if the memory got swapped out before it got zeroed, then the values went into the swap file anyway. Others say that it's to prevent other applications from reading my process memory, but they could always have read the memory before I called <code>Secure&shy;Zero&shy;Memory</code>. So what's the point?</p>
<p> The <code>Secure&shy;Zero&shy;Memory</code> function doesn't make things secure; it just makes them <i>more</i> secure. The issue is a matter of degree, not absolutes. </p>
<p> if you had a rogue Administrator or another application that is probing your memory, then that rogue operator has to suck out the data during the window of opportunity between the time you generate the sensitive data and the time you zero it out. This is typically not a very long time, so it makes the attacker work harder to get the data. Similarly, the data has to be swapped out during the window between the sensitive data being generated and the data being zeroed. Whereas if you never called <code>Secure&shy;Zero&shy;Memory</code>, the attacker could take their sweet time looking for the sensitive information, because it'll just hang around until the memory gets re-used for something else. </p>
<p> Furthermore, the disclosure may not be due to a rogue operative, but may be due to your own program! If your program crashes, and you're signed up your program for <a href="http://msdn.microsoft.com/en-us/windows/hardware/gg487440"> Windows Error Reporting</a>, then a crash dump file is generated and uploaded to Microsoft so that you can download and investigate why your program is failing. In preparation for uploading, the crash dump is saved to a file on the user's hard drive, and an attacker may be able to mine that crash dump for sensitive information. Zeroing out memory which contained sensitive information reduces the likelihood that the information will end up captured in a crash dump. </p>
<p> Another place your program may inadvertently reveal sensitive information is in the use of uninitialized buffers. If you have a bug where you <a href="http://blogs.msdn.com/b/oldnewthing/archive/2006/07/03/655251.aspx"> do not fully-initialize your buffers</a>, then sensitive information may end up leaking into them and then accidentally transmitted over the network or written to disk. Using the <code>Secure&shy;Zero&shy;Memory</code> function when finished with sensitive information is a defense-in-depth way of making it harder for sensitive information to go where it's not supposed to. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (37)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1058713">
				<div id="div-comment-1058713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058713">
			May 29, 2013 at 8:06 am</a>		</div>

		<p>I&#39;m curious how compilers can optimize away ZeroMemory. &nbsp;Is there something special in the function signature that guarantees the operation is side-effect free? &nbsp;Or do compilers just hard-code the function name?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058723">
				<div id="div-comment-1058723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058723">
			May 29, 2013 at 8:10 am</a>		</div>

		<p>ZeroMemory is a macro for memset. &nbsp;I suppose a compiler might feel it has a priori knowledge of what memset does and optimize the call away if the buffer will receive no subsequent use.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058733">
				<div id="div-comment-1058733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058733">
			May 29, 2013 at 8:10 am</a>		</div>

		<p>It is rather simple how it works: it can&#39;t be optimized away because the compiler doesn&#39;t know what it does.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058743">
				<div id="div-comment-1058743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058743">
			May 29, 2013 at 8:17 am</a>		</div>

		<p>SecureZeroMemory is implemented in a header file as a FORCEINLINE C function which treats the input pointer as volatile. &nbsp;For x64 it seems to run an intrinsic on it (I didn&#39;t follow into that) and for x86 zeros out the values in the buffer. &nbsp;Presumable the volatile qualifier is enough to keep the MSVC compiler from trying to optimize away the call.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1058753">
				<div id="div-comment-1058753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058753">
			May 29, 2013 at 8:19 am</a>		</div>

		<p>In the crypto hardware community we refer to this as Data At Rest, even if it is in processor/device memory. The less time that sensitive data is in buffers, the less opportunity to compromise that data. As Raymond correctly points out, this doesn&#39;t secure the system by itself, but is one of many strategies put together to minimize risk.</p>
<p>If you are designing such systems, the rule is to destroy any plaintext data as soon as it is consumed by the downstream process (e.g. an encryption routine). When such systems are being certified, typically the certifying agency requires the stepping through assembly code in a debugger to prove that all security-critical functions operate properly (and that they were not optimized away).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058763">
				<div id="div-comment-1058763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058763">
			May 29, 2013 at 8:40 am</a>		</div>

		<p>@SimonRev: from the beginning the compiler was always allowed to assume these functions and generate calls to them at will: memcpy, memmove, memset, memcmp, div, ldiv. The fact the compiler is allowed to optimize them away follows.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058773">
				<div id="div-comment-1058773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058773">
			May 29, 2013 at 8:55 am</a>		</div>

		<p>Here&#39;s an example where the compiler will optimize away a call to ZeroMemory:</p>
<p>void foo()</p>
<p>{</p>
<pre><code>char buf[] = &amp;quot;foobarbaz&amp;quot;;

printf(&amp;quot;%sn&amp;quot;, buf);

bar(buf);

ZeroMemory(buf, sizeof(buf));
</code></pre>
<p>}</p>
<p>When compiled with /O2 /Oi /Oy /GS- with the Visual Studio 2010 compiler on x86, this does not call memset or write to memory at all after calling bar(), it just runs the normal function epilog (add esp,0Ch; mov esp,ebp; pop ebp; ret). &nbsp;Using /GS instead /GS- adds a call to __security_check_cookie but otherwise does not zero out any memory.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1058783">
				<div id="div-comment-1058783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058783">
			May 29, 2013 at 9:00 am</a>		</div>

		<p>@Brian, as Joshua pointed out, the compiler knows about certain functions. In the example Adam provided, the compiler sees that the buffer is being written to, and then immediately destroyed at the end of the function (i.e. never read again). So the compiler assumes it can eliminate the call. This is similar to optimizing away a variable that you declare and set but never read from in the function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058803">
				<div id="div-comment-1058803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mashmagar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058803">
			May 29, 2013 at 9:39 am</a>		</div>

		<p>Good going, Maurits. Now we all know your sensitive information!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058823">
				<div id="div-comment-1058823" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058823">
			May 29, 2013 at 10:19 am</a>		</div>

		<p>Devil&#39;s advocate:</p>
<p>A rogue administrator may breakpoint at any 90% matching expansion of SecureZeroMemory, so he/she&#39;ll have a better chance at and possibly faster way of finding where sensitive data is than by thourough reverse engineering.</p>
<p>Your application may still be rather insecure if SecureZeroMemory is invoked on an unchecked NULL pointer, or if you&#39;re zeroing several buffers and any but the last one fails because it was writing out of allocated memory bounds. And if the buffers are close enough, they might appear in the crash dump.</p>
<p>On the other, if you always use SecureZeroMemory where ZeroMemory would suffice, you&#39;ll make him/her go through a hard time.</p>
<p>@Maurits, if your sensitive data is all zeros, at least you&#39;re not readily compromising it by writing all zeros over zeros, in the attempt to lure a rogue hacker into thinking &quot;these are not the zeros you&#39;re looking for&#8230;&quot;. If you&#39;re writing all ones over all zeros, now that&#39;s suspicious! Even more suspicious would be (pseudo-)random bytes.</p>
<p>@Mashmagar, security through obscurity is overtaken by mere perseverance.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058833">
				<div id="div-comment-1058833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058833">
			May 29, 2013 at 10:23 am</a>		</div>

		<p>If someone has physical access (or admin rights via comm) to your device, then you are already pwned and it is game over.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1058863">
				<div id="div-comment-1058863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058863">
			May 29, 2013 at 11:20 am</a>		</div>

		<p>@12BitSlab: &quot;If someone has physical access (or admin rights via comm) to your device, then you are already pwned and it is game over.&quot;</p>
<p>Depends on what your &quot;device&quot; is. Physical access /= game over in every situation. Nor does &quot;admin rights&quot;. Some equipment is designed to protect when even the enemy has it in their hands.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058873">
				<div id="div-comment-1058873" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zr40</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058873">
			May 29, 2013 at 11:55 am</a>		</div>

		<p>@Brian_EE: But we&#39;re talking about Windows, not some hypothetical tamper-resistant device or administrator-mistrusting OS. In Windows, having Administrator privileges allows for any behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058883">
				<div id="div-comment-1058883" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/arcangelpip_4000_hotmail.com/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>arcangelpip@hotmail.com</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058883">
			May 29, 2013 at 1:11 pm</a>		</div>

		<p>@Zr40</p>
<p>Even if we are talking about Windows. This doesn&#39;t mean an automatic game over.</p>
<p>An example is a self service checkout in a supermarket. As a user you have physical access to it, but you are most likely supervised while using them, and can&#39;t get access to them in your own time. Even if these are set to run with admin rights, you wouldn&#39;t be able to make use of it. And this is very relevant because the self service checkouts in all my local supermarkets run on Windows.</p>
<p>So as Brian_EE said, it depends on what your &quot;device&quot; is.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058893">
				<div id="div-comment-1058893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">June</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058893">
			May 29, 2013 at 1:15 pm</a>		</div>

		<p>@Zr40: Be that as it may, there are certainly historic cases of applications (and games) on Windows resisting tampering (for copy-protection purposes) for quite some time, even though the &#39;attacker&#39; has full access. Don&#39;t assume that because a theoretical superman cracker can defeat any protection, that such a cracker a) exists, b) cares about &lt;foo&gt; application, c) has plenty of time and patience.. ;-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058903">
				<div id="div-comment-1058903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">apz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058903">
			May 29, 2013 at 1:43 pm</a>		</div>

		<p>&quot;The foobarfunction function doesn&#39;t make things secure; it just makes them more secure. The issue is a matter of degree, not absolutes. &quot;</p>
<p>This is why I find your concept of an &#39;airtight hatchway&#39; so offensive &#8211; so many times people have suggested features that incrementally improve security, only to be rejected with the blind &quot;other side of airtight hatchway&quot; refrain.</p>
<p>Next time anyone is tempted to blindly retort: &#39;other side of airtight hatchway!&#39;, think a second to functions such as SecureZeroMemory.</p>
<div class="post">[<em>Defense in depth limits the damage of an existing vulnerability, but the airtight hatchway issue is whether a vulnerability exists at all. That it is possible to limit the damage of somebody who makes it past the hatchway is not the same as saying &quot;I found a way to stop people from getting past the hatchway!&quot; -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058913">
				<div id="div-comment-1058913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058913">
			May 29, 2013 at 2:01 pm</a>		</div>

		<p>The concept of &quot;secure&quot; does not exist. &nbsp;System security is EXACTLY like the security of a bank vault. &nbsp;The security measures exist solely to buy more time. &nbsp;That is we want to slow down the fire (in the case of a vault) or slow down the attacker (in the case of a system). &nbsp;Then one must have detection, notification, and response measures in place. &nbsp;With out the last three items being there, there is no point in having security measures in the first place. &nbsp;Any attack given enough time will succeed.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058923">
				<div id="div-comment-1058923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">@12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058923">
			May 29, 2013 at 2:59 pm</a>		</div>

		<p>Exactly &#8211; the guiding principle should be &quot;defense-in-depth&quot; (bank vault alarms, SecureZeroMemory), not &quot;airtight hatchway&quot; (UNIX root/nonroot distinction, some aspects of Windows security).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058933">
				<div id="div-comment-1058933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058933">
			May 29, 2013 at 3:46 pm</a>		</div>

		<p>Windows needs an extension to VirtualLock that means &quot;never write this data to permanent storage&quot;. &nbsp;VirtualLock works for most things, but will not protect you against your data being written to disk if the user hibernates.</p>
<p>If I were to design it, the extension would be that the memory is discarded if the machine would otherwise write it to disk. &nbsp;Attempts to access such memory after a hibernation would trigger a STATUS_IN_PAGE_EXCEPTION. &nbsp;Programs that need advanced functionality can deal with advanced consequences.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1058943">
				<div id="div-comment-1058943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058943">
			May 29, 2013 at 3:57 pm</a>		</div>

		<p>@John Doe: I never thought of it that way. Obviously the only solution is for me to find someone else&#39;s sensitive data and overwrite my own with that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1058793">
				<div id="div-comment-1058793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058793">
			May 29, 2013 at 9:21 am</a>		</div>

		<p>My sensitive information *is* all zeros. So I wrote a SecureOneMemory function that writes all 1s and cannot be optimized away.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1058953">
				<div id="div-comment-1058953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058953">
			May 29, 2013 at 5:16 pm</a>		</div>

		<p>Function should be renamed to CallbackToAllPrivilegedUsers_IHaveAMememoryBufferWithSecureStuff_HereYouHaveIt(void *buf, size_t bufsize);</p>
<p>You now has a less secure OS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1058973">
				<div id="div-comment-1058973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doug</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058973">
			May 29, 2013 at 6:58 pm</a>		</div>

		<p>Regarding SecureZeroMemory being a red flag, note (as mentioned earlier) that SecureZeroMemory is implemented as an inline function. Basically, the only difference between SecureZeroMemory and memcpy is that you can be confident that SecureZeroMemory won&#39;t be optimized away. So anybody trying to catch calls to &quot;SecureZeroMemory&quot; will actually catch all calls to memcpy.</p>
<p>Regarding this still being vulnerable, note that &quot;attacker with the ability to access my device&#39;s memory WHILE I&#39;m performing sensitive operations&quot; is not the primary opponent (though this does make his/her life a bit more difficult). The primary opponent is &quot;attacker with the ability to access information about my device AFTER I&#39;ve performed sensitive operations&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1058983">
				<div id="div-comment-1058983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1058983">
			May 29, 2013 at 7:21 pm</a>		</div>

		<p>Btw, I wonder why we have SecureZeroMemory() but not SecureRandomMemory()?</p>
<p>In pre-zeroed memory region you can be sure that blocks that aren&#39;t zero can be &quot;some data&quot;, in memory region with random pattern you can&#39;t, especially if all &quot;data&quot; the secure application have is numeric (i.e. not plain text). Shouldn&#39;t it serve better purpose of &quot;securing&quot; the application?</p>
<p>Sure it&#39;ll probably be slower than zeroing out memory, but I think it&#39;d be found it&#39;s purpose.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059003">
				<div id="div-comment-1059003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paradice</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059003">
			May 30, 2013 at 12:55 am</a>		</div>

		<p>@cheong00: what would be it&#39;s purpose? If your needs are such that you want to obfuscate live data with randomness, you almost certainly want to use a trusted source for the randomness, rather than rely on a predetermined OS function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059023">
				<div id="div-comment-1059023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ender</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059023">
			May 30, 2013 at 1:13 am</a>		</div>

		<blockquote><p>
  An example is a self service checkout in a supermarket. As a user you have physical access to it, but you are most likely supervised while using them, and can&#39;t get access to them in your own time.
</p></blockquote>
<p>You don&#39;t normally have physical access to the computer in these stations &#8211; that&#39;s usually locked behind physical door, and the only access you have is to the barcode scanner and touchscreen, which (barring any vulnerability in the software that&#39;s running) don&#39;t allow you into the system.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1059033">
				<div id="div-comment-1059033" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059033">
			May 30, 2013 at 2:56 am</a>		</div>

		<p>@Paradice: The purpose is to obfuscate &quot;relevent data&quot;&#39;s boundary, so randomness itself is not important at all.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059043">
				<div id="div-comment-1059043" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/raceprouk_4000_hotmail.co.uk/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>raceprouk@hotmail.co.uk</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059043">
			May 30, 2013 at 6:39 am</a>		</div>

		<p>@640k: SecureZeroMemory is defined with FORCEINLINE, so the compiled code won&#39;t leave an entry point to discover (if I understand correctly).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059053">
				<div id="div-comment-1059053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SimonRev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059053">
			May 30, 2013 at 6:56 am</a>		</div>

		<p>I think 640&#39;s point was that you could scan the compiled code and look for any loops that look like what SecureZeroMemory would compile to and put breakpoints there. &nbsp;Now whether the actual compiled result of SecureZeroMemory is sufficiently different from that of memset that you could distinguish them is something I cannot answer. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059073">
				<div id="div-comment-1059073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/raceprouk_4000_hotmail.co.uk/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>raceprouk@hotmail.co.uk</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059073">
			May 30, 2013 at 7:05 am</a>		</div>

		<p>@SimonRev: If you&#39;re looking for memset loops, then the differences between a normal memset and SecureZeroMemory are trivial at best ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059123">
				<div id="div-comment-1059123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/bdv_4000_inec.ru/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>bdv@inec.ru</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059123">
			May 30, 2013 at 9:29 am</a>		</div>

		<p>To zero sensitive memory better to use custom code. Using public Win32 API is just helping cracker to determine where and when to look for passwords. He would just intercept the call and voila!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059143">
				<div id="div-comment-1059143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059143">
			May 30, 2013 at 9:38 am</a>		</div>

		<p>Dmitry: I don&#39;t think you get the point. Writing the code yourself may result in that code being optimized out. The SecureZeroMemory invocation will not be optimized out, and will be inlined so there is nothing to intercept.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059173">
				<div id="div-comment-1059173" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059173">
			May 31, 2013 at 4:25 am</a>		</div>

		<p>Now this is getting interesting. New commenters should try to find which DLL exports SecureZeroMemory, before suggesting to hook on calls to it. And if you don&#39;t find at first&#8230;</p>
<p>@Maurits: ROTFLOL</p>
<p>@cheong00: randomness is important for data stored in disks you&#39;re throwing away or which might be stolen. The pagefile may be considered random enough that, when your data is zeroed, the magnetism is not consistent enough to find what exact data was there before being zeroed.</p>
<p>However, zeroed blocks will look more suspicious than random data indeed, and a more persistent hacker would probably look those up first.</p>
<p>But as someone said, you&#39;d want to use a trustful random number generator (not that one the OS provides isn&#39;t, but do you trust any OS?).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059203">
				<div id="div-comment-1059203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059203">
			May 31, 2013 at 9:23 am</a>		</div>

		<p>@Dmitry: The function is defined as FORCEINLINE as already mentioned several times. So the only way to find out where the function was used was to look in the binary for code that looks similar enough to it. The problem there obviously is that the difference between SecureZeroMemory and memset are rather nonexistant in cases where the later isn&#39;t optimized away.</p>
<p>In the best case your reinvented SecureZeroMemory will be as secure as the original, but I really wouldn&#39;t count on it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-even depth-1" id="comment-1059303">
				<div id="div-comment-1059303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059303">
			June 2, 2013 at 8:28 pm</a>		</div>

		<p>@John: I&#39;d say as long as the region is non-zero, it&#39;ll be good enough. Magnetism is usually non-issue here because I&#39;m not talking about &quot;covering memory with random bits after the memory has been used&quot;, but to &quot;prefill the memory with random bits so the data boundary is not obvious&quot;.</p>
<p>That&#39;s why I said the randomness itself is not important at all for this particular usage.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1059323">
				<div id="div-comment-1059323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059323">
			June 3, 2013 at 5:18 am</a>		</div>

		<p>@cheong00, &quot;prefill the memory with random bits so the data boundary is not obvious&quot;.</p>
<p>That only avoids static analysis of a process&#39;s memory snapshot. At runtime or during reverse engineering, it&#39;s just as good as zeroing to detect boundaries, making it suspicious.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1059613">
				<div id="div-comment-1059613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cheong00</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130529-00/?p=4223#comment-1059613">
			June 3, 2013 at 6:42 pm</a>		</div>

		<p>Yup, neither of the way protects the application from RE attack. It just make it more difficult to get how data is located when viewing memory snapshot. Because I just want to use garbage to fill the gaps of data, the quality of garbage itself is not important. That&#39;s why I said the &quot;trustful random number generator&quot; is not needed.</p>
<p>All I want to say is that.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

