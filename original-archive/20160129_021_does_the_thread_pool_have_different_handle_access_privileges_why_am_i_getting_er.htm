<html>
<head>
<title>Does the thread pool have different handle access privileges? Why am I getting ERROR_INVALID_HANDLE?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Does the thread pool have different handle access privileges? Why am I getting ERROR_INVALID_HANDLE?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 29, 2016 / year-entry #22</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160129-00/?p=92951</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>5</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The most common reason for getting ERROR_INVALID_HANDLE is that you have an invalid handle.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer was observing strange behavior in their application
with handles and the thread pool.
</p>
<blockquote CLASS="q">
<p>
We have a service that spawns a child process,
and under certain conditions, we need to terminate that child process.
If I try to terminate the process immediately upon the condition
being met, then everything works.
But now we want to wait a little while before terminating the child
process.
To do that, we create a thread pool timer and terminate the process
from the thread pool.
</p>
<p>
Here's the code that runs when we detect that the condition is met.
No errors are detected except where noted.</p>
<pre>
PTP_TIMER timerTask = CreateThreadpoolTimer(
                            DelayTerminate, 
                            static_cast&lt;PVOID&gt;(ProcHandle),
                            &amp;m_CallBackEnviron);

if (NULL == timerTask) { ... }

// Set the timer to fire after a little while.

ulDueTime.QuadPart = (ULONGLONG)(-TimeOutIn100Nanoseconds);
FileDueTime.dwHighDateTime = ulDueTime.HighPart;
FileDueTime.dwLowDateTime = ulDueTime.LowPart;

SetThreadpoolTimer(timerTask, &amp;FileDueTime, 0, 0);

// if we set the debugging flag, then the TerminateProcess call succeeds.
if (DebuggingFlag) {
  if (!TerminateProcess(ProcHandle, 1)) { ... }
}
</pre>
<p>
Here is our callback function:
</p>
<pre>
VOID
CALLBACK
DelayTerminate(
    PTP_CALLBACK_INSTANCE Instance,
    PVOID                 Parameter,
    PTP_TIMER             Timer
    )
{
  // This call to TerminateProcess fails
  if (!TerminateProcess((HANDLE)Parameter, 1)) {
    Log(GetLastError()); // ERROR_INVALID_HANDLE
  }
  CloseThreadpoolTimer(Timer);
}
</pre>
<p>
Does the thread pool thread run with different access privileges
from the main thread?
</p>
<p>
We verified that the handle is the same in the main thread
and in the callback.
It is our understanding that
<code>Duplicate&shy;Handle</code> is not needed to share handles
between threads of a single process.
Is there some other special thing that has to be done in order
to share the handle between threads?
</p>
</blockquote>
<p>
I asked,
"Is it possible that somebody closed the handle in the meantime?"
After all, if the problem were due to access,
then you would expect the error to be
<code>ERROR_ACCESS_DENIED</code>.
Since the error is
<code>ERROR_INVALID_HANDLE</code>,
the most likely reason is, um, an invalid handle.
</p>
<p>
A clue that something strange is going on is the
<code>static_cast&lt;PVOID&gt;(ProcHandle)</code>.
This suggests that <code>ProcHandle</code> is not
itself a <code>HANDLE</code>,
but is rather some sort of RAII class that manages
a process handle and which has an implicit
conversion to <code>HANDLE</code>.
(Because if <code>ProcHandle</code>
were a <code>HANDLE</code>,
then you wouldn't need to cast it to <code>PVOID</code>.)
</p>
<p>
The customer eventually wrote back,
</p>
<blockquote CLASS="q">
<p>
Yes, that was it.
We found that the handle was being closed before the thread pool
tried to use it.
Thanks.
</p>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (5)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-1225341">
				<div id="div-comment-1225341" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160129-00/?p=92951#comment-1225341">
			January 29, 2016 at 7:02 am</a>		</div>

		<p>&gt; The customer wrote back</p>
<p>OMG</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-kirbyfcf2 odd alt thread-odd thread-alt depth-1" id="comment-1225352">
				<div id="div-comment-1225352" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Kirby+FC' rel='external nofollow' class='url'>Kirby FC</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160129-00/?p=92951#comment-1225352">
			January 30, 2016 at 1:15 pm</a>		</div>

		<p>Invalid handle is invalid.</p>
<p>Mind.  Blown.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alexcohn even thread-even depth-1" id="comment-1225582">
				<div id="div-comment-1225582" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Alex+Cohn' rel='external nofollow' class='url'>Alex Cohn</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160129-00/?p=92951#comment-1225582">
			February 2, 2016 at 12:24 pm</a>		</div>

		<p>Yes, multithreading is hard, even with the helpers like thread pool or executors.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1225681">
				<div id="div-comment-1225681" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sven2</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160129-00/?p=92951#comment-1225681">
			February 3, 2016 at 7:42 am</a>		</div>

		<p>With all the complexity, I don&#8217;t understand why the OS has to offer thread pools at all. Wouldn&#8217;t it be much more convenient if there was just a &#8220;grouping&#8221; parameter to CreateThread, which allows you to assign a group and an execution limit as a hint for the kernel? The user would just create a thread for each item to be processed and the operating system  would be responsible for making thread creation efficient and ordering their execution sensibly.</p>
<p>If the OS wants to use a thread pool internally (similarly to how a memory manager may use a &#8220;small allocation pool&#8221;), then that&#8217;s fine. But it&#8217;s nothing the user should worry about.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-alegrigoriev even depth-2" id="comment-1226072">
				<div id="div-comment-1226072" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160129-00/?p=92951#comment-1226072">
			February 5, 2016 at 2:48 pm</a>		</div>

		<p>ThreadPool is provided as convenience API over your basic CreateThread API. It&#8217;s an user mode helper and nothing prevents you from writing your own thread pool library.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

