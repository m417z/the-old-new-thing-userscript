<html>
<head>
<title>Can memcpy go into an infinite loop? Why is it being blamed for a busy hang?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Can memcpy go into an infinite loop? Why is it being blamed for a busy hang?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 13, 2017 / year-entry #92</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Look at the bigger picture.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer reported that their program locks up once
or twice each day.
They took a full dump of the file while it was hung
and asked <code>windbg</code> to analyze it.
Here's a redacted version of what it said:
</p>
<pre>
PRIMARY_PROBLEM_CLASS: APPLICATION_HANG_BusyHang

STACK_TEXT:  
msvcr80!_memcpy+0x7d
contoso!Buffer::Compact+0x3d
contoso!BufferReader::Parse+0x14c
contoso!handle_widget_message+0x37
contoso!handle_input+0x12f
contoso!dispatch_event+0x27
contoso!handle_events+0xbe
</pre>
<p>
The <code>Buffer::Compact</code> method
shifts some memory around inside the buffer:
</p>
<pre>
void Buffer::Compact()
{
  if (m_bytesRead &gt; 0) {
    memmove(m_buffer, m_buffer + m_bytesRead, m_capacity - m_bytesRead);
    m_capacity -= m_bytesRead;
    m_bytesRead = 0;
  }
}
</pre>
<p>
"Is it possible that <code>memmove</code>
has a busy wait?
What could it be waiting for?"
</p>
<p>
The <code>memmove</code> function doesn't
have a busy loop where it waits for something.
It just moves the memory from one location to another.
</p>
<p>
What's probably happening is that
there is a busy loop higher up the stack.
Maybe 
<code>Buffer&shy;Reader::<wbr>Parse</code>
has gotten into a loop, or (my guess)
<code>handle_<wbr>events</code> is
stuck in a loop processing a huge number of
incoming events.
</p>
<p>
When you take the memory dump,
you are capturing the program at a moment in time.
All you know is that the thread is probably in
a busy wait, but the source of the busy wait
need not be the thing at the top of the stack.
</p>
<p>
If <code>memcpy</code> is consistently
at the top of the stack, then it means that
the thread is spending most of its time
copying memory.
But that doesn't necessarily
mean that <code>memcpy</code>
is stuck in a loop.
The more likely reason is that the thread
is busy doing some larger operation, and that
larger operation entails a lot of <code>memcpy</code>
operations.
</p>
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040827-00/?p=38033">
Though in extreme edge cases it might be a busy loop</a>.
</p>
<p>
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150813-00/?p=91821">
Sort-of related</a>.
</p>
<p>
<b>Exercise</b>:
The customer's code calls
<code>memmove</code>,
so why is the
<code>memcpy</code> function the one
at the top of the stack?
What happened to
<code>memmove</code>?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1292385">
				<div id="div-comment-1292385" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292385">
			April 13, 2017 at 7:39 am</a>		</div>

		<p>Exercise answer: This would seem to be a case of the c++ &#8220;As-if&#8221; optimization clause striking, where the compiler knows that <code>_memcpy</code> is safe to use in this instance for various reasons and substitutes it in. The restrictions on non-overlapping and non-aliased buffers for <code>memcpy</code> is a standard detail that the implementation is free to ignore as it likes.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1292465">
				<div id="div-comment-1292465" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292465">
			April 13, 2017 at 11:21 am</a>		</div>

		<p>It&#8217;s clearly unsafe to substitute memcpy for memmove in this instance &#8211; the destination pointer and source pointer are derived from the same pointer.  It&#8217;s more likely that memmove itself noticed that the default memcpy (forward mode) worked for the pointer values it was given and jumped to memcpy.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3 parent" id="comment-1292475">
				<div id="div-comment-1292475" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292475">
			April 13, 2017 at 11:40 am</a>		</div>

		<p>Linus wrote a lengthy rant about this on a thread with some glibc developers.</p>
<p>The very short version is that the memcpy implementation cannot be materially faster than the memmove implementation, so the former should just be an alias for the latter on most &#8220;reasonable&#8221; libc implementations.  Or equivalently, you fold the latter&#8217;s guarantees into the former and do the aliasing the other way around.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-zlynx odd alt depth-4 parent" id="comment-1292485">
				<div id="div-comment-1292485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Zan+Lynx%27' rel='external nofollow' class='url'>Zan Lynx'</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292485">
			April 13, 2017 at 1:33 pm</a>		</div>

		<p>I remember some oprofile runs on Linux around 2005 that disagree with you and Linus. memmove() had a consistent branch prediction failure.</p>
<p>Maybe more modern CPU designs have improved the branch prediction to avoid this. I don&#8217;t see how, but maybe. But I&#8217;d bet that if I construct a benchmark that builds an array of non-overlapping, randomized memory blocks and I run a few million memmove vs memcpy, memcpy will come out faster.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1292535">
				<div id="div-comment-1292535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292535">
			April 13, 2017 at 11:43 pm</a>		</div>

		<p>If the branch mispredict is consistent, and therefore predictable, then maybe the branch predictor sucks.  Just a thought.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-4 parent" id="comment-1292525">
				<div id="div-comment-1292525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292525">
			April 13, 2017 at 11:00 pm</a>		</div>

		<p>@Kevin: The thread is here, <a href="https://bugzilla.redhat.com/show_bug.cgi?id=638477" rel="nofollow">https://bugzilla.redhat.com/show_bug.cgi?id=638477</a>.  Linus&#8217; comments start about 20% of the way down.</p>
<p>Oh, and in terms of it being a rant: That wasn&#8217;t a Linus rant, it never made the evening news, there were no overflowing morgues, no cleanup crews had to go in with shovels and quicklime, I mean it was practically a love bite.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-5" id="comment-1292545">
				<div id="div-comment-1292545" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292545">
			April 14, 2017 at 12:02 am</a>		</div>

		<p>The glibc bug (<a href="https://sourceware.org/bugzilla/show_bug.cgi?id=12518" rel="nofollow">https://sourceware.org/bugzilla/show_bug.cgi?id=12518</a>) had the potential to turn into an epic flame war when Ulrich Drepper rather brusquely disagreed with Linus, but surprisingly they were able to work it out like civilized adults.  I would not have called that outcome.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1292395">
				<div id="div-comment-1292395" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292395">
			April 13, 2017 at 7:44 am</a>		</div>

		<p>Exercise: The compiler was able to detect that the source is always higher than the destination. So it inserted an optimization that substitutes memcpy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-archangelpip even thread-even depth-1 parent" id="comment-1292405">
				<div id="div-comment-1292405" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292405">
			April 13, 2017 at 7:44 am</a>		</div>

		<p>The most logical thing would be that is how memmove is coded.<br />
It tests to see if there are any overlapped regions of memory, if there are not then it will jump straight to memcpy. If memory serves me correctly, it was written in assembly all the way up to VC2013, VC2015 had the great CRT refactor and changed things.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1292455">
				<div id="div-comment-1292455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292455">
			April 13, 2017 at 9:41 am</a>		</div>

		<p>This! You can easily see by statically linking the CRT and disassembling your program. You&#8217;ll see memmove and memcpy are internally the same handwritten assembly function, but just some checks and handling for the overlap. And you&#8217;ll also see that the compiler tries to inline many common variants of memcpy and memmove, so it can leave out many of these checks and handling. Last you&#8217;ll see that memcpy&#8217;s code has changed almost with every CRT release to account for changing capabilities of never Intel and AMD chips. And as such the exact callstack of such a memcpy/memmove hang can differ depending on what Visual Studio version or optimisation settings were used.</p>
<p>Who knew memcpy could be so complex :-)</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1292407">
				<div id="div-comment-1292407" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292407">
			April 13, 2017 at 7:46 am</a>		</div>

		<p>Exercise answer:  perhaps memmove is implemented as  pre-processor macro that gets expanded into inline code which does a memcpy?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-mzzt odd alt thread-even depth-1 parent" id="comment-1292415">
				<div id="div-comment-1292415" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/The+MAZZTer' rel='external nofollow' class='url'>The MAZZTer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292415">
			April 13, 2017 at 7:47 am</a>		</div>

		<p>I imagine memmove is implemented as a macro that calls memcpy followed by ZeroMemory or something.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1292565">
				<div id="div-comment-1292565" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lars Viklund</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292565">
			April 14, 2017 at 7:53 am</a>		</div>

		<p>Contrary to what the name may lead you to think, it has nothing to do with erasing the old storage.<br />
memmove is like memcpy in that it copies one range of memory to another range, but handles the case where the two ranges overlap, correctly.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1292425">
				<div id="div-comment-1292425" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Piotr</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292425">
			April 13, 2017 at 7:52 am</a>		</div>

		<p>@exercise: memmove is inlined? <a href="https://msdn.microsoft.com/en-us/library/bw1hbe6y.aspx" rel="nofollow">https://msdn.microsoft.com/en-us/library/bw1hbe6y.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1292435">
				<div id="div-comment-1292435" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DoomMuffins</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292435">
			April 13, 2017 at 8:07 am</a>		</div>

		<p>I&#8217;m more inclined to say it&#8217;s a tail-call optimization rather than a compiler optimization (i.e. <code>memmove</code> performs a <code>jmp</code> rather than a <code>call</code> to <code>memcpy</code> in certain cases).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1292456">
				<div id="div-comment-1292456" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mike</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292456">
			April 13, 2017 at 10:00 am</a>		</div>

		<p>Exercise: memcpy and memmove is the same function.</p>
<p>Microsoft early noticed that many developers failed to realize that memcpy couldn&#8217;t handle overlapping memory blocks reliably, so they simply put the memmove functionality into memcpy.</p>
<p>The CRT (C RunTime) source is included in MSVC, and has so been since at least two decades.<br />
The only thing surprising me about it is; why isn&#8217;t this a simple ALIAS? Why the song-and-dance to assemble it twice, only with different names?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1292515">
				<div id="div-comment-1292515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292515">
			April 13, 2017 at 10:13 pm</a>		</div>

		<p>There&#8217;s another explanation that immediately came to mind, the memcpy() is going across one or more special-status pages, e.g. nonresident or a guard page or something.  This suspends the thread the memcpy() is on while possibly lengthy fixups occur in the background, leading to the same misleading reporting of where the problem lies.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf odd alt thread-odd thread-alt depth-1" id="comment-1292555">
				<div id="div-comment-1292555" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20170413-00/?p=95955#comment-1292555">
			April 14, 2017 at 1:09 am</a>		</div>

		<p>When I last checked, memmove() and memcpy() in the CRT shared the exact same source code file (with some #if around the function prototype), so they got ICF&#8217;d.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

