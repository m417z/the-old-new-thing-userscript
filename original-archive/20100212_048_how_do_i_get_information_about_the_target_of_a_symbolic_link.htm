<html>
<head>
<title>How do I get information about the target of a symbolic link?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I get information about the target of a symbolic link?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 12, 2010 / year-entry #49</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Functions like GetFileAttributes and FindFirstFile, when asked to provide information about a symbolic link, returns information about the link itself and not the link destination. If you use the FindFirstFile function, you can tell that you have a symbolic link because the file attributes will have the FILE_ATTRIBUTES_REPARSE_POINT flag set, and the dwReserved0 member will...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>Functions like <code>GetFileAttributes</code> and <code>FindFirstFile</code>, when asked to provide information about a symbolic link, returns information about the link itself and not the link destination. If you use the <code>FindFirstFile</code> function, you can tell that you have a symbolic link because the file attributes will have the <code>FILE_ATTRIBUTES_REPARSE_POINT</code> flag set, and the <code>dwReserved0</code> member will contain the special value <code>IO_REPARSE_TAG_SYMLINK</code>.</p>
<p> Okay, great, so now I know I have a symbolic link, but what if I want information about the link target? For example, I want to know the size of the link target, its last-modified time, and its name. </p>
<p> To do this, you open the symbolic link. The I/O manager dereferences the symbolic link and gives you a handle to the link destination. You can then call functions like <code>GetFileSize</code>, <code>GetFileInformationByHandleEx</code>, or <code>GetFinalPathNameByHandle</code> to obtain information about the symbolic link target. </p>
<p> <b>Exercise</b>: If the field is called <code>dwReserved0</code>, shouldn't it be off limits? Why isn't the field called <code>dwReparsePointType</code>? </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-810973">
				<div id="div-comment-810973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-810973">
			February 12, 2010 at 7:06 am</a>		</div>

		<p>Well, I suppose that the file attributes can contain as yet undefined flags. &nbsp;When those flags are present, the dwReserved fields can contain information specific to the meaning of those flags.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-810993">
				<div id="div-comment-810993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Mathieu G.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-810993">
			February 12, 2010 at 7:26 am</a>		</div>

		<p>I guess this is because this field was defined before Symbolic links existed, and its name cannot be modified now for compatibility with programs using old headers.</p>
<p>Am I correct ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811003">
				<div id="div-comment-811003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.pretentiousname.com' rel='external nofollow' class='url'>Leo Davidson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811003">
			February 12, 2010 at 8:10 am</a>		</div>

		<p>The reserved field might not always indicate the reparse point type. It only has that meaning when another flag is set.</p>
<p>Not that it seems worth the complexity, but it could be given a more specific name without breaking old code by using a union. On top of unions being a it icky, I guess there would be the risk some new code would set the newly-named value and also zero out the reserved field without realising they&#8217;re the same. Better to leave it alone!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811023">
				<div id="div-comment-811023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">iddqd</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811023">
			February 12, 2010 at 8:15 am</a>		</div>

		<p>You can also use DeviceIoControl with FSCTL_GET_REPARSE_POINT to obtain information about the symbolic link target &quot;as is&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811053">
				<div id="div-comment-811053" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://Somethingfunny' rel='external nofollow' class='url'>Daniel ZY</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811053">
			February 12, 2010 at 8:56 am</a>		</div>

		<p>You can get the name from handle in a supported way on 2000 too (see: <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/aa366789%28VS.85%29.aspx" rel="nofollow">http://msdn.microsoft.com/en-us/library/aa366789%28VS.85%29.aspx</a>)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811083">
				<div id="div-comment-811083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811083">
			February 12, 2010 at 9:30 am</a>		</div>

		<p>Thanks for this info. I wrote a program last week which needed to check/resolve the target of a slink!</p>
<blockquote><p>
  I guess there would be the risk some new code would set the newly-named value and also zero out the reserved field without realising they&#8217;re the same. Better to leave it alone!
</p></blockquote>
<p>That&#8217;s why you should use this pattern:</p>
<p>&nbsp;ZeroMemory(&amp;mystruct, sizeof(mystruct));</p>
<p>&nbsp;mystruct.a=1;</p>
<p>&nbsp;mystruct.b=2;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811093">
				<div id="div-comment-811093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Doc</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811093">
			February 12, 2010 at 9:33 am</a>		</div>

		<p>Is this the official supported approach to resolve a symbolic link? msdn doesn&#8217;t have any more info on this, this blog is now the only documented approach from msft.</p>
<div class=post>[<i>Nothing on this Web site is the official supported approach to anything. It&#8217;s just my thoughts, not &#8220;the documented approach from Microsoft.&#8221; I just <a href="http://blogs.msdn.com/oldnewthing/archive/2009/08/04/9856634.aspx" rel="nofollow">found two blocks and snapped them together in an interesting way</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811123">
				<div id="div-comment-811123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811123">
			February 12, 2010 at 10:06 am</a>		</div>

		<p>At a rough guess I&#8217;m going to say that it&#8217;s because there were certain third-party filesystem utilities in the past that had programmers who thought &quot;whay-hey! unused struct members to have a party in!&quot; and now it&#8217;s too late to go back. &nbsp;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811143">
				<div id="div-comment-811143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811143">
			February 12, 2010 at 11:12 am</a>		</div>

		<p>Is there a way to find the target without opening a handle? &nbsp; GetFileAttributes and FindFirstFile work even if you do not have access to the file, and even if the file is opened &#8220;exclusive&#8221; by another process.</p>
<div class=post>[<i>I don&#8217;t know. Maybe you can find <a href="http://blogs.msdn.com/oldnewthing/archive/2009/08/04/9856634.aspx" rel="nofollow">a better Lego piece</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811153">
				<div id="div-comment-811153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexandre Grigoriev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811153">
			February 12, 2010 at 11:13 am</a>		</div>

		<p>@DanielZY,</p>
<p>This MapViewOfFile kludge only works until you get a handle without read-execute rights.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811163">
				<div id="div-comment-811163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811163">
			February 12, 2010 at 11:46 am</a>		</div>

		<p>Bonus question: Why does GetFileInformationByHandleEx exist only on Vista and up, given the fact that it is a very thin wrapper around NtQueryFileInformation, which exists since NT4 (or even 3.1)?</p>
<div class=post>[<i>Translation: <a href="http://blogs.msdn.com/oldnewthing/archive/2006/04/03/567318.aspx" rel="nofollow">Why didn&#8217;t you use your time machine</a>? -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811203">
				<div id="div-comment-811203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mikeb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811203">
			February 12, 2010 at 12:28 pm</a>		</div>

		<p>@Leo Davidson:</p>
<p>A union might seem to be a potential solution, however adding a union to replace the name dwReserved0 would require changes in user code to add another name &#8216;level&#8217; to that part of the WIN32_FIND_DATA structure unless you wanted people using the API to be forced to use the MSVC extension of nameless unions.</p>
<p>I wouldn&#8217;t be surprised if there are many things in the Windows SDK that rely on MSVC extensions, but I&#8217;d guess that in general &nbsp;Microsoft would like to try to avoid them unless truly necessary.</p>
<p>Now, if there was some foresight when the structure was initially developed, the dwReserved0 member might have been a union right from the start (maybe named &#8216;extendedinfo&#8217; or something) that initially only contained a dwReserved0 member. And they could have included the dwResrved1 member into a structure that was part of the union. Or something. But we&#8217;d need a time machine to fix that now, and honestly I can&#8217;t recall a structure definition for an API that had that level of insight to make their reserved members source-level backwards (or would that be forwards?) compatible so nicely.</p>
<p>But now that I&#8217;ve mentioned it, I&#8217;ll try to keep this in mind for any APIs that I might develop with reserved information &#8211; not that I develop any public-facing APIs.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811273">
				<div id="div-comment-811273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Billy O'Neal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811273">
			February 12, 2010 at 2:45 pm</a>		</div>

		<p>@mikeb:</p>
<p>&#8220;Nameless&#8221; are not a Microsoft extension, they are part of the standard: <a href="http://www.cplusplus.com/doc/tutorial/other_data_types/" rel=nofollow target=_new rel="nofollow">http://www.cplusplus.com/doc/tutorial/other_data_types/</a> . Scroll down to &#8220;Anonymous unions&#8221;.</p>
<div class=post>[<i>True but irrelevant. Nameless unions are nonstandard in C. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811313">
				<div id="div-comment-811313" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabest</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811313">
			February 12, 2010 at 7:18 pm</a>		</div>

		<p>There is a nice COM object for handling links, CoCreatable with CLSID_ShellLink.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811333">
				<div id="div-comment-811333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">anonymuos</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811333">
			February 12, 2010 at 10:31 pm</a>		</div>

		<p>Feature request: Please make Explorer navigate thru all types of junction points upon doubleclicking (I know that crap that Explorer is not obligated to support all NTFS features) and at least make it calculate the size correctly (exclude redundant files) so we can get the correct size of the WinSxS folder.</p>
<div class=post>[<i>There&#8217;s no point since <a href="http://blogs.msdn.com/oldnewthing/archive/2009/02/17/9426787.aspx" rel="nofollow">there is no &#8220;correct&#8221; size for a folder containing hard links</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811303">
				<div id="div-comment-811303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Teo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811303">
			February 12, 2010 at 7:10 pm</a>		</div>

		<p>Why didn&#8217;t you use your time machine?</p>
<p>Urgh, no. It *works* downlevel, it just is not *supported*. You have a redistributable lib which implements it downlevel.</p>
<p>But the question stay, why it was not implemented earlier, given the fact that its functionality was available for ages?</p>
<p>Wait wait, .Net did not exist when NT4 was created, yet somehow I&#8217;ve seen .net programs running on NT4? Has Microsoft discovered the time machine ;-) </p>
<div class=post>[<i>I don&#8217;t know why it wasn&#8217;t implemented earlier. But what&#8217;s done is done, and you can&#8217;t fix that without a time machine. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811373">
				<div id="div-comment-811373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">unlink</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811373">
			February 14, 2010 at 5:57 am</a>		</div>

		<blockquote><p>
  There is a nice COM object for handling links, CoCreatable with CLSID_ShellLink.
</p></blockquote>
<p>CLSID_ShellLink are used for .lnk-files, not file system objects (reparse points, junction points, symbolic links, or hard links).</p>
<p>And no, COM is not a nice technology.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811363">
				<div id="div-comment-811363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://K.Hagan@thermoteknix.com' rel='external nofollow' class='url'>Ken Hagan</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811363">
			February 14, 2010 at 3:45 am</a>		</div>

		<p>@James:</p>
<p> &nbsp; &quot;Is there a way to find the target without opening a handle? &nbsp; GetFileAttributes and FindFirstFile work even if you do not have access to the file, and even if the file is opened &quot;exclusive&quot; by another process.&quot;</p>
<p>I thought CreateFile was happy for you to request no access to the file. If so, there&#8217;d be no sharing conflict with any existing open handle or with the file&#8217;s ACL.</p>
<p>And of course, if someone refuses you list access to the parent directory then you *shouldn&#8217;t* be able to get the information. Sometimes you just aren&#8217;t welcome!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811403">
				<div id="div-comment-811403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811403">
			February 14, 2010 at 3:30 pm</a>		</div>

		<blockquote><p>
  I thought CreateFile was happy for you to request no access to the file.
</p></blockquote>
<p>Thanks for info!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811413">
				<div id="div-comment-811413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Don Juan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811413">
			February 14, 2010 at 5:17 pm</a>		</div>

		<p>Maybe Interix / POSIX for windows implements readlink() ? Simple and clean. But probably a worthless comment for general windows development.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-811503">
				<div id="div-comment-811503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.quizbang.co.uk' rel='external nofollow' class='url'>Chris Long</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811503">
			February 15, 2010 at 8:20 am</a>		</div>

		<p>I was just trying to use FindFirstFile/FindNextFile the other day. &nbsp;I was rather astonished to find that, while it very helpfully finds all files matching a path containing wildcards, it only returns the filename, not the full path to the file.</p>
<p>For example, asking it to find all files matching &#8216;../fred/barn*.txt&#8217; would return barney1.txt, barnes.txt, barnone.txt etc. &nbsp;The caller then has to parse the input path to reconstruct a useable pathname.</p>
<p>Not to difficult to work around but it seems odd that Windows would go to the effort of finding the full path to a file and then only return part of it.</p>
<p>I&#8217;ll be very happy if someone points out something obvious that I missed&#8230;</p>
<div class=post>[<i>readdir() doesn&#8217;t return the path to the directory either. Both are operations which return the contents of a directory. The path to the directory itself is not part of the directory&#8217;s contents. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-811843">
				<div id="div-comment-811843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://pdos.csail.mit.edu/~micahbro' rel='external nofollow' class='url'>Micah Brodsky</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-811843">
			February 15, 2010 at 9:20 pm</a>		</div>

		<p>Re: anonymous</p>
<p>As a usability feature, it actually would be nice if Explorer / shell dialogs could navigate through symlinks, to cater to us nerdy types who have &#8220;Show all files&#8221; enabled and keep hitting the symlinks rather than the real folders by accident. &#8220;Access is denied&#8221; is a dreadfully annoying error. (And while I&#8217;m wishing, my girlfriend wants a pony. ;)</p>
<div class=post>[<i>You&#8217;re not getting &#8220;access denied&#8221; because they are symlinks. You&#8217;re getting &#8220;access denied&#8221; because those specific junctions <a href="http://technet.microsoft.com/ee851567.aspx" rel="nofollow">explicitly deny listing directory contents</a>. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-812073">
				<div id="div-comment-812073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.quizbang.co.uk' rel='external nofollow' class='url'>Chris Long</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-812073">
			February 16, 2010 at 8:49 am</a>		</div>

		<p>[readdir() doesn&#8217;t return the path to the directory either. Both are operations which return the contents of a directory. The path to the directory itself is not part of the directory&#8217;s contents. -Raymond]</p>
<p>Thanks for the reply, Raymond. &nbsp;I agree that the behaviour is reasonable, it&#8217;s just less helpful than I was (reasonably, I think) expecting.</p>
<p>Admittedly, I&#8217;m passing in a path supplied on the command line, which is not going to be a common use of these functions. &nbsp;However, returning a path which can be directly used in a CreateFile call would be a very handy (possibly additional) feature.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-812383">
				<div id="div-comment-812383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cheong</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-812383">
			February 16, 2010 at 5:13 pm</a>		</div>

		<p>[There&#8217;s no point since there is no &#8220;correct&#8221; size for a folder containing hard links. -Raymond]</p>
<p>Another attempt for feature request of next version of NTFS: store pointers to all location of &#8220;hard links&#8221; to the file&#8217;s information block, then when counting filesize, count only if the current file information block is pointed by the first pointer. When this &#8220;first hard link&#8221; is deleted, move the pointers up one level accordingly. (Afterall, even on *nix system where both symbolic link and hard link are common, files rarely get more than 10 &#8220;links&#8221;)</p>
<div class=post>[<i>You can already do this with the FindFirstFileNameW function. But would the algorithm be <u>useful</u>? Why do people want to know the size of a directory? What problem does it solve? Does this algorithm help to solve that problem? (Part of my point is that there are multiple problems here, and no single algorithm solves all of them.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-813093">
				<div id="div-comment-813093" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Craig Barkhouse (MS)</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-813093">
			February 18, 2010 at 5:27 pm</a>		</div>

		<p>@Don Juan:</p>
<p>No need for a special API just to read the contents of a symbolic link (though the POSIX subsystem might very well provide readlink()). &nbsp;You can open a symbolic link or any other reparse point directly by specifying FILE_FLAG_OPEN_REPARSE_POINT to CreateFile(). &nbsp;Then use ordinary I/O APIs like ReadFile().</p>
<p>@Cheong:</p>
<p>NTFS already stores a complete list of all hard links to every file, and Raymond has pointed to the FindFirstFileName() API which can be used to get this list. &nbsp;As for file size, there&#8217;s only one file size for each file, and that&#8217;s exactly what NTFS stores. &nbsp;Adding up file sizes for any files is not something that NTFS does and is left to an application to do however it wants. &nbsp;If an application wants to multiply count for every link, or singly count, or something else entirely, then it can. &nbsp;Similarly, if an application wants to count for alternate data streams, or not count them, then it can. &nbsp;NTFS makes all of the information available for whatever counting strategy is preferred. &nbsp;Yes it&#8217;s a preference; there&#8217;s no obvious one true way to do it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-813103">
				<div id="div-comment-813103" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100212-00/?p=14963#comment-813103">
			February 18, 2010 at 5:33 pm</a>		</div>

		<p>&quot;You have a redistributable lib which implements it downlevel.&quot;</p>
<p>Actually, it is a staticly linked lib called FileExtd.lib, and disassembling it shows it uses GetProcAddress to get addresses to the NTDLL function it calls. Without a time machine, this is the best MS can do.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

