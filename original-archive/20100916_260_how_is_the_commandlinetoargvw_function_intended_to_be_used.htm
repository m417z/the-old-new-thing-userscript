<html>
<head>
<title>How is the CommandLineToArgvW function intended to be used?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How is the CommandLineToArgvW function intended to be used?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 16, 2010 / year-entry #261</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The CommandLineToArgvW function does some basic command line parsing. A customer reported that it was producing strange results when you passed an empty string as the first parameter: LPWSTR argv = CommandLineToArgvW(L"", &argc); Well, okay, yeah, but huh? The first parameter to CommandLineToArgvW is supposed to be the value returned by GetCommandLineW. That's the command...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The <code>CommandLineToArgvW</code> function does some basic
command line parsing.
A customer reported that it was producing strange results when
you passed an empty string as the first parameter:
</p>
<pre>
LPWSTR argv = CommandLineToArgvW(L"", &amp;argc);
</pre>
<p>
Well, okay, yeah, but huh?
</p>
<p>
The first parameter to <code>CommandLineToArgvW</code> is supposed
to be the value returned by <code>GetCommandLineW</code>.
That's the command line, and that's what
<code>CommandLineToArgvW</code> was designed to parse.
If you pass something else, then
<code>CommandLineToArgvW</code> will try to cope,
but it's not really doing what it was designed for.
</p>
<p>
It turns out that the customer was mistakenly passing the
<code>lpCmdLine</code> parameter that was passed to the
<code>wWinMain</code> function:
</p>
<pre>
int WINAPI wWinMain(
    HINSTANCE hInstance,
    HINSTANCE <a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/06/15/156022.aspx">hPrevInstance</a>,
    LPWSTR lpCmdLine,
    int nCmdShow)
{
    int argc;
    <i>LPWSTR argv = CommandLineToArgvW(lpCmdLine, &amp;argc);</i>
    ...
}
</pre>
<p>
That command line is not in the format that <code>CommandLineToArgvW</code>
expects.
The
<code>CommandLineToArgvW</code> function wants the full, unexpurgated
command line as returned by the <code>GetCommandLineW</code> function,
and it breaks it up on the assumption that
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/05/15/597984.aspx">
the first word on the command line is the program name</a>.
If you hand it an empty string,
the <code>CommandLineToArgvW</code> function says,
"Whoa,
whoever generated this command line totally screwed up.
I'll try to muddle through as best I can."
</p>
<p>
Next time, we'll look at the strange status of quotation marks
and backslashes
in <code>CommandLineToArgvW</code>.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-861213">
				<div id="div-comment-861213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Footsie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861213">
			September 16, 2010 at 7:03 am</a>		</div>

		<p>It does beg the question though. Why not just <em>call</em> GetCommandLineW inside CommandLineToArgvW then ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861223">
				<div id="div-comment-861223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Hotaling</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861223">
			September 16, 2010 at 7:21 am</a>		</div>

		<p>@Footsie:</p>
<p>GetCommandLineW gets the command line, a string, unparsed and unprocessed.</p>
<p>CommandLineToArgvW takes the above, and turns it into the argv array, and argc count (as in the old school main variety).</p>
<p>You wouldn&#39;t call one instead of the other, though you may call the first so you can call the second.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861233">
				<div id="div-comment-861233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">RobertWrayUK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861233">
			September 16, 2010 at 7:21 am</a>		</div>

		<p>Footise, because you then couldn&#39;t do any pre-processing on the value returned by GetCommandLineW, for example to replace tokens, which may be simpler prior to it being split up into an array.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861243">
				<div id="div-comment-861243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Michael Hotaling</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861243">
			September 16, 2010 at 7:24 am</a>		</div>

		<p>@Footsie:</p>
<p>Eh, my bad, misread your comment.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits even thread-even depth-1" id="comment-861253">
				<div id="div-comment-861253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861253">
			September 16, 2010 at 7:53 am</a>		</div>

		<p>I think you want LPWSTR *argv = &#8230;, not LPWSTR argv = &#8230;</p>
<p>I don&#39;t see the problem. &nbsp;I would expect it to:</p>
<p>return NULL</p>
<p>SetLastError(ERROR_INVALID_PARAMETER)</p>
<p>Not touch the output parameter.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861273">
				<div id="div-comment-861273" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Footsie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861273">
			September 16, 2010 at 8:18 am</a>		</div>

		<p>@RobertWrayUK: Well, if you do pre-processing, what guarantee do you have that you&#39;re keeping enforcing the prerequisites that CommandLineToArgvW has ? Its documentation does not quite state what they are&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861293">
				<div id="div-comment-861293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861293">
			September 16, 2010 at 8:31 am</a>		</div>

		<p>Answer to why it doesn&#39;t call GetCommandLine directly: wildargs</p>
<p>The stock implementation of wildargs is an alternate WinMain that walks the command line, replacing unquoted wildcards with lists of quoted matches (retaining the wildcard argument if no match) and then calling GetCommandLine to parse that command line.</p>
<p>I believe wildargs is long defunct but if anybody had the .c source it would still work just fine. (Yes, you linked to wildargs.obj to build.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861303">
				<div id="div-comment-861303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861303">
			September 16, 2010 at 8:37 am</a>		</div>

		<p>I did a quick test and started a process like this:</p>
<p>CreateProcess(L&quot;test.exe&quot;,L&quot;command&quot;,NULL,&#8230;.)</p>
<p>In the child process, lpCmdLine is blank and GetCommandLineW() returns just &quot;command&quot;. The exe name is nowhere to be found. The documentation of CreateProcess is not clear if the second parameter should contain the exe name. It says that if the first parameter is NULL then the second should have the exe, but doesn&#39;t say if the exe should be in the second parameter if the first parameter is valid. So what is the true recommended way to use CreateProcess?</p>
<div class="post">[<i>Read the linked article. The convention is mentioned in the documentation for CreateProcess. You would be recommended to follow it. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861323">
				<div id="div-comment-861323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861323">
			September 16, 2010 at 9:40 am</a>		</div>

		<p>The right way in this case would to be to use wmain instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861343">
				<div id="div-comment-861343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">PhilW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861343">
			September 16, 2010 at 10:48 am</a>		</div>

		<p>I wonder if the &quot;strange results&quot; the customer saw were what the documentation says: &quot;If this parameter is an empty string the function returns the path to the current executable file.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861353">
				<div id="div-comment-861353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861353">
			September 16, 2010 at 1:37 pm</a>		</div>

		<p>(OT)</p>
<p>Please consider changing your &quot;body&quot; font-size CSS rule from &quot;1.2em&quot; to &quot;medium&quot;.</p>
<p>&quot;1.2em&quot; is currently yielding an unhinted 12.528 pt font, which looks just awful with ClearType disabled.</p>
<p>&quot;medium&quot; should produce a font that is exactly 12 pt in size on all modern browsers.</p>
<div class="post">[<i>Done. Thanks for the tip. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861373">
				<div id="div-comment-861373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gpb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861373">
			September 16, 2010 at 10:56 pm</a>		</div>

		<p>wouldn&#39;t the right thing to do not be to fail when receiving an argument clearly not well-formed instead of muddling through? Or is this function so old it has to be compatible to functions written in the dark ages?</p>
<div class="post">[<i>You really think a program should be allowed to display the error: &quot;Error: Giving up before even trying to parse the command line&quot;? (Oh, and CommandLineToArgvW dates back to 1994. It&#39;s old enough to drive.) -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861393">
				<div id="div-comment-861393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jules</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861393">
			September 17, 2010 at 2:49 am</a>		</div>

		<p>@Ivo: &quot;The documentation of CreateProcess is not clear if the second parameter should contain the exe name.&quot;</p>
<p>I&#39;d say it could be clearer, but it&#39;s fairly obvious anyway:</p>
<p>&quot;The lpCommandLine parameter can be NULL. In that case, the function uses the string pointed to by lpApplicationName as the command line.&quot;</p>
<p>Strongly suggests that including the application name in the command line is at the very least something you should consider doing, as it wouldn&#39;t be the default behaviour otherwise.</p>
<p>&quot;If both lpApplicationName and lpCommandLine are non-NULL [&#8230;] the null-terminated string pointed to by lpCommandLine specifies the command line. [&#8230;] Because argv[0] is the module name, C programmers generally repeat the module name as the first token in the command line.&quot;</p>
<p>A clear recommendation that the module name (i.e. the .exe file name) should be included in the command line. &nbsp;The suggestion that this is only linked to C programmers is a little strange, as every language I&#39;ve ever used under Windows follows the same command line conventions, but in absence of any other recommendations and without understanding the reasoning for it any programmer would be well advised to follow the advice given.</p>
<p>@Raymond: &#39;You really think a program should be allowed to display the error: &quot;Error: Giving up before even trying to parse the command line&quot;?&#39;</p>
<p>Well, I&#39;d suggest the error should be phrased more like &quot;Error: invalid command line specified&quot;. &nbsp;But, yes, I&#39;d suggest any application should fail in the presence of clearly incorrect data rather than attempting to guess what the data should have been, as the latter is inviting disaster in the case where the guess is incorrect.</p>
<div class="post">[<i>In practice the error message would be &quot;Error: Out of memory&quot; because that&#39;s what most people would consider a failure of CommandLineToArgvW to mean. Either that or the app will crash because it assumes that argc will always be greater than zero. It seems natural that the recovery mode for &quot;no command line&quot; should be &quot;act like the user entered no command line arguments&quot;. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861403">
				<div id="div-comment-861403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861403">
			September 17, 2010 at 3:38 am</a>		</div>

		<p>I found it ironic that while GetCommandLineW was one of the few Unicode methods provided by Windows 95 sadly because CommandLineToArgvW wasn&#39;t provided you couldn&#39;t really do anything useful with it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861413">
				<div id="div-comment-861413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">gpb</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861413">
			September 17, 2010 at 7:02 am</a>		</div>

		<p>[You really think a program should be allowed to display the error: &quot;Error: Giving up before even trying to parse the command line&quot;? -Raymond]</p>
<p>If the only way to get invalid &quot;Commad Lines&quot; is to meddle with them and giving wrong format to a function not supporting this &#8211; why not? It&#39;s not that I want to show this message when given a real-world command line, read by the appropriate function (as told in documentation).</p>
<p>This &quot;trying to somehow figure out what could be meant even if given line noise as input&quot; pseudo-solution has been the source of too many bugs. Better to fail early than show some strange bug later on (or even somehow triggering an remote exploitable security risk because some other function deeper inwards expects well-formed input and does not check good enough (a bug itself, of course))</p>
<p>Of course, if there are (important enough) programs somehow needing this wrongdoing&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-861643">
				<div id="div-comment-861643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Yuhong Bao</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861643">
			September 17, 2010 at 6:29 pm</a>		</div>

		<p>&quot;I found it ironic that while GetCommandLineW was one of the few Unicode methods provided by Windows 95 sadly because CommandLineToArgvW wasn&#39;t provided you couldn&#39;t really do anything useful with it.&quot;</p>
<p>It was provided, look at the exports for the SHELL32 in Win95 to prove it.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-861663">
				<div id="div-comment-861663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">googly</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861663">
			September 18, 2010 at 4:47 am</a>		</div>

		<p>&#39;This &quot;trying to somehow figure out what could be meant even if given line noise as input&quot; pseudo-solution has been the source of too many bugs.&#39;</p>
<p>Amen. You just described half of the IE Trident engine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-861803">
				<div id="div-comment-861803" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100916-00/?p=12843#comment-861803">
			September 20, 2010 at 8:39 am</a>		</div>

		<blockquote><p>
  It seems natural that the recovery mode for &quot;no command line&quot; should be&#8230;
</p></blockquote>
<p>Begging the question. &nbsp;The point at issue is whether the API should fail-fast or attempt recovery. &nbsp;(This is a purely academic debate, since the behavior has already long since been decided.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

