<html>
<head>
<title>If control-specific messages belong to the WM_USER range, why are messages like BM_SETCHECK in the system message range?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>If control-specific messages belong to the WM_USER range, why are messages like BM_SETCHECK in the system message range?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 10, 2007 / year-entry #336</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">When I discussed which message numbers belong to whom, you may have noticed that the messages for edit boxes, buttons, list boxes, combo boxes, scroll bars, and static controls go into the system range even though they are control-specific. How did those messages end up there? They didn't start out there. In 16-bit windows, these...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/12/02/55914.aspx">
When I discussed which message numbers belong to whom</a>,
you may have noticed that the messages for edit boxes,
buttons, list boxes, combo boxes,
scroll bars,
and static controls go into the system range even though
they are control-specific.
How did those messages end up there?
</p>
<p>
They didn't start out there.
</p>
<p>
In 16-bit windows, these control-specific messages
were in the control-specific message range,
as you would expect.
</p>
<pre>
#define LB_ADDSTRING      (WM_USER + 1)
#define LB_INSERTSTRING   (WM_USER + 2)
#define LB_DELETESTRING   (WM_USER + 3)
#define LB_RESETCONTENT   (WM_USER + 5)
#define LB_SETSEL         (WM_USER + 6)
#define LB_SETCURSEL      (WM_USER + 7)
#define LB_GETSEL         (WM_USER + 8)
#define LB_GETCURSEL      (WM_USER + 9)
#define LB_GETTEXT        (WM_USER + 10)
...
</pre>
<p>
Imagine what would have happened had these message
numbers been preserved during the transition to Win32,
</p>
<p>
(Giving you time to exercise your imagination.)
</p>
<p>
Here's a hint.
Since 16-bit Windows ran all programs in the same address space,
programs could do things like this:
</p>
<pre>
char buffer[100];
HWND hwndLB = &lt;a list box that belongs to another process&gt;
SendMessage(hwndLB, LB_GETTEXT, 0, <a HREF="http://blogs.msdn.com/oldnewthing/archive/2004/11/03/251670.aspx">(LPARAM)(LPSTR)</a>buffer);
</pre>
<p>
This reads the text of an item in a list box that belongs to
another process.
Since processes ran in the same address space, the address of the
buffer in the sending process is valid in the receiving process,
so that when the receiving list box copies the result to the buffer,
it all works.
</p>
<p>
Now go back and imagine what would have happened had these
message numbers been preserved during the transition to Win32.
</p>
<p>
(Giving you time to exercise your imagination.)
</p>
<p>
Consider a 32-bit program that does exactly the same thing
that the code fragment above does.
The code probably was simply left unchanged when the
program was ported from 16-bit to 32-bit code,
since it doesn't generate any compiler warnings
and therefore does nothing to draw attention to itself
as needing special treatment.
</p>
<p>
But since processes run in separate address spaces
in Win32, the program now crashes.
Well, more accurately, it crashes <i>that other program</i>,
since it is the other program that tries to copy the text
into the pointer that it was led to believe was a valid buffer
but in fact was a pointer into the wrong address space.
</p>
<p>
Just what you want.
A perfectly legitimate program crashes because of somebody
else's bug.
If you're lucky, the programmers will catch this bug during testing,
but how will they know what the problem is, since their program doesn't
crash; it's some other program that crashes!
If you're not lucky, the bug will slip through testing
(for example, it might be in a rarely-executed code path),
and the experience of the end user is
"Microsoft Word crashes randomly. What a piece of junk."
(When in reality, the crash is being caused by some other program entirely.)
</p>
<p>
To avoid this problem, all the "legacy" messages from the
controls built into the window manager were moved into
the system message category.
That way, when you sent message 0x0189, the window manager
knew that it was <code>LB_GETTEXT</code> and could do the
parameter marshalling for you.
If it had been left in the <code>WM_USER</code> range,
the window manager wouldn't know what to do when it gets message
<code>0x040A</code> since that might be <code>LB_GETTEXT</code>,
or it might be
<code>TTM_HITTESTA</code> or <code>TBM_SETSEL</code>
or any of a number of other control-specific messages.
</p>
<p>
Theoretically, this motion needed to be done only for legacy messages;
i.e., window messages that existed in 16-bit Windows.
(Noting that Windows&nbsp;95 added some new 16-bit messages,
so this remapping had to continue at least through Windows&nbsp;NT&nbsp;4
with the shell update release.)
Nevertheless, the window manager team added the <code>*_GET*INFO</code>
messages in the system message range even though there was no need
to put them there
from a compatibility standpoint.
My suspicion is that it was done to make things easier for
accessibility tools.
</p>
<p>
Note however that placing new messages in the system message range
is more the exception than the rule
for the edit box and other "core" controls.
For example, the new message <code>EM_SETCUEBANNER</code>
has the numeric value <code>0x1501</code>,
which is well into the <code>WM_USER</code> range.
If you try to send this message across processes
without taking the necessary precautions,
you will crash the target process.
</p>
<p>
(Note:
<a HREF="http://blogs.msdn.com/oldnewthing/pages/4520252.aspx">
Standard disclaimers apply</a>.
I won't bother repeating this disclaimer on future articles.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-548163">
				<div id="div-comment-548163" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">joel</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548163">
			September 10, 2007 at 5:21 pm</a>		</div>

		<p>While I&#8217;d have to do some reading up on this (so take it with a grain of salt), my understanding is that the toolkits do provide ways to send messages beyond the basic events and requests that you get with the core X protocol. &nbsp;Some are very high level, like KDE&#8217;s DCOP, through which applications publish an interface which can be invoked either through an API or through a command line program (or even a GUI one, which is kinda fun ;). &nbsp;On the lower level, which is where I get more shady, I&#8217;m sure there is a way, because when you, e.g., change themes, somehow the toolkit is able to notify all of its applications about the theme change. &nbsp;And then there&#8217;s the ICCCM (Inter-Client Communication Conventions Manual), which specifies how clients are to behave in an X environment and also how they communicate with each other, often using ATOMs set on Windows. &nbsp;That&#8217;s how the Window Manager knows what the title of a window is and whether it should stay on top, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548143">
				<div id="div-comment-548143" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nawak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548143">
			September 10, 2007 at 2:06 pm</a>		</div>

		<p>This makes me wonder&#8230; are there Window Managers on other platforms that makes marshalling of user messages possible, for instance the EM_SETCUEBANNER *in the receiving process* would be marked as &quot;LPARAM is a buffer that should be copied&quot; so that these bugs are more easily avoided?</p>
<p>I don&#8217;t know if the need would justify the cost since it is not a security problem (hatchways and all)</p>
<p>Are all Window Managers from the same mold with the same gotchas?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548153">
				<div id="div-comment-548153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BryanK</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548153">
			September 10, 2007 at 2:33 pm</a>		</div>

		<p>Not sure about all other platforms, but X in particular doesn&#8217;t have a separate notion of a &quot;tooltip&quot;. &nbsp;All X cares about is a &quot;window&quot;; a tooltip is a construction of the X toolkit you&#8217;re using (e.g. gtk or qt). &nbsp;It&#8217;s implemented with a separate X window, of course, but all the details are taken care of by the toolkit.</p>
<p>As for marshalling user messages: X does that for *everything* already, not just messages that copy data. &nbsp;(X is network-transparent, so it has to marshal everything.) &nbsp;The low-level X library obviously shares data directly with the user program, but when talking to the X server (and via the X server to other programs, e.g. for a paste), it uses a network message. &nbsp;So it&#8217;s already copying all the required data over the socket to the server. &nbsp;(Or it&#8217;s using the MIT-SHM shared-memory extension. &nbsp;Either way, it has to copy the data into some buffer where it gets either copied to or shared with the X server.)</p>
<p>So no, not all window managers are from the same mold. &nbsp;Some had explicit marshalling requirements built in from the beginning. &nbsp;(I&#8217;d guess that&#8217;s because X was designed on an OS that always required a separation between processes. &nbsp;There was never a way for processes to accidentally share memory (barring a bug in the OS), so this type of message-send operation where the target could copy directly into the source&#8217;s buffer was never used.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548193">
				<div id="div-comment-548193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548193">
			September 11, 2007 at 1:12 am</a>		</div>

		<p>@Miral:</p>
<p>&quot;Unfortunately Windows doesn&#8217;t always know the size of the message so it can&#8217;t do automatic marshalling the way X does. &nbsp;Design flaw? &nbsp;Yes, but without the handy time machine not much can be done at this point (except coming up with something new)&quot;</p>
<p>You know I wonder if this sort of thing is inevitable in popular standards.</p>
<p>E.g. Windows 3.x was popular because it could run well on underpowered systems. E.g. 8086 and 80286 systems with not much memory, dire graphics capabilities and so on.</p>
<p>And it does that because it exploits lots of features that underpowered systems lack. It would have been possible to do a better windowing system (and X isn&#8217;t it) that would have been more scalable, but that windowing system would have crawled on the underpowered systems where it would have competed with Windows.</p>
<p>And the hackish roots of Windows doesn&#8217;t seem to have limited it the long run, as this example of adding marshalling for control specific messages for Win32 shows. So you&#8217;re better off getting a hack out of the door and gaining market share than worrying too much about long term scalability. Because market share means money and the ability to hire smart people to clean things up later.</p>
<p>Actually, the IBM PC standard was originally a short term ugly hack even if now x64, PCI express, SMP and so on have made it a killer workstation platform these days. To the point where companies that used to make much more elegant machines back in the PC-AT days have adopted it instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548183">
				<div id="div-comment-548183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://lambert.geek.nz/' rel='external nofollow' class='url'>Miral</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548183">
			September 10, 2007 at 8:46 pm</a>		</div>

		<p>@BryanK: Unfortunately Windows doesn&#8217;t always know the size of the message so it can&#8217;t do automatic marshalling the way X does. &nbsp;Design flaw? &nbsp;Yes, but without the handy time machine not much can be done at this point (except coming up with something new).</p>
<p>@Raymond: Maybe I just haven&#8217;t poked into enough corners of the Win32 API yet, but what *is* the recommended way of passing cross-process messages like this? &nbsp;I&#8217;d imagine you&#8217;d have to get your process to allocate some memory that&#8217;s visible to both processes (perhaps with different pointers, although ideally with the same ones), and I&#8217;m not sure how you could do that without the cooperation of the other process.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548213">
				<div id="div-comment-548213" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">kopi</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548213">
			September 11, 2007 at 6:05 am</a>		</div>

		<p>Miral, I believe WM_COPYDATA should be used to send messages (including additional user defined data) between processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548223">
				<div id="div-comment-548223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://jasonhaley.com/blog/archive/2007/09/11/140377.aspx' rel='external nofollow' class='url'>Jason Haley</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548223">
			September 11, 2007 at 9:59 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-548353">
				<div id="div-comment-548353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2007/09/11/4857870.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548353">
			September 11, 2007 at 11:07 am</a>		</div>

		<p>Beats me.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-548563">
				<div id="div-comment-548563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20070910-00/?p=25203#comment-548563">
			September 12, 2007 at 2:30 am</a>		</div>

		<p>@Miral: If you really need to send a message specifying a buffer to a window owned by another process you can allocate a buffer inside the process using VirtulaAllocEx (and specify the default value with WriteProcessMemory), then read the result using ReadProcessMemory and clean up the buffer in the remote process with VirtualFreeEx.</p>
<p>For win9x, just create and map a memory mapped file. &nbsp;It&#8217;ll be placed in the section of address space that is shared by all processes.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

