<html>
<head>
<title>Using modular arithmetic to avoid timing overflow problems</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Using modular arithmetic to avoid timing overflow problems</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 31, 2005 / year-entry #134</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>21</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">In an earlier article, I presented a simple way of avoiding timing overflows which seemed to create a bit of confusion. The short version: Given a starting time start, an ending time end and an interval interval, the way to check whether the interval has elapsed is to use the expression end - start >=...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a href="http://blogs.msdn.com/oldnewthing/archive/2004/10/18/243925.aspx"> In an earlier article</a>, I presented a simple way of avoiding timing overflows which seemed to create a bit of confusion.</p>
<p> The short version:  Given a starting time <strong>start</strong>, an ending time <strong>end</strong> and an interval <strong>interval</strong>, the way to check whether the interval has elapsed is to use the expression <code>end - start &gt;= interval</code>. The naive expression <code>end &gt;= start + interval</code> suffers from integer overflow problems. </p>
<p> To simplify the discussion, let's operate in base-100 instead of base-2<sup>32</sup>.  The same logic works, but I think operating in base-100 will be easier to follow. </p>
<p> Base-100 means that we remember only the last two digits of any number. Consider a starting time of <code>start = 90</code> and an interval of <code>interval = 10</code>.  Using the wrong expression yields <code>end &gt;= start + interval = 90+10 = 100 = 0</code>. In other words, <code>end &gt;= 0</code> which is always true since <code>end</code> has the range <code>0...99</code>.  As a result, the wrong expression will think that the interval has expired prematurely. </p>
<p> Using the correct expression, we have <code>end - 90 &gt;= 10</code>. Of the numbers <code>0..99</code>, the ones that give a difference less than 10 are <code>90</code> through <code>99</code>. Once <code>end = 0</code>, the result is <code>0 - 90 = 10</code>, which correctly indicates that 10 ticks have elapsed since 90 once the timer reaches 0. </p>
<p> You can work through a similar mistake using <code>start = 89</code> instead of <code>start = 90</code>; in this case, the wrong expression becomes <code>end &gt;= start + interval = 89 + 10 = 99</code>, or in other words, <code>end &gt;= 99</code>.  This has the opposite problem from the previous case, namely that the expression will fail to detect that the interval has expired once the timer rolls over. </p>
<p> But why does the <code>end - start</code> expression work? It's very simple:  You just have to remember your rules of arithmetic from elementary school. </p>
<p><code> (x - c) - (y - c) = x - c - y + c = x - y </code></p>
<p> In other words, subtracting the same value from both terms of a difference does not affect the final value.  This rule applies even to modular arithmetic (because, as the mathematicians like to say, the set of integers modulo <i>n</i> form an additive group). </p>
<p> This rule is useful because it lets you delay the overflow as long as possible by subtracting the starting point from all your time markers; it has no effect upon time intervals. Wouldn't it be great if <code>start = 0</code>?  Then the overflow won't happen for 100 ticks.  Well, you can act "as if" the starting point were <code>start = 0</code> by simply subtracting <code>start</code> from all your time markers. </p>
<p> Those who prefer a graphical view can think of time passing as the hands around a clock (which wraps around at 60 minutes, say). When you decide to record your start point, rotate the clock so that the "12" precisely lines up with wherever the hand happens to be.  You can now read off the elapsed time directly from your rotated clock.  Rotating your clock is the same as subtracting (or adding) a constant to all time markers. </p>
<p> Of course, this trick falls apart once you have to measure time intervals that come close to the wraparound time of your timer. In our 100-tick timer, for example, trying to measure the passage of 90 ticks is very difficult because there is only a 10-tick window where the inequality is satisfied.  If we fail to catch the timer during that window, we miss it and have to wait another 90 ticks. </p>
<p> So don't do that.  In practical terms, this means that you shouldn't use <code>GetTickCount</code> to measure time intervals longer than 15 days. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (21)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-278703">
				<div id="div-comment-278703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278703">
			May 31, 2005 at 9:19 am</a>		</div>

		<p>I&#8217;ve seen plenty of published code that has this bug in it.  What is even more scary is the number of people who seem to care when I point the problem out.  Often they say that &quot;my program doesn&#8217;t need to run for 49 days&quot; while forgetting that it isn&#8217;t about when the program starts but when the last time the tick counter rolled over.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278713">
				<div id="div-comment-278713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">duggie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278713">
			May 31, 2005 at 9:36 am</a>		</div>

		<p>That&#8217;s mod 100, not base-100.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278723">
				<div id="div-comment-278723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.apptranslator.com' rel='external nofollow' class='url'>Serge Wautier</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278723">
			May 31, 2005 at 9:40 am</a>		</div>

		<p>Tim,</p>
<p>GetTickCount() is lined up with the start-up time of the current process. So there&#8217;s no risk if the program doesn&#8217;t run 49 days in a row.</p>
<p>Of course, this is not a good reason to leave bugs, especially when getting things right is not more expensive than getting them wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278763">
				<div id="div-comment-278763" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dave</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278763">
			May 31, 2005 at 11:20 am</a>		</div>

		<p>Since GetTickCount is pretty grainy, I use QueryPerformanceCounter. I just wish there was an elegant workaround to its hardware-related bugs.</p>
<p><a rel="nofollow" target="_new" href="http://support.microsoft.com/default.aspx?scid=kb;en-us;274323" rel="nofollow">http://support.microsoft.com/default.aspx?scid=kb;en-us;274323</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278793">
				<div id="div-comment-278793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">b100dian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278793">
			May 31, 2005 at 1:49 pm</a>		</div>

		<p>Given that you know that the maximum &#8216;end&#8217; is X (60minutes, in the clock example), one should also do<br />
<br />(end &#8211; start)%X &gt;= interval</p>
<p>This way, if &#8216;end&#8217; got re-set to zero or less than &#8216;start&#8217;, you still have a correct elapsed time.</p>
<p>BTW: this &#8216;negative number modulo&#8217; thing does not work as expected in Windows Calc.exe or Excel or anything. Any idea why?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-278813">
				<div id="div-comment-278813" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278813">
			May 31, 2005 at 2:10 pm</a>		</div>

		<p>Works as expected for me. -1 mod 2 = -1. See section 6.5.5 of the C standard. Perhaps it is your expectations that are wrong.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278833">
				<div id="div-comment-278833" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278833">
			May 31, 2005 at 3:18 pm</a>		</div>

		<p>I&#8217;m pretty sure Raymond means unsigned modular arithmetic here. To simulate unsigned integers to what the C standard requires in calc.exe: lets say you do (a-c) % 60, if (a-c) is negative, keep adding 61 to it until it&#8217;s positive before you do mod. It&#8217;s a good idea not to give the modulus operator a negative integer in general because it&#8217;s undefined or defined differently depending on the context and whatever invariant whoever defined it wants to support.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-278853">
				<div id="div-comment-278853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278853">
			May 31, 2005 at 3:58 pm</a>		</div>

		<p>er, asdf, I&#8217;m pretty sure you meant &quot;add 60&quot; rather than &quot;add 61&quot; ;)</p>
<p>As far as GetTickCount() goes, it doesn&#8217;t matter if the ticker has wrapped since system startup.  As long as the following three things are true, you&#8217;ll be OK:<br />
<br />1) Follow the formula: end &#8211; start &gt;= threshold<br />
<br />2) Don&#8217;t try to use a threshold that is too large (15 days is too large)<br />
<br />3) Check frequently (once every 15 days isn&#8217;t frequently enough)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cornedbee even thread-even depth-1" id="comment-278733">
				<div id="div-comment-278733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">CornedBee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278733">
			May 31, 2005 at 10:00 am</a>		</div>

		<p>According to MSDN, GetTickCount starts at *system* launch, so your process doesn&#8217;t matter &#8211; the total system running time does. And modern Windows versions can actually run for 49 days without crashing.</p>
<p>&gt; The GetTickCount function retrieves the number of<br />
<br />&gt; milliseconds that have elapsed since the system was<br />
<br />&gt; started.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278893">
				<div id="div-comment-278893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278893">
			June 1, 2005 at 2:03 am</a>		</div>

		<p>Modulus with negative numbers depends on how you do your rounding for integer division.  a % b == a &#8211; b * (a / b)</p>
<p>Calc (and C) rounds towards 0, so -x % +y is negative.  Rounding towards -infinity would make it positive.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278903">
				<div id="div-comment-278903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278903">
			June 1, 2005 at 2:13 am</a>		</div>

		<p>&quot;And modern Windows versions can actually run for 49 days without crashing.&quot;</p>
<p>&#8230; and getting an update that requires a reboot?</p>
<p>-Jonathan</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278913">
				<div id="div-comment-278913" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">b100dian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278913">
			June 1, 2005 at 4:25 am</a>		</div>

		<p>AFAIK, &#8216;a mod b&#8217; it&#8217;s an operation that<br />
<br />&#8211; requires b to be positive<br />
<br />&#8211; gives in return the reminder of a/b, which is a number between 0 and b-1</p>
<p>so:<br />
<br />-2 mod 7 = 5 instead of -2<br />
<br /><a rel="nofollow" target="_new" href="http://www.google.ro/search?q=-2+mod+7" rel="nofollow">http://www.google.ro/search?q=-2+mod+7</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278923">
				<div id="div-comment-278923" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim Smith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278923">
			June 1, 2005 at 8:42 am</a>		</div>

		<p>Serge, </p>
<p>That isn&#8217;t true at all.  If it was, why does my test program that I just ran show a tick count of 1139467562?  That would be 13 days&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-278933">
				<div id="div-comment-278933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.uesp.net' rel='external nofollow' class='url'>Daveh</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278933">
			June 1, 2005 at 9:20 am</a>		</div>

		<p>I believe this is a difference between the old clock() which starts at 0 each time the process is run and GetTickCount() which begins at 0 when Windows is started.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-278953">
				<div id="div-comment-278953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Veritas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278953">
			June 1, 2005 at 9:42 am</a>		</div>

		<p>Its shocking that in 2005 we still have to worry about things like limits.</p>
<p>Any programming language which doesn&#8217;t automatically allocate enough space for a variable to do whatever it needs to do, deserves to be deprecated.</p>
<p>This would make programming much easier.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-278963">
				<div id="div-comment-278963" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-278963">
			June 1, 2005 at 9:50 am</a>		</div>

		<p>&quot;Any programming language which doesn&#8217;t automatically allocate enough space for a variable to do whatever it needs to do, deserves to be deprecated.&quot;</p>
<p>All numeric types should be arbitrary-precision by default? The only language I can think of that does this is bc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-279003">
				<div id="div-comment-279003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-279003">
			June 1, 2005 at 10:48 am</a>		</div>

		<p>lisp and haskell (and probably their closer relatives) are arbitrary precision by default, and I&#8217;d imagine some of the newer scriptlike languages are as well.  This often makes it impossible to take full advantage of the machines speed, since any time you want to use size-limited numbers for performance, there&#8217;s an extra flag indicating it that you need to maintain.</p>
<p>Seeking to make programming easier at any cost is a shortsighted effort.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-279073">
				<div id="div-comment-279073" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">cola</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-279073">
			June 1, 2005 at 12:33 pm</a>		</div>

		<p>Yup, if you want easier coding you can write in a scripting language.  Unfortunately, this is rarely a palatable option.  Maybe it should become more acceptable to code professional applications in Lisp or Python or Visual Basic?  Or maybe the languages themselves should be improved and accelerated?</p>
<p>I don&#8217;t think Word N could be written in Visual Basic with C++ extensions for the heavy processing and the visual widgets.  It might be technically possible, but imagine the damage to Microsoft&#8217;s reputation!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-279133">
				<div id="div-comment-279133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-279133">
			June 1, 2005 at 9:34 pm</a>		</div>

		<p>Actually that makes programming much harder (for those of us that like robust code at least): basic operations aren&#8217;t O(1) anymore which makes algorithms harder to reason about, all arithmetic operations aren&#8217;t atomic (maybe, it depends on the language), any arithmetic operation can run out of memory (presumably you would throw an exception to handle this as opposed to returning an incorrect or dummy value, either way, you would have to detect and handle that somehow).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-280203">
				<div id="div-comment-280203" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Walker</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-280203">
			June 6, 2005 at 11:39 am</a>		</div>

		<p>Some of these arithmetic problems would essentially go away if there was a 64 bit version of GetTickCount.  Something like GetTickCount64 would do nicely.  There would still be rollover problems such has timing windows that cause very long waits.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-345003">
				<div id="div-comment-345003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/oldnewthing/archive/2006/01/26/517849.aspx' rel='external nofollow' class='url'>The Old New Thing</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20050531-22/?p=35493#comment-345003">
			February 10, 2006 at 11:54 am</a>		</div>

		<p>Putting together pieces you already know.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

