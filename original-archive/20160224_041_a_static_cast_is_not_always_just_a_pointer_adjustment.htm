<html>
<head>
<title>A static_cast is not always just a pointer adjustment</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A static_cast is not always just a pointer adjustment</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 24, 2016 / year-entry #42</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>15</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">That null pointer thingie.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Even without considering virtual base classes,
a
<code>static_cast</code>
to move between a base class and a derived class
can be more than just a pointer adjustment.
</p>
<p>
Consider the following classes and functions.
</p>
<pre>
class A
{
public:
 int a;
 void DoSomethingA();
};

class B
{
public:
 int b;
 void DoSomethingB();
};

class C : public A, public B
{
public:
 int c;
 void DoSomethingC();
};

B* GetB(C* c)
{
 return static_cast&lt;B*&gt;(c);
}

void AcceptB(B* b);

void AcceptC(C* c)
{
 AcceptB(c);
}
</pre>
<p>
Suppose the compiler decided to lay out the memory for
<code>C</code> like this:
</p>
<table BORDER="0" STYLE="border-collapse: collapse">
<tr>
<td><code>int a;</code></td>
<td>} <code>A</code></td>
<td ROWSPAN="3" VALIGN="center" STYLE="font-size: 300%">}</td>
<td ROWSPAN="3" VALIGN="center"><code>C</code></td>
</tr>
<tr>
<td><code>int b;</code></td>
<td>} <code>B</code></td>
</tr>
<tr>
<td><code>int c;</code></td>
<td></td>
</tr>
</table>
<p>
Now, you would think that converting a pointer to a <code>C</code>
into a pointer to a <code>B</code> would be a simple matter of
adding <code>sizeof(int)</code>,
since that's what you need to do to get from the <code>a</code>
to the <code>b</code>.
</p>
<p>
Unless you happen to have started with a null pointer.
</p>
<p>
The rule for null pointers is that casting a null pointer to
anything results in another null pointer.
</p>
<p>
This means that if the parameter to <code>GetB</code> is
a null pointer, the function
cannot return <code>nullptr + sizeof(int)</code>;
it has to return <code>nullptr</code>.
</p>
<pre>
GetB:
    xor rax, rax
    test rcx, rcx
    jz @F
    lea rax, [rcx+sizeof(int)]
@@: ret
</pre>
<p>
Similarly, if the parameter to
<code>AcceptC</code> is <code>nullptr</code>,
then it must call
<code>AcceptB</code> with <code>nullptr</code>.
</p>
<pre>
AcceptC:
    test rcx, rcx
    jz   @F
    add  rcx, sizeof(int)
@@: jmp  AcceptB
</pre>
<p>
A na&iuml;ve compiler would insert all these conditional jumps
every time you cast between a base class and a derived class
that involves an adjustment.
But this is also a case where a compiler that
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2012/08/31/10345196.aspx">
takes advantage of undefined behavior</a>
can
<a HREF="http://blogs.msdn.com/b/oldnewthing/archive/2014/06/27/10537746.aspx">
optimize the test away</a>:
If it sees that every code path through the
<code>static_cast</code> dereferences either the
upcast or downcast pointer,
then that means that if the pointer being converted were
<code>nullptr</code>, it would result in undefined behavior.
Therefore, the compiler can assume that the pointer is never
<code>nullptr</code> and remove the test.
</p>
<pre>
void AcceptC2(C* c)
{
 c-&gt;DoSomethingB();
}
</pre>
<p>
Here, the test can be elided because the result of the conversion
is immediate dereferenced in order to call the
<code>B::Do&shy;SomethingB</code> method.
The C++ language says that if you try to call an instance method on a null
pointer, the behavior is undefined.
Doesn't matter whether the method
actually accesses any member variables;
just the fact that you invoked an instance method is enough to guarantee
that the pointer is not null.
Therefore, the <code>AcceptC2</code> function compiles to
</p>
<pre>
AcceptC2:
    add rcx, sizeof(int)
    jmp B::DoSomethingB
</pre>
<p>
The same logic applies on the receiving end of the method call:
A method call can assume that <code>this</code> is never null.
</p>
<pre>
void C::DoSomethingC()
{
 AcceptB(this);
}

C::DoSomethingC:
    add rcx, sizeof(int)
    jmp AcceptB
</pre>
<p>
Since <code>this</code> is never null,
the conversion from <code>C*</code> to <code>B*</code>
can elide the test and perform the adjustment unconditionally.
</p>
<p>
This means that you could add a dummy method to ever class:
</p>
<pre>
class C : public A, public B
{
public:
 <font COLOR="blue">void IsNotNull() { }</font>
 int c;
 void DoSomethingC();
};
</pre>
<p>
and call <code>c-&gt;IsNotNull()</code> to tell the compiler,
"I guarantee on penalty of undefined behavior that <code>c</code>
is not null."
</p>
<pre>
void AcceptC3(C* c)
{
 c-&gt;IsNotNull();
 AcceptB(c);
}

AcceptC3:
    add rcx, sizeof(int)
    jmp AcceptB
</pre>
<p>
I don't know whether any compilers actually take advantage
of this hint, but at least this is a way of providing it in
a standard-conforming way.
</p>
<p>
Now, it looks like the purpose of this article is to delve
into optimization tweaking in order to remove unwanted
tests,
but that wasn't actually the point.
The point of the article was to explain what these tests are for.
You'll be stepping through some code, and you'll see these
strange tests against zero,
so here's an explanation of why those tests are there.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (15)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1 parent" id="comment-1227911">
				<div id="div-comment-1227911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1227911">
			February 24, 2016 at 7:07 am</a>		</div>

		<p>I doubt a compiler like Microsoft Visual C++ could take advantage of this, because some MFC stuff relies on this not being UB, at least on inline methods (such as CWnd::GetSafeHwnd()) that outright include a test on whether &#8216;this&#8217; is null.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1227932">
				<div id="div-comment-1227932" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Martin Bonner</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1227932">
			February 24, 2016 at 8:14 am</a>		</div>

		<p>@Medinoc:  They could:<br />
a) Add an option to allow the optimization.<br />
b) Say that GetSafeHwnd only works if CWnd is the *first* base class.  (In which case the addition is not required).<br />
c) Add a magic __attribute__ which says &#8220;keep the checks in for adjust a pointer to this class&#8221;.</p>
<p>I bet GCC uses an optimization like this.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1227961">
				<div id="div-comment-1227961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1227961">
			February 24, 2016 at 9:00 am</a>		</div>

		<p>In this case, it&#8217;s an inline function, so the optimizer can see the if (this == NULL) check.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2 parent" id="comment-1228021">
				<div id="div-comment-1228021" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cesar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228021">
			February 24, 2016 at 11:07 am</a>		</div>

		<p>The tests on whether &#8216;this&#8217; is null might be a leftover from pre-standard (before C++98) versions of C++.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-archangelpip even depth-3" id="comment-1228102">
				<div id="div-comment-1228102" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Darran+Rowe' rel='external nofollow' class='url'>Darran Rowe</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228102">
			February 25, 2016 at 5:04 am</a>		</div>

		<p>I&#8217;m not sure, it may be also a case of knowing the compiler too well at that point.<br />
I know for a fact that I have done some silly checks based on knowing the compiler too well.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1227952">
				<div id="div-comment-1227952" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1227952">
			February 24, 2016 at 8:59 am</a>		</div>

		<p>For the guy who wrote if (this == NULL) { /* logic here */ }, his code is starting to look really long in the tooth.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2 parent" id="comment-1228081">
				<div id="div-comment-1228081" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228081">
			February 24, 2016 at 8:02 pm</a>		</div>

		<p>Bjarne Stroustrup himself did this in CFront (source: <a href="http://www.i-programmer.info/programming/cc/9212-finding-bugs-in-the-first-c-compiler-what-does-bjarne-think.html" rel="nofollow">http://www.i-programmer.info/programming/cc/9212-finding-bugs-in-the-first-c-compiler-what-does-bjarne-think.html</a>). Granted, that was a very different time.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1228221">
				<div id="div-comment-1228221" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228221">
			February 25, 2016 at 2:19 pm</a>		</div>

		<p>That&#8217;s if (this == NULL) { /* error trap here */ } which I still think is reasonable.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1228231">
				<div id="div-comment-1228231" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228231">
			February 25, 2016 at 3:45 pm</a>		</div>

		<p>The problem is that the compiler is free to remove that entire conditional block because it only executes when something &#8220;impossible&#8221; happens and is thus undefined behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1228451">
				<div id="div-comment-1228451" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228451">
			February 28, 2016 at 3:34 am</a>		</div>

		<p>The problem is that as soon as you have undefined behavior, it also infects everything else in the program. Meaning the compiler may not just optimize that one check away, it could do anything with the function (realistic possibility I&#8217;d say) or the whole program (less likely to happen but theoretically possible).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1228042">
				<div id="div-comment-1228042" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Krishty</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228042">
			February 24, 2016 at 2:18 pm</a>		</div>

		<p>Just use a kind of assert() macro that evaluates to __assume() in release builds.</p>
<p>assert(c != NULL);</p>
<p>is easier to understand, does not require changes to the class, and even old Microsoft compilers (early 2000 era) understand __assume() involving null pointers properly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1228061">
				<div id="div-comment-1228061" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kurt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228061">
			February 24, 2016 at 7:32 pm</a>		</div>

		<p>I would guess it&#8217;s as likely that the compiler would see IsNotNull is an empty inline and optimise it away first.  Maybe you can hint this to compilers by passing around a reference instead of a pointer?  Does &amp;static_cast&lt;B&amp;&gt;(*c) remove the nullptr check?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1228101">
				<div id="div-comment-1228101" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228101">
			February 25, 2016 at 2:23 am</a>		</div>

		<p>Clang can complain if you compare this with null, with a message something like:</p>
<p>error: &#8216;this&#8217; pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true [-Werror,-Wundefined-bool-conversion]</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1228211">
				<div id="div-comment-1228211" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Fuz</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1228211">
			February 25, 2016 at 1:14 pm</a>		</div>

		<p>The same weird jump instruction exists with placement new, because the compiler skips the constructor call if the pointer is null:</p>
<p>new (ptr) Type();</p>
<p>test        rax,rax<br />
je          SkipConstructor<br />
mov         rcx,rax<br />
call        Type::Type<br />
SkipConstructor:</p>
<p>__assume(ptr) (or other UB magic you care to use) will also remove this redundant null test.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1229011">
				<div id="div-comment-1229011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Random832</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160224-00/?p=93081#comment-1229011">
			March 3, 2016 at 10:32 am</a>		</div>

		<p>I like to call this sort of thing &#8220;spooky undefined behavior at a distance&#8221;. Many people assume these things are optimizer bugs, because they assume that even though the thing they&#8217;re doing is undefined by the standard, they assume their architecture&#8217;s known behavior for their mental model of how it works means it&#8217;s defined by the implementation they are using.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

