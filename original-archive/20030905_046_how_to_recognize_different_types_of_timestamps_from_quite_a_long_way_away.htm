<html>
<head>
<title>How to recognize different types of timestamps from quite a long way away</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How to recognize different types of timestamps from quite a long way away</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 5, 2003 / year-entry #47</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">The great thing about timestamps is that there are so many to choose from.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
The great thing about timestamps is that there are so many to choose from. Sometimes,
while debugging (or reading incomplete documentation) you'll find a timestamp and
wonder how to convert it into something readable. Here are some tips. 
</p>
<p>
We will use November 26, 2002 at 7:25p PST as our sample time. 
</p>
<p>UNIX timestamps are in seconds since January 1, 1970 UTC. It is a 32-bit number, the
only 32-bit number in common use as a timestamp. </p>
<p>
November 26, 2002 at 7:25p PST = 0x3DE43B0C. 
</p>
<p>
If it's a 32-bit value starting with "3", it's probably a UNIX time. (The "3" era began
in 1995 and ends in 2004.) 
</p>
<p>
To convert these values to something readable, you have several choices. 
</p>
<p>
The C runtime time_t value is the same as a UNIX timestamp, so you can use the <code>ctime()</code> function,
for example. 
</p>
<p>
This is the time format used by the C runtime and by the Windows NT event log. 
</p>
<h2>Number two: The Win32 FILETIME</h2>
<p>Win32 FILETIME values count 100-nanosecond intervals since January 1, 1600 UTC. It
is a 64-bit number. </p>
<p>
November 26, 2002 at 7:25p PST = 0x01C295C4:91150E00. 
</p>
<p>
If it's a 64-bit value starting with "01" and a letter, it's probably a Win32 FILETIME.
The "01A" era began in 1972 and the "01F" era ends in 2057. 
</p>
<p>
To convert these values to something readable, you can use the <code>FileTimeToSystemTime()</code> function
followed by <code>GetDateFormat()</code> and <code>GetTimeFormat()</code>. 
</p>
<h2>Number three: The CLR System.DateTime</h2>
<p><strong>Warning: Actual .NET content</strong> (I'm sorry).
CLR System.DateTime values count 100-nanosecond intervals since January 1, 1 UTC.
It is a 64-bit number. These aren't used much yet. </p>
<p>
November 26, 2002 at 7:25p PST = 0x08C462CB:FCED3800. (? somebody check my math) 
</p>
<p>
If it's a 64-bit value starting with "08" and a letter, it's probably a CLR System.DateTime.
The "08A" began in 1970 and the "08F" era ends in 2056. 
</p>
<p>
To convert these values to something readable, construct a System.DateTime object
passing the 64-bit time value as the constructor parameter. 
</p>
<h2>Number four: The DOS date/time format</h2>
<p>
The DOS date/time format is a bitmask: 
</p>
<pre>               24                16                 8                 0
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
|Y|Y|Y|Y|Y|Y|Y|M| |M|M|M|D|D|D|D|D| |h|h|h|h|h|m|m|m| |m|m|m|s|s|s|s|s|
+-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+
 \___________/\________/\_________/ \________/\____________/\_________/
     year        month       day      hour       minute        second
</pre>
<p>The year is stored as an offset from 1980. Seconds are stored in two-second increments.
(So if the "second" value is 15, it actually represents 30 seconds.) </p>
<p>
These values are recorded in <i>local time</i>. 
</p>
<p>
November 26, 2002 at 7:25p PST = 0x2D7A9B20. 
</p>
<p>
To convert these values to something readable, convert it to a FILETIME via DosDateTimeToFileTime,
then convert the FILETIME to something readable. 
</p>
<h2>Number five: OLE Automation date format</h2>
<p>
The OLE automation date format is a floating point value, counting days since midnight
30 December 1899. Hours and minutes are represented as fractional days. 
</p>
<h2>Converting among these formats</h2>
<p>
Often there is no direct conversion between two formats; you will have to go through
some intermediary formats. 
</p>
<dl>
<dt>UNIX timestamp to/from Win32 FILETIME </p>
<dd>Converting a UNIX timestamp to a WIn32 FILETIME is described in
    <a HREF="http://support.microsoft.com/kb/167296">
    KB article Q167297</a>
    and
    <a HREF="http://msdn.microsoft.com/en-us/library/ms724228">
    a scaled-down version of the article
    is also available in the Platform SDK</a>.
    Some high school algebra will get you the reverse conversion.</p>
<dt>FILETIME to/from SYSTEMTIME </p>
<dd>Use FileTimeToSystemTime() and SystemTimeToFileTime().</p>
<dt>FILETIME to/from System.DateTime </p>
<dd>Use System.DateTime.FromFileTime() and System.DateTime.ToFileTime().</p>
<dt>OLE date to/from System.DateTime </p>
<dd>Use System.DateTime.FromOADate() and System.DateTime.ToOADate().</p>
<dt>DOS date/time to/from FILETIME </p>
<dd>Use DosDateTimeToFileTime() and FileTimeToDosDateTime().</p>
<dt>DOS date/time to/from SYSTEMTIME </p>
<dd>Parse it yourself.</p>
<dt>SYSTEMTIME to/from OLE date. </p>
<dd>Use SystemTimeToVariantTime() and VariantTimeToSystemTime(),
    or use VarDateFromUdate() and VarUdateFromDate().</p>
<dt>DOS date/time to/from OLE date. </p>
<dd>Use DosDateTimeToVariantTime() and VariantTimeToDosDateTime(). 
</dl>
<p>
Let's see if I can draw a little chart.
</p>
<svg id="svgContent" xmlns="http://www.w3.org/2000/svg" version="1.1"
     stroke-width="1.7">
  <defs>
    <style>
        /* blog software eats style elements, so this will never make it into the HTML */
        line { stroke: black; marker-start: url(#arrowstart); marker-end: url(#arrowend); }
    </style>
    <marker id="arrowstart" viewbox="0 0 8 8" orient="auto"
            refX="2" refY="4" style="overflow:visible">
      <path d="M 8,8 L 0,4 L 8,0 C 7,2 7,6 8,8 Z" />
    </marker>
    <marker id="arrowend" viewbox="0 0 8 8" orient="auto"
            refX="6" refY="4" style="overflow:visible">
      <path d="M 0,8 L 8,4 L 0,0 C 1,2 1,6 0,8 Z" />
    </marker>
  </defs>
  <text x="20pt" y="10pt">UNIX</text>
  <line x1="40pt" y1="15pt" x2="40pt" y2="25pt" stroke="black" marker-start="url(#arrowstart)" marker-end="url(#arrowend)" /><!-- UNIX <-> FILETIME -->
  <text x="10pt" y="40pt">FILETIME</text>
  <line x1="40pt" y1="45pt" x2="40pt" y2="96pt" stroke="black" marker-start="url(#arrowstart)" marker-end="url(#arrowend)" /><!-- FILETIME <-> SYSTEMTIME -->
  <line x1="70pt" y1="36pt" x2="95pt" y2="36pt" stroke="black" marker-start="url(#arrowstart)" marker-end="url(#arrowend)" /><!-- FILETIME <-> DateTime -->
  <text x="100pt" y="40pt">System.DateTime</text>
  <line x1="140pt" y1="45pt" x2="140pt" y2="96pt" stroke="black" marker-start="url(#arrowstart)" marker-end="url(#arrowend)" /><!-- DateTime <-> OLE -->
  <text x="10pt" y="110pt">SYSTEMTIME</text>
  <line x1="90pt" y1="105pt" x2="115pt" y2="105pt" stroke="black" marker-start="url(#arrowstart)" marker-end="url(#arrowend)" /><!-- SYSTEMTIME <-> OLE -->
  <text x="120pt" y="110pt">OLE date</text>
  <text x="60pt" y="70pt">DOS date</text>
  <line x1="60pt" y1="45pt" x2="70pt" y2="56pt" stroke="black" marker-start="url(#arrowstart)" marker-end="url(#arrowend)" /><!-- FILETIME <-> DOS -->
  <line x1="60pt" y1="96pt" x2="70pt" y2="76pt" stroke="black" marker-start="url(#arrowstart)" marker-end="url(#arrowend)" /><!-- SYSTEMTIME <-> DOS -->
  <line x1="120pt" y1="96pt" x2="100pt" y2="76pt" stroke="black" marker-start="url(#arrowstart)" marker-end="url(#arrowend)" /><!-- OLE <-> DOS -->
</svg>
<p>
I'm not sure that chart actually cleared up anything. 
</p>
<p>
If you allow yourself to use MFC, then there are some more conversions available. 
</p>
<dl>
<dt>UNIX time, FILETIME, SYSTEMTIME, or DOS date/time to OLE date format. </p>
<dd>
Use the MFC COleDateTime helper object. 
</dl>
<p>
I won't bother trying to add these (unidirectional) arrows to the chart above. 
</p>
<p>
<a href="https://blogs.msdn.microsoft.com/brada/">Brad Abrams' blog</a> followed some of
these arrows and produced <a href="https://blogs.msdn.microsoft.com/brada/2003/07/30/converting-to-a-datetime-from-time_t/">a
cute little formula to convert UNIX time_t directly to System.DateTime</a>. 
</p>
<h2>Other time formats</h2>
<p>
JScript's Date object constructor can construct from an integer representing milliseconds
since 1970. This is the same as UNIX time, just multiplied by 1000. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-123363">
				<div id="div-comment-123363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ken</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-123363">
			September 5, 2003 at 9:37 pm</a>		</div>

		<p>I get a different result for the 64-bit CLR System.DateTime. I suppose one reason the Win32 FILETIME starts in 1600 is to avoid the ugly switchover from the Julian to Gregorian calendars in 1582, when ten days were dropped in October. One way to calculate it without resorting to fancy formulas would be to calculate the number of days to 1-Jan-2003:</p>
<p>2000 years * 365.25 days/year in Julian calendar<br />
&#8211; 10 days dropped in 1582<br />
&#8211; 3 days for leap years in Julian calendar that aren&#8217;t in Gregorian since (1700, 1800, 1900)<br />
+ 365 days for 2001<br />
+ 365 days for 2002</p>
<p>then work backwards to 26-Nov-2002:</p>
<p>&#8211; 31 days in December<br />
&#8211; (last) 5 days in November<br />
= 731,181 days from 1-Jan-0001</p>
<p>The rest is pretty straightforward. PST is 8 hours behind UTC, so 19:25PST is actually &quot;27:25&quot;:</p>
<p>731,181 days * 86,400 sec/day<br />
+ 27 hours * 3600 sec/hour<br />
+ 25 mins * 60 sec/min<br />
* 10,000,000 hundred-nanosecs/sec<br />
= 0x8c4656e:085f8e00</p>
<p>I cross-checked that with both a calendar object and some Julian Day formulas and they matched; but frankly I&#8217;m still not 100% sure. At least that obscure calendar knowledge:</p>
<p><a href="http://www.tondering.dk/claus/cal/node3.html" rel="nofollow">http://www.tondering.dk/claus/cal/node3.html</a></p>
<p>finally came in handy.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-123373">
				<div id="div-comment-123373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/BradA' rel='external nofollow' class='url'>Brad Abrams</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-123373">
			September 6, 2003 at 7:52 pm</a>		</div>

		<p>Ah, I knew it!  When I asked Raymond to start a blog a few months ago I know he&#8217;d eventually be forced into writting about managed code.    ;-)<br />
Do Raymonds readers want to hear more about managed code from him? </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-123383">
				<div id="div-comment-123383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://dotsql.dyndns.org:8674/weblog/' rel='external nofollow' class='url'>Damit</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-123383">
			September 6, 2003 at 9:26 pm</a>		</div>

		<p>Managed ways of interacting with Win32 UI/shell elements would be cool. :-)</p>
<p>Or a series on &quot;rolling your own compliant scrollbar in .NET&quot; ?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-123393">
				<div id="div-comment-123393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">runtime</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-123393">
			September 12, 2003 at 3:31 pm</a>		</div>

		<p>I thought I might share the following time functions that I just implemented. I had to implement these because Windows CE does not implement such rudimentary standard library functions as time(). NB: There might be a precision bug in my code because my UnixTimeFromFileTime() and UnixTimeToFileTime() functions do not produce identical roundtrip results. The low FILETIME bits are slightly different. Use at your own risk! :-) </p>
<p>-runtime</p>
<p>#ifdef UNDER_CE<br />
typedef unsigned long time_t;<br />
#endif // UNDER_CE</p>
<p>void UnixTimeToSystemTime(time_t unixtime, SYSTEMTIME* systemtime)<br />
{<br />
	FILETIME filetime;<br />
	UnixTimeToFileTime(unixtime, &amp;filetime);<br />
	FileTimeToSystemTime(&amp;filetime, systemtime);<br />
}</p>
<p>void UnixTimeToFileTime(time_t unixtime, FILETIME* filetime)<br />
{<br />
    LONGLONG longlong = Int32x32To64(unixtime, 10000000) + 116444736000000000;<br />
    filetime-&gt;dwLowDateTime = (DWORD) longlong;<br />
    filetime-&gt;dwHighDateTime = longlong &gt;&gt; 32;<br />
}</p>
<p>time_t UnixTimeFromFileTime(const FILETIME* filetime)<br />
{<br />
	LONGLONG longlong = filetime-&gt;dwHighDateTime;<br />
	longlong &lt;&lt;= 32;<br />
	longlong |= filetime-&gt;dwLowDateTime;<br />
	longlong -= 116444736000000000;<br />
	return longlong / 10000000;<br />
}</p>
<p>time_t UnixTimeFromSystemTime(const SYSTEMTIME* systemtime)<br />
{<br />
	// convert systemtime to filetime<br />
	FILETIME filetime;<br />
	SystemTimeToFileTime(systemtime, &amp;filetime);</p>
<p>	// convert filetime to unixtime<br />
	time_t unixtime = UnixTimeFromFileTime(&amp;filetime);</p>
<p>#ifdef _DEBUG<br />
	{<br />
		FILETIME roundtrip;<br />
		UnixTimeToFileTime(unixtime, &amp;roundtrip);<br />
		assert(UnixTimeFromFileTime(&amp;roundtrip) == unixtime);<br />
	}<br />
#endif // _DEBUG</p>
<p>	return unixtime;<br />
}</p>
<p>#ifdef UNDER_CE<br />
time_t time(time_t* out)<br />
{<br />
	SYSTEMTIME systemtime;<br />
	GetLocalTime(&amp;systemtime);<br />
	time_t unixtime = UnixTimeFromSystemTime(&amp;systemtime);<br />
	if (out)<br />
		*out = unixtime;</p>
<p>	return unixtime;<br />
}<br />
#endif // UNDER_CE</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-166853">
				<div id="div-comment-166853" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anuj Agarwal</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-166853">
			April 22, 2004 at 5:36 pm</a>		</div>

		<p>Here is .NET code to convert between time_t and DateTime &#8211;</p>
<p>	 public sealed class ConvertTime<br />
<br />	 {<br />
<br />		 /// &lt;summary&gt;<br />
<br />		 /// Private constructor to prevent the class from being instantiated.<br />
<br />		 /// &lt;/summary&gt;<br />
<br />		 private ConvertTime() {}</p>
<p>		 private static DateTime origin = System.TimeZone.CurrentTimeZone.ToLocalTime(new DateTime(1970, 1, 1, 0, 0, 0));</p>
<p>		 /// &lt;summary&gt;<br />
<br />		 /// time_t is an int representing the number of seconds since Midnight UTC 1 Jan 1970 on the Gregorian Calendar.<br />
<br />		 /// &lt;/summary&gt;<br />
<br />		 /// &lt;param name=&quot;time_t&quot;&gt;&lt;/param&gt;<br />
<br />		 /// &lt;returns&gt;&lt;/returns&gt;<br />
<br />		 public static DateTime ToDateTime(int time_t)<br />
<br />		 {<br />
<br />			 DateTime convertedValue = origin + new TimeSpan(time_t * TimeSpan.TicksPerSecond);<br />
<br />			 if (System.TimeZone.CurrentTimeZone.IsDaylightSavingTime(convertedValue) == true)<br />
<br />			 {<br />
<br />				 System.Globalization.DaylightTime daylightTime = System.TimeZone.CurrentTimeZone.GetDaylightChanges(convertedValue.Year);<br />
<br />				 convertedValue = convertedValue + daylightTime.Delta;<br />
<br />			 }<br />
<br />			 return convertedValue;<br />
<br />		 }</p>
<p>		 /// &lt;summary&gt;<br />
<br />		 /// time_t is an int representing the number of seconds since Midnight UTC 1 Jan 1970 on the Gregorian Calendar.<br />
<br />		 /// &lt;/summary&gt;<br />
<br />		 /// &lt;param name=&quot;time&quot;&gt;&lt;/param&gt;<br />
<br />		 /// &lt;returns&gt;&lt;/returns&gt;<br />
<br />		 public static int To_time_t(DateTime time)<br />
<br />		 {<br />
<br />			 DateTime convertedValue = time;<br />
<br />			 if (System.TimeZone.CurrentTimeZone.IsDaylightSavingTime(convertedValue) == true)<br />
<br />			 {<br />
<br />				 System.Globalization.DaylightTime daylightTime = System.TimeZone.CurrentTimeZone.GetDaylightChanges(convertedValue.Year);<br />
<br />				 convertedValue = convertedValue &#8211; daylightTime.Delta;<br />
<br />			 }<br />
<br />			 long diff = convertedValue.Ticks &#8211; origin.Ticks;<br />
<br />			 return (int)(diff / TimeSpan.TicksPerSecond);<br />
<br />		 }<br />
<br />	 }<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-166863">
				<div id="div-comment-166863" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-166863">
			April 22, 2004 at 5:45 pm</a>		</div>

		<p>Wow, that was an awful lot of code compared to Brad&#8217;s three-line function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-217183">
				<div id="div-comment-217183" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://httpcode.com/blogs/posts/397.aspx' rel='external nofollow' class='url'>Daniels Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-217183">
			October 14, 2004 at 7:20 am</a>		</div>

		
		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-429843">
				<div id="div-comment-429843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/ericlippert/archive/2003/09/16/eric-s-complete-guide-to-vt-date.aspx' rel='external nofollow' class='url'>Fabulous Adventures In Coding</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-429843">
			October 12, 2006 at 1:11 pm</a>		</div>

		<p>I suspect that I may be the world&#8217;s leading authority on bugs having to do with the OLEAUT date format, a dubious distinction at best.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-463023">
				<div id="div-comment-463023" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/jmstall/archive/2007/01/18/timestamps.aspx' rel='external nofollow' class='url'>Mike Stall's .NET Debugging Blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-463023">
			January 18, 2007 at 11:00 pm</a>		</div>

		<p>Folks may use the term &quot;Module Timestamp&quot; to mean both file timestamp and image header timestamp. Although</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-533543">
				<div id="div-comment-533543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jimaxsoft.net/wordpress/?p=39' rel='external nofollow' class='url'>???????????? &raquo; Blog ?????? &raquo; ??????TimeStamp</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-533543">
			August 5, 2007 at 7:23 am</a>		</div>

		<p>PingBack from <a rel="nofollow" target="_new" href="http://www.jimaxsoft.net/wordpress/?p=39" rel="nofollow">http://www.jimaxsoft.net/wordpress/?p=39</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-690663">
				<div id="div-comment-690663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://wampir.mroczna-zaloga.org/archives/452-I-jeszcze-o-czasie-time_t,-FILETIME,-TIMESTAMP....html' rel='external nofollow' class='url'>Wampiryczny blog</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20030905-02/?p=42653#comment-690663">
			December 8, 2008 at 2:23 pm</a>		</div>

		<p>Wczoraj napisałem kilka sł&#243;w o r&#243;żnych timestampach zwracanych przez LogParser dla r&#243;żnych format&#243;w wejściowych. Dziś jeszcze kilka sł&#243;w w tym temacie.time_t (unix time) time_t to typ danych, w kt&#243;rym data jest reprezentowana jako ilość se</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

