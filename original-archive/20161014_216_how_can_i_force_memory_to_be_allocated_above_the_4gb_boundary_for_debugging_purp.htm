<html>
<head>
<title>How can I force memory to be allocated above the 4GB boundary (for debugging purposes) on Windows 7?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I force memory to be allocated above the 4GB boundary (for debugging purposes) on Windows 7?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 14, 2016 / year-entry #217</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>12</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Sadly, no easy solution.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
A customer discovered that their program has 64-bit-to-32-bit pointer
truncation bugs.
They are working hard to track down all the places where this happens.
On Windows 8 and higher, they can
<a HREF="https://blogs.technet.microsoft.com/srd/2013/12/11/software-defense-mitigating-common-exploitation-techniques/">
build their program with high entropy VA</a>
to make ASLR be super-aggressive about putting heap and stack memory
above the 4GB boundary.
However, they still have some customers running Windows 7,
and on Windows 7,
even though ASLR
<a HREF="https://msdn.microsoft.com/en-us/library/bb430720.aspx">
randomizes the location of the heap and stack</a>,
it does not
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150709-00/?p=45181">
push them above the 4GB mark</a>.
</p>
<p>
The customer asked for suggestions on what steps they can take to help
flush out their pointer truncation bugs on Windows 7 machines.
</p>
<p>
Unfortunately, there's no easy solution for Windows 7.
You can set the system
<code>Allocation&shy;Preference</code>
to <code>MEM_<wbr>TOP_<wbr>DOWN</code>.
This requires a reboot,
and the setting applies to the entire system (not a single process),
and it makes memory allocation slower,
so this approach is suitable only for testing purposes.
</p>
<p>
The customer wanted to force the heap and stack above 4GB on production
machines,
so the above approach is not recommended.
We saw
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20150709-00/?p=45181">
in the earlier discussion</a>
that there exists a
poor-man's solution: Reserve all the available memory
below the 4GB mark.
That will push new allocations above the 4GB mark.
The initial stack and initial heap segment will still be below 4GB,
and future allocations in the process
will be slower because it increases the amount
of address space under management.
(Searching for an open address takes longer.)
The exact impact will vary depending on the application's
memory allocation patterns, so you will want to measure
the performance before and after to see if the degradation is
acceptable.
But it's better than nothing,</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (12)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-koldude even thread-even depth-1 parent" id="comment-1268985">
				<div id="div-comment-1268985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1268985">
			October 14, 2016 at 7:26 am</a>		</div>

		<p>We found that setting <code>LARGEADDRESSAWARE</code> explicitly on x64 builds seemed to do the trick without needing to do that. Windows 8 didn&#8217;t care about the flag, but Windows 7 seems to act as if it&#8217;s set to false by default for some reason.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1269006">
				<div id="div-comment-1269006" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269006">
			October 14, 2016 at 7:48 am</a>		</div>

		<p>I thought that was on by the linker by default for x64 and turning it off restricted the process to 2GB even if it was 64 bit. Maybe that too stopped in W8.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-koldude even depth-3" id="comment-1269026">
				<div id="div-comment-1269026" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/kantos' rel='external nofollow' class='url'>kantos</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269026">
			October 14, 2016 at 9:41 am</a>		</div>

		<p>We thought so too, or more to the point we assumed it was ignored unless explicitly set to <code>NO</code>. But we found that explicitly it to <code>YES</code> resulted in Windows 7 allocating above the 4gb line. In this particular case it was quite annoying since I had a developer senior to me on Windows 7 that couldn&#8217;t reproduce a crash bug I was seeing. We messed around with the flags and found this behavior was very consistent. From that point on we made sure all components had it explicitly set to <code>YES</code> even though it should be ignored.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1268995">
				<div id="div-comment-1268995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1268995">
			October 14, 2016 at 7:41 am</a>		</div>

		<p>There&#8217;s some sample code at <a href="https://randomascii.wordpress.com/2012/02/14/64-bit-made-easy/" rel="nofollow">https://randomascii.wordpress.com/2012/02/14/64-bit-made-easy/</a> that tries to reserve all the address space below 4GB, so that future allocations come from address above 4GB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1269005">
				<div id="div-comment-1269005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pierre B.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269005">
			October 14, 2016 at 7:48 am</a>		</div>

		<p>The linker no longer support specifying the location of your code and stack? Maybe I&#8217;m remembering wrong, I thought there were ways to force the addresses you wanted.</p>
<p>Also, I would have thought that since address space is private to the process, the OS could simply add a fixed offset to all allocations from a range it would know is free (say, by design). For example,  adding 2^35 to all virtual addresses, causing no slow-down.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1269025">
				<div id="div-comment-1269025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matthew w.</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269025">
			October 14, 2016 at 9:21 am</a>		</div>

		<p>@Pierre<br />
I doubt the vm code is optimized for this kind of use case, although what you&#8217;re saying is probably possible.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2" id="comment-1269085">
				<div id="div-comment-1269085" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">smf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269085">
			October 15, 2016 at 7:00 am</a>		</div>

		<p>It would appear the customers problem was with the heap, not the stack or code segments.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1269015">
				<div id="div-comment-1269015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269015">
			October 14, 2016 at 8:43 am</a>		</div>

		<p>Try PVS-Studio (<a href="http://www.viva64.com/en/pvs-studio/" rel="nofollow">http://www.viva64.com/en/pvs-studio/</a>) which can find many of these bugs through static analysis.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-the-wench even thread-even depth-1 parent" id="comment-1269165">
				<div id="div-comment-1269165" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Monochrome+Wench' rel='external nofollow' class='url'>Monochrome Wench</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269165">
			October 17, 2016 at 5:50 am</a>		</div>

		<p>Without seeing the code for the affected program I&#8217;m guessing it won&#8217;t be nice to have to maintain. They are resorting to testing in production?!?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-davebacher odd alt depth-2" id="comment-1269485">
				<div id="div-comment-1269485" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Dave+Bacher' rel='external nofollow' class='url'>Dave Bacher</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269485">
			October 18, 2016 at 11:28 am</a>		</div>

		<p>TDD is great, good engineering too &#8212; preview programs like Windows Insider are good too.</p>
<p>No amount of testing can replicate the unexpected chain of events caused by users and the third party software they have installed.  You don&#8217;t know what is injecting into the process &#8212; and you can ask, but the customer won&#8217;t know, either.  You have a tremendous diversity, and third party drivers, etc.</p>
<p>And so sure, sometimes the only solution is to test on production, or do some beta program</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1269295">
				<div id="div-comment-1269295" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269295">
			October 17, 2016 at 12:00 pm</a>		</div>

		<p>Use a parent process to help with this.  Have the parent process call CreateProcessW with CREATE_SUSPENDED, then do:<br />
for (std::uintptr_t addr = 0; addr &lt; 0x100000000ULL; addr += 0x10000) {<br />
    VirtualAllocEx(process, reinterpret_cast(addr), 0x10000, MEM_RESERVE, PAGE_NOACCESS);<br />
}<br />
ResumeThread(thread);<br />
Intentionally ignore VirtualAllocEx errors.  Certain things will end up below 4 GB, such as the environment and command line, but a bug with handling these is unlikely.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1269297">
				<div id="div-comment-1269297" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Myria</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161014-00/?p=94515#comment-1269297">
			October 17, 2016 at 12:02 pm</a>		</div>

		<p>Just realized a bug in my code: addr should start at 0x10000.  The zero page should already be reserved, and passing zero would have allocated the reserved region at a random address.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

