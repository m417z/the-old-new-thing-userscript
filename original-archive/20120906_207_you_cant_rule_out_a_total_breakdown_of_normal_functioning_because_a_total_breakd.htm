<html>
<head>
<title>You can't rule out a total breakdown of normal functioning, because a total breakdown of normal functioning could manifest itself as anything</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>You can&#8217;t rule out a total breakdown of normal functioning, because a total breakdown of normal functioning could manifest itself as anything</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>September 6, 2012 / year-entry #208</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>16</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">A customer was attempting to study a problem that their analysis traced back to the malloc function returning NULL. Is it a valid conclusion that there is no heap corruption? While heap corruption may not be the avenue of investigation you'd first pursue, you can't rule it out. In the presence of a total breakdown...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>A customer was attempting to study a problem that their analysis traced back to the <code>malloc</code> function returning <code>NULL</code>.</p>
<blockquote class="q"><p> Is it a valid conclusion that there is no heap corruption? </p>
</blockquote>
<p> While heap corruption may not be the avenue of investigation you'd first pursue, you can't rule it out. <a href="http://blogs.msdn.com/b/oldnewthing/archive/2009/11/13/9921676.aspx"> In the presence of a total breakdown of normal functioning</a>, anything can happen, including appearing to be some other type of failure entirely. </p>
<p> For example, the heap corruption might have corrupted the bookkeeping data in such a way as to make the heap behave as if it were a fixed-sized heap, say by corrupting the location where the heap manager remembered the <code>dwMaximumSize</code> parameter and changing it from zero to nonzero. Now, the next time the heap manager wants to expand the heap, it sees that the heap is no longer expandable and returns <code>NULL</code>. </p>
<p> Or maybe the heap corruption tricked the heap manager into thinking that it was operating under <a href="http://technet.microsoft.com/en-us/library/bb457063.aspx"> low resource simulation</a>, so it returned <code>NULL</code> even though there was plenty of memory available. </p>
<p> Remember, once you've entered the realm of undefined behavior, <i>anything</i> is possible. Heck, one possible response to heap corruption is the installation of a rootkit. </p>
<p> After all, that's how more advanced classes of malware work. They exploit a vulnerability to nudge a process into a subtle failure mode, and then push the failure mode over the edge into a breakdown, and then exploit the breakdown to get themselves installed onto your system, and then cover their tracks so you don't realize you've been pwned. </p>
<p> Maybe the heap was corrupted in a way that cause a rootkit to become installed, and the rootkit patched the <code>malloc</code> function so it returned <code>NULL</code>. </p>
<p> Like I said earlier, the possibility of heap corruption is probably not the avenue I would investigate first. But you can't rule it out either. </p>
<p> <b>Bonus chatter</b>: Since heap corruption can in principle lead to <i>anything</i>, any bug that results in heap corruption automatically gets a default classification of <i>Arbitrary Code Execution</i>, and if the heap corruption can be triggered via the network, it gets an automatic default classification of <i>Remote Code Execution</i> (RCE). Even if the likelihood of transforming the heap corruption into remote code execution is exceedingly low, you still have to classify it as RCE until you can rule out all possibility of code execution. (And it is extremely rare that one can successfully prove that a heap overflow is not exploitable under any possible conditions.) </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (16)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-chris-j-leonard even thread-even depth-1" id="comment-1009543">
				<div id="div-comment-1009543" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Veltas' rel='external nofollow' class='url'>Veltas</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009543">
			September 6, 2012 at 7:17 am</a>		</div>

		<p>I read this attempting to be as open-minded as possible, because it sounds foolish to start with such a terrible assumption. &nbsp;It&#39;s like starting a logical analysis of military options after an ambush with the presumption that the apocalypse is occurring.</p>
<p>But, whenever there&#39;s a bug in my code I always find it tempting to believe that the provided resources are not functioning as defined, when in fact 99 times out of 100 they are and it&#39;s my fault.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1009573">
				<div id="div-comment-1009573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009573">
			September 6, 2012 at 7:38 am</a>		</div>

		<p>Even something like writing a single zero byte out-of-bounds, doing something like a printf, and then restoring that byte to what it was before can be a serious security vulnerability. &nbsp;See CVE-2001-0279 and the analysis in section 2 of this article: <a rel="nofollow" target="_new" href="http://www.phrack.org/archives/57/p57_0x08_Vudo%20malloc%20tricks_by_MaXX.txt" rel="nofollow">http://www.phrack.org/&#8230;/p57_0x08_Vudo%20malloc%20tricks_by_MaXX.txt</a> .</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1009583">
				<div id="div-comment-1009583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">henke37</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009583">
			September 6, 2012 at 7:43 am</a>		</div>

		<p>In fact, it is more common that people prove that a &quot;less harmful&quot; vulnerability can be used for code execution than the opposite.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1009593">
				<div id="div-comment-1009593" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Brian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009593">
			September 6, 2012 at 7:51 am</a>		</div>

		<p>When debugging, I always assume the problem is caused by cosmic radiation until I&#39;m proven otherwise.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1009613">
				<div id="div-comment-1009613" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DaveR</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009613">
			September 6, 2012 at 8:13 am</a>		</div>

		<p>I am always amazed at how many programmers don&#39;t understand the implications of &quot;undefined behaviour&quot;. &nbsp;They don&#39;t get that anything can happen. &nbsp;While it might appear to do the same thing each time, it doesn&#39;t mean that they can depend on that behaviour.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1009623">
				<div id="div-comment-1009623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009623">
			September 6, 2012 at 8:17 am</a>		</div>

		<p>[Since heap corruption can in principle lead to anything, any bug that results in heap corruption automatically gets a default classification of Arbitrary Code Execution]</p>
<p>How do you classify stack overflows? IE8 and IE9 are giving me stack overflows in MSXML.DLL (runaway recursion).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1009633">
				<div id="div-comment-1009633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009633">
			September 6, 2012 at 8:19 am</a>		</div>

		<p>@Raymond:</p>
<p>&quot;And it is extremely rare that one can successfully prove that a heap overflow is not exploitable under any possible conditions&quot;</p>
<p>That&#39;s because under almost any conditions a heap-overflow actually IS an exploitable bug, that actually CAN be turned into installation of a rootkit. This isn&#39;t security experts being nampy-pamby and hedging their bets by saying &quot;it MIGHT cause code-execution&quot;. Chances are, if there&#39;s a heap overflow involved, someone at some point actually WILL turn it into an exploit to install rootkits on your unpatched systems.</p>
<p>Memory corruption of any sort, any time is always a critical bug that you must stop everything right now to fix. It is never acceptable to leave memory corruption bugs as &quot;acceptable risk&quot; or to say &quot;we&#39;ll fix that, right after we finish this feature&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1009643">
				<div id="div-comment-1009643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009643">
			September 6, 2012 at 8:20 am</a>		</div>

		<p>@alegr1: Stack buffer overwrites are &quot;Arbitrary Code Execution&quot;. Stack exhaustion bugs when compiled with all of the options in Visual Studio set to default and in Microsoft libraries since Win Vista are &quot;Denial of Service&quot;. Other stack overflows might be &quot;Arbitrary Code Execution&quot;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1009653">
				<div id="div-comment-1009653" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009653">
			September 6, 2012 at 8:26 am</a>		</div>

		<p>@alegrl: Stack overflow is just a crash thanks to guard page.</p>
<p>We had a stack buffer overflow we classified as not exploitable (just a crash) because there was no way to write past the NUL sentinal without being caught and the program falling on its sword immediately (in fact that&#39;s what was happening when we discovered it&#8211;one of our customers managed to hit the bug).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1009663">
				<div id="div-comment-1009663" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Henning Makholm</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009663">
			September 6, 2012 at 8:28 am</a>		</div>

		<p>@Matt: Sure &#8212; as soon as we figure out where the memory corruption happens. If all we&#39;re seeing is unreproducible weird effects that we attribute to &quot;prior memory corruption by unknown causes&quot; by a process of elimination, then often there is not much more to do than shrug and hope for better clues to turn up later.</p>
<p>After all, it is awfully hard to rule out cosmic radiation, in the technical sense of &quot;anything that randomly alters a program&#39;s memory behind its back&quot; &#8212; such as an already-present malware infaction that (for its own murky reasons) attach to our process as a debugger, changes a random byte somewhere, and then scoots away. Or, for that matter, actual cosmic rays.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1009703">
				<div id="div-comment-1009703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009703">
			September 6, 2012 at 9:16 am</a>		</div>

		<p>@Joshua: It&#39;s only a DoS if you&#39;re smart and are working with all of the security options on a modern compiler like Visual Studio. Not all stack exhaustion vulnerabilities are unexploitable (<a href="http://www.exploit-db.com/wp-content/themes/exploit/docs/17784.pdf" target="_new" rel="nofollow">http://www.exploit-db.com/&#8230;/17784.pdf</a>). In Visual Studio it is the &quot;chkstk&quot; function that is turning what would be a RCE into a DoS.</p>
<p>@Henning: That is why you design your programs to fail fast when they go wrong. Cosmic radiation causing your bugs is vastly less likely than because your code is crappy.</p>
<div class="post">[<i>You&#39;re not allowed to jump any stack pages (guard page or otherwise) in Win32, so any compiler that didn&#39;t do the chkstk would have crashed even under normal operation. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1009743">
				<div id="div-comment-1009743" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JDF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009743">
			September 6, 2012 at 11:41 am</a>		</div>

		<p>This puts me in mind of Tilton&#39;s Law: Solve the First Problem.</p>
<p>Story here: <a rel="nofollow" target="_new" href="http://smuglispweeny.blogspot.com/2008/03/tiltons-law-solve-first-problem.html" rel="nofollow">smuglispweeny.blogspot.com/&#8230;/tiltons-law-solve-first-problem.html</a></p>
<p>Favorite quote: &quot;This stuff is hard enough to get right when things are working nominally, but once they go wrong we no longer have a system that even should work.&quot;</p>
<p>I have referred support techs to this article over and over in the last few years, usually after hearing &quot;This failed, then that failed, and now X isn&#39;t working. I&#39;m trying to solve X by frobulating the sprocket&#8230;&quot; No, stop right there, I won&#39;t help you frobulate, you need to fix the first problem!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1009753">
				<div id="div-comment-1009753" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Alexey</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009753">
			September 6, 2012 at 12:12 pm</a>		</div>

		<p>A post most appropriate in view of Mark Russinovich&#39;s new novel&#39;s recent release.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong odd alt thread-odd thread-alt depth-1" id="comment-1009783">
				<div id="div-comment-1009783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009783">
			September 6, 2012 at 7:28 pm</a>		</div>

		<p>I think &quot;cosmic radiation&quot; is a bit over&#8230; &quot;memory chip went bad&quot; is more plausible explanation.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1009793">
				<div id="div-comment-1009793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009793">
			September 7, 2012 at 2:05 am</a>		</div>

		<p>@Raymond</p>
<p>&gt;&gt;&gt; &quot;[You&#39;re not allowed to jump any stack pages (guard page or otherwise) in Win32, so any compiler that didn&#39;t do the chkstk would have crashed even under normal operation. -Raymond]&quot;</p>
<p>The key there being Win32. Stack exhaustion bugs on other platforms are not always safe, so an assertion that stack exhaustion bugs are always a DoS isn&#39;t true in the general case.</p>
<p><a href="http://cansecwest.com/core05/memory_vulns_delalleau.pdf:" target="_new" rel="nofollow">cansecwest.com/&#8230;/memory_vulns_delalleau.pdf:</a></p>
<p>Linux 2.4 (SAFE)</p>
<p>► Linux 2.6 (UNSAFE)</p>
<p>► FreeBSD 5.3 (MMAP UNSAFE)</p>
<p>► OpenBSD 3.6 (SAFE but&#8230;)</p>
<p>► Linux emulation on FreeBSD 5.3 (UNSAFE)</p>
<p>► Linux emulation on OpenBSD 3.6 (SAFE but&#8230;)</p>
<p>► Solaris 10 / x86 (SAFE)</p>
<p>► Solaris 9 / Sparc (SAFE)</p>
<p>► Windows XP SP1 (SAFE)</p>
<p>► Any OS with certain uncommon threading libraries (UNSAFE)</p>
<p>Even in Win32, if you&#39;re using a library that does stack-copying (e.g. some implementations of fork on Win32), they just allocate a lot of stack and don&#39;t bother with a stack-guard page. So even on Win32 these might be exploitable.</p>
<p>As a general rule &#8211; if it&#39;s a memory corruption, just fix it. Don&#39;t argue about whether it&#39;s exploitable. Just fix it.</p>
<div class="post">[<i>My point was that chkstk is not a &quot;security option&quot; in Visual Studio. There is no way to turn it off (it&#39;s not an &quot;option&quot;) because it is required for correct functioning. -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1009943">
				<div id="div-comment-1009943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Gabe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20120906-00/?p=6673#comment-1009943">
			September 7, 2012 at 9:19 pm</a>		</div>

		<p>The worst thing about heap corruption is that it usually manifests itself as normal operation. I would suggest that it&#39;s actually quite rare for heap corruption to ever manifest as a bug.</p>
<p>In fact, maybe that&#39;s the second-worst thing about heap corruption. I guess the worst thing is when heap corruption is what *causes* normal functioning, as in fixing the heap corruption causes the program to stop functioning normally. For example, you might be writing something out of bounds of an array that causes the same memory block to get returned from malloc over and over again, masking the fact that you never free it.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

