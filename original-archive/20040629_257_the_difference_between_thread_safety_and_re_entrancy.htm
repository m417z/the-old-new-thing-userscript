<html>
<head>
<title>The difference between thread-safety and re-entrancy</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The difference between thread-safety and re-entrancy</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>June 29, 2004 / year-entry #258</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>19</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">An operation is "thread-safe" if it can be performed from multiple threads safely, even if the calls happen simultaneously on multiple threads. An operation is re-entrant if it can be performed while the operation is already in progress (perhaps in another context). This is a stronger concept than thread-safety, because the second attempt to perform...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
An operation is "thread-safe" if it can be performed from multiple
threads safely, even if the calls happen simultaneously on multiple
threads.
</p>
<p>
An operation is re-entrant if it can be performed while the operation
is already in progress (perhaps in another context).
This is a <strong>stronger</strong> concept than thread-safety,
because the second attempt to perform the operation can even come
<strong>from within the same thread</strong>.
</p>
<p>
Consider the following function:
</p>
<pre>
int length = 0;
char *s = NULL;

// Note: Since strings end with a 0, if we want to
// add a 0, we encode it as "\0", and encode a
// backslash as "\\".

// WARNING! This code is buggy - do not use!

void AddToString(int ch)
{
  EnterCriticalSection(&amp;someCriticalSection);
  // +1 for the character we're about to add
  // +1 for the null terminator
  char *newString = realloc(s, (length+1) * sizeof(char));
  if (newString) {
    if (ch == '\0' || ch == '\\') {
      AddToString('\\'); // escape prefix
    }
    newString[length++] = ch;
    newString[length] = '\0';
    s = newString;
  }
  LeaveCriticalSection(&amp;someCriticalSection);
}
</pre>
<p>
This function is thread-safe because the critical section prevents
two threads from attempting to add to the string simultaneously.
However, it is not re-entrant. 
</p>
<p>
The internal call to AddToString occurs while the data structures
are unstable.  At the point of the call, execution re-enters
the start of the function AddToString, but this time the attempt
to realloc the memory will use a pointer (s) that is no longer valid.
(It was invalidated by the call to realloc performed by the caller.)</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (19)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-188413">
				<div id="div-comment-188413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Serge Wautier</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188413">
			June 29, 2004 at 7:09 am</a>		</div>

		<p>2nd reason why it&#8217;s not re-entrant is that it would &#8216;loop&#8217; forever when ch== 0 or</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188443">
				<div id="div-comment-188443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Cooney</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188443">
			June 29, 2004 at 7:19 am</a>		</div>

		<p>Nah, eventually it&#8217;ll crash in some difficult to debug way.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188453">
				<div id="div-comment-188453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://orcmid.com/BlunderDome/clueless/' rel='external nofollow' class='url'>orcmid</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188453">
			June 29, 2004 at 7:20 am</a>		</div>

		<p>Hi Raymond, I like your clean difference between re-entrant and thread-safe.  Thanks.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188503">
				<div id="div-comment-188503" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188503">
			June 29, 2004 at 7:45 am</a>		</div>

		<p>(Rats, missed the infinite loop on . Okay, so remove the test against  and then you&#8217;re set.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188523">
				<div id="div-comment-188523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.geekdojo.net/pdbartlett' rel='external nofollow' class='url'>Paul Bartlett</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188523">
			June 29, 2004 at 7:49 am</a>		</div>

		<p>And of course re-entrancy is an interesting issue with STA COM components, especially as if you don&#8217;t think you have to worry about it &#8216;cos you&#8217;re in an STA ;)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188623">
				<div id="div-comment-188623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Callek</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188623">
			June 29, 2004 at 12:01 pm</a>		</div>

		<p>I can only assume that &quot;someCriticalSection&quot; is a global variable of some sort, whereas quite obviously, &quot;EnterCriticalSection&quot; blocks re-entrancy from other threads.</p>
<p>It is fairly obvious but not quite as obvious as it could be.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188683">
				<div id="div-comment-188683" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Sea Urchin</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188683">
			June 29, 2004 at 1:13 pm</a>		</div>

		<p>Do I understand it correctly if I believe that re-entrant being stronger than thread-safe means that a re-entrant operation is automagically thread-safe?<br />
<br />Or can an operation be re-entrant and not thread-safe at the same time?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188703">
				<div id="div-comment-188703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188703">
			June 29, 2004 at 2:33 pm</a>		</div>

		<p>A function can be reentrant but not thread safe. There are two types of reentrancy issues, if it is reentrant by the same thread only or if it is reentrant by multiple threads. The latter of the two is the strongest one (and makes it automagically thread safe). For example:</p>
<p>void foo(unsigned i)<br />
<br />{<br />
<br /> if (i&#8211;) {<br />
<br />  free(malloc(1));<br />
<br />  foo(i);<br />
<br /> }<br />
<br />}</p>
<p>If malloc and free access a global heap and are not protected by any locks, this function is reentrant but not multiple-thread reentrant.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188643">
				<div id="div-comment-188643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Keith Moore [exmsft]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188643">
			June 29, 2004 at 12:44 pm</a>		</div>

		<p>Another source of re-entrancy is user-mode APCs. Any routine that enters an alertable wait (calls SleepEx() or WaitForXxxxEx() with Alertable == TRUE) can potentially cause queued APCs to run.</p>
<p>Consider:</p>
<p>ReadFileEx( &#8230;, &amp;MyCompletionRoutine );<br />
<br />SomethingThatWaitsAlertably();<br />
<br />/* etc */</p>
<p>MyCompletionRoutine()<br />
<br />{<br />
<br />SomethingThatWaitsAlertably();<br />
<br />}<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188793">
				<div id="div-comment-188793" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Pavel Lebedinsky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188793">
			June 29, 2004 at 8:59 pm</a>		</div>

		<p>This is one of the reasons why critical sections, mutexes etc. shouldn&#8217;t allow recursive locks (at least not by default).</p>
<p>A deadlock is always better than undefined behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-188713">
				<div id="div-comment-188713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">josh</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188713">
			June 29, 2004 at 2:44 pm</a>		</div>

		<p>Even if this were reentrant, it wouldn&#8217;t work.  It&#8217;s impossible to have length correct for the AddToString(&#8216;\&#8217;) at that point.</p>
<p>This is reentrant (assuming it&#8217;s never called from an interrupt) but not thread safe:<br />
<br />void AddToString(int ch)<br />
<br />{<br />
<br />  char *newString;<br />
<br />  if (ch == 0)<br />
<br />    AddToString(&#8216;\&#8217;);</p>
<p>  newString = realloc(s, (length+1) * sizeof(char))<br />
<br />  if (newString)<br />
<br />  {<br />
<br />    newString[length++] = ch;<br />
<br />    newString[length] = 0;<br />
<br />    s = newString;<br />
<br />  }<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-188953">
				<div id="div-comment-188953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://curobosqui.modblog.com' rel='external nofollow' class='url'>Daniel Kurejwowski</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-188953">
			June 30, 2004 at 8:27 am</a>		</div>

		<p>Is reentrancy mostly related to recursive functions? What are other scenarios besides alertable waits and interrupts?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-189233">
				<div id="div-comment-189233" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-189233">
			June 30, 2004 at 12:09 pm</a>		</div>

		<p>A really common reentrant function that isn&#8217;t recursive is a window&#8217;s wndproc. The most common case besides sending messages back and forth between windows is if you spawn something that uses it&#8217;s own message loop like a modal dialog or popup window calls your wndproc while you&#8217;re already in your wndproc. Only if you&#8217;re doing something really dumb can you have problems with that case.</p>
<p>If you put asserts (the kind that spawns message boxes) on certain messages in your wndproc, your program will just suddenly disapear because of stack overflow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-189783">
				<div id="div-comment-189783" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.kbcafe.com' rel='external nofollow' class='url'>Randy Charles Morin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-189783">
			July 1, 2004 at 12:11 pm</a>		</div>

		<p>You seem to suggest that re-entrant implies thread-safe. This is not true.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-194253">
				<div id="div-comment-194253" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jonathan Allen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-194253">
			July 12, 2004 at 5:16 pm</a>		</div>

		<p>&quot;You seem to suggest that re-entrant implies thread-safe. This is not true.&quot;</p>
<p>Example please.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-195153">
				<div id="div-comment-195153" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chan Kar Heng</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-195153">
			July 14, 2004 at 9:34 pm</a>		</div>

		<p>Re-entrant but not thread-safe..</p>
<p>char * strcopy(char * dst,const char * src)<br />
<br />{<br />
<br />  assert(dst!=NULL);<br />
<br />  assert(src!=NULL);</p>
<p>  if(*src!=&#8217; &#8217;)<br />
<br />    strcopy(dst+1,src+1);<br />
<br />  *dst=*src;</p>
<p>  return(dst);<br />
<br />}</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196113">
				<div id="div-comment-196113" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laughingcynic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-196113">
			July 16, 2004 at 5:02 pm</a>		</div>

		<p>This is thread-safe.</p>
<p>If you are going to bring up the example of 2 threads passing in the same dst, then the callers are behaving in an unsafe manner by failing to protect a shared buffer.  The flaw is not with this routine.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196123">
				<div id="div-comment-196123" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-196123">
			July 16, 2004 at 5:04 pm</a>		</div>

		<p>Right, which demonstrates that the routine is not thread-safe and callers must respect that.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196133">
				<div id="div-comment-196133" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20040629-00/?p=38643#comment-196133">
			July 16, 2004 at 5:05 pm</a>		</div>

		<p>Commenting closes after two weeks.</p>
<p><a target="_new" href="http://weblogs.asp.net/oldnewthing/archive/2004/02/21/77681.aspx" rel="nofollow">http://weblogs.asp.net/oldnewthing/archive/2004/02/21/77681.aspx</a></p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

