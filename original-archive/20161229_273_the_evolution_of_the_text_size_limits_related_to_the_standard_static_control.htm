<html>
<head>
<title>The evolution of the text size limits related to the standard static control</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The evolution of the text size limits related to the standard static control</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 29, 2016 / year-entry #274</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Smaller, then bigger.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Michael Quinlan wondered about
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20161103-00/?p=94635#comment-1272195">
the text size limits related to the standard static control</a>.&sup1;
</p>
<p>
We start with the resource format, since that was the limiting
factor in the original problem.
The
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040618-00/?p=38803">
original 16-bit resource format</a>
represented strings as null-terminated sequences of bytes,
so in theory they could have been arbitrarily large.
However,
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20040130-00/?p=40813">
16-bit string resources</a> were limited to 255 characters
because they used a byte count for string length.
My guess is that the resource compiled took this as a cue that
nobody would need strings longer than 255 characters,
so it avoided the complexity of having to deal with a dynamic
string buffer,
and when it needed to parse a string in the resource file,
it did so into a fixed-size 256-byte buffer.
</p>
<p>
I happen to still have a copy of the original 16-bit resource compiler,
so I can actually verify my theory.
Here's what I found:
</p>
<p>
There was a "read next token" function that placed the result
into a global variable.
Parsing was done by asking to read the next token
(making it the current token), and then
and then studying the current token.
If the token was a string,
the characters of the string
went into a buffer of size <code>MAXSTR + 1</code>.
And since string resources have a maximum length of 255,
<code>MAXSTR</code> was 255.
</p>
<p>
Although the limit of 255 characters did not apply to dialog
controls,
the common string parser stopped at 255 characters.
In theory, the common string parser could have used dynamic
memory allocation to accommodate the actual string length,
but remember that we're 16-bit code here.
Machines had 256KB of memory,
and no memory block could exceed 64KB.
Code in this era did relatively little dynamic memory allocation;
static memory allocation was the norm.
It's like everybody was working on an embedded system.
</p>
<p>
Anyway, that's where the 255-character limit for strings
in resource files comes from.
But that's not a limit of the resource file format or of static
text controls.
It's just a limit of the resource compiler.
You can write your own resource compiler that 
generates long strings if you like.
</p>
<p>
Okay, so what about the static text control?
The original 16-bit static text control had a text size
limit of 64KB
because 16-bit.
This limit carried forward to Windows 95 because the
static text control in Windows 95 was basically a 16-bit
control with some 32-bit smarts.
</p>
<p>
On the other hand, Windows NT's standard controls were
32-bit all the way through (and also Unicode).
The limits consequently went up from 64KB to 4GB.
Some messages needed to be revised in order to be able
to express strings longer than 64KB,
For example,
the old <code>EM_<wbr>GET&shy;SEL</code> message returned
the start and end positions of the selection as two
16-bit integers packed into a single 32-bit value.
This wouldn't work for strings longer than 65535 characters,
so the message was redesigned so that the <code>wParam</code>
and <code>lParam</code> are pointers to 32-bit integers
that receive the start and end of the selection.
</p>
<p>
Anyway, now that the 16-bit world is far behind us,
we don't need to worry about the 64KB limit for static
and edit controls.
The controls can now take all the text you give it.&sup2;
</p>
<p>
&sup1; And then for some reason
Erkin Alp G&uuml;ney said that I'm
"<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20161103-00/?p=94635#comment-1272265">employed
as a PR guy</a>."
I found this statement very strange,
because not only am I not employed as a PR guy,
I have basically no contact with PR at all.
The only contact I do have is that
occasionally they will send me a message
saying that they are upset at something I wrote.
I remember that they were very upset about my story
that shared
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20130401-00/?p=4793">
some trivia about the //build 2011 conference</a>
because it (horrors) talked about some things
that went wrong.
(And as Tom West
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20161103-00/?p=94635#comment-1272435">
noted</a>,
it wouldn't seem to be a good idea for PR to employ someone
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/tag/the-social-skills-of-a-thermonuclear-device">
with the social skills of a thermonuclear device</a>.)
</p>
<p>
&sup2; Well, technically no.
If you give a string longer than 4GB, then it won't be able
to handle that.
So more accurately, it can handle all the text you would
give it, <i>provided you're not doing something ridiculous</i>.
I mean, you really wouldn't want to manipulate 4GB of data
in the form of one giant string.
And no human being would be able to read it all anyway.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1278455">
				<div id="div-comment-1278455" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Clockwork-Muse</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1278455">
			December 29, 2016 at 11:07 am</a>		</div>

		<p>Well, you _could_ &#8230;. it&#8217;d just take you about 19 years to do it&#8230;</p>
<p>2 ^ 32 characters.<br />
5 characters per average word, plus 1 space (ignoring punctuation).<br />
200-230 word-per-minute average reading comprehension speed<br />
60 minutes in a hour<br />
8 &#8216;working&#8217; hours per day.<br />
365.25 days per year.</p>
<p>-or-<br />
(2 ^ 32) / (5 + 1) / 215 / 60 / 8 / 365.25 = ~19 years</p>
<p>&#8230; so it&#8217;s conceivable that somebody whose job was mostly reading/collating paperwork has read that many words over their career (probably longer than 20 years, though).</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1279215">
				<div id="div-comment-1279215" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://nbtparse.org' rel='external nofollow' class='url'>Kevin</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1279215">
			January 3, 2017 at 1:28 pm</a>		</div>

		<p>Raymond, I think you have to bring back the Nitpicker&#8217;s Corner for this one!</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1278505">
				<div id="div-comment-1278505" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ivan k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1278505">
			December 30, 2016 at 4:48 am</a>		</div>

		<p>Some install program surprisingly (to me) asked me if it could just go ahead and just change maxpath. Hahaha&#8230; No.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-mike-dimmick odd alt depth-2" id="comment-1278525">
				<div id="div-comment-1278525" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Mike+Dimmick' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1278525">
			December 30, 2016 at 7:35 am</a>		</div>

		<p>It&#8217;s possible your installer was trying to change the group policy setting that enables OS support for longer-than-MAX_PATH paths in legacy APIs. For this to work, a) you must be running the Anniversary Update (build 14393 or later), b) the Group Policy has to be changed and c) programs have to opt-in via an app manifest. .NET apps targeting framework version 4.6.1 or earlier *also* have to opt in via a setting in their .exe.config files (before 4.6.2, the .NET Framework itself checked for path-too-long and threw an exception without asking the OS what it thought). See <a href="https://blogs.msdn.microsoft.com/jeremykuhne/2016/07/30/net-4-6-2-and-long-paths-on-windows-10/" rel="nofollow">https://blogs.msdn.microsoft.com/jeremykuhne/2016/07/30/net-4-6-2-and-long-paths-on-windows-10/</a></p>
<p>Of course it would be incredibly bad if installers changed that setting for you without understanding what they were doing. It&#8217;s behind a group policy setting because it&#8217;s a bit incomplete &#8211; some parts of CMD.EXE reportedly work properly, others don&#8217;t.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev even thread-even depth-1" id="comment-1278515">
				<div id="div-comment-1278515" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1278515">
			December 30, 2016 at 7:28 am</a>		</div>

		<p>But how do I open those ridiculously long log files?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1278535">
				<div id="div-comment-1278535" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adrian</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1278535">
			December 30, 2016 at 8:08 am</a>		</div>

		<p>It seems there are other places that the standard static control text size could be limited.  For example, when painting, it presumably uses something like TextOutW, which appears to have an undocumented limit of 32,767 WCHARs.  I suppose it might use DrawTextW, but I expect that would issue multiple TextOutW (or equivalent) calls for multiple lines, so it might be unbounded in total length, but each line would be bounded by the 32K character limit.</p>
<p>Yeah, lines of 32K-character lines in a static text control are highly unlikely.  On the other hand, you could have a tiny font, a window that spans multiple super-high DPI monitors, and a bunch of those WCHARs could be surrogate pairs and combining characters that take little to no horizontal space.  Just saying.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1278755">
				<div id="div-comment-1278755" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">640k</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1278755">
			January 1, 2017 at 12:19 pm</a>		</div>

		<p>Simple math dictates, that when 128-bit windows comes, we will be able to store 2^64 bytes of text in static controls.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-jeremytais odd alt thread-odd thread-alt depth-1" id="comment-1279095">
				<div id="div-comment-1279095" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/SimonRev' rel='external nofollow' class='url'>SimonRev</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1279095">
			January 3, 2017 at 8:12 am</a>		</div>

		<p>I once used a bit of software that created files that directly corresponded with object names in the project.  This same software helpfully tried to make sure that paths never exceeded 200 bytes (not sure where they got the 200 bytes from).</p>
<p>The upshot was that it was very easy to create projects on one machine that were not portable to another machine because the resulting paths were too long on the 2nd machine.  (It also helpfully refused to open such projects with an &#8220;invalid name&#8221; error).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1279166">
				<div id="div-comment-1279166" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DWalker07</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1279166">
			January 3, 2017 at 10:36 am</a>		</div>

		<p>It&#8217;s funny that someone assumes that a Microsoft PR person would have the technical expertise to write a blog post like the linked post.  It&#8217;s possible, but after reading that post, &#8220;PR person&#8221; is not the first thought that would come to me&#8230;.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1279257">
				<div id="div-comment-1279257" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Zenith</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20161229-00/?p=95045#comment-1279257">
			January 4, 2017 at 11:17 am</a>		</div>

		<p>Too late to ask this, I suppose, but does that have anything to do with how Labels have their text saved to a resx file in Visual Studio?  I have a habit of deleting that worthless file as all it ever contained was a location for my timers and other non-controls.  And then, once, I had a long block of text in a Label that went poof when I deleted that file.  Apparently, at some arbitrary length, VS moves Label text out of the form designer&#8217;s InitializeComponent() block and into that resx file.  I&#8217;ve tried everything that I could find to stop this from happening but there doesn&#8217;t seem to be any way to do so without assigning the text elsewhere or using a disabled multiline TextBox instead.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

