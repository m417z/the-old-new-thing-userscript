<html>
<head>
<title>How can I detect that my window is on the current virtual desktop?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How can I detect that my window is on the current virtual desktop?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 2, 2017 / year-entry #219</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>26</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">And what are the recommended policies for using virtual desktops anyway?</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Virtual desktops are a feature added in Windows 10 blah blah exposition.
</p>
<p>
Here is how virtual desktops work, from a programmatic standpoint:
</p>
<ul>
<li>
    To switch to a virtual desktop, the system shows the windows
    that belong to the virtual desktop and hides the windows that
    do not belong to the virtual desktop. Note that the windows
    still all belong to the same desktop (hence the "virtual").
    All we're doing is hiding and showing windows.
</li>
<li>
    When a new window is shown, it gets placed on the current
    virtual desktop.
</li>
<li>
    When a window becomes foreground, the system switches to the
    virtual desktop that the window belongs to.
</li>
</ul>
<p>
That said, there are some guidelines that programs should follow.
</p>
<ul>
<li>
    Do not programatically change the current virtual desktop.
    The user should be the one to change virtual desktops,
    if that's what they want.
</li>
<li>
    If your program decides to open a new window,
    then open a new window.
    It will be placed on the current virtual desktop.
</li>
<li>
    If your program decides to reuse an existing window
    (for example, if you have a tabbed user interface,
    and you want to open the document in a new tab),
    then when looking for a window to reuse,
    limit your search to the current virtual desktop.
    If you cannot find a window from the current virtual desktop,
    then create and show a new one,
    which will be placed on the current virtual desktop.
</li>
<li>
    Exception:
    If your program opens each document in a new window,
    and the user opens a document that you already have a window for,
    then you are allowed to switch to the virtual desktop that contains
    the already-open document.
</li>
</ul>
<p>
Let's start with
<a HREF="https://blogs.msdn.microsoft.com/oldnewthing/20030723-00/?p=43073">
the scratch program</a>
and make these changes.
</p>
<pre>
<font COLOR=blue>#include &lt;shlobj.h&gt;</font>

BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
    <font COLOR=blue>g_hwndChild = CreateWindow("listbox", nullptr,
       WS_VISIBLE | WS_CHILD, 0, 0, 0, 0, hwnd,
       (HMENU)IntToPtr(1), g_hinst, 0);</font>

    return TRUE;
}

<font COLOR=blue>void
ProcessCommandLine(LPCSTR pszMessage)
{
    ListBox_AddString(g_hwndChild, pszMessage);
}

void
OnCopyData(HWND hwnd, HWND hwndFrom, PCOPYDATASTRUCT pcds)
{
    if (pcds-&gt;dwData == 0)
    {
      // WARNING! Parameter validation is missing!
      ProcessCommandLine(reinterpret_cast&lt;PSTR&gt;(pcds-&gt;lpData));
    }
}

    // Add to WndProc
    HANDLE_MSG(hwnd, WM_COPYDATA, OnCopyData);

BOOL
WindowCanBeReused(HWND hwnd)
{
    // A more realistic program would have some evaluation criteria.
    return TRUE;
}

BOOL
TryHandOffToExistingInstance(LPCSTR pszMessage)
{
    HWND hwndFound = nullptr;
    while ((hwndFound = FindWindowEx(nullptr, hwndFound,
                        "Scratch", nullptr)) != nullptr) {
      if (WindowCanBeReused(hwndFound)) {
        SetForegroundWindow(hwndFound);
        COPYDATASTRUCT cds;
        cds.dwData = 0;
        cds.cbData = lstrlen(pszMessage) + 1;
        cds.lpData = const_cast&lt;PSTR&gt;(pszMessage);
        FORWARD_WM_COPYDATA(hwndFound, nullptr, &amp;cds, SendMessage);
        return TRUE;
      }
    }
    return FALSE;
}
</font>

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
    MSG msg;
    HWND hwnd;

    g_hinst = hinst;

    if (!InitApp()) return 0;

    if (SUCCEEDED(CoInitialize(NULL))) {/* In case we use COM */

      <font COLOR=blue>if (!lpCmdLine[0]) {
        lpCmdLine = const_cast&lt;PSTR&gt;("(empty command line)");
      }
      
      if (!TryHandOffToExistingInstance(lpCmdLine)) {</font>

        hwnd = CreateWindow(
            TEXT("Scratch"),                /* Class Name */
            TEXT("Scratch"),                /* Title */
            WS_OVERLAPPEDWINDOW,            /* Style */
            CW_USEDEFAULT, CW_USEDEFAULT,   /* Position */
            CW_USEDEFAULT, CW_USEDEFAULT,   /* Size */
            NULL,                           /* Parent */
            NULL,                           /* No menu */
            hinst,                          /* Instance */
            0);                             /* No special parameters */

        ShowWindow(hwnd, nShowCmd);

        while (GetMessage(&amp;msg, NULL, 0, 0)) {
            TranslateMessage(&amp;msg);
            DispatchMessage(&amp;msg);
        }
      <font COLOR=blue>}</font>

      CoUninitialize();
    }

    return 0;
}
</pre>
<p>
This is our non-virtual-desktop-aware version of the program.
When it is run, it looks for an existing instance that can be reused,
and if it finds one,
it asks that existing instance to handle the command line.
</p>
<p>
Now let's make this program virtual-desktop-aware.
</p>
<pre>
<font COLOR=blue>IVirtualDesktopManager* g_pvdm;</font>

BOOL
WindowCanBeReused(HWND hwnd)
{
    <font COLOR=blue>BOOL isCurrent;
    if (g_pvdm &amp;&amp;
        SUCCEEDED(g_pvdm-&gt;IsWindowOnCurrentVirtualDesktop(hwnd,
                                          &amp;isCurrent)) &amp;&amp;
        !isCurrent) {
      return FALSE;
    }</font>

    // A more realistic program would have some evaluation criteria.
    return TRUE;
}

int WINAPI WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
                   LPSTR lpCmdLine, int nShowCmd)
{
    ...
    
    if (SUCCEEDED(CoInitialize(NULL))) {/* In case we use COM */

      <font COLOR=blue>// This can fail if the system does not support virtual desktops.
      CoCreateInstance(CLSID_VirtualDesktopManager,
                       nullptr, CLSCTX_ALL, IID_PPV_ARGS(&amp;g_pvdm));</font>

      if (!lpCmdLine[0]) {
        lpCmdLine = const_cast&lt;PSTR&gt;("(empty command line)");
      }
      
      if (!TryHandOffToExistingInstance(lpCmdLine)) {
         ...
      }

      <font COLOR=blue>if (g_pvdm) g_pvdm-&gt;Release();</font>

      CoUninitialize();
    }

    return 0;
}
</pre>
<p>
We updated the
<code>Window&shy;Can&shy;Be&shy;Reused</code>
function so it takes the virtual desktop state into account.
Specifically, we will not attempt to reuse windows that are not part
of the current virtual desktop.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (26)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1310887">
				<div id="div-comment-1310887" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tanveer Badar</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310887">
			October 2, 2017 at 7:26 am</a>		</div>

		<p>I always thought Windows 10 (virtual) desktops worked like Desktops utility from SysInternals.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-wndsks odd alt depth-2 parent" id="comment-1311007">
				<div id="div-comment-1311007" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311007">
			October 2, 2017 at 11:31 am</a>		</div>

		<p>No, the SysInternals tool uses HDESK objects but they are too much of a security/namespace boundary to really implement a work-space feature.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong even depth-3" id="comment-1311486">
				<div id="div-comment-1311486" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311486">
			October 5, 2017 at 5:38 pm</a>		</div>

		<p>Oh, I thought the newer versions of SysInternals Desktops is using virtual desktop, while the older versions that I last checked around 2008 on WinXP just creates a new session of each &#8220;desktop&#8221; (so it&#8217;s impossible to move windows around different desktop sessions, but it&#8217;s possible to switch &#8220;personality&#8221; by simple shortcut-keys. I wish they had split these to different utilities as both provide convenience in different ways).</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1310896">
				<div id="div-comment-1310896" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">BZ</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310896">
			October 2, 2017 at 7:47 am</a>		</div>

		<p>I don&#8217;t use virtual desktops (as a user), but suppose your app is a web browser. The default is to open any request in a new tab of the existing window if one exists. Are you saying that if a request comes in from a different desktop a new window will (or should?) be created? Isn&#8217;t that counter-intuitive and a recipe for confusion?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1310905">
				<div id="div-comment-1310905" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310905">
			October 2, 2017 at 8:08 am</a>		</div>

		<p>Switching desktops is counter intuitive. Say you are working on a particular task. You open a web page and that switches you to a different task just open the web page? You&#8217;re just going to detach the tab into a new window, and then move the window to the task it was supposed to be part of.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-bboorman odd alt depth-3 parent" id="comment-1311067">
				<div id="div-comment-1311067" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311067">
			October 3, 2017 at 5:56 am</a>		</div>

		<p>&#8220;You’re just going to detach the tab into a new window, and then move the window to the task it was supposed to be part of.&#8221;</p>
<p>No. No I&#8217;m not. Don&#8217;t fall into the trap that what seems intuitive to you is how everyone else&#8217;s workflow or usage model is. I don&#8217;t want browser tabs detached. I want them all in one &#8220;MDI&#8221; window that I can Alt-Tab to.</p>
<p>It bugs me to no end that when I click on a minimized browser button on Win-10 taskbar that I have to then click one of many &#8220;mini-fied&#8221; tabs. I just wish the window would Restore at whatever tab it was Minimized at.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-4" id="comment-1311086">
				<div id="div-comment-1311086" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">laonianren</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311086">
			October 3, 2017 at 7:22 am</a>		</div>

		<p>Are you talking about the Internet Explorer anti-feature?  You can turn it off by unchecking &#8220;Show previews for individual tabs in the taskbar&#8221; in the Tab options dialog.  Or just use a different browser.</p>
<p>That said, your point doesn&#8217;t seem to have much to do with Raymond&#8217;s.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-4" id="comment-1311135">
				<div id="div-comment-1311135" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Voo</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311135">
			October 3, 2017 at 11:46 am</a>		</div>

		<p>“ I don’t want browser tabs detached. I want them all in one “MDI” window that I can Alt-Tab to.&#8221;<br />
This is about multiple desktops, you can&#8217;t alt-tab between windows in different desktops which is why your implementation would be a horrible use experience. </p>
<p>If I&#8217;m working on a task I don&#8217;t want to get thrown on a completely different setup to read some documentation.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1311017">
				<div id="div-comment-1311017" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Muzer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311017">
			October 2, 2017 at 1:51 pm</a>		</div>

		<p>One use case for virtual desktops (I&#8217;ve never used them myself even as a long-time desktop Linux user, but this is how I hear others use them) is to divide your windows in a way that is logical to the user, perhaps into work and personal, or perhaps into different projects or things you&#8217;re working on concurrently. In either case, you will likely want different web pages open for work/personal, or different pages open for different projects. So it makes perfect sense to me that a web page requested in the context of Desktop B will open a new browser window on Desktop B (assuming one doesn&#8217;t already exist on Desktop B), even if one DOES already exist on Desktop A.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-cheong odd alt depth-3" id="comment-1311495">
				<div id="div-comment-1311495" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311495">
			October 5, 2017 at 5:41 pm</a>		</div>

		<p>Yeah, &#8220;poor man&#8217;s alternative to have multiple monitors&#8221;.</p>
<p>Yes, multi-monitor configuration is becoming more common now, but still relatively less common for servers attached to KVM boxes.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1310907">
				<div id="div-comment-1310907" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Kevin Fee</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310907">
			October 2, 2017 at 8:08 am</a>		</div>

		<p>Interesting that you put the return type on the line before the function name, ensuring the function name is at the beginning of the line. Is that a new style at Microsoft? I kinda like it.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1310935">
				<div id="div-comment-1310935" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Smithers</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310935">
			October 2, 2017 at 8:48 am</a>		</div>

		<p>It certainly seems to be used in many of the Windows header files, though not all (wingdi.h). Of course, I don&#8217;t know if this is official practice at MS.</p>
<p>I do know that it&#8217;s mandated by GNU style, for precisely the reason that a search for /^functionname/ matches the definition of the function and not any calls to it. Makes more sense than most of GNU C style.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1311025">
				<div id="div-comment-1311025" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Azarien</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311025">
			October 2, 2017 at 2:09 pm</a>		</div>

		<p>It&#8217;s part of KNF (Kernel Normal Form) style.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1310916">
				<div id="div-comment-1310916" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310916">
			October 2, 2017 at 8:35 am</a>		</div>

		<p>1) user started a long job* completion of which causes new windows popup on desktop A<br />
2) user switched to  desktop A where he works on some work, thinking &#8216;hey when I will finish with this will switch to desktop A and continue to work there<br />
3) long job* completed and.. shown window at desktop B, completely disrupting planned workflow.</p>
<p>*long job that shows window at the end:  one example some heavy application startup, or another example &#8211; compiling project in eclipse with following perspective change to debug.</p>
<p>PS MS always discourages me how they avoid to evolve existing functionality and reinvent new functionality instead that duplicates old one but have a bit more features. I understand that its harder to learn old code but.. hey, guys, you&#8217;re writing OS, why not extend exiting virtual desktop but not invent brand new ones? Of course it requires rewriting win32 heap management etc, but result will be better API and better internal architecture.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2 parent" id="comment-1310965">
				<div id="div-comment-1310965" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310965">
			October 2, 2017 at 9:13 am</a>		</div>

		<p>I don&#8217;t understand how you don&#8217;t consider this an evolution of existing technology. The virtual desktop system evolves the existing desktop system by inferring virtual desktop partitioning from existing window behavior. There are other rules that prevent your scenario from showing up on the wrong desktop. (In this case, the rule that owned windows always appears on the same desktop as their owner.)</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1310975">
				<div id="div-comment-1310975" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Killer{R}</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310975">
			October 2, 2017 at 9:42 am</a>		</div>

		<p>Existing virtual desktops are CreateDesktop() &amp;co. As I understand &#8211; they&#8217;re not participating in this new desktop functionality. The reason is understandable &#8211; they&#8217;re not allowing window switch from one desktop to another due to deep internal reasons &#8211; window is part of win32k desktop heap, so you cannot easily move window from one desktop to another. So MS invented brand new desktops that has this functionality but misses many features of old desktops.<br />
Thats my complain &#8211; why not re-engineer old win32 desktops implementation to allow dynamic _old_ desktops assignment instead of creating adding desktops kind.<br />
About owned windows &#8211; its example from Linux world. Eclipse goes to different workspace after long compilation because it re-creates all its windows. So not sure that owner will help here. but when I using Windows with its old good desktops utility &#8211; I&#8217;m pretty sure that nobody will popup such way from another desktop. Now from you description it looks like Windows got same desktop as Linux &#8211; with same rules, so, with same issues&#8230;</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4 parent" id="comment-1310985">
				<div id="div-comment-1310985" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310985">
			October 2, 2017 at 10:31 am</a>		</div>

		<p>It comes down to what problem you think virtual desktops is trying to solve. The problem that Windows 10 virtual desktops is trying to solve is helping people organize their windows with minimum compatibility impact. Putting different windows on different HDESKTOPs would break programs that create multiple windows and wind up with different windows on different desktops. (Since those windows wouldn&#8217;t be able to talk to each other any more.) Should we have just called it &#8220;workspaces&#8221; instead of &#8220;virtual desktops&#8221; to avoid setting false expectations?</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-5" id="comment-1311155">
				<div id="div-comment-1311155" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311155">
			October 3, 2017 at 1:59 pm</a>		</div>

		<p>I actually had this back in the XP days with a very similar implementation to what Windows 10 ended up with. Too many applications broke anyway because they didn&#8217;t like their windows being hidden out from under them. CreateDesktop() probably would have been less compatibility headaches. At least those breakages follow a logical model where the user can predict when they break.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-5" id="comment-1311195">
				<div id="div-comment-1311195" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Someone</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311195">
			October 4, 2017 at 4:55 am</a>		</div>

		<p>&#8220;Too many applications broke anyway because they didn’t like their windows being hidden out from under them. &#8221;</p>
<p>The Windows Manager could hide (not render) top-level windows without changing any application-visible bits. I hope, the virtual desktop feature works this way, or not?</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1310925">
				<div id="div-comment-1310925" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310925">
			October 2, 2017 at 8:45 am</a>		</div>

		<p>&#8220;When a new window is shown, it gets placed on the current virtual desktop. &#8221;</p>
<p>This behaviour kind of bugs me, mainly because of splash screens. If I am on desktop 2 and I start program X I want program X to start on desktop 2. If I go over to Desktop 1 to read an article while program X is loading I don&#8217;t want Program X to pop-up on desktop 1 and interrupt what I&#8217;m doing. The same thing happens if you build and run in visual studio. Program X should stay in its room, I&#8217;ll be in to talk to it in a minute.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-torrin-jones even depth-2 parent" id="comment-1310995">
				<div id="div-comment-1310995" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/torrinj' rel='external nofollow' class='url'>torrinj</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310995">
			October 2, 2017 at 10:47 am</a>		</div>

		<p>I agree it&#8217;s annoying, but I just move the windows to the desktop I want it to be on.  Alt+TAB will allow you to move the Windows on the current desktop to a different desktop.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-torrin-jones odd alt depth-3" id="comment-1311005">
				<div id="div-comment-1311005" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/torrinj' rel='external nofollow' class='url'>torrinj</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311005">
			October 2, 2017 at 10:55 am</a>		</div>

		<p>Oops, I said Alt+TAB when I meant WIN+TAB.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-3" id="comment-1311015">
				<div id="div-comment-1311015" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Wear</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311015">
			October 2, 2017 at 11:45 am</a>		</div>

		<p>Yeah that&#8217;s what I do too. Shoo them off back to where they belong.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-2" id="comment-1311265">
				<div id="div-comment-1311265" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311265">
			October 4, 2017 at 11:23 am</a>		</div>

		<p>That&#8217;s why HDESKTOP solutions are so rad. It&#8217;s like Docker for UI.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1310977">
				<div id="div-comment-1310977" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua Schaeffer</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1310977">
			October 2, 2017 at 9:52 am</a>		</div>

		<p>I have never had these APIs work as advertised. They are completely falsely documented and return unreasonable error codes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1311186">
				<div id="div-comment-1311186" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Iain</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20171002-00/?p=97116#comment-1311186">
			October 3, 2017 at 7:20 pm</a>		</div>

		<p>&#8220;______ are a _____ blah blah exposition.&#8221;</p>
<p>My new standard opening for internal documents. +1</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

