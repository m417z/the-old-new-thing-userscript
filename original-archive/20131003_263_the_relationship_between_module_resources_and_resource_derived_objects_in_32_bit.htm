<html>
<head>
<title>The relationship between module resources and resource-derived objects in 32-bit Windows</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>The relationship between module resources and resource-derived objects in 32-bit Windows</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>October 3, 2013 / year-entry #264</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>10</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Last time, we saw how 16-bit Windows converted resources attached to an EXE or DLL file (which I called module resources for lack of a better term) to user interface resources. As a refresher: 16-bit Resources Resource type Operation Result Icon Load­Icon, etc. Reference Cursor Load­Cursor, etc. Reference Accelerator Load­Accelerator, etc. Reference Dialog Create­Dialog, etc....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p><a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/10/02/10453564.aspx"> Last time</a>, we saw how 16-bit Windows converted resources attached to an EXE or DLL file (which I called <i>module resources</i> for lack of a better term) to user interface resources. As a refresher:</p>
<table border="1" style="border-collapse: collapse">
<caption>     <b>16-bit Resources</b>     </caption>
<tr>
<th>Resource type</th>
<th>Operation</th>
<th>Result</th>
</tr>
<tr>
<td>Icon</td>
<td><code>Load&shy;Icon</code>, etc.</td>
<td>Reference</td>
</tr>
<tr>
<td>Cursor</td>
<td><code>Load&shy;Cursor</code>, etc.</td>
<td>Reference</td>
</tr>
<tr>
<td>Accelerator</td>
<td><code>Load&shy;Accelerator</code>, etc.</td>
<td>Reference</td>
</tr>
<tr>
<td>Dialog</td>
<td><code>Create&shy;Dialog</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Menu</td>
<td><code>Load&shy;Menu</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Bitmap</td>
<td><code>Load&shy;Bitmap</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Load&shy;String</code></td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Find&shy;Resource</code></td>
<td>Reference</td>
</tr>
</table>
<p> During the conversion from 16-bit Windows to 32-bit Windows, some of these rules changed. Specifically, icons, cursors, and accelerator tables are no longer references to the resource. Instead, the resource is treated as a template from which the actual user interface resource is constructed. </p>
<table border="1" style="border-collapse: collapse">
<caption>     <b>32-bit Resources</b>     </caption>
<tr>
<th>Resource type</th>
<th>Operation</th>
<th>Result</th>
</tr>
<tr>
<td>Icon</td>
<td><code>Load&shy;Icon</code>, etc.</td>
<td>Copy*</td>
</tr>
<tr>
<td>Cursor</td>
<td><code>Load&shy;Cursor</code>, etc.</td>
<td>Copy*</td>
</tr>
<tr>
<td>Accelerator</td>
<td><code>Load&shy;Accelerator</code>, etc.</td>
<td>Copy*</td>
</tr>
<tr>
<td>Dialog</td>
<td><code>Create&shy;Dialog</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Menu</td>
<td><code>Load&shy;Menu</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Bitmap</td>
<td><code>Load&shy;Bitmap</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Load&shy;String</code></td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Find&shy;Resource</code></td>
<td>Reference</td>
</tr>
</table>
<p> Uh-oh, what's up with those asterisks? </p>
<p> Let's start with accelerator tables. In order to simulate the reference semantics of 16-bit accelerator tables, the copy is cached with a reference count, so that if you ask for the same accelerator table 1000 times, the first request creates a new accelerator table, and the other 999 requests just increment the reference count and return the same handle back. The result is that the window manager emulates reference semantics, but with an initial copy. When the reference count on an accelerator table drops to zero, then the resource is freed. </p>
<p> Icons and cursors are the same, only weirder. </p>
<p> If you pass the <code>LR_<wbr>SHARED</wbr></code> flag, then the window manager simulates reference semantics by creating a copy of the icon or cursor the first time it is requested, and all subsequent requests with the <code>LR_<wbr>SHARED</wbr></code> flag return the same handle back again.&sup1; The <code>Load&shy;Cursor</code> and <code>Load&shy;Icon</code> functions are just wrappers around <code>Load&shy;Image</code> that pass <code>LR_<wbr>SHARED</wbr></code>, so applications written to the old 16-bit API still work the 16-bit way. (Even today, a lot of applications rely on the old 16-bit behavior.) </p>
<p> If you don't pass the <code>LR_<wbr>SHARED</wbr></code> flag, then you get a brand new copy of the icon or cursor. Since the only way to get this behavior is to call the new-for-Win32 function <code>Load&shy;Image</code>, there is no compatibility issue. </p>
<p> Based on the above discussion, we can flesh out the table a bit more: </p>
<table border="1" style="border-collapse: collapse">
<caption>     <b>32-bit Resources</b>     </caption>
<tr>
<th>Resource type</th>
<th>Operation</th>
<th>Result</th>
</tr>
<tr>
<td rowspan="2">Icon</td>
<td><code>Load&shy;Icon</code><br>         <code>Load&shy;Image</code> with <code>LR_<wbr>SHARED</wbr></code></td>
<td>Cached copy</td>
</tr>
<tr>
<td><code>Load&shy;Image</code> without <code>LR_<wbr>SHARED</wbr></code></td>
<td>Copy</td>
</tr>
<tr>
<td rowspan="2">Cursor</td>
<td><code>Load&shy;Cursor</code><br>         <code>Load&shy;Image</code> with <code>LR_<wbr>SHARED</wbr></code></td>
<td>Cached copy</td>
</tr>
<tr>
<td><code>Load&shy;Image</code> without <code>LR_<wbr>SHARED</wbr></code></td>
<td>Copy</td>
</tr>
<tr>
<td>Accelerator</td>
<td><code>Load&shy;Accelerator</code>, etc.</td>
<td>Cached copy</td>
</tr>
<tr>
<td>Dialog</td>
<td><code>Create&shy;Dialog</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Menu</td>
<td><code>Load&shy;Menu</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Bitmap</td>
<td><code>Load&shy;Bitmap</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Load&shy;String</code></td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Find&shy;Resource</code></td>
<td>Reference</td>
</tr>
</table>
<p> Another way of looking at the above table is to break it into two tables, one for operations that had a 16-bit equivalent, and one for operations that are unique to Win32: </p>
<table border="1" style="border-collapse: collapse">
<caption>     <b>32-bit Resource Creation Operations with 16-bit Equivalents</b>     </caption>
<tr>
<th>Resource type</th>
<th>Operation</th>
<th>Result</th>
</tr>
<tr>
<td>Icon</td>
<td><code>Load&shy;Icon</code></td>
<td>Simulated reference</td>
</tr>
<tr>
<td>Cursor</td>
<td><code>Load&shy;Cursor</code></td>
<td>Simulated reference</td>
</tr>
<tr>
<td>Accelerator</td>
<td><code>Load&shy;Accelerator</code>, etc.</td>
<td>Simulated reference</td>
</tr>
<tr>
<td>Dialog</td>
<td><code>Create&shy;Dialog</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Menu</td>
<td><code>Load&shy;Menu</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>Bitmap</td>
<td><code>Load&shy;Bitmap</code>, etc.</td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Load&shy;String</code></td>
<td>Copy</td>
</tr>
<tr>
<td>String</td>
<td><code>Find&shy;Resource</code></td>
<td>Reference</td>
</tr>
</table>
<p><br><br></p>
<table border="1" style="border-collapse: collapse">
<caption>     <b>32-bit Resource Creation Operations Without 16-bit Equivalents</b>     </caption>
<tr>
<th>Resource type</th>
<th>Operation</th>
<th>Result</th>
</tr>
<tr>
<td rowspan="2">Icon</td>
<td><code>Load&shy;Image</code> with <code>LR_<wbr>SHARED</wbr></code></td>
<td>Simulated reference</td>
</tr>
<tr>
<td><code>Load&shy;Image</code> without <code>LR_<wbr>SHARED</wbr></code></td>
<td>Copy</td>
</tr>
<tr>
<td rowspan="2">Cursor</td>
<td><code>Load&shy;Image</code> with <code>LR_<wbr>SHARED</wbr></code></td>
<td>Simulated reference</td>
</tr>
<tr>
<td><code>Load&shy;Image</code> without <code>LR_<wbr>SHARED</wbr></code></td>
<td>Copy</td>
</tr>
</table>
<p> Now we can answer an old question: "<a href="http://blogs.msdn.com/b/oldnewthing/archive/2012/02/15/10267976.aspx#10268281">Do icons created from resources depend on the underlying resource?</a>" </p>
<p> The answer is no, at least not in 32-bit Windows. The bits are extracted from the module resource data and converted into a icon object, and if you passed the <code>LR_<wbr>SHARED</wbr></code> flag, it is added to the cache of previously-created icons. </p>
<p> &sup1; <b>Update</b>: If you read carefully, you'll realize that <code>LR_<wbr>SHARED</wbr></code> stores the results in a cache <i>and pays no attention to the size</i>. The cache is keyed only by the resource module and ID; the size is ignored. This is why MSDN says "Do not use <code>LR_<wbr>SHARED</wbr></code> for images that have nonstandard sizes." </p>
<p> Suppose you load a resource with <code>LR_<wbr>SHARED</wbr></code> and a nonstandard size. If you are the first person to load that resource, then the nonstandard size gets loaded and put into the cache. The next person to ask for that resource and who asks for a <code>LR_<wbr>SHARED</wbr></code> copy will get the nonstandard-sized resource from the cache <i>regardless of what size they actually wanted</i>. </p>
<p> Conversely, suppose a standard-size resource is already in the cache. You pass <code>LR_<wbr>SHARED</wbr></code> and a nonstandard size. The cache returns you the original standard-size resource, ignoring the size you requested. </p>
<p> To avoid this craziness, the rule is that any request for cached resources must use the standard size. </p>
<p> This requirement wasn't a problem in 16-bit Windows because 16-bit Windows had no way of requesting a resource at a nonstandard size. And since <code>LR_<wbr>SHARED</wbr></code> is a new flag introduced in 32-bit Windows, all code which uses it can be expected to understand the Win32 rules. </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (10)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1080933">
				<div id="div-comment-1080933" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1080933">
			October 3, 2013 at 7:20 am</a>		</div>

		<p>If that is all LR_SHARED does, why does MSDN say this: &quot;Do not use LR_SHARED for images that have non-standard sizes, &#8230;&quot;?</p>
<div class="post">[<em>The caching code ignores the size (because in Win16, there was no way to load something at a nonstandard size). If you use LR_SHARED for a nonstandard size and you are the first to request it, then you put a nonstandard size into the cache, and the next person to ask for the resource will get the nonstandard size rather than the size they requested. If you are the second to request it, your nonstandard size will be ignored and the size in the cache will be returned instead. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080943">
				<div id="div-comment-1080943" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1080943">
			October 3, 2013 at 7:35 am</a>		</div>

		<p>Probably because the cache can&#39;t accept nonstandard sizes.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks even thread-even depth-1" id="comment-1080953">
				<div id="div-comment-1080953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1080953">
			October 3, 2013 at 7:42 am</a>		</div>

		<p>&#8230;then it should say the limit is 256&#215;256, what standard sizes means has changed over the years as more icon sizes have been added.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1080973">
				<div id="div-comment-1080973" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Deduplicator</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1080973">
			October 3, 2013 at 11:09 am</a>		</div>

		<p>Just read LR_SHARED as &quot;simulate win16&quot; instead of &quot;cache resource&quot;, because using it for anything else but its designed role is asking for trouble.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1080983">
				<div id="div-comment-1080983" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Nick</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1080983">
			October 3, 2013 at 11:29 am</a>		</div>

		<p>It seems reasonable to assume that if you&#39;re going to share with others (passing LR_SHARED) there are some constraints in place to make sure that everyone participating in the sharing is happy. &nbsp;If, on the other hand, you want to be a special little snowflake, you can also take care of managing your own resources! :)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-wndsks odd alt thread-odd thread-alt depth-1" id="comment-1080993">
				<div id="div-comment-1080993" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/skSdnW' rel='external nofollow' class='url'>skSdnW</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1080993">
			October 3, 2013 at 11:33 am</a>		</div>

		<p>@Raymond: If the LR_SHARED cache ignores size maybe MSDN say that you must also specify LR_DEFAULTSIZE?</p>
<p>Win7 seems to cache based on size:</p>
<p>void dumpico(HICON hIco)</p>
<p>{</p>
<p>ICONINFO ii;</p>
<p>BITMAP bm;</p>
<p>if (GetIconInfo(hIco, &amp;ii) &amp;&amp; GetObject(ii.hbmColor, sizeof(bm), &amp;bm))</p>
<p>printf(&quot;%#xt%ux%un&quot;, hIco, bm.bmWidth, bm.bmHeight);</p>
<p>}</p>
<p>void test()</p>
<p>{</p>
<p>HINSTANCE hSh32 = LoadLibraryA(&quot;SHELL32&quot;);</p>
<p>dumpico(LoadImage(hSh32, MAKEINTRESOURCE(1), IMAGE_ICON, 99, 99, LR_SHARED));</p>
<p>dumpico(LoadImage(hSh32, MAKEINTRESOURCE(1), IMAGE_ICON, GetSystemMetrics(SM_CXICON), GetSystemMetrics(SM_CYICON), LR_SHARED));</p>
<p>dumpico(LoadImage(hSh32, MAKEINTRESOURCE(1), IMAGE_ICON, 77, 77, LR_SHARED));</p>
<p>dumpico(LoadImage(hSh32, MAKEINTRESOURCE(1), IMAGE_ICON, 0, 0, LR_SHARED|LR_DEFAULTSIZE));</p>
<p>}</p>
<p>0x461081b 99&#215;99</p>
<p>0xbb406a7 32&#215;32</p>
<p>0x7bf0841 77&#215;77</p>
<p>0xbb406a7 32&#215;32</p>
<p>And if you load a SM_CXICON icon with LR_SHARED and assign it to a window it seems to pick up the small icon automatically&#8230;</p>
<div class="post">[<em>Congratulations, you found one case where the cache respects the size. But there are other cases where it doesn&#39;t. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fleet-command even thread-even depth-1" id="comment-1081003">
				<div id="div-comment-1081003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Fleet+Command' rel='external nofollow' class='url'>Fleet Command</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1081003">
			October 3, 2013 at 11:47 am</a>		</div>

		<p>Excellent so far but why bitmaps and strings are not reference-counted? It is not surprising if Windows team had discovered that bitmaps are rarely used more than once but strings seem like a candidate for reference-counting. (I just hope it has nothing to do with null-terminated strings.)</p>
<div class="post">[<em>Bitmaps and strings were not reference-counted because they weren&#39;t module resources. See <a href="http://blogs.msdn.com/b/oldnewthing/archive/2013/10/02/10453564.aspx">the linked article</a>. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081013">
				<div id="div-comment-1081013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Marc K</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1081013">
			October 4, 2013 at 5:27 am</a>		</div>

		<p>The biggest problem I&#39;ve had with LR_SHARED and &quot;non-standard&quot; sizes is wanting to load a predefined icon in a 16&#215;16 size. &nbsp;Without LR_SHARED, I&#39;d get NULL back. &nbsp;With it, I&#39;d get the 32&#215;32 icon. &nbsp;Then I had to go on to write a lot of code to manually load the 16&#215;16 version that I really wanted.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1081083">
				<div id="div-comment-1081083" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">SuperKoko</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1081083">
			October 4, 2013 at 3:33 pm</a>		</div>

		<p>What about LoadResource?</p>
<p>Your article tells that FindResource returns a reference, but it looks like it&#39;s returning a handle to the resource (which is a sort of reference).</p>
<p>I would expect LoadResource to return a reference since FreeResource is obsolete and may be a dummy function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1081193">
				<div id="div-comment-1081193" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.msdn.com/mity_4000_morous.org/ProfileUrlRedirect.ashx' rel='external nofollow' class='url'>mity@morous.org</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20131003-00/?p=3043#comment-1081193">
			October 7, 2013 at 8:14 am</a>		</div>

		<p>Your post caused some confusion to me. I always assumed the LR_SHARED means really &quot;reference&quot;, not &quot;simulated reference&quot; (in your terminology). So what about the lifetime of such objects in 32-bit Windows? Should app. call e.g. DestroyIcon() for the shared icon? I.e. is DestroyIcon() smart enough to just decrease the counter in the cache, and destroy it only when it drops to zero? If app does not do that, is the cached copy destroyed on unload of the module it originated from?</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

