<html>
<head>
<title>A puzzle involving dynamic programming, or maybe it doesn't, episode 2</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>A puzzle involving dynamic programming, or maybe it doesn&#8217;t, episode 2</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>January 18, 2016 / year-entry #12</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>11</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Once again, the hint is wrong.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Here's a programming challenge:
</p>
<blockquote CLASS="q"><p>
Given an array of numbers, count the number of ways the array can be partitioned
into three contiguous parts such that each part has the same sum.
For example, given the array
<code>{ 1, 1, -1, 0, -1, 2, 2, 0, -2, 1 }</code>,
the answer is seven:
</p>
<ol>
<li>1 = 1 = (&minus;1) + 0 + (&minus;1) + 2 + 2 + 0 + (&minus;2) + 1
<li>1 = 1 + (&minus;1) + 0 + (&minus;1) + 2 = 2 + 0 + (&minus;2) + 1
<li>1 = 1 + (&minus;1) + 0 + (&minus;1) + 2 + 2 + 0 + (&minus;2) = 1
<li>1 + 1 + (&minus;1) = 0 + (&minus;1) + 2 = 2 + 0 + (&minus;2) + 1
<li>1 + 1 + (&minus;1) = 0 + (&minus;1) + 2 + 2 + 0 + (&minus;2) = 1
<li>1 + 1 + (&minus;1) + 0 = (&minus;1) + 2 = 2 + 0 + (&minus;2) + 1
<li>1 + 1 + (&minus;1) + 0 = (&minus;1) + 2 + 2 + 0 + (&minus;2) = 1
</ol>
<p>
Hint: Start with a solution to the partition problem,
and use dynamic programming.
</p>
</blockquote>
<p>
We will assume for now that empty parts are legal.
(This is significant only if the array sum is zero.)
</p>
<p>
The hint to use dynamic programming is yet another red herring.
</p>
<p>
The first thing you notice is that partitioning without rearrangement
is much easier than the general partition problem,
since you have to study only <var>C</var>(<var>N</var>+1, 2) subsets
rather than 2<sup><var>N</var></sup>.
You can calculate sums of contiguous subsets very easily by keeping
a running total and taking the difference between the endpoint and
the starting point.
</p>
<p>
If you keep a parallel array with the running totals, you can pick
out the subarrays quickly: They are the partitions where the left
partition is at the point where the running
total is one third of the array sum,
and the right partition is at the point where the running
total is two thirds of the array sum.
</p>
<p>
In our example above:
</p>
<table BORDER="1" STYLE="border: solid black 1px;text-align: center;border-collapse: collapse" CELLPADDING="3">
<tr>
<td STYLE="width: 2em">1</td>
<td STYLE="width: 2em">1</td>
<td STYLE="width: 2em">&minus;1</td>
<td STYLE="width: 2em">0</td>
<td STYLE="width: 2em">&minus;1</td>
<td STYLE="width: 2em">2</td>
<td STYLE="width: 2em">2</td>
<td STYLE="width: 2em">0</td>
<td STYLE="width: 2em">&minus;2</td>
<td STYLE="width: 2em">1</td>
</tr>
<tr>
<td STYLE="width: 2em;background-color: pink">1</td>
<td STYLE="width: 2em;background-color: lightblue">2</td>
<td STYLE="width: 2em;background-color: pink">1</td>
<td STYLE="width: 2em;background-color: pink">1</td>
<td STYLE="width: 2em">0</td>
<td STYLE="width: 2em;background-color: lightblue">2</td>
<td STYLE="width: 2em">4</td>
<td STYLE="width: 2em">4</td>
<td STYLE="width: 2em;background-color: lightblue">2</td>
<td STYLE="width: 2em">3</td>
</tr>
</table>
<p>
Since the array total is 3,
we want to find points where the running total is one third and two thirds
of the total, or 1 and 2.
I've highlighted them in the table above.
Any time we see a 1 to the left of a 2, we have a successful partition:
The first part is everything up to and including the 1;
the middle part is everything after the 1 up to and including the 2;
the last part is everything after the 2.
For example,
</p>
<table BORDER="1" STYLE="border: solid black 1px;text-align: center;border-collapse: collapse" CELLPADDING="3">
<tr>
<td STYLE="width: 2em">1</td>
<td ROWSPAN="2" STYLE="background-color: black"></td>
<td STYLE="width: 2em">1</td>
<td STYLE="width: 2em">&minus;1</td>
<td STYLE="width: 2em">0</td>
<td STYLE="width: 2em">&minus;1</td>
<td STYLE="width: 2em">2</td>
<td ROWSPAN="2" STYLE="background-color: black"></td>
<td STYLE="width: 2em">2</td>
<td STYLE="width: 2em">0</td>
<td STYLE="width: 2em">&minus;2</td>
<td STYLE="width: 2em">1</td>
</tr>
<tr>
<td STYLE="width: 2em;background-color: pink">1</td>
<td STYLE="width: 2em;background-color: lightblue">2</td>
<td STYLE="width: 2em;background-color: pink">1</td>
<td STYLE="width: 2em;background-color: pink">1</td>
<td STYLE="width: 2em">0</td>
<td STYLE="width: 2em;background-color: lightblue">2</td>
<td STYLE="width: 2em">4</td>
<td STYLE="width: 2em">4</td>
<td STYLE="width: 2em;background-color: lightblue">2</td>
<td STYLE="width: 2em">3</td>
</tr>
</table>
<p>
Therefore, to count the number of successful partitions,
we need only count how many 1's come before 2's.
</p>
<pre>
function equalthirds(a)
{
  var i;
  var total = 0;
  for (i = 0; i &lt; a.length; i++) {
   total += a[i];
  }
  var third = total / 3;

  var firstpart = 0;
  var partitions = 0;

  var partial = 0;
  for (i = 0; i &lt; a.length; i++) {
    partial += a[i];
    if (partial == third) firstpart++;
    if (partial == third * 2) partitions += firstpart;
  }
  return partitions;
}

equalthirds([ 1, 1, -1, 0, -1, 2, 2, 0, -2, 1 ]);
</pre>
<p>
First, we get the total for the entire array,
then calculate one third of the total.
That is the target value for the partitions.
</p>
<p>
Next, we make another pass through the array tracking
the running totals.
Each time the partial sum reaches one third of the total,
we increment the number of "successful first segments
at or before this point".
And each time the partial sum reaches two thirds of the total,
that means that we found a valid spot for the second segment
(and therefore also the third segment),
so we count all of the successful first segments so far
toward our partition count.
</p>
<p>
The running time of this algorithm is <var>O</var>(<var>N</var>)
and the space requirements are constant.
This is optimal:
You must read every element of the array,
because if you skipped one, then an adversary could modify it
and alter the totals.
(And you can't do better than constant space.)
</p>
<p>
<b>Exercise</b>: What changes would be necessary if zero-length
parts are not legal?</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (11)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1223351">
				<div id="div-comment-1223351" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223351">
			January 18, 2016 at 7:35 am</a>		</div>

		<p>Exercise: With the provided algorithm, an empty part can only occur at the beginning and at the end, since partial cannot be equal to third and third * 2 simultaneously.</p>
<p>As such, check if we&#8217;re not in the first or last index before adding partitions up.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2 parent" id="comment-1223371">
				<div id="div-comment-1223371" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Karellen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223371">
			January 18, 2016 at 8:18 am</a>		</div>

		<p>Given that empty parts have value 0, empty parts are only valid where the sum of the array is 0, and in that case third and third * 2 are both 0, so partial can be equal to both simultaneously.</p>
<p>For example, given: [-1, -1, 0, 2, -1, 1]</p>
<p>You can have:<br />
1: [], [], [-1, -1, 0, 2, -1, 1]<br />
2: [], [-1, -1, 0, 2], [-1, 1]<br />
3: [-1, -1, 0, 2], [], [-1, 1]<br />
4: [-1, -1, 0, 2], [-1, 1], []<br />
5: [-1, -1, 0, 2, -1, 1], [], []</p>
<p>Answer 3 has an empty part in the middle.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-3" id="comment-1223432">
				<div id="div-comment-1223432" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223432">
			January 18, 2016 at 9:22 am</a>		</div>

		<p>Right.  We could &#8220;normalize&#8221; the values such that the lowest would be 0, e.g. [0, 0, 1, 3, 0, 2], and apply this principle.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1224011">
				<div id="div-comment-1224011" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Raidri</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1224011">
			January 20, 2016 at 2:53 am</a>		</div>

		<p>You are missing one:<br />
6: [], [-1, -1, 0, 2, -1, 1], []</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-cheong even thread-odd thread-alt depth-1" id="comment-1223711">
				<div id="div-comment-1223711" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/cheong00' rel='external nofollow' class='url'>cheong00</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223711">
			January 18, 2016 at 10:10 pm</a>		</div>

		<p>Btw, I think it&#8217;s wrong to say &#8220;the hint is wrong&#8221;. The hint only directs you to a more convoluted way to solve the problem, but if you&#8217;re doing it right, you can follow the hint to solve it.</p>
<p>Just like in many case where the interview questions has hint to use recursive function, but the question can also be solved without recursive function. Both way should be correct as long as &#8220;the instruction to use recursive function&#8221; is not written in the main part of question.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1 parent" id="comment-1223911">
				<div id="div-comment-1223911" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John Doe</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223911">
			January 19, 2016 at 11:16 am</a>		</div>

		<p>Exercise (second take): The total == 0 must be special cased.  In this case, we increment partitions for each partial == 0, and return Math.max(0, partitions &#8211; 2).</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1223931">
				<div id="div-comment-1223931" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Holger Stenger</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223931">
			January 19, 2016 at 3:07 pm</a>		</div>

		<p>Can you elaborate how you would count partitions for this special case?</p>
<p>The worst case is when all partials are 0 which happens when all array elements are 0. Luckily we can give explicit formulas for this case. For an array of length 0 containing only 0 the number of partitions with zero-length segments is \sum_{i=0}^n \sum_{j=0}^i 1 = (n+1)*(n+2)/2, without zero-length segments we have \sum_{i=2}^{n-1} \sum_{j=1}^{i-1} 1 = (n-2)*(n-1)/2, using index transformations and the identity \sum_{i=1}^n = n*(n+1)/2.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1 parent" id="comment-1223941">
				<div id="div-comment-1223941" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jswolf19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223941">
			January 19, 2016 at 5:17 pm</a>		</div>

		<p>If empty partitions are legal, then this algorithm doesn&#8217;t take into account empty partitions at the beginning and end of the input array (assuming I&#8217;m running the code in my head correctly ^^;).<br />
For example, given the array [0,0,0], the algorithm outputs 6, but should be 10.</p>
<p>[], [], [0, 0, 0]<br />
[], [0], [0, 0]<br />
[], [0, 0], [0]<br />
[], [0, 0, 0], []<br />
[0], [], [0, 0]<br />
[0], [0], [0]<br />
[0], [0, 0], []<br />
[0, 0], [], [0]<br />
[0, 0], [0], []<br />
[0, 0, 0], [], []</p>
<p>Exercise: I think just swapping the ifs in the current algorithm would do it for you.</p>

		
				</div>
		<ol class="children">
		<li class="comment even depth-2" id="comment-1223951">
				<div id="div-comment-1223951" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jswolf19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223951">
			January 19, 2016 at 5:21 pm</a>		</div>

		<p>&#8220;doesn’t take into account empty partitions at the beginning and end of the input array&#8221; should be &#8220;doesn’t take into account empty partitions at the beginning of the input array&#8221;, as it does take into account the ones at the end&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-even depth-1" id="comment-1223961">
				<div id="div-comment-1223961" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jswolf19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223961">
			January 19, 2016 at 5:26 pm</a>		</div>

		<p>Exercise (second take): You would just want to not go to the end of the array.<br />
i &lt; a.length &#8211; 2 should do it ^^;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1" id="comment-1223981">
				<div id="div-comment-1223981" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">jswolf19</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160118-00/?p=92862#comment-1223981">
			January 19, 2016 at 5:45 pm</a>		</div>

		<p>Exercise (third take, and having hopefully learned not to click &#8220;Post Comment&#8221; buttons so hastily):</p>
<p>You *do* want to swap the ifs (which removes the counting of empty parts in the middle), and you want to loop to the penultimate array item, so a.length &#8211; 1 instead of a.length &#8211; 2, but you only want to add to firstpart if there are at least 2 elements left (to remove the counting of empty parts at the end), so you could add a condition to the first if statement, or special case out the final partitions increment check.</p>
<p>  for (i = 0; i &lt; a.length &#8211; 1; i++) {<br />
    partial += a[i];<br />
    if (partial == third * 2) partitions += firstpart;<br />
    if (partial == third &amp;&amp; i &lt; a.length &#8211; 2) firstpart++;<br />
  }</p>
<p>or</p>
<p>  for (i = 0; i &lt; a.length &#8211; 2; i++) {<br />
    partial += a[i];<br />
    if (partial == third * 2) partitions += firstpart;<br />
    if (partial == third) firstpart++;<br />
  }<br />
  partial += a[a.length &#8211; 1];<br />
  if (partial == third * 2) partitions += firstpart;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

