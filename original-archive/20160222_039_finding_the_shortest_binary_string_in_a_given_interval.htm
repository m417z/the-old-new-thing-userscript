<html>
<head>
<title>Finding the shortest binary string in a given interval</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Finding the shortest binary string in a given interval</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>February 22, 2016 / year-entry #40</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>13</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Narrowing in.</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program answers the question,
"Given an interval of real numbers,
find the shortest binary string that fits in that interval."
For example,
if you are given the range 0.1&hellip;0.3, then the answer is 0.25,
whose binary representation is 0.01.
Another way of phrasing the problem is that you are to find the simplest
dyadic rational number in the range,
where a <i>dyadic</i> rational number is one whose denominator is
a power of two.
In our case, the simplest such fraction is &frac14;.
</p>
<p>
This sounds like a pointless exercise, but it actually solves a
real problem:
The shortest binary string in the interval (<var>a</var>, <var>b</var>)
is the value of the
surreal number { <var>a</var> | <var>b</var> }.&sup1;
</p>
<p>
The idea here is that we start with an integer candidate,
and the refine the candidate, making it longer and longer by one bit
(alternatively: doubling the denominator),
until we come up with a candidate that fits between <var>a</var>
and <var>b</var>.
Here is my first attempt:</p>
<pre>
function nextHigherInteger(a) {
 var t = Math.ceil(a);
 if (t == a) t++;
 return t;
}

// Preconditions: 0 &le; a &lt; b
function shortest(a, b) {
 <i>var t = nextHigherInteger(a);
 var bit = 1;
 while (t &gt;= b) {
  bit /= 2;
  t -= bit;
 }
 return t;</i>
}
</pre>
<p>
You may have noticed that the code is italicized.
That's because it's wrong,
but let's walk through it anyway so we can understand what it is
trying to do:
</p>
<p>
We start by calculating
the smallest integer greater than or equal to <var>a</var>.
That is our candidate.
If that is less than <var>b</var>, then we have a winner.
Otherwise, we subtract a bit and try again.
Each time we try, the amount we subtract is cut in half,
so that it remains a single bit.
</p>
<p>
This seems to work for <code>shortest(0.1, 0.3)</code>,
but it doesn't work for <code>shortest(0.3, 0.4)</code>
because we forgot to check whether subtracting the next bit
took us below <var>a</var> and out of the range.
</p>
<p>
Let's try again:
</p>
<pre>
function shortest(a, b) {
 var t = nextHigherInteger(a);
 var bit = 1;
 while (bit) {
  bit /= 2;
  if (t &lt;= a) t += bit;
  else if (t &gt;= b) t-= bit;
  else return t;
 }
 throw "Unable to find a value in range";
}
</pre>
<p>
This time, after making our initial guess,
we see if it lies in the target range.
If it's too low, we bump it up a little;
if it's too high, we drop it a little.
Each time we adjust the value, we do so by a smaller and smaller
amount,
which lets us hit a smaller and smaller target range.
The total adjustment is the
<a HREF="https://en.wikipedia.org/wiki/1/2_%2B_1/4_%2B_1/8_%2B_1/16_%2B_%E2%8B%AF">Zeno sum</a>
&frac12; + &frac14; + &#x215B; + ... &rarr; 1.
As a worst case, our initial guess overshoots <var>a</var> by 1 &minus; &epsilon;,
so our repeated adjustments will eventually bring us as close to <var>a</var> as desired,
if you just wait long enough.
Since we assume that <var>b</var> &gt; <var>a</var>,
we will eventually adjust enough so that the adjusted value is between <var>a</var> and <var>b</var>.
</p>
<p>
Another way of looking at this problem is by zooming the range up
rather than zooming the trial value down;
<i>i.e.</i>,
we keep shifting the binary point to the right (doubling the size
of the range)
until we can fit an integer into the range.
Once we find such an integer, we can then scale it back down to
the original interval.
</p>
<pre>
function shortest(a, b) {
 var den = 1;
 var t = nextHigherInteger(a);
 while (t &gt;= b) {
  a *= 2;
  b *= 2;
  den *= 2;
  t = nextHigherInteger(a);
 }
 return t / den;
}
</pre>
<p>
&sup1; Therefore, it doesn't so much solve a real problem as it
solves a surreal problem.
Yes, it's a bad math pun.
I don't apologize.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (13)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1 parent" id="comment-1227641">
				<div id="div-comment-1227641" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Scarlet Manuka</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227641">
			February 22, 2016 at 10:09 pm</a>		</div>

		<p>This seems like a case where, assuming you don&#8217;t care about the output format, it&#8217;d be easier to deal with the inputs as fixed point binary strings. Then you just have to go along the strings and look for the first place where they don&#8217;t match, put a 1 in that position  and you&#8217;re done.</p>
<p>Now performance wise this may not be too great, depending on how your language of choice deals with strings, but conceptually it seems simpler to me.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-2" id="comment-1227651">
				<div id="div-comment-1227651" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xinthia Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227651">
			February 23, 2016 at 2:06 am</a>		</div>

		<p>If the numbers are fixed-point, you can do that by first xorring the two inputs, and then finding the first 1. Here are some ideas on how to do that: <a href="http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious" rel="nofollow">http://graphics.stanford.edu/~seander/bithacks.html#IntegerLogObvious</a><br />
The most obvious one would be to left shift the number to test, while simultaneously right shifting our result number.<br />
And I agree that conceptually, it does seem simpler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even depth-2 parent" id="comment-1227661">
				<div id="div-comment-1227661" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227661">
			February 23, 2016 at 2:26 am</a>		</div>

		<p>I don&#8217;t think that algorithm agrees with Raymond&#8217;s for inputs 0.25, 0.5 &#8211; his returns 0.25 but you return 0.5.</p>

		
				</div>
		<ol class="children">
		<li class="comment odd alt depth-3 parent" id="comment-1227673">
				<div id="div-comment-1227673" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227673">
			February 23, 2016 at 2:29 am</a>		</div>

		<p>Hmm, thinking about it, I&#8217;d expect the surreal number for { 0.25 | 0.5 } would be 0.375, but maybe I miscalculated Raymond&#8217;s algorithm.</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-4" id="comment-1227701">
				<div id="div-comment-1227701" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227701">
			February 23, 2016 at 5:03 am</a>		</div>

		<p>More likely is that I miscalculated my algorithm.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt depth-3" id="comment-1227681">
				<div id="div-comment-1227681" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xinthia Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227681">
			February 23, 2016 at 2:41 am</a>		</div>

		<p>But isn&#8217;t 0.5 shorter than 0.25? And expressed in binary, 0.01 &lt;= 0.1 &lt;= 0.1.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment byuser comment-author-oldnewthing bypostauthor even depth-2" id="comment-1227711">
				<div id="div-comment-1227711" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227711">
			February 23, 2016 at 5:04 am</a>		</div>

		<p>If you&#8217;re going to do that, then skip the string and just do bit operations directly on the mantissa.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1227671">
				<div id="div-comment-1227671" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227671">
			February 23, 2016 at 2:26 am</a>		</div>

		<p>Related: <a href="http://codegolf.stackexchange.com/q/73509/17602" rel="nofollow">http://codegolf.stackexchange.com/q/73509/17602</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1 parent" id="comment-1227691">
				<div id="div-comment-1227691" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Steinar H. Gunderson</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1227691">
			February 23, 2016 at 2:54 am</a>		</div>

		<p>I believe it&#8217;s possible to do this without a for loop, in just a few instructions, if you&#8217;re willing to assume numbers are IEEE 754 floats. It&#8217;s more complicated, but here&#8217;s an outline (ignoring NaNs and inf for now):</p>
<p>&#8211; If the signs differ, either the numbers are -0.0 and +0.0 (in which case there is no solution), or +0.0 is your solution.<br />
&#8211; If the exponents are the same, find the first digit of the mantissa where they differ (the smaller will be 0 and the larger will be 1, at least assuming positive numbers). You can do this in constant time with XOR and a bit-search instruction. Try setting the 0-bit in the smaller to 1 and truncating the rest; if that&#8217;s not equal to the larger number, that&#8217;s your solution. If it _is_ equal to the larger, set the end to …01 instead of …1. That&#8217;s your solution.<br />
&#8211; If the exponents are different, I&#8217;m not sure if there&#8217;s sufficient information in your problem. (What&#8217;s the right solution for 2.0 and 32.0; are 4, 8 and 16 all good solutions? Or 2.5? Or are these numbers implicitly fixed-point with the 1.0 bit as the first one?) Anyway, for one possible interpretation, you can take the smaller number (again assuming they are positive), find the first 0 bit, flip it to 1 and truncate as above. If the mantissa is all-ones, the solution is to just add epsilon, which takes you up to the next exponent.</p>
<p>If the numbers are to be interpreted as fixed-point between 0.0 and 1.0, you can convert them to fixed-point by just adding 1.0 (making them between 1.0 and 2.0), and then you can follow case #2 above. That&#8217;s probably cheating, though, since it chops off precision :-)</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1228351">
				<div id="div-comment-1228351" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1228351">
			February 26, 2016 at 3:07 pm</a>		</div>

		<p>For (2.0, 32.0) the answer is 3. The smallest denominator is 1, and the smallest numerator for that denominator is 3.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-odd thread-alt depth-1 parent" id="comment-1228331">
				<div id="div-comment-1228331" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Xinthia Douglas</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1228331">
			February 26, 2016 at 2:10 pm</a>		</div>

		<p>‘Your comment is awaiting moderation.’<br />
Can I ask why it is taking so long?</p>

		
				</div>
		<ol class="children">
		<li class="comment byuser comment-author-oldnewthing bypostauthor odd alt depth-2" id="comment-1228332">
				<div id="div-comment-1228332" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Raymond+Chen+-+MSFT' rel='external nofollow' class='url'>Raymond Chen - MSFT</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1228332">
			February 26, 2016 at 3:04 pm</a>		</div>

		<p>I&#8217;m kind of busy. Also, comments with fake email addresses are not accepted.</p>

		
				</div>
		</li><!-- #comment-## -->
</ol><!-- .children -->
</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1228382">
				<div id="div-comment-1228382" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Lev</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20160222-00/?p=93061#comment-1228382">
			February 26, 2016 at 9:48 pm</a>		</div>

		<p>The practical usage of this exercise is in Fano coding ( <a href="https://en.wikipedia.org/wiki/Shannon%E2%80%93Fano_coding" rel="nofollow">https://en.wikipedia.org/wiki/Shannon%E2%80%93Fano_coding</a> ).</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

