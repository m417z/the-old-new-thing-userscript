<html>
<head>
<title>What's the difference between GetKeyState and GetAsyncKeyState?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>What&#8217;s the difference between GetKeyState and GetAsyncKeyState?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>November 30, 2004 / year-entry #406</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>14</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">I've seen some confusion over the difference between the GetKeyState function and the GetAsyncKeyState function. GetKeyState returns the virtual key state. In other words, GetKeyState reports the state of the keyboard based on the messages you have retrieved from your input queue. This is not the same as the physical keyboard state: If the user...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>I've seen some confusion over the difference between <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/getkeystate.asp"> the <code>GetKeyState</code> function</a> and <a href="http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/getasynckeystate.asp"> the <code>GetAsyncKeyState</code> function</a>.</p>
<p> <code>GetKeyState</code> returns the virtual key state. In other words, <code>GetKeyState</code> reports the state of the keyboard <b>based on the messages you have retrieved from your input queue</b>. This is not the same as the physical keyboard state: </p>
<ul>
<li>  If the user has typed ahead, <code>GetKeyState</code> doesn't report those changes until you use <a href="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/MessagesandMessageQueues/MessagesandMessageQueuesReference/MessagesandMessageQueuesFunctions/PeekMessage.asp"> the <code>PeekMessage</code> function</a> or <a href="http://msdn.microsoft.com/library/en-us/winui/WinUI/WindowsUserInterface/Windowing/MessagesandMessageQueues/MessagesandMessageQueuesReference/MessagesandMessageQueuesFunctions/GetMessage.asp"> the <code>GetMessage</code> function</a> to retrieve the message from your input queue. </p>
</li>
<li>
<p> If the user has switched to another program, then the <code>GetKeyState</code> function will not see the input that the user typed into that other program, since that input was not sent to your input queue. </p>
</li>
</ul>
<p> When should you use <code>GetKeyState</code> and when should you use <code>GetAsyncKeyState</code>? </p>
<p> For user interface work, you nearly always want <code>GetKeyState</code>. </p>
<p> If you are responding to an input message and want to know what keys were pressed at the time that input was generated, then you want to use <code>GetKeyState</code>. For example, if you want to distinguish a left-click of the mouse from an Alt+LeftClick, you must use <code>GetKeyState</code> to query the state of the Alt key (known as VK_MENU for historical reasons). That's because you want to know whether the Alt key was down <b>when the user clicked the mouse</b>, not whether the key is down <b>this very instant</b>. Whether the user released the Alt key between the time they clicked and the time you processed the message is irrelevant.  You care that the Alt key was down at the time of the click. </p>
<p> Note that if you are implementing a context menu handler, then you shouldn't be using either <code>GetKeyState</code> or <code>GetAsyncKeyState</code>, because the context menu can be invoked programmatically without any user action. For <code>IContextMenu::QueryContextMenu</code>, you should test for the <code>CMF_EXTENDEDVERBS</code> flag to detect whether you should display extended commands rather than querying the keyboard directly. Similarly, for <code>IContextMenu::InvokeCommand</code>, <a href="http://blogs.msdn.com/oldnewthing/archive/2004/09/24/234113.aspx"> you should be testing the <code>CMIC_MASK_CONTROL_DOWN</code> and <code>CMIC_MASK_SHIFT_DOWN</code> flags</a> if you want to alter your behavior based on the shift states. </p>
<p> Given this primer on the difference between  <code>GetKeyState</code> and <code>GetAsyncKeyState</code>, you can now <a href="http://groups.google.com/groups?selm=ubDbObcSEHA.504@TK2MSFTNGP11.phx.gbl"> explain the behavior this user is seeing</a>. </p>
<p> [Updated: 1 Dec 2004, minor typo.] </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (14)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-231293">
				<div id="div-comment-231293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">asdf</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231293">
			November 30, 2004 at 7:20 am</a>		</div>

		<p>And similarly, I see a lot of people using GetCursorPos when they really meant GetMessagePos.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231303">
				<div id="div-comment-231303" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231303">
			November 30, 2004 at 7:25 am</a>		</div>

		<p>&#8230;and why on Windows 95, pressing Shift-Delete to bypass the recycle bin doesn&#8217;t work if you release Shift too quickly.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231323">
				<div id="div-comment-231323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">GregM</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231323">
			November 30, 2004 at 8:08 am</a>		</div>

		<p>Thanks asdf, I&#8217;d never heard of GetMessagePos before.</p>
<p>It sure would have been nice if the GetCursorPos documentation included a link to GetMessagePos, like GetMessagePos has links to GetCursorPos.<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231363">
				<div id="div-comment-231363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Centaur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231363">
			November 30, 2004 at 10:27 am</a>		</div>

		<p>I once had a problem with tinysfv, a console CRC32 calculator. In short, it takes names of files on the command line, calculates CRC32 for each and puts them into a crc.sfv file. </p>
<p>Of course, this is done way longer than said; you typically switch to another program while tinysfv is calculating. Then you switch back to check on the status, only to find that it had aborted for no particular reason.</p>
<p>When I looked at the source (thankfully, it comes with sources), I found this:</p>
<p>while (PeekMessage(&amp;message, NULL, 0, 0, PM_REMOVE))<br />
<br />{<br />
<br /> TranslateMessage(&amp;message);          // Translate keyboard messages DispatchMessage(&amp;message);           // Message handling<br />
<br />}<br />
<br />if (GetAsyncKeyState(VK_ESCAPE) &amp; 0x8001)<br />
<br />{<br />
<br /> Abort = TRUE;<br />
<br /> return 0;<br />
<br />}</p>
<p>Now that was a major WTF to me. A console program, having a message pump, and on top of that, polling for Escape? Whatever happened to good old Ctrl+C? Of course, removing these lines fixed everything.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231373">
				<div id="div-comment-231373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Matt Green</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231373">
			November 30, 2004 at 10:35 am</a>		</div>

		<p>With regard to context menu handlers, you discuss what to do if you are using IContextMenu, I assume based on the MSDN documentation for it that it is for shell context menus only. I am wondering if there is a correct way to check for keys being held down when implementing context menus in other applications. Right now I am just using GetKeyState().</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231443">
				<div id="div-comment-231443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">NealSid</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231443">
			November 30, 2004 at 5:32 pm</a>		</div>

		<p>is it because no message is stuck in the input queue when setting numlock programmatically?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231453">
				<div id="div-comment-231453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231453">
			November 30, 2004 at 5:35 pm</a>		</div>

		<p>The numlock message is in the queue. That&#8217;s the problem.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231523">
				<div id="div-comment-231523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://sflint@bmc.com' rel='external nofollow' class='url'>splintor</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231523">
			December 1, 2004 at 4:27 am</a>		</div>

		<p>Typo: &quot;When should use use&quot; should be &quot;When should you use&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231553">
				<div id="div-comment-231553" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">mschaef</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231553">
			December 1, 2004 at 6:51 am</a>		</div>

		<p>What&#8217;s a viable use case for GetAsyncKeyState?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231603">
				<div id="div-comment-231603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.divil.co.uk/net' rel='external nofollow' class='url'>Tim Dawson</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231603">
			December 1, 2004 at 8:18 am</a>		</div>

		<p>Checking for keyboard input in a game loop.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-231713">
				<div id="div-comment-231713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Seddon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231713">
			December 1, 2004 at 12:11 pm</a>		</div>

		<p>Except then you&#8217;d want DirectInput :)<br /></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-231843">
				<div id="div-comment-231843" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">bob</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-231843">
			December 2, 2004 at 2:42 am</a>		</div>

		<p>I see a good point here!</p>
<p><a href="mailto:bob@abirnet.co.il">bob@abirnet.co.il</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-232013">
				<div id="div-comment-232013" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jasmusic.com' rel='external nofollow' class='url'>Joshua Schaeffer</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-232013">
			December 2, 2004 at 1:03 pm</a>		</div>

		<p>DirectInput is overkill.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-232243">
				<div id="div-comment-232243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tom Seddon</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20041130-00/?p=37173#comment-232243">
			December 3, 2004 at 12:56 pm</a>		</div>

		<p>Not for games, I don&#8217;t think. It will (optionally) disable the windows key for you &#8212; nobody likes a working windows key when playing a game! Definitely worth the effort of using it, I think, though &#8216;effort&#8217; is hardly the right word since it&#8217;s only about 60 lines to set up the keyboard (less if you support 1 version of DirectX and don&#8217;t use the emulated versions) and extremely easy to use once it&#8217;s running.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

