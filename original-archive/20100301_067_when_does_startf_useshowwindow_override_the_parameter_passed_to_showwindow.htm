<html>
<head>
<title>When does STARTF_USESHOWWINDOW override the parameter passed to ShowWindow()?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>When does STARTF_USESHOWWINDOW override the parameter passed to ShowWindow()?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>March 1, 2010 / year-entry #68</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20100301-00/?p=14773</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>6</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">kokorozashi wants to know what the rules are which govern when the second parameter to ShowWindow is overridden by the STARTF_USESHOWWINDOW flag. The guiding principle is that the parameter is ignored if the window manager thinks that the window you're creating is the application's main window. The details behind the implementation of this principle change...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>kokorozashi wants to know what the rules are which govern <a href="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#771317"> when the second parameter to <code>ShowWindow</code> is overridden by the <code>STARTF_USESHOWWINDOW</code> flag</a>.</p>
<p> The guiding principle is that the parameter is ignored if the window manager thinks that the window you're creating is the application's main window. </p>
<p> The details behind the implementation of this principle change over time, so everything from here down is implementation detail and <i>should not be relied upon</i>. I'm providing it merely to satisfy your curiosity. </p>
<p> To reiterate, <i>do not rely on information in the second half of this article because it can and will change</i>. </p>
<p> In fact, just to emphasize the point, I'm going to give the rules <i>as they once were</i>, not as they are today. So anybody who relies on this information is relying on implementation details of Windows which are no longer true. </p>
<p> The window manager heuristics for determining whether the second parameter to <code>ShowWindow</code> should be overridden were once as follows: </p>
<p> Rule zero: If the override has already been used, then don't use it again. </p>
<p> Rule one: The easy case. If the second parameter was <code>SW_SHOWDEFAULT</code>, then the application was explicitly permitting the second parameter to <code>ShowWindow</code> to be overridden by the <code>STARTF_USESHOWWINDOW</code> flag, so let it happen. </p>
<p> Rule two: Check the following properties. </p>
<ol>
<li>The <code>STARTF_USESHOWWINDOW</code> flag was set. </li>
<li>The window was top-level. </li>
<li>The window was not owned. </li>
<li>The window had the <code>WS_CAPTION</code> style. </li>
<li>The window was not system-modal. </li>
<li>The second parameter to <code>ShowWindow</code> was     <code>SW_SHOWNORMAL</code> or <code>SW_SHOW</code>. </li>
</ol>
<p> Let's look at these heuristics one at a time. </p>
<p> First, the <code>STARTF_USESHOWWINDOW</code> flag needed to be set: If it wasn't, then there wasn't anything to override <i>with</i>. </p>
<p> Next, the window needed to be top-level (not a child window). Because a child window clearly is not the application's main window. </p>
<p> The window also must not have been owned. An owned window is not the main window (the owner would be a much better candidate), and besides, it would be bad to have minimized or hidden an owned window, since that would have left the owner sitting around for apparently no reason. Even worse if the window being created was intended to be modal to the owner: You would have had a disabled window on the screen, and the window you needed to close in order to get that window enabled again was hidden! </p>
<p> Another rule was that the window had to have a caption. This made it less likely that splash screens and other incidental windows would be misdetected as the application's main window. </p>
<p> System-modal windows were also excluded, because you didn't want system-critical error messages to be mistaken for the application's main window. (Especially if the action was <code>SW_HIDE</code>!) </p>
<p> The second parameter to <code>ShowWindow</code> had to be one of the special values <code>SW_SHOW</code> or <code>SW_SHOWNORMAL</code>. These values were most likely to be passed by applications which were not particular about how the window was shown. They would be comparatively unlikely to be upset that their attempt to show the window was overridden. </p>
<p> Once a window was identified as a likely main window (either by explicitly saying so via <code>SW_SHOWDEFAULT</code> or implicitly via the heuristics), the second parameter to <code>ShowWindow</code> was ignored and replaced with the value specified by <code>STARTF_USESHOWWINDOW</code>. </p>
<p> There was some other fiddling that happened, but they aren't really important to the topic at hand, so I'll ignore them. </p>
<p> Again, I reiterate that this information is provided merely to satisfy your curiosity and must not be relied upon by applications, since the heuristics may be tweaked in future versions of Windows. If you want the <code>STARTF_USESHOWWINDOW</code> flag to have an effect on your program, just pass <code>SW_SHOWDEFAULT</code> to <code>ShowWindow</code>. That's the value that says, "No really, I'm asking for it. Lemme have it." </p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (6)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-815713">
				<div id="div-comment-815713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Voigt [C++ MVP]</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100301-00/?p=14773#comment-815713">
			March 1, 2010 at 11:40 am</a>		</div>

		<p>I think I would have favored putting rules zero and one in the other order. &nbsp;The docs seem to agree since they mention subsequent calls, plural.</p>
<p>&quot;For GUI processes, the first time ShowWindow is called, its nCmdShow parameter is ignored wShowWindow specifies the default value. In subsequent calls to ShowWindow, the wShowWindow member is used if the nCmdShow parameter of ShowWindow is set to SW_SHOWDEFAULT.&quot;</p>
<p><a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms686331" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms686331</a>(VS.85).aspx</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815723">
				<div id="div-comment-815723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Ben Hutchings</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100301-00/?p=14773#comment-815723">
			March 1, 2010 at 12:11 pm</a>		</div>

		<p>What if the application follows the old convention and passes nCmdShow (as passed to WinMain) to ShowWindow()? Shouldn&#8217;t that disable subsequent overrides?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-815773">
				<div id="div-comment-815773" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">ulric</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100301-00/?p=14773#comment-815773">
			March 2, 2010 at 6:23 am</a>		</div>

		<p>This one is wayy more obscure to me than usual. &nbsp;STARTF_what? And how does that question come up anyway? yikes!</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-815953">
				<div id="div-comment-815953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">KenW</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100301-00/?p=14773#comment-815953">
			March 2, 2010 at 11:41 am</a>		</div>

		<p>@ulric: It&#8217;s a flag specified as wShowWindow in the STARTUPINFO/STARTUPINFOEX structure provided as a parameter to CreateProcess(). See <a rel="nofollow" target="_new" href="http://msdn.microsoft.com/en-us/library/ms682425" rel="nofollow">http://msdn.microsoft.com/en-us/library/ms682425</a>(VS.85).aspx</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-yuhong-bao even thread-even depth-1" id="comment-816003">
				<div id="div-comment-816003" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Yuhong+Bao' rel='external nofollow' class='url'>Yuhong Bao</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100301-00/?p=14773#comment-816003">
			March 2, 2010 at 1:48 pm</a>		</div>

		<p>Ben Hutchings: Yep, this thing (which IMO is a bit of a hack) is for apps that forget to pass nCmdShow to ShowWindow.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-816903">
				<div id="div-comment-816903" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Dan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20100301-00/?p=14773#comment-816903">
			March 5, 2010 at 5:09 am</a>		</div>

		<p>I think this is what Raymond is trying to say:</p>
<p>The first rule of window manager heuristics is: you do not talk about the rules of window manager heuristics.</p>
<p>The second rule of window manager heuristics is: you DO NOT talk about the rules of window manager heuristics.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

