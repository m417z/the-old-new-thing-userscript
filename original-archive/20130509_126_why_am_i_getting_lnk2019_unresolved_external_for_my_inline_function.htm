<html>
<head>
<title>Why am I getting LNK2019 unresolved external for my inline function?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Why am I getting LNK2019 unresolved external for my inline function?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>May 9, 2013 / year-entry #127</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>23</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">More than once, I've seen somebody confused by how inline functions work. I have implemented a few inline functions in one of my cpp files, and I want to use it from other cpp files, so I declare them as extern. But sometimes I will get linker error 2019 (unresolved external) for the inline functions....</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
More than once, I've seen somebody confused by how inline functions work.
</p>
<blockquote CLASS=m>
<p>
I have implemented a few inline functions in one of my cpp files,
and I want to use it from other cpp files,
so I declare them as <code>extern</code>.
But sometimes I will get linker error 2019 (unresolved external)
for the inline functions.
</p>
<pre>
// a.cpp
inline bool foo() { return false; }

// b.cpp
extern bool foo();

bool bar() { return foo(); }
</pre>
</blockquote>
<p>
Yup, that's right.
The C++ language says in section 3.2(3) [C++03, C++11],
and repeats in section 7.1.2(4) [C++03, C++11],
</p>
<blockquote CLASS=q><p>
An inline function shall be defined
in every translation unit in which it is used.
</p>
</blockquote>
<p>
(A <i>translation unit</i> is the technical term for what
we intuitively can think of as a single cpp file and all the
files that it <code>#include</code>s.)
</p>
<p>
By putting the definition of <code>foo</code> in a cpp file,
you make its definition visible only to that cpp file and
no other cpp file.
When you compile <code>b.cpp</code>,
sees that you declared it as a normal external function,
so it generates a call to it like a normal external function.
On the other hand, when you compile <code>a.cpp</code>,
the compiler sees that <code>foo</code> is an inline function,
so it says,
"I don't need to generate any code yet.
Inline functions generate code at the point they are invoked,
not at the point they are defined."
</p>
<p>
Result:
<code>b.cpp</code> asks for a definition of <code>foo</code>,
but nobody provides it,
because the two declarations were inconsistent.
This is a violation of
7.1.2(4) [C++03, C++11]
which says
"If a function with external linkage is
declared inline in one translation unit,
it shall be declared inline in all translation units in which it appears;
no diagnostic is required."
The magic phrase <i>no diagnostic is required</i> means that the compiler
is not even required to report the error.
(You're lucky that it did!)
</p>
<p>
This rule makes sense when you think about the classical model of
compiling:
The compiler logically
takes the source code and sends it through the
preprocessor.
The result (the <i>translation unit</i>)
then goes into the compiler proper,
which learns about structures and classes and functions,
and it generates code based on what it sees in that
translation unit.
The compiler does not have access to other translation units,
so when compiling <code>a.cpp</code> it can't peek into
<code>b.cpp</code> and say,
"Hm, it looks like somebody is going to be calling <code>foo</code>
as a non-inline function,
so let me also generate a non-inline version of it."
And similarly,
when the compiler is generating code for the
<code>bar</code> function,
it doesn't peek into <code>a.cpp</code> and say,
"Hm, it looks like <code>foo</code> is actually an inline
function.
Let me go steal its definition from that other file."
</p>
<p>
The solution is to
<a HREF="http://www.parashift.com/c++-faq-lite/inline-functions.html#faq-9.6">
move the definition of the inline function into the header file</a>.
</p>
<p>
Now you can solve this problem:
</p>
<blockquote CLASS=m>
<p>
I'm getting error LNK2019 for my <code>Get&shy;Value</code> method.
Can somebody explain why?
</p>
<pre>
// Widget.h
class Widget
{
public:
 Widget(int initialValue) : value_(initialValue) { }
 void SetValue(int value);
 inline int GetValue();
private:
 int value_;
};

// Widget.cpp
#include &lt;widget.h&gt;

inline int Widget::GetValue()
{
 return value_;
}

// Other.cpp

void something()
{
 Widget widget(42);
 printf("%d", widget.GetValue());
}
</pre>
</blockquote>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (23)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1055393">
				<div id="div-comment-1055393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">JB</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055393">
			May 9, 2013 at 7:14 am</a>		</div>

		<p>In these days of link time code generation I imagine that some of these &quot;problems&quot; could be solved.</p>
<p>But can&#39;t be because 1) we don&#39;t want to enforce link time code generation, and 2) backwards compatibility</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1055403">
				<div id="div-comment-1055403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055403">
			May 9, 2013 at 7:57 am</a>		</div>

		<p>In the last exercise, you put a declaration that the function is inline in the .h file, but the compiler still doesn&#39;t know where to find the definition of the inline code. I believe you have to put the the whole function definition in the header file as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1055413">
				<div id="div-comment-1055413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055413">
			May 9, 2013 at 8:09 am</a>		</div>

		<p>Why doesn&#39;t the second yield a compiler error as its declared noninline and defined inline?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1055423">
				<div id="div-comment-1055423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055423">
			May 9, 2013 at 8:18 am</a>		</div>

		<p>@Brian EE: Correct. &nbsp;The exercise and the original example are semantically identical after preprocessing &#8212; Widget.cpp sees both the declaration and definition of GetValue(), but Other.cpp only sees the inline declaration (not the definition), which again violates the same clause cited by Raymond (&quot;An inline function shall be defined in every translation unit in which it is used.&quot;).</p>
<p>@Joshua: Assuming you&#39;re referring to Widget::GetValue(), it <em>is</em> declared inline.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1055443">
				<div id="div-comment-1055443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Chris Walken</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055443">
			May 9, 2013 at 8:35 am</a>		</div>

		<p>I would like to propose a new rule that says foo and bar can never ever ever be used in example code ever again. Ever.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman odd alt thread-odd thread-alt depth-1" id="comment-1055453">
				<div id="div-comment-1055453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055453">
			May 9, 2013 at 8:59 am</a>		</div>

		<p>If @Chris Walken&#39;s proposed rule is accepted, then I propose that all example functions be named boots()</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1055463">
				<div id="div-comment-1055463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055463">
			May 9, 2013 at 9:23 am</a>		</div>

		<blockquote><p>
  The magic phrase no diagnostic is required means that the compiler is not even required to report the error. (You&#39;re lucky that it did!)
</p></blockquote>
<p>What exactly does this mean? &nbsp;In this case the linker is reporting the error, but I assume by &quot;compiler&quot; you mean &quot;toolchain&quot;. &nbsp;What would happen if the error were not reported? &nbsp;I guess the linker would just silently fail? &nbsp;How can it be legal to not report a fatal error? &nbsp;From a quick Google^H^H^H^H^H^HBing search, it seems the relevant bit of the standard is &quot;If a program contains a violation of a rule for which no diagnostic is required, this International Standard places no requirement on implementations with respect to that program.&quot; &nbsp;So if you write a non-compliant program, and the rules you break are &quot;no diagnostic required&quot;, then the toolchain can do whatever the hell it wants? &nbsp;Awesome! &nbsp;I&#39;m going to write a compiler that formats your hard drive when one of these non-diagnostic rules is broken.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-alegrigoriev odd alt thread-odd thread-alt depth-1" id="comment-1055473">
				<div id="div-comment-1055473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/alegr1' rel='external nofollow' class='url'>alegr1</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055473">
			May 9, 2013 at 9:42 am</a>		</div>

		<p>In C++, a function declared inline, gets static linkage by default (unless it&#39;s a member function). If I remember correctly.</p>
<p>John:</p>
<p>That means, if a function is not declared &#39;inline&#39; in some compilation unit, and declared &#39;inline&#39; in others, the definition might be different and violate One Definition Rule, but the compiler/linker won&#39;t be able to detect that and issue any diagnostic.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1055513">
				<div id="div-comment-1055513" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">12BitSlab</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055513">
			May 9, 2013 at 10:56 am</a>		</div>

		<p>I must be REALLY old. &nbsp;In them there olden days, we would have written routines in ASM, compiled them them to an object, and then linked them in. &nbsp;Of course, back in those days, no compilers I knew of (outside of PL/I) could have inline code.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1055523">
				<div id="div-comment-1055523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">James</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055523">
			May 9, 2013 at 11:25 am</a>		</div>

		<p>@Joshua: It&#39;s quite legal (from the compiler&#39;s POV) to use <code>inline</code> next to the definition but not in the declaration. (And it is the practice that some recommend: <a rel="nofollow" target="_new" href="http://www.parashift.com/c++-faq/where-to-put-inline-keyword.html" rel="nofollow">http://www.parashift.com/&#8230;/where-to-put-inline-keyword.html</a> )</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-joshuaganes even thread-even depth-1" id="comment-1055563">
				<div id="div-comment-1055563" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Joshua+Ganes' rel='external nofollow' class='url'>Joshua Ganes</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055563">
			May 9, 2013 at 2:57 pm</a>		</div>

		<p><!-- p>Typo: "More than once, I'm seen somebody"
I&#39;m aware of inline functions and their basic behavior. Frankly, I&#39;ve never found a use for them in any serious projects. I imagine that if you have a serious bottleneck loop that calls a simple function over and over, you would be able to coerce some speed out of it by changing it to an inline function. With modern machines and compilers, I&#39;ve just never found the need.

What&#39;s the biggest efficiency gain anyone reading this blog has found by changing to use an inline function?
</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chris-j-leonard odd alt thread-odd thread-alt depth-1" id="comment-1055573">
				<div id="div-comment-1055573" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Veltas' rel='external nofollow' class='url'>Veltas</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055573">
			May 9, 2013 at 2:57 pm</a>		</div>

		<p>Hold on, so other.cpp doesn&#39;t need to #include a definition of the class to make objects from it? &nbsp;Just needs to link with it?</p>
<p>Or did you #include &quot;Widget.h&quot; somewhere in other.cpp?</p>
<p>This may seem like nit-picking, but actually I don&#39;t get put in charge of linking and #includes very much&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chris-j-leonard even thread-even depth-1" id="comment-1055603">
				<div id="div-comment-1055603" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Veltas' rel='external nofollow' class='url'>Veltas</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055603">
			May 9, 2013 at 4:07 pm</a>		</div>

		<p>@Evan: &nbsp;Thanks! &nbsp;That clears it up for me, not used to worrying about headers etc. too much, just stick to a certain pattern and live by certain simple rules like &quot;inline functions must be defined in a header file&quot; funnily enough.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1055623">
				<div id="div-comment-1055623" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055623">
			May 9, 2013 at 4:38 pm</a>		</div>

		<p>[I can imagine a toolchain where the attempt to find the named function is made, the attempt fails (because it was defined inline even though it was declared as non-inline), and a null pointer comes back, and then the code calls the null pointer and then you are clearly in undefined territory. I can imagine this because such a toolchain already exists. It&#39;s called Win16. -Raymond]</p>
<p>I was expecting that. And there is case on record where call (NULL + 7 * 2) resulted in formatting the hard disk, so you&#39;re not completely off on can format disk.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1055483">
				<div id="div-comment-1055483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055483">
			May 9, 2013 at 9:46 am</a>		</div>

		<p>@John: &quot;What exactly does this mean? &nbsp;In this case the linker is reporting the error, but I assume by &quot;compiler&quot; you mean &quot;toolchain&quot;. &nbsp;What would happen if the error were not reported? &nbsp;I guess the linker would just silently fail?&quot;</p>
<p>Not necessarily. For instance, you could write a toolchain that, at a function call, looks up in some global dictionary the name of the function and then jumps to that address. At program start, it would just populate that dictionary.</p>
<p>If you called an undefined function then, it could throw a runtime error, crash, or perform other undefined behavior.</p>
<p>Is this LIKELY? No. But it sounds like it&#39;s allowed by the standard, and in some sense it&#39;s not even *really* trying to be actively malicious and sounds like it could be the basis for an implementation if you really wanted it to be. (Actually it&#39;s about what Python does, for example.)</p>
<div class="post">[<em>I can imagine a toolchain where the attempt to find the named function is made, the attempt fails (because it was defined inline even though it was declared as non-inline), and a null pointer comes back, and then the code calls the null pointer and then you are clearly in undefined territory. I can imagine this because such a toolchain already exists. It&#39;s called Win16. -Raymond</em>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1055493">
				<div id="div-comment-1055493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Adam Rosenfield</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055493">
			May 9, 2013 at 10:16 am</a>		</div>

		<p>@John: Yes, you *could* do that, but then nobody would use your compiler. &nbsp;The reason the standard does not require a diagnostic in this instance is so that it can allow a conforming implementation which, upon seeing an inline function, chooses not to inline it and instead creates an external definition; it then merges all of the external definitions of that inline function from different translation units (the One Definition Rule) to avoid multiply defined symbols for legal code.</p>
<p>This will result in the original example compiling correctly (despite the error), and the compiler&#39;s behavior is completely reasonable. &nbsp;It does not seem sensible to require the compiler to diagnose this error, because then it would be much harder to write a simple, non-optimizing compiler.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-chris-j-leonard even thread-even depth-1" id="comment-1055633">
				<div id="div-comment-1055633" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Veltas' rel='external nofollow' class='url'>Veltas</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055633">
			May 9, 2013 at 6:19 pm</a>		</div>

		<p>@Joshua</p>
<p>&quot;I was expecting that. And there is case on record where call (NULL + 7 * 2) resulted in formatting the hard disk, so you&#39;re not completely off on can format disk.&quot;</p>
<p>I&#39;m so glad I wasn&#39;t around for those days sometimes&#8230;</p>
<p>Why was that? &nbsp;Were the addresses of functions that did useful things in the start of addressable memory or was it more complicated?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1055643">
				<div id="div-comment-1055643" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Joshua</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055643">
			May 9, 2013 at 6:35 pm</a>		</div>

		<p>@Veltas: It&#39;s not immediately obvious whether it executed the interrupt vector table, or did near call indirect on a far pointer.</p>
<p>Either way, one of the instructions reached before crashing outright happened to decode to &quot;out [some port]&quot; which happened to correspond to the ISA-IDE link and the byte in AL was the format command.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1055583">
				<div id="div-comment-1055583" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055583">
			May 9, 2013 at 3:56 pm</a>		</div>

		<p>@Raymond: &quot;&#8230;a null pointer comes back, and then the code calls the null pointer and then you are clearly in undefined territory&quot;</p>
<p>Nifty. Any idea why they didn&#39;t check for that case? Was it just a convenience issue, or was there some deeper reason why you might want to have that null call there?</p>
<div class="post">[<em>The language permits the implementation to do anything. Executing random garbage is a legal value for &quot;anything&quot;. Why write code you don&#39;t have to? -Raymond</em>]</div>
<p>@Joshua: &quot;What&#39;s the biggest efficiency gain anyone reading this blog has found by changing to use an inline function?&quot;</p>
<p>Depends what you mean.</p>
<p>Here&#39;s the deal. *Marking* a function as inline I suspect rarely does much. However, this is because the compiler will consider inlining functions unilaterally when optimization is on. I did some tests with two non-MS compilers a while back, and on the examples I tried about half the benefit of -O1 relative to -O0 is lost if you disable inlining (-fno-inline). (-O2 provided a similar amount of gain over -O1 as -O1 did over -O1 -fno-inline, or as -O1 -fno-inline did over -O0. Actually a bit less.) So inlining as an optimization buys a great deal of benefit.</p>
<p>(Said program actually makes somewhat heavy use of virtual functions as well, so there are plenty of calls to small functions which it is unable to optimize for that reason.)</p>
<p>However, without link-time code generation, the compiler is only able to inline a function &#8212; by your instruction or on its own &#8212; if the definition is available. If you have a function boots() which is defined in one compilation unit and called inside of a tight loop in another, the compiler won&#39;t be able to do anything. So that is legitimately missed opportunities.</p>
<p>So what does this mean? My takeaway is as follows. It really can buy quite a bit to make sure that your functions are inline-*able* by being available in the compilation units in which they are used. This doesn&#39;t necessarily mean that they are marked inline. However, if you want to use those functions across different compilation units and put them into a header as a result, you need some way to eliminate multiple definition linker errors &#8212; and marking them &quot;inline&quot; is probably the best way to achieve that end. So inlining the optimization is helpful, and &quot;inline&quot; the keyword is necessary for correctness.</p>
<p>The other side of the story is I&#39;m not sure how much it would help to explicitly try to make function definitions inlineable, or whether you get most of the benefit just reasonably naturally.</p>
<p>(I&#39;m not totally sure how __force_inline or however it is spelled plays into this.)</p>
<p>@Veltas: &quot;Or did you #include &quot;Widget.h&quot; somewhere in other.cpp?&quot;</p>
<p>Yes, you&#39;re correct. The definition needs to be visible. (Importantly in other contexts, you don&#39;t need a full class definition to make a pointer or reference: &quot;class C; C* c;&quot; is A-OK. But even there you need a declaration.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1055693">
				<div id="div-comment-1055693" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Paul Parks</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055693">
			May 10, 2013 at 4:59 am</a>		</div>

		<p>@Joshua Ganes: The &quot;inline&quot; keyword in standard C++ is a bit weird. It&#39;s actually nothing more than a pitiful request for the compiler to please, if it&#39;s not too much trouble, inline the function. The compiler (or, more likely, the optimizer) can, and often will, do whatever it wants with the function&#39;s code. Indeed, a function not declare as inline may end up being inlined while one that is declared as inline may not be. The only way to guarantee inlining is through compiler-specific keywords like forceinline.</p>
<p>That said, the inline keyword is still useful because some functions should be defined in a header, such as particular overloaded operators. These should be declared as inline, even though the compiler and/or optimizer may not even inline them.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-bboorman even thread-even depth-1" id="comment-1055713">
				<div id="div-comment-1055713" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Brian_EE' rel='external nofollow' class='url'>Brian_EE</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055713">
			May 10, 2013 at 7:21 am</a>		</div>

		<p>@Joshua Ganes: &quot;Frankly, I&#39;ve never found a use for them in any serious projects.&quot;</p>
<p>Someday you should take a ride on the real-time embedded DSP train. Inline is useful when you really need that last extra clock cycle&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1055733">
				<div id="div-comment-1055733" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Evan</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1055733">
			May 10, 2013 at 8:28 am</a>		</div>

		<p>@Paul M Parks: &quot;The &quot;inline&quot; keyword in standard C++ is&#8230;actually nothing more than a pitiful request for the compiler to please, if it&#39;s not too much trouble, inline the function&quot;</p>
<p>Don&#39;t forget the linker feature that I mentioned: it&#39;s also a directive to the linker to collapse multiple definitions of that function.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-fredericmagnyf even thread-even depth-1" id="comment-1056473">
				<div id="div-comment-1056473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Medinoc' rel='external nofollow' class='url'>Medinoc</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20130509-00/?p=4413#comment-1056473">
			May 16, 2013 at 4:54 am</a>		</div>

		<p>Visual&#39;s C++ rules seem to be different, with MSDN saying only that inline functions have static linkage by default. But *can* have external linkage. </p>
<p>In fact, in your code sample, replacing &quot;inline int Widget::GetValue()&quot; with a free function* &quot;extern inline int GetWidgetValue(Widget &amp;obj)&quot; &nbsp;will do the trick. It actually tells the compiler to think &quot;Hm, it looks like somebody is going to be calling foo as a non-inline function, so let me also generate a non-inline version of it.&quot;</p>
<p>*The function need to be free however, attempting it on a member function yields &quot;warning C4630: &#39;Widget::GetValue&#39; : &#39;extern&#39; storage-class specifier illegal on member definition&quot; in Visual C++ 2010.</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

