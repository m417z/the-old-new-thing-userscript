<html>
<head>
<title>Finding the shortest path to the ground while avoiding obstacles</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>Finding the shortest path to the ground while avoiding obstacles</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>July 28, 2014 / year-entry #181</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>9</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Today's Little Program solves the following problem: Consider a two-dimensional board, tall and narrow. Into the board are nailed a number of horizontal obstacles. Place a water faucet at the top of the board and turn it on. The water will dribble down, and when it hits an obstacle, some of the water will go...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Today's Little Program solves the following problem:
</p>
<blockquote CLASS=q><p>
Consider a two-dimensional board, tall and narrow.
Into the board are nailed a number of horizontal obstacles.
Place a water faucet at the top of the board and turn it on.
The water will dribble down, and when it hits an obstacle,
some of the water will go left and some will go right.
The goal is to find the shortest path to the ground from a given
starting position,
counting both horizontal and vertical distance traveled.
</p>
</blockquote>
<div STYLE="border-left: solid black 1px;
            border-right: solid black 1px;
            border-bottom: solid black 1px;
            height: 253px; width: 200px;
            text-align: center; color: gray;
            position: relative" TITLE="see text for description">
<div STYLE="position: absolute; width: 1em; left: 110px; color: black">&#x2b24;</div>
<div STYLE="position: absolute; width: 1em; top: 20px; left: 110px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 40px; left: 110px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 60px; left: 50px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 60px; left: 70px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 60px; left: 90px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 60px; left: 110px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 60px; left: 130px">&bull;</div>
<div STYLE="position: absolute; width: 75px; top: 75px; left: 60px; background-color: black; height: 3px"></div>
<div STYLE="position: absolute; width: 1em; top: 80px; left: 50px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 80px; left: 130px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 100px; left: 50px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 100px; left: 130px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 120px; left: 10px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 120px; left: 30px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 120px; left: 50px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 120px; left: 70px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 120px; left: 90px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 120px; left: 130px">&bull;</div>
<div STYLE="position: absolute; width: 75px; top:135px; left: 20px; background-color: black; height: 3px"></div>
<div STYLE="position: absolute; width: 1em; top: 140px; left: 10px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 140px; left: 90px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 140px; left:130px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 160px; left: 10px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 160px; left: 90px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 160px; left:130px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 180px; left: 10px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 180px; left: 70px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 180px; left: 90px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 180px; left:110px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 180px; left:130px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 180px; left:150px">&bull;</div>
<div STYLE="position: absolute; width: 70px; top:195px; left: 85px; background-color: black; height: 3px"></div>
<div STYLE="position: absolute; width: 1em; top: 200px; left: 10px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 200px; left: 70px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 200px; left:150px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 220px; left: 10px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 220px; left: 70px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 220px; left:150px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 240px; left: 10px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 240px; left: 70px">&bull;</div>
<div STYLE="position: absolute; width: 1em; top: 240px; left:150px">&bull;</div>
</div>
<p>
In the above diagram,
the water falls three units of distance
until it encounters Obstacle&nbsp;1,
at which some goes to the left and some goes to the right.
The water that goes to the left travels three units of distance
before it reaches the
end of the obstacle,
then falls three units and encounters
Obstacle&nbsp;2.
Upon reaching Obstable&nbsp;2,
the water can again choose to flow either left or right.
The water that flows to the left falls to the ground;
the water that flows to the right falls and encounters
a third obstacle.
From the third obstacle,
the water can flow left or right, and either way it goes,
it falls to the ground.
On the other hand, the water that chose to flow to the right
when it encountered Obstable&nbsp;1 iwould fall past Obstacle&nbsp;2
(which is not in a position to intercept the water)
and land directly on Obstacle&nbsp;3.
</p>
<p>
In the above scenario, there are five paths to the ground.
</p>
<ul>
<li>From Obstacle&nbsp;1, flow left, then from Obstacle&nbsp;2,
    flow left again.
    Total distance traveled: 17 units.</p>
<li>From Obstacle&nbsp;1, flow left, then from Obstacle&nbsp;2,
    flow right,
    then from Obstacle&nbsp;3, flow left.
    Total distance traveled: 18 units.</p>
<li>From Obstacle&nbsp;1, flow left, then from Obstacle&nbsp;2,
    flow right,
    then from Obstacle&nbsp;3, flow right.
    Total distance traveled: 20 units.</p>
<li>From Obstacle&nbsp;1, flow right, then from Obstacle&nbsp;3,
    flow left.
    Total distance traveled: 16 units.</p>
<li>From Obstacle&nbsp;1, flow right, then from Obstacle&nbsp;3,
    flow right.
    Total distance traveled: 14 units.
</ul>
<p>
In this case, the shortest path to the ground
is the last path.
</p>
<p>
There are many ways to attack this problem.
The brute force solution would be to enumerate all the possible
paths to the ground, then pick the shortest one.
</p>
<p>
A more clever solution would use a path-finding algorithm
like A*,
where the altitude above the ground is the heuristic.
</p>
<p>
In both cases, you can add an optimization where once you
discover two paths to the same point, you throw out the longer one.
This may short-circuit future computations.
</p>
<p>
But I'm going to use an incremental solution, since it
has the advantage of incorporating the optimization as
a convenient side-effect.
Instead of studying individual drops of water,
I'm going to study all of them at once.
At each step in the algorithm,
the data structures represent a horizontal cross-section
of the above diagram,
representing all possible droplet positions at a fixed
altitude.
</p>
<p>
In addition to collapsing redundant paths automatically,
this algorithm has the nice property that it can be done
as an on-line algorithm:
You don't need to provide all the obstacles in advance,
as long as the obstacles are provided in order of decreasing altitude.
</p>
<p>
Instead of presenting the raw code and discussing it later
(as is my wont),
I'll explain the code as we go via code comments.
We'll see how well that works.
</p>
<p>
I originally wrote the program in C# because
I thought I would need
one of the fancy collection classes provided by the BCL,
but it turns out that I didn't need anything fancier than a hash table.
After I wrote the original C# version, I translated it to JavaScript,
which is what I present here.
</p>
<!--</p>
<pre>
// Oh you're so clever - you are doing a view.source to see the C# version.
// You can put your finger by the side of your nose as a signal.
// http://ask.metafilter.com/4447/
using System;
using System.Collections.Generic;
using System.Linq;

// An Obstacle describes the position of a single obstacle
class Obstacle
{
 public double Left { get; set; }
 public double Right { get; set; }
 public double Y { get; set; }
}

// A Step describes the last point in a path,
// the cost to get there, and
// a reference to the rest of the path.
class Step
{
 public double X { get; set; }
 public double Y { get; set; }
 public double Cost { get; set; }
 public Step Previous { get; set; }

 // Add a step to an existing step
 public Step To(double x, double y, double incrementalCost)
 {
  return new Step { Previous = this, X = x, Y = y,
                    Cost = Cost + incrementalCost };
 }

}

// Locations tracks all the possible droplet locations at a particular
// altitude. The positions are indexed by X-coordinate for easy look-up.
class Locations : SortedList&lt;double, Step&gt;
{
 // Record a droplet position
 public void Add(Step step)
 {
  // If no previous droplet at this position or the new droplet
  // has a cheaper path, then remember this droplet.
  if (!this.ContainsKey(step.X) || step.Cost &lt; this[step.X].Cost)
  {
   this[step.X] = step;
  }
 }
}

static class Extensions
{
 // Like Min, but returns the item with the minimum value rather than the
 // minimum value itself.
 public static T MinIndirect&lt;T, V&gt;(
    this IEnumerable&lt;T&gt; source,
    Func&lt;T, V&gt; func) where V : IComparable
 {
     return source.Aggregate(default(T), (sofar, next) =&gt;
        (sofar == null || func(next).CompareTo(func(sofar)) &lt; 0 ?
                                                     next : sofar));
 }
}



class Program
{
 // Take an existing collection of locations and updates them to account
 // for a new obstacle. Obstacles must be added in decreasing altitude.
 // (Consecutive duplicate altitudes allowed.)
 static Locations FallTo(Locations oldLocations, Obstacle obstacle)
 {
  Locations newLocations = {};
  foreach (var pair in oldLocations)
  {
   var step = pair.Value;
   var dy = step.Y - obstacle.Y; // distance fallen
   if (dy &gt; 0)
   {
    // fall to the obstacle's altitude
    step = step.To(step.X, obstacle.Y, dy);
   }
    
   // If the falling object does not hit the obstacle,
   // then there is no horizontal displacement.
   if (step.X &lt;= obstacle.Left || step.X &gt;= obstacle.Right)
   {
    newLocations.Add(step);
   }
   else
   {
    // The falling object hit the obstacle.
    // Split into two droplets, one that goes left
    // and one that goes right.
    newLocations.Add(step.To(obstacle.Left, obstacle.Y,
                             step.X - obstacle.Left));
    newLocations.Add(step.To(obstacle.Right, obstacle.Y,
                             obstacle.Right - step.X));
   }
  }
  return newLocations;
 }

 static void PrintPath(Step firstStep)
 {
  System.Console.Write("Cost = {0}: ", firstStep.Cost);
  // Walk the path backwards, then reverse it so we can print
  // the results forward.
  var path = new List&lt;Step&gt;();
  for (var step = firstStep; step != null; step = step.Previous)
  {
   path.Add(step);
  }
  path.Reverse();
  foreach (var step in path)
  {
   System.Console.Write("({0},{1}) ", step.X, step.Y);
  }
  System.Console.WriteLine();
 }

 // Debugging function
 static void PrintLocations(Locations l)
 {
  foreach (var pair in l)
  {
   PrintPath(pair.Value);
  }
 }

 static void Main()
 {
  var l = {};
  System.Console.Write("Initial X position: ");
  var x = double.Parse(System.Console.ReadLine());
  System.Console.Write("Initial Y position: ");
  var y = double.Parse(System.Console.ReadLine());
  l[x] = new Step { X = x, Y = y };

  for (;;)
  {
   PrintLocations(l);
   System.Console.Write("Obstacle height (0 = floor): ");
   y = double.Parse(System.Console.ReadLine());
   if (y == 0) break;
   System.Console.Write("Obstacle Left edge: ");
   var left = double.Parse(System.Console.ReadLine());
   System.Console.Write("Obstacle Right edge: ");
   var right = double.Parse(System.Console.ReadLine());
   l = FallTo(l, new Obstacle { Left = left, Right = right, Y = y });
  }

  // Find the cheapest step.
  var best = l.Values.MinIndirect(s =&gt; s.Cost);

  // Add a segment from the last obstacle to the floor and print it.
  PrintPath(best.To(best.X, 0, best.Y));
 }
}
</pre>
<p>-->
<p>
The inputs which correspond to the diagram above are
</p>
<ul>
<li>Initial X position = 6, Initial Y position = 12
<li>Obstacle: Left = 3, Right = 7, height = 9
<li>Obstacle: Left = 1, Right = 5, height = 6
<li>Obstacle: Left = 4, Right = 8, height = 3
</ul>
<p>
And here's the program.
</p>
<pre>
function Obstacle(left, right, y) {
 this.left = left;
 this.right = right;
 this.y = y;
}

// A single step in a path, representing the cost to reach that point.
function Step(x, y, cost) {
 this.x = x;
 this.y = y;
 this.cost = cost;
}

 // Add a step to an existing step
Step.prototype.to = function to(x, y) {
 var dx = Math.abs(this.x - x);
 var dy = Math.abs(this.y - y);
 return new Step(x, y, this.cost + dx + dy);
}

// Record a droplet position
function addDroplet(l, step) {
 // If no previous droplet at this position or the new droplet
 // has a cheaper path, then remember this droplet.
 var existingStep = l[step.x];
 if (!existingStep || step.cost &lt; existingStep.cost) {
  l[step.x] = step;
 }
}

// Take an existing collection of locations and updates them to account
// for a new obstacle. Obstacles must be added in decreasing altitude.
// (Consecutive duplicate altitudes allowed.)
function fallTo(oldLocations, obstacle) {
 var newLocations = {};
 for (var x in oldLocations) {
  var step = oldLocations[x];

  // fall to the obstacle's altitude
  step = step.to(step.x, obstacle.y);
    
  // If the falling object does not hit the obstacle,
  // then there is no horizontal displacement.
  if (step.x &lt;= obstacle.left || step.x &gt;= obstacle.right) {
   addDroplet(newLocations, step);
  } else {
   // The falling object hit the obstacle.
   // Split into two droplets, one that goes left
   // and one that goes right.
   addDroplet(newLocations, step.to(obstacle.left, obstacle.y));
   addDroplet(newLocations, step.to(obstacle.right, obstacle.y));
  }
 }
 return newLocations;
}

function printStep(step) {
 console.log("Cost = " + step.cost + ": " + step.x + "," + step.y);
}

// Debugging function
function printLocations(l) {
 for (var x in l) printStep(l[x]);
}

function shortestPath(x, y, obstacles) {
 var l = {};
 l[x] = new Step(x, y, 0);
 printLocations(l);

 obstacles.forEach(function (obstacle) {
  l = fallTo(l, obstacle);
  console.log(["after", obstacle.left, obstacle.right, obstacle.y].join(" "));
  printLocations(l);
  console.log("===");
 });

 // Find the cheapest step.
 var best;
 for (x in l) {
  if (!best || l[x].cost &lt; best.cost) best = l[x];
 }

 // Fall to the floor and print the result.
 printStep(best.to(best.x, 0));
}

shortestPath(6,12,[new Obstacle(3,7,9),
                   new Obstacle(1,5,6),
                   new Obstacle(4,8,3)]);
</pre>
<p>
This program finds the cost of the cheapest path to the floor,
but it merely tells you the cost and not how the cost was
determined.
To include the winning path,
we need to record the history of how the cost was determined.
This is a standard technique in dynamic programming:
In addition to remembering the best solution so far,
you also remember how that solution was arrived at
by remembering the previous step in the solution.
You can then walk backward through all the previous steps
to recover the full path.
</p>
<pre>
// A single step in a path, representing the cost to reach that point
// <font COLOR=blue>and the previous step in the path</font>.
function Step(x, y, cost, previous) {
 this.x = x;
 this.y = y;
 this.cost = cost;
 this.previous = previous;
}

 // Add a step to an existing step
Step.prototype.to = function to(x, y) {
 var dx = Math.abs(this.x - x);
 var dy = Math.abs(this.y - y);
 <font COLOR=blue>// These next two test are not strictly necessary. They are for style points.
 if (dx == 0 &amp;&amp; dy == 0) {
  // no movement
  return this;
 } else if (dx == 0 &amp;&amp; this.previous &amp;&amp; this.previous.x == x) {
  // collapse consecutive vertical movements into one
  return new Step(x, y, this.cost + dx + dy, this.previous);
 } else {</font>
  return new Step(x, y, this.cost + dx + dy<font COLOR=blue>, this</font>);
 <font COLOR=blue>}</font>
}

<font COLOR=blue>function printStep(firstStep) {
 // Walk the path backwards, then reverse it so we can print
 // the results forward.
 var path = [];
 for (var step = firstStep; step; step = step.previous) {
  path.push("(" + step.x + "," + step.y + ")");
 }
 path.reverse();
 console.log("Cost = " + firstStep.cost + ": " + path.join(" "));
}</font>
</pre>
<p>
Notice that we didn't change any of the program logic.
All we did was improve our record-keeping
so that the final result prints the full path from the starting
point to the ending point.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (9)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-1141323">
				<div id="div-comment-1141323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Katie</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141323">
			July 28, 2014 at 7:36 am</a>		</div>

		<p>I started off wondering how the subset enumeration algorithm would be a good solution to this problem. :-)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1141333">
				<div id="div-comment-1141333" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Santokes</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141333">
			July 28, 2014 at 10:44 am</a>		</div>

		<p>GPU implementation of the solution</p>
<p><a rel="nofollow" target="_new" href="http://psantoki.com/reel/Confetti/ParticleCollision2_sm.jpg">psantoki.com/&#8230;/ParticleCollision2_sm.jpg</a></p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1141343">
				<div id="div-comment-1141343" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Danny</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141343">
			July 28, 2014 at 11:05 am</a>		</div>

		<p>&quot;The brute force solution would be to enumerate all the possible paths to the ground, then pick the shortest one. &quot;</p>
<p>I like the brute-force solution (or backtracking in this case), because is easy to implement and understand and the future belongs to quantum computing. A quantum computer would, using the superposition of qubits, generate all the solutions at the same time and then we pick the shortest one. KISS.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1141353">
				<div id="div-comment-1141353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Tim</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141353">
			July 28, 2014 at 12:02 pm</a>		</div>

		<p>I have to say, this is the first time I&#39;ve heard &quot;being ready for quantum computers&quot; as a justification for choosing a brute force algorithm.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1141363">
				<div id="div-comment-1141363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">johnnyq</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141363">
			July 28, 2014 at 1:14 pm</a>		</div>

		<p>Thanks. &nbsp;Nice job.</p>
<p>In my work, we need to consider things other than the shortest path. &nbsp;Ground loops, Eddy currents and other things can be problems as well.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-harry-johnston odd alt thread-odd thread-alt depth-1" id="comment-1141403">
				<div id="div-comment-1141403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Harry+Johnston' rel='external nofollow' class='url'>Harry Johnston</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141403">
			July 28, 2014 at 5:59 pm</a>		</div>

		<p>@Danny: I&#39;m not sure there&#39;s a quantum algorithm for &quot;choosing the smallest result&quot;. &nbsp;I&#39;m not saying there isn&#39;t, but be aware that this isn&#39;t just something you can assume.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1141433">
				<div id="div-comment-1141433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Drak</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141433">
			July 28, 2014 at 10:15 pm</a>		</div>

		<p>Interesting.</p>
<p>Isn&#39;t it true (in this case) that the height does not matter at all for the shortest path distance? All droplets travel vertically as much as each other droplet. It only matters whether you go left or right over obstacles. Maybe this could provide with additional gains to speed in some cases.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment byuser comment-author-maurits odd alt thread-odd thread-alt depth-1" id="comment-1141443">
				<div id="div-comment-1141443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='https://social.msdn.microsoft.com/profile/Maurits+%5BMSFT%5D' rel='external nofollow' class='url'>Maurits [MSFT]</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141443">
			July 28, 2014 at 10:49 pm</a>		</div>

		<p>@Drak: yup.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-1141453">
				<div id="div-comment-1141453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Neil</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20140728-00/?p=393#comment-1141453">
			July 29, 2014 at 3:56 am</a>		</div>

		<p>In addition to not needing to store the y coordinate of the particle, you also don&#39;t need to store the x coordinate, since that&#39;s its (string) index in the map. (Sadly switching to an array won&#39;t give you an integer enumeration.)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

