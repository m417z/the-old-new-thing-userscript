<html>
<head>
<title>There's nothing wrong with making bold treeview items</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>There&#8217;s nothing wrong with making bold treeview items</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>April 6, 2009 / year-entry #103</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>8</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">Commenter Frans Bouma asks, Why is the text of a treenode chopped off when you switch the font from normal to bold? It apparently is for backwards compatibility but I fail to see why this is necessary for backward compatibility... Actually, bold treeview items work just fine. Watch: Start with our scratch program and make...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
Commenter Frans Bouma asks,
</p>
<blockquote CLASS=q><p>
<a HREF="http://blogs.msdn.com/oldnewthing/pages/407234.aspx#549386">
Why is the text of a treenode chopped off
when you switch the font from normal to bold</a>?
<a href="http://groups.google.com/group/microsoft.public.dotnet.languages.csharp/browse_frm/thread/79297a46ef22f520/a51c76da39b1437a">
It apparently is for backwards compatibility</a>
but I fail to see why this is necessary for backward compatibility...
</p>
</blockquote>
<p>
Actually, bold treeview items work just fine.
Watch:
</p>
<p>
Start with our 
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2003/07/23/54576.aspx">
scratch program</a>
and make these changes:
</p>
<pre>
BOOL
OnCreate(HWND hwnd, LPCREATESTRUCT lpcs)
{
  <font COLOR=blue>g_hwndChild = CreateWindow(
      WC_TREEVIEW, NULL, WS_CHILD | WS_VISIBLE | WS_TABSTOP |
      TVS_HASBUTTONS | TVS_HASLINES | TVS_LINESATROOT,
      0, 0, 0, 0, hwnd, (HMENU)1, g_hinst, 0);

  TVINSERTSTRUCT tvis;
  tvis.hParent = TVI_ROOT;
  tvis.hInsertAfter = TVI_LAST;
  tvis.item.mask = TVIF_TEXT | TVIF_STATE;
  tvis.item.stateMask = TVIS_BOLD;
  tvis.item.state = 0;
  tvis.item.pszText = TEXT("First");

  tvis.hParent = TreeView_InsertItem(g_hwndChild, &tvis);

  tvis.item.pszText = TEXT("Second");
  tvis.item.state = TVIS_BOLD;
  TreeView_InsertItem(g_hwndChild, &tvis);

  tvis.item.pszText = TEXT("Third");
  tvis.item.state = 0;
  TreeView_InsertItem(g_hwndChild, &tvis);</font>

  return TRUE;
}
</pre>
<p>
I elided error checking for expository purposes.
</p>
<p>
This code creates a tree view and populates it as follows:
</p>
<ul>
<li>First
<ul>
<li><b>Second</b>
<li>Third
</ul>
</ul>
<p>
When you run this program, you can see that the text for all
the items appears as expected; nothing is truncated.
</p>
<p>
As for the backward compability remark,
it's quite simple:
<i>Every change, no matter how seemingly insignificant,
has compatibility consequences</i>.
The common controls are heavily used in third party programs,
many of which make strange assumptions about how the controls work,
relying on quirks of implementations in strange ways.
For example,
those who have read
<a HREF="http://www.awprofessional.com/title/0321440307">
the first bonus chapter of my book</a>
will know that even something as seemingly harmless as
fixing a flicker bug in the status bar resulted in
a broken status bar in a program from a major software publisher.
Every change is taken with great trepidation, and the bias is
to preserve bug-for-bug compatibility.
</p>
<p>
In this case, the issue was with the way the width of the treeview
item is calculated.
You can easily imagine programs which worked around the existing behavior
by artificially padding the item with spaces to compensate for
the miscalculation.
If the treeview suddenly fixed the bug,
these treeview items would now be undesirably large,
possibly creating a horizontal scroll bar where there previously
had been none, resulting in 
bugs like "After upgrading, the last item in my treeview is
being covered by a scroll bar."
We saw something like this before when we looked at
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/02/08/369090.aspx">
the effects of the <code>DS_SHELLFONT</code> dialog style</a>:
Fixing the bug described in that article would result in property
sheet pages coming out undesirably large (because their sizes were
artificially inflated to compensate for the erroneous calculation).
</p>
<p>
That doesn't mean the bug can't get fixed, however.
Just as the <code>DS_SHELLFONT</code> flag is a signal to say
that your property sheet page wants to use the new calculations,
you can tell the tree view
"Please give me the version of the treeview that fixes the
font bug" by sending it the <code>CCM_SETVERSION</code> message
and specifying that you want version&nbsp;5.
Similarly, you can opt into version&nbsp;6 of the common controls
by providing a manifest.
</p>
<p>
<b>Update</b>:
I slipped a subtlety into this article which
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2009/04/06/9532674.aspx#9533858">
it appears people didn't pick up on</a>,
so I'll make it explicit.
</p>
<p>
The original question was about "switching the font from normal to bold",
but there are multiple ways of doing this.
My sample code used the recommended (declarative) method of setting the
<code>TVIS_BOLD</code> flag.
But if you click through the link, you'll see that
the original commenter was using the procedural method of
handling the <code>NM_CUSTOMDRAW</code> notification,
selecting a new font
(a boldface variation of the normal font),
and returning <code>CRF_NEWFONT</code>.
This is a technique I had illustrated previously with
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2005/09/16/468800.aspx">
list views</a>
and
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/06/27/648493.aspx">
tool tips</a>.
</p>
<p>
The compatibility behavior is for fonts customized via
<code>NM_CUSTOMDRAW</code>.
The declarative method was added specifically to address the bug
in item size calculations when people change the font procedurally:
Older versions of the treeview control asked for the custom font
only when painting; it didn't ask for the custom font when measuring.
Adding the font query to version&nbsp;6 was actually quite risky,
since the only way to ask the application for the procedurally-applied
font is to <i>actually go through the motions of drawing it</i>,
generating a
<a HREF="http://blogs.msdn.com/oldnewthing/archive/2006/03/27/561924.aspx">
dummy <code>NM_CUSTOMDRAW</code> notification
with an empty paint rectangle</a>.
If an application painted outside the rectangle, you would have seen
seen random painting on the screen.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (8)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-724293">
				<div id="div-comment-724293" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">John</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623#comment-724293">
			April 6, 2009 at 10:42 am</a>		</div>

		<p>I don&#8217;t follow. &nbsp;First you say that the treeview works as expected, implying that there is no bug. &nbsp;Then you start talking about a bug in the treeview. &nbsp;I think you are trying to say that the bug is only present in older versions of the library, but that point wasn&#8217;t made 100% clear. &nbsp;In that case, the issue is that the older version of the library is getting loaded in his application; then he could use the manifest or CCM_SETVERSION approach to get the fixed behavior.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724323">
				<div id="div-comment-724323" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pinky</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623#comment-724323">
			April 6, 2009 at 11:49 am</a>		</div>

		<blockquote><p>
  Update: I slipped a subtlety into this article which &nbsp;&gt; it appears people didn&#8217;t pick up on, so I&#8217;ll make it &gt; explicit.
</p></blockquote>
<p>Sorry for not writing a comment, it&#8217;s spring time on my Gregorian calendar, that large plasmatoid sphere is radiating an overdoses of UV waves so in short it&#8217;s epic hot. I, for one, rather relocate back to an ancient natural environment in order to absorb the scent of a phenomenon strange to many programmers called &quot;flowers&quot; (which don&#8217;t have anything to do with engineering either).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724353">
				<div id="div-comment-724353" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">DriveA</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623#comment-724353">
			April 6, 2009 at 1:20 pm</a>		</div>

		<p>But if you poll for the TVIS_BOLD value, you&#8217;ll get the right behavior 50% of the time. &nbsp;And the other 50% of the time the backward compatibilty of chopping off the text will come into play. &nbsp;So half the time you&#8217;ll make a quarter of the people happy, and the other half of the time you&#8217;ll make the other quarter of the people happy.</p>
<p>In the end, everyone is happy except the half who don&#8217;t have properly implemented treeview drivers.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724393">
				<div id="div-comment-724393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">pepkaro@hotmail.com</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623#comment-724393">
			April 6, 2009 at 2:16 pm</a>		</div>

		<p>Interesting side note: This behavior exists even in windows forms. &nbsp;Changing from regular text to bold cuts off the text. &nbsp;Guess even Microsoft&#8217;s own developers fall to this one. &nbsp;:)</p>
<p>(FYI: a fix for the forms TreeView is to have every node start bold, and then REMOVE the bold for ones that shouldn&#8217;t have it.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724483">
				<div id="div-comment-724483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.jeff-yeary.info' rel='external nofollow' class='url'>Jeffery Yeary</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623#comment-724483">
			April 7, 2009 at 12:03 am</a>		</div>

		<p>Does Microsoft document which programs were the drivers behind which compatibility decisions? Is there some master database that says for the treeview these programs rely on the previous behavior on how a width of the treeview item is calculated?</p>
<div class=post>[<i>No such master database devoted solely to compatibility decisions. They&#8217;re mixed in with all the other decisions. And a lot of these decisions are made without a specific target in mind. Because if there&#8217;s an undocumented behavior that could be relied upon, odds are pretty good that somebody <u>does</u> rely on it. I mean, look at all the people who rely on Explorer&#8217;s private listview data! -Raymond</i>]</div>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724523">
				<div id="div-comment-724523" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jeffrey L. Whitledge</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623#comment-724523">
			April 7, 2009 at 8:32 am</a>		</div>

		<p>&quot;I elided error checking for expository purposes.&quot;</p>
<p>That&#8217;s the exact text that appears in all my method headers!</p>
<p>(j/k of course.)</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-724703">
				<div id="div-comment-724703" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.accidentalscientist.com' rel='external nofollow' class='url'>Simon Cooke</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623#comment-724703">
			April 8, 2009 at 2:24 am</a>		</div>

		<p>Hey Pepkaro&#8230; Mea culpa.</p>
<p>Yep, I wrote the first version of the code that lets you change the styles of treeview items in the Winforms framework.</p>
<p>And yep, it was busted. At the time, shipping a custom version of Comctl for .NET wasn&#8217;t an option. (IIRC, .NET 2.0 fixed that &#8211; but I&#8217;d moved on by then). If it had been an option, you can bet that I&#8217;d have gone in there and fixed vertical tabs too. (The code which calculated the space on the tab for the text was wrong in some combinations of vertical alignment and left/right side&#8230; and it was a rats nest in there). Which is why (IIRC), Vertical tabs aren&#8217;t allowed in .NET 1.0.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-724723">
				<div id="div-comment-724723" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">peterchen</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20090406-00/?p=18623#comment-724723">
			April 8, 2009 at 5:42 am</a>		</div>

		<p>Explorer has private listview data? *MUST* *NOT* *INVESTIGATE* </p>
<p>;)</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

