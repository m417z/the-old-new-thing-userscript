<html>
<head>
<title>How do I pass a lot of data to a process when it starts up?</title>
<link rel="stylesheet" href="page.css">
</head><body>
<div class="titlediv"><h2>How do I pass a lot of data to a process when it starts up?</h2></div>
<div class="hdrdiv"><table class="hdrtable" cellspacing="0" cellpadding="0">
<tr><td><b>Date:</b></td><td>December 11, 2003 / year-entry #158</td></tr>
<tr><td><b>Tags:</b></td><td>code</td></tr>
<tr><td><b>Orig Link:</b></td><td>https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543</td></tr>

<tr><td><b>Comments:&nbsp;&nbsp;&nbsp;&nbsp;</b></td><td>18</td></tr>
<tr><td valign="top"><b>Summary:</b></td><td valign="top">As we discussed yesterday, if you need to pass more than 32767 characters of information to a child process, you'll have to use something other than the command line. One method is to wait for the child process to go input idle, then FindWindow for some agreed-upon window and send it a WM_COPYDATA message. This...</td></tr>
</table></div>
<hr/>
<table class="contenttable" cellspacing="0" cellpadding="0"><tr><td><div class="contentdiv">
<!-- CONTENT START -->
<p>
As we discussed
<a HREF=http://blogs.gotdotnet.com/raymondc/PermaLink.aspx/4dfa171c-3dc6-4382-b38b-c82d391939f0>yesterday</a>, if you need to pass more than
32767 characters of information to a child process, you'll
have to use something other than the command line.
</p>
<p>
One method is to wait for the child process to go input idle,
then <code>FindWindow</code> for some agreed-upon window and
send it a <code>WM_COPYDATA</code> message.  This method has
a few problems:
</p>
<ul>
<li>You have to come up with some way of knowing that the
child process has created its window so you can start looking
for it.  (<code>WaitForInputIdle</code> is helpful here.)</p>
<li>You have to make sure the window you found belongs to
the child process and isn't just some other window which
happens to have the same name by coincidence.
Or, perhaps, not by coincidence: If there is more than once
instance of the child process running, you will need to
make sure you're talking to the right one.
(<code>GetWindowThreadProcessId</code> is helpful here.)</p>
<li>You have to hope that nobody else manages to find the
window and send it the <code>WM_COPYDATA</code> before you do.
(If they do, then they have effectively taken over your child
process.)</p>
<li>The child process needs to be alert for the possibility of
a rogue process sending bogus <code>WM_COPYDATA</code> messages in
an attempt to confuse it.
</ul>
</p>
<p>
The method I prefer is to use anonymous shared memory.
The idea is to create a shared memory block and fill it with
goodies. Mark the handle as inheritable, then spawn the child
process, passing the numeric value of the handle on the command
line. The child process parses the handle out of its command
line and maps the shared memory block to see what's in it.
</p>
<p>
Remarks about this method:
</p>
<ul>
<li>You need to be careful to validate the handle, in case
somebody tries to be sneaky and pass you something bogus
on your command line.</p>
<li>In order to mess with your command line, a rogue process
needs PROCESS_VM_WRITE permission, and in order to mess
with your handle table, it needs PROCESS_DUP_HANDLE permission.
These are securable access masks, so proper choice of ACLs
will protect you.
(And
<a HREF="http://msdn.microsoft.com/library/en-us/security/security/security_descriptors_for_new_objects.asp">
the default ACLs</a> are usually what you want anyway.)</p>
<li>There are no names that can be squatted or values that
can be spoofed (assuming you've protected the process against
PROCESS_VM_WRITE and PROCESS_DUP_HANDLE).</p>
<li>Since you're using a shared memory block, nothing actually
is copied between the two processes; it is just remapped.
This is more efficient for large blocks of data.
</ul>
</p>
<p>
Here's a sample program to illustrate the shared memory technique.
</p>
<pre>
#include &lt;windows.h&gt;
#include &lt;shlwapi.h&gt;
#include &lt;strsafe.h&gt;

struct STARTUPPARAMS {
    int iMagic;     // just one thing
};
</pre>
<p>
In principle, the <code>STARTUPPARAMS</code> can be
arbitrarily complicated, but for illustrative purposes,
I'm just going to pass a single integer.
</p>
<pre>
STARTUPPARAMS *CreateStartupParams(HANDLE *phMapping)
{
    STARTUPPARAMS *psp = NULL;
    SECURITY_ATTRIBUTES sa;
    sa.nLength = sizeof(sa);
    sa.lpSecurityDescriptor = NULL;
    <font COLOR=blue>sa.bInheritHandle = TRUE</font>;
    HANDLE hMapping = CreateFileMapping(INVALID_HANDLE_VALUE,
                &amp;sa, PAGE_READWRITE, 0,
                <font COLOR=blue>sizeof(STARTUPPARAMS)</font>, NULL);
    if (hMapping) {
        psp = (STARTUPPARAMS *)
                    MapViewOfFile(hMapping, FILE_MAP_WRITE,
                        0, 0, 0);
        if (!psp) {
            CloseHandle(hMapping);
            hMapping = NULL;
        }
    }

    *phMapping = hMapping;
    return psp;
}
</pre>
<p>
The <code>CreateStartupParams</code>
function creates a <code>STARTUPPARAMS</code>
structure in an inheritable shared memory block.
First, we fill out a
<code>SECURITY_ATTRIBUTES</code> structure so we can mark the
handle as inheritable by child processes.  Setting the
<code>lpSecurityDescriptor</code> to NULL means that we will
use the default security descriptor, which is fine for us.
We then create a shared memory object of the appropriate size,
map it into memory, and return both the handle and the
mapped address.
</p>
<pre>
STARTUPPARAMS *GetStartupParams(LPSTR pszCmdLine, HANDLE *phMapping)
{
    STARTUPPARAMS *psp = NULL;
    LONGLONG llHandle;
    if (StrToInt64ExA(pszCmdLine, STIF_DEFAULT, &amp;llHandle)) {
        *phMapping = (HANDLE)(INT_PTR)llHandle;
        psp = (STARTUPPARAMS *)
                MapViewOfFile(*phMapping, FILE_MAP_READ, 0, 0, 0);
        if (psp) {
            //  Now that we've mapped it, do some validation
            MEMORY_BASIC_INFORMATION mbi;
            if (VirtualQuery(psp, &amp;mbi, sizeof(mbi)) &gt;= sizeof(mbi) &amp;&amp;
                mbi.State == MEM_COMMIT &amp;&amp;
                mbi.BaseAddress == psp &amp;&amp;
                <font COLOR=blue>mbi.RegionSize &gt;= sizeof(STARTUPPARAMS)</font>) {
                // Success!
            } else {
                // Memory block was invalid - toss it
                UnmapViewOfFile(psp);
                psp = NULL;
            }
        }
    }
    return psp;
}
</pre>
<p>
The <code>GetStartupParams</code>
function is the counterpart to <code>CreateStartupParams</code>.
It parses a handle from the command line and attempts to map a view.
If the handle isn't a file mapping handle, the call to
<code>MapViewOfFile</code> will fail, so we get that part of the
parameter validation for free.
We use <code>VirtualQuery</code> to validate the size of the memory
block.  (We can't use a strict equality test since the value we
get back will be rounded up to the nearest page multiple.)
</p>
<pre>
void FreeStartupParams(STARTUPPARAMS *psp, HANDLE hMapping)
{
    UnmapViewOfFile(psp);
    CloseHandle(hMapping);
}
</pre>
<p>
After we're done with the startup parameters (either on the
creation side or the consumption side), we need to free them
to avoid a memory leak.
That's what <code>FreeStartupParams</code> is for.
</p>
<pre>
void PassNumberViaSharedMemory(HANDLE hMapping)
{
    TCHAR szModule[MAX_PATH];
    TCHAR szCommand[MAX_PATH * 2];
    DWORD cch = GetModuleFileName(NULL, szModule, MAX_PATH);
    if (cch &gt; 0 &amp;&amp; cch &lt; MAX_PATH &amp;&amp;
        SUCCEEDED(StringCchPrintf(szCommand, MAX_PATH * 2,
                  TEXT("\"%s\" %I64d"), szModule,
                  (INT64)(INT_PTR)hMapping))) {
        STARTUPINFO si = { sizeof(si) };
        PROCESS_INFORMATION pi;
        if (CreateProcess(szModule, szCommand, NULL, NULL,
                          <font COLOR=blue>TRUE</font>,
                          0, NULL, NULL, &amp;si, &amp;pi)) {
            CloseHandle(pi.hProcess);
            CloseHandle(pi.hThread);
        }
    }
}
</pre>
<p>
Most of the work here is just building the command line.
We run ourselves (using
<a HREF=http://blogs.gotdotnet.com/raymondc/PermaLink.aspx/4bfc253c-a714-42f1-bdc5-db9deff3075f>
the <code>GetModuleFileName(NULL)</code>
trick</a>), passing the numerical value of the handle on the command
line, and passing <code>TRUE</code> to <code>CreateProcess</code>
to indicate that we want inheritable handles to be inherited.
Note the extra quotation marks in case our program's name contains
a space.
</p>
<pre>
int CALLBACK
WinMain(HINSTANCE hinst, HINSTANCE hinstPrev,
        LPSTR pszCmdLine, int nShowCmd)
{
    HANDLE hMapping;
    STARTUPPARAMS *psp;
    if (pszCmdLine[0]) {
        psp = GetStartupParams(pszCmdLine, &amp;hMapping);
        if (psp) {
            TCHAR sz[64];
            StringCchPrintf(sz, 64, TEXT("%d"), psp-&gt;iMagic);
            MessageBox(NULL, sz, TEXT("The Value"), MB_OK);
            FreeStartupParams(psp, hMapping);
        }
    } else {
        psp = CreateStartupParams(&amp;hMapping);
        if (psp) {
            psp-&gt;iMagic = 42;
            PassNumberViaSharedMemory(hMapping);
            FreeStartupParams(psp, hMapping);
        }
    }
    return 0;
}
</pre>
<p>
At last we put it all together.
If we have a command line parameter, then this means that we
are the child process, so we convert it into a
<code>STARTUPPARAMS</code> and display the number that was
passed.
If we don't have a command line parameter, then this means
that we are the parent process, so we create a
<code>STARTUPPARAMS</code>, stuff the magic number into it
(42, of course), and pass it to the child process.
</p>
<p>
So there you have it: Passing a "large" (well, okay, small in
this example, but it could have been megabytes if you wanted)
amount of data securely to a child process.</p>
<!-- CONTENT END -->
</div></td></tr></table>
<hr/>
<table class="commenttable" cellspacing="0" cellpadding="0"><tr><td><div class="commentdiv"><div class="commentdivhdr">
<!-- COMMENTS START -->
Comments (18)	</div>

	
			<div class="navigation pagination clear-both">
					</div>

		<ol class="comment-list">
					<li class="comment even thread-even depth-1" id="comment-134363">
				<div id="div-comment-134363" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134363">
			December 11, 2003 at 11:00 am</a>		</div>

		<p>There&#8217;s a race condition there, isn&#8217;t there? What if the parent manages to execute FreeStartupParams before the child got to MapViewOfFile? The mapping object will disappear.</p>
<p>You also need an unnamed event object (manual reset, initially unsignalled) created by the parent process, the handle to it passed on the command line in the same way as the mapping object; the child must signal it after calling GetStartupParams, and the server must wait on it before calling FreeStartupParams.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134373">
				<div id="div-comment-134373" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134373">
			December 11, 2003 at 11:33 am</a>		</div>

		<p>No race condition here,: The handle was duplicated into the child process when you specified bInherit = TRUE. So now there are two handles to the shared memory block, one in the parent and one in the child. A shared memory object is not destroyed until all handles are closed.  If the parent closes its handle first, no problem &#8211; the child still has an open handle. Only after both the parent and the child call FreeStartupParams (in whichever order) does the object get destroyed.</p>
<p>So it&#8217;s good that no synchronization is needed, because adding synchronization would create another potential for a bug: What if somebody else manages to sneak in and signal the event before the child gets it? What if the child gets confused and never signals the handle? (For example, it may have run into a critical error in its startup and never got off the ground.)  This method is a safe &quot;fire and forget&quot; &#8211; you push the data into the child and now it&#8217;s all the child&#8217;s problem. The parent&#8217;s hands are clean.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134383">
				<div id="div-comment-134383" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Catatonic</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134383">
			December 11, 2003 at 2:12 pm</a>		</div>

		<p>Excellent article! One question &#8211; I gather this technique is not suitable if I want to continue sending data back &amp; forth after startup (I might use pipes for that).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134393">
				<div id="div-comment-134393" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134393">
			December 11, 2003 at 3:36 pm</a>		</div>

		<p>You can use a similar trick to pass a pair of anonymous pipe handles on the command line &#8211; then you can talk back and forth over the pipes.  Note that if you do this, the parent needs to watch out for the child ends of the pipes getting wedged or dying spontaneously &#8211; you don&#8217;t want to leave zombies in the parent waiting around for nonexistent children.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134403">
				<div id="div-comment-134403" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://www.dimmick.demon.co.uk/' rel='external nofollow' class='url'>Mike Dimmick</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134403">
			December 11, 2003 at 5:48 pm</a>		</div>

		<p>Thanks for clearing that up, Raymond. For some reason I was thinking an inherited handle was only counted once, not twice.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134413">
				<div id="div-comment-134413" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134413">
			December 11, 2003 at 7:39 pm</a>		</div>

		<p>I much prefer the anonymous pipe method. Simpler code, and easily portable to Unix if the need arises.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134423">
				<div id="div-comment-134423" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134423">
			December 11, 2003 at 8:49 pm</a>		</div>

		<p>*cough*cough* sockets *cough*cough*</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134433">
				<div id="div-comment-134433" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Diego</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134433">
			December 11, 2003 at 10:19 pm</a>		</div>

		<p>Why not just put the data you want to pass into a temp file (in the temp dir?) and just pass it&#8217;s location as the first param to the child process?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134443">
				<div id="div-comment-134443" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Jordan Russell</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134443">
			December 12, 2003 at 1:03 am</a>		</div>

		<p>This line caught my eye:</p>
<p>            if (VirtualQuery(psp, &amp;mbi, sizeof(mbi)) &gt;= sizeof(mbi) &amp;&amp;</p>
<p>Is the &quot;&gt;=&quot; a typo, or is there really a case where VirtualQuery will return a value greater than that specified in the dwLength parameter?</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134453">
				<div id="div-comment-134453" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134453">
			December 12, 2003 at 1:48 am</a>		</div>

		<p>1. *cough* sockets &#8211; fine, go ahead and use sockets. I won&#8217;t stop you. I didn&#8217;t say this was the only way of doing things. It&#8217;s just that sockets require the parent to babysit the child, whereas anonymous shared memory is fire-and-forget.</p>
<p>2. Temporary file: Now you have to worry about when to delete the temporary file. The parent needs to delete the temporary file if the child process somehow failed to get off the ground; detecting this is tricky.</p>
<p>3. Return value of VirtualQuery: Equality would work here as well. I just had inequality on the brain due to the later size test.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134463">
				<div id="div-comment-134463" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Anonymous</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134463">
			December 12, 2003 at 2:19 am</a>		</div>

		<p>Err, that socket comment was in response to anonymous pipes. I&#8217;d personally use shared memory for passing data in a real app or temp files in dummy throw away apps.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134473">
				<div id="div-comment-134473" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134473">
			December 12, 2003 at 11:32 am</a>		</div>

		<p>Sockets: Anonymous pipes have the advantage of avoiding the network stack. You don&#8217;t need to load winsock, negotiate a version via WSAInitialize, etc.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-134483">
				<div id="div-comment-134483" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Eugene Gershnik</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134483">
			December 12, 2003 at 3:02 pm</a>		</div>

		<p>Just use _popen() conveniently provided by VC. This avoids the pre-calculating shared memory size, manually setting up pipes, dealing with sockets, caring about passing and validating the handle values and whole lot of other issues.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-134493">
				<div id="div-comment-134493" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://blogs.gotdotnet.com/raymondc/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-134493">
			December 12, 2003 at 4:15 pm</a>		</div>

		<p>Notice however that _popen works only for console apps.  &quot;The _popen function returns an invalid file handle, if used in a Windows program, that will cause the program to hang indefinitely.&quot;</p>
<p>Note also that if you do this, the child process won&#8217;t be able to accept input from the user via stdin or stdout since they got hooked up to the parent instead.  _popen is more for running a child process in the background and feeding it input / capturing its output.</p>
<p>You can still use it if you like. Just be aware of the limitations.</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-174893">
				<div id="div-comment-174893" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">Julian Rozentur</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-174893">
			May 17, 2004 at 5:19 pm</a>		</div>

		<p>How about simply passing in the data as standard input for the child process? The STARTUPINFO structure has hStdInput member where you pass a handle to a file with data (possibly, memory-mapped).</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-174953">
				<div id="div-comment-174953" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-174953">
			May 17, 2004 at 11:56 pm</a>		</div>

		<p>Of course this means you now have to worry about who will delete the file&#8230;</p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment even thread-even depth-1" id="comment-196223">
				<div id="div-comment-196223" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn">IgorF</cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-196223">
			July 19, 2004 at 7:46 am</a>		</div>

		<p>I recently cooked up a very similar mechanism for doing this, and I&#8217;m glad to see it validated as a design approach.</p>
<p>There&#8217;s one thing that I&#8217;m unclear about though&#8211;what exactly are the child process&#8217;s responsibilities regarding closing inherited handles? In your example, you explicitly close the inherited handle. Is that strictly necessary? What if the child process barfs early at startup for some reason and bails before even looking at its args? Or what if a child process is created with inheritable handles that it doesn&#8217;t even know to look for? Are those handles then leaked? And does it really matter if the child is short-lived, or does process shutdown clean things up to satisfaction?</p>
<p>As far as I can tell the docs are silent on this. </p>

		
				</div>
		</li><!-- #comment-## -->
		<li class="comment odd alt thread-odd thread-alt depth-1" id="comment-196243">
				<div id="div-comment-196243" class="comment-body">
				<div class="comment-author vcard">
						<cite class="fn"><a href='http://weblogs.asp.net/oldnewthing/' rel='external nofollow' class='url'>Raymond Chen</a></cite> <span class="says">says:</span>		</div>
		
		<div class="comment-meta commentmetadata"><a href="https://blogs.msdn.microsoft.com/oldnewthing/20031211-00/?p=41543#comment-196243">
			July 19, 2004 at 8:07 am</a>		</div>

		<p>The child process&#8217;s responsibilities are exactly the same as with handles it opened itself. </p>
<p><a target="_new" href="http://msdn.microsoft.com/library/en-us/dllproc/base/terminating_a_process.asp" rel="nofollow">http://msdn.microsoft.com/library/en-us/dllproc/base/terminating_a_process.asp</a></p>
<p>&quot;Open handles to files or other resources are closed automatically when a process terminates. However, the objects themselves exist until all open handles to them are closed. This means that an object remains valid after a process closes, if another process has a handle to it.&quot;</p>

		
				</div>
		</li><!-- #comment-## -->
		</ol><!-- .comment-list -->

		<div class="navigation pagination">
					</div>

	
			<p class="no-comments">Comments are closed.</p>
<!-- COMMENTS END -->
</div></td></tr></table>

</body>
</html>
<br/><div class="disclaimer">
*DISCLAIMER: I DO NOT OWN THIS CONTENT. If you are the owner and would like it removed, please
<a target="_blank" href="/contact.htm">contact me</a>.
The content herein is an archived reproduction of entries from
Raymond Chen's "Old New Thing" Blog (most recent link is <a target="_blank" href="https://devblogs.microsoft.com/oldnewthing/">here</a>).
It may have slight formatting modifications for consistency and to improve readability.
<br/><br/>
WHY DID I DUPLICATE THIS CONTENT HERE?
Let me first say this site has never had anything to sell and has never shown ads of any kind. I have nothing monetarily to gain by duplicating content here.
Because I had made my own local copy of this content throughout the years, for ease of using tools like grep, I decided to put it online after I discovered
some of the original content previously and publicly available, had disappeared approximately early to mid 2019.
At the same time, I present the content in an easily accessible theme-agnostic way.
<br/><br/>
The information provided by Raymond's blog is, for all practical purposes, more authoritative on Windows Development than Microsoft's
own MSDN documentation and should be considered supplemental reading to that documentation. The wealth of missing details
provided by this blog that Microsoft could not or did not document about Windows over the years is vital enough, many would agree an online "backup" of these details
is a necessary endeavor. Specifics include:<br/>
<ul>
    <li>
        A "redesign" after 2019 erased thousands of user's comments from previous years. As many have stated, the comments are nearly as important as the postings themselves.
        The archived copies of the postings contained here retain the original comments.
    </li>
    <li>
        The blog has changed domains many times and the urls have otherwise been under constant change since 2003.
        Even when proper redirection has been set up for those links, redirection only works for a limited period of time.
        For example, all of the internal blog links that were valid in early 2019, were broken by 2020 without proper redirection.
    </li>
    <li>
        The blog has been under constant re-design and re-theming since its inception.
        It is downright irritating to deal with a bogged-down site experience as the result of the latest visual themes designed for cell-phone browsers.
        As of this writing, it is cumbersome to navigate titles with only 10 entries per page.
        While it is nice that the official site has a search feature, searching using this index (with all titles on a single page) is much quicker (CTRL-F in most browsers).
    </li>
</ul>
</div><br/>
&lt;-- Back to <a href="index.htm">Old New Thing Archive Index</a>

